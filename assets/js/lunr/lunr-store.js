var store = [{
        "title": "Reference links",
        "excerpt":"Reference   ","categories": ["Links"],
        "tags": ["uncategorized","links"],
        "url": "https://mahedee.github.io//reference-articles/",
        "teaser":null},{
        "title": "Most used docker commands",
        "excerpt":"Some most used commands for docker   Stop all docker containers   docker stop $(docker ps -a -q)  Remove all docker containers  docker rm $(docker ps -a -q)  Remove all docker images  docker rmi $(docker images -q)  Deleting no longer needed containers (stopped)  docker container prune   Deleting no longer needed images  docker image prune   Delete all volumes, which are not used by any existing container  docker volume prune  Same for unused networks  docker network prune  ","categories": ["Docker"],
        "tags": ["command","docker"],
        "url": "https://mahedee.github.io//commands-for-docker/",
        "teaser":null},{
        "title": "Learn About Microsoft SQL Server Disaster Recovery Best Practices",
        "excerpt":"Disaster Recovery is one of the burning issues in today’s tech world. While data has become the most important component of business, the rate of data loss, data deletion, and data corruption is increasing. You never know when a disaster might occur and attack our database. Therefore, you have to prepare ourselves to deal with any disaster. Precautions about disaster in equally important for SQL Server user. SQL Database is often vulnerable to different natural and man-created disasters. To safeguard the data, it is necessary to have complete knowledge about Microsoft SQL Server disaster recovery best practices. In this post, we will share with you some of Disaster Recovery practices that are considered as the best.   Best Practices Of SQL Server Disaster Recovery   The most effective practices of SQL Disaster Recovery involve looking into the database architecture and create solutions for every possible situation. The solutions can involve backup and other measures of data protection. Let us learn about all the best Disaster Recovery practices.      Design a Solution that Properly Addresses the Problem   While creating a solution for any problem, you have to make sure that it does not end up creating more problems. Though no design can be called perfect, you must focus on developing the best design that is capable of solving the problem and provide enhanced opportunity. While doing this, always note down why you picked up this particular design over others and how can this meet your goal of solving the problem. At times, when improvement in the solution is expected, design must be compatible with the current SQL Server version. Also, consider the impacts of changes on all the dependent materials, if you are planning to make any changes.      Find out Possible Weakness of the Solution   No solution design is completely flawless and that is why it is crucial to accept the limitations. This acknowledgment will help you to prepare for the disaster in a better way. There is no shame in having solutions with limited capabilities because of restricted resources and changing circumstances. But the main issue lies in accepting it and find about about automated solutions that can fulfill the limitations of the design. The same policy should be followed in other cases like active-active replication, availability group, etc.           Consider All other Possible Situations  Usually, the solution design and its limitations are evaluated based on our knowledge. But what if something else happens that you are not even considering at this point? Your knowledge (or the lack of it) can be your weak point. To counter these issues, you can consider hiring a consultant/ expert to check the design and find out its limitations.            Create the Solution  After you find out about all the possible flaws of your design, you need to create the solution as soon as possible. The solution can be anything: backup restoration or Server addition. But, it should be created without wasting any time as you do not know when the disaster might happen. The more you wait, the more risk you put your data into.            Drill, Drill, and Drill  The most important thing after setting up the Disaster Recovery Solution is to practice/ drill it. Without drilling, the complete Disaster Recovery project remains incomplete. For drilling, you can re-create the situation in a test environment and then run the solution. Do not forget to have a backup of the solution. Saving the solution script in the test environment without backup can put you in danger if the Server fails.            Train Junior DBAs  Drilling for Disaster Recovery is the best time to train the database admins who are new in this profession. Through simulation, they can be prepared for the worst situations that may occur to cover by themselves. Through practices, junior DBAs become comfortable with the “state of panic” and learn how to handle the situation.            Coordination between All the teams  In case of large-sized environments, the entire disaster recovery procedure should be done by coordinating with multiple teams like DB Admin team, System team and Developer team. In organizations that do not have this type of team division, coordination must involve everyone who might become affected by the disaster.            Appreciation and Incentive  Do not forget to appreciate yourself and everyone else involved in creating the solution and drilling it. Acknowledgment of all the good work done will function as the incentive for future.            SQL Recovery Tool As The Last Resort For Data Recovery  These are some of the best practices that can be done to protect SQL Server database during any disaster. However, these cannot assure the foolproof safety of your database items. If you have lost data from your database due to any disaster, you can take the help of SQL Recovery Tool. This application can retrieve all the deleted data from your database regardless of the cause of data loss. This application is suitable for all the latest versions of SQL Server including SQL 2017.       Conclusion  In this post, we have depicted Microsoft SQL Server Disaster Recovery best practices. Reading this, users will become aware of the practices that should be performed to ensure maximum protection against the disasters. If you still lose some data, use SQL Recovery to get back lost data of your database.   Author: Andrew Jackson  ","categories": ["SQL Server","Database"],
        "tags": ["sqlserver","database"],
        "url": "https://mahedee.github.io//sample-post/",
        "teaser":null},{
        "title": "Some important links",
        "excerpt":"   How to Install XAMPP and WordPress Locally on Windows PC  ","categories": ["Links"],
        "tags": ["uncategorized","links"],
        "url": "https://mahedee.github.io//some-important-links/",
        "teaser":null},{
        "title": "Run Jekyll on local machine",
        "excerpt":"  Go to root directory   Run the following command  bundle exec jekyll serve -w  You will see an url like  Server address: http://127.0.0.1:4000  Go to this url and see locally &lt;!– ### References     Test –&gt;  ","categories": ["Blog","Jekyll"],
        "tags": ["testag","jekyll"],
        "url": "https://mahedee.github.io//run-minimal-mistake-locally-on-windows/",
        "teaser":null},{
        "title": "Install jekyll on windows step by step",
        "excerpt":"Install jekyll on windows step by step   Here is the list of tools or plugins I needed to install to run the blog locally.   Windows      Install jekyll on windows   VSCode extensions      Markdown All in One   Code Spell Checker   Steps      run bundle install (first time only)   bundle exec jekyll serve to serve the application   Tools that didn’t work   For some unknown reason, installing via choco didn’t didn’t work.      Chocolatey (Kept)   Jekyll (Removed)  ","categories": ["Blog","Configuration","Jekyll"],
        "tags": ["jekyll","uncategorized"],
        "url": "https://mahedee.github.io//install-jekyll-on-windows/",
        "teaser":null},{
        "title": "Important notes",
        "excerpt":"Some important notes   How to run this site using visual studio code  bundle exec jekyll serve  Application will run here  http://127.0.0.1:4000/   or you can type  bundle exec jekyll serve -o  which will build the application run on the url   Tips for visual studio code  To view command in visual studio code  Type ctrl+shift+p   Important Links     Architecture Playbook   Government Digital Service   Minimal Mistakes - A Jekyll theme   Repository for this website  Storage Repository: https://github.com/mahedee/my-blogs  Site Repository : https://github.com/mahedee/mahedee.github.io   Convert markdown to jekyll  ","categories": ["Blog","VS Code","Links"],
        "tags": ["notes","unpublished"],
        "url": "https://mahedee.github.io//some-important-note/",
        "teaser":null},{
        "title": "Essential plugins for Visual Studio code",
        "excerpt":"Essential plugins for Visual Studio code      C#   Java Extension Pack   Markdown Preview Enhanced     ","categories": ["Markdown","VS Code"],
        "tags": ["vscode"],
        "url": "https://mahedee.github.io//essential-plugins-for-vs-code/",
        "teaser":null},{
        "title": "Face Recognition Using Microsoft Vision API",
        "excerpt":"Factorial Calculator using C# July 1, 2018 Mahedee Fb-Button   Factorial is a positive number which is the product of all number less than or equal to that positive number. For example:   0! = 1  1! = 1  2! = 2 * 1! = 2  3! = 3 * 2! = 6  …  n! = n * (n – 1)!   Here is the sample code to calculate Factorial using both loop and recursion using c#.   using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks;  namespace Factorial01 {     /// &lt;summary&gt;     /// Author: Md. Mahedee Hasan     /// &lt;/summary&gt;     class Program     {         static void Main(string[] args)         {             int number = 0;             Console.WriteLine(\"Enter an integer number to calculate factorial: \");             Int32.TryParse(Console.ReadLine(), out number);              Console.WriteLine(\"Factorial of \" + number + \" is (using loop): \" + CalculateFactoial(number));             Console.WriteLine(\"Factorial of \" + number + \" is (Using recursion): \" + Factorial(number));             Console.ReadLine();         }          //Calculate factorial using loop          private static int CalculateFactoial(int number)         {             int factorial = 1;             for (int counter = 1; counter &lt;= number; counter++)             {                 factorial = factorial * counter;             }             return factorial;         }          //Calculate factorial using recursion         private static int Factorial(int number)         {             if (number == 0)                 return 1;             else                 return number * Factorial(number - 1);         }     } }   ","categories": ["C#","Data Structures","Algorithms"],
        "tags": ["datastructures","algorithms","csharp"],
        "url": "https://mahedee.github.io//factorial-calculator-using-c/",
        "teaser":null},{
        "title": "Face Recognition Using Microsoft Vision API",
        "excerpt":"Using computer vision API, you can analyze an image. To analyze an image, you can either upload an Image or specify an Image URL.   Prerequisite      A subscription keys. To get a subscription key go to this link: Obtaining Subscription Keys.   Need an IDE for example: Visual Studio 2017   Step to create a sample application:      Open visual studio and create a console application   Replace content of the Program.cs file by the following code.   using System; using System.IO; using System.Net.Http; using System.Net.Http.Headers; using System.Text;  namespace FaceDemo {     class Program     {         //NOTE: To create subscription key         //To create subscription key. Go to azure portal search emotion and create face key          // Replace  with your valid subscription key.         //It actually not subscription key. Its cognitive-face01 Key1         //To find subscriptionkey, go to Home-&gt;CognitiveFace01-&gt;ManageKeys (KEY 1)'         const string subscriptionKey = \"\";         //\"ac45c7cf-d3be-400c-95ab-4fc82887da98\";          // NOTE: You must use the same region in your REST call as you used to         // obtain your subscription keys. For example, if you obtained your         // subscription keys from westus, replace \"westcentralus\" in the URL         // below with \"westus\".         //         // Free trial subscription keys are generated in the \"westus\" region.         // If you use a free trial subscription key, you shouldn't need to change         // this region.          //To find uriBase, go to Home-&gt;CognitiveFace01-&gt;EndPoint + '/detect'         const string uriBase =             \"https://southcentralus.api.cognitive.microsoft.com/face/v1.0/detect\";          static void Main(string[] args)         {             // Get the path and filename to process from the user.             Console.WriteLine(\"Detect faces:\");             Console.Write(                 \"Enter the path to an image with faces that you wish to analyze: \");              //Image path you want to detect             string imageFilePath = @\"D:\\Projects\\Github\\ms-cognitive\\FaceDemo\\Images\\mahedee-buet.jpg\";              //Console.ReadLine();              if (File.Exists(imageFilePath))             {                 try                 {                     MakeAnalysisRequest(imageFilePath);                     Console.WriteLine(\"\\nWait a moment for the results to appear.\\n\");                 }                 catch (Exception e)                 {                     Console.WriteLine(\"\\n\" + e.Message + \"\\nPress Enter to exit...\\n\");                 }             }             else             {                 Console.WriteLine(\"\\nInvalid file path.\\nPress Enter to exit...\\n\");             }             Console.ReadLine();         }          // Gets the analysis of the specified image by using the Face REST API.         static async void MakeAnalysisRequest(string imageFilePath)         {             HttpClient client = new HttpClient();              // Request headers.             client.DefaultRequestHeaders.Add(                 \"Ocp-Apim-Subscription-Key\", subscriptionKey);              // Request parameters. A third optional parameter is \"details\".             string requestParameters = \"returnFaceId=true&amp;returnFaceLandmarks=false\" +                 \"&amp;returnFaceAttributes=age,gender,headPose,smile,facialHair,glasses,\" +                 \"emotion,hair,makeup,occlusion,accessories,blur,exposure,noise\";              // Assemble the URI for the REST API Call.             string uri = uriBase + \"?\" + requestParameters;              HttpResponseMessage response;              // Request body. Posts a locally stored JPEG image.             byte[] byteData = GetImageAsByteArray(imageFilePath);              using (ByteArrayContent content = new ByteArrayContent(byteData))             {                 // This example uses content type \"application/octet-stream\".                 // The other content types you can use are \"application/json\"                 // and \"multipart/form-data\".                 content.Headers.ContentType =                     new MediaTypeHeaderValue(\"application/octet-stream\");                  // Execute the REST API call.                 response = await client.PostAsync(uri, content);                  // Get the JSON response.                 string contentString = await response.Content.ReadAsStringAsync();                  // Display the JSON response.                 Console.WriteLine(\"\\nResponse:\\n\");                 Console.WriteLine(JsonPrettyPrint(contentString));                 Console.WriteLine(\"\\nPress Enter to exit...\");             }         }           // Returns the contents of the specified file as a byte array.         static byte[] GetImageAsByteArray(string imageFilePath)         {             using (FileStream fileStream =                 new FileStream(imageFilePath, FileMode.Open, FileAccess.Read))             {                 BinaryReader binaryReader = new BinaryReader(fileStream);                 return binaryReader.ReadBytes((int)fileStream.Length);             }         }          // Formats the given JSON string by adding line breaks and indents.         //Json Perser          static string JsonPrettyPrint(string json)         {             if (string.IsNullOrEmpty(json))                 return string.Empty;              json = json.Replace(Environment.NewLine, \"\").Replace(\"\\t\", \"\");              StringBuilder sb = new StringBuilder();             bool quote = false;             bool ignore = false;             int offset = 0;             int indentLength = 3;              foreach (char ch in json)             {                 switch (ch)                 {                     case '\"':                         if (!ignore) quote = !quote;                         break;                     case '\\'':                         if (quote) ignore = !ignore;                         break;                 }                  if (quote)                     sb.Append(ch);                 else                 {                     switch (ch)                     {                         case '{':                         case '[':                             sb.Append(ch);                             sb.Append(Environment.NewLine);                             sb.Append(new string(' ', ++offset * indentLength));                             break;                         case '}':                         case ']':                             sb.Append(Environment.NewLine);                             sb.Append(new string(' ', --offset * indentLength));                             sb.Append(ch);                             break;                         case ',':                             sb.Append(ch);                             sb.Append(Environment.NewLine);                             sb.Append(new string(' ', offset * indentLength));                             break;                         case ':':                             sb.Append(ch);                             sb.Append(' ');                             break;                         default:                             if (ch != ' ') sb.Append(ch);                             break;                     }                 }             }              return sb.ToString().Trim();         }     } }      Replace your subscription key   Replace your image path   Now you will see the following output of the given image. Output describes: Face attribute, gender, age, emotion etc.                  Input Image       Output                                         ","categories": ["AI","Machine Learning","C#"],
        "tags": ["ai","machinelearning","csharp"],
        "url": "https://mahedee.github.io//face-recognition-using-microsoft-vision-api/",
        "teaser":null},{
        "title": "Fix SQL Error 924 Without Any Data Loss – Most Accurate Way",
        "excerpt":"SQL Server is Microsoft’s relational database management system(RDBMS). It is used to primarily stores and retrieves data requested by other application. It is a programming language developed to handle data in a relational database management system. It is known that a database server is a computer program which provides database services to other programs and defined as a client-server model. Hence, the SQL Server is a database server that is used to implement the Structured Query Language (SQL). Due to its platform independence, it can be functioned on both GUI and command based software.   Similar to other applications, SQL Server also prompts different types of error. It is mostly encountered by an individual user or a system administrator. One such error is “SQL error 924” or “Msg 924 Database is already open and can only have one user at a time”. This blog mentions the reasons for SQL error code 924 and its possible solutions.   User Queries  Let us take a glance for the various error messages which appear in an SQL Server. These queries have been taken from various tech-forums which are relevant to SQL error code 924. Some of them are mentioned below:   “During the execution course to restore project command in SQL Server Management Studio. I encountered an error “Exclusive access could not be obtained because the database is in use”.Then, I went to the database properties and switched to Single User mode. After which, I am unable to switch it back to multi-user mode. I get the error message “Msg 924 Database is already open and can only have one user at a time.” Would I be able to solve this error, please help!”   “When I tried to open the SQL database “AdventureWorks” in a single user mode, an error message was displayed stating, Database ‘AdventureWorks’ is already open and can only have one user at a time. It is a Microsoft SQL Server, Error: 924. Is there any troubleshooting steps to resolve this issue?”   SQL Error Code 924 – Find Out The Root Cause  Microsoft SQL error 924 generally occurs whenever an attempt is been made to access the database by another user which is set as a single-user mode. Hence, only one user can access the database at a time when it is set to single-user mode.   Manual Techniques To Solve SQL Error 924          Restore the Database from Backup  A user can restore the database by using a backup. To practice this method, make sure there is an updated backup for the same. If there is no current database, try using another method.            Check SQL Server Services  There could be settings failure in the Server Services that might result this issue. Hence, it is advised to restart the SQL Server service, which may solve the problem. If the problem still exists, try to use SQL Server Configuration Manager.            DBCC CHECKDB Repair Options  One can repair the database using the following options, where “abc” is the database name,       DBCC CHECKDB(‘abc‘,REPAIR_REBUILD)   If it does not work, try using this,  DBCC CHECKDB(‘abc‘,REPAIR_ALLOW_DATA_LOSS)            Verify the Database Accessed is in Single-User Mode              Firstly, check the status of the database by executing the command below:           sp_helpdb   go   Note: If the database is in single mode, it is shown as “single user” in the status column      Now, execute sp_who to find out who is accessing the database. From there, check the database name under dbname column and the login name from the loginame column   Either contact the system administrator “sa” or the individual to arrange the database access. The “sa” or database owner “dbo” can set the database to give multi-user access. Make sure the database is not in use which is followed as,   sp_dboption , single, false  go  use   go checkpoint go   Repair SQL Error 924- An Automated Approach  SQL Error 924 is one of the common error faced by a majority of system administrators and individuals. With the manual approach, one can fix this issue but there are less chances that it repair the error completely. Hence, it is recommended to use SQL Repair tool. It is the most preferred software to fix different types of SQL errors, including SQL error 924. It offers two scanning modes to scan more effectively i.e., Quick scan and advanced scan. With its easy-to-use interface, no technical knowledge is required to use this software.   Conclusion  While working with SQL server, an error can occur anytime. One such error is SQL error 924 which can be fixed by using the above manual technique. However, it is observed that the manual approach mostly fails. This can be resolved using third party utility which enables to repair SQL errors and even support to the latest SQL server 2016 version.   Author: Andrew Jackson  ","categories": ["SQL Server","Database"],
        "tags": ["sqlserver","database"],
        "url": "https://mahedee.github.io//fix-sql-error-924/",
        "teaser":null},{
        "title": "Top 2 Methods To Recover Deleted Records From SQL Table",
        "excerpt":"When it comes to data management task, SQL Server is used by most of IT organizations. Sometimes, while working with table users perform UPDATE operation or DELETE operation accidentally without specifying the WHERE condition. This results in the deletion of the SQL table. Now, it becomes difficult for an organization to handle the data loss problem. Fortunately, it is possible to recover deleted records from SQL table. Thus, in this blog, we are going to introduce different ways to recover deleted table record in SQL Server.   How To Recover Deleted Records From SQL Table?  Each record present in the SQL Server transaction log is uniquely identified by a log sequence number (LSN). The user can recover deleted rows if the time of their deletion is known. This can be done only through the use of Log Sequence Number (LSNs). Basically, the LSN of a log record at which a significant event occurred can be useful for constructing correct restore sequences.   Recover Deleted Records From SQL Table – Step-By-Step Process  In this section, we are going to explain the process to recover deleted records from SQL table with the help of Transaction log and LSNs.   Step - 1. First of all, you have to check the number of rows present in the table from which the data has been mistakenly deleted via using the below-mentioned query:   SELECT * FROM Table_name   Step - 2. Now, you need to take the transaction log backup of the database by implementing the query given below:   USE Databasename GO BACKUP LOG [Databasename] TO DISK = N'D:\\Databasename\\RDDTrLog.trn' WITH NOFORMAT, NOINIT, NAME = N'Databasename-Transaction Log Backup', SKIP, NOREWIND, NOUNLOAD, STATS = 10 GO   Step - 3. After that, to recover deleted records from SQL Server Table, gather some information related to deleted rows. For this, you need to execute the query given below:   USE Databasename GO Select [Current LSN] LSN], [Transaction ID], Operation, Context, AllocUnitName FROM fn_dblog(NULL, NULL) WHERE Operation = 'LOP_DELETE_ROWS'   After executing all the above-mentioned queries, the user will obtain a Transaction ID (assuming ID is 000:000001f3) of the deleted row. Now, the user can easily determine the time when these rows were deleted via using this ID.   Step-4. To find the particular time at which rows were deleted you need to use the transaction ID 000:000001f3. You have to follow the query given below:   USE Databasename GO SELECT [Current LSN], Operation, [Transaction ID], [Begin Time], [Transaction Name], [Transaction SID] FROM fn_dblog(NULL, NULL) WHERE [Transaction ID] = ‘000:000001f3' AND [Operation] = 'LOP_BEGIN_XACT'   After executing this query, you will get the value of current Log Sequence Number (LSN). Assuming the value is 00000020:000001d0:0001   Step - 5. Next, begin the restore process to recover deleted records from SQL table:   USE Databasename GO RESTORE DATABASE Databasename_COPY FROM DISK = 'D:\\Databasename\\RDDFull.bak' WITH MOVE 'Databasename' TO 'D:\\RecoverDB\\Databasename.mdf', MOVE 'Databasename_log' TO 'D:\\RecoverDB\\Databasename_log.ldf', REPLACE, NORECOVERY; GO   Step - 6. Now, apply the transaction log to restore deleted rows by using LSN 00000020:000001d0:0001   USE Databasename  GO RESTORE LOG Databasename_COPY FROM DISK = N'D:\\Databasename\\RDOTrLog.trn' WITH STOPBEFOREMARK = ‘lsn:0x00000020:000001d0:0001' Note: Since LSN values are in HexadecimaUSE Databasename GO  RESTORE LOG Databasename_COPY FROM DISK = N'D:\\Databasename\\RDOTrLog.trn' WITH STOPBEFOREMARK = ‘lsn:0x00000020:000001d0:0001'  Note: Since LSN values are in Hexadecimal form and for restoring tables using this LSN, we need to convert it into decimal form. For this purpose, we add 0x just before the LSN as shown above form and for restoring tables using this LSN, we need to convert it into decimal form. For this purpose, we add 0x just before the LSN as shown above   Step - 7. Finally, the process to recover the deleted table from SQL Server will begin. After the completion of the process, you can easily check for the SQL table in the database   USE Databasename_Copy GO Select * from Table_name   Recover Deleted Records From SQL Table  However, it is quite difficult for the user to implement the steps correctly. As the method is highly time-consuming and requires adequate technical knowledge. Additionally, if the user is not able to perform the steps correctly then it can also lead to permanent data loss issues. Thus, to avoid all the catastrophic situations, the user can make use of an automated solution that is SysTools SQL Log Viewer. With SQL Log Analyzer, the user can easily recover deleted records from SQL Server if the database is in simple recovery mode. Moreover, the utility can also read and analyze all the transaction like INSERT, DELETE, UPDATE etc. The software is capable to preview .ldf activities such as transaction, time, name, table name, query etc.      Final Words  Every organization or businesses own important and confidential data. Thus, no one can afford the loss of their vital data. To manage tons of data, SQL Server database is used by numerous companies and users. Sometimes, the situation arises in which the user by mistake deletes SQL table. Now, recovering deleted SQL table is quite a complex task for the user without knowing the proper approach. Thus, in the above section, we have introduced a complete procedure to recover deleted records from SQL table.   Author: Andrew Jackson  ","categories": ["SQL Server","Database"],
        "tags": ["sqlserver","database"],
        "url": "https://mahedee.github.io//recover-deleted-records-sql-table/",
        "teaser":null},{
        "title": "Check out Best SQL Server Disaster Recovery Options",
        "excerpt":"As the name suggests, Disaster Recovery means recovering in case of any disaster. This is a much popular method used for SQL Server database safeguard. By setting up a disaster recovery strategy and its timely execution, users can recover the data lost because of any type of natural or man-made disaster.   In this post, we will discuss some SQL Server Disaster Recovery options. This will help the users in choosing the right Disaster Recovery measures for SQL Server. But they must keep in mind that every organization’s need is different. That is why, the customized Disaster Recovery policy should reflect the requirements of the company.   Best SQL Server Disaster Recovery Options  Here, we will discuss the methods often considered for SQL Server Disaster Recovery by various organizations. We will learn about the approaches in brief and also know their pros and cons.   Backup and Restore  SQL Server offers this feature to its users, which is the most basic method of Disaster recovery. Using various native techniques like T-SQL, PowerShell, or SSMS, full backup of the complete database can be created and saved in a secure location. In case of both data loss and data corruption, users can easily restore the data from the last good backup. While using this feature, database can be compressed and encrypted, as these are supported by SQL Server.   Pros and Cons: The biggest advantage of this method is that the backup can be saved on any location including external media storage devices. There is also no network dependency involved in it. Its demerits are the requirement of manual database restoration and loss of data since last good backup.   Important: Microsoft suggests that you should run backup and restore in a test environment before implementing it on the business environment. Also, do not depend on this method solely in case of business-critical database.   Failover Clustering  This is another method used for downtime management and disaster recovery. Here, multiple clusters are created out of the group of servers. In case a node crashes or seizes to function, another cluster takes over the operation and automatically restarts the application. Here, it does not require any manual intervention. This method uses SAN and NAS for shared data storage and various network connections and thus removes the single failure point. Through quorum-based approach, node-level fault tolerance is increased. The same approach is used by failover cluster for monitoring cluster health.   Pros and Cons: The best thing about this solution is it gets enabled automatically whenever the primary server is unavailable. But it involves high cost and server location should be the same. On the other hand, Disk array failure is not possible to prohibit in this method. Also, these clusters are not available at database or database object level.   Log Shipping  This method got introduced in the Developer and Enterprise editions of SQL Server 2000. In the latest SQL 2017, this is supported by both the Standard and Enterprise editions. The term log shipping means exporting log file of the primary database to another database. In this process, minimum two or more SQL Server instances are involved. Apart from the primary server, other servers are the standby ones. This can be used at the database level only and not at the instance level. Also, automated failover is not available here.   Pros and Cons: With the help of this process, all database objects can be recovered during any disaster. This method also speeds up the processes of log file restoration and data recovery. During the data restoration, the database remains inaccessible. Log shipping is also devoid of granular restoration. Restoration has to be implemented for all the changes done in primary server. Besides, whenever the primary server fails, users need to redirect the applications to the standby server as automated failover is unavailable.   Database Mirroring  This solution is commonly used for SQL Server Disaster Recovery as well as High Availability . This technique can be implemented of databases with full recovery model. Users can choose from synchronous or asynchronous copy for a single database only. Since no future SQL Server versions (SQL Server 2017 is the last one) will have this feature, Microsoft asked users to go for AlwaysOn Availability Groups or Basic Availability Groups.   Pros and Cons: If you use database mirroring, you are not only become able to protect your database in a better way but also its availability gets higher. Even while upgrading, production database availability gets improved due to database mirroring. The disadvantage of this process is that the mirror database and the main database should be completely identical in every way, including all the objects and logins. Users also need to be careful about the data security as this process involves data transfer between two systems through a network.   Transactional Replication  In Transactional Replication, data from the primary Server (the publisher) is copied to the secondary Server (the subscriber). This approach can be applied to table level and other object levels. It works best when the database is small and the recovery process requires to be fast. In this way, users can use the subscriber Server if the publisher Server fails after disaster. It is mostly used in server to server environment.   Pros and Cons: In this process, the changes are done in small intervals and users can view the data during the changes are being applied. Transaction replication is slower than the process of log shipping. Replication configurations will be gone once the servers are switched. Once Replication is done, changes in Schema or security will be unavailable to the subscriber. Server switching should be done manually after the occurrence of the disaster.   SQL Recovery As The Ultimate Disaster Recovery Option  If you have lost data due to any disaster even before implementing these options, MDF Recovery tool is there for you. This software can easily recover deleted data from SQL Server database. The tool can also remove high-level corruption issues with Advanced Scan mode. This application cannot be used as the preventive measure against the disasters, but it is helpful after the data got deleted or corrupt or inaccessible.   Conclusion  As every SQL Server should have a customized Disaster Recovery policy in place, we have discussed some of the useful SQL Server Disaster Recovery options here. We presented both the pros and cons of these solutions so that users can choose the ones suitable for their requirement. It is expected that users will get benefited by this write-up.   Author: Andrew Jackson  ","categories": ["SQL Server","Database"],
        "tags": ["sqlserver","database"],
        "url": "https://mahedee.github.io//best-sql-server-disaster-recovery-options/",
        "teaser":null},{
        "title": "Learn About Microsoft SQL Server Disaster Recovery Best Practices",
        "excerpt":"Disaster Recovery is one of the burning issues in today’s tech world. While data has become the most important component of business, the rate of data loss, data deletion, and data corruption is increasing. You never know when a disaster might occur and attack our database. Therefore, you have to prepare ourselves to deal with any disaster. Precautions about disaster in equally important for SQL Server user. SQL Database is often vulnerable to different natural and man-created disasters. To safeguard the data, it is necessary to have complete knowledge about Microsoft SQL Server disaster recovery best practices. In this post, we will share with you some of Disaster Recovery practices that are considered as the best.   Best Practices Of SQL Server Disaster Recovery   The most effective practices of SQL Disaster Recovery involve looking into the database architecture and create solutions for every possible situation. The solutions can involve backup and other measures of data protection. Let us learn about all the best Disaster Recovery practices.      Design a Solution that Properly Addresses the Problem   While creating a solution for any problem, you have to make sure that it does not end up creating more problems. Though no design can be called perfect, you must focus on developing the best design that is capable of solving the problem and provide enhanced opportunity. While doing this, always note down why you picked up this particular design over others and how can this meet your goal of solving the problem. At times, when improvement in the solution is expected, design must be compatible with the current SQL Server version. Also, consider the impacts of changes on all the dependent materials, if you are planning to make any changes.      Find out Possible Weakness of the Solution   No solution design is completely flawless and that is why it is crucial to accept the limitations. This acknowledgment will help you to prepare for the disaster in a better way. There is no shame in having solutions with limited capabilities because of restricted resources and changing circumstances. But the main issue lies in accepting it and find about about automated solutions that can fulfill the limitations of the design. The same policy should be followed in other cases like active-active replication, availability group, etc.           Consider All other Possible Situations  Usually, the solution design and its limitations are evaluated based on our knowledge. But what if something else happens that you are not even considering at this point? Your knowledge (or the lack of it) can be your weak point. To counter these issues, you can consider hiring a consultant/ expert to check the design and find out its limitations.            Create the Solution  After you find out about all the possible flaws of your design, you need to create the solution as soon as possible. The solution can be anything: backup restoration or Server addition. But, it should be created without wasting any time as you do not know when the disaster might happen. The more you wait, the more risk you put your data into.            Drill, Drill, and Drill  The most important thing after setting up the Disaster Recovery Solution is to practice/ drill it. Without drilling, the complete Disaster Recovery project remains incomplete. For drilling, you can re-create the situation in a test environment and then run the solution. Do not forget to have a backup of the solution. Saving the solution script in the test environment without backup can put you in danger if the Server fails.            Train Junior DBAs  Drilling for Disaster Recovery is the best time to train the database admins who are new in this profession. Through simulation, they can be prepared for the worst situations that may occur to cover by themselves. Through practices, junior DBAs become comfortable with the “state of panic” and learn how to handle the situation.            Coordination between All the teams  In case of large-sized environments, the entire disaster recovery procedure should be done by coordinating with multiple teams like DB Admin team, System team and Developer team. In organizations that do not have this type of team division, coordination must involve everyone who might become affected by the disaster.            Appreciation and Incentive  Do not forget to appreciate yourself and everyone else involved in creating the solution and drilling it. Acknowledgment of all the good work done will function as the incentive for future.            SQL Recovery Tool As The Last Resort For Data Recovery  These are some of the best practices that can be done to protect SQL Server database during any disaster. However, these cannot assure the foolproof safety of your database items. If you have lost data from your database due to any disaster, you can take the help of SQL Recovery Tool. This application can retrieve all the deleted data from your database regardless of the cause of data loss. This application is suitable for all the latest versions of SQL Server including SQL 2017.       Conclusion  In this post, we have depicted Microsoft SQL Server Disaster Recovery best practices. Reading this, users will become aware of the practices that should be performed to ensure maximum protection against the disasters. If you still lose some data, use SQL Recovery to get back lost data of your database.   Author: Andrew Jackson  ","categories": ["SQL Server","Database"],
        "tags": ["sqlserver","database"],
        "url": "https://mahedee.github.io//microsoft-sql-server-disaster-recovery-best-practices/",
        "teaser":null},{
        "title": "Image Detection Using Custom Vision AI",
        "excerpt":"Custom vision AI is an interesting way to detect images. Just upload your image, train and then evaluate. To know more, please visit : https://www.customvision.ai/  Prerequisite  Step 1: A subscription keys. To get a subscription key go to this link: Obtaining Subscription Keys.  Step 2: Need an IDE for example: Visual Studio 2017  Step to create a sample application:  Step 3: Open visual studio and create a console application  Step 4: Replace content of the Program.cs file by the following code.    using System; using System.IO; using System.Net.Http; using System.Net.Http.Headers; using System.Threading.Tasks;   namespace CSPredictionSample {     static class Program     {         static void Main()         {             Console.Write(\"Enter image file path: \");             string imageFilePath = @\"D:\\Projects\\Github\\ms-cognitive\\CustomVision\\Images\\Test\\Mahedee.JPG\";               //Console.ReadLine();               //Predict uploaded image             MakePredictionRequest(imageFilePath).Wait();               Console.WriteLine(\"\\n\\n\\nHit ENTER to exit...\");             Console.ReadLine();         }           //Convert image as byte stream         static byte[] GetImageAsByteArray(string imageFilePath)         {             FileStream fileStream = new FileStream(imageFilePath, FileMode.Open, FileAccess.Read);             BinaryReader binaryReader = new BinaryReader(fileStream);             return binaryReader.ReadBytes((int)fileStream.Length);         }           static async Task MakePredictionRequest(string imageFilePath)         {             var client = new HttpClient();               //To get prediction key, url and content type, please go to             //Project -&gt; Performance -&gt; Prediction URL             //Request headers - replace this example key with your valid subscription key.               client.DefaultRequestHeaders.Add(\"Prediction-Key\", \"Enter your Subscription key here\");             //client.DefaultRequestHeaders.Add(\"Prediction-Key\", \"71c950638c3c4f34be320cc952174ba7\");               // Prediction URL - replace this example URL with your valid prediction URL.             string url = \"https://southcentralus.api.cognitive.microsoft.com/customvision/v2.0/Prediction/0cb90ad3-84e0-4ccc-860c-5222efc8e227/image?iterationId=af197714-139b-43a1-9032-d757c4bb0d29\";             //string url = \"https://southcentralus.api.cognitive.microsoft.com/customvision/v2.0/Prediction/94a4ed5a-dc9a-4121-9d3f-aee7294d3d48/image\";             //\"http://southcentralus.api.cognitive.microsoft.com/customvision/v1.0/prediction/d16e136c-5b0b-4b84-9341-6a3fff8fa7fe/image?iterationId=f4e573f6-9843-46db-8018-b01d034fd0f2\";               HttpResponseMessage response;               // Request body. Try this sample with a locally stored image.             byte[] byteData = GetImageAsByteArray(imageFilePath);               using (var content = new ByteArrayContent(byteData))             {                 //content.Headers.ContentType = new MediaTypeHeaderValue(\"application/json\");                 content.Headers.ContentType = new MediaTypeHeaderValue(\"application/octet-stream\");                 response = await client.PostAsync(url, content);                 Console.WriteLine(await response.Content.ReadAsStringAsync());             }         }     } }    Step 5: Replace your subscription key  Step 6: Replace your image path  Now you will see the following output of the given image.  ","categories": ["AI","Machine Learning"],
        "tags": ["ai","ml"],
        "url": "https://mahedee.github.io//image-detection-using-custom-vision-ai/",
        "teaser":null},{
        "title": "Ways To Fix SQL Server Attach Database Error 5120 Efficiently",
        "excerpt":"Microsoft SQL Server is one of the popular and Widely used Relational database Management system. SQL language is used to manage and perform operations in the data. This application saves the data in the MDF and LDF file formats. MDF is the primary database file where the LDF file is the transaction log file. While working in the database the user encounters various issues like SQL Server Attach Database error 5120. Let us consider the problem faced by the users in one of the forum sites.   “Dear All! While attaching my .mdf file on my SQL Server database, I am getting an error like this error 5120 SQL server to attach the database. Here is the following error message. Msg 5120, Level 16, State 101, Line 1 Unable to open the physical file “C:\\Program Files\\Microsoft SQL Server\\MSSQL12.MSSQLSERVER\\MSSQL\\DATA’ Operating system error 5: “5(Access denied.)”. Can anyone tell the best possible solution to resolve this issue?”   In this guide, we are going to discuss the solution to the problem SQL server attach database error 5120. Also, we will the causes of this problem. Also in case if you dont be able to access SQL database then the user can take the help of  SQL Recovery Tool. Let us start.   Reasons Behind SQL Server Attach Database Error 5120  The main problem arises when the SQL Server database users does not have the authorization to access the MDF and the LDF files.           In case if the MDF file is not at their accurate position then the user has to face this issue.            Not opening the SQL Server Management Studio with the admin rights.            This issue arises when the Server drives don’t have the permission to store the server files.       Know-How To Fix Error 5120 SQL Server Attach Database Issue     First, the user has to create the two user accounts Admin1 and Admin2. After that follow the steps to resolve this problem.   CREATE DATABASE [Test]  CONTAINMENT = NONE  ON PRIMARY  (NAME = N’Test’, FILENAME = N’D:\\SQLDATA\\MSSQL13.MSSQLSERVER\\MSSQL\\DATA\\Test.mdf’)  LOG ON  (NAME = N’Test_log’, FILENAME = N’D:\\SQLDATA\\MSSQL13.MSSQLSERVER\\MSSQL\\DATA\\Test_log.ldf’)  GO           Now check the Test File Permission For MDF and LDF: After that browse the location of MDF and LDF files after that Right Click on the File »Property»Security.            Now Admin1 detaches the SQL database. To detach the database the user has to Right-click on the Test database »Tasks»Detach.            Check the file permission for MDF and LDF again: Permission has changed and the full permissions are granted to Admin1 only.            When the Admin2 tries to attach the database the SQL Server error 5120 appears because of the limited permissions.            Follow the steps to provide full permissions on both the MDF and the LDF files of the SQL Database.          First right click on the test database and then choose Properties.   Now click on the Security Tab and then click on the Edit button.   After that click on the Add button and then enter the object name to NT Service\\MSSQL$SQL2013.   After clicking on Check Names and then click on OK.   Now Give the full control to the file and after that click on OK.  Now Reattach the Database: In this way, SQL admin2 is able to reattach the database.   Note: The user can try the above steps to resolve this SQL server attach database error 5120. But in case if your MDF files are inaccessible then the user can take the help of SQL Database Recovery Software to recover data from corrupted MDF files. The user can easily recover SQL database objects such as table, stored procedure, functions. This application comes with a simple and easy to use user interface so that everyone can easily use this software with ease.   Final Conclusion In this article, We have discussed the problem SQL server attach database error 5120. This problem can be solved by granting full permissions. But in case if your MDF file database is still inaccessible then the user can take the help of SQL Recovery Software to resolve such types of issues.   Author: Andrew Jackson  ","categories": ["SQL Server","Database"],
        "tags": ["sqlserver","database"],
        "url": "https://mahedee.github.io//fix-sql-server-attach-database-error-5120-efficiently/",
        "teaser":null},{
        "title": "Fix SQL Error 4064 Cannot Open User Default Database",
        "excerpt":"Everything is data, We store all the data in a proper manner in a database because it is easy to maintain, retrieve, or to perform any manipulation task in the SQL database. But What when you get an SQL error 4064 cannot open user default database? You will not be to go through the database i.e. cannot go through the data stored in the tables even you will not be able to login to your SQL server. This blog will provide a solution for the same query of the users.   “Hey, I am getting an issue with my SQL server 2014 i.e. cannot open my default database and even can’t log in into the SQL server. Please suggest to me a solution to get rid-off from the same problem because it stores my all priceless data in it. Money is not a concern I just need the data of my database again. I sharing a screen that I received at the time of the login”   The user has to face this issue when the login default database may not be available. There are various possible reasons for this error such as when the database is dropped, the database is corrupt, the database is offline. Also when the user has no longer access to the database or even when the SQL database is renamed.   Important Note: If you want to access the corrupted SQL Database. Then the user can take the help of  SQL Database Recovery to recover SQL Database files.   Reasons Behind Cannot Open User Default Database Login Failed 4064 Error  There are many causes of the occurrence of this issue. Some causes are described below:           This error occurs because when your database is in the suspect mode.            Because of the accidental deletion of the database from the SQL server, it shows error.            When the SQL database is detached from the user account.            In case your database is set to the emergency status this error occurs.            In case your database is in restrict user state, therefore, you are not able to login to your database.            If your database is a part of the database mirror you will get the error.       Know-How To Fix SQL Server Error 4064     Connect your database with another one.   Method #1. Connect Your Database With Another One   To perform this task follow the steps   STEP #1 Open the SQL Server Management Studio » Fill the Server name, username, and password when the wizard opens.   STEP #2 In connection to database option for making the connection. It is set to the default database change default database name or set it to the master database to get the accessibility.   STEP #3 Click on the Connect button and your Account will log in successfully.   Important Note: The user can try the above methods to resolve this problem. But in case if your SQL Database inaccessible or corrupted then the user can take the help of SQL Recovery Software to recover data from corrupted MDF and NDF Files. Also, the user can preview and recover the SQL database.   STEP #1 Download and Launch the Recovery Tool   STEP #2 Select Quick scan» Check Auto detect SQL server file» Click to next.   STEP #3 Check the recovered database in the database object   STEP #4 Export your data with schema / with Schema &amp; data.   Conclusion In this article we have discussed, how to fix SQL error 4064 cannot open user default database problem. To resolve this issue we have given the manual solution. But in case if you want a quick solution to access the SQL database then the user can take the help of SQL Recovery Software.  Author: Andrew Jackson  ","categories": ["SQL Server","Database"],
        "tags": ["sqlserver","database"],
        "url": "https://mahedee.github.io//sql-error-4064-cannot-open-user-default-database/",
        "teaser":null},{
        "title": "How to support Console.WriteLine() in VS code in debug mode",
        "excerpt":"  Visual Studio code doesn’t support Console.WriteLine or Console.ReadLine automatically in debug mode. To enable it in debug mode you have to do the following thing.   Change the lunch.json     Change “console”: “externalTerminal” to “console”: “integratedTerminal” as follows   {     // Use IntelliSense to learn about possible attributes.     // Hover to view descriptions of existing attributes.     // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387     \"version\": \"0.2.0\",     \"configurations\": [         {             \"OS-COMMENT1\": \"Use IntelliSense to find out which attributes exist for C# debugging\",             \"OS-COMMENT2\": \"Use hover for the description of the existing attributes\",             \"OS-COMMENT3\": \"For further information visit https://github.com/OmniSharp/omnisharp-vscode/blob/master/debugger-launchjson.md\",             \"name\": \".NET Core Launch (console)\",             \"type\": \"coreclr\",             \"request\": \"launch\",             \"preLaunchTask\": \"build\",             \"OS-COMMENT4\": \"If you have changed target frameworks, make sure to update the program path.\",             \"program\": \"${workspaceFolder}/bin/Debug/net5.0/ArrayDS.dll\",             \"args\": [],             \"cwd\": \"${workspaceFolder}\",             \"OS-COMMENT5\": \"For more information about the 'console' field, see https://aka.ms/VSCode-CS-LaunchJson-Console\",             \"console\": \"integratedTerminal\",             \"stopAtEntry\": false         },         {             \"name\": \".NET Core Attach\",             \"type\": \"coreclr\",             \"request\": \"attach\",             \"processId\": \"${command:pickProcess}\"         }     ] }  ","categories": ["VS Code"],
        "tags": ["csharp","vscode"],
        "url": "https://mahedee.github.io//how-to-support-console-writeline-in-vs-code-in-debug-mode/",
        "teaser":null},{
        "title": "Visual Studio Code Tips and Tricks (Part - 01)",
        "excerpt":" Visual Studio Code Shortcut     Format the entire active file : Ctrl+Shift+I   Format the selected text: Ctrl+K Ctrl+F   Visual studio code extensions which I use most     Markdown Preview Enhanced   Code Spell Checker   ES7 React/Redux/GraphQL/React-Native snippets   html to JSX   How to add a project to a solution using VS Code   Open VS Code terminal and navigate to the directory where you want to create solution folder. Use following commands   dotnet new sln -o MyApiApp  The -o parameter lets you specify the output directory   Navigate to solution direction   Cd .\\MyApiApp\\    Create new projects under root solution folder   dotnet new console -o MyApiApp.ConsoleApp dotnet new webapi -o MyApiApp.WebApi  dotnet new classlib -o MyApiApp.Repository  dotnet new xunit -o MyApiApp.Tests   Add projects to solution (use tab to navigate path).   dotnet sln MyApiApp.sln add .\\MyApiApp.ConsoleApp\\MyApiApp.ConsoleApp.csproj .\\MyApiApp.WebApi\\MyApiApp.WebApi.csproj .\\MyApiApp.Repository\\MyApiApp.Repository.csproj .\\MyApiApp.Tests\\MyApiApp.Tests.csproj   Add project references  dotnet add .\\MyApiApp.WebApi\\MyApiApp.WebApi.csproj reference .\\MyApiApp.Repository\\MyApiApp.Repository.csproj  dotnet add .\\MyApiApp.ConsoleApp\\MyApiApp.ConsoleApp.csproj reference .\\MyApiApp.Repository\\MyApiApp.Repository.csproj  dotnet add .\\MyApiApp.Tests\\MyApiApp.Tests.csproj reference .\\MyApiApp.WebApi\\MyApiApp.WebApi.csproj .\\MyApiApp.Repository\\MyApiApp.Repository.csproj  ","categories": ["VS Code",".NET Core"],
        "tags": ["git","source-control"],
        "url": "https://mahedee.github.io//visual-studio-code-tips-and-tricks-part-01/",
        "teaser":null},{
        "title": "Getting Started with GitHub",
        "excerpt":"Tips and Tricks for git   GitHub is a internet hosting provider for software development and version control using git. It provides distributed version control, source code management, issue tracking and many more. This is now the number one version control provider. Here, I will discuss on tips and tricks of git      Discard unstaged changes in Git?   For all unstaged files in current working directory use:      git checkout -- .      ","categories": ["Source Control","Github"],
        "tags": ["git","source-control"],
        "url": "https://mahedee.github.io//getting-started-with-github/",
        "teaser":null},{
        "title": "Branching and merging in GitHub",
        "excerpt":"Branching and merging sometimes very difficult in github. For you wrong command it may destroy your repository. In this article, Branching and merging in github is discussed here step by step   Branching and merging in GitHub      To create a branch     $ git checkout -b branch01 Switched to a new branch 'branch01' or  $git branch branch01       To switch to a branch  ```github $git checkout    Example $git checkout branch03   * **Push files to the a branch**   First switch to the specific branch. Then add or modify files. To add files for the commit run the following command. ```github $ git add .   $ git push origin &lt;branch name&gt;  Example: $ git push origin branch01      Merge branch01 with master branch     $ git checkout master Switched to branch 'master' Your branch is up-to-date with 'origin/master'.       $ git merge branch01   $ git commit -m \"merge branch01\"   $ git push   References     Git Branching - Basic Branching and Merging  ","categories": ["Source Control","Github"],
        "tags": ["git","source-control"],
        "url": "https://mahedee.github.io//branching-and-merging/",
        "teaser":null},{
        "title": "Tips and Tricks for git",
        "excerpt":"  GitHub is a internet hosting provider for software development and version control using git. It provides distributed version control, source code management, issue tracking and many more. This is now the number one version control provider. Here, I will discuss on tips and tricks of git      Discard unstaged changes in Git?   For all unstaged files in current working directory use:      git checkout -- .      ","categories": ["Source Control","Github"],
        "tags": ["git","source-control"],
        "url": "https://mahedee.github.io//necessary-tips-for-git/",
        "teaser":null},{
        "title": "Visual studio tips and tricks (Part 01)",
        "excerpt":"  Microsoft Visual Studio is the most famous IDE (Integrated development environment.) It is used to develop computer program, website, web application, web services and sophisticated applications. It has lots of feature. Here I will show you some daily used feature.   Set bookmarks in code     Keep your cursor in a specific line   Go to View-&gt;Bookmark Window   Click Bookmark icon at the upper right or at the bottom of bookmark windows   To jump between Bookmarks:      Ctrl + K + N (for next)   Ctrl + K + P (for previous)   To toggle a Bookmark on/off for a line:  Ctrl + K + K    ","categories": ["Visual Studio"],
        "tags": ["visualstudio"],
        "url": "https://mahedee.github.io//visual-studio-tips-and-tricks-part-01/",
        "teaser":null},{
        "title": "Speaking at Career Adda at MBSTU",
        "excerpt":" Organized by CSE Family of MBSTU  Venue: Online/Virtual  Date: 21 August, 2020      ","categories": ["Speech","Technical Speech"],
        "tags": ["speech","tech"],
        "url": "https://mahedee.github.io//speaking-at-career-adda-at-cse-family-of-mbstu/",
        "teaser":null},{
        "title": "Common Markdown Syntax",
        "excerpt":"Display Image     Markdown syntax     From URL ![Image Title](imageurl.jpg)          From Directory ![](..\\assets\\images\\posts\\0006.postmantest.gif)           Rendered output      How to display two image side by side   Markdown syntax   Input Image            |  Output :-------------------------:|:-------------------------: ![](..\\assets\\images\\posts\\2018\\mahedee-buet.jpg) |  ![](..\\assets\\images\\posts\\2018\\output.png)    Output                  Input Image       Output                                         Hyperlink  Markdown syntax  [Source Code](https://github.com/mahedee/code-sample/tree/master/auth-demo/MVCAuth)  Rendered output  Source Code   Commenting on markdown   &lt;!-- Single or multiline commenting--&gt;   ","categories": ["Github","Markdown"],
        "tags": ["markdown","md"],
        "url": "https://mahedee.github.io//common-markdown-syntax/",
        "teaser":null},{
        "title": "Resolve git conflict using meld",
        "excerpt":"Resolve git conflict using meld      Install meld in windows   Configure meld in your pc            Edit gitconfig file in C:\\Users&lt;username&gt;\\       Add following line in the gitconfig file   ```text   [diff]   tool = meld   [difftool “meld”]    path = C:/Program Files (x86)/Meld/Meld.exe    [difftool]   prompt = false           ```       Now check and resolve conflict using the following command     $ git difftool origin/master       Refereces     Git Tutorial 7: Diff and Merge using meld 2019  ","categories": ["Source Control","Github"],
        "tags": ["git","sourcecontrol"],
        "url": "https://mahedee.github.io//resolve-git-conflict-using-meld/",
        "teaser":null},{
        "title": "Necessary SQL query in MS SQL",
        "excerpt":"  SQL stands for Structured Query Languages. In this article, I will show you some important query you need frequently.      Search a table name in a database in MS SQL Server     SELECT * FROM INFORMATION_SCHEMA.TABLES  WHERE TABLE_NAME LIKE '%tablename%'           If you want to see all column of a joining table   select Region.* from Branch inner join Region on Branch.RegionId = Region.Id     ","categories": ["SQL Server","SQL","Database"],
        "tags": ["sql"],
        "url": "https://mahedee.github.io//necessary-sql-query-in-ms-sql/",
        "teaser":null},{
        "title": "How to contribute on an open source project",
        "excerpt":"How to contribute on an open source project   Step 1: Fork the repository on which you want to contribute  For example, I have forked the following repository  https://github.com/OpenCodeFoundation/eSchool   After forking my repository has became  https://github.com/mahedee/eSchool   Step 2: Clone your forked project    For example:  git clone https://github.com/mahedee/eSchool.git  So your remote repository is https://github.com/mahedee/eSchool.git  if you want to see the remote repository type   git remote -v  output will be like   origin  https://github.com/mahedee/eSchool.git (fetch) origin  https://github.com/mahedee/eSchool.git (push)  Here I see that the name of my remote repository is origin   Step 3: Add the original repository in the local repository  Now add the original repository as origin in the local repository and name as upstream   git remote add upstream https://github.com/OpenCodeFoundation/eSchool   So you have two remote link in your local repository     origin - forked repository which is in your github   upstream - original project’s repository on which you will be contributed   if you run the following command   git remote -v  you will see the following output   origin  https://github.com/mahedee/eSchool.git (fetch) origin  https://github.com/mahedee/eSchool.git (push) upstream        https://github.com/OpenCodeFoundation/eSchool (fetch) upstream        https://github.com/OpenCodeFoundation/eSchool (push)   Step 4: Open a new branch in my local repository   Before opening any branch or contributing, please run the following command to up to date your local repository   git pull upstream master   To check is there any new commit on upstream run-   git status  you should see something like-   On branch master Your branch is behind 'upstream/master' by 14 commits, and can be fast-forwarded.   (use \"git pull\" to update your local branch)  nothing to commit, working tree clean  If you see, any changes in upstream, you can pull upstream to your local drive   Now open a branch name feature-joining using following command   git checkout -b feature-joining  Now you will see the   Mahedee@MahedeePC MINGW64 /d/Projects/Github/OpenCodeFoundation/eSchool (feature-joining)   instead of   Mahedee@MahedeePC MINGW64 /d/Projects/Github/OpenCodeFoundation/eSchool (master)   Step 5: Work on the new branch and push  Now work on the new branch. After completing your task, just add, commit and push. Before that, you should check is there any change in the upstream. If change occur, just merge it with your local using the following command.   git pull --rebase upstream master  If you get any conflit, you have to resolve it locally. If no conflit occur, type the following command one by one.   git add .   git commit -m \"complete feature-joining\"   git push origin feature-joining  Step 6: Make a pull request  After completing the previous step, you will see something like the following image with a button “Compare and pull request”      Now press the button and make a pull request. Now reviewer can accept or reject the pull request (PR).  You can think the whole workflow as below      Step 7: Add your change to your forked repository Now, if you want to add your change to your forked repository. Just type the following command. Remember, in this case, your forked repository and original repository may not sync if the PR is not accepted.   git checkout master  git merge feature-joining  git push origin master  Step 8: Sync forked repository with original repository  If you want to sync your forked repository with original repository at any time. Tyep the following command.   git pull upstream master  git push origin master   Step 9: Delete the branch After accepting or rejecting your PR. You should remove the branch. For new work, you should create a new branch. To remove the local branch type the following command  git branch -d feature-joining  If you want to remove this branch from github then type the following command.  git push origin :feature-joining   Thank you for your patience :)  ","categories": ["Source Control","Github"],
        "tags": ["git","source-control"],
        "url": "https://mahedee.github.io//how-to-contribute-an-opensource-project/",
        "teaser":null},{
        "title": "Convert markdown to html using asp.net core",
        "excerpt":"  Application overview  In this application, I will show how to create an application which is convert markdown to html using asp.net core. Let’s have a look on the implementation of the project.   Tools and Technology used  The following tools and technologies has been used for this application     Visual Studio 2019   Visual C#   NuGet package “Markdig”   ASP.NET Core MVC   Razor view engine   Step1: Select ASP.NET Core Web Application  Select File-&gt;New-&gt;Project-&gt;ASP.NET Core Web Application   Step2: Choose project and solution name  Type project and solution name as “MarkdownToHtml”   Step 3: Select project template     Select project template as Web Application (Model-View-Controller)   Click create button   Step 4: Install Nuget package “Markdig”  Run the following command in package manager console  PM&gt; Install-Package Markdig     Step 5: Add a method name Parse in MarkDownParser static class in Utility foler   MarkDownParser.cs      public IActionResult Index()     {         string markdownText = \"## This is a title of Markdown file \";         string htmltext = MarkDownParser.Parse(markdownText);         htmltext += MarkDownParser.Parse(\"  \") ;// for new line         htmltext += MarkDownParser.Parse(\"__Strong text__\");// for new line          htmltext += MarkDownParser.Parse(\"  \");// for new line         htmltext += MarkDownParser.Parse(\"* This is a bullet point\");// bullet point         ViewBag.HTMLText = htmltext;          return View();     }   Step 6: Modify Home-&gt;Index.cshtml as follows  @{     ViewData[\"Title\"] = \"Home Page\"; }  &lt;div class=\"text-center\"&gt;     @Html.Raw(ViewBag.HTMLText) &lt;/div&gt;   Step 7: Build and run the application   Now the application is ready to run. Build and run the application and watch the html output which you have given as markdown input in index action.   Source Code   ","categories": ["ASP.NET","ASP.NET Core","C#","ASP.NET MVC"],
        "tags": ["aspnetcore"],
        "url": "https://mahedee.github.io//convert-markdown-to-html-using-asp.net-core/",
        "teaser":null},{
        "title": "Build a CRUD application using asp.net core",
        "excerpt":"  Application overview  In this application, I will show how to build a CRUD application using asp.net mvc core. Let’s have a look on the implementation of the project.   Tools and Technology used  The following tools and technologies has been used for this application     Visual Studio 2019   Visual C#   ASP.NET Core MVC   Entity Framework   Razor view engine   Step1: Select ASP.NET Core Web Application  Select File-&gt;New-&gt;Project-&gt;ASP.NET Core Web Application   Step2: Choose project and solution name  Type project name as “HRM” and also solution name as “HRM”   Step 3: Select project template     Select project template as Web Application (Model-View-Controller)   Change authentication to Individual User Authentication (Optional)   Click create button   Step 4: Modify appsettings.json  Change connection string as follows. Since, I am using localdb.     \"ConnectionStrings\": {     \"DefaultConnection\": \"Server=(localdb)\\\\mssqllocaldb;Database=HRMDB;Trusted_Connection=True;MultipleActiveResultSets=true\" }   Step 5: Add following model class in Models folder  Dept.cs       public class Dept     {         [DatabaseGenerated(DatabaseGeneratedOption.Identity)]         [Key, Column(Order = 0)]         public int Id { get; set; }          [Display(Name = \"Dept. Name\")]         [StringLength(150)]         public string Name { get; set; }          public List&lt;Employee&gt; Employees { get; set; }     }   Employee.cs      public class Employee     {         [DatabaseGenerated(DatabaseGeneratedOption.Identity)]         [Key, Column(Order = 0)]         public int Id { get; set; }          [Display(Name = \"Full Name\")]         [StringLength(200)]         public string FullName { get; set; }          [Display(Name = \"Father's Name\")]         [StringLength(200)]         public string FathersName { get; set; }          [Display(Name = \"Mother's Name\")]         [StringLength(200)]         public String MothersName { get; set; }          [Display(Name = \"Dept\")]         public int DeptId { get; set; }          [StringLength(250)]         public string Designation { get; set; }          [ForeignKey(\"DeptId\")]         public virtual Dept Dept { get; set; }     }   Step 6: Create Controller and Views for Dept     Add DeptsController in Controllers folder   Choose template MVC controller with views, using Entity Framework   Select Model Class as Dept   Select ApplicationDbContext as DbContext class   DeptsController and corresponding views will be created automatically as follows   DeptsController       public class DeptsController : Controller     {         private readonly ApplicationDbContext _context;          public DeptsController(ApplicationDbContext context)         {             _context = context;         }          // GET: Depts         public async Task&lt;IActionResult&gt; Index()         {             return View(await _context.Dept.ToListAsync());         }          // GET: Depts/Details/5         public async Task&lt;IActionResult&gt; Details(int? id)         {             if (id == null)             {                 return NotFound();             }              var dept = await _context.Dept                 .FirstOrDefaultAsync(m =&gt; m.Id == id);             if (dept == null)             {                 return NotFound();             }              return View(dept);         }          // GET: Depts/Create         public IActionResult Create()         {             return View();         }          // POST: Depts/Create         // To protect from overposting attacks, enable the specific properties you want to bind to, for          // more details, see http://go.microsoft.com/fwlink/?LinkId=317598.         [HttpPost]         [ValidateAntiForgeryToken]         public async Task&lt;IActionResult&gt; Create([Bind(\"Id,Name\")] Dept dept)         {             if (ModelState.IsValid)             {                 _context.Add(dept);                 await _context.SaveChangesAsync();                 return RedirectToAction(nameof(Index));             }             return View(dept);         }          // GET: Depts/Edit/5         public async Task&lt;IActionResult&gt; Edit(int? id)         {             if (id == null)             {                 return NotFound();             }              var dept = await _context.Dept.FindAsync(id);             if (dept == null)             {                 return NotFound();             }             return View(dept);         }          // POST: Depts/Edit/5         // To protect from overposting attacks, enable the specific properties you want to bind to, for          // more details, see http://go.microsoft.com/fwlink/?LinkId=317598.         [HttpPost]         [ValidateAntiForgeryToken]         public async Task&lt;IActionResult&gt; Edit(int id, [Bind(\"Id,Name\")] Dept dept)         {             if (id != dept.Id)             {                 return NotFound();             }              if (ModelState.IsValid)             {                 try                 {                     _context.Update(dept);                     await _context.SaveChangesAsync();                 }                 catch (DbUpdateConcurrencyException)                 {                     if (!DeptExists(dept.Id))                     {                         return NotFound();                     }                     else                     {                         throw;                     }                 }                 return RedirectToAction(nameof(Index));             }             return View(dept);         }          // GET: Depts/Delete/5         public async Task&lt;IActionResult&gt; Delete(int? id)         {             if (id == null)             {                 return NotFound();             }              var dept = await _context.Dept                 .FirstOrDefaultAsync(m =&gt; m.Id == id);             if (dept == null)             {                 return NotFound();             }              return View(dept);         }          // POST: Depts/Delete/5         [HttpPost, ActionName(\"Delete\")]         [ValidateAntiForgeryToken]         public async Task&lt;IActionResult&gt; DeleteConfirmed(int id)         {             var dept = await _context.Dept.FindAsync(id);             _context.Dept.Remove(dept);             await _context.SaveChangesAsync();             return RedirectToAction(nameof(Index));         }          private bool DeptExists(int id)         {             return _context.Dept.Any(e =&gt; e.Id == id);         }     }      Following views will be created automatically in Views-&gt;Depts folder   Index.cshtml  @model IEnumerable&lt;HRM.Models.Dept&gt;  @{     ViewData[\"Title\"] = \"Index\"; }  &lt;h1&gt;Index&lt;/h1&gt;  &lt;p&gt;     &lt;a asp-action=\"Create\"&gt;Create New&lt;/a&gt; &lt;/p&gt; &lt;table class=\"table\"&gt;     &lt;thead&gt;         &lt;tr&gt;             &lt;th&gt;                 @Html.DisplayNameFor(model =&gt; model.Name)             &lt;/th&gt;             &lt;th&gt;&lt;/th&gt;         &lt;/tr&gt;     &lt;/thead&gt;     &lt;tbody&gt; @foreach (var item in Model) {         &lt;tr&gt;             &lt;td&gt;                 @Html.DisplayFor(modelItem =&gt; item.Name)             &lt;/td&gt;             &lt;td&gt;                 &lt;a asp-action=\"Edit\" asp-route-id=\"@item.Id\"&gt;Edit&lt;/a&gt; |                 &lt;a asp-action=\"Details\" asp-route-id=\"@item.Id\"&gt;Details&lt;/a&gt; |                 &lt;a asp-action=\"Delete\" asp-route-id=\"@item.Id\"&gt;Delete&lt;/a&gt;             &lt;/td&gt;         &lt;/tr&gt; }     &lt;/tbody&gt; &lt;/table&gt;    Create.cshtml   @model HRM.Models.Dept  @{     ViewData[\"Title\"] = \"Create\"; }  &lt;h1&gt;Create&lt;/h1&gt;  &lt;h4&gt;Dept&lt;/h4&gt; &lt;hr /&gt; &lt;div class=\"row\"&gt;     &lt;div class=\"col-md-4\"&gt;         &lt;form asp-action=\"Create\"&gt;             &lt;div asp-validation-summary=\"ModelOnly\" class=\"text-danger\"&gt;&lt;/div&gt;             &lt;div class=\"form-group\"&gt;                 &lt;label asp-for=\"Name\" class=\"control-label\"&gt;&lt;/label&gt;                 &lt;input asp-for=\"Name\" class=\"form-control\" /&gt;                 &lt;span asp-validation-for=\"Name\" class=\"text-danger\"&gt;&lt;/span&gt;             &lt;/div&gt;             &lt;div class=\"form-group\"&gt;                 &lt;input type=\"submit\" value=\"Create\" class=\"btn btn-primary\" /&gt;             &lt;/div&gt;         &lt;/form&gt;     &lt;/div&gt; &lt;/div&gt;  &lt;div&gt;     &lt;a asp-action=\"Index\"&gt;Back to List&lt;/a&gt; &lt;/div&gt;  @section Scripts {     @{await Html.RenderPartialAsync(\"_ValidationScriptsPartial\");} }   Delete.cshtml   @model HRM.Models.Dept  @{     ViewData[\"Title\"] = \"Delete\"; }  &lt;h1&gt;Delete&lt;/h1&gt;  &lt;h3&gt;Are you sure you want to delete this?&lt;/h3&gt; &lt;div&gt;     &lt;h4&gt;Dept&lt;/h4&gt;     &lt;hr /&gt;     &lt;dl class=\"row\"&gt;         &lt;dt class = \"col-sm-2\"&gt;             @Html.DisplayNameFor(model =&gt; model.Name)         &lt;/dt&gt;         &lt;dd class = \"col-sm-10\"&gt;             @Html.DisplayFor(model =&gt; model.Name)         &lt;/dd&gt;     &lt;/dl&gt;          &lt;form asp-action=\"Delete\"&gt;         &lt;input type=\"hidden\" asp-for=\"Id\" /&gt;         &lt;input type=\"submit\" value=\"Delete\" class=\"btn btn-danger\" /&gt; |         &lt;a asp-action=\"Index\"&gt;Back to List&lt;/a&gt;     &lt;/form&gt; &lt;/div&gt;    Details.cshtml   @model HRM.Models.Dept  @{     ViewData[\"Title\"] = \"Details\"; }  &lt;h1&gt;Details&lt;/h1&gt;  &lt;div&gt;     &lt;h4&gt;Dept&lt;/h4&gt;     &lt;hr /&gt;     &lt;dl class=\"row\"&gt;         &lt;dt class = \"col-sm-2\"&gt;             @Html.DisplayNameFor(model =&gt; model.Name)         &lt;/dt&gt;         &lt;dd class = \"col-sm-10\"&gt;             @Html.DisplayFor(model =&gt; model.Name)         &lt;/dd&gt;     &lt;/dl&gt; &lt;/div&gt; &lt;div&gt;     &lt;a asp-action=\"Edit\" asp-route-id=\"@Model.Id\"&gt;Edit&lt;/a&gt; |     &lt;a asp-action=\"Index\"&gt;Back to List&lt;/a&gt; &lt;/div&gt;    Edit.cshtml  @model HRM.Models.Dept  @{     ViewData[\"Title\"] = \"Edit\"; }  &lt;h1&gt;Edit&lt;/h1&gt;  &lt;h4&gt;Dept&lt;/h4&gt; &lt;hr /&gt; &lt;div class=\"row\"&gt;     &lt;div class=\"col-md-4\"&gt;         &lt;form asp-action=\"Edit\"&gt;             &lt;div asp-validation-summary=\"ModelOnly\" class=\"text-danger\"&gt;&lt;/div&gt;             &lt;input type=\"hidden\" asp-for=\"Id\" /&gt;             &lt;div class=\"form-group\"&gt;                 &lt;label asp-for=\"Name\" class=\"control-label\"&gt;&lt;/label&gt;                 &lt;input asp-for=\"Name\" class=\"form-control\" /&gt;                 &lt;span asp-validation-for=\"Name\" class=\"text-danger\"&gt;&lt;/span&gt;             &lt;/div&gt;             &lt;div class=\"form-group\"&gt;                 &lt;input type=\"submit\" value=\"Save\" class=\"btn btn-primary\" /&gt;             &lt;/div&gt;         &lt;/form&gt;     &lt;/div&gt; &lt;/div&gt;  &lt;div&gt;     &lt;a asp-action=\"Index\"&gt;Back to List&lt;/a&gt; &lt;/div&gt;  @section Scripts {     @{await Html.RenderPartialAsync(\"_ValidationScriptsPartial\");} }    Step 7: Create Controller and Views for Employee     Add EmployeesController in Controllers folder   Choose template MVC controller with views, using Entity Framework   Select Model Class as Employee   Select ApplicationDbContext as DbContext class   EmployeesController and corresponding views will be created automatically as follows   EmployeesController   public class EmployeesController : Controller     {         private readonly ApplicationDbContext _context;          public EmployeesController(ApplicationDbContext context)         {             _context = context;         }          // GET: Employees         public async Task&lt;IActionResult&gt; Index()         {             var applicationDbContext = _context.Employee.Include(e =&gt; e.Dept);             return View(await applicationDbContext.ToListAsync());         }          // GET: Employees/Details/5         public async Task&lt;IActionResult&gt; Details(int? id)         {             if (id == null)             {                 return NotFound();             }              var employee = await _context.Employee                 .Include(e =&gt; e.Dept)                 .FirstOrDefaultAsync(m =&gt; m.Id == id);             if (employee == null)             {                 return NotFound();             }              return View(employee);         }          // GET: Employees/Create         public IActionResult Create()         {             ViewData[\"DeptId\"] = new SelectList(_context.Dept, \"Id\", \"Name\");             return View();         }          // POST: Employees/Create         // To protect from overposting attacks, enable the specific properties you want to bind to, for          // more details, see http://go.microsoft.com/fwlink/?LinkId=317598.         [HttpPost]         [ValidateAntiForgeryToken]         public async Task&lt;IActionResult&gt; Create([Bind(\"Id,FullName,FathersName,MothersName,DeptId,Designation\")] Employee employee)         {             if (ModelState.IsValid)             {                 _context.Add(employee);                 await _context.SaveChangesAsync();                 return RedirectToAction(nameof(Index));             }             ViewData[\"DeptId\"] = new SelectList(_context.Dept, \"Id\", \"Name\", employee.DeptId);             return View(employee);         }          // GET: Employees/Edit/5         public async Task&lt;IActionResult&gt; Edit(int? id)         {             if (id == null)             {                 return NotFound();             }              var employee = await _context.Employee.FindAsync(id);             if (employee == null)             {                 return NotFound();             }             ViewData[\"DeptId\"] = new SelectList(_context.Dept, \"Id\", \"Name\", employee.DeptId);             return View(employee);         }          // POST: Employees/Edit/5         // To protect from overposting attacks, enable the specific properties you want to bind to, for          // more details, see http://go.microsoft.com/fwlink/?LinkId=317598.         [HttpPost]         [ValidateAntiForgeryToken]         public async Task&lt;IActionResult&gt; Edit(int id, [Bind(\"Id,FullName,FathersName,MothersName,DeptId,Designation\")] Employee employee)         {             if (id != employee.Id)             {                 return NotFound();             }              if (ModelState.IsValid)             {                 try                 {                     _context.Update(employee);                     await _context.SaveChangesAsync();                 }                 catch (DbUpdateConcurrencyException)                 {                     if (!EmployeeExists(employee.Id))                     {                         return NotFound();                     }                     else                     {                         throw;                     }                 }                 return RedirectToAction(nameof(Index));             }             ViewData[\"DeptId\"] = new SelectList(_context.Dept, \"Id\", \"Name\", employee.DeptId);             return View(employee);         }          // GET: Employees/Delete/5         public async Task&lt;IActionResult&gt; Delete(int? id)         {             if (id == null)             {                 return NotFound();             }              var employee = await _context.Employee                 .Include(e =&gt; e.Dept)                 .FirstOrDefaultAsync(m =&gt; m.Id == id);             if (employee == null)             {                 return NotFound();             }              return View(employee);         }          // POST: Employees/Delete/5         [HttpPost, ActionName(\"Delete\")]         [ValidateAntiForgeryToken]         public async Task&lt;IActionResult&gt; DeleteConfirmed(int id)         {             var employee = await _context.Employee.FindAsync(id);             _context.Employee.Remove(employee);             await _context.SaveChangesAsync();             return RedirectToAction(nameof(Index));         }          private bool EmployeeExists(int id)         {             return _context.Employee.Any(e =&gt; e.Id == id);         }     }       Following views will be created automatically in Views-&gt;Employees folder   Index.cshtml  @model IEnumerable&lt;HRM.Models.Employee&gt;  @{     ViewData[\"Title\"] = \"Index\"; }  &lt;h1&gt;Index&lt;/h1&gt;  &lt;p&gt;     &lt;a asp-action=\"Create\"&gt;Create New&lt;/a&gt; &lt;/p&gt; &lt;table class=\"table\"&gt;     &lt;thead&gt;         &lt;tr&gt;             &lt;th&gt;                 @Html.DisplayNameFor(model =&gt; model.FullName)             &lt;/th&gt;             &lt;th&gt;                 @Html.DisplayNameFor(model =&gt; model.FathersName)             &lt;/th&gt;             &lt;th&gt;                 @Html.DisplayNameFor(model =&gt; model.MothersName)             &lt;/th&gt;             &lt;th&gt;                 @Html.DisplayNameFor(model =&gt; model.Designation)             &lt;/th&gt;             &lt;th&gt;                 @Html.DisplayNameFor(model =&gt; model.Dept)             &lt;/th&gt;             &lt;th&gt;&lt;/th&gt;         &lt;/tr&gt;     &lt;/thead&gt;     &lt;tbody&gt; @foreach (var item in Model) {         &lt;tr&gt;             &lt;td&gt;                 @Html.DisplayFor(modelItem =&gt; item.FullName)             &lt;/td&gt;             &lt;td&gt;                 @Html.DisplayFor(modelItem =&gt; item.FathersName)             &lt;/td&gt;             &lt;td&gt;                 @Html.DisplayFor(modelItem =&gt; item.MothersName)             &lt;/td&gt;             &lt;td&gt;                 @Html.DisplayFor(modelItem =&gt; item.Designation)             &lt;/td&gt;             &lt;td&gt;                 @Html.DisplayFor(modelItem =&gt; item.Dept.Name)             &lt;/td&gt;             &lt;td&gt;                 &lt;a asp-action=\"Edit\" asp-route-id=\"@item.Id\"&gt;Edit&lt;/a&gt; |                 &lt;a asp-action=\"Details\" asp-route-id=\"@item.Id\"&gt;Details&lt;/a&gt; |                 &lt;a asp-action=\"Delete\" asp-route-id=\"@item.Id\"&gt;Delete&lt;/a&gt;             &lt;/td&gt;         &lt;/tr&gt; }     &lt;/tbody&gt; &lt;/table&gt;    Create.cshtml  @model HRM.Models.Employee  @{     ViewData[\"Title\"] = \"Create\"; }  &lt;h1&gt;Create&lt;/h1&gt;  &lt;h4&gt;Employee&lt;/h4&gt; &lt;hr /&gt; &lt;div class=\"row\"&gt;     &lt;div class=\"col-md-4\"&gt;         &lt;form asp-action=\"Create\"&gt;             &lt;div asp-validation-summary=\"ModelOnly\" class=\"text-danger\"&gt;&lt;/div&gt;             &lt;div class=\"form-group\"&gt;                 &lt;label asp-for=\"FullName\" class=\"control-label\"&gt;&lt;/label&gt;                 &lt;input asp-for=\"FullName\" class=\"form-control\" /&gt;                 &lt;span asp-validation-for=\"FullName\" class=\"text-danger\"&gt;&lt;/span&gt;             &lt;/div&gt;             &lt;div class=\"form-group\"&gt;                 &lt;label asp-for=\"FathersName\" class=\"control-label\"&gt;&lt;/label&gt;                 &lt;input asp-for=\"FathersName\" class=\"form-control\" /&gt;                 &lt;span asp-validation-for=\"FathersName\" class=\"text-danger\"&gt;&lt;/span&gt;             &lt;/div&gt;             &lt;div class=\"form-group\"&gt;                 &lt;label asp-for=\"MothersName\" class=\"control-label\"&gt;&lt;/label&gt;                 &lt;input asp-for=\"MothersName\" class=\"form-control\" /&gt;                 &lt;span asp-validation-for=\"MothersName\" class=\"text-danger\"&gt;&lt;/span&gt;             &lt;/div&gt;             &lt;div class=\"form-group\"&gt;                 &lt;label asp-for=\"DeptId\" class=\"control-label\"&gt;&lt;/label&gt;                 &lt;select asp-for=\"DeptId\" class =\"form-control\" asp-items=\"ViewBag.DeptId\"&gt;&lt;/select&gt;             &lt;/div&gt;             &lt;div class=\"form-group\"&gt;                 &lt;label asp-for=\"Designation\" class=\"control-label\"&gt;&lt;/label&gt;                 &lt;input asp-for=\"Designation\" class=\"form-control\" /&gt;                 &lt;span asp-validation-for=\"Designation\" class=\"text-danger\"&gt;&lt;/span&gt;             &lt;/div&gt;             &lt;div class=\"form-group\"&gt;                 &lt;input type=\"submit\" value=\"Create\" class=\"btn btn-primary\" /&gt;             &lt;/div&gt;         &lt;/form&gt;     &lt;/div&gt; &lt;/div&gt;  &lt;div&gt;     &lt;a asp-action=\"Index\"&gt;Back to List&lt;/a&gt; &lt;/div&gt;  @section Scripts {     @{await Html.RenderPartialAsync(\"_ValidationScriptsPartial\");} }    Delete.cshtml   @model HRM.Models.Employee  @{     ViewData[\"Title\"] = \"Delete\"; }  &lt;h1&gt;Delete&lt;/h1&gt;  &lt;h3&gt;Are you sure you want to delete this?&lt;/h3&gt; &lt;div&gt;     &lt;h4&gt;Employee&lt;/h4&gt;     &lt;hr /&gt;     &lt;dl class=\"row\"&gt;         &lt;dt class = \"col-sm-2\"&gt;             @Html.DisplayNameFor(model =&gt; model.FullName)         &lt;/dt&gt;         &lt;dd class = \"col-sm-10\"&gt;             @Html.DisplayFor(model =&gt; model.FullName)         &lt;/dd&gt;         &lt;dt class = \"col-sm-2\"&gt;             @Html.DisplayNameFor(model =&gt; model.FathersName)         &lt;/dt&gt;         &lt;dd class = \"col-sm-10\"&gt;             @Html.DisplayFor(model =&gt; model.FathersName)         &lt;/dd&gt;         &lt;dt class = \"col-sm-2\"&gt;             @Html.DisplayNameFor(model =&gt; model.MothersName)         &lt;/dt&gt;         &lt;dd class = \"col-sm-10\"&gt;             @Html.DisplayFor(model =&gt; model.MothersName)         &lt;/dd&gt;         &lt;dt class = \"col-sm-2\"&gt;             @Html.DisplayNameFor(model =&gt; model.Designation)         &lt;/dt&gt;         &lt;dd class = \"col-sm-10\"&gt;             @Html.DisplayFor(model =&gt; model.Designation)         &lt;/dd&gt;         &lt;dt class = \"col-sm-2\"&gt;             @Html.DisplayNameFor(model =&gt; model.Dept)         &lt;/dt&gt;         &lt;dd class = \"col-sm-10\"&gt;             @Html.DisplayFor(model =&gt; model.Dept.Id)         &lt;/dd class&gt;     &lt;/dl&gt;          &lt;form asp-action=\"Delete\"&gt;         &lt;input type=\"hidden\" asp-for=\"Id\" /&gt;         &lt;input type=\"submit\" value=\"Delete\" class=\"btn btn-danger\" /&gt; |         &lt;a asp-action=\"Index\"&gt;Back to List&lt;/a&gt;     &lt;/form&gt; &lt;/div&gt;    Details.cshtml   @model HRM.Models.Employee  @{     ViewData[\"Title\"] = \"Details\"; }  &lt;h1&gt;Details&lt;/h1&gt;  &lt;div&gt;     &lt;h4&gt;Employee&lt;/h4&gt;     &lt;hr /&gt;     &lt;dl class=\"row\"&gt;         &lt;dt class = \"col-sm-2\"&gt;             @Html.DisplayNameFor(model =&gt; model.FullName)         &lt;/dt&gt;         &lt;dd class = \"col-sm-10\"&gt;             @Html.DisplayFor(model =&gt; model.FullName)         &lt;/dd&gt;         &lt;dt class = \"col-sm-2\"&gt;             @Html.DisplayNameFor(model =&gt; model.FathersName)         &lt;/dt&gt;         &lt;dd class = \"col-sm-10\"&gt;             @Html.DisplayFor(model =&gt; model.FathersName)         &lt;/dd&gt;         &lt;dt class = \"col-sm-2\"&gt;             @Html.DisplayNameFor(model =&gt; model.MothersName)         &lt;/dt&gt;         &lt;dd class = \"col-sm-10\"&gt;             @Html.DisplayFor(model =&gt; model.MothersName)         &lt;/dd&gt;         &lt;dt class = \"col-sm-2\"&gt;             @Html.DisplayNameFor(model =&gt; model.Designation)         &lt;/dt&gt;         &lt;dd class = \"col-sm-10\"&gt;             @Html.DisplayFor(model =&gt; model.Designation)         &lt;/dd&gt;         &lt;dt class = \"col-sm-2\"&gt;             @Html.DisplayNameFor(model =&gt; model.Dept)         &lt;/dt&gt;         &lt;dd class = \"col-sm-10\"&gt;             @Html.DisplayFor(model =&gt; model.Dept.Name)         &lt;/dd&gt;     &lt;/dl&gt; &lt;/div&gt; &lt;div&gt;     &lt;a asp-action=\"Edit\" asp-route-id=\"@Model.Id\"&gt;Edit&lt;/a&gt; |     &lt;a asp-action=\"Index\"&gt;Back to List&lt;/a&gt; &lt;/div&gt;    Edit.cshtml   @model HRM.Models.Employee  @{     ViewData[\"Title\"] = \"Edit\"; }  &lt;h1&gt;Edit&lt;/h1&gt;  &lt;h4&gt;Employee&lt;/h4&gt; &lt;hr /&gt; &lt;div class=\"row\"&gt;     &lt;div class=\"col-md-4\"&gt;         &lt;form asp-action=\"Edit\"&gt;             &lt;div asp-validation-summary=\"ModelOnly\" class=\"text-danger\"&gt;&lt;/div&gt;             &lt;input type=\"hidden\" asp-for=\"Id\" /&gt;             &lt;div class=\"form-group\"&gt;                 &lt;label asp-for=\"FullName\" class=\"control-label\"&gt;&lt;/label&gt;                 &lt;input asp-for=\"FullName\" class=\"form-control\" /&gt;                 &lt;span asp-validation-for=\"FullName\" class=\"text-danger\"&gt;&lt;/span&gt;             &lt;/div&gt;             &lt;div class=\"form-group\"&gt;                 &lt;label asp-for=\"FathersName\" class=\"control-label\"&gt;&lt;/label&gt;                 &lt;input asp-for=\"FathersName\" class=\"form-control\" /&gt;                 &lt;span asp-validation-for=\"FathersName\" class=\"text-danger\"&gt;&lt;/span&gt;             &lt;/div&gt;             &lt;div class=\"form-group\"&gt;                 &lt;label asp-for=\"MothersName\" class=\"control-label\"&gt;&lt;/label&gt;                 &lt;input asp-for=\"MothersName\" class=\"form-control\" /&gt;                 &lt;span asp-validation-for=\"MothersName\" class=\"text-danger\"&gt;&lt;/span&gt;             &lt;/div&gt;             &lt;div class=\"form-group\"&gt;                 &lt;label asp-for=\"DeptId\" class=\"control-label\"&gt;&lt;/label&gt;                 &lt;select asp-for=\"DeptId\" class=\"form-control\" asp-items=\"ViewBag.DeptId\"&gt;&lt;/select&gt;                 &lt;span asp-validation-for=\"DeptId\" class=\"text-danger\"&gt;&lt;/span&gt;             &lt;/div&gt;             &lt;div class=\"form-group\"&gt;                 &lt;label asp-for=\"Designation\" class=\"control-label\"&gt;&lt;/label&gt;                 &lt;input asp-for=\"Designation\" class=\"form-control\" /&gt;                 &lt;span asp-validation-for=\"Designation\" class=\"text-danger\"&gt;&lt;/span&gt;             &lt;/div&gt;             &lt;div class=\"form-group\"&gt;                 &lt;input type=\"submit\" value=\"Save\" class=\"btn btn-primary\" /&gt;             &lt;/div&gt;         &lt;/form&gt;     &lt;/div&gt; &lt;/div&gt;  &lt;div&gt;     &lt;a asp-action=\"Index\"&gt;Back to List&lt;/a&gt; &lt;/div&gt;  @section Scripts {     @{await Html.RenderPartialAsync(\"_ValidationScriptsPartial\");} }       Modify the navbar of _Layout.cshtml in Views-&gt;Shared folder as follows                   &lt;div class=\"navbar-collapse collapse d-sm-inline-flex flex-sm-row-reverse\"&gt;                     &lt;partial name=\"_LoginPartial\" /&gt;                     &lt;ul class=\"navbar-nav flex-grow-1\"&gt;                         &lt;li class=\"nav-item\"&gt;                             &lt;a class=\"nav-link text-dark\" asp-area=\"\" asp-controller=\"Home\" asp-action=\"Index\"&gt;Home&lt;/a&gt;                         &lt;/li&gt;                         &lt;li class=\"nav-item\"&gt;                             &lt;a class=\"nav-link text-dark\" asp-area=\"\" asp-controller=\"Depts\" asp-action=\"Index\"&gt;Depts&lt;/a&gt;                         &lt;/li&gt;                         &lt;li class=\"nav-item\"&gt;                             &lt;a class=\"nav-link text-dark\" asp-area=\"\" asp-controller=\"Employees\" asp-action=\"Index\"&gt;Employees&lt;/a&gt;                         &lt;/li&gt;                         &lt;li class=\"nav-item\"&gt;                             &lt;a class=\"nav-link text-dark\" asp-area=\"\" asp-controller=\"Home\" asp-action=\"Privacy\"&gt;Privacy&lt;/a&gt;                         &lt;/li&gt;                     &lt;/ul&gt;                 &lt;/div&gt;   Step 8: Run migration command in package manager console   Now the application is ready to run.   Source Code   ","categories": ["ASP.NET","ASP.NET Core","C#"],
        "tags": ["aspnet","aspnetcore"],
        "url": "https://mahedee.github.io//build-a-crud-application-using-asp.net-core/",
        "teaser":null},{
        "title": "How to measure database size in MS SQL Server",
        "excerpt":"Using system view “sys.databases” and sys.master_files  Run the following script in master database.   SELECT      sys.databases.name,               CONVERT(VARCHAR,SUM(size)*8/1024)+' MB' AS [Size]   FROM        sys.databases    JOIN        sys.master_files   ON          sys.databases.database_id=sys.master_files.database_id   GROUP BY    sys.databases.name   ORDER BY    sys.databases.name     or in GB  SELECT      sys.databases.name,               CONVERT(VARCHAR,(SUM(size)*8/1024)/1024.00)+' GB' AS [Size]   FROM        sys.databases    JOIN        sys.master_files   ON          sys.databases.database_id=sys.master_files.database_id   GROUP BY    sys.databases.name   ORDER BY    sys.databases.name     Observe the individual database size  Run the following stored procedure in each database.  exec sp_spaceused     Watch database size using SSMS  Press right button on individual database -&gt; Properties -&gt; General -&gt; Size    ","categories": ["SQL Server","Database"],
        "tags": ["sql"],
        "url": "https://mahedee.github.io//how-to-measure-database-size-in-sql-server/",
        "teaser":null},{
        "title": "Authentication and authorization using ASP.NET MVC",
        "excerpt":"  Step1: Select ASP.NET Web Application (.NET Framework)   Step2: Type project and solution name  Type project name as “MVCAuth” and also solution name as “MVC Auth”   Step 3: Select project template     Select project template as Web Application (Model-View-Controller)   Change authentication to Individual User Authentication   Click create button   Step 4: Change web.config file   &lt;add name=\"DefaultConnection\" connectionString=\"Data Source=localhost;Initial Catalog=AuthDB;Persist Security Info=False;User ID=sa; Password=mahedee.net; Pooling=False;MultipleActiveResultSets=False;Encrypt=False;TrustServerCertificate=False\" providerName=\"System.Data.SqlClient\" /&gt;   Step 5: Add some model and view model class     Create Role Model class in Models folder as follows      public class Role : IdentityRole   {    }           Create UserRoleVM View Model class in Models folder as follows       public class UserRoleVM   {       public string UserId { get; set; }       public string RoleId { get; set; }        public string UserName { get; set; }       public string RoleName { get; set; }   }           Create UsersRolesVM View Model class in Models folder as follows       public class UsersRolesVM   {       //public string UserName { get; set; }       public ApplicationUser User { get; set; }        public IEnumerable&lt;string&gt; RoleNames { get; set; }   }           Step 6: Add Controllers to the application     Add RolesController in Controllers folder   Choose template MVC 5 Controller with read/write actions   Modify RolesController as follows       public class RolesController : Controller     {         private ApplicationDbContext db = new ApplicationDbContext();         // GET: Roles         public ActionResult Index()         {             var roleStore = new RoleStore&lt;IdentityRole&gt;(db);             var roleManager = new RoleManager&lt;IdentityRole&gt;(roleStore);             var roles = roleManager.Roles.ToList();             return View(roles);         }          // GET: Roles/Details/5         public ActionResult Details(int id)         {             return View();         }          // GET: Roles/Create         public ActionResult Create()         {             return View();         }          // POST: Roles/Create         [HttpPost]         public ActionResult Create(IdentityRole role)         {             try             {                 // TODO: Add insert logic here                  var roleStore = new RoleStore&lt;IdentityRole&gt;(db);                 var roleManager = new RoleManager&lt;IdentityRole&gt;(roleStore);                  if(!roleManager.RoleExists(role.Name))                 {                     roleManager.Create(role);                 }                  return RedirectToAction(\"Index\");             }             catch             {                 return View();             }         }          // GET: Roles/Edit/5         public ActionResult Edit(int id)         {             return View();         }          // POST: Roles/Edit/5         [HttpPost]         public ActionResult Edit(int id, FormCollection collection)         {             try             {                 // TODO: Add update logic here                  return RedirectToAction(\"Index\");             }             catch             {                 return View();             }         }          // GET: Roles/Delete/5         public ActionResult Delete(int id)         {             return View();         }          // POST: Roles/Delete/5         [HttpPost]         public ActionResult Delete(int id, FormCollection collection)         {             try             {                 // TODO: Add delete logic here                  return RedirectToAction(\"Index\");             }             catch             {                 return View();             }         }     }      Add UsersRoleController in Controllers folder   Choose template MVC 5 Controller with read/write actions   Modify UsersRoleController as follows       public class UsersRoleController : Controller     {         ApplicationDbContext db = new ApplicationDbContext();         // GET: UsersRole         public ActionResult Index()         {             List&lt;UsersRolesVM&gt; usersRolesVMs = new List&lt;UsersRolesVM&gt;();             List&lt;ApplicationUser&gt; users = db.Users.ToList();              var userManager = new UserManager&lt;ApplicationUser&gt;(new UserStore&lt;ApplicationUser&gt;(db));              foreach (ApplicationUser user in users)             {                 UsersRolesVM usersRolesVM = new UsersRolesVM();                 usersRolesVM.User = user;                 usersRolesVM.RoleNames = userManager.GetRoles(user.Id);                 usersRolesVMs.Add(usersRolesVM);             }             return View(usersRolesVMs);         }          // GET: UsersRole/Details/5         public ActionResult Details(int id)         {             return View();         }          // GET: UsersRole/Create         public ActionResult Create()         {              var roleStore = new RoleStore&lt;IdentityRole&gt;(db);             var roleManager = new RoleManager&lt;IdentityRole&gt;(roleStore);             var roles = roleManager.Roles.ToList();               ViewBag.UserId = new SelectList(db.Users.ToList(), \"Id\", \"UserName\");             ViewBag.RoleName = new SelectList(roles, \"Name\", \"Name\");              return View();         }          // POST: UsersRole/Create         [HttpPost]         //public ActionResult Create(FormCollection collection)         public ActionResult Create(UserRoleVM userRole)         {             try             {                if(userRole != null)                 {                     var userManager = new UserManager&lt;ApplicationUser&gt;(new UserStore&lt;ApplicationUser&gt;(db));                     userManager.AddToRole(userRole.UserId, userRole.RoleName);                 }                  return RedirectToAction(\"Index\");             }             catch             {                 return View();             }         }          // GET: UsersRole/Edit/5         public ActionResult Edit(int id)         {             return View();         }          // POST: UsersRole/Edit/5         [HttpPost]         public ActionResult Edit(int id, FormCollection collection)         {             try             {                 // TODO: Add update logic here                  return RedirectToAction(\"Index\");             }             catch             {                 return View();             }         }          // GET: UsersRole/Delete/5         public ActionResult Delete(int id)         {             return View();         }          // POST: UsersRole/Delete/5         [HttpPost]         public ActionResult Delete(int id, FormCollection collection)         {             try             {                 // TODO: Add delete logic here                  return RedirectToAction(\"Index\");             }             catch             {                 return View();             }         }     }    Step 7: Create Roles View to the application     Add Index View in Views-&gt;Roles folder   Add Create View in Views-&gt;Roles folder   Modify views as follows   Index.cshtml   @model IEnumerable&lt;Microsoft.AspNet.Identity.EntityFramework.IdentityRole&gt;  @{     ViewBag.Title = \"Index\"; }  &lt;h2&gt;Index&lt;/h2&gt;  &lt;p&gt;     @Html.ActionLink(\"Create New\", \"Create\") &lt;/p&gt; &lt;table class=\"table\"&gt;     &lt;tr&gt;         &lt;th&gt;             @Html.DisplayNameFor(model =&gt; model.Name)         &lt;/th&gt;         &lt;th&gt;&lt;/th&gt;     &lt;/tr&gt;  @foreach (var item in Model) {     &lt;tr&gt;         &lt;td&gt;             @Html.DisplayFor(modelItem =&gt; item.Name)         &lt;/td&gt;         &lt;td&gt;             @Html.ActionLink(\"Edit\", \"Edit\", new { id=item.Id }) |             @Html.ActionLink(\"Details\", \"Details\", new { id=item.Id }) |             @Html.ActionLink(\"Delete\", \"Delete\", new { id=item.Id })         &lt;/td&gt;     &lt;/tr&gt; }  &lt;/table&gt;    Create.cshtml   @*@model MVCAuth.Models.Role*@ @model Microsoft.AspNet.Identity.EntityFramework.IdentityRole  @{     ViewBag.Title = \"Create\"; }  &lt;h2&gt;Create&lt;/h2&gt;   @using (Html.BeginForm()) {     @Html.AntiForgeryToken()      &lt;div class=\"form-horizontal\"&gt;         &lt;h4&gt;Role&lt;/h4&gt;         &lt;hr /&gt;         @Html.ValidationSummary(true, \"\", new { @class = \"text-danger\" })         &lt;div class=\"form-group\"&gt;             @Html.LabelFor(model =&gt; model.Name, htmlAttributes: new { @class = \"control-label col-md-2\" })             &lt;div class=\"col-md-10\"&gt;                 @Html.EditorFor(model =&gt; model.Name, new { htmlAttributes = new { @class = \"form-control\" } })                 @Html.ValidationMessageFor(model =&gt; model.Name, \"\", new { @class = \"text-danger\" })             &lt;/div&gt;         &lt;/div&gt;          &lt;div class=\"form-group\"&gt;             &lt;div class=\"col-md-offset-2 col-md-10\"&gt;                 &lt;input type=\"submit\" value=\"Create\" class=\"btn btn-default\" /&gt;             &lt;/div&gt;         &lt;/div&gt;     &lt;/div&gt; }  &lt;div&gt;     @Html.ActionLink(\"Back to List\", \"Index\") &lt;/div&gt;  @section Scripts {     @Scripts.Render(\"~/bundles/jqueryval\") }     Step 8: Create UsersRole View to the application     Add Index View in Views-&gt;UsersRole folder   Add Create View in Views-&gt;UsersRole folder   Modify views as follows   Index.cshtml   @model IEnumerable&lt;MVCAuth.Models.UsersRolesVM&gt;  @{     ViewBag.Title = \"Index\"; }  &lt;h2&gt;Index&lt;/h2&gt;  &lt;p&gt;     @Html.ActionLink(\"Create New\", \"Create\") &lt;/p&gt; &lt;table class=\"table\"&gt;     &lt;tr&gt;         &lt;th&gt;             @*@Html.DisplayNameFor(model =&gt; model.UserName)*@             User Name         &lt;/th&gt;         &lt;th&gt;             @*@Html.DisplayNameFor(model =&gt; model.RoleName)*@             Roles Name         &lt;/th&gt;         &lt;th&gt;&lt;/th&gt;     &lt;/tr&gt;      @foreach (var users in Model)     {          foreach (string rolesName in users.RoleNames)         {             &lt;tr&gt;                 &lt;td&gt;                     @Html.DisplayFor(modelItem =&gt; users.User.UserName)                 &lt;/td&gt;                 &lt;td&gt;                     @Html.DisplayFor(modelItem =&gt; rolesName)                 &lt;/td&gt;                 &lt;td&gt;                     @Html.ActionLink(\"Delete\", \"Delete\", new { id = 1 })                 &lt;/td&gt;             &lt;/tr&gt;         }     }  &lt;/table&gt;   Create.cshtml  @model MVCAuth.Models.UserRoleVM  @{     ViewBag.Title = \"Create\"; }  &lt;h2&gt;Create&lt;/h2&gt;   @using (Html.BeginForm())  {     @Html.AntiForgeryToken()      &lt;div class=\"form-horizontal\"&gt;     &lt;h4&gt;UserRoleVM&lt;/h4&gt;     &lt;hr /&gt;     @Html.ValidationSummary(true, \"\", new { @class = \"text-danger\" })      &lt;div class=\"form-group\"&gt;         @Html.LabelFor(model =&gt; model.UserName, \"UserName\", htmlAttributes: new { @class = \"control-label col-md-2\" })         &lt;div class=\"col-md-10\"&gt;             @Html.DropDownList(\"UserId\", null, htmlAttributes: new { @class = \"form-control\" })         &lt;/div&gt;     &lt;/div&gt;      &lt;div class=\"form-group\"&gt;         @Html.LabelFor(model =&gt; model.RoleName, \"RoleName\", htmlAttributes: new { @class = \"control-label col-md-2\" })         &lt;div class=\"col-md-10\"&gt;             @Html.DropDownList(\"RoleName\", null, htmlAttributes: new { @class = \"form-control\" })             @Html.ValidationMessageFor(model =&gt; model.UserName, \"\", new { @class = \"text-danger\" })         &lt;/div&gt;     &lt;/div&gt;      &lt;div class=\"form-group\"&gt;         &lt;div class=\"col-md-offset-2 col-md-10\"&gt;             &lt;input type=\"submit\" value=\"Create\" class=\"btn btn-default\" /&gt;         &lt;/div&gt;     &lt;/div&gt; &lt;/div&gt; }  &lt;div&gt;     @Html.ActionLink(\"Back to List\", \"Index\") &lt;/div&gt;  @section Scripts {     @Scripts.Render(\"~/bundles/jqueryval\") }    Step 9: Run migration command in package manager console   Now the application is ready to run.   Source Code  ","categories": ["ASP.NET","ASP.NET MVC","C#"],
        "tags": ["aspnet","mvc","csharp"],
        "url": "https://mahedee.github.io//authentication-and-authorization-in-asp.net-mvc/",
        "teaser":null},{
        "title": "Create a sentiment analysis app using ML.NET",
        "excerpt":"  Application overview  ML.NET is a free, open source and cross platform machine learning framework. It is easily integrated with .NET development environment. ML.NET allows you to train, build, and ship custom machine learning models using C# and some other languages. Here a simple sentiment analysis application will be created using ML.NET and C#. Let’s start.   Tools and Technology used  The following tools and technologies has been used for this application     Visual Studio 2019   Visual C#   Step 1: Create a console application     Create a new project using visual studio 2019   Choose the C# Console App (.NET Core) project template   Change the project and solution name as “SentimentAnalysis”   Click create button to create the project.   Step 2: Enable the ML.NET Model Builder preview feature Press right button on the project file -&gt; Add -&gt; Machine learning You will see the following pop up message. Enable it.   Would you like to enable the ML.NET Model Builder preview feature so you can add Machine Learning to your .NET projects? Enable   Step 3: Select model builder scenario     Press right button on the project -&gt; Add -&gt; Machine Learning   Select Text classification   Keep the Local Environment and click on data (to move data step)     Step 4: Download and add data     Download the Sentiment Labelled Sentences datasets from the UCI Machine Learning Repository   Unzip the file and keep the “yelp_labelled.txt” file to Data folder   The first column of this file represents the comments and the second column represent the sentiment of the text (0 for negative and 1 for positive)   Add data     In this form, select File as the input data source type   Browse file yelp_labelled.txt. Once you are selected, you will see the preview of the data.   Select “col1” for Column to predict (Label) as the image below   Now click Train button to move to the train step      Step 5: Train your model     Time to train set automatically based on data. But you can manually set it.   Click start training button. You will see the following point the screen.   Best accuracy - Percentage of accuracy of the current model   Best model - This shows you which algorithm performed the best during Model Builder’s exploration.  Training time - Total times taken to run training Models explored (total) - This shows you the total number of models explored by Model Builder in the given amount of time.   Source : Microsoft docs      Now click Evaluate to move to the evaluate step   Step 6: Evaluate your model     Type a sentence in Try your model section.   I Typed “This is a fantastic place” and it shows positive is 98% and negative 2%      Step 7: Add project in to the solution     Click Add Project Button   Model builder will add machine learning model and the project for training   ModelBuilder.cs in the console application is used to build/train the model   Program.cs in the console application is used to test run the model   ModelInput.cs and ModelOutput.cs in Model library is the input and output class for the model training.   ConsumeModel.cs in Model library contains the method for model consumption   Solution structure will be like as follows      Step 8: Consume your model     Set SentimentAnalysisML.ConsoleApp as startup project   Modify a bit of Program.cs in SentimentAnalysisML.ConsoleApp as follows       class Program     {         static void Main(string[] args)         {             // Create single instance of sample data from first line of dataset for model input             ModelInput sampleData = new ModelInput()             {                 Col0 = @\"The food of Hotel Sonargaon was awesome\",             };              // Make a single prediction on the sample data and print results             var predictionResult = ConsumeModel.Predict(sampleData);              Console.WriteLine(\"Using model to make single prediction -- Comparing actual Col1 with predicted Col1 from sample data...\\n\\n\");             Console.WriteLine($\"Col0: {sampleData.Col0}\");             Console.WriteLine($\"\\n\\nPredicted Col1 value {predictionResult.Prediction} \\nPredicted Col1 scores: [{String.Join(\",\", predictionResult.Score)}]\\n\");              string sentiment = predictionResult.Prediction == \"1\" ? \"Positive\" : \"Negative\";             Console.WriteLine($\"Sentiment: {sentiment} \\n\");              Console.WriteLine(\"=============== End of process, hit any key to finish ===============\");             Console.ReadKey();         }     }    Step 9: Build and run the application Now build and run the application. You will see the sentiment output of the sentence “The food of Hotel Sonargaon was awesome”.   Source Code    ","categories": ["AI","Machine Learning"],
        "tags": ["ai","machinelearning"],
        "url": "https://mahedee.github.io//create-a-sentiment-analysis-app-using-ml-dot-net/",
        "teaser":null},{
        "title": "Authentication and authorization using asp.net core web api and JWT (Part 01)",
        "excerpt":"  Application overview  Token based authentication has been the most popular authentication technique for the last couple of years. Before that we used session based authentication. In session based authentication, client saves session id in the cookie. In token-based authentication, token is given to client instead of session. This token contains encrypted information of user with expiry time. In this article, I will show you, how to create authentication application using asp.net core web api and JWT(Json Web Token).   Tools and Technology used  The following tools and technologies has been used for this application     Visual Studio 2019   Visual C#   ASP.NET Core Web API   Postman - for api testing   Let’s have a look to the implementation of the project.   Step 1: Create an asp.net core web api application     Select File-&gt;New-&gt;Project-&gt;ASP.NET Core Web Application   Choose project and solution name   Click “Create” button   Step 2: Choose project template     Select project template as API   Click create button   Step 3: Install NuGet packages     Install following nuget packages in the application     PM&gt; Install-Package Microsoft.IdentityModel.Tokens PM&gt; Install-Package System.IdentityModel.Tokens.Jwt PM&gt; Install-Package Microsoft.AspNetCore.Authentication.JwtBearer -Version 3.1.11           Step 4: Add Key, Issuer and Audience     Add Key, Issuer and Audience in Appsettings.json as follows     \"Jwt\": {     \"Key\": \"thisisasecretkey\",     \"Issuer\": \"Issuer.com\",     \"Audience\":  \"Audience.com\"   }   Step 5: Add authentication in HTTP request pipeline  Add the following code snippet to add authentication in HTTP request pipeline.     public void Configure(IApplicationBuilder app, IWebHostEnvironment env)   {       .       .       .       // Configure for HTTP Request pipeline       app.UseAuthentication();        app.UseHttpsRedirection();        app.UseRouting();        app.UseAuthorization();        app.UseEndpoints(endpoints =&gt;       {           endpoints.MapControllers();       });   }   Step 6: Configure JWT based authentication  Register a JWT authentication schema by using “AddAuthentication” method in ConfigureService Method of Startup.cs as follows     public void ConfigureServices(IServiceCollection services)   {       services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)       .AddJwtBearer(options =&gt;       {           options.TokenValidationParameters = new TokenValidationParameters           {               ValidateIssuer = true,               ValidateAudience = true,               ValidateLifetime = true,               ValidateIssuerSigningKey = true,                ValidIssuer = Configuration[\"Jwt:Issuer\"],               ValidAudience = Configuration[\"Jwt:Audience\"],               IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(Configuration[\"Jwt:Key\"]))           };       });        services.AddControllers();   }   Step 7: Create a login view model  Create a view model name “LoginVM” in Model folder as follows    public class LoginVM   {       public string UserName { get; set; }       public string Password { get; set; }   }   Step 8: Create an api controller  Create an api controller name AuthController as follows       [Route(\"api/[controller]\")]     [ApiController]     public class AuthController : ControllerBase     {         private IConfiguration _config;          public AuthController(IConfiguration config)         {             _config = config;         }          [AllowAnonymous]         [HttpPost, Route(\"login\")]         public IActionResult Login([FromBody] LoginVM loginModel)         {             if (loginModel == null)             {                 return BadRequest(\"Invalid request\");             }              if (IsLogin(loginModel.UserName, loginModel.Password))             {                 var secretKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_config[\"Jwt:Key\"]));                 var signinCredentials = new SigningCredentials(secretKey, SecurityAlgorithms.HmacSha256);                 var tokeOptions = new JwtSecurityToken(                      issuer: _config[\"Jwt:Issuer\"],                      audience: _config[\"Jwt:Audience\"],                      claims: new List&lt;Claim&gt;(),                      expires: DateTime.Now.AddMinutes(30),                      signingCredentials: signinCredentials                  );                  var tokenString = new JwtSecurityTokenHandler().WriteToken(tokeOptions);                 return Ok(new { Token = tokenString });             }             else             {                  return Unauthorized();             }            }          public bool IsLogin(string username, string password)         {             bool result = username == \"mahedee\" &amp;&amp; password == \"pass123\" ? true : false;             return result;         }     }   Step 9: Create a test api controller     Create a test api controller name ValuesController as follows   Add “Authorize” attribute on the ValuesController     [Route(\"api/[controller]\")]   [ApiController]   [Authorize]   public class ValuesController : ControllerBase   {       // GET: api/&lt;ValuesController&gt;       [HttpGet]       public IEnumerable&lt;string&gt; Get()       {           return new string[] { \"value1\", \"value2\", \"value3\", \"value4\" };       }   }      Step 10: Run application and test using postman     Run application   Run postman   In the Headers tab of postman, set Key as Content-Type and Value as application/json   Set url as https://localhost:44362/api/auth/login and set POST method   In the body tab select raw and JSON   Now set userName and Password in the body of postman as follows   Press send button and you will get the token as follows      Step 11: Test your application using token     Copy the token you have already got against user name and password   In the header tab use Authorization and Bearer Token as follows   Set url as https://localhost:44362/api/values   Select GET method and click send button you will see the output      Source Code    ","categories": ["ASP.NET","ASP.NET Core","Web API","C#","JWT"],
        "tags": ["aspnet","csharp"],
        "url": "https://mahedee.github.io//authentication-and-authorization-using-asp.net-core-web-api-and-jwt-part01/",
        "teaser":null},{
        "title": "Implementation of swagger in a asp.net core web api using in memory database",
        "excerpt":"  Here, an application name School Management System is developed using asp.net core web api and in memory database. Swagger is implemented in this application.   Tools and Technology used     Visual studio 2019   Visual C#   ASP.NET Core Web Api   Entity Framework Core   In memory database   Step 1: Create an asp.net core web api project      Type the project name as “SMS” aks School Management System.   Select API Template   Select “Configure for HTTPS”   Step 2: Install in memory database provider for entity framework core     Install nuget package Microsoft.EntityFrameworkCore.InMemory in the project   Step 3: Create model classes     Create two model classes name Student and Teacher as follows       public class Student     {         public int Id { get; set; }         public string Class { get; set; }         public string RollNo { get; set; }         public string FullName { get; set; }         public string FathersName { get; set; }         public string MothersName { get; set; }     }        public class Teacher     {         public int Id { get; set; }         public string TeacherId { get; set; }         public string FullName { get; set; }         public string FathersName { get; set; }         public string MothersName { get; set; }     }   Step 4: Add dbcontext class     Add a db context class as follows       public class SMSContext : DbContext   {       public SMSContext(DbContextOptions&lt;SMSContext&gt; options)           : base(options)       {       }        public DbSet&lt;Student&gt; Users { get; set; }        public DbSet&lt;Teacher&gt; Posts { get; set; }   }           Configure in memory database in the ConfigureService method of Startup class as follows.       public void ConfigureServices(IServiceCollection services)     {         services.AddDbContext&lt;SMSContext&gt;(opt =&gt; opt.UseInMemoryDatabase(\"SMSContext\"));     }  Step 5: Add Api Controller     Add two api controller StudentController and TeacherController as follows       [Route(\"api/[controller]\")]   [ApiController]   public class StudentsController : ControllerBase   {       private readonly SMSContext _context;        public StudentsController(SMSContext context)       {           _context = context;       }        // GET: api/Students       [HttpGet]       public async Task&lt;ActionResult&lt;IEnumerable&lt;Student&gt;&gt;&gt; GetUsers()       {           return await _context.Users.ToListAsync();       }        // GET: api/Students/5       [HttpGet(\"{id}\")]       public async Task&lt;ActionResult&lt;Student&gt;&gt; GetStudent(int id)       {           var student = await _context.Users.FindAsync(id);            if (student == null)           {               return NotFound();           }            return student;       }        // PUT: api/Students/5       // To protect from overposting attacks, enable the specific properties you want to bind to, for       // more details, see https://go.microsoft.com/fwlink/?linkid=2123754.       [HttpPut(\"{id}\")]       public async Task&lt;IActionResult&gt; PutStudent(int id, Student student)       {           if (id != student.Id)           {               return BadRequest();           }            _context.Entry(student).State = EntityState.Modified;            try           {               await _context.SaveChangesAsync();           }           catch (DbUpdateConcurrencyException)           {               if (!StudentExists(id))               {                   return NotFound();               }               else               {                   throw;               }           }            return NoContent();       }        // POST: api/Students       // To protect from overposting attacks, enable the specific properties you want to bind to, for       // more details, see https://go.microsoft.com/fwlink/?linkid=2123754.       [HttpPost]       public async Task&lt;ActionResult&lt;Student&gt;&gt; PostStudent(Student student)       {           _context.Users.Add(student);           await _context.SaveChangesAsync();            return CreatedAtAction(\"GetStudent\", new { id = student.Id }, student);       }        // DELETE: api/Students/5       [HttpDelete(\"{id}\")]       public async Task&lt;ActionResult&lt;Student&gt;&gt; DeleteStudent(int id)       {           var student = await _context.Users.FindAsync(id);           if (student == null)           {               return NotFound();           }            _context.Users.Remove(student);           await _context.SaveChangesAsync();            return student;       }        private bool StudentExists(int id)       {           return _context.Users.Any(e =&gt; e.Id == id);       }   }            [Route(\"api/[controller]\")]   [ApiController]   public class TeachersController : ControllerBase   {       private readonly SMSContext _context;        public TeachersController(SMSContext context)       {           _context = context;       }        // GET: api/Teachers       [HttpGet]       public async Task&lt;ActionResult&lt;IEnumerable&lt;Teacher&gt;&gt;&gt; GetPosts()       {           return await _context.Posts.ToListAsync();       }        // GET: api/Teachers/5       [HttpGet(\"{id}\")]       public async Task&lt;ActionResult&lt;Teacher&gt;&gt; GetTeacher(int id)       {           var teacher = await _context.Posts.FindAsync(id);            if (teacher == null)           {               return NotFound();           }            return teacher;       }        // PUT: api/Teachers/5       // To protect from overposting attacks, enable the specific properties you want to bind to, for       // more details, see https://go.microsoft.com/fwlink/?linkid=2123754.       [HttpPut(\"{id}\")]       public async Task&lt;IActionResult&gt; PutTeacher(int id, Teacher teacher)       {           if (id != teacher.Id)           {               return BadRequest();           }            _context.Entry(teacher).State = EntityState.Modified;            try           {               await _context.SaveChangesAsync();           }           catch (DbUpdateConcurrencyException)           {               if (!TeacherExists(id))               {                   return NotFound();               }               else               {                   throw;               }           }            return NoContent();       }        // POST: api/Teachers       // To protect from overposting attacks, enable the specific properties you want to bind to, for       // more details, see https://go.microsoft.com/fwlink/?linkid=2123754.       [HttpPost]       public async Task&lt;ActionResult&lt;Teacher&gt;&gt; PostTeacher(Teacher teacher)       {           _context.Posts.Add(teacher);           await _context.SaveChangesAsync();            return CreatedAtAction(\"GetTeacher\", new { id = teacher.Id }, teacher);       }        // DELETE: api/Teachers/5       [HttpDelete(\"{id}\")]       public async Task&lt;ActionResult&lt;Teacher&gt;&gt; DeleteTeacher(int id)       {           var teacher = await _context.Posts.FindAsync(id);           if (teacher == null)           {               return NotFound();           }            _context.Posts.Remove(teacher);           await _context.SaveChangesAsync();            return teacher;       }        private bool TeacherExists(int id)       {           return _context.Posts.Any(e =&gt; e.Id == id);       }   }           Step 6: Install Swagger     Install nuget package Swashbuckle.AspNetCore   Step 6: Add and configure Swagger middleware     Add the Swagger generator to the services collection in the ConfigureServices method of startup class as follows.       // This method gets called by the runtime. Use this method to add services to the container.   public void ConfigureServices(IServiceCollection services)        services.AddControllers();        // Register the Swagger generator, defining 1 or more Swagger documents       services.AddSwaggerGen();   }           In the Startup.Configure method, enable the middleware for serving the generated JSON document and the Swagger UI:   public void Configure(IApplicationBuilder app) {     // Enable middleware to serve generated Swagger as a JSON endpoint.     app.UseSwagger();      // Enable middleware to serve swagger-ui (HTML, JS, CSS, etc.),     // specifying the Swagger JSON endpoint.     app.UseSwaggerUI(c =&gt;     {         c.SwaggerEndpoint(\"/swagger/v1/swagger.json\", \"My API V1\");     });      app.UseRouting();     app.UseEndpoints(endpoints =&gt;     {         endpoints.MapControllers();     }); }    Step 4: Run the application and Check     Run the application   Browse https://&lt;localhost&gt;:&lt;port&gt;/swagger/index.html   Download source code  ","categories": ["ASP.NET","ASP.NET Core","C#","Swagger"],
        "tags": ["csharp","aspnet"],
        "url": "https://mahedee.github.io//implement-swagger-in-asp.net-core-web-api-using-in-memory-db/",
        "teaser":null},{
        "title": "Parsing markdown file and display in a razor view using asp.net core",
        "excerpt":"  Application overview Markdown has been huge popular for documentation and blog post. How to parse a markdown file and display in a razor view as blog post will be shown in this application. Let’s have a look on the implementation of the project.   Tools and Technology used  The following tools and technologies has been used for this application     Visual Studio 2019   Visual C#   NuGet package “Westwind.AspNetCore.Markdown”   ASP.NET Core MVC   Razor view engine   Step1: Select ASP.NET Core Web Application  Select File-&gt;New-&gt;Project-&gt;ASP.NET Core Web Application   Step2: Choose project and solution name  Type project and solution name as “MarkdownBlog”   Step 3: Select project template     Select project template as Web Application (Model-View-Controller)   Click create button   Step 4: Install Nuget package “Westwind.AspNetCore.Markdown”  Run the following command in package manager console  PM&gt; Install-Package Westwind.AspNetCore.Markdown   Step 5: Set up the markdown middleware  Once the Nuget package is installed, you can configure the middleware. Modify “ConfigureServices” and “Configure” Method as follows. Here, AddMarkdown() is used to configure the page processing. UseMarkdown() is used to hook up the middleware.   Startup.cs       public class Startup     {         public Startup(IConfiguration configuration)         {             Configuration = configuration;         }          public IConfiguration Configuration { get; }          // This method gets called by the runtime. Use this method to add services to the container.         public void ConfigureServices(IServiceCollection services)         {             services.AddMarkdown(config =&gt;             {                 // optional Tag BlackList                 config.HtmlTagBlackList = \"script|iframe|object|embed|form\"; // default                  // Simplest: Use all default settings                 var folderConfig = config.AddMarkdownProcessingFolder(\"/docs/\", \"~/Pages/__MarkdownPageTemplate.cshtml\");                  // Customized Configuration: Set FolderConfiguration options                 folderConfig = config.AddMarkdownProcessingFolder(\"/posts/\", \"~/Pages/__MarkdownPageTemplate.cshtml\");                  // Optionally strip script/iframe/form/object/embed tags ++                 folderConfig.SanitizeHtml = false;  //  default                  // Optional configuration settings                 folderConfig.ProcessExtensionlessUrls = true;  // default                 folderConfig.ProcessMdFiles = true; // default                  // Optional pre-processing - with filled model                 folderConfig.PreProcess = (model, controller) =&gt;                 {                     // controller.ViewBag.Model = new MyCustomModel();                 };                  // folderConfig.BasePath = \"https://github.com/RickStrahl/Westwind.AspNetCore.Markdow/raw/master\";                  // Create your own IMarkdownParserFactory and IMarkdownParser implementation                 // to replace the default Markdown Processing                 //config.MarkdownParserFactory = new CustomMarkdownParserFactory();                                   // optional custom MarkdigPipeline (using MarkDig; for extension methods)                 config.ConfigureMarkdigPipeline = builder =&gt;                 {                     builder.UseEmphasisExtras(Markdig.Extensions.EmphasisExtras.EmphasisExtraOptions.Default)                         .UsePipeTables()                         .UseGridTables()                         .UseAutoIdentifiers(AutoIdentifierOptions.GitHub) // Headers get id=\"name\"                          .UseAutoLinks() // URLs are parsed into anchors                         .UseAbbreviations()                         .UseYamlFrontMatter()                         .UseEmojiAndSmiley(true)                         .UseListExtras()                         .UseFigures()                         .UseTaskLists()                         .UseCustomContainers()                         //.DisableHtml()   // renders HTML tags as text including script                         .UseGenericAttributes();                 };             });              services.AddControllersWithViews()                  .AddApplicationPart(typeof(MarkdownPageProcessorMiddleware).Assembly);         }          // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.         public void Configure(IApplicationBuilder app, IWebHostEnvironment env)         {             if (env.IsDevelopment())             {                 app.UseDeveloperExceptionPage();             }             else             {                 app.UseExceptionHandler(\"/Home/Error\");                 // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.                 app.UseHsts();             }             app.UseHttpsRedirection();             app.UseStaticFiles();                          //For markdown             app.UseMarkdown();              app.UseRouting();              app.UseAuthorization();              app.UseEndpoints(endpoints =&gt;             {                 endpoints.MapControllerRoute(                     name: \"default\",                     pattern: \"{controller=Home}/{action=Index}/{id?}\");             });         }     }    Step 6: Create a Markdown Container Razor Page  Create __MarkdownPageTemplate.cshtml in Pages folder as follows  @model Westwind.AspNetCore.Markdown.MarkdownModel @{     ViewBag.Title = Model.Title;     Layout = \"_Layout\"; }  &lt;div&gt;     @Model.RenderedMarkdown &lt;/div&gt;   Step 7: Now drop a markdown file in /wwwroot/  Here I have dropped MyArticle.md in /wwwroot/posts/2020/12/01/ folder. You can organize directory by yourself.   MyArticle.md  ## Batting changes not yet bearing fruit The buzzword in the Bangladesh camp before returning to international cricket after over 10  months with the ODI series against the West Indies was long-term planning keeping the 2023  ICC World Cup in mind.  The team management did try some tactical changes such as promoting young left-hander Nazmul  Hossain Shanto to number three in place of Shakib Al Hasan, who had made the position his own  during the 2019 ICC World Cup.  ![Bangladesh Test Captain](image01.jpg)     Step 8: Build and run the application   Now the application is ready to run. Build and run the application. Now type the “https://localhost:yourport/posts/2020/12/01/markdownarticle” and watch the html output which you is writtern in the markdown tag. You can browse as https://localhost:44338/posts/2020/12/01/MyArticle.md to see output as github flavour.   Source Code    ","categories": ["ASP.NET","ASP.NET Core","C#","Markdown"],
        "tags": ["dotnet","C#","aspnet"],
        "url": "https://mahedee.github.io//parsing-markdown-file-and-display-in-a-razor-view-page-using-asp.net-core/",
        "teaser":null},{
        "title": "Embed markdown into a razor view using asp.net core",
        "excerpt":"  Application overview Mardown is creeping up and has become a standard for documentation. How to embed markdown into a razor view will be shown in this application. Let’s have a look on the implementation of the project.   Tools and Technology used  The following tools and technologies has been used for this application     Visual Studio 2019   Visual C#   NuGet package “Westwind.AspNetCore.Markdown”   ASP.NET Core MVC   Razor view engine   Step1: Select ASP.NET Core Web Application  Select File-&gt;New-&gt;Project-&gt;ASP.NET Core Web Application   Step2: Choose project and solution name  Type project and solution name as “MarkdownToHTMLv02”   Step 3: Select project template     Select project template as Web Application (Model-View-Controller)   Click create button   Step 4: Install Nuget package “Westwind.AspNetCore.Markdown”  Run the following command in package manager console  PM&gt; Install-Package Westwind.AspNetCore.Markdown   Step 5: Register TagHelper   Add the following TagHelper in Views-&gt;_ViewImports.cshtml  @addTagHelper *, Westwind.AspNetCore.Markdown   Step 6: Apply markdown tag  Now apply markdown tag in Views-&gt;Home-&gt;Index.cshtml   &lt;h3&gt;Markdown TagHelper Block&lt;/h3&gt;  &lt;markdown normalize-whitespace=\"true\"&gt;     ## This is a markdown title     * Item 1     * Item 2     The current Time is:     **@DateTime.Now.ToString(\"HH:mm:ss\")**  &lt;/markdown&gt;   Step 7: Build and run the application   Now the application is ready to run. Build and run the application and watch the html output which you is writtern in the markdown tag.   Source Code   ","categories": ["ASP.NET","ASP.NET Core","C#","Markdown"],
        "tags": ["markdown","csharp","aspnet"],
        "url": "https://mahedee.github.io//embed-markdown-into-a-razor-view-using-asp.net-core/",
        "teaser":null},{
        "title": "File transfer (export) through ASP.NET core web api",
        "excerpt":"  Tools and Technology used     Visual studio 2019   ASP.NET Core Web Api   Visual C#   JQuery   Step 1: Create a blank solution name “FileExpoter”  Step 2: Add a new asp.net core project in “FileExporer” solution      Type the project name as “ExportApi”   Select API Template   Select “Configure for HTTPS”   Step 3: Add a new asp.net core MVC Project in “File Explorer” Solution      Type the project name as “ClientApp”   Select Template - Web Application (Model-View-Controller)   Step 4: Keep files in a folder     Create a folder name “files”   Keep two files.  mahedeebio.pdf and booklist.xlsx in the files folder   Step 4:  Enable CORS in ExportApi application.     Install nuget package - Microsoft.AspNetCore.Cors   Modify the ConfigureServices and Configure Method in Startup.cs file as follows.       public class Startup     {         public Startup(IConfiguration configuration)         {             Configuration = configuration;         }          public IConfiguration Configuration { get; }          // This method gets called by the runtime. Use this method to add services to the container.         public void ConfigureServices(IServiceCollection services)         {             services.AddControllers();              //Enable CORS - Cross-Origin resource sharing             services.AddCors(options =&gt;             {                 options.AddPolicy(\"CorsPolicy\",                     builder =&gt; builder.AllowAnyOrigin()                     .AllowAnyMethod()                     .AllowAnyHeader()                     );             });              ////If you want to enable any particular IP             //services.AddCors(c =&gt;             //{             //    c.AddPolicy(\"AllowOrigin\", options =&gt; options.WithOrigins(\"https://localhost:44312\"));             //});         }          // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.         public void Configure(IApplicationBuilder app, IWebHostEnvironment env)         {             if (env.IsDevelopment())             {                 app.UseDeveloperExceptionPage();             }              app.UseHttpsRedirection();              app.UseRouting();              // Enable CORS             // Must be in between app.UseRouting and app.UseEndpoints             app.UseCors(\"CorsPolicy\");               // Another of way of Allow CORS             //app.UseCors(options =&gt; options.AllowAnyOrigin());             //app.UseCors(options =&gt; options.WithOrigins(\"https://localhost:44312\"));              app.UseAuthorization();              app.UseEndpoints(endpoints =&gt;             {                 endpoints.MapControllers();             });                    }     }   Step 5: Add a controller class in ExportApi project     Create a controller - name ExportController   Select Template - “API Controller - Empty”   Update the Export Controller as follows   using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; using Microsoft.AspNetCore.Cors; using Microsoft.AspNetCore.Http; using Microsoft.AspNetCore.Mvc;  namespace ExportApi.Controllers {     [EnableCors(\"CorsPolicy\")]     [Route(\"api/[controller]\")]     [ApiController]     public class ExportController : ControllerBase     {         //Get: api/Export/GetExcel         [HttpGet]         [Route(\"GetExcel\")]         public IActionResult GetExcel()         {             try             {                 return Ok(ConverExceltoB64());             }              catch (Exception ex)             {                  throw (ex);             }         }              //Get: api/Export/GetPDF         [HttpGet]         [Route(\"GetPDF\")]         public IActionResult GetPDF()         {             try             {                 return Ok(ConvertPDFtoB64());             }              catch (Exception ex)             {                 throw (ex);             }         }          //Get: api/Export/GetDynamicExcel         [HttpGet]         [Route(\"GetDynamicExcel\")]         public IActionResult GetDynamicExcel()         {             try             {                 return Ok(BuildeExcel());             }             catch (Exception ex)             {                 throw (ex);             }         }           // Convert an excel file to Base64          private string ConverExceltoB64()         {             var docBytes = System.IO.File.ReadAllBytes(System.IO.Path.GetFullPath(@\"files\\booklist.xlsx\"));             string docBase64 = Convert.ToBase64String(docBytes);             return (docBase64);         }           // Convert a pdf file to Base64         private string ConvertPDFtoB64()         {             var docBytes = System.IO.File.ReadAllBytes(System.IO.Path.GetFullPath(@\"files\\mahedeebio.pdf\"));             string docBase64 = Convert.ToBase64String(docBytes);             return (docBase64);         }           // Create an excel on the fly and return as Base64 format         private string BuildeExcel()         {             StringBuilder table = new StringBuilder();             table.Append(\"&lt;table border=`\" + \"1px\" + \"`b&gt;\");             table.Append(\"&lt;tr&gt;\");             table.Append(\"&lt;td&gt;&lt;b&gt;&lt;font face=Arial Narrow size=3&gt;ID&lt;/font&gt;&lt;/b&gt;&lt;/td&gt;\");             table.Append(\"&lt;td&gt;&lt;b&gt;&lt;font face=Arial Narrow size=3&gt;Name&lt;/font&gt;&lt;/b&gt;&lt;/td&gt;\");             table.Append(\"&lt;td&gt;&lt;b&gt;&lt;font face=Arial Narrow size=3&gt;Designation&lt;/font&gt;&lt;/b&gt;&lt;/td&gt;\");             table.Append(\"&lt;/tr&gt;\");              foreach (var item in GetEmployeeAll())             {                 table.Append(\"&lt;tr&gt;\");                 table.Append(\"&lt;td&gt;&lt;font face=Arial Narrow size=\" + \"14px\" + \"&gt;\" + item.Id.ToString() + \"&lt;/font&gt;&lt;/td&gt;\");                 table.Append(\"&lt;td&gt;&lt;font face=Arial Narrow size=\" + \"14px\" + \"&gt;\" + item.Name.ToString() + \"&lt;/font&gt;&lt;/td&gt;\");                 table.Append(\"&lt;td&gt;&lt;font face=Arial Narrow size=\" + \"14px\" + \"&gt;\" + item.Designation.ToString() + \"&lt;/font&gt;&lt;/td&gt;\");                 table.Append(\"&lt;/tr&gt;\");             }              table.Append(\"&lt;/table&gt;\");             byte[] temp = System.Text.Encoding.UTF8.GetBytes(table.ToString());             return System.Convert.ToBase64String(temp);          }           // Return list of employee         private List&lt;Employee&gt; GetEmployeeAll()         {             List&lt;Employee&gt; employees = new List&lt;Employee&gt;             {                 new Employee(){Id = 1, Name = \"Sabrina Jahan Sara\", Designation = \"Software Engineer\"},                 new Employee(){Id = 2, Name = \"Tahiya Hasan Arisha\", Designation = \"Sr. Software Engineer\"},                 new Employee(){Id = 3, Name = \"Ishrat Jahan Nusaifa\", Designation = \"Software Architect\"},                 new Employee(){Id = 4, Name = \"Nusrat Janan\", Designation = \"Project Manager\"}             };              return employees;         }     }       // Employee model class     internal class Employee     {         public int Id { get; set; }         public string Name { get; set; }         public string Designation { get; set; }     } }    Step 6: Modify index.cshtml in ClientApp Project     Modify Views-&gt;Home-&gt;Index.cshtml as follows   @{     ViewData[\"Title\"] = \"Home Page\"; }  &lt;h4&gt;Export file using asp.net web api&lt;/h4&gt; &lt;button type=\"button\" class=\"btn btn-primary\" id=\"btnExcel\"&gt;Export Excel&lt;/button&gt; &lt;button type=\"button\" class=\"btn btn-info\" id=\"btnPDF\"&gt;Export PDF&lt;/button&gt; &lt;button type=\"button\" class=\"btn btn-success\" id=\"btnDynamicExcel\"&gt;Export Dynamic Excel&lt;/button&gt;    @* Implement Scripts section *@  @section Scripts{     &lt;script&gt;         $(document).ready(function () {             //alert('working from document ready!!');         })          //Button's events         $(\"#btnExcel\").click(function () {             //alert(\"Export button clicked\");             ExcelExportar.OnExportarClick();         });          $(\"#btnPDF\").click(function () {             //alert(\"Export for dynamic pdf clicked\");             PDFExportar.OnExportarClick();         });          $(\"#btnDynamicExcel\").click(function () {             //alert(\"Export button clicked\");             DyamicExcelExportar.OnExportarClick();         });             //Excel exporter - start         var ExcelExportar = {             OnExportarClick: function () {                 //alert('click on exporter!');                 $.ajax({                     url: \"https://localhost:44386/api/export/getexcel\",                     type: 'GET',                     dataType: 'text',                     success: ExcelExportar.DownloadExcel,                      failure: function (data) {                         alert('failur: ' + data.responseText);                     }, //End of AJAX failure function                     error: function (request) {                         alert('error: ' + request.responseText);                     } //End of AJAX error function                 });             },              DownloadExcel: function (data) {                 //alert('download excel');                 var createA = document.createElement('a');                 createA.setAttribute('id', 'linkDownload');                 createA.setAttribute('href', 'data:application/vnd.ms-excel;base64,' + data);                 document.body.appendChild(createA);                  createA.download = 'download_latest.xls';                 var selectorHref = document.getElementById('linkDownload');                 selectorHref.click();                 selectorHref.remove();             }         };          //Excel exporter - End           //PDF exporter - start          var PDFExportar = {             OnExportarClick: function () {                 //alert('click on pdf exporter!');                 $.ajax({                     url: \"https://localhost:44386/api/export/getpdf\",                     type: 'GET',                     dataType: 'text',                     success: PDFExportar.DownloadPDF,                     failure: function (data) {                         alert('failur: ' + data.responseText);                     }, //End of AJAX failure function                     error: function (request) {                         alert('error: ' + request.responseText);                     } //End of AJAX error function                 });             },              DownloadPDF: function (data) {                  // Display in a same page with a download link                  // Embed the PDF into the HTML page and show it to the user                 var obj = document.createElement('object');                 obj.style.width = '100%';                 obj.style.height = '842pt';                 obj.type = 'application/pdf';                 obj.data = 'data:application/pdf;base64,' + data;                 document.body.appendChild(obj);                  // Insert a link that allows the user to download the PDF file                 var link = document.createElement('a');                 link.innerHTML = 'Download PDF file';                 link.download = 'file.pdf';                 link.href = 'data:application/octet-stream;base64,' + data;                 document.body.appendChild(link);                   // Display in a new window                 //var objbuilder = '';                 //objbuilder += ('&lt;object width=\"100%\" height=\"100%\"      data=\"data:application/pdf;base64,');                 //objbuilder += (data);                 //objbuilder += ('\" type=\"application/pdf\" class=\"internal\"&gt;');                 //objbuilder += ('&lt;embed src=\"data:application/pdf;base64,');                 //objbuilder += (data);                 //objbuilder += ('\" type=\"application/pdf\" /&gt;');                 //objbuilder += ('&lt;/object&gt;');                  //var win = window.open(\"\", \"_blank\", \"titlebar=yes\");                 //win.document.title = \"My Title\";                 //win.document.write('&lt;html&gt;&lt;body&gt;');                 //win.document.write(objbuilder);                 //win.document.write('&lt;/body&gt;&lt;/html&gt;');                 //layer = jQuery(win.document);               }         };          //PDF exporter - end          var DyamicExcelExportar = {             OnExportarClick: function () {                 $.ajax({                     url: \"https://localhost:44386/api/export/GetDynamicExcel\",                     type: 'GET',                     dataType: 'text',                     success: DyamicExcelExportar.DownloadExcel,                     failure: function (data) {                         alert('failur: ' + data.responseText);                     }, //End of AJAX failure function                     error: function (request) {                         alert('error: ' + request.responseText);                     } //End of AJAX error function                 });             },              DownloadExcel: function (data) {                 //alert('download excel');                 var createA = document.createElement('a');                 createA.setAttribute('id', 'linkDownload');                 createA.setAttribute('href', 'data:application/vnd.ms-excel;base64,' + data);                 document.body.appendChild(createA);                  createA.download = 'download_latest.xls';                 var selectorHref = document.getElementById('linkDownload');                 selectorHref.click();                 selectorHref.remove();             }         };      &lt;/script&gt; }   Step 7: Run Multiple projects     Run both ExportApi and ClientApp project   To run both multiple project right click on solution-&gt;Properties-&gt;Startup Project-&gt;Multiple Start up project, Select both project as start.   Click the button on button of index page and you will see the output.   Download source code  ","categories": ["ASP.NET","ASP.NET Core","Web API","C#"],
        "tags": ["csharp","aspnet","aspnetcore"],
        "url": "https://mahedee.github.io//export-file-using-aspnet-core-web-api/",
        "teaser":null},{
        "title": "Building a web application using React and asp.net core(Part 01)",
        "excerpt":"  React is an open-source, javascript library for building UI components. It is the most popular front end framework. It is maintained by facebook. It can be used for SPA or mobile application development. On the other hand, .net core is an open-source, cross-platform supported framework. Now a days, it is also most popular for software development. In this article, I will show you, how to create a simple application with CRUD operation using asp.net core web api and react. I will show a simple employee profile of HRM application. Let’s start.   Tools and Technology used     Visual Studio Code   ASP.NET Core Web Api   Visual C#   React   Step 1: Create a new application     Visual Studio Code -&gt; File -&gt; Open Folder   Go to View -&gt; Terminal   Type dotnet new react -o HRM in the terminal   Type cd HRM to enter into the HRM folder   In the application folder you will see another folder name ClientApp which is actually react application inside dotnet application.   Now run the application using donet run command   Step 2: Create model classes     Create a model class name Employee in Model folder as follows   Employee.cs      public class Employee     {         public int Id { get; set; }         public string Name { get; set; }         public string Designation {get; set;}         public string FathersName{get; set;}         public string MothersName{get; set;}         public DateTime DateOfBirth{get; set;}     }   Step 3: Install in memory database provider for entity framework core     Go to the terminal and type the following command  dotnet add package Microsoft.EntityFrameworkCore.InMemory   Step 4: Create a dbContext class     Create HRMContext Class in Db folder as follows   HRMContext.cs   using HRM.Models; using Microsoft.EntityFrameworkCore;  namespace HRM.Db {     public class HRMContext : DbContext     {         public HRMContext(DbContextOptions&lt;HRMContext&gt; options) : base(options)         {          }         public DbSet&lt;Employee&gt; Employees { get; set; }     } }      Configure in memory database in the ConfigureService method of Startup class as follows.   public void ConfigureServices(IServiceCollection services) {     services.AddDbContext&lt;HRMContext&gt;(opt =&gt; opt.UseInMemoryDatabase(\"HRMDB\")); }   Step 5: Add some seed data     Create a class name SeedDataGenerator in Db folder as follows   using System; using System.Linq; using HRM.Db; using HRM.Models; using Microsoft.EntityFrameworkCore; using Microsoft.Extensions.DependencyInjection;  public class SeedDataGenerator {     public static void Initialize(IServiceProvider serviceProvider)     {         using (var context = new HRMContext(             serviceProvider.GetRequiredService&lt;DbContextOptions&lt;HRMContext&gt;&gt;()))         {             // Check any employee exists              if (context.Employees.Any())             {                 return; // Data already exists no need to generate             }              context.Employees.AddRange(                 new Employee                 {                     Name = \"Md. Mahedee Hasan\",                     Designation = \"Head of Software Development\",                     FathersName = \"Yeasin Bhuiyan\",                     MothersName = \"Moriom Begum\",                     DateOfBirth = new DateTime(1984, 12, 19, 00, 00, 00)                 },                  new Employee                 {                     Name = \"Khaleda Islam\",                     Designation = \"Software Engineer\",                     FathersName = \"Shahidul Islam\",                     MothersName = \"Momtaz Begum\",                     DateOfBirth = new DateTime(1990, 10, 29, 00, 00, 00)                 },                                  new Employee                 {                     Name = \"Tahiya Hasan Arisha\",                     Designation = \"Jr. Software Engineer\",                     FathersName = \"Md. Mahedee Hasan\",                     MothersName = \"Khaleda Islam\",                     DateOfBirth = new DateTime(2017, 09, 17, 00, 00, 00)                 }             );             context.SaveChanges();          }     } }      Call SeedDataGenerator from Program class to generate seed data as follows   using HRM.Db; using Microsoft.AspNetCore.Hosting; using Microsoft.Extensions.DependencyInjection; using Microsoft.Extensions.Hosting;  namespace HRM {     public class Program     {         public static void Main(string[] args)         {             //CreateHostBuilder(args).Build().Run();              // 1. Get the IHost which will host this application             var host = CreateHostBuilder(args).Build();              // 2. Find the service within the scope to use             using (var scope = host.Services.CreateScope())             {                 // 3. Get the instance of HRMContext in our service layer                 var services = scope.ServiceProvider;                 var context = services.GetRequiredService&lt;HRMContext&gt;();                  // 4. Call the SeedDataGenerator to generate seed data                 SeedDataGenerator.Initialize(services);               }              // Run the application              host.Run();         }          public static IHostBuilder CreateHostBuilder(string[] args) =&gt;             Host.CreateDefaultBuilder(args)                 .ConfigureWebHostDefaults(webBuilder =&gt;                 {                     webBuilder.UseStartup&lt;Startup&gt;();                 });     } }    Step 6: Create IRepository and Repository class in the Repository folder as follows   IEmployeeRepository.cs    using System.Collections.Generic; using System.Threading.Tasks; using HRM.Models;  namespace HRM.Repository {     public interface IEmployeeRepository     {         public Task&lt;IEnumerable&lt;Employee&gt;&gt; SelectAllEmployees();         public Task&lt;Employee&gt; SelectEmployee(int id);         public Task&lt;string&gt; UpdateEmployee(int id, Employee employee);         public Task&lt;string&gt; SaveEmployee(Employee employee);         public Task&lt;string&gt; DeleteEmployee(int id);     } }     EmployeeRepository.cs   using System; using System.Collections.Generic; using System.Linq; using System.Threading.Tasks; using HRM.Db; using HRM.Models; using Microsoft.EntityFrameworkCore;  namespace HRM.Repository {     public class EmployeeRepository : IEmployeeRepository     {         private readonly HRMContext _context;          public EmployeeRepository(HRMContext context)         {             _context = context;         }          public async Task&lt;IEnumerable&lt;Employee&gt;&gt; SelectAllEmployees()         {             try             {                 var allemployess = _context.Employees.ToListAsync();                 return await allemployess;             }             catch (Exception exp)             {                 throw (exp);             }         }          public async Task&lt;Employee&gt; SelectEmployee(int id)         {             try             {                 var employee = _context.Employees.FindAsync(id);                 return await employee;             }             catch (Exception exp)             {                 throw (exp);             }         }          public async Task&lt;string&gt; UpdateEmployee(int id, Employee employee)         {             if (id != employee.Id)             {                 return \"Cannot be updated!\";             }              _context.Entry(employee).State = EntityState.Modified;              try             {                 await _context.SaveChangesAsync();                 return \"Data updated successfully!\";             }             catch (DbUpdateConcurrencyException exp)             {                 if (!EmployeeExists(id))                 {                     return \"Data not found!\";                 }                 else                 {                     throw (exp);                 }             }         }          public async Task&lt;string&gt; SaveEmployee(Employee employee)         {             _context.Employees.Add(employee);             try             {                 await _context.SaveChangesAsync();                 return \"Data saved successfully!\";             }             catch (Exception exp)             {                 throw (exp);             }         }          public async Task&lt;string&gt; DeleteEmployee(int id)         {             var employee = await _context.Employees.FindAsync(id);             if (employee == null)             {                 return \"Data not found!\";             }              _context.Employees.Remove(employee);             await _context.SaveChangesAsync();              return \"Data deleted successfully!\";         }          private bool EmployeeExists(int id)         {             return _context.Employees.Any(e =&gt; e.Id == id);         }      } }    Step 7: Create IEmployeeService and EmployeeService class in the Services folder as follows   IEmployeeService.cs  using System.Collections.Generic; using System.Threading.Tasks; using HRM.Models;  namespace HRM.Services {     public interface IEmployeeService     {         public Task&lt;IEnumerable&lt;Employee&gt;&gt; GetEmployees();         public Task&lt;Employee&gt; GetEmployee(int id);         public Task&lt;string&gt; EditEmployee(int id, Employee employee);         public Task&lt;string&gt; AddEmployee(Employee employee);         public Task&lt;string&gt; RemoveEmployee(int id);      } }    EmployeeService.cs   using System; using System.Collections.Generic; using System.Threading.Tasks; using HRM.Models; using HRM.Repository;  namespace HRM.Services {     public class EmployeeService : IEmployeeService     {         IEmployeeRepository _employeeRepository;         public EmployeeService(IEmployeeRepository repository)         {             _employeeRepository = repository;         }          public async Task&lt;IEnumerable&lt;Employee&gt;&gt; GetEmployees()         {             try             {                 return await _employeeRepository.SelectAllEmployees();             }             catch(Exception exp)             {                 throw (exp);             }         }          public async Task&lt;Employee&gt; GetEmployee(int id)         {             try             {                 return await _employeeRepository.SelectEmployee(id);             }             catch(Exception exp)             {                 throw(exp);             }         }          public async Task&lt;string&gt; EditEmployee(int id, Employee employee)         {             try             {                 return await _employeeRepository.UpdateEmployee(id, employee);             }             catch(Exception exp)             {                 throw(exp);             }         }          public async Task&lt;string&gt; AddEmployee(Employee employee)         {             try             {                 return await _employeeRepository.SaveEmployee(employee);             }             catch(Exception exp)             {                 throw(exp);             }         }          public async Task&lt;string&gt; RemoveEmployee(int id)         {             try             {                 return await _employeeRepository.DeleteEmployee(id);             }             catch(Exception exp)             {                 throw(exp);             }         }      } }   Step 7: Register interfaces and corresponding concrete class in the ConfigureServic method   public void ConfigureServices(IServiceCollection services) {     services.AddDbContext&lt;HRMContext&gt;(opt =&gt; opt.UseInMemoryDatabase(\"HRMDB\"));           services.AddControllersWithViews();      // In production, the React files will be served from this directory     services.AddSpaStaticFiles(configuration =&gt;     {         configuration.RootPath = \"ClientApp/build\";     });      //Register      services.AddScoped&lt;IEmployeeRepository, EmployeeRepository&gt;();     services.AddScoped&lt;IEmployeeService, EmployeeService&gt;(); }   Step 8: Add controller     Add a controller class name - EmployeesController in Controllers folder as follows.   EmployeesController.cs   using System; using System.Collections.Generic; using System.Threading.Tasks; using HRM.Db; using HRM.Models; using HRM.Services; using Microsoft.AspNetCore.Mvc; using Microsoft.EntityFrameworkCore;  [Route(\"api/[controller]\")] public class EmployeesController : Controller {      private readonly IEmployeeService _employeeService;      public EmployeesController(IEmployeeService employeeService)     {         _employeeService = employeeService;     }      [HttpGet(\"[action]\")]     public async Task&lt;ActionResult&lt;IEnumerable&lt;Employee&gt;&gt;&gt; GetEmployees()     {         try         {              var allemployess = await _employeeService.GetEmployees();              return Ok(allemployess);         }         catch(Exception exp)         {             return BadRequest(exp.Message);         }         //return await _context.Employees.ToListAsync();     }           [HttpGet(\"Employee/{id}\")]     public async Task&lt;ActionResult&lt;Employee&gt;&gt; GetEmployeeById(int id)     {         try         {             var employee = await _employeeService.GetEmployee(id);             return Ok(employee);         }         catch(Exception exp)         {             return BadRequest(exp.Message);         }     }      [HttpPost(\"AddEmployee\")]     public async Task&lt;ActionResult&gt; AddEmployee([FromBody]Employee employee)     {         try         {             string result = string.Empty;             if(employee != null)             {                 result = await _employeeService.AddEmployee(employee);             }             return Ok(result);         }         catch(Exception exp)         {             return BadRequest(exp.Message);             //         }     }      [HttpPut(\"EditEmployee/{id}\")]     public async Task&lt;ActionResult&gt; EditEmployee(int id, [FromBody]Employee employee)     {         try         {             string result = string.Empty;             result = await _employeeService.EditEmployee(id, employee);             return Ok(result);         }         catch(Exception exp)         {             return BadRequest(exp.Message);         }     }      [HttpDelete(\"DeleteEmployee/{id}\")]     public async Task&lt;ActionResult&gt; DeleteEmployee(int id)     {         try         {             string result = string.Empty;             result = await _employeeService.RemoveEmployee(id);             return Ok(result);         }         catch(Exception exp)         {             return BadRequest(exp.Message);         }     }  }   Step 9: Test the application using postman     Go to terminal and type dotnet run to run the application   Test api end point using postman as follows.   ","categories": ["ASP.NET","ASP.NET Core","C#","React"],
        "tags": ["csharp","aspnet","react"],
        "url": "https://mahedee.github.io//building-a-web-application-using-react-and-asp.net-core-part-01/",
        "teaser":null},{
        "title": "Building a web application using React and asp.net core(Part 02)",
        "excerpt":"  In the previous article, I have shown you how to create a back end application using asp.net core web api. I have created some api end points for employee profile. In this article, I will design react pages, connect with api end points and perform CRUD operation using react.   Step 1: Install axios to make http request     Go to terminal -&gt; go to the directory -&gt; ClientApp   Run the command npm install axios --save   Step 2: Write class components     Create a “Employee” folder in src-&gt;components.   Now create List, Create, Delete and Edit componets in the employee folder as follows   Employee.jsx   import React, {Component} from 'react'; import axios from 'axios';  // export keyword is a new feature in ES6 let export your functions ,  // variables so you can get access to them in other js files  export class Employees extends Component {     constructor(props){         super(props);          this.OnEmployeeEdit = this.OnEmployeeEdit.bind(this);         this.OnEmployeeDelete = this.OnEmployeeDelete.bind(this);         this.onEmployeeCreate = this.onEmployeeCreate.bind(this);          this.state = {             employees: [],             loading: true,             failed: false,             error: ''         }     }      /*Lifecycle Method: The componentDidMount() method runs after      the component output has been rendered to the DOM.*/      componentDidMount(){         this.populateEmployeesData();     }      // Event handler for create button     onEmployeeCreate()     {         const {history} = this.props;         history.push('/create');     }      // Event handler for edit button     OnEmployeeEdit(id){         const {history} = this.props;         history.push('/edit/'+id);     }      // Event handler for delete button     OnEmployeeDelete(id){         const {history} = this.props;         history.push('/delete/'+id);     }      populateEmployeesData(){         axios.get(\"api/Employees/GetEmployees\").then(result =&gt; {             const response = result.data;             this.setState({employees: response, loading: false, error: \"\"});         }).catch(error =&gt; {             this.setState({employees: [], loading: false, failed: true, error: \"Employess could not be loaded!\"});         });     }      renderAllEmployeeTable(employees){         return(             &lt;table className=\"table table-striped\"&gt;                 &lt;thead&gt;                     &lt;tr&gt;                         &lt;th&gt;Name&lt;/th&gt;                         &lt;th&gt;Designation&lt;/th&gt;                         &lt;th&gt;Father's Name&lt;/th&gt;                         &lt;th&gt;Mother's Name&lt;/th&gt;                         &lt;th&gt;Date of Birth&lt;/th&gt;                         &lt;th&gt;Actions&lt;/th&gt;                     &lt;/tr&gt;                 &lt;/thead&gt;                 &lt;tbody&gt;                     {                         employees.map(employee =&gt; (                             &lt;tr key={employee.id}&gt;                                 &lt;td&gt;{employee.name}&lt;/td&gt;                                 &lt;td&gt;{employee.designation}&lt;/td&gt;                                 &lt;td&gt;{employee.fathersName}&lt;/td&gt;                                 &lt;td&gt;{employee.mothersName}&lt;/td&gt;                                 &lt;td&gt;{ new Date(employee.dateOfBirth).toISOString().slice(0,10)}&lt;/td&gt;                                 &lt;td&gt;&lt;button onClick={()=&gt; this.OnEmployeeEdit(employee.id)}  className= \"btn btn-success\"&gt;Edit&lt;/button&gt; ||                                  &lt;button onClick={()=&gt; this.OnEmployeeDelete(employee.id)} className= \"btn btn-danger\"&gt;Delete&lt;/button&gt;&lt;/td&gt;                             &lt;/tr&gt;                         ))                     }                 &lt;/tbody&gt;             &lt;/table&gt;         );     }      render(){          let content = this.state.loading ? (             &lt;p&gt;                 &lt;em&gt;Loading...&lt;/em&gt;             &lt;/p&gt;         ):(             this.renderAllEmployeeTable(this.state.employees)         )          return(             &lt;div&gt;                 &lt;h2&gt;Employee&lt;/h2&gt;                 &lt;button onClick={()=&gt; this.onEmployeeCreate()} className=\"btn btn-primary\"&gt;Create&lt;/button&gt;                 {content}             &lt;/div&gt;         );     }  }   Create.jsx  import React, { Component } from \"react\"; import axios from \"axios\";  export class Create extends Component{      constructor(props){         super(props);          this.onChangeName = this.onChangeName.bind(this);         this.onChangeDesignation = this.onChangeDesignation.bind(this);         this.onChangeFathersName = this.onChangeFathersName.bind(this);         this.onChangeMothersName = this.onChangeMothersName.bind(this);         this.onChangeDOB = this.onChangeDOB.bind(this);         this.onSubmit = this.onSubmit.bind(this);           this.state = {             name: '',             designation: '',             fathersName: '',             mothersName: '',             //This is date time object             dateOfBirth: null          }     }      onChangeName(e){         this.setState({             name: e.target.value         })     }      onChangeDesignation(e){         this.setState({             designation: e.target.value         })     }      onChangeFathersName(e){         this.setState({             fathersName: e.target.value         })      }      onChangeMothersName(e){         this.setState({             mothersName: e.target.value         })      }      onChangeDOB(e){         this.setState({             dateOfBirth: e.target.value         })      }      onSubmit(e){         e.preventDefault();         const {history} = this.props;          let employeeObj = {             name: this.state.name,             designation: this.state.designation,             fathersName: this.state.fathersName,             mothersName: this.state.mothersName,             dateOfBirth: this.state.dateOfBirth         }          axios.post(\"api/Employees/AddEmployee\", employeeObj).then(result =&gt; {             history.push('/employees');         })     }      render(){         return(             &lt;div className=\"row\"&gt;                 &lt;div className=\"col-md-4\"&gt;                 &lt;h3&gt;Add new employee&lt;/h3&gt;                 &lt;form onSubmit={this.onSubmit}&gt;                     &lt;div className=\"form-group\"&gt;                         &lt;label className=\"control-label\"&gt;Name: &lt;/label&gt;                         &lt;input className=\"form-control\" type=\"text\" value = {this.state.name} onChange={this.onChangeName}&gt;&lt;/input&gt;                     &lt;/div&gt;                      &lt;div className=\"form-group\"&gt;                         &lt;label className=\"control-label\"&gt;Designation: &lt;/label&gt;                        &lt;input className=\"form-control\" type=\"text\" value = {this.state.designation} onChange={this.onChangeDesignation}&gt;&lt;/input&gt;                     &lt;/div&gt;                      &lt;div className=\"form-group\"&gt;                         &lt;label className=\"control-label\"&gt;Father's Name: &lt;/label&gt;                         &lt;input className=\"form-control\" type=\"text\" value = {this.state.fathersName} onChange={this.onChangeFathersName}&gt;&lt;/input&gt;                     &lt;/div&gt;                      &lt;div className=\"form-group\"&gt;                         &lt;label className=\"control-label\"&gt;Mother's Name: &lt;/label&gt;                         &lt;input className=\"form-control\" type=\"text\" value = {this.state.mothersName} onChange={this.onChangeMothersName}&gt;&lt;/input&gt;                     &lt;/div&gt;                      &lt;div className=\"form-group\"&gt;                         &lt;label className=\"control-label\"&gt;Date of Birth: &lt;/label&gt;                         &lt;input className=\"form-control\" type=\"date\" value = {this.state.dateOfBirth} onChange={this.onChangeDOB}&gt;&lt;/input&gt;                     &lt;/div&gt;                      &lt;div className=\"form-group\"&gt;                         &lt;input type=\"submit\" value = \"Add Employee\" className=\"btn btn-primary\"&gt;&lt;/input&gt;                     &lt;/div&gt;                  &lt;/form&gt;                  &lt;/div&gt;             &lt;/div&gt;         )     }  }    _Edit.jsx  import axios from \"axios\"; import React, { Component } from \"react\";  export class Edit extends Component {     constructor(props) {         super(props);          this.onChangeName = this.onChangeName.bind(this);         this.onChangeDesignation = this.onChangeDesignation.bind(this);         this.onChangeFathersName = this.onChangeFathersName.bind(this);         this.onChangeMothersName = this.onChangeMothersName.bind(this);         this.onChangeDOB = this.onChangeDOB.bind(this);         this.onSubmit = this.onSubmit.bind(this);          this.state = {             id : '',             name: '',             designation: '',             fathersName: '',             mothersName: '',             //This is date time object             dateOfBirth: null          }     }      componentDidMount(){         const {id} = this.props.match.params;         axios.get(\"api/Employees/Employee/\" + id).then(employee =&gt;{             const response = employee.data;             this.setState({                 id : response.id,                 name: response.name,                 designation: response.designation,                 fathersName: response.fathersName,                 mothersName: response.mothersName,                 dateOfBirth: new Date(response.dateOfBirth).toISOString().slice(0,10)             })         })         //alert(id);     }      onChangeName(e) {         this.setState({             name: e.target.value         });     }      onChangeDesignation(e) {         this.setState({             designation: e.target.value         });     }      onChangeFathersName(e) {         this.setState({             fathersName: e.target.value         });      }      onChangeMothersName(e) {         this.setState({             mothersName: e.target.value         });      }      onChangeDOB(e) {         this.setState({             dateOfBirth: e.target.value         });     }       onUpdateCancel(){         const {history} = this.props;         history.push('/employees');     }      onSubmit(e){                 e.preventDefault();         const {history} = this.props;         const {id} = this.props.match.params;         let employeeObj = {             id: this.state.id,             name: this.state.name,             designation: this.state.designation,             fathersName: this.state.fathersName,             mothersName: this.state.mothersName,             dateOfBirth: new Date(this.state.dateOfBirth).toISOString()         }          axios.put(\"api/Employees/EditEmployee/\"+id, employeeObj).then(result =&gt; {             history.push('/employees');         })     }      render() {         return (             &lt;div className=\"row\"&gt;                 &lt;div className=\"col-md-4\"&gt;                     &lt;h3&gt;Edit Employee&lt;/h3&gt;                     &lt;form onSubmit={this.onSubmit}&gt;                         &lt;div className=\"form-group\"&gt;                             &lt;label className=\"control-label\"&gt;Name: &lt;/label&gt;                             &lt;input className=\"form-control\" type=\"text\" value={this.state.name} onChange={this.onChangeName}&gt;&lt;/input&gt;                         &lt;/div&gt;                          &lt;div className=\"form-group\"&gt;                             &lt;label className=\"control-label\"&gt;Designation: &lt;/label&gt;                             &lt;input className=\"form-control\" type=\"text\" value={this.state.designation} onChange={this.onChangeDesignation}&gt;&lt;/input&gt;                         &lt;/div&gt;                          &lt;div className=\"form-group\"&gt;                             &lt;label className=\"control-label\"&gt;Father's Name: &lt;/label&gt;                             &lt;input className=\"form-control\" type=\"text\" value={this.state.fathersName} onChange={this.onChangeFathersName}&gt;&lt;/input&gt;                         &lt;/div&gt;                          &lt;div className=\"form-group\"&gt;                             &lt;label className=\"control-label\"&gt;Mother's Name: &lt;/label&gt;                             &lt;input className=\"form-control\" type=\"text\" value={this.state.mothersName} onChange={this.onChangeMothersName}&gt;&lt;/input&gt;                         &lt;/div&gt;                          &lt;div className=\"form-group\"&gt;                             &lt;label className=\"control-label\"&gt;Date of Birth: &lt;/label&gt;                             &lt;input className=\"form-control\" type=\"date\" value={this.state.dateOfBirth} onChange={this.onChangeDOB}&gt;&lt;/input&gt;                         &lt;/div&gt;                          &lt;div className=\"form-group\"&gt;                             &lt;button onClick={this.onUpdateCancel} className=\"btn btn-default\"&gt;Cancel&lt;/button&gt;                             &lt;input type=\"submit\" value=\"Edit\" className=\"btn btn-primary\"&gt;&lt;/input&gt;                         &lt;/div&gt;                      &lt;/form&gt;                  &lt;/div&gt;             &lt;/div&gt;         )     } }   Delete.jsx  import axios from \"axios\"; import React, { Component } from \"react\";  export class Delete extends Component{     constructor(props){         super(props);          this.onCancel = this.onCancel.bind(this);         this.onConfirmation = this.onConfirmation.bind(this);          this.state = {             name: '',             designation: '',             fathersName: '',             mothersName: '',             dateOfBirth: null         }     }      componentDidMount(){         const {id} = this.props.match.params;         axios.get(\"api/Employees/Employee/\" + id).then(employee =&gt;{             const response = employee.data;             this.setState({                 id : response.id,                 name: response.name,                 designation: response.designation,                 fathersName: response.fathersName,                 mothersName: response.mothersName,                 dateOfBirth: new Date(response.dateOfBirth).toISOString().slice(0,10)             })         })     }      onCancel() {         const { history } = this.props;         history.push('/employees');     }      onConfirmation(e){         e.preventDefault();          const {id} = this.props.match.params;         const {history} = this.props;                  axios.delete(\"api/Employees/DeleteEmployee/\" + id).then(result =&gt; {             history.push('/employees');         })      }        render(){         return(             &lt;div&gt;                 &lt;h2&gt;Delete&lt;/h2&gt;                 &lt;h3&gt;Are you sure you want to delete this?&lt;/h3&gt;                 &lt;div&gt;                 &lt;h4&gt;Employee&lt;/h4&gt;                     &lt;dl class=\"row\"&gt;                         &lt;dt class=\"col-sm-2\"&gt;                             Name:                         &lt;/dt&gt;                         &lt;dd class=\"col-sm-10\"&gt;                             {this.state.name}                         &lt;/dd&gt;                         &lt;dt class=\"col-sm-2\"&gt;                             Designation:                         &lt;/dt&gt;                         &lt;dd class=\"col-sm-10\"&gt;                             {this.state.designation}                         &lt;/dd&gt;                         &lt;dt class=\"col-sm-2\"&gt;                             Father's Name:                         &lt;/dt&gt;                         &lt;dd class=\"col-sm-10\"&gt;                             {this.state.fathersName}                         &lt;/dd&gt;                         &lt;dt class=\"col-sm-2\"&gt;                             Mother's Name:                         &lt;/dt&gt;                         &lt;dd class=\"col-sm-10\"&gt;                             {this.state.mothersName}                         &lt;/dd&gt;                          &lt;dt class=\"col-sm-2\"&gt;                             Date of Birth:                         &lt;/dt&gt;                         &lt;dd class=\"col-sm-10\"&gt;                             {this.state.dateOfBirth}                         &lt;/dd&gt;                      &lt;/dl&gt;                      &lt;form onSubmit={this.onConfirmation}&gt;                         &lt;input type=\"hidden\" asp-for=\"Id\" /&gt;                         &lt;button type=\"submit\" class=\"btn btn-danger\"&gt;Delete&lt;/button&gt; |                         &lt;button onClick={this.onCancel} className=\"btn btn-primary\"&gt;Back to List&lt;/button&gt;                     &lt;/form&gt;                 &lt;/div&gt;             &lt;/div&gt;         )     } }  Step 3: Add Route in App.js     Modify App.js as follows   Here I have define route for employees, create, edit, delete   App.js  import React, { Component } from 'react'; import { Route } from 'react-router'; import { Layout } from './components/Layout'; import { Home } from './components/Home'; import { FetchData } from './components/FetchData'; import { Counter } from './components/Counter';  import './custom.css'  import {Employees} from './components/Employee/Employees'; import { Create } from './components/Employee/Create'; import { Edit } from './components/Employee/Edit'; import { Delete } from './components/Employee/Delete';  export default class App extends Component {   static displayName = App.name;    render () {     return (       &lt;Layout&gt;         &lt;Route exact path='/' component={Home} /&gt;         &lt;Route path='/employees' component={Employees} /&gt;         &lt;Route path='/create' component = {Create}&gt;&lt;/Route&gt;         &lt;Route path='/Edit/:id' component = {Edit}&gt;&lt;/Route&gt;         &lt;Route path='/Delete/:id' component = {Delete}&gt;&lt;/Route&gt;         &lt;Route path='/counter' component={Counter} /&gt;         &lt;Route path='/fetch-data' component={FetchData} /&gt;       &lt;/Layout&gt;     );   } }   Step 4: Add Employee in the menu     Add Employee link in the menu   Change NavMenu.js as follows   NavMenu.js  import React, { Component } from 'react'; import { Collapse, Container, Navbar, NavbarBrand, NavbarToggler, NavItem, NavLink } from 'reactstrap'; import { Link } from 'react-router-dom'; import './NavMenu.css';  export class NavMenu extends Component {   static displayName = NavMenu.name;    constructor (props) {     super(props);      this.toggleNavbar = this.toggleNavbar.bind(this);     this.state = {       collapsed: true     };   }    toggleNavbar () {     this.setState({       collapsed: !this.state.collapsed     });   }    render () {     return (       &lt;header&gt;         &lt;Navbar className=\"navbar-expand-sm navbar-toggleable-sm ng-white border-bottom box-shadow mb-3\" light&gt;           &lt;Container&gt;             &lt;NavbarBrand tag={Link} to=\"/\"&gt;HRM&lt;/NavbarBrand&gt;             &lt;NavbarToggler onClick={this.toggleNavbar} className=\"mr-2\" /&gt;             &lt;Collapse className=\"d-sm-inline-flex flex-sm-row-reverse\" isOpen={!this.state.collapsed} navbar&gt;               &lt;ul className=\"navbar-nav flex-grow\"&gt;                 &lt;NavItem&gt;                   &lt;NavLink tag={Link} className=\"text-dark\" to=\"/\"&gt;Home&lt;/NavLink&gt;                 &lt;/NavItem&gt;                 &lt;NavItem&gt;                   &lt;NavLink tag={Link} className=\"text-dark\" to=\"/employees\"&gt;Employees&lt;/NavLink&gt;                 &lt;/NavItem&gt;                 &lt;NavItem&gt;                   &lt;NavLink tag={Link} className=\"text-dark\" to=\"/counter\"&gt;Counter&lt;/NavLink&gt;                 &lt;/NavItem&gt;                 &lt;NavItem&gt;                   &lt;NavLink tag={Link} className=\"text-dark\" to=\"/fetch-data\"&gt;Fetch data&lt;/NavLink&gt;                 &lt;/NavItem&gt;               &lt;/ul&gt;             &lt;/Collapse&gt;           &lt;/Container&gt;         &lt;/Navbar&gt;       &lt;/header&gt;     );   } }    Step 5: Run and test the application     Go to terminal and type dotnet run to run the application   Now view, insert, update and delete employee information.   Download Source Code  ","categories": ["ASP.NET","ASP.NET Core","C#","React"],
        "tags": ["csharp","aspnet","react"],
        "url": "https://mahedee.github.io//building-a-web-application-using-react-and-asp.net-core-part-02/",
        "teaser":null},{
        "title": "Export and Import Docker images and container with asp.net core application",
        "excerpt":"Sometimes we need to work in a disconnected environment. In that situation, we need to export/import docker images and container. Here I will show how to export and import images and container.   Save and load docker images  Step 1: Create a sample asp.net core application - name CatalogApp   Step 2: Containerize CatalogApp     Add a dockerfile in the root directory - here dockerfile and sln file exists in the same directory.   You see how to Containerize a .NET Core app   # https://hub.docker.com/_/microsoft-dotnet FROM mcr.microsoft.com/dotnet/sdk:5.0 AS build WORKDIR /source  # copy csproj and restore as distinct layers COPY *.sln . COPY CatalogApp/*.csproj ./CatalogApp/ RUN dotnet restore  # copy everything else and build app COPY CatalogApp/. ./CatalogApp/ WORKDIR /source/CatalogApp RUN dotnet publish -c release -o /app --no-restore  # final stage/image FROM mcr.microsoft.com/dotnet/aspnet:5.0 WORKDIR /app COPY --from=build /app ./ ENTRYPOINT [\"dotnet\", \"CatalogApp.dll\"]   Step 3: Run in linux container     Navigate to the Dockerfile folder   Run the following commands to build the application in docker     docker build -t catalogapp .           Now you will see an image name catalogapp is created. To check images, run the following command.     docker images           If you want to run the application (images) in docker, run the following command     docker run -it --rm -p 5000:80 --name catalogapp_container catalogapp           Browse application at http://localhost:5000/ to see output   Step 3: Save docker images     To export “catalogapp” image run the following command     docker save -o D:\\Images\\catalogapp.tar catalogapp           You will see a catalogapp.tar file in D:\\Images\\ directory   Step 4: Now load docker images     You may run the following command to remove all docker images     docker rmi $(docker images -q)           Go to to the directory D:\\Images\\   Run the following command to load images. You will see two images is created with dev and latest tag.     PS D:\\Images&gt; docker load -i catalogapp.tar           Run loaded image     Now run the following command to run the catalogapp images with latest tag.     docker run -it --rm -p 5000:80 --name catalogapp_container catalogapp:latest           Browse application at http://localhost:5000/ to see output   Export and import docker container  Step 1: Create a sample asp.net core application as before - name CatalogApp   Step 2: Containerize CatalogApp     Add a dockerfile in the root directory - here dockerfile and sln file exists in the same directory.   You see how to Containerize a .NET Core app   # https://hub.docker.com/_/microsoft-dotnet FROM mcr.microsoft.com/dotnet/sdk:5.0 AS build WORKDIR /source  # copy csproj and restore as distinct layers COPY *.sln . COPY CatalogApp/*.csproj ./CatalogApp/ RUN dotnet restore  # copy everything else and build app COPY CatalogApp/. ./CatalogApp/ WORKDIR /source/CatalogApp RUN dotnet publish -c release -o /app --no-restore  # final stage/image FROM mcr.microsoft.com/dotnet/aspnet:5.0 WORKDIR /app COPY --from=build /app ./ ENTRYPOINT [\"dotnet\", \"CatalogApp.dll\"]   Step 3: Run in linux container     Navigate to the Dockerfile folder   Run the following commands to build the application in docker     docker build -t catalogapp .           Now you will see an image name catalogapp is created. To check images, run the following command.     docker images           If you want to run the application (images) in docker, run the following command     docker run -it --rm -p 5000:80 --name catalogapp_container catalogapp           Browse application at http://localhost:5000/ to see output   Step 3: Export docker container     To export “catalogapp_container” container run the following command     docker export -o D:\\Containers\\catalogapp_container.tar catalogapp_container           You will see a catalogapp_container file in D:\\Containers\\ directory   Step 4: Now import docker container     You may run the following command to remove all docker images     docker rmi $(docker images -q)           Go to to the directory D:\\Containers\\   Run the following command to load images. You will see two images is created with dev and latest tag.     PS D:\\Containers&gt; docker import catalogapp_container.tar catalogapp:imp           Run Imported image     Now run the following command to run the catalogapp images with latest tag.     docker run -it --rm -p 5000:80 --name catalogapp_container catalogapp:imp           Browse application at http://localhost:5000/ to see output   Summary  Let’s summarize the idea of image and container export and import.     Image load is just copying and container import is just like turn container to image.   To export and import images, use docker save and load command.   To export and import container, use docker export and import command.   Exported tar file is smaller than saved tar file. Because the exported file is a container, when the export file is imported, all the history of the image (that is, the information of each layer) cannot be retained, and the rollback operation cannot be performed. And save is based on the mirror image, so you can completely retain the information of each layer when importing.   It’s not possible to rename loaded images but you can do it for imported image like catalogapp:imp   Source Code    ","categories": ["Docker","ASP.NET Core","Microservices"],
        "tags": ["aspnetcore","docker","microservices"],
        "url": "https://mahedee.github.io//Export-and-Import-Docker-images-and-container-with-asp.net-core-application/",
        "teaser":null},{
        "title": "Create a sentiment analysis app using ML.NET",
        "excerpt":"  Application overview  ML.NET is a free, open source and cross platform machine learning framework. It is easily integrated with .NET development environment. ML.NET allows you to train, build, and ship custom machine learning models using C# and some other languages. Here a simple sentiment analysis application will be created using ML.NET and C#. Let’s start.   Tools and Technology used  The following tools and technologies has been used for this application     Visual Studio 2019   Visual C#   Step 1: Create a console application     Create a new project using visual studio 2019   Choose the C# Console App (.NET Core) project template   Change the project and solution name as “SentimentAnalysis”   Click create button to create the project.   Step 2: Enable the ML.NET Model Builder preview feature Press right button on the project file -&gt; Add -&gt; Machine learning You will see the following pop up message. Enable it.   Would you like to enable the ML.NET Model Builder preview feature so you can add Machine Learning to your .NET projects? Enable   Step 3: Select model builder scenario     Press right button on the project -&gt; Add -&gt; Machine Learning   Select Text classification   Keep the Local Environment and click on data (to move data step)     Step 4: Download and add data     Download the Sentiment Labelled Sentences datasets from the UCI Machine Learning Repository   Unzip the file and keep the “yelp_labelled.txt” file to Data folder   The first column of this file represents the comments and the second column represent the sentiment of the text (0 for negative and 1 for positive)   Add data     In this form, select File as the input data source type   Browse file yelp_labelled.txt. Once you are selected, you will see the preview of the data.   Select “col1” for Column to predict (Label) as the image below   Now click Train button to move to the train step      Step 5: Train your model     Time to train set automatically based on data. But you can manually set it.   Click start training button. You will see the following point the screen.   Best accuracy - Percentage of accuracy of the current model   Best model - This shows you which algorithm performed the best during Model Builder’s exploration.  Training time - Total times taken to run training Models explored (total) - This shows you the total number of models explored by Model Builder in the given amount of time.   Source : Microsoft docs      Now click Evaluate to move to the evaluate step   Step 6: Evaluate your model     Type a sentence in Try your model section.   I Typed “This is a fantastic place” and it shows positive is 98% and negative 2%      Step 7: Add project in to the solution     Click Add Project Button   Model builder will add machine learning model and the project for training   ModelBuilder.cs in the console application is used to build/train the model   Program.cs in the console application is used to test run the model   ModelInput.cs and ModelOutput.cs in Model library is the input and output class for the model training.   ConsumeModel.cs in Model library contains the method for model consumption   Solution structure will be like as follows      Step 8: Consume your model     Set SentimentAnalysisML.ConsoleApp as startup project   Modify a bit of Program.cs in SentimentAnalysisML.ConsoleApp as follows       class Program     {         static void Main(string[] args)         {             // Create single instance of sample data from first line of dataset for model input             ModelInput sampleData = new ModelInput()             {                 Col0 = @\"The food of Hotel Sonargaon was awesome\",             };              // Make a single prediction on the sample data and print results             var predictionResult = ConsumeModel.Predict(sampleData);              Console.WriteLine(\"Using model to make single prediction -- Comparing actual Col1 with predicted Col1 from sample data...\\n\\n\");             Console.WriteLine($\"Col0: {sampleData.Col0}\");             Console.WriteLine($\"\\n\\nPredicted Col1 value {predictionResult.Prediction} \\nPredicted Col1 scores: [{String.Join(\",\", predictionResult.Score)}]\\n\");              string sentiment = predictionResult.Prediction == \"1\" ? \"Positive\" : \"Negative\";             Console.WriteLine($\"Sentiment: {sentiment} \\n\");              Console.WriteLine(\"=============== End of process, hit any key to finish ===============\");             Console.ReadKey();         }     }    Step 9: Build and run the application Now build and run the application. You will see the sentiment output of the sentence “The food of Hotel Sonargaon was awesome”.   Source Code    ","categories": ["AI","Machine Learning","C#"],
        "tags": ["ai","machinelearning","csharp"],
        "url": "https://mahedee.github.io//create-a-sentiment-analysis-app-using-ml-dot-net-for-future-test/",
        "teaser":null},{
        "title": "Uses of Configuration Provider and Options Pattern in ASP.NET Core",
        "excerpt":"  Application overview  In ASP.NET core, we often use application settings from different configuration files and load to a some files. Application settings can be in the appsettings.json or docker-compose.yml or .env or any other configuration file. We can use IOptions to read these settings using C#. Here is a sample code to retrieve application setting from appsettings.json, docker-compose.yml and .env file.   Tools and Technology used  The following tools and technologies has been used for this application     Visual Studio 2019   Visual C#   ASP.NET Core Web API   .NET Framework 5.0   Step 1: Create a asp.net core web api project     Create a new project using visual studio 2019   Choose the C# ASP.NET Web API (.NET Core) project template   Create a web api project name - “Catalog.API”   Step 2: Add docker and docker compose file     Click right button on project -&gt; Add Docker Support -&gt; Linux   Click right button on project -&gt; Container Orchestrator Support -&gt; Linux   Step 3: Modify appsettings.json     Modify appsettings.json as follows   {   \"Logging\": {     \"LogLevel\": {       \"Default\": \"Information\",       \"Microsoft\": \"Warning\",       \"Microsoft.Hosting.Lifetime\": \"Information\"     }   },    \"ConnectionString\": \"Server=(localdb)\\\\mssqllocaldb;Database=CatalogDB;Trusted_Connection=True;MultipleActiveResultSets=true\",   \"ServiceName\" :  \"Catalog.API\",   //\"Server\": \"LocalSQLServer\",   \"Port\": 112233,    \"DatabaseSettings\": {     \"Server\": \"localhost\",     \"Provider\": \"SQL Server\",     \"Database\": \"DemoDb\",     \"Port\": 1234,     \"UserName\": \"sa\",     \"Password\": \"mahedee123\"   },   \"AllowedHosts\": \"*\" }    Step 4: Add .env file in the root directory     Add .env file int root directory and modify as follows   # PORT = 4444  CONFIG_STORAGE_CATALOG_URL=http://host.docker.internal:5202/c/api/v1/catalog/items/[0]/pic/ NAME = Md. Mahedee Hasan DBNAME = ContainerDB PORT = 4545 #AZURE_CATALOG_DB=&lt;YourAzureSQLDBCatalogDBConnString&gt;    Step 5: Modify docker-compose.override.yml     Modify docker-compose.override.yml as follows   version: '3.4'  services:   catalog.api:     environment:       - ASPNETCORE_ENVIRONMENT=Development       - ASPNETCORE_URLS=https://+:443;http://+:80       - ConnectionString=${AZURE_CATALOG_DB:-Server=sqldata;Database=Microsoft.eShopOnContainers.Services.CatalogDb;User Id=sa;Password=Pass@word}       - PATH_BASE=/catalog-api       - PicBaseUrl=${CONFIG_STORAGE_CATALOG_URL}       - Name=${NAME}       #- DbName=${DBNAME}       - Port=${PORT}     ports:       - \"80\"       - \"443\"     volumes:       - ${APPDATA}/Microsoft/UserSecrets:/root/.microsoft/usersecrets:ro       - ${APPDATA}/ASP.NET/Https:/root/.aspnet/https:ro    Step 6: Add DatabaseSettings and CatalogSettings model class  DatabaseSettings  namespace Catalog.API {     public class DatabaseSettings     {         public string Server { get; set; }         public string Provider { get; set; }         public string Database { get; set; }         public int Port { get; set; }         public string UserName { get; set; }         public string Password { get; set; }     } }   CatalogSettings.cs  namespace Catalog.API {     public class CatalogSettings     {         public string ConnectionString { get; set; }         public string ServiceName { get; set; }         public string PicBaseUrl { get; set; }         public string PATH_BASE { get; set; }          public DatabaseSettings DatabaseSettings { get; set; }     } }   Step 7: Modify Program class  Program.cs   using Catalog.API; using Microsoft.AspNetCore; using Microsoft.AspNetCore.Hosting; using Microsoft.Extensions.Configuration; using Microsoft.Extensions.Hosting; using Microsoft.Extensions.Logging; using System; using System.IO;  // Using top-level programming Console.WriteLine(\"Entering into Main method ... \"); var configuration = GetConfiguration();  IConfiguration GetConfiguration() {     var builder = new ConfigurationBuilder()         .SetBasePath(Directory.GetCurrentDirectory())         .AddJsonFile(\"appsettings.json\", optional: false, reloadOnChange: true)         .AddEnvironmentVariables();      return builder.Build(); }  try {     Console.WriteLine(\"Configuring web host {0}...\", Program.AppName);     var host = CreateHostBuilder(configuration, args);     host.Run();      return 0; } catch (Exception exp) {     return 1; } finally {     //finally block }  IWebHost CreateHostBuilder(IConfiguration configuration, string[] args) =&gt;   WebHost.CreateDefaultBuilder(args)       .ConfigureAppConfiguration(x =&gt; x.AddConfiguration(configuration))       .CaptureStartupErrors(false)       .UseStartup&lt;Startup&gt;()       .Build();  public static class Program {     public static string Namespace = typeof(Startup).Namespace;     public static string AppName = Namespace.Substring(Namespace.LastIndexOf('.', Namespace.LastIndexOf('.') - 1) + 1); }   8. Modify Startup class   Starup.cs   using Microsoft.AspNetCore.Builder; using Microsoft.AspNetCore.Hosting; using Microsoft.Extensions.Configuration; using Microsoft.Extensions.DependencyInjection; using Microsoft.Extensions.Hosting; using Microsoft.OpenApi.Models;  namespace Catalog.API {     public class Startup     {         public Startup(IConfiguration configuration)         {             Configuration = configuration;         }          public IConfiguration Configuration { get; }          // This method gets called by the runtime. Use this method to add services to the container.         public void ConfigureServices(IServiceCollection services)         {              services.AddControllers();             // Use option pattern             services.Configure&lt;CatalogSettings&gt;(Configuration);              services.AddSwaggerGen(c =&gt;             {                 c.SwaggerDoc(\"v1\", new OpenApiInfo { Title = \"Catalog.API\", Version = \"v1\" });             });         }          // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.         public void Configure(IApplicationBuilder app, IWebHostEnvironment env)         {             // Debug and Check some configuration             var pathBase = Configuration[\"PATH_BASE\"];             var picBaseURL = Configuration[\"PicBaseUrl\"];             var name = Configuration[\"name\"];              if (env.IsDevelopment())             {                 app.UseDeveloperExceptionPage();                 app.UseSwagger();                 app.UseSwaggerUI(c =&gt; c.SwaggerEndpoint(\"/swagger/v1/swagger.json\", \"Catalog.API v1\"));             }              app.UseHttpsRedirection();              app.UseRouting();              app.UseAuthorization();              app.UseEndpoints(endpoints =&gt;             {                 endpoints.MapControllers();             });         }     } }    Step 9: Create a Controller class for testing     Create Controller name CatalogController as follows CatalogController.cs   using Microsoft.AspNetCore.Mvc; using Microsoft.Extensions.Options;  namespace Catalog.API.Controllers {     [Route(\"api/[controller]\")]     [ApiController]     public class CatalogController : ControllerBase     {         private CatalogSettings _settings;          public CatalogController(IOptions&lt;CatalogSettings&gt; settings)         {             _settings = settings.Value;         }         // GET: api/&lt;CatalogController&gt;         [HttpGet]         public CatalogSettings Get()         {             return _settings;         }     } }    Step 10: Build and run the application Now build and run the application. You will see the swagger ui and test CatalogController to test settings.   Source Code    ","categories": ["ASP.NET","ASP.NET Core","C#"],
        "tags": ["aspnet","aspnetcore","csharp"],
        "url": "https://mahedee.github.io//uses-of-configuration-provider-and-options-pattern-in-asp.net-core/",
        "teaser":null}]
