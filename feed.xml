<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="https://mahedee.net//feed.xml" rel="self" type="application/atom+xml" /><link href="https://mahedee.net//" rel="alternate" type="text/html" /><updated>2022-12-18T09:33:54+00:00</updated><id>https://mahedee.net//feed.xml</id><title type="html">Think Simple</title><subtitle>hi</subtitle><author><name>Mahedee Hasan</name></author><entry><title type="html">Application of Event Sourcing using asp.net core, DDD, EF, EventStoreDB and SQL Server</title><link href="https://mahedee.net//Application-of-Event-Sourcing-using-aspnet-core-DDD-EF-EventStoreDB-and-SQL-Server/" rel="alternate" type="text/html" title="Application of Event Sourcing using asp.net core, DDD, EF, EventStoreDB and SQL Server" /><published>2022-12-16T00:00:00+00:00</published><updated>2022-12-16T00:00:00+00:00</updated><id>https://mahedee.net//Application-of-Event-Sourcing-using-aspnet-core-DDD-EF-EventStoreDB-and-SQL-Server</id><content type="html" xml:base="https://mahedee.net//Application-of-Event-Sourcing-using-aspnet-core-DDD-EF-EventStoreDB-and-SQL-Server/"><![CDATA[<p><strong>Introduction</strong></p>

<p>Event sourcing is a most important pattern to design a microservice based application. If you are working with multiple services in a microservice based application, you have to use event driven architecture. In this article I will discuss and apply event sourcing using asp.net core, DDD and EventStoreDB.</p>

<p><strong>Domain Driven Design (DDD)</strong>_<br />
Domain-driven design (DDD) is a major software design approach, focusing on modeling software to match a domain according to input from that domain’s experts.  Under domain-driven design, the structure and language of software code (class names, class methods, class variables) should match the business domain. (Wikipedia)</p>

<p><strong>Event Sourcing</strong><br />
Event sourcing is a technique to store all events of an Object to get all of its versions. Event sourcing pattern is used to implement microservice based application.  Using this pattern, we can track the changes of an object in its lifecycle.</p>

<p><strong>EventStoreDB</strong> 
EventStoreDB specially built for Event Sourcing. It is a NoSQL database. This is a one-way database – we can only insert data into database.</p>

<p><strong>Implementation</strong><br />
Let’s implement Event Sourcing using DDD and EventStoreDB.</p>

<p><strong>Tools and Technologies Used</strong></p>

<ul>
  <li>Visual Studio 2022</li>
  <li>.NET 6.0</li>
  <li>ASP.NET Core Web API</li>
  <li>Visual C#</li>
  <li>DDD</li>
  <li>EventStoreDB</li>
  <li>SQL Server</li>
</ul>

<p><strong>Step 1: Install EventStoreDB</strong></p>

<ul>
  <li>
    <p>You can install EventStoreDB using EventStoreDB documentation. Visit the following link : https://developers.eventstore.com/server/v20.10/installation.html#quick-start</p>
  </li>
  <li>
    <p>Or, you can run docker image of EventStoreDB as below.</p>
  </li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">docker</span> <span class="nb">run</span> <span class="nf">--name</span> <span class="nf">esdb-node</span> <span class="nf">-it</span> <span class="nf">-p</span> <span class="nf">2113:2113</span> <span class="nf">-p</span> <span class="nf">1113:1113</span> <span class="nf">eventstore</span><span class="nv">/eventstore:latest</span> <span class="nf">--insecure</span> <span class="nf">--run-projections=All</span> <span class="nf">--enable-external-tcp</span> <span class="nf">--enable-atom-pub-over-http</span>
</code></pre></div></div>

<ul>
  <li>Here I used docker images for EventStoreDB. After running the above command, browse EventStoreDB using the following link.</li>
</ul>

<p>http://localhost:2113/web/index.html#/dashboard</p>

<p><strong>Step 2: Create solution and projects</strong></p>

<ul>
  <li>Create a solution name EventSourcing.</li>
  <li>Add a new web api projects name -  Catalog.API</li>
  <li>Add three class library projects name – Application, Domain, Infrastructure</li>
</ul>

<p><strong>Step 3: Install nuget packages</strong></p>

<ul>
  <li>Install following nuget packages in Catalog.API</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore.Tools</span>
</code></pre></div></div>
<ul>
  <li>Install following nuget packages in Application</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">MediatR</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">MediatR.Extensions.Microsoft.DependencyInjection</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.Extensions.DependencyInjection.Abstractions</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Newtonsoft.Json</span>
</code></pre></div></div>

<ul>
  <li>Install following nuget packages in Infrastructure</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">EventStore.Client.Grpc.Streams</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.Extensions.Configuration.Abstractions</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.Extensions.DependencyInjection.Abstractions</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Newtonsoft.Json</span>
</code></pre></div></div>

<p><strong>Step 4: Organize Domain</strong></p>

<ul>
  <li>Create IBaseEntity interface for Base entity in Entities-&gt;Common folder.</li>
</ul>

<p><strong>IBaseEntity.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">Domain.Entities.Common</span>
<span class="p">{</span>
    <span class="c1">/// Ref: Coverience in C#</span>
    <span class="c1">/// &lt;summary&gt;</span>
    <span class="c1">/// Interface for Base Entity</span>
    <span class="c1">/// &lt;/summary&gt;</span>
    <span class="c1">/// &lt;typeparam name="TKey"&gt;&lt;/typeparam&gt;</span>
    <span class="k">public</span> <span class="k">interface</span> <span class="nc">IBaseEntity</span><span class="p">&lt;</span><span class="k">out</span> <span class="n">TKey</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="n">TKey</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create IDomainEvent interface for domain event in Entities-&gt;Common folder</li>
</ul>

<p><strong>IDomainEvent.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">Domain.Entities.Common</span>
<span class="p">{</span>

    <span class="c1">/// &lt;summary&gt;</span>
    <span class="c1">/// Interface for Domain Event</span>
    <span class="c1">/// &lt;/summary&gt;</span>
    <span class="c1">/// &lt;typeparam name="TKey"&gt;&lt;/typeparam&gt;</span>
    <span class="k">public</span> <span class="k">interface</span> <span class="nc">IDomainEvent</span><span class="p">&lt;</span><span class="k">out</span> <span class="n">TKey</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">long</span> <span class="n">AggregateVersion</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
        <span class="n">TKey</span> <span class="n">AggregateId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
        <span class="n">DateTime</span> <span class="n">TimeStamp</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create IAggregateRoot interface for Aggregate Root in Entities-&gt;Common folder. IAggregateRoot is the combination of IBaseEntity and IAggregateRoot</li>
</ul>

<p><strong>IAggregateRoot.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">Domain.Entities.Common</span>
<span class="p">{</span>
    <span class="c1">/// &lt;summary&gt;</span>
    <span class="c1">/// Interface for AggregateRoot</span>
    <span class="c1">/// IAggregateRoot is the combination of IBaseEntity and IAggregateRoot</span>
    <span class="c1">/// &lt;/summary&gt;</span>
    <span class="c1">/// &lt;typeparam name="TKey"&gt;&lt;/typeparam&gt;</span>
    <span class="k">public</span> <span class="k">interface</span> <span class="nc">IAggregateRoot</span><span class="p">&lt;</span><span class="k">out</span> <span class="n">TKey</span><span class="p">&gt;</span> <span class="p">:</span> <span class="n">IBaseEntity</span><span class="p">&lt;</span><span class="n">TKey</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="kt">long</span> <span class="n">Version</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
        <span class="n">IReadOnlyCollection</span><span class="p">&lt;</span><span class="n">IDomainEvent</span><span class="p">&lt;</span><span class="n">TKey</span><span class="p">&gt;&gt;</span> <span class="n">Events</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span>  <span class="p">}</span>
        <span class="k">void</span> <span class="nf">ClearEvents</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create BaseEntity class for Base Aggregate Root in Entities-&gt;Common folder. BaseEntity’s properties is shared in all entity classes.</li>
</ul>

<p><strong>BaseEntity.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">Domain.Entities.Common</span>
<span class="p">{</span>
    <span class="c1">/// &lt;summary&gt;</span>
    <span class="c1">/// Base class for BaseAggregateRoot class</span>
    <span class="c1">/// Shared for all entities</span>
    <span class="c1">/// &lt;/summary&gt;</span>
    <span class="c1">/// &lt;typeparam name="TKey"&gt;&lt;/typeparam&gt;</span>
    <span class="k">public</span> <span class="k">abstract</span> <span class="k">class</span> <span class="nc">BaseEntity</span><span class="p">&lt;</span><span class="n">TKey</span><span class="p">&gt;</span> <span class="p">:</span> <span class="n">IBaseEntity</span><span class="p">&lt;</span><span class="n">TKey</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">protected</span> <span class="nf">BaseEntity</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
        <span class="k">protected</span> <span class="nf">BaseEntity</span><span class="p">(</span><span class="n">TKey</span> <span class="n">id</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="n">Id</span> <span class="p">=</span> <span class="n">id</span><span class="p">;</span>

        <span class="c1">//Implementation of interface</span>
        <span class="k">public</span> <span class="n">TKey</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">protected</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create BaseDomainEvent class for all domain event class in Entities-&gt;Common folder.</li>
</ul>

<p><strong>BaseDomainEvent.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">Domain.Entities.Common</span>
<span class="p">{</span>
    <span class="c1">/// &lt;summary&gt;</span>
    <span class="c1">/// Base domain event for all domain event</span>
    <span class="c1">/// &lt;/summary&gt;</span>
    <span class="c1">/// &lt;typeparam name="TA"&gt;&lt;/typeparam&gt;</span>
    <span class="c1">/// &lt;typeparam name="TKey"&gt;&lt;/typeparam&gt;</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">BaseDomainEvent</span><span class="p">&lt;</span><span class="n">TA</span><span class="p">,</span> <span class="n">TKey</span><span class="p">&gt;</span> <span class="p">:</span> <span class="n">IDomainEvent</span><span class="p">&lt;</span><span class="n">TKey</span><span class="p">&gt;</span> <span class="k">where</span> <span class="n">TA</span> <span class="p">:</span> <span class="n">IAggregateRoot</span><span class="p">&lt;</span><span class="n">TKey</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">protected</span> <span class="nf">BaseDomainEvent</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
        <span class="k">public</span> <span class="nf">BaseDomainEvent</span><span class="p">(</span><span class="n">TA</span> <span class="n">aggregateRoot</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span><span class="p">(</span><span class="n">aggregateRoot</span> <span class="k">is</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentNullException</span><span class="p">(</span><span class="k">nameof</span><span class="p">(</span><span class="n">aggregateRoot</span><span class="p">));</span>
            <span class="p">}</span>

            <span class="n">AggregateId</span> <span class="p">=</span> <span class="n">aggregateRoot</span><span class="p">.</span><span class="n">Id</span><span class="p">;</span>
            <span class="n">AggregateVersion</span> <span class="p">=</span> <span class="n">aggregateRoot</span><span class="p">.</span><span class="n">Version</span><span class="p">;</span>
            <span class="n">TimeStamp</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="c1">//Implementation of IDomainEvent</span>
        <span class="k">public</span> <span class="kt">long</span> <span class="n">AggregateVersion</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">//Implementation of IDomainEvent</span>
        <span class="k">public</span> <span class="n">TKey</span> <span class="n">AggregateId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">//Implementation of IDomainEvent</span>
        <span class="k">public</span> <span class="n">DateTime</span> <span class="n">TimeStamp</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create BaseAggregateRoot class for all aggregate root in Entities-&gt;Common folder. Here _event queue is used to queue all events of the aggregate root. AddEvent method used to add new event.</li>
</ul>

<p><strong>BaseAggregateRoot.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">System.Collections.Immutable</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Reflection</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Domain.Entities.Common</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">abstract</span> <span class="k">class</span> <span class="nc">BaseAggregateRoot</span><span class="p">&lt;</span><span class="n">TA</span><span class="p">,</span> <span class="n">TKey</span><span class="p">&gt;</span> <span class="p">:</span> <span class="n">BaseEntity</span><span class="p">&lt;</span><span class="n">TKey</span><span class="p">&gt;,</span> <span class="n">IAggregateRoot</span><span class="p">&lt;</span><span class="n">TKey</span><span class="p">&gt;</span> <span class="k">where</span> <span class="n">TA</span> <span class="p">:</span> <span class="n">IAggregateRoot</span><span class="p">&lt;</span><span class="n">TKey</span><span class="p">&gt;</span>
    <span class="p">{</span>

        <span class="c1">// Queuing all events</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">Queue</span><span class="p">&lt;</span><span class="n">IDomainEvent</span><span class="p">&lt;</span><span class="n">TKey</span><span class="p">&gt;&gt;</span> <span class="n">_events</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Queue</span><span class="p">&lt;</span><span class="n">IDomainEvent</span><span class="p">&lt;</span><span class="n">TKey</span><span class="p">&gt;&gt;();</span>

        <span class="k">protected</span> <span class="nf">BaseAggregateRoot</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
        <span class="k">protected</span> <span class="nf">BaseAggregateRoot</span><span class="p">(</span><span class="n">TKey</span> <span class="n">id</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>

        <span class="p">}</span>

        <span class="k">protected</span> <span class="k">void</span> <span class="nf">AddEvent</span><span class="p">(</span><span class="n">IDomainEvent</span><span class="p">&lt;</span><span class="n">TKey</span><span class="p">&gt;</span> <span class="n">@event</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span><span class="p">(</span><span class="n">@event</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentNullException</span><span class="p">(</span><span class="k">nameof</span><span class="p">(</span><span class="n">@event</span><span class="p">));</span>
            <span class="p">}</span>

            <span class="n">_events</span><span class="p">.</span><span class="nf">Enqueue</span><span class="p">(</span><span class="n">@event</span><span class="p">);</span>
            <span class="nf">Apply</span><span class="p">(</span><span class="n">@event</span><span class="p">);</span>
            <span class="n">Version</span><span class="p">++;</span>
        <span class="p">}</span>

        <span class="c1">/// &lt;summary&gt;</span>
        <span class="c1">/// This method is implemented in the derived class</span>
        <span class="c1">/// Apply this method to implement different events</span>
        <span class="c1">/// &lt;/summary&gt;</span>
        <span class="c1">/// &lt;param name="event"&gt;&lt;/param&gt;</span>
        
        <span class="k">protected</span> <span class="k">abstract</span> <span class="k">void</span> <span class="nf">Apply</span><span class="p">(</span><span class="n">IDomainEvent</span><span class="p">&lt;</span><span class="n">TKey</span><span class="p">&gt;</span> <span class="n">@event</span><span class="p">);</span>

        <span class="c1">// Implementation of IAggregateRoot</span>
        <span class="c1">// Aggregate version</span>
        <span class="k">public</span> <span class="kt">long</span> <span class="n">Version</span><span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">// Implementation of IAggregateRoot</span>
        <span class="k">public</span> <span class="n">IReadOnlyCollection</span><span class="p">&lt;</span><span class="n">IDomainEvent</span><span class="p">&lt;</span><span class="n">TKey</span><span class="p">&gt;&gt;</span> <span class="n">Events</span> <span class="p">=&gt;</span> <span class="n">_events</span><span class="p">.</span><span class="nf">ToImmutableArray</span><span class="p">();</span>

        <span class="c1">// Implementation of IAggregateRoot</span>
        <span class="k">public</span> <span class="k">void</span> <span class="nf">ClearEvents</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">_events</span><span class="p">.</span><span class="nf">Clear</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="err">#</span><span class="n">region</span> <span class="n">Factory</span>

        <span class="k">private</span> <span class="k">static</span> <span class="k">readonly</span> <span class="n">ConstructorInfo</span> <span class="n">CTor</span><span class="p">;</span>

        <span class="k">static</span> <span class="nf">BaseAggregateRoot</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">aggregateType</span> <span class="p">=</span> <span class="k">typeof</span><span class="p">(</span><span class="n">TA</span><span class="p">);</span>
            <span class="n">CTor</span> <span class="p">=</span> <span class="n">aggregateType</span><span class="p">.</span><span class="nf">GetConstructor</span><span class="p">(</span><span class="n">BindingFlags</span><span class="p">.</span><span class="n">Instance</span> <span class="p">|</span> <span class="n">BindingFlags</span><span class="p">.</span><span class="n">NonPublic</span> <span class="p">|</span> <span class="n">BindingFlags</span><span class="p">.</span><span class="n">Public</span><span class="p">,</span>
                <span class="k">null</span><span class="p">,</span> <span class="k">new</span> <span class="n">Type</span><span class="p">[</span><span class="m">0</span><span class="p">],</span> <span class="k">new</span> <span class="n">ParameterModifier</span><span class="p">[</span><span class="m">0</span><span class="p">]);</span>
            <span class="k">if</span> <span class="p">(</span><span class="k">null</span> <span class="p">==</span> <span class="n">CTor</span><span class="p">)</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">InvalidOperationException</span><span class="p">(</span><span class="s">$"Unable to find required private parameterless constructor for Aggregate of type '</span><span class="p">{</span><span class="n">aggregateType</span><span class="p">.</span><span class="n">Name</span><span class="p">}</span><span class="s">'"</span><span class="p">);</span>
        <span class="p">}</span>


        <span class="c1">/// &lt;summary&gt;</span>
        <span class="c1">/// Create Base Aggregate root when Rehydrate all Events</span>
        <span class="c1">/// &lt;/summary&gt;</span>
        <span class="c1">/// &lt;param name="events"&gt;&lt;/param&gt;</span>
        <span class="c1">/// &lt;returns&gt;&lt;/returns&gt;</span>
        <span class="c1">/// &lt;exception cref="ArgumentNullException"&gt;&lt;/exception&gt;</span>
        <span class="k">public</span> <span class="k">static</span> <span class="n">TA</span> <span class="nf">Create</span><span class="p">(</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">IDomainEvent</span><span class="p">&lt;</span><span class="n">TKey</span><span class="p">&gt;&gt;</span> <span class="n">events</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="k">null</span> <span class="p">==</span> <span class="n">events</span> <span class="p">||</span> <span class="p">!</span><span class="n">events</span><span class="p">.</span><span class="nf">Any</span><span class="p">())</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentNullException</span><span class="p">(</span><span class="k">nameof</span><span class="p">(</span><span class="n">events</span><span class="p">));</span>
            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="p">(</span><span class="n">TA</span><span class="p">)</span><span class="n">CTor</span><span class="p">.</span><span class="nf">Invoke</span><span class="p">(</span><span class="k">new</span> <span class="kt">object</span><span class="p">[</span><span class="m">0</span><span class="p">]);</span>

            <span class="c1">// Problem is in here</span>
            <span class="kt">var</span> <span class="n">baseAggregate</span> <span class="p">=</span> <span class="n">result</span> <span class="k">as</span> <span class="n">BaseAggregateRoot</span><span class="p">&lt;</span><span class="n">TA</span><span class="p">,</span> <span class="n">TKey</span><span class="p">&gt;;</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">baseAggregate</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
                <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">@event</span> <span class="k">in</span> <span class="n">events</span><span class="p">)</span>
                    <span class="n">baseAggregate</span><span class="p">.</span><span class="nf">AddEvent</span><span class="p">(</span><span class="n">@event</span><span class="p">);</span>

            <span class="n">result</span><span class="p">.</span><span class="nf">ClearEvents</span><span class="p">();</span>

            <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="err">#</span><span class="n">endregion</span>  
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create CatalogItemCreated  Event class in Events-&gt;CatalogItem folder</li>
</ul>

<p><strong>CatalogItemCreated.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Domain.Entities.Common</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Domain.Events.CatalogItem</span>
<span class="p">{</span>
    <span class="c1">/// &lt;summary&gt;</span>
    <span class="c1">/// Catalog item created event</span>
    <span class="c1">/// &lt;/summary&gt;</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CatalogItemCreated</span><span class="p">:</span> <span class="n">BaseDomainEvent</span><span class="p">&lt;</span><span class="n">Entities</span><span class="p">.</span><span class="n">CatalogItem</span><span class="p">,</span> <span class="n">Guid</span><span class="p">&gt;</span>
    <span class="p">{</span>

        <span class="k">private</span> <span class="nf">CatalogItemCreated</span><span class="p">()</span>
        <span class="p">{</span>

        <span class="p">}</span>
        <span class="k">public</span> <span class="nf">CatalogItemCreated</span><span class="p">(</span><span class="n">Entities</span><span class="p">.</span><span class="n">CatalogItem</span> <span class="n">catalogItem</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">catalogItem</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">//Id = catalogItem.Id;</span>
            <span class="n">Name</span> <span class="p">=</span> <span class="n">catalogItem</span><span class="p">.</span><span class="n">Name</span><span class="p">;</span>
            <span class="n">Description</span> <span class="p">=</span> <span class="n">catalogItem</span><span class="p">.</span><span class="n">Description</span><span class="p">;</span>
            <span class="n">Price</span> <span class="p">=</span> <span class="n">catalogItem</span><span class="p">.</span><span class="n">Price</span><span class="p">;</span>
            <span class="n">AvailableStock</span> <span class="p">=</span> <span class="n">catalogItem</span><span class="p">.</span><span class="n">AvailableStock</span><span class="p">;</span>
            <span class="n">RestockThreshold</span> <span class="p">=</span> <span class="n">catalogItem</span><span class="p">.</span><span class="n">RestockThreshold</span><span class="p">;</span>
            <span class="n">MaxStockThreshold</span> <span class="p">=</span> <span class="n">catalogItem</span><span class="p">.</span><span class="n">MaxStockThreshold</span><span class="p">;</span>
            <span class="n">OnReorder</span> <span class="p">=</span> <span class="n">catalogItem</span><span class="p">.</span><span class="n">OnReorder</span><span class="p">;</span>
            <span class="n">IsDeleted</span> <span class="p">=</span> <span class="n">catalogItem</span><span class="p">.</span><span class="n">IsDeleted</span><span class="p">;</span>
            
        <span class="p">}</span>

        <span class="c1">//public Guid Id { get; set; }</span>

        <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">string</span> <span class="n">Description</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">double</span> <span class="n">Price</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="c1">// Quantity in stock</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">AvailableStock</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="c1">// Available stock at which we should reorder</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">RestockThreshold</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="c1">// Maximum number of units that can be in-stock at any time (due to physicial/logistical constraints in warehouses)</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">MaxStockThreshold</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="c1">/// &lt;summary&gt;</span>
        <span class="c1">/// True if item is on reorder</span>
        <span class="c1">/// &lt;/summary&gt;</span>
        <span class="k">public</span> <span class="kt">bool</span> <span class="n">OnReorder</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">bool</span> <span class="n">IsDeleted</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

    <span class="p">}</span>
<span class="p">}</span>
 
</code></pre></div></div>

<ul>
  <li>Create CatalogItemDeleted Event class in Events-&gt;CatalogItem folder</li>
</ul>

<p><strong>CatalogItemDeleted.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Domain.Entities.Common</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Domain.Events.CatalogItem</span>
<span class="p">{</span>
    <span class="c1">/// &lt;summary&gt;</span>
    <span class="c1">/// Catalog item created event</span>
    <span class="c1">/// &lt;/summary&gt;</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CatalogItemDeleted</span><span class="p">:</span> <span class="n">BaseDomainEvent</span><span class="p">&lt;</span><span class="n">Entities</span><span class="p">.</span><span class="n">CatalogItem</span><span class="p">,</span> <span class="n">Guid</span><span class="p">&gt;</span>
    <span class="p">{</span>

        <span class="k">private</span> <span class="nf">CatalogItemDeleted</span><span class="p">()</span>
        <span class="p">{</span>

        <span class="p">}</span>
        <span class="k">public</span> <span class="nf">CatalogItemDeleted</span><span class="p">(</span><span class="n">Entities</span><span class="p">.</span><span class="n">CatalogItem</span> <span class="n">catalogItem</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">catalogItem</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">IsDeleted</span> <span class="p">=</span> <span class="n">catalogItem</span><span class="p">.</span><span class="n">IsDeleted</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="kt">bool</span> <span class="n">IsDeleted</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

    <span class="p">}</span>
<span class="p">}</span>


</code></pre></div></div>

<ul>
  <li>Create CatalogItemUpdated Event class in Events-&gt;CatalogItem folder</li>
</ul>

<p><strong>CatalogItemUpdated.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Domain.Entities.Common</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Domain.Events.CatalogItem</span>
<span class="p">{</span>
    <span class="c1">/// &lt;summary&gt;</span>
    <span class="c1">/// Catalog item created event</span>
    <span class="c1">/// &lt;/summary&gt;</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CatalogItemUpdated</span><span class="p">:</span> <span class="n">BaseDomainEvent</span><span class="p">&lt;</span><span class="n">Entities</span><span class="p">.</span><span class="n">CatalogItem</span><span class="p">,</span> <span class="n">Guid</span><span class="p">&gt;</span>
    <span class="p">{</span>

        <span class="k">private</span> <span class="nf">CatalogItemUpdated</span><span class="p">()</span>
        <span class="p">{</span>

        <span class="p">}</span>
        <span class="k">public</span> <span class="nf">CatalogItemUpdated</span><span class="p">(</span><span class="n">Entities</span><span class="p">.</span><span class="n">CatalogItem</span> <span class="n">catalogItem</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">catalogItem</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">//Id = catalogItem.Id;</span>
            <span class="n">Name</span> <span class="p">=</span> <span class="n">catalogItem</span><span class="p">.</span><span class="n">Name</span><span class="p">;</span>
            <span class="n">Description</span> <span class="p">=</span> <span class="n">catalogItem</span><span class="p">.</span><span class="n">Description</span><span class="p">;</span>
            <span class="n">Price</span> <span class="p">=</span> <span class="n">catalogItem</span><span class="p">.</span><span class="n">Price</span><span class="p">;</span>
            <span class="n">AvailableStock</span> <span class="p">=</span> <span class="n">catalogItem</span><span class="p">.</span><span class="n">AvailableStock</span><span class="p">;</span>
            <span class="n">RestockThreshold</span> <span class="p">=</span> <span class="n">catalogItem</span><span class="p">.</span><span class="n">RestockThreshold</span><span class="p">;</span>
            <span class="n">MaxStockThreshold</span> <span class="p">=</span> <span class="n">catalogItem</span><span class="p">.</span><span class="n">MaxStockThreshold</span><span class="p">;</span>
            <span class="n">OnReorder</span> <span class="p">=</span> <span class="n">catalogItem</span><span class="p">.</span><span class="n">OnReorder</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">//public Guid Id { get; set; }</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">string</span> <span class="n">Description</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">double</span> <span class="n">Price</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="c1">// Quantity in stock</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">AvailableStock</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="c1">// Available stock at which we should reorder</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">RestockThreshold</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="c1">// Maximum number of units that can be in-stock at any time (due to physicial/logistical constraints in warehouses)</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">MaxStockThreshold</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="c1">/// &lt;summary&gt;</span>
        <span class="c1">/// True if item is on reorder</span>
        <span class="c1">/// &lt;/summary&gt;</span>
        <span class="k">public</span> <span class="kt">bool</span> <span class="n">OnReorder</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create CatalogItem Aggregate Root class in Entities folder.  Here we used DDD so CatalogItem is the main domain class here. Create, update, delete is performed using this class.</li>
</ul>

<p><strong>CatalogItem.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Domain.Entities.Common</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Domain.Events.CatalogItem</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Domain.Entities</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CatalogItem</span> <span class="p">:</span> <span class="n">BaseAggregateRoot</span><span class="p">&lt;</span><span class="n">CatalogItem</span><span class="p">,</span> <span class="n">Guid</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="nf">CatalogItem</span><span class="p">()</span>
        <span class="p">{</span>

        <span class="p">}</span>

        <span class="k">public</span> <span class="nf">CatalogItem</span><span class="p">(</span><span class="n">Guid</span> <span class="n">id</span><span class="p">,</span> <span class="kt">string</span> <span class="n">name</span><span class="p">,</span> <span class="kt">string</span> <span class="n">description</span><span class="p">,</span> <span class="kt">double</span> <span class="n">price</span><span class="p">,</span> <span class="kt">int</span> <span class="n">availableStock</span><span class="p">,</span> 
            <span class="kt">int</span> <span class="n">restockThreshold</span><span class="p">,</span> <span class="kt">int</span> <span class="n">maxStockThreshold</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">onReorder</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Id</span> <span class="p">=</span> <span class="n">id</span><span class="p">;</span>
            <span class="n">Name</span> <span class="p">=</span> <span class="n">name</span><span class="p">;</span>
            <span class="n">Description</span> <span class="p">=</span> <span class="n">description</span><span class="p">;</span>
            <span class="n">Price</span> <span class="p">=</span> <span class="n">price</span><span class="p">;</span>
            <span class="n">AvailableStock</span> <span class="p">=</span> <span class="n">availableStock</span><span class="p">;</span>
            <span class="n">RestockThreshold</span> <span class="p">=</span> <span class="n">restockThreshold</span><span class="p">;</span>
            <span class="n">MaxStockThreshold</span> <span class="p">=</span> <span class="n">maxStockThreshold</span><span class="p">;</span>
            <span class="n">OnReorder</span> <span class="p">=</span> <span class="n">onReorder</span><span class="p">;</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">Version</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">(</span><span class="s">"Catalog item already created"</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(</span><span class="kt">string</span><span class="p">.</span><span class="nf">IsNullOrEmpty</span><span class="p">(</span><span class="n">name</span><span class="p">))</span>
            <span class="p">{</span>
                <span class="c1">//Validation Exception will be placed here</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">(</span><span class="s">"Name Can not be Empty"</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">price</span> <span class="p">&lt;=</span> <span class="m">0</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="c1">//Validation Exception will be placed here</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">(</span><span class="s">"Price must be positive value"</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="c1">// Add CatalogItem Event Here to create</span>
            <span class="nf">AddEvent</span><span class="p">(</span><span class="k">new</span> <span class="nf">CatalogItemCreated</span><span class="p">(</span><span class="k">this</span><span class="p">));</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">string</span> <span class="n">Description</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">double</span> <span class="n">Price</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">// Quantity in stock</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">AvailableStock</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">// Available stock at which we should reorder</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">RestockThreshold</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">// Maximum number of units that can be in-stock at any time (due to physicial/logistical constraints in warehouses)</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">MaxStockThreshold</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">/// &lt;summary&gt;</span>
        <span class="c1">/// True if item is on reorder</span>
        <span class="c1">/// &lt;/summary&gt;</span>
        <span class="k">public</span> <span class="kt">bool</span> <span class="n">OnReorder</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">bool</span> <span class="n">IsDeleted</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>

        <span class="k">public</span> <span class="k">static</span> <span class="n">CatalogItem</span> <span class="nf">Create</span><span class="p">(</span><span class="kt">string</span> <span class="n">name</span><span class="p">,</span> <span class="kt">string</span> <span class="n">description</span><span class="p">,</span> <span class="kt">double</span> <span class="n">price</span><span class="p">,</span> <span class="kt">int</span> <span class="n">availableStock</span><span class="p">,</span> 
            <span class="kt">int</span> <span class="n">restockThreshold</span><span class="p">,</span> <span class="kt">int</span> <span class="n">maxStockThreshold</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">onReorder</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">CatalogItem</span><span class="p">(</span><span class="n">Guid</span><span class="p">.</span><span class="nf">NewGuid</span><span class="p">(),</span> <span class="n">name</span><span class="p">,</span> <span class="n">description</span><span class="p">,</span> <span class="n">price</span><span class="p">,</span> <span class="n">availableStock</span><span class="p">,</span> <span class="n">restockThreshold</span><span class="p">,</span> <span class="n">maxStockThreshold</span><span class="p">,</span> <span class="n">onReorder</span><span class="p">);</span> <span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">void</span> <span class="nf">Update</span><span class="p">(</span><span class="n">Guid</span> <span class="n">id</span><span class="p">,</span> <span class="kt">string</span> <span class="n">name</span><span class="p">,</span> <span class="kt">string</span> <span class="n">description</span><span class="p">,</span> <span class="kt">double</span> <span class="n">price</span><span class="p">,</span> <span class="kt">int</span> <span class="n">availableStock</span><span class="p">,</span>
         <span class="kt">int</span> <span class="n">restockThreshold</span><span class="p">,</span> <span class="kt">int</span> <span class="n">maxStockThreshold</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">onReorder</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Id</span> <span class="p">=</span> <span class="n">id</span><span class="p">;</span>
            <span class="n">Name</span> <span class="p">=</span> <span class="n">name</span><span class="p">;</span>
            <span class="n">Description</span> <span class="p">=</span> <span class="n">description</span><span class="p">;</span>
            <span class="n">Price</span> <span class="p">=</span> <span class="n">price</span><span class="p">;</span>
            <span class="n">AvailableStock</span> <span class="p">=</span> <span class="n">availableStock</span><span class="p">;</span>
            <span class="n">RestockThreshold</span> <span class="p">=</span> <span class="n">restockThreshold</span><span class="p">;</span>
            <span class="n">MaxStockThreshold</span> <span class="p">=</span> <span class="n">maxStockThreshold</span><span class="p">;</span>
            <span class="n">OnReorder</span> <span class="p">=</span> <span class="n">onReorder</span><span class="p">;</span>

            <span class="nf">AddEvent</span><span class="p">(</span><span class="k">new</span> <span class="nf">CatalogItemUpdated</span><span class="p">(</span><span class="k">this</span><span class="p">));</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">void</span> <span class="nf">Delete</span><span class="p">(</span><span class="n">Guid</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Id</span> <span class="p">=</span> <span class="n">id</span><span class="p">;</span>
            <span class="n">IsDeleted</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
            <span class="nf">AddEvent</span><span class="p">(</span><span class="k">new</span> <span class="nf">CatalogItemDeleted</span><span class="p">(</span><span class="k">this</span><span class="p">));</span>
        <span class="p">}</span>



        <span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">Apply</span><span class="p">(</span><span class="n">IDomainEvent</span><span class="p">&lt;</span><span class="n">Guid</span><span class="p">&gt;</span> <span class="n">@event</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">switch</span> <span class="p">(</span><span class="n">@event</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">case</span> <span class="n">CatalogItemCreated</span> <span class="n">catalogItemCreated</span><span class="p">:</span> <span class="nf">OnCatalogItemCreated</span><span class="p">(</span><span class="n">catalogItemCreated</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
                <span class="k">case</span> <span class="n">CatalogItemUpdated</span> <span class="n">catalogItemUpdated</span><span class="p">:</span> <span class="nf">OnCatalogItemUpdated</span><span class="p">(</span><span class="n">catalogItemUpdated</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
                <span class="k">case</span> <span class="n">CatalogItemDeleted</span> <span class="n">catalogItemDeleted</span><span class="p">:</span> 
                    <span class="n">IsDeleted</span> <span class="p">=</span> <span class="n">catalogItemDeleted</span><span class="p">.</span><span class="n">IsDeleted</span><span class="p">;</span>
                    <span class="k">break</span><span class="p">;</span>

            <span class="p">}</span>
        <span class="p">}</span>

        <span class="c1">// On Catalog Item Created Event</span>
        <span class="k">private</span> <span class="k">void</span> <span class="nf">OnCatalogItemCreated</span><span class="p">(</span><span class="n">CatalogItemCreated</span> <span class="n">catalogItemCreated</span><span class="p">)</span>
        <span class="p">{</span>

            <span class="n">Id</span> <span class="p">=</span> <span class="n">catalogItemCreated</span><span class="p">.</span><span class="n">AggregateId</span><span class="p">;</span> <span class="c1">// Must have ID</span>
            <span class="n">Name</span> <span class="p">=</span> <span class="n">catalogItemCreated</span><span class="p">.</span><span class="n">Name</span><span class="p">;</span>
            <span class="n">Description</span><span class="p">=</span> <span class="n">catalogItemCreated</span><span class="p">.</span><span class="n">Description</span><span class="p">;</span>
            <span class="n">Price</span> <span class="p">=</span> <span class="n">catalogItemCreated</span><span class="p">.</span><span class="n">Price</span><span class="p">;</span>
            <span class="n">AvailableStock</span> <span class="p">=</span> <span class="n">catalogItemCreated</span><span class="p">.</span><span class="n">AvailableStock</span><span class="p">;</span>
            <span class="n">RestockThreshold</span> <span class="p">=</span> <span class="n">catalogItemCreated</span><span class="p">.</span><span class="n">RestockThreshold</span><span class="p">;</span>
            <span class="n">MaxStockThreshold</span> <span class="p">=</span> <span class="n">catalogItemCreated</span><span class="p">.</span><span class="n">MaxStockThreshold</span><span class="p">;</span>
            <span class="n">OnReorder</span> <span class="p">=</span> <span class="n">catalogItemCreated</span><span class="p">.</span><span class="n">OnReorder</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// On Catalog Item Updated Event</span>
        <span class="k">private</span> <span class="k">void</span> <span class="nf">OnCatalogItemUpdated</span><span class="p">(</span><span class="n">CatalogItemUpdated</span> <span class="n">catalogItemUpdated</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Name</span> <span class="p">=</span> <span class="n">catalogItemUpdated</span><span class="p">.</span><span class="n">Name</span><span class="p">;</span>
            <span class="n">Description</span> <span class="p">=</span> <span class="n">catalogItemUpdated</span><span class="p">.</span><span class="n">Description</span><span class="p">;</span>
            <span class="n">Price</span> <span class="p">=</span> <span class="n">catalogItemUpdated</span><span class="p">.</span><span class="n">Price</span><span class="p">;</span>
            <span class="n">AvailableStock</span> <span class="p">=</span> <span class="n">catalogItemUpdated</span><span class="p">.</span><span class="n">AvailableStock</span><span class="p">;</span>
            <span class="n">RestockThreshold</span> <span class="p">=</span> <span class="n">catalogItemUpdated</span><span class="p">.</span><span class="n">RestockThreshold</span><span class="p">;</span>
            <span class="n">MaxStockThreshold</span> <span class="p">=</span> <span class="n">catalogItemUpdated</span><span class="p">.</span><span class="n">MaxStockThreshold</span><span class="p">;</span>
            <span class="n">OnReorder</span> <span class="p">=</span> <span class="n">catalogItemUpdated</span><span class="p">.</span><span class="n">OnReorder</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>Step 5: Organize Application</strong></p>

<ul>
  <li>Add domain as a reference project in Application project. You may add using project file as follows.</li>
</ul>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nt">&lt;ItemGroup&gt;</span>
    <span class="nt">&lt;ProjectReference</span> <span class="na">Include=</span><span class="s">"..\Domain\Domain.csproj"</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;/ItemGroup&gt;</span>
</code></pre></div></div>

<ul>
  <li>Create CreateCatalogItemDTO class in Common-&gt;DTOs folder</li>
</ul>

<p><strong>CreateCatalogItemDTO.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">namespace</span> <span class="nn">Application.Common.DTOs</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CreateCatalogItemDTO</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">string</span> <span class="n">Description</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">double</span> <span class="n">Price</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">// Quantity in stock</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">AvailableStock</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">// Available stock at which we should reorder</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">RestockThreshold</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">// Maximum number of units that can be in-stock at any time (due to physicial/logistical constraints in warehouses)</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">MaxStockThreshold</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">/// &lt;summary&gt;</span>
        <span class="c1">/// True if item is on reorder</span>
        <span class="c1">/// &lt;/summary&gt;</span>
        <span class="k">public</span> <span class="kt">bool</span> <span class="n">OnReorder</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create UpdateCatalogItemDTO class in Common-&gt;DTOs folder</li>
</ul>

<p><strong>UpdateCatalogItemDTO.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">namespace</span> <span class="nn">Application.Common.DTOs</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">UpdateCatalogItemDTO</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="n">Guid</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">string</span> <span class="n">Description</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">double</span> <span class="n">Price</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">// Quantity in stock</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">AvailableStock</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">// Available stock at which we should reorder</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">RestockThreshold</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">// Maximum number of units that can be in-stock at any time (due to physicial/logistical constraints in warehouses)</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">MaxStockThreshold</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">/// &lt;summary&gt;</span>
        <span class="c1">/// True if item is on reorder</span>
        <span class="c1">/// &lt;/summary&gt;</span>
        <span class="k">public</span> <span class="kt">bool</span> <span class="n">OnReorder</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create IAggregateRepository Interface in Common-&gt;Interfaces folder. This interface is used for event sourcing. Here,  AppendAsync method is used to append events to store in event store database, RehydreateAsync method is used to read all events using aggregate id and ReadEventsAsync method is used to read events as a log and return in to dictionary.</li>
</ul>

<p><strong>IAggregateRepository.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Domain.Entities.Common</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Application.Common.Interfaces</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">interface</span> <span class="nc">IAggregateRepository</span><span class="p">&lt;</span><span class="n">TA</span><span class="p">,</span> <span class="n">TKey</span><span class="p">&gt;</span> <span class="k">where</span> <span class="n">TA</span> <span class="p">:</span> <span class="k">class</span><span class="err">,</span> <span class="nc">IAggregateRoot</span><span class="p">&lt;</span><span class="n">TKey</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="c1">// Append events to store in event store database</span>
        <span class="n">Task</span> <span class="nf">AppendAsync</span><span class="p">(</span><span class="n">TA</span> <span class="n">aggregate</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span> <span class="p">=</span> <span class="k">default</span><span class="p">);</span>

        <span class="c1">// Read all events using aggregate ID</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">TA</span><span class="p">?&gt;</span> <span class="nf">RehydreateAsync</span><span class="p">(</span><span class="n">TKey</span> <span class="n">aggregateId</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span> <span class="p">=</span> <span class="k">default</span><span class="p">);</span>

        <span class="c1">// Read events as a log and return into a dictionary</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">object</span><span class="p">&gt;&gt;</span> <span class="nf">ReadEventsAsync</span><span class="p">(</span><span class="n">TKey</span> <span class="n">aggregateId</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span> <span class="p">=</span> <span class="k">default</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create ICatalogItemRepository interface to insert and update into sql server. Since, we use soft delete so here delete means update of isDelete filed to 1.</li>
</ul>

<p><strong>ICatalogItemRepository.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Domain.Entities</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Application.Common.Interfaces</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">interface</span> <span class="nc">ICatalogItemRepository</span>
    <span class="p">{</span>
        <span class="n">Task</span> <span class="nf">AddAsync</span><span class="p">(</span><span class="n">CatalogItem</span> <span class="n">catalogItem</span><span class="p">);</span>
        <span class="n">Task</span> <span class="nf">UpdateAsync</span><span class="p">(</span><span class="n">CatalogItem</span> <span class="n">catalogItem</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create PrivateSetterContractResolver class in Common-&gt;Resolvers folder. This is a Custom Contract Resolver to Set Private property when Rehydrate Events</li>
</ul>

<p><strong>PrivateSetterContractResolver.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Newtonsoft.Json</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Newtonsoft.Json.Serialization</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Reflection</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Application.Common.Resolvers</span>
<span class="p">{</span>
    <span class="c1">/// &lt;summary&gt;</span>
    <span class="c1">/// Custom Contract Resolver to Set Private property when Rehydrate Events</span>
    <span class="c1">/// &lt;/summary&gt;</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">PrivateSetterContractResolver</span> <span class="p">:</span> <span class="n">DefaultContractResolver</span>
    <span class="p">{</span>
        <span class="k">protected</span> <span class="k">override</span> <span class="n">JsonProperty</span> <span class="nf">CreateProperty</span><span class="p">(</span><span class="n">MemberInfo</span> <span class="n">member</span><span class="p">,</span> <span class="n">MemberSerialization</span> <span class="n">memberSerialization</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">jsonProperty</span> <span class="p">=</span> <span class="k">base</span><span class="p">.</span><span class="nf">CreateProperty</span><span class="p">(</span><span class="n">member</span><span class="p">,</span> <span class="n">memberSerialization</span><span class="p">);</span>

            <span class="k">if</span><span class="p">(</span><span class="n">jsonProperty</span><span class="p">.</span><span class="n">Writable</span><span class="p">)</span>
                <span class="k">return</span> <span class="n">jsonProperty</span><span class="p">;</span>

            <span class="k">if</span><span class="p">(</span><span class="n">member</span> <span class="k">is</span> <span class="n">PropertyInfo</span> <span class="n">propertyInfo</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="kt">var</span> <span class="n">setter</span> <span class="p">=</span> <span class="n">propertyInfo</span><span class="p">.</span><span class="nf">GetSetMethod</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>
                <span class="n">jsonProperty</span><span class="p">.</span><span class="n">Writable</span> <span class="p">=</span> <span class="n">setter</span> <span class="p">!=</span> <span class="k">null</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="n">jsonProperty</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="c1">//EnvironmentVariableTarget jsonProperty = base.CreateProperty();</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create CreateCatalogItemCommand and CreateCatalogItemCommandHandler class in Commands-&gt;CatalogItems folder.</li>
</ul>

<p><strong>CreateCatalogItemCommand.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Application.Common.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Domain.Entities</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Application.Commands.CatalogItems</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CreateCatalogItemCommand</span> <span class="p">:</span> <span class="n">INotification</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">CreateCatalogItemCommand</span><span class="p">(</span><span class="kt">string</span> <span class="n">name</span><span class="p">,</span> <span class="kt">string</span> <span class="n">description</span><span class="p">,</span> <span class="kt">double</span> <span class="n">price</span><span class="p">,</span> <span class="kt">int</span> <span class="n">availableStock</span><span class="p">,</span> <span class="kt">int</span> <span class="n">restockThreshold</span><span class="p">,</span> 
            <span class="kt">int</span> <span class="n">maxStockThreshold</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">onReorder</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Name</span> <span class="p">=</span> <span class="n">name</span><span class="p">;</span>
            <span class="n">Description</span> <span class="p">=</span> <span class="n">description</span><span class="p">;</span>
            <span class="n">Price</span> <span class="p">=</span> <span class="n">price</span><span class="p">;</span>
            <span class="n">AvailableStock</span> <span class="p">=</span> <span class="n">availableStock</span><span class="p">;</span>
            <span class="n">RestockThreshold</span> <span class="p">=</span> <span class="n">restockThreshold</span><span class="p">;</span>
            <span class="n">MaxStockThreshold</span> <span class="p">=</span> <span class="n">maxStockThreshold</span><span class="p">;</span>
            <span class="n">OnReorder</span> <span class="p">=</span> <span class="n">onReorder</span><span class="p">;</span>
        <span class="p">}</span>


        <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">string</span> <span class="n">Description</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">double</span> <span class="n">Price</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">// Quantity in stock</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">AvailableStock</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">// Available stock at which we should reorder</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">RestockThreshold</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">// Maximum number of units that can be in-stock at any time (due to physicial/logistical constraints in warehouses)</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">MaxStockThreshold</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">/// &lt;summary&gt;</span>
        <span class="c1">/// True if item is on reorder</span>
        <span class="c1">/// &lt;/summary&gt;</span>
        <span class="k">public</span> <span class="kt">bool</span> <span class="n">OnReorder</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">class</span> <span class="nc">CreateCatalogItemCommandHandler</span> <span class="p">:</span> <span class="n">INotificationHandler</span><span class="p">&lt;</span><span class="n">CreateCatalogItemCommand</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IAggregateRepository</span><span class="p">&lt;</span><span class="n">CatalogItem</span><span class="p">,</span> <span class="n">Guid</span><span class="p">&gt;</span> <span class="n">_aggregateRepository</span><span class="p">;</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">ICatalogItemRepository</span> <span class="n">_catalogItemRepository</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">CreateCatalogItemCommandHandler</span><span class="p">(</span><span class="n">IAggregateRepository</span><span class="p">&lt;</span><span class="n">CatalogItem</span><span class="p">,</span> <span class="n">Guid</span><span class="p">&gt;</span> <span class="n">aggregateRepository</span><span class="p">,</span> 
            <span class="n">ICatalogItemRepository</span> <span class="n">catalogItemRepository</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_aggregateRepository</span> <span class="p">=</span> <span class="n">aggregateRepository</span><span class="p">;</span>
            <span class="n">_catalogItemRepository</span> <span class="p">=</span> <span class="n">catalogItemRepository</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span> <span class="nf">Handle</span><span class="p">(</span><span class="n">CreateCatalogItemCommand</span> <span class="n">notification</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
        <span class="p">{</span>

    

            <span class="c1">// Insert event into eventstore db</span>
            <span class="kt">var</span> <span class="n">catalogItem</span> <span class="p">=</span> <span class="n">CatalogItem</span><span class="p">.</span><span class="nf">Create</span><span class="p">(</span><span class="n">notification</span><span class="p">.</span><span class="n">Name</span><span class="p">,</span> <span class="n">notification</span><span class="p">.</span><span class="n">Description</span><span class="p">,</span> <span class="n">notification</span><span class="p">.</span><span class="n">Price</span><span class="p">,</span> <span class="n">notification</span><span class="p">.</span><span class="n">AvailableStock</span><span class="p">,</span>
                <span class="n">notification</span><span class="p">.</span><span class="n">RestockThreshold</span><span class="p">,</span> <span class="n">notification</span><span class="p">.</span><span class="n">MaxStockThreshold</span><span class="p">,</span> <span class="n">notification</span><span class="p">.</span><span class="n">OnReorder</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_aggregateRepository</span><span class="p">.</span><span class="nf">AppendAsync</span><span class="p">(</span><span class="n">catalogItem</span><span class="p">);</span>

            <span class="c1">// Save data into database</span>
            <span class="c1">//await _catalogItemAggregateRepository.SaveAsync(catalogItem.Events.FirstOrDefault());</span>
            <span class="k">await</span> <span class="n">_catalogItemRepository</span><span class="p">.</span><span class="nf">AddAsync</span><span class="p">(</span><span class="n">catalogItem</span><span class="p">);</span>

            <span class="c1">// Dispatch events to any event/service bus to do next actions</span>
            <span class="c1">// We can also register EventStore db Subscription to receive Event Notification</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create UpdateCatalogItemCommand and UpdateCatalogItemCommandHandler class in Commands-&gt;CatalogItems folder.</li>
</ul>

<p><strong>UpdateCatalogItemCommand.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Application.Common.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Domain.Entities</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Application.Commands.CatalogItems</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">UpdateCatalogItemCommand</span> <span class="p">:</span> <span class="n">INotification</span>
    <span class="p">{</span>
        <span class="c1">// Update Catalog Item Command</span>
        <span class="k">public</span> <span class="nf">UpdateCatalogItemCommand</span><span class="p">(</span><span class="n">Guid</span> <span class="n">id</span><span class="p">,</span> <span class="kt">string</span> <span class="n">name</span><span class="p">,</span> <span class="kt">string</span> <span class="n">description</span><span class="p">,</span> <span class="kt">double</span> <span class="n">price</span><span class="p">,</span> <span class="kt">int</span> <span class="n">availableStock</span><span class="p">,</span> <span class="kt">int</span> <span class="n">restockThreshold</span><span class="p">,</span>
            <span class="kt">int</span> <span class="n">maxStockThreshold</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">onReorder</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">CatalogItemId</span> <span class="p">=</span> <span class="n">id</span><span class="p">;</span>
            <span class="n">Name</span> <span class="p">=</span> <span class="n">name</span><span class="p">;</span>
            <span class="n">Description</span> <span class="p">=</span> <span class="n">description</span><span class="p">;</span>
            <span class="n">Price</span> <span class="p">=</span> <span class="n">price</span><span class="p">;</span>
            <span class="n">AvailableStock</span> <span class="p">=</span> <span class="n">availableStock</span><span class="p">;</span>
            <span class="n">RestockThreshold</span> <span class="p">=</span> <span class="n">restockThreshold</span><span class="p">;</span>
            <span class="n">MaxStockThreshold</span> <span class="p">=</span> <span class="n">maxStockThreshold</span><span class="p">;</span>
            <span class="n">OnReorder</span> <span class="p">=</span> <span class="n">onReorder</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">Guid</span> <span class="n">CatalogItemId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">string</span> <span class="n">Description</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">double</span> <span class="n">Price</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">// Quantity in stock</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">AvailableStock</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">// Available stock at which we should reorder</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">RestockThreshold</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">// Maximum number of units that can be in-stock at any time (due to physicial/logistical constraints in warehouses)</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">MaxStockThreshold</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">/// &lt;summary&gt;</span>
        <span class="c1">/// True if item is on reorder</span>
        <span class="c1">/// &lt;/summary&gt;</span>
        <span class="k">public</span> <span class="kt">bool</span> <span class="n">OnReorder</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

    <span class="p">}</span>

    <span class="k">public</span> <span class="k">class</span> <span class="nc">UpdateCatalogItemCommandHandler</span><span class="p">:</span> <span class="n">INotificationHandler</span><span class="p">&lt;</span><span class="n">UpdateCatalogItemCommand</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IAggregateRepository</span><span class="p">&lt;</span><span class="n">CatalogItem</span><span class="p">,</span> <span class="n">Guid</span><span class="p">&gt;</span> <span class="n">_aggregateRepository</span><span class="p">;</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">ICatalogItemRepository</span> <span class="n">_catalogItemRepository</span><span class="p">;</span>
        <span class="k">public</span> <span class="nf">UpdateCatalogItemCommandHandler</span><span class="p">(</span><span class="n">IAggregateRepository</span><span class="p">&lt;</span><span class="n">CatalogItem</span><span class="p">,</span> <span class="n">Guid</span><span class="p">&gt;</span> <span class="n">aggregateRepository</span><span class="p">,</span> 
            <span class="n">ICatalogItemRepository</span> <span class="n">catalogItemRepository</span><span class="p">)</span>
        <span class="p">{</span> 
            <span class="n">_aggregateRepository</span> <span class="p">=</span> <span class="n">aggregateRepository</span><span class="p">;</span>
            <span class="n">_catalogItemRepository</span> <span class="p">=</span> <span class="n">catalogItemRepository</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="err">#</span><span class="n">region</span> <span class="n">INotificationHandler</span> <span class="n">implementation</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span> <span class="nf">Handle</span><span class="p">(</span><span class="n">UpdateCatalogItemCommand</span> <span class="n">notification</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">catalogItem</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_aggregateRepository</span><span class="p">.</span><span class="nf">RehydreateAsync</span><span class="p">(</span><span class="n">notification</span><span class="p">.</span><span class="n">CatalogItemId</span><span class="p">,</span> <span class="n">cancellationToken</span><span class="p">);</span>

            <span class="k">if</span><span class="p">(</span><span class="n">catalogItem</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">(</span><span class="s">"Invalide catalog item information"</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="n">catalogItem</span><span class="p">.</span><span class="nf">Update</span><span class="p">(</span><span class="n">notification</span><span class="p">.</span><span class="n">CatalogItemId</span><span class="p">,</span> <span class="n">notification</span><span class="p">.</span><span class="n">Name</span><span class="p">,</span> <span class="n">notification</span><span class="p">.</span><span class="n">Description</span><span class="p">,</span> <span class="n">notification</span><span class="p">.</span><span class="n">Price</span><span class="p">,</span>
                <span class="n">notification</span><span class="p">.</span><span class="n">AvailableStock</span><span class="p">,</span> <span class="n">notification</span><span class="p">.</span><span class="n">RestockThreshold</span><span class="p">,</span> <span class="n">notification</span><span class="p">.</span><span class="n">MaxStockThreshold</span><span class="p">,</span> <span class="n">notification</span><span class="p">.</span><span class="n">OnReorder</span><span class="p">);</span>

            <span class="k">await</span> <span class="n">_aggregateRepository</span><span class="p">.</span><span class="nf">AppendAsync</span><span class="p">(</span><span class="n">catalogItem</span><span class="p">,</span> <span class="n">cancellationToken</span><span class="p">);</span>

            <span class="c1">// Save data into database</span>

            <span class="k">await</span> <span class="n">_catalogItemRepository</span><span class="p">.</span><span class="nf">UpdateAsync</span><span class="p">(</span><span class="n">catalogItem</span><span class="p">);</span>


        <span class="p">}</span>

        <span class="err">#</span><span class="n">endregion</span>
    <span class="p">}</span>


<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create DeleteCatalogItemCommand and DeleteCatlogItemCommandHandler class in Commands-&gt;CatalogItems folder.</li>
</ul>

<p><strong>DeleteCatalogItemCommand.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Application.Common.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Domain.Entities</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Application.Commands.CatalogItems</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">DeleteCatalogItemCommand</span> <span class="p">:</span> <span class="n">INotification</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">DeleteCatalogItemCommand</span><span class="p">(</span><span class="n">Guid</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Id</span> <span class="p">=</span> <span class="n">id</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="n">Guid</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">class</span> <span class="nc">DeleteCatlogItemCommandHandler</span> <span class="p">:</span> <span class="n">INotificationHandler</span><span class="p">&lt;</span><span class="n">DeleteCatalogItemCommand</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IAggregateRepository</span><span class="p">&lt;</span><span class="n">CatalogItem</span><span class="p">,</span> <span class="n">Guid</span><span class="p">&gt;</span> <span class="n">_aggregateRepository</span><span class="p">;</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">ICatalogItemRepository</span> <span class="n">_catalogItemRepository</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">DeleteCatlogItemCommandHandler</span><span class="p">(</span><span class="n">IAggregateRepository</span><span class="p">&lt;</span><span class="n">CatalogItem</span><span class="p">,</span> <span class="n">Guid</span><span class="p">&gt;</span> <span class="n">agrregateRepository</span>
            <span class="p">,</span> <span class="n">ICatalogItemRepository</span> <span class="n">catalogItemRepository</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_aggregateRepository</span> <span class="p">=</span> <span class="n">agrregateRepository</span><span class="p">;</span>
            <span class="n">_catalogItemRepository</span> <span class="p">=</span> <span class="n">catalogItemRepository</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span> <span class="nf">Handle</span><span class="p">(</span><span class="n">DeleteCatalogItemCommand</span> <span class="n">notification</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">catalogItem</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_aggregateRepository</span><span class="p">.</span><span class="nf">RehydreateAsync</span><span class="p">(</span><span class="n">notification</span><span class="p">.</span><span class="n">Id</span><span class="p">,</span> <span class="n">cancellationToken</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">catalogItem</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">(</span><span class="s">"Invalid Catalog Item information"</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="n">catalogItem</span><span class="p">.</span><span class="nf">Delete</span><span class="p">(</span><span class="n">catalogItem</span><span class="p">.</span><span class="n">Id</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_aggregateRepository</span><span class="p">.</span><span class="nf">AppendAsync</span><span class="p">(</span><span class="n">catalogItem</span><span class="p">,</span> <span class="n">cancellationToken</span><span class="p">);</span>

            <span class="c1">// Save data into database</span>
            <span class="k">await</span> <span class="n">_catalogItemRepository</span><span class="p">.</span><span class="nf">UpdateAsync</span><span class="p">(</span><span class="n">catalogItem</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create GetCatalogItemLogByIdQuery and GetCatalogItemLogByIdQueryHandler class in Queries-&gt;CatalogItems folder</li>
</ul>

<p><strong>GetCatalogItemLogByIdQuery.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Application.Common.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Domain.Entities</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Application.Queries.CatalogItems</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">GetCatalogItemLogByIdQuery</span> <span class="p">:</span> <span class="n">IRequest</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">&gt;&gt;</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">GetCatalogItemLogByIdQuery</span><span class="p">(</span><span class="n">Guid</span> <span class="n">catalogItemId</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">CatalogItemId</span> <span class="p">=</span> <span class="n">catalogItemId</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">Guid</span> <span class="n">CatalogItemId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">class</span> <span class="nc">GetCatalogItemLogByIdQueryHandler</span> <span class="p">:</span> <span class="n">IRequestHandler</span><span class="p">&lt;</span><span class="n">GetCatalogItemLogByIdQuery</span><span class="p">,</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">&gt;&gt;</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IAggregateRepository</span><span class="p">&lt;</span><span class="n">CatalogItem</span><span class="p">,</span> <span class="n">Guid</span><span class="p">&gt;</span> <span class="n">_aggregateRepository</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">GetCatalogItemLogByIdQueryHandler</span><span class="p">(</span><span class="n">IAggregateRepository</span><span class="p">&lt;</span><span class="n">CatalogItem</span><span class="p">,</span> <span class="n">Guid</span><span class="p">&gt;</span> <span class="n">aggregateRepository</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_aggregateRepository</span> <span class="p">=</span> <span class="n">aggregateRepository</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">&gt;&gt;</span> <span class="nf">Handle</span><span class="p">(</span><span class="n">GetCatalogItemLogByIdQuery</span> <span class="n">request</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">data</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_aggregateRepository</span><span class="p">.</span><span class="nf">ReadEventsAsync</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">CatalogItemId</span><span class="p">,</span> <span class="n">cancellationToken</span><span class="p">);</span>
            <span class="k">return</span> <span class="n">data</span><span class="p">.</span><span class="n">Values</span><span class="p">.</span><span class="nf">ToList</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create service collection extension method in root directory.</li>
</ul>

<p><strong>DependencyInjection.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Extensions.DependencyInjection</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Reflection</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Application</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">DependencyInjection</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">static</span> <span class="n">IServiceCollection</span> <span class="nf">AddApplication</span><span class="p">(</span><span class="k">this</span> <span class="n">IServiceCollection</span> <span class="n">services</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">//Add MediatR to the Pipe line</span>
            <span class="n">services</span><span class="p">.</span><span class="nf">AddMediatR</span><span class="p">(</span><span class="n">Assembly</span><span class="p">.</span><span class="nf">GetExecutingAssembly</span><span class="p">());</span>
            <span class="k">return</span> <span class="n">services</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 6: Organize Infrastructure</strong></p>

<ul>
  <li>Add Domain and Application project as reference in the Infrastructure project.</li>
  <li>You may add in the project file as follows.</li>
</ul>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
  <span class="nt">&lt;ItemGroup&gt;</span>
    <span class="nt">&lt;ProjectReference</span> <span class="na">Include=</span><span class="s">"..\Application\Application.csproj"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;ProjectReference</span> <span class="na">Include=</span><span class="s">"..\Domain\Domain.csproj"</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;/ItemGroup&gt;</span>

</code></pre></div></div>

<ul>
  <li>Create ApplicationDbContext class in Persistance folder</li>
</ul>

<p><strong>ApplicationDbContext.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Domain.Entities</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Reflection</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Infrastructure.Persistance</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">ApplicationDbContext</span> <span class="p">:</span> <span class="n">DbContext</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">ApplicationDbContext</span><span class="p">(</span><span class="n">DbContextOptions</span><span class="p">&lt;</span><span class="n">ApplicationDbContext</span><span class="p">&gt;</span> <span class="n">options</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
        <span class="p">{</span>

        <span class="p">}</span>

        <span class="k">public</span> <span class="n">DbSet</span><span class="p">&lt;</span><span class="n">CatalogItem</span><span class="p">&gt;</span> <span class="n">CatalogItems</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">OnConfiguring</span><span class="p">(</span><span class="n">DbContextOptionsBuilder</span> <span class="n">optionsBuilder</span><span class="p">)</span>
        <span class="p">{</span>

        <span class="p">}</span>

        <span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">OnModelCreating</span><span class="p">(</span><span class="n">ModelBuilder</span> <span class="n">builder</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">base</span><span class="p">.</span><span class="nf">OnModelCreating</span><span class="p">(</span><span class="n">builder</span><span class="p">);</span>
            <span class="n">builder</span><span class="p">.</span><span class="nf">ApplyConfigurationsFromAssembly</span><span class="p">(</span><span class="n">Assembly</span><span class="p">.</span><span class="nf">GetExecutingAssembly</span><span class="p">());</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>


</code></pre></div></div>

<ul>
  <li>Create CatalogItemRepository class in Persistance folder for insert and update in the sql server.</li>
</ul>

<p><strong>CatalogItemRepository.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Application.Common.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Domain.Entities</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Infrastructure.Persistance</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CatalogItemRepository</span> <span class="p">:</span> <span class="n">ICatalogItemRepository</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">ApplicationDbContext</span> <span class="n">_context</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">CatalogItemRepository</span><span class="p">(</span><span class="n">ApplicationDbContext</span> <span class="n">applicationDbContext</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_context</span> <span class="p">=</span> <span class="n">applicationDbContext</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span> <span class="nf">AddAsync</span><span class="p">(</span><span class="n">CatalogItem</span> <span class="n">catalogItem</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">AddAsync</span><span class="p">(</span><span class="n">catalogItem</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span> <span class="nf">UpdateAsync</span><span class="p">(</span><span class="n">CatalogItem</span> <span class="n">catalogItem</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_context</span><span class="p">.</span><span class="nf">Entry</span><span class="p">(</span><span class="n">catalogItem</span><span class="p">).</span><span class="n">State</span> <span class="p">=</span> <span class="n">Microsoft</span><span class="p">.</span><span class="n">EntityFrameworkCore</span><span class="p">.</span><span class="n">EntityState</span><span class="p">.</span><span class="n">Modified</span><span class="p">;</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create AggregateRepository class in Persistance for inserting into event store db.</li>
</ul>

<p><strong>AggregateRepository.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Application.Common.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Application.Common.Resolvers</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Domain.Entities.Common</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">EventStore.Client</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Newtonsoft.Json</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Text</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Text.Json</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Text.Json.Serialization</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">JsonSerializer</span> <span class="p">=</span> <span class="n">System</span><span class="p">.</span><span class="n">Text</span><span class="p">.</span><span class="n">Json</span><span class="p">.</span><span class="n">JsonSerializer</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Infrastructure.Persistance</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">AggregateRepository</span><span class="p">&lt;</span><span class="n">TA</span><span class="p">,</span> <span class="n">TKey</span><span class="p">&gt;</span> <span class="p">:</span> <span class="n">IAggregateRepository</span><span class="p">&lt;</span><span class="n">TA</span><span class="p">,</span> <span class="n">TKey</span><span class="p">&gt;</span> <span class="k">where</span> <span class="n">TA</span> <span class="p">:</span> <span class="k">class</span><span class="err">,</span> <span class="nc">IAggregateRoot</span><span class="p">&lt;</span><span class="n">TKey</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">EventStoreClient</span> <span class="n">_eventStoreClient</span><span class="p">;</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="kt">string</span> <span class="n">_stramBaseName</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">AggregateRepository</span><span class="p">(</span><span class="n">EventStoreClient</span> <span class="n">eventStoreClient</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_eventStoreClient</span> <span class="p">=</span> <span class="n">eventStoreClient</span><span class="p">;</span>
            <span class="kt">var</span> <span class="n">aggregateType</span> <span class="p">=</span> <span class="k">typeof</span><span class="p">(</span><span class="n">TA</span><span class="p">);</span>
            <span class="n">_stramBaseName</span> <span class="p">=</span> <span class="n">aggregateType</span><span class="p">.</span><span class="n">Name</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span> <span class="nf">AppendAsync</span><span class="p">(</span><span class="n">TA</span> <span class="n">aggregate</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span> <span class="p">=</span> <span class="k">default</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="k">null</span> <span class="p">==</span> <span class="n">aggregate</span><span class="p">)</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentNullException</span><span class="p">(</span><span class="k">nameof</span><span class="p">(</span><span class="n">aggregate</span><span class="p">));</span>
            <span class="k">if</span> <span class="p">(!</span><span class="n">aggregate</span><span class="p">.</span><span class="n">Events</span><span class="p">.</span><span class="nf">Any</span><span class="p">())</span>
                <span class="k">return</span><span class="p">;</span>

            <span class="kt">var</span> <span class="n">streamName</span> <span class="p">=</span> <span class="nf">GetStreamName</span><span class="p">(</span><span class="n">aggregate</span><span class="p">.</span><span class="n">Id</span><span class="p">);</span>

            <span class="kt">var</span> <span class="n">eventList</span> <span class="p">=</span> <span class="n">aggregate</span><span class="p">.</span><span class="n">Events</span><span class="p">.</span><span class="nf">Select</span><span class="p">(</span><span class="n">Map</span><span class="p">).</span><span class="nf">ToArray</span><span class="p">();</span>

            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_eventStoreClient</span><span class="p">.</span><span class="nf">AppendToStreamAsync</span><span class="p">(</span><span class="n">streamName</span><span class="p">,</span> <span class="n">StreamState</span><span class="p">.</span><span class="n">Any</span><span class="p">,</span>
                <span class="n">eventList</span><span class="p">.</span><span class="nf">ToArray</span><span class="p">(),</span> <span class="n">cancellationToken</span><span class="p">:</span> <span class="n">cancellationToken</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">object</span><span class="p">&gt;&gt;</span> <span class="nf">ReadEventsAsync</span><span class="p">(</span><span class="n">TKey</span> <span class="n">aggregateId</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span> <span class="p">=</span> <span class="k">default</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">streamName</span> <span class="p">=</span> <span class="nf">GetStreamName</span><span class="p">(</span><span class="n">aggregateId</span><span class="p">);</span>
            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="n">_eventStoreClient</span><span class="p">.</span><span class="nf">ReadStreamAsync</span><span class="p">(</span><span class="n">Direction</span><span class="p">.</span><span class="n">Forwards</span><span class="p">,</span> <span class="n">streamName</span><span class="p">,</span> <span class="n">StreamPosition</span><span class="p">.</span><span class="n">Start</span><span class="p">);</span>

            <span class="kt">var</span> <span class="n">events</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">object</span><span class="p">&gt;();</span>
            <span class="kt">var</span> <span class="n">index</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>

            <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">data</span> <span class="k">in</span> <span class="k">await</span> <span class="n">result</span><span class="p">.</span><span class="nf">ToListAsync</span><span class="p">(</span><span class="n">cancellationToken</span><span class="p">:</span> <span class="n">cancellationToken</span><span class="p">))</span>
            <span class="p">{</span>
                <span class="c1">// Read event metadata to get type information of an event</span>
                <span class="kt">var</span> <span class="n">eventMetaData</span> <span class="p">=</span> <span class="n">JsonSerializer</span><span class="p">.</span><span class="n">Deserialize</span><span class="p">&lt;</span><span class="n">EventMeta</span><span class="p">&gt;(</span><span class="n">Encoding</span><span class="p">.</span><span class="n">UTF8</span><span class="p">.</span><span class="nf">GetString</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">Event</span><span class="p">.</span><span class="n">Metadata</span><span class="p">.</span><span class="nf">ToArray</span><span class="p">()));</span>
                <span class="n">Type</span><span class="p">?</span> <span class="n">typeInfo</span> <span class="p">=</span> <span class="n">Type</span><span class="p">.</span><span class="nf">GetType</span><span class="p">(</span><span class="n">eventMetaData</span><span class="p">.</span><span class="n">EventType</span><span class="p">);</span>
                <span class="k">if</span><span class="p">(</span><span class="n">typeInfo</span> <span class="k">is</span> <span class="k">null</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">(</span><span class="s">$"Invalid type </span><span class="p">{</span><span class="n">eventMetaData</span><span class="p">.</span><span class="n">EventType</span><span class="p">}</span><span class="s">"</span><span class="p">);</span>
                <span class="p">}</span>

                <span class="kt">var</span> <span class="n">jsonData</span> <span class="p">=</span> <span class="n">Encoding</span><span class="p">.</span><span class="n">UTF8</span><span class="p">.</span><span class="nf">GetString</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">Event</span><span class="p">.</span><span class="n">Data</span><span class="p">.</span><span class="nf">ToArray</span><span class="p">());</span>
                <span class="kt">var</span> <span class="n">eventInfo</span> <span class="p">=</span> <span class="n">JsonConvert</span><span class="p">.</span><span class="nf">DeserializeObject</span><span class="p">(</span><span class="n">jsonData</span><span class="p">,</span> <span class="n">typeInfo</span><span class="p">,</span> <span class="k">new</span> <span class="nf">JsonSerializerSettings</span><span class="p">()</span>
                <span class="p">{</span>
                    <span class="n">ConstructorHandling</span> <span class="p">=</span> <span class="n">ConstructorHandling</span><span class="p">.</span><span class="n">AllowNonPublicDefaultConstructor</span><span class="p">,</span>
                    <span class="n">ContractResolver</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">PrivateSetterContractResolver</span><span class="p">()</span>
                <span class="p">});</span>

                <span class="n">events</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">index</span><span class="p">,</span> <span class="k">new</span>
                <span class="p">{</span>
                    <span class="n">Events</span> <span class="p">=</span> <span class="n">eventInfo</span><span class="p">,</span>
                    <span class="n">EventType</span> <span class="p">=</span> <span class="n">data</span><span class="p">.</span><span class="n">OriginalEvent</span><span class="p">.</span><span class="n">EventType</span>
                <span class="p">});</span>

                <span class="n">index</span><span class="p">++;</span>

            <span class="p">}</span>

            <span class="k">return</span> <span class="n">events</span><span class="p">;</span>
        <span class="p">}</span>


        <span class="c1">/// &lt;summary&gt;</span>
        <span class="c1">/// Read all events using Aggregate ID</span>
        <span class="c1">/// &lt;/summary&gt;</span>
        <span class="c1">/// &lt;param name="aggregateId"&gt;&lt;/param&gt;</span>
        <span class="c1">/// &lt;param name="cancellationToken"&gt;&lt;/param&gt;</span>
        <span class="c1">/// &lt;returns&gt;&lt;/returns&gt;</span>
        <span class="c1">/// &lt;exception cref="NotImplementedException"&gt;&lt;/exception&gt;</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">TA</span><span class="p">?&gt;</span> <span class="nf">RehydreateAsync</span><span class="p">(</span><span class="n">TKey</span> <span class="n">key</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span> <span class="p">=</span> <span class="k">default</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">try</span>
            <span class="p">{</span>

                <span class="kt">var</span> <span class="n">streamName</span> <span class="p">=</span> <span class="nf">GetStreamName</span><span class="p">(</span><span class="n">key</span><span class="p">);</span>

                <span class="kt">var</span> <span class="n">events</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">IDomainEvent</span><span class="p">&lt;</span><span class="n">TKey</span><span class="p">&gt;&gt;();</span>

                <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="n">_eventStoreClient</span><span class="p">.</span><span class="nf">ReadStreamAsync</span><span class="p">(</span><span class="n">Direction</span><span class="p">.</span><span class="n">Forwards</span><span class="p">,</span> <span class="n">streamName</span><span class="p">,</span> <span class="n">StreamPosition</span><span class="p">.</span><span class="n">Start</span><span class="p">);</span>


                <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">data</span> <span class="k">in</span> <span class="k">await</span> <span class="n">result</span><span class="p">.</span><span class="nf">ToListAsync</span><span class="p">(</span><span class="n">cancellationToken</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="c1">//Read Event Metadata to get Type Information of an event</span>
                    <span class="kt">var</span> <span class="n">eventMetaData</span> <span class="p">=</span> <span class="n">JsonSerializer</span><span class="p">.</span><span class="n">Deserialize</span><span class="p">&lt;</span><span class="n">EventMeta</span><span class="p">&gt;</span>
                        <span class="p">(</span><span class="n">Encoding</span><span class="p">.</span><span class="n">UTF8</span><span class="p">.</span><span class="nf">GetString</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">Event</span><span class="p">.</span><span class="n">Metadata</span><span class="p">.</span><span class="nf">ToArray</span><span class="p">()));</span>

                    <span class="n">Type</span><span class="p">?</span> <span class="n">typeInfo</span> <span class="p">=</span> <span class="n">Type</span><span class="p">.</span><span class="nf">GetType</span><span class="p">(</span><span class="n">eventMetaData</span><span class="p">.</span><span class="n">EventType</span><span class="p">);</span>

                    <span class="k">if</span> <span class="p">(</span><span class="n">typeInfo</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
                    <span class="p">{</span>
                        <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">(</span><span class="s">$"Invalid type </span><span class="p">{</span><span class="n">eventMetaData</span><span class="p">.</span><span class="n">EventType</span><span class="p">}</span><span class="s">"</span><span class="p">);</span>
                    <span class="p">}</span>

                    <span class="kt">var</span> <span class="n">jsonData</span> <span class="p">=</span> <span class="n">Encoding</span><span class="p">.</span><span class="n">UTF8</span><span class="p">.</span><span class="nf">GetString</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">Event</span><span class="p">.</span><span class="n">Data</span><span class="p">.</span><span class="nf">ToArray</span><span class="p">());</span>
                    <span class="kt">var</span> <span class="n">eventInfo</span> <span class="p">=</span> <span class="n">JsonConvert</span><span class="p">.</span><span class="nf">DeserializeObject</span><span class="p">(</span><span class="n">jsonData</span><span class="p">,</span> <span class="n">typeInfo</span><span class="p">,</span> <span class="k">new</span> <span class="nf">JsonSerializerSettings</span><span class="p">()</span>
                    <span class="p">{</span>
                        <span class="n">ConstructorHandling</span> <span class="p">=</span> <span class="n">ConstructorHandling</span><span class="p">.</span><span class="n">AllowNonPublicDefaultConstructor</span><span class="p">,</span>
                        <span class="n">ContractResolver</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">PrivateSetterContractResolver</span><span class="p">()</span>
                    <span class="p">});</span>


                    <span class="n">events</span><span class="p">.</span><span class="nf">Add</span><span class="p">((</span><span class="n">IDomainEvent</span><span class="p">&lt;</span><span class="n">TKey</span><span class="p">&gt;)</span><span class="n">eventInfo</span><span class="p">);</span>
                <span class="p">}</span>

                <span class="k">if</span> <span class="p">(!</span><span class="n">events</span><span class="p">.</span><span class="nf">Any</span><span class="p">())</span>
                    <span class="k">return</span> <span class="k">null</span><span class="p">;</span>

                <span class="kt">var</span> <span class="n">aggregateResult</span> <span class="p">=</span> <span class="n">BaseAggregateRoot</span><span class="p">&lt;</span><span class="n">TA</span><span class="p">,</span> <span class="n">TKey</span><span class="p">&gt;.</span><span class="nf">Create</span><span class="p">(</span><span class="n">events</span><span class="p">.</span><span class="nf">OrderBy</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">AggregateVersion</span><span class="p">));</span>

                <span class="k">return</span> <span class="n">aggregateResult</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">e</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="n">e</span><span class="p">);</span>
                <span class="k">throw</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="c1">// Techical: Expression-bodied member</span>
        <span class="c1">// Generate stream name format</span>
        <span class="k">private</span> <span class="kt">string</span> <span class="nf">GetStreamName</span><span class="p">(</span><span class="n">TKey</span> <span class="n">aggregateKey</span><span class="p">)</span>
            <span class="p">=&gt;</span> <span class="s">$"</span><span class="p">{</span><span class="n">_stramBaseName</span><span class="p">}</span><span class="s">_</span><span class="p">{</span><span class="n">aggregateKey</span><span class="p">}</span><span class="s">"</span><span class="p">;</span>

        <span class="c1">// Map domain event to event data</span>
        <span class="k">private</span> <span class="k">static</span> <span class="n">EventData</span> <span class="nf">Map</span><span class="p">(</span><span class="n">IDomainEvent</span><span class="p">&lt;</span><span class="n">TKey</span><span class="p">&gt;</span> <span class="n">@event</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">meta</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">EventMeta</span><span class="p">()</span>
            <span class="p">{</span>
                <span class="n">EventType</span> <span class="p">=</span> <span class="n">@event</span><span class="p">.</span><span class="nf">GetType</span><span class="p">().</span><span class="n">AssemblyQualifiedName</span>
            <span class="p">};</span>

            <span class="kt">var</span> <span class="n">metaJson</span> <span class="p">=</span> <span class="n">System</span><span class="p">.</span><span class="n">Text</span><span class="p">.</span><span class="n">Json</span><span class="p">.</span><span class="n">JsonSerializer</span><span class="p">.</span><span class="nf">Serialize</span><span class="p">(</span><span class="n">meta</span><span class="p">);</span>
            <span class="kt">var</span> <span class="n">metadata</span> <span class="p">=</span> <span class="n">Encoding</span><span class="p">.</span><span class="n">UTF8</span><span class="p">.</span><span class="nf">GetBytes</span><span class="p">(</span><span class="n">metaJson</span><span class="p">);</span>

            <span class="kt">var</span> <span class="n">eventData</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">EventData</span><span class="p">(</span>
                <span class="n">Uuid</span><span class="p">.</span><span class="nf">NewUuid</span><span class="p">(),</span>
                <span class="n">@event</span><span class="p">.</span><span class="nf">GetType</span><span class="p">().</span><span class="n">Name</span><span class="p">,</span>
                <span class="n">JsonSerializer</span><span class="p">.</span><span class="nf">SerializeToUtf8Bytes</span><span class="p">(</span><span class="n">@event</span><span class="p">,</span> <span class="n">@event</span><span class="p">.</span><span class="nf">GetType</span><span class="p">(),</span> <span class="k">new</span> <span class="nf">JsonSerializerOptions</span><span class="p">()</span>
                <span class="p">{</span>
                    <span class="n">ReferenceHandler</span> <span class="p">=</span> <span class="n">ReferenceHandler</span><span class="p">.</span><span class="n">IgnoreCycles</span>
                <span class="p">}),</span>
                <span class="n">metadata</span>
                <span class="p">);</span>
            <span class="k">return</span> <span class="n">eventData</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">/// &lt;summary&gt;</span>
        <span class="c1">///  Meta data information for an event which will also saved into each Event Payload</span>
        <span class="c1">/// &lt;/summary&gt;</span>
        <span class="k">internal</span> <span class="k">struct</span> <span class="nc">EventMeta</span>
        <span class="p">{</span>
            <span class="k">public</span> <span class="kt">string</span> <span class="n">EventType</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Add service collection extension method in the root directory. Here sql server, event store db and dependency injection is configured.</li>
</ul>

<p><strong>DependencyInjection.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Application.Common.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Domain.Entities</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Domain.Entities.Common</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">EventStore.Client</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Infrastructure.Persistance</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Extensions.Configuration</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Extensions.DependencyInjection</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Infrastructure</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">DependencyInjection</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">static</span> <span class="n">IServiceCollection</span> <span class="nf">AddEventStore</span><span class="p">(</span><span class="k">this</span> <span class="n">IServiceCollection</span> <span class="n">services</span><span class="p">,</span> <span class="n">IConfiguration</span> <span class="n">configuration</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">// Event store database connection</span>
            <span class="kt">var</span> <span class="n">settings</span> <span class="p">=</span> <span class="n">EventStoreClientSettings</span>
                <span class="p">.</span><span class="nf">Create</span><span class="p">(</span><span class="s">"esdb://127.0.0.1:2113?tls=false&amp;keepAliveTimeout=10000&amp;keepAliveInterval=10000"</span><span class="p">);</span>

            <span class="kt">var</span> <span class="n">client</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">EventStoreClient</span><span class="p">(</span><span class="n">settings</span><span class="p">);</span>
            <span class="n">services</span><span class="p">.</span><span class="nf">AddSingleton</span><span class="p">(</span><span class="n">client</span><span class="p">);</span>

            <span class="c1">// Register DbContext for SQL Server</span>

            <span class="n">services</span><span class="p">.</span><span class="n">AddDbContext</span><span class="p">&lt;</span><span class="n">ApplicationDbContext</span><span class="p">&gt;(</span><span class="n">options</span> <span class="p">=&gt;</span>
            <span class="p">{</span>
                <span class="n">options</span><span class="p">.</span><span class="nf">UseSqlServer</span><span class="p">(</span>
                    <span class="n">configuration</span><span class="p">.</span><span class="nf">GetConnectionString</span><span class="p">(</span><span class="s">"DefaultConnection"</span><span class="p">),</span>
                    <span class="n">sqlServerOptionsAction</span><span class="p">:</span> <span class="n">sqlOptions</span> <span class="p">=&gt;</span>
                    <span class="p">{</span>
                    <span class="p">});</span>
            <span class="p">});</span>

            <span class="n">services</span><span class="p">.</span><span class="n">AddScoped</span><span class="p">&lt;</span><span class="n">ICatalogItemRepository</span><span class="p">,</span> <span class="n">CatalogItemRepository</span><span class="p">&gt;();</span>
            <span class="n">services</span><span class="p">.</span><span class="n">AddEventsRepository</span><span class="p">&lt;</span><span class="n">CatalogItem</span><span class="p">,</span> <span class="n">Guid</span><span class="p">&gt;();</span>

            <span class="k">return</span> <span class="n">services</span><span class="p">;</span>

        <span class="p">}</span>


        <span class="k">private</span> <span class="k">static</span> <span class="n">IServiceCollection</span> <span class="n">AddEventsRepository</span><span class="p">&lt;</span><span class="n">TA</span><span class="p">,</span> <span class="n">TK</span><span class="p">&gt;(</span><span class="k">this</span> <span class="n">IServiceCollection</span> <span class="n">services</span><span class="p">)</span>
    <span class="k">where</span> <span class="n">TA</span> <span class="p">:</span> <span class="k">class</span><span class="err">,</span> <span class="nc">IAggregateRoot</span><span class="p">&lt;</span><span class="n">TK</span><span class="p">&gt;</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">services</span><span class="p">.</span><span class="nf">AddSingleton</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">IAggregateRepository</span><span class="p">&lt;</span><span class="n">TA</span><span class="p">,</span> <span class="n">TK</span><span class="p">&gt;),</span> <span class="k">typeof</span><span class="p">(</span><span class="n">AggregateRepository</span><span class="p">&lt;</span><span class="n">TA</span><span class="p">,</span> <span class="n">TK</span><span class="p">&gt;));</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 7: Organize Catalog.API</strong></p>

<ul>
  <li>Add connection string in the appsettings.json file as follows.</li>
</ul>

<p><strong>appsettings.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">
</span><span class="p">{</span><span class="w">
  </span><span class="nl">"Logging"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"LogLevel"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Default"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Information"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Microsoft.AspNetCore"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Warning"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"AllowedHosts"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"ConnectionStrings"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"DefaultConnection"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Data Source=localhost;Initial Catalog=CatalogDB;Persist Security Info=False;User ID=sa; Password = yourpassword;Pooling=False;MultipleActiveResultSets=False;Encrypt=False;TrustServerCertificate=False"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<ul>
  <li>Add CatalogItemController class in Controllers folder as follows.</li>
</ul>

<p><strong>CatalogItemController.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Application.Commands.CatalogItems</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Application.Common.DTOs</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Application.Queries.CatalogItems</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Catalog.API.Controllers</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
    <span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CatalogItemController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
    <span class="p">{</span>

        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IMediator</span> <span class="n">_mediator</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">CatalogItemController</span><span class="p">(</span><span class="n">IMediator</span> <span class="n">mediator</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_mediator</span> <span class="p">=</span> <span class="n">mediator</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="p">[</span><span class="nf">HttpPost</span><span class="p">(</span><span class="s">"Create"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">CreateCatalogItemAsync</span><span class="p">([</span><span class="n">FromBody</span><span class="p">]</span> <span class="n">CreateCatalogItemDTO</span><span class="p">?</span> <span class="n">dto</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">dto</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>

            <span class="kt">var</span> <span class="n">command</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">CreateCatalogItemCommand</span><span class="p">(</span><span class="n">dto</span><span class="p">.</span><span class="n">Name</span><span class="p">,</span> <span class="n">dto</span><span class="p">.</span><span class="n">Description</span><span class="p">,</span> <span class="n">dto</span><span class="p">.</span><span class="n">Price</span><span class="p">,</span> <span class="n">dto</span><span class="p">.</span><span class="n">AvailableStock</span><span class="p">,</span> <span class="n">dto</span><span class="p">.</span><span class="n">RestockThreshold</span><span class="p">,</span>
                <span class="n">dto</span><span class="p">.</span><span class="n">MaxStockThreshold</span><span class="p">,</span> <span class="n">dto</span><span class="p">.</span><span class="n">OnReorder</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_mediator</span><span class="p">.</span><span class="nf">Publish</span><span class="p">(</span><span class="n">command</span><span class="p">);</span>

            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">command</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="p">[</span><span class="nf">HttpPatch</span><span class="p">(</span><span class="s">"update/{id:guid}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">UpdateCatalogItem</span><span class="p">(</span><span class="n">Guid</span> <span class="n">id</span><span class="p">,</span> <span class="p">[</span><span class="n">FromBody</span><span class="p">]</span> <span class="n">UpdateCatalogItemDTO</span><span class="p">?</span> <span class="n">dto</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">dto</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>

            <span class="kt">var</span> <span class="n">updateCommand</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">UpdateCatalogItemCommand</span><span class="p">(</span><span class="n">id</span><span class="p">,</span> <span class="n">dto</span><span class="p">.</span><span class="n">Name</span><span class="p">,</span> <span class="n">dto</span><span class="p">.</span><span class="n">Description</span><span class="p">,</span> <span class="n">dto</span><span class="p">.</span><span class="n">Price</span><span class="p">,</span> <span class="n">dto</span><span class="p">.</span><span class="n">AvailableStock</span><span class="p">,</span>
                <span class="n">dto</span><span class="p">.</span><span class="n">RestockThreshold</span><span class="p">,</span> <span class="n">dto</span><span class="p">.</span><span class="n">MaxStockThreshold</span><span class="p">,</span> <span class="n">dto</span><span class="p">.</span><span class="n">OnReorder</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_mediator</span><span class="p">.</span><span class="nf">Publish</span><span class="p">(</span><span class="n">updateCommand</span><span class="p">);</span>

            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">updateCommand</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">/// &lt;summary&gt;</span>
        <span class="c1">/// Delete a catalog item which is soft delete not hard delete</span>
        <span class="c1">/// &lt;/summary&gt;</span>
        <span class="c1">/// &lt;param name="id"&gt;&lt;/param&gt;</span>
        <span class="c1">/// &lt;returns&gt;&lt;/returns&gt;</span>
        <span class="p">[</span><span class="nf">HttpDelete</span><span class="p">(</span><span class="s">"delete/{id:guid}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">DeleteCatalogItem</span><span class="p">(</span><span class="n">Guid</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">deleteCatalogCommand</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">DeleteCatalogItemCommand</span><span class="p">(</span><span class="n">id</span><span class="p">);</span> 
            <span class="k">await</span> <span class="n">_mediator</span><span class="p">.</span><span class="nf">Publish</span><span class="p">(</span><span class="n">deleteCatalogCommand</span><span class="p">);</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"log/{id:guid}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">GetLog</span><span class="p">(</span><span class="n">Guid</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="k">await</span> <span class="n">_mediator</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="k">new</span> <span class="nf">GetCatalogItemLogByIdQuery</span><span class="p">(</span><span class="n">id</span><span class="p">)));</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Modify Program.cs as follows.</li>
</ul>

<p><strong>Program.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Application</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Infrastructure</span><span class="p">;</span>

<span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="n">WebApplication</span><span class="p">.</span><span class="nf">CreateBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>

<span class="c1">// Add services to the container.</span>

<span class="kt">var</span> <span class="n">environment</span> <span class="p">=</span> <span class="n">Environment</span><span class="p">.</span><span class="nf">GetEnvironmentVariable</span><span class="p">(</span><span class="s">"ASPNETCORE_ENVIRONMENT"</span><span class="p">);</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Configuration</span><span class="p">.</span><span class="nf">SetBasePath</span><span class="p">(</span><span class="n">Directory</span><span class="p">.</span><span class="nf">GetCurrentDirectory</span><span class="p">())</span>
    <span class="p">.</span><span class="nf">AddJsonFile</span><span class="p">(</span><span class="s">"appsettings.json"</span><span class="p">,</span> <span class="n">optional</span><span class="p">:</span> <span class="k">false</span><span class="p">,</span> <span class="n">reloadOnChange</span><span class="p">:</span> <span class="k">true</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">AddJsonFile</span><span class="p">(</span><span class="s">$"appsettings.</span><span class="p">{</span><span class="n">environment</span><span class="p">}</span><span class="s">.json"</span><span class="p">,</span> <span class="n">optional</span><span class="p">:</span> <span class="k">true</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">AddEnvironmentVariables</span><span class="p">();</span>

<span class="c1">//Register Application layer and Event Store layer from Infrastructure here</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddApplication</span><span class="p">().</span><span class="nf">AddEventStore</span><span class="p">(</span><span class="n">builder</span><span class="p">.</span><span class="n">Configuration</span><span class="p">);</span>



<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">();</span>
<span class="c1">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddEndpointsApiExplorer</span><span class="p">();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddSwaggerGen</span><span class="p">();</span>

<span class="kt">var</span> <span class="n">app</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

<span class="c1">// Configure the HTTP request pipeline.</span>
<span class="k">if</span> <span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">Environment</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
<span class="p">{</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwagger</span><span class="p">();</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwaggerUI</span><span class="p">();</span>
<span class="p">}</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseHttpsRedirection</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseAuthorization</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">MapControllers</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>

</code></pre></div></div>

<p><strong>Step 8: Add Migration</strong></p>

<ul>
  <li>Set Catalog.API as startup project and go to package manager console.</li>
  <li>Select Infrastructure as Default project and run the following commands.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Add-Migration</span> <span class="nf">init-mig</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Update-Database</span> <span class="nf">-Verbose</span>
</code></pre></div></div>

<p><strong>Step 9: Run application and perform CRUD operation using swagger.  See the impact in sql server and EventStoreDB as follows.</strong></p>

<p>Swagger UI: Create, update and delete CatalogItem using SwaggerUI</p>

<p><img src="/assets/images/posts/2022/es-01.png" alt="" /></p>

<p>EventStoreDB UI: Browse event store db to see the impact</p>

<p><img src="/assets/images/posts/2022/es-02.png" alt="" /></p>

<p><strong><a href="https://github.com/mahedee/code-sample02/tree/main/eventsourcing">Source code</a></strong></p>]]></content><author><name>Mahedee Hasan</name></author><category term="C#" /><category term="ASP.NET Core" /><category term="DDD" /><category term="EventStoreDB" /><category term="Microservices" /><category term="Software Architecture" /><category term="csharp" /><category term="aspnetcore" /><category term="ddd" /><category term="eventstoredb" /><category term="microservices" /><category term="softwarearchitecture" /><summary type="html"><![CDATA[Event sourcing is a most important pattern to design a microservice based application. If you are working with multiple services in a microservice based application, you have to use event driven architecture. In this article I will discuss and apply event sourcing using asp.net core, DDD and EventStoreDB.]]></summary></entry><entry><title type="html">How to host .net core NuGet Packages in GitHub Packages Registry</title><link href="https://mahedee.net//How-to-host-dot-net-core-NuGet-Packages-in-GitHub-Packages-Registry/" rel="alternate" type="text/html" title="How to host .net core NuGet Packages in GitHub Packages Registry" /><published>2022-06-15T00:00:00+00:00</published><updated>2022-06-15T00:00:00+00:00</updated><id>https://mahedee.net//How-to-host-dot-net-core-NuGet-Packages-in-GitHub-Packages-Registry</id><content type="html" xml:base="https://mahedee.net//How-to-host-dot-net-core-NuGet-Packages-in-GitHub-Packages-Registry/"><![CDATA[<p><strong>Introduction</strong></p>

<p>GitHub packages registries is most popular now a days. It offers different packages registries for most used package managers, such as NuGet, npm, Docker etc. In this article, I will show you how to host a .net core NuGet Package in GitHub Packages Registry.</p>

<p><strong>Tools and Technology uses</strong></p>
<ul>
  <li>Visual Studio 2022</li>
  <li>.NET 6</li>
  <li>Visual C#</li>
  <li>GitHub</li>
</ul>

<p><strong>Implementation</strong></p>

<p><strong>Step 1: Create a personal access token (PAT) from GitHub</strong></p>

<ul>
  <li>Login into you GitHub</li>
  <li>Go to settings -&gt; Developer Settings -&gt; Personal Access Tokens</li>
  <li>Click “Generate new token” button</li>
  <li>Type Note for the token, expiration days</li>
  <li>
    <p>Select scope for the token – here I have selected repo, write:packages, delete:packages as shown below.</p>

    <p><img src="/assets/images/posts/2022/package-01.PNG" alt="" /></p>
  </li>
  <li>Now click “Generate Toke” at the bottom of the panel</li>
  <li>Copy the token and store the token for further use because you cannot find it later</li>
</ul>

<p><img src="/assets/images/posts/2022/package-02.PNG" alt="" /></p>

<p><strong>Step – 2: Add Nuget Source in visual studio</strong></p>
<ul>
  <li>Type the following command to add source</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">dotnet</span> <span class="nf">nuget</span> <span class="nb">add</span> <span class="nf">source</span> <span class="nf">https:</span><span class="err">/</span><span class="nv">/nuget.pkg.github.com/mahedee/index.json</span> <span class="nf">--name</span> <span class="nf">github-mahedee</span> <span class="nf">--username</span> <span class="nf">mahedee</span> <span class="nf">--password</span> <span class="p">&lt;</span><span class="nf">Your</span> <span class="nf">personal</span> <span class="nf">Access</span> <span class="nf">Token</span><span class="p">&gt;</span>
</code></pre></div></div>

<ul>
  <li>
    <p>You will see a source is added in C:\Users\mahedee\AppData\Roaming\NuGet\NuGet.Config file</p>
  </li>
  <li>Optional: You can also add source from visual studio Tools -&gt; Options -&gt; NuGet Package Manager -&gt; Package Sources</li>
  <li>Restart visual studio to get new nuget package source</li>
</ul>

<p><strong>Step – 3: Create a class library to publish in GitHub Packages</strong></p>
<ul>
  <li>Create a class library name – ‘CryptoEngine”</li>
  <li>Create a class CryptoGenerator as follows</li>
</ul>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">System.Security.Cryptography</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Text</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">CryptoEngine</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CryptoGenerator</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">static</span> <span class="kt">string</span> <span class="nf">GenerateSha256Hash</span><span class="p">(</span><span class="kt">string</span> <span class="n">plainText</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">// Create a SHA256   </span>
            <span class="k">using</span> <span class="p">(</span><span class="n">SHA256</span> <span class="n">sha256Hash</span> <span class="p">=</span> <span class="n">SHA256</span><span class="p">.</span><span class="nf">Create</span><span class="p">())</span>
            <span class="p">{</span>
                <span class="c1">// ComputeHash - returns byte array  </span>
                <span class="kt">byte</span><span class="p">[]</span> <span class="n">bytes</span> <span class="p">=</span> <span class="n">sha256Hash</span><span class="p">.</span><span class="nf">ComputeHash</span><span class="p">(</span><span class="n">Encoding</span><span class="p">.</span><span class="n">UTF8</span><span class="p">.</span><span class="nf">GetBytes</span><span class="p">(</span><span class="n">plainText</span><span class="p">));</span>

                <span class="c1">// Convert byte array to a string   </span>
                <span class="n">StringBuilder</span> <span class="n">builder</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">StringBuilder</span><span class="p">();</span>
                <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">bytes</span><span class="p">.</span><span class="n">Length</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span>
                <span class="p">{</span>
                    <span class="n">builder</span><span class="p">.</span><span class="nf">Append</span><span class="p">(</span><span class="n">bytes</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="nf">ToString</span><span class="p">(</span><span class="s">"x2"</span><span class="p">));</span>
                <span class="p">}</span>
                <span class="k">return</span> <span class="n">builder</span><span class="p">.</span><span class="nf">ToString</span><span class="p">();</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Click right button on class library project -&gt; Package -&gt; General</li>
  <li>Mark “Produce a package file during build operations”</li>
  <li>Type Package ID, Package Version, Authors, Company, Product, Description</li>
  <li>Type repository URL – A github repository and save</li>
  <li>Now you will see the csproj file as follows</li>
</ul>

<p><strong>CryptoEngine.csproj</strong></p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;Project</span> <span class="na">Sdk=</span><span class="s">"Microsoft.NET.Sdk"</span><span class="nt">&gt;</span>

  <span class="nt">&lt;PropertyGroup&gt;</span>
    <span class="nt">&lt;TargetFramework&gt;</span>net6.0<span class="nt">&lt;/TargetFramework&gt;</span>
    <span class="nt">&lt;ImplicitUsings&gt;</span>enable<span class="nt">&lt;/ImplicitUsings&gt;</span>
    <span class="nt">&lt;Nullable&gt;</span>enable<span class="nt">&lt;/Nullable&gt;</span>
    <span class="nt">&lt;GeneratePackageOnBuild&gt;</span>True<span class="nt">&lt;/GeneratePackageOnBuild&gt;</span>
    <span class="nt">&lt;PackageId&gt;</span>Mahedee.CryptoEngine<span class="nt">&lt;/PackageId&gt;</span>
    <span class="nt">&lt;Version&gt;</span>1.0.0<span class="nt">&lt;/Version&gt;</span>
    <span class="nt">&lt;Authors&gt;</span>Mahedee hasan<span class="nt">&lt;/Authors&gt;</span>
    <span class="nt">&lt;Company&gt;</span>Mahedee.NET<span class="nt">&lt;/Company&gt;</span>
    <span class="nt">&lt;Product&gt;</span>CryptoEngine<span class="nt">&lt;/Product&gt;</span>
    <span class="nt">&lt;Description&gt;</span>Chipper text generator<span class="nt">&lt;/Description&gt;</span>
    <span class="nt">&lt;RepositoryUrl&gt;</span>https://github.com/mahedee/public-packages<span class="nt">&lt;/RepositoryUrl&gt;</span>
  <span class="nt">&lt;/PropertyGroup&gt;</span>

<span class="nt">&lt;/Project&gt;</span>

</code></pre></div></div>

<p><strong>Step 4: Create a NuGet Package</strong></p>

<ul>
  <li>Click right button on project and select Pack</li>
  <li>A NuGet package will be generated in bin/Debug folder – In this case the nuget package name is Mahedee.CryptoEngine.1.0.0.nupkg</li>
  <li>Or, Go to the directory where .csproj file exists and right the following command to generate nuget package</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">dotnet</span> <span class="nf">pack</span>
</code></pre></div></div>

<p><strong>Step 5: Push NuGet package to GitHub Package Registry</strong></p>

<ul>
  <li>Go to the directory where package generated – bin/Debug in this case.</li>
  <li>Type following command</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">dotnet</span> <span class="nf">nuget</span> <span class="nf">push</span> <span class="nf">.\Mahedee.CryptoEngine.1.0.0.nupkg</span> <span class="nf">--api-key</span> <span class="p">&lt;</span><span class="nf">your</span> <span class="nf">github</span> <span class="nf">access</span> <span class="nf">token</span><span class="p">&gt;</span> <span class="nf">--source</span> <span class="nf">github-mahedee</span>
</code></pre></div></div>

<p>Here github-mahedee is my nuget source name for visual studio. Already added in step – 2.</p>

<ul>
  <li>Now login to your Github account and go to Packages tab, you will see a package is uploaded. In this case package name is Mahedee.CryptoEngine</li>
</ul>

<p><strong>Step 6: Use already uploaded package in a project</strong></p>
<ul>
  <li>If Nuget package source is not added, add it using step – 2</li>
  <li>Go to package manager console</li>
  <li>Select Package Source as “github-mahedee” and type following command</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Mahedee.CryptoEngine</span>
</code></pre></div></div>

<ul>
  <li>Or right button on project -&gt; Manage Nuget Packages</li>
  <li>Select Package source “github-mahedee”</li>
  <li>Browse and install package Mahedee.CryptoEngine</li>
</ul>

<p><strong><a href="https://github.com/mahedee/code-sample02/tree/main/dotnet-core-nuget-github">Source code</a></strong></p>]]></content><author><name>Mahedee Hasan</name></author><category term="C#" /><category term="ASP.NET Core" /><category term="GitHub" /><category term="NuGet" /><category term="Packages" /><category term="csharp" /><category term="aspnetcore" /><category term="github" /><category term="nuget" /><category term="packages" /><summary type="html"><![CDATA[GitHub packages registries is most popular now a days. It offers different packages registries for most used package managers, such as NuGet, npm, Docker etc. In this article, I will show you how to host a .net core NuGet Package in GitHub Packages Registry.]]></summary></entry><entry><title type="html">Configure QoS in API Gateway using ocelot and Polly</title><link href="https://mahedee.net//Configure-QoS-in-API-Gateway-using-ocelot-and-Polly/" rel="alternate" type="text/html" title="Configure QoS in API Gateway using ocelot and Polly" /><published>2022-06-07T00:00:00+00:00</published><updated>2022-06-07T00:00:00+00:00</updated><id>https://mahedee.net//Configure-QoS-in-API-Gateway-using-ocelot-and-Polly</id><content type="html" xml:base="https://mahedee.net//Configure-QoS-in-API-Gateway-using-ocelot-and-Polly/"><![CDATA[<p><strong>Introduction</strong><br />
API Gateway is an entry point for backend application. It maintains routing, authentication, logging, service discovery etc. Ocelot is used to design and develop API gateway for .net based application. QoS is generally configured in API gateway which provides different priorities for different applications, users or traffic. In this article, we will configure and discuss Quality of Services (QoS) using ocelot and Polly on ASP.NET Core web API project.</p>

<p><strong>What is Quality of Service (QoS)?</strong><br />
QoS provides different priorities to different applications, users or data flow. We have already mentioned, Ocelot is used to design API Gateway and Ocelot uses Polly to achieve QoS.</p>

<p>The QoSOptions node contains three important properties.</p>
<ul>
  <li>
    <p><strong>ExceptionsAllowedBeforeBreaking</strong><br />
This value must greater than 0. It means that the circuit breaker will break after a certain number of exceptions occur. For example:</p>
  </li>
  <li>
    <p><strong>DurationOfBreak</strong><br />
This value specifies how long the circuit breaker will stay open after it is tripped. The unit of this value is milliseconds. For example: 5000 means 5 seconds</p>
  </li>
  <li>
    <p><strong>TimeoutValue</strong><br />
This value specifies that a request will automatically be timed out if it takes more than this value. The unit of this value is milliseconds as well. For example: 3000 means 3 seconds.</p>
  </li>
</ul>

<p><strong>Tools and Technology used</strong></p>
<ul>
  <li>Visual Studio 2022</li>
  <li>.NET 6.0</li>
  <li>In Memory Database</li>
  <li>Entity Framework</li>
  <li>ASP.NET Core Web API</li>
  <li>Visual C#</li>
  <li>Ocelot and</li>
  <li>MMLib.SwaggerForOcelot</li>
</ul>

<p><strong>Implementation</strong></p>

<p><strong>Step 1: Create solution and projects.</strong></p>

<ul>
  <li>Create a solution name QoS.</li>
  <li>Add 2 new web api projects, name – Catalog.API, BFF.Web<br />
Here, BFF.Web project will act as API Gateway.</li>
</ul>

<p><strong>Step 2: Install nuget packages.</strong></p>

<ul>
  <li>Install following nuget packages in Catalog.API</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore.InMemory</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore.SqlServer</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore.Tools</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.VisualStudio.Web.CodeGeneration.Design</span>
</code></pre></div></div>

<ul>
  <li>Install following nuget packages in BFF.Web</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">MMLib.SwaggerForOcelot</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Ocelot</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Ocelot.Provider.Polly</span>
</code></pre></div></div>

<p><strong>Step 3: Organize Catalog.API</strong></p>

<ul>
  <li>Create CatalogItem model in Model folder</li>
</ul>

<p><strong>CatalogItem.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System.ComponentModel.DataAnnotations</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.ComponentModel.DataAnnotations.Schema</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Catalog.API.Model</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CatalogItem</span>
    <span class="p">{</span>
        <span class="p">[</span><span class="n">Key</span><span class="p">]</span>
        <span class="p">[</span><span class="nf">DatabaseGenerated</span><span class="p">(</span><span class="n">DatabaseGeneratedOption</span><span class="p">.</span><span class="n">Identity</span><span class="p">)]</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">string</span> <span class="n">Description</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">decimal</span> <span class="n">Price</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">int</span> <span class="n">AvailableStock</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">int</span> <span class="n">RestockThreshold</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create DbContext class as CatalogContext in Db folder</li>
</ul>

<p><strong>CatalogContext.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Catalog.API.Model</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Catalog.API.Db</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CatalogContext</span> <span class="p">:</span> <span class="n">DbContext</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">CatalogContext</span><span class="p">(</span><span class="n">DbContextOptions</span><span class="p">&lt;</span><span class="n">CatalogContext</span><span class="p">&gt;</span> <span class="n">options</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
        <span class="p">{</span>

        <span class="p">}</span>

        <span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">OnConfiguring</span><span class="p">(</span><span class="n">DbContextOptionsBuilder</span> <span class="n">optionsBuilder</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">base</span><span class="p">.</span><span class="nf">OnConfiguring</span><span class="p">(</span><span class="n">optionsBuilder</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">DbSet</span><span class="p">&lt;</span><span class="n">CatalogItem</span><span class="p">&gt;</span> <span class="n">CatalogItems</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create SeedDataProvider class in Db folder</li>
</ul>

<p><strong>SeedDataProvider.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Catalog.API.Model</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Catalog.API.Db</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">SeedDataProvider</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Initialize</span><span class="p">(</span><span class="n">CatalogContext</span> <span class="n">catalogContext</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span><span class="p">(!</span><span class="n">catalogContext</span><span class="p">.</span><span class="n">CatalogItems</span><span class="p">.</span><span class="nf">Any</span><span class="p">())</span>
            <span class="p">{</span>
                <span class="kt">var</span> <span class="n">catalogs</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">CatalogItem</span><span class="p">&gt;</span>
                <span class="p">{</span>
                    <span class="k">new</span> <span class="n">CatalogItem</span>
                    <span class="p">{</span>
                        <span class="n">Name</span> <span class="p">=</span> <span class="s">"T-Shirt"</span><span class="p">,</span>
                        <span class="n">Description</span> <span class="p">=</span> <span class="s">"Cats Eye T-Shirt"</span><span class="p">,</span>
                        <span class="n">Price</span> <span class="p">=</span> <span class="m">1000</span><span class="p">,</span>
                        <span class="n">AvailableStock</span> <span class="p">=</span> <span class="m">100</span><span class="p">,</span>
                        <span class="n">RestockThreshold</span> <span class="p">=</span> <span class="m">10</span>
                    <span class="p">},</span>

                    <span class="k">new</span> <span class="n">CatalogItem</span>
                    <span class="p">{</span>
                        <span class="n">Name</span> <span class="p">=</span> <span class="s">"Samsung Mobile"</span><span class="p">,</span>
                        <span class="n">Description</span> <span class="p">=</span> <span class="s">"Samsung A30"</span><span class="p">,</span>
                        <span class="n">Price</span> <span class="p">=</span> <span class="m">30000</span><span class="p">,</span>
                        <span class="n">AvailableStock</span> <span class="p">=</span> <span class="m">100</span><span class="p">,</span>
                        <span class="n">RestockThreshold</span> <span class="p">=</span> <span class="m">5</span>
                    <span class="p">},</span>

                    <span class="k">new</span> <span class="n">CatalogItem</span>
                    <span class="p">{</span>
                        <span class="n">Name</span> <span class="p">=</span> <span class="s">"Meril Beauty Soap"</span><span class="p">,</span>
                        <span class="n">Description</span> <span class="p">=</span> <span class="s">"Beauty Soap"</span><span class="p">,</span>
                        <span class="n">Price</span> <span class="p">=</span> <span class="m">40</span><span class="p">,</span>
                        <span class="n">AvailableStock</span> <span class="p">=</span> <span class="m">500</span><span class="p">,</span>
                        <span class="n">RestockThreshold</span> <span class="p">=</span> <span class="m">20</span>
                    <span class="p">}</span>
                <span class="p">};</span>

                <span class="n">catalogContext</span><span class="p">.</span><span class="n">CatalogItems</span><span class="p">.</span><span class="nf">AddRange</span><span class="p">(</span><span class="n">catalogs</span><span class="p">);</span>
                <span class="n">catalogContext</span><span class="p">.</span><span class="nf">SaveChanges</span><span class="p">();</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Modify Program class as follows.</li>
</ul>

<p><strong>Program.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Catalog.API.Db</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="n">WebApplication</span><span class="p">.</span><span class="nf">CreateBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>

<span class="c1">// Add services to the container.</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">();</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddDbContext</span><span class="p">&lt;</span><span class="n">CatalogContext</span><span class="p">&gt;(</span><span class="n">opt</span> <span class="p">=&gt;</span> <span class="n">opt</span><span class="p">.</span><span class="nf">UseInMemoryDatabase</span><span class="p">(</span><span class="s">"CatalogDB"</span><span class="p">));</span>

<span class="c1">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddEndpointsApiExplorer</span><span class="p">();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddSwaggerGen</span><span class="p">();</span>

<span class="kt">var</span> <span class="n">app</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

<span class="c1">// For Seed data generation</span>
<span class="k">using</span><span class="p">(</span><span class="kt">var</span> <span class="n">scope</span> <span class="p">=</span> <span class="n">app</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">CreateScope</span><span class="p">())</span>
<span class="p">{</span>
    <span class="kt">var</span> <span class="n">services</span> <span class="p">=</span> <span class="n">scope</span><span class="p">.</span><span class="n">ServiceProvider</span><span class="p">;</span>
    <span class="kt">var</span> <span class="n">db</span> <span class="p">=</span> <span class="n">services</span><span class="p">.</span><span class="n">GetRequiredService</span><span class="p">&lt;</span><span class="n">CatalogContext</span><span class="p">&gt;();</span>
    <span class="n">SeedDataProvider</span><span class="p">.</span><span class="nf">Initialize</span><span class="p">(</span><span class="n">db</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// Configure the HTTP request pipeline.</span>
<span class="k">if</span> <span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">Environment</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
<span class="p">{</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwagger</span><span class="p">();</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwaggerUI</span><span class="p">();</span>
<span class="p">}</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseHttpsRedirection</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseAuthorization</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">MapControllers</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>

</code></pre></div></div>

<p>Here, the following line is used to configure in memory database</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddDbContext</span><span class="p">&lt;</span><span class="n">CatalogContext</span><span class="p">&gt;(</span><span class="n">opt</span> <span class="p">=&gt;</span> <span class="n">opt</span><span class="p">.</span><span class="nf">UseInMemoryDatabase</span><span class="p">(</span><span class="s">"CatalogDB"</span><span class="p">));</span>
</code></pre></div></div>

<p>The following code snippet is used to initialize seed data</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span><span class="p">(</span><span class="kt">var</span> <span class="n">scope</span> <span class="p">=</span> <span class="n">app</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">CreateScope</span><span class="p">())</span>
<span class="p">{</span>
    <span class="kt">var</span> <span class="n">services</span> <span class="p">=</span> <span class="n">scope</span><span class="p">.</span><span class="n">ServiceProvider</span><span class="p">;</span>
    <span class="kt">var</span> <span class="n">db</span> <span class="p">=</span> <span class="n">services</span><span class="p">.</span><span class="n">GetRequiredService</span><span class="p">&lt;</span><span class="n">CatalogContext</span><span class="p">&gt;();</span>
    <span class="n">SeedDataProvider</span><span class="p">.</span><span class="nf">Initialize</span><span class="p">(</span><span class="n">db</span><span class="p">);</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Add CatalogItemsController class in Controllers folder as follows.</li>
</ul>

<p><strong>CatalogItemsController.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Catalog.API.Db</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Catalog.API.Model</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Catalog.API.Controllers</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
    <span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CatalogItemsController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">CatalogContext</span> <span class="n">_context</span><span class="p">;</span>
        <span class="k">private</span> <span class="k">static</span> <span class="kt">int</span> <span class="n">_count</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">CatalogItemsController</span><span class="p">(</span><span class="n">CatalogContext</span> <span class="n">context</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_context</span> <span class="p">=</span> <span class="n">context</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/CatalogItems</span>
        <span class="p">[</span><span class="n">HttpGet</span><span class="p">]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">CatalogItem</span><span class="p">&gt;&gt;&gt;</span> <span class="nf">GetCatalogItems</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">_count</span><span class="p">++;</span>
            <span class="k">if</span><span class="p">(</span><span class="n">_count</span> <span class="p">&lt;=</span> <span class="m">3</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="c1">// Sleep for 4 seconds</span>
                <span class="n">Thread</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="m">4000</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">CatalogItems</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">CatalogItems</span><span class="p">.</span><span class="nf">ToListAsync</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/CatalogItems/5</span>
        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">CatalogItem</span><span class="p">&gt;&gt;</span> <span class="nf">GetCatalogItem</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">CatalogItems</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="kt">var</span> <span class="n">catalogItem</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">CatalogItems</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">catalogItem</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="n">catalogItem</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// PUT: api/CatalogItems/5</span>
        <span class="c1">// To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754</span>
        <span class="p">[</span><span class="nf">HttpPut</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">PutCatalogItem</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="n">CatalogItem</span> <span class="n">catalogItem</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">id</span> <span class="p">!=</span> <span class="n">catalogItem</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">_context</span><span class="p">.</span><span class="nf">Entry</span><span class="p">(</span><span class="n">catalogItem</span><span class="p">).</span><span class="n">State</span> <span class="p">=</span> <span class="n">EntityState</span><span class="p">.</span><span class="n">Modified</span><span class="p">;</span>

            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">DbUpdateConcurrencyException</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(!</span><span class="nf">CatalogItemExists</span><span class="p">(</span><span class="n">id</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
                <span class="p">}</span>
                <span class="k">else</span>
                <span class="p">{</span>
                    <span class="k">throw</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// POST: api/CatalogItems</span>
        <span class="c1">// To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754</span>
        <span class="p">[</span><span class="n">HttpPost</span><span class="p">]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">CatalogItem</span><span class="p">&gt;&gt;</span> <span class="nf">PostCatalogItem</span><span class="p">(</span><span class="n">CatalogItem</span> <span class="n">catalogItem</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">CatalogItems</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">Problem</span><span class="p">(</span><span class="s">"Entity set 'CatalogContext.CatalogItems'  is null."</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="n">_context</span><span class="p">.</span><span class="n">CatalogItems</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">catalogItem</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>

            <span class="k">return</span> <span class="nf">CreatedAtAction</span><span class="p">(</span><span class="s">"GetCatalogItem"</span><span class="p">,</span> <span class="k">new</span> <span class="p">{</span> <span class="n">id</span> <span class="p">=</span> <span class="n">catalogItem</span><span class="p">.</span><span class="n">Id</span> <span class="p">},</span> <span class="n">catalogItem</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">// DELETE: api/CatalogItems/5</span>
        <span class="p">[</span><span class="nf">HttpDelete</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">DeleteCatalogItem</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">CatalogItems</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="kt">var</span> <span class="n">catalogItem</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">CatalogItems</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">catalogItem</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">_context</span><span class="p">.</span><span class="n">CatalogItems</span><span class="p">.</span><span class="nf">Remove</span><span class="p">(</span><span class="n">catalogItem</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>

            <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="kt">bool</span> <span class="nf">CatalogItemExists</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">CatalogItems</span><span class="p">?.</span><span class="nf">Any</span><span class="p">(</span><span class="n">e</span> <span class="p">=&gt;</span> <span class="n">e</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">id</span><span class="p">)).</span><span class="nf">GetValueOrDefault</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 4: Organize BFF.Web</strong></p>

<p>In this stage, we are going to configure a gateway to communicate with other services using ocelot.</p>

<ul>
  <li>
    <p>Create a folder name - Routes.dev in root directory and add the following files.  ocelot.catalog-api.json, ocelot.global.json, ocelot.SwaggerEndPoints.json in Routes.dev folder.</p>
  </li>
  <li>
    <p>Now modify the json files as follows.</p>
  </li>
</ul>

<p><strong>ocelot.catalog-api.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">
</span><span class="p">{</span><span class="w">
  </span><span class="nl">"Routes"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"DownstreamPathTemplate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/{everything}"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"DownstreamScheme"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"SwaggerKey"</span><span class="p">:</span><span class="w"> </span><span class="s2">"catalog-api"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"DownstreamHostAndPorts"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"Host"</span><span class="p">:</span><span class="w"> </span><span class="s2">"localhost"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Port"</span><span class="p">:</span><span class="w"> </span><span class="s2">"7282"</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"UpstreamPathTemplate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/catalog/{everything}"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"UpstreamHttpMethod"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"GET"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"POST"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"PUT"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"DELETE"</span><span class="w">
      </span><span class="p">],</span><span class="w">

      </span><span class="nl">"QoSOptions"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"ExceptionsAllowedBeforeBreaking"</span><span class="p">:</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w">
        </span><span class="nl">"DurationOfBreak"</span><span class="p">:</span><span class="w"> </span><span class="mi">5000</span><span class="p">,</span><span class="w">
        </span><span class="nl">"TimeoutValue"</span><span class="p">:</span><span class="w"> </span><span class="mi">3000</span><span class="w">
      </span><span class="p">}</span><span class="w">

    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<p>QoSOptions section of the above file basically configure QoS for Catalog service. The above configuration means that if the server does not response for 3 minutes, it will throw timeout exception. If the server throws two exceptions, it will not be accessible for five minutes.</p>

<p><strong>ocelot.global.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">
</span><span class="p">{</span><span class="w">
  </span><span class="nl">"GlobalConfiguration"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"BaseUrl"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https://localhost:7205"</span><span class="w">
    </span><span class="err">//</span><span class="nl">"ServiceDiscoveryProvider"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">

    </span><span class="err">//</span><span class="w">  </span><span class="nl">"Host"</span><span class="p">:</span><span class="w"> </span><span class="s2">"localhost"</span><span class="p">,</span><span class="w">
    </span><span class="err">//</span><span class="w">  </span><span class="nl">"Port"</span><span class="p">:</span><span class="w"> </span><span class="mi">7205</span><span class="w">
    </span><span class="err">//</span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p><strong>ocelot.SwaggerEndPoints.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">
</span><span class="p">{</span><span class="w">
  </span><span class="nl">"SwaggerEndPoints"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"bffweb"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"TransformByOcelotConfig"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Config"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"Name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"BFF.Web"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1.0"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https://localhost:7205/swagger/v1/swagger.json"</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">},</span><span class="w">

    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"catalog-api"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"TransformByOcelotConfig"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Config"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"Name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Catalog.API"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1.0"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https://localhost:7205/catalog/swagger/v1/swagger.json"</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">


</span></code></pre></div></div>

<p>Note: I have added the following code block in CatalogItemController to produce timeout manually.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="p">[</span><span class="n">HttpGet</span><span class="p">]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">CatalogItem</span><span class="p">&gt;&gt;&gt;</span> <span class="nf">GetCatalogItems</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">_count</span><span class="p">++;</span>
            <span class="k">if</span><span class="p">(</span><span class="n">_count</span> <span class="p">&lt;=</span> <span class="m">3</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="c1">// Sleep for 4 seconds</span>
                <span class="n">Thread</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="m">4000</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">CatalogItems</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">CatalogItems</span><span class="p">.</span><span class="nf">ToListAsync</span><span class="p">();</span>
        <span class="p">}</span>

</code></pre></div></div>

<p>Step 5: Run and test the application</p>

<p>Now run both web projects. In the BFF.Web, select Catalog.API-1.0 from swagger definition (“Select a definition on the top right corner”) and execute the api (CatalogItems) as follows.</p>

<p><img src="/assets/images/posts/2022/qos-01.PNG" alt="" /></p>

<p>When we visit the first time (or quickly second time), it tells us that circuit is breaking for 5000 ms. Look at the console of BFF.Web.</p>

<p><img src="/assets/images/posts/2022/qos-02.PNG" alt="" /></p>

<p>Then, the second time (quickly) it tells us that the circuit is open, and we cannot visit the service for 3 seconds as follows.</p>

<p><img src="/assets/images/posts/2022/qos-03.PNG" alt="" /></p>

<p>After 3 seconds, the service is accessible. If you execute now, you will see the output like below.</p>

<p><img src="/assets/images/posts/2022/qos-03-4.PNG" alt="" /></p>

<p><strong><a href="https://github.com/mahedee/code-sample02/tree/main/api-gateway-ocelot-qos">Source code</a></strong></p>]]></content><author><name>Mahedee Hasan</name></author><category term="C#" /><category term="ASP.NET Core" /><category term="Web API" /><category term="Microservices" /><category term="Ocelot" /><category term="Poly" /><category term="csharp" /><category term="aspnetcore" /><category term="webapi" /><category term="microservices" /><category term="ocelot" /><category term="poly" /><summary type="html"><![CDATA[API Gateway is an entry point for backend application. It maintains routing, authentication, logging, service discovery etc. Ocelot is used to design and develop API gateway for .net based application. QoS is generally configured in API gateway which provides different priorities for different applications, users or traffic. In this article, we will configure and discuss Quality of Services (QoS) using ocelot and Polly on ASP.NET Core web API project]]></summary></entry><entry><title type="html">How to create SSH fingerprint for Azure DevOps</title><link href="https://mahedee.net//how-to-create-ssh-fingerprint-for-azure-devops/" rel="alternate" type="text/html" title="How to create SSH fingerprint for Azure DevOps" /><published>2022-05-10T00:00:00+00:00</published><updated>2022-05-10T00:00:00+00:00</updated><id>https://mahedee.net//how-to-create-ssh-fingerprint-for-azure-devops</id><content type="html" xml:base="https://mahedee.net//how-to-create-ssh-fingerprint-for-azure-devops/"><![CDATA[<p>It seems easy to create SSH fingerprint and connect Azure DevOps or Github. But, sometimes, we face some problem which is hectic. In this step by step article, I am going to show you how to create SSH fingerprint for Azure DevOps and clone a repository.</p>

<p><strong>Step 1:Create SSH Keys</strong></p>

<ul>
  <li>Create a folder if not exists - name .ssh in the following directory.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>C:\Users\mahedee
</code></pre></div></div>

<ul>
  <li>
    <p>Go to run and type: <code class="language-plaintext highlighter-rouge">%userprofile%\.ssh</code></p>
  </li>
  <li>
    <p>Run the powershell command in the following directory.</p>
  </li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>C:\Users\mahedee\.ssh
</code></pre></div></div>

<ul>
  <li>Run the follwing command on powershell.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">ssh-keygen</span> <span class="nf">-C</span> <span class="nf">"test-git-dev-azure.com"</span>
</code></pre></div></div>

<p><img src="/assets/images/posts/2022/ssh-01.PNG" alt="" /></p>

<p><strong>Step 2: Add the public key to Azure DevOps</strong></p>

<ul>
  <li>Now go to the Azure DevOps web portal. Go to the avatar on the upper right corner. Select SSH public keys.</li>
</ul>

<p><img src="/assets/images/posts/2022/ssh-02.PNG" alt="" /></p>

<ul>
  <li>Select + New Key button on the upper right corner.</li>
</ul>

<p><img src="/assets/images/posts/2022/ssh-03.PNG" alt="" /></p>

<ul>
  <li>Copy the key from <code class="language-plaintext highlighter-rouge">C:\Users\mahedee\.ssh\id_rsa.pub</code> . The content of the id_rsa.pub file that you have already generated and pest the content on Public Key Data text box as belows.</li>
</ul>

<p><img src="/assets/images/posts/2022/ssh-04.PNG" alt="" /></p>

<ul>
  <li>Now click add button.</li>
</ul>

<p><strong>Step 3: Clone your repository</strong></p>

<ul>
  <li>Now run powershell command and clone a repository using SSH as bellows.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">git</span> <span class="nf">clone</span> <span class="nf">git@ssh.dev.azure.com:v3</span><span class="nv">/yourorganization/yourrepository</span>
</code></pre></div></div>

<p><strong>Troubleshooting</strong></p>

<p><strong>Problem</strong></p>

<p>After configuring SSH, I got the following error while tried to clone repository.</p>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">git</span> <span class="nf">clone</span> <span class="nf">git@ssh.dev.azure.com:v3</span><span class="nv">/yourorganization/yourrepository</span>
</code></pre></div></div>

<p>I was getting the following message:</p>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">git@ssh.dev.azure.com's</span> <span class="nf">password:</span>
</code></pre></div></div>

<p>I have tried all using all sorts of password but failed.</p>

<p><strong>Solution</strong></p>

<ol>
  <li>OpenSSH Authentication Agent was disabled on my PC. I started the service.</li>
</ol>

<p><img src="/assets/images/posts/2022/ssh-05.PNG" alt="" /></p>

<ol>
  <li>SSH.exe was not added on environment varaible. I have added it on environment variable.</li>
</ol>

<p><img src="/assets/images/posts/2022/ssh-06.PNG" alt="" /></p>

<p>Then I tried to clone the repository and It was working fine.</p>]]></content><author><name>Mahedee Hasan</name></author><category term="Command" /><category term="Source Control" /><category term="command" /><category term="sourcecontrol" /><summary type="html"><![CDATA[It seems easy to create SSH fingerprint and connect Azure DevOps or Github. But, sometimes, we face some problem which is hectic. In this step by step article, I am going to show you how to create SSH fingerprint for Azure DevOps and clone a repository.]]></summary></entry><entry><title type="html">Tips and tricks for docker</title><link href="https://mahedee.net//docker-tips-and-tricks/" rel="alternate" type="text/html" title="Tips and tricks for docker" /><published>2022-05-06T00:00:00+00:00</published><updated>2022-05-06T00:00:00+00:00</updated><id>https://mahedee.net//docker-tips-and-tricks</id><content type="html" xml:base="https://mahedee.net//docker-tips-and-tricks/"><![CDATA[<h2 id="most-used-docker-commands-for-everyday">Most used docker commands for everyday</h2>

<ul>
  <li><strong>Docker help</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">$</span> <span class="nf">docker</span> <span class="nf">-h</span>
</code></pre></div></div>

<ul>
  <li><strong>To check docker version</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">$</span> <span class="nf">docker</span> <span class="nf">--version</span>
</code></pre></div></div>

<ul>
  <li><strong>Login to docker</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">$</span> <span class="nf">docker</span> <span class="nf">login</span> 
</code></pre></div></div>

<ul>
  <li><strong>To see list of images</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">$</span> <span class="nf">docker</span> <span class="nf">image</span> <span class="nf">ls</span>
</code></pre></div></div>

<ul>
  <li><strong>List of Containers</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">$</span> <span class="nf">docker</span> <span class="nf">container</span> <span class="nf">ls</span>
</code></pre></div></div>

<ul>
  <li><strong>See list of running containers</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">docker</span> <span class="nf">ps</span>
</code></pre></div></div>

<ul>
  <li><strong>Restart a container</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">docker</span> <span class="nf">restart</span> <span class="p">&lt;</span><span class="nf">container</span> <span class="nf">name</span><span class="p">&gt;</span>
</code></pre></div></div>

<ul>
  <li><strong>To stop docker container</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">$</span> <span class="nf">docker</span> <span class="nf">stop</span> <span class="p">&lt;</span><span class="nf">container</span> <span class="nf">id</span><span class="p">&gt;</span>
</code></pre></div></div>

<ul>
  <li><strong>Remove all docker images</strong>
    <div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">docker</span> <span class="nf">rmi</span> <span class="nf">$</span><span class="s">(docker images -q)</span>
</code></pre></div>    </div>
  </li>
  <li><strong>Stop all docker containers</strong></li>
</ul>

<pre><code class="language-cmd">docker stop $(docker ps -a -q)
</code></pre>
<p><strong>Remove all docker containers</strong></p>
<pre><code class="language-cmd">docker rm $(docker ps -a -q)
</code></pre>

<p><strong>Deleting no longer needed containers (stopped)</strong></p>
<pre><code class="language-cmd">docker container prune
</code></pre>

<p><strong>Deleting no longer needed images</strong></p>
<pre><code class="language-cmd">docker image prune
</code></pre>

<p><strong>Delete all volumes, which are not used by any existing container</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker volume prune
</code></pre></div></div>
<p><strong>Same for unused networks</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker network prune
</code></pre></div></div>

<ul>
  <li><strong>To run docker composer</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">$</span> <span class="nf">docker-compose</span> <span class="nf">up</span>
</code></pre></div></div>

<ul>
  <li><strong>Build a docker image</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">Syntax:</span>
<span class="nf">$</span> <span class="nf">docker</span> <span class="nf">build</span> <span class="nf">-t</span> <span class="p">&lt;</span><span class="nf">any</span> <span class="nf">tag</span> <span class="nf">name</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nf">directory</span> <span class="nf">of</span> <span class="nf">the</span> <span class="nf">docker</span> <span class="nf">file</span><span class="p">&gt;</span>
<span class="nf">Example:</span>
<span class="nf">$</span> <span class="nf">docker</span> <span class="nf">build</span> <span class="nf">-t</span> <span class="nf">aspnetcore</span><span class="nv">/generator</span> <span class="nf">.</span>   
<span class="nf">Explanation:</span> 
<span class="nf">Here</span> <span class="nf">aspnetcore</span><span class="nv">/generator</span> <span class="nf">is</span> <span class="nf">tag</span> <span class="nf">name</span> <span class="kr">and</span> <span class="nf">'.'</span> <span class="nf">means</span> <span class="nf">current</span> <span class="nf">directory</span>
</code></pre></div></div>

<ul>
  <li><strong>To run a docker image</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">docker</span> <span class="nb">run</span> <span class="nf">--rm</span> <span class="nf">-it</span> <span class="nf">-p</span> <span class="nf">8000:80</span> <span class="nf">mcr.microsoft.com</span><span class="nv">/dotnet/core/samples:aspnetapp</span>
</code></pre></div></div>

<p>The sample asp.net core application will run on http://localhost:8000. Here, 8000 is host machine port and 80 is container port.</p>

<ul>
  <li><strong>SSH into container</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">docker</span> <span class="nb">exec</span> <span class="nf">-it</span> <span class="p">&lt;</span><span class="nf">container-id</span><span class="p">&gt;</span> <span class="nf">sh</span>
<span class="p">&gt;&gt;</span><span class="nf">ls</span> <span class="s">(Type ls to see all files and directory)</span>
<span class="p">&gt;&gt;</span><span class="nb">exit</span> <span class="s">(type exit to return from the container)</span>
</code></pre></div></div>

<ul>
  <li><strong>View information about your container using command</strong>
    <div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">PS</span> <span class="nf">C:\Users\mahedee</span><span class="p">&gt;</span> <span class="nf">docker</span> <span class="nb">exec</span> <span class="nf">-it</span> <span class="nf">b73cb9467f5a</span> <span class="nf">sh</span>
<span class="nf">#</span> <span class="nf">cd</span> <span class="nf">..</span>
<span class="nf">#</span> <span class="nf">ls</span>
<span class="nf">app</span>  <span class="nf">bin</span>  <span class="nf">boot</span>  <span class="nf">dev</span>  <span class="nf">etc</span>  <span class="nf">home</span>  <span class="nf">lib</span>  <span class="nf">lib64</span>  <span class="nf">media</span>  <span class="nf">mnt</span>  <span class="nf">opt</span>  <span class="nf">proc</span>  <span class="nf">remote_debugger</span>  <span class="nf">root</span>  <span class="nb">run</span>  <span class="nf">sbin</span>  <span class="nf">src</span>  <span class="nf">srv</span>  <span class="nf">sys</span>  <span class="nf">tmp</span>  <span class="nf">usr</span>  <span class="nf">var</span>
<span class="nf">#</span> <span class="nf">cd</span> <span class="nf">app</span>
<span class="nf">#</span> <span class="nf">ls</span>
<span class="nf">Controllers</span>  <span class="nf">Dockerfile</span>  <span class="nf">HRM.API.csproj</span>  <span class="nf">HRM.API.csproj.user</span>  <span class="nf">Program.cs</span>  <span class="nf">Properties</span>  <span class="nf">WeatherForecast.cs</span>  <span class="nf">appsettings.Development.json</span>  <span class="nf">appsettings.json</span>  <span class="nf">bin</span>  <span class="nf">obj</span>
<span class="nf">#</span> <span class="nf">cd</span> <span class="nf">..</span>
<span class="nf">#</span> <span class="nf">ls</span>
<span class="nf">app</span>  <span class="nf">bin</span>  <span class="nf">boot</span>  <span class="nf">dev</span>  <span class="nf">etc</span>  <span class="nf">home</span>  <span class="nf">lib</span>  <span class="nf">lib64</span>  <span class="nf">media</span>  <span class="nf">mnt</span>  <span class="nf">opt</span>  <span class="nf">proc</span>  <span class="nf">remote_debugger</span>  <span class="nf">root</span>  <span class="nb">run</span>  <span class="nf">sbin</span>  <span class="nf">src</span>  <span class="nf">srv</span>  <span class="nf">sys</span>  <span class="nf">tmp</span>  <span class="nf">usr</span>  <span class="nf">var</span>
<span class="nf">#</span> <span class="nf">cd</span> <span class="nf">src</span>
<span class="nf">#</span> <span class="nf">ls</span>
<span class="nf">HRM.API</span>  <span class="nf">HRM.API.sln</span>  <span class="nf">bin</span>  <span class="nf">docker-compose.dcproj</span>  <span class="nf">docker-compose.override.yml</span>  <span class="nf">docker-compose.yml</span>  <span class="nf">obj</span>
<span class="nf">#</span> <span class="nf">cd</span> <span class="nf">bin</span>
<span class="nf">#</span> <span class="nf">ls</span>
<span class="nf">Debug</span>
<span class="nf">#</span> <span class="nf">cd</span> <span class="nf">debug</span>
<span class="nf">#</span> <span class="nf">ls</span>
<span class="nf">HRM.API.deps.json</span>  <span class="nf">HRM.API.exe</span>  <span class="nf">HRM.API.runtimeconfig.json</span>  <span class="nf">Swashbuckle.AspNetCore.Swagger.dll</span>     <span class="nf">Swashbuckle.AspNetCore.SwaggerUI.dll</span>  <span class="nf">appsettings.json</span>
<span class="nf">HRM.API.dll</span>        <span class="nf">HRM.API.pdb</span>  <span class="nf">Microsoft.OpenApi.dll</span>       <span class="nf">Swashbuckle.AspNetCore.SwaggerGen.dll</span>  <span class="nf">appsettings.Development.json</span>
<span class="nf">#</span>
</code></pre></div>    </div>
  </li>
  <li><strong>Run a command in a running container</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">docker</span> <span class="nb">exec</span> <span class="p">[</span><span class="nf">OPTIONS</span><span class="p">]</span> <span class="nf">CONTAINER</span> <span class="nf">COMMAND</span> <span class="p">[</span><span class="nf">ARG...</span><span class="p">]</span>

<span class="nf">Example</span>
<span class="nf">$</span> <span class="nf">docker</span> <span class="nb">exec</span> <span class="nf">-ti</span> <span class="mf">34717</span> <span class="nf">sh</span> <span class="nf">-c</span> <span class="nf">"echo</span> <span class="nf">a</span> <span class="nf">&amp;&amp;</span> <span class="nf">echo</span> <span class="nf">b"</span>
<span class="kr">or</span>
<span class="nf">$</span> <span class="nf">docker</span> <span class="nb">exec</span> <span class="nf">-ti</span> <span class="nf">my_container</span> <span class="nf">sh</span> <span class="nf">-c</span> <span class="nf">"echo</span> <span class="nf">a</span> <span class="nf">&amp;&amp;</span> <span class="nf">echo</span> <span class="nf">b"</span>
<span class="kr">or</span> 
<span class="nf">$</span> <span class="nf">docker</span> <span class="nb">exec</span> <span class="nf">-ti</span> <span class="nf">my_container</span> <span class="nf">sh</span> <span class="nf">-c</span> <span class="nf">"dir"</span>
</code></pre></div></div>

<ul>
  <li><strong>To run bash in a container</strong></li>
</ul>

<p>Syntax:</p>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">$</span> <span class="nf">docker</span> <span class="nb">exec</span> <span class="nf">-it</span> <span class="p">&lt;</span><span class="nf">container</span> <span class="nf">id</span><span class="p">&gt;</span> <span class="nf">bas</span>
<span class="nf">Example:</span>
<span class="nf">$</span> <span class="nf">docker</span> <span class="nb">exec</span> <span class="nf">-it</span> <span class="nf">2f7</span> <span class="nf">bash</span>
</code></pre></div></div>

<p><strong>View information about your container user Visual Studio</strong></p>

<ul>
  <li>Use Ctrl+Q to activate Visual Studio Search Box, and type containers.</li>
  <li>Or, Go to View &gt; Other Windows &gt; Containers.</li>
</ul>

<p><img src="/assets/images/posts/2022/vs-container.PNG" alt="" /></p>

<p>For more information see <a href="https://docs.microsoft.com/en-us/visualstudio/containers/view-and-diagnose-containers?view=vs-2022">Use the Containers window</a></p>

<ul>
  <li><strong>Mounting a folder name ‘api’ into the container</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">$</span> <span class="nf">docker</span> <span class="nb">run</span> <span class="nf">--rm</span> <span class="nf">-it</span> <span class="nf">-v</span> <span class="nf">$</span><span class="p">{</span><span class="nf">PWD</span><span class="p">}</span><span class="nf">:C:\api</span> <span class="nf">mcr.microsoft.com</span><span class="nv">/dotnet/core/runtime:3.1</span>
</code></pre></div></div>
<p>Here ${PWD} means current directory of host machine map to the directory C:\api into the container</p>

<ul>
  <li><strong>To inspect network and other information of a container</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">$</span> <span class="nf">docker</span> <span class="nf">inspect</span> <span class="p">&lt;</span><span class="nf">container</span> <span class="nf">id</span><span class="p">&gt;</span>
</code></pre></div></div>

<ul>
  <li><strong>Run a docker image</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">Syntax:</span>
<span class="nf">$</span> <span class="nf">docker</span> <span class="nb">run</span> <span class="nf">--rm</span> <span class="nf">-it</span> <span class="nf">-p</span> <span class="p">&lt;</span><span class="nf">host</span> <span class="nf">port</span><span class="p">&gt;</span><span class="nf">:</span><span class="p">&lt;</span><span class="nf">image</span> <span class="nf">port</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nf">any</span> <span class="nf">tag</span> <span class="nf">name</span><span class="p">&gt;</span>
<span class="nf">Example:</span>
<span class="nf">$</span> <span class="nf">docker</span> <span class="nb">run</span> <span class="nf">--rm</span> <span class="nf">-it</span> <span class="nf">-p</span> <span class="nf">8777:80</span> <span class="nf">test2</span>  
<span class="nf">Explanation:</span> 
<span class="nf">Here</span> <span class="nf">test2</span> <span class="nf">is</span> <span class="nf">tag</span> <span class="nf">name</span> <span class="nf">of</span> <span class="nf">the</span> <span class="nf">image</span> <span class="nf">which</span> <span class="nf">already</span> <span class="nf">running</span>
</code></pre></div></div>

<ul>
  <li><strong>Login to docker and push an image</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">$</span> <span class="nf">docker</span> <span class="nf">login</span> 
<span class="nf">$</span> <span class="nf">docker</span> <span class="nf">push</span> <span class="nf">mahedee</span><span class="nv">/simpleapi</span>  
<span class="nf">Explanation:</span> 
<span class="nf">Here</span> <span class="nf">mahedee</span><span class="nv">/simpleapi</span> <span class="nf">is</span> <span class="nf">the</span> <span class="nf">tag</span> <span class="nf">name</span> <span class="nf">of</span> <span class="nf">the</span> <span class="nf">image</span>
</code></pre></div></div>

<ul>
  <li><strong>Setting the API Port with an Environment Variable inside a container</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">$</span> <span class="nf">export</span> <span class="nf">ASPNETCORE_URLS=http:</span><span class="err">/</span><span class="nv">/+:80</span>
</code></pre></div></div>

<ul>
  <li><strong>To see docker event in json format</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">$</span> <span class="nf">docker</span> <span class="nf">events</span> <span class="nf">--format</span> <span class="nf">''</span>

<span class="nf">Tips:</span>
<span class="nf">Run</span> <span class="nf">this</span> <span class="nf">command</span> <span class="nf">in</span> <span class="nf">another</span> <span class="nf">windows</span>
</code></pre></div></div>

<ul>
  <li><strong>To detach docker compose file</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">$</span> <span class="nf">docker-compose</span> <span class="nf">up</span> <span class="nf">-d</span>
</code></pre></div></div>
<ul>
  <li><strong>To see the log while running docker compose file</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">$</span> <span class="nf">docker-compose</span> <span class="nf">logs</span> <span class="nf">-f</span>
</code></pre></div></div>

<ul>
  <li><strong>Stop and remove containers, networks, images, and volumes</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">$</span> <span class="nf">docker-compose</span> <span class="nf">down</span>
</code></pre></div></div>

<ul>
  <li><strong>Remove one or more images</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">$</span> <span class="nf">docker</span> <span class="nf">image</span> <span class="nf">rm</span> <span class="p">&lt;</span><span class="nf">repository</span><span class="p">&gt;</span><span class="nf">:</span><span class="p">&lt;</span><span class="nf">tag</span><span class="p">&gt;</span>
<span class="nf">Example:</span>
<span class="nf">$</span> <span class="nf">docker</span> <span class="nf">image</span> <span class="nf">rm</span> <span class="nf">mahedee</span><span class="nv">/webapi:build</span>
</code></pre></div></div>

<!-- References
https://docs.microsoft.com/en-us/visualstudio/containers/view-and-diagnose-containers?view=vs-2022 

https://docs.microsoft.com/en-us/dotnet/core/docker/build-container?tabs=windows


-->

<p>__</p>]]></content><author><name>Mahedee Hasan</name></author><category term="Docker" /><category term="Commands" /><category term="commands" /><category term="docker" /><summary type="html"><![CDATA[Some tips and tricks for docker may improve your work's quality. Here, I have tried to include some commands, tricks and tips which we use everyday]]></summary></entry><entry><title type="html">How to connect SQL Server from docker container using SSMS</title><link href="https://mahedee.net//how-to-connet-sql-server-from-docker-using-ssms/" rel="alternate" type="text/html" title="How to connect SQL Server from docker container using SSMS" /><published>2022-04-10T00:00:00+00:00</published><updated>2022-04-10T00:00:00+00:00</updated><id>https://mahedee.net//how-to-connet-sql-server-from-docker-using-ssms</id><content type="html" xml:base="https://mahedee.net//how-to-connet-sql-server-from-docker-using-ssms/"><![CDATA[<p>Sometimes we need to access database which is running in container. It’s simple but sometimes we cannot remember. Here, I will show you how to connect SQL Server from docker container using SQL Server Management Studio.</p>

<p><strong>Sample docker-compose.yml</strong></p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="na">sqldbsaga</span><span class="pi">:</span>
   <span class="na">image</span><span class="pi">:</span> <span class="s">mcr.microsoft.com/mssql/server:2019-latest</span> 
</code></pre></div></div>

<p><strong>docker-compose.override.yml</strong></p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="na">sqldbsaga</span><span class="pi">:</span>
   <span class="na">environment</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">SA_PASSWORD=MyPass@word</span>
    <span class="pi">-</span> <span class="s">ACCEPT_EULA=Y</span>
   <span class="na">ports</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s2">"</span><span class="s">5533:1433"</span>
   <span class="na">volumes</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">kyc-saga-sqldb:/var/opt/mssql</span>
</code></pre></div></div>
<p><strong>Now connect using SSMS</strong></p>
<ul>
  <li>Run docker compose file</li>
  <li>Run SQL server management studio</li>
  <li>Server name should be - localhos, port name</li>
  <li>Password would be MyPass@word as below image</li>
</ul>

<p><img src="/assets/images/posts/2022/docker-ssms.PNG" alt="" /></p>

<p>Then, click Connect.</p>]]></content><author><name>Mahedee Hasan</name></author><category term="Docker" /><category term="SQL Server" /><category term="Docker" /><category term="sqlserver" /><summary type="html"><![CDATA[Sometimes we need to access database which is running in container. It's simple but sometimes we cannot remember. Here, I will show you how to connect SQL Server from docker container using SQL Server Management Studio]]></summary></entry><entry><title type="html">Dot net command at a glance</title><link href="https://mahedee.net//dotnet-command-at-a-glance/" rel="alternate" type="text/html" title="Dot net command at a glance" /><published>2022-04-05T00:00:00+00:00</published><updated>2022-04-05T00:00:00+00:00</updated><id>https://mahedee.net//dotnet-command-at-a-glance</id><content type="html" xml:base="https://mahedee.net//dotnet-command-at-a-glance/"><![CDATA[<ul>
  <li><strong>Verify the dotnet version</strong></li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dotnet --version
</code></pre></div></div>

<ul>
  <li><strong>You can see all the SDKs and runtimes installed by entering</strong></li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dotnet --info
</code></pre></div></div>

<ul>
  <li><strong>To see a list of project templates currently available</strong></li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dotnet new --list
</code></pre></div></div>

<ul>
  <li><strong>Create a console application hame helloworld</strong></li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mkdir helloworld
cd helloworld
dotnet new console
</code></pre></div></div>
<p>or</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dotnet new console --name myhelloworld
</code></pre></div></div>

<ul>
  <li><strong>Create a web application hame myhelloweb</strong></li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mkdir helloweb
cd helloweb
dotnet new mvc --name myhelloweb
</code></pre></div></div>

<ul>
  <li><strong>To restore dot net dependencies</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">dotnet</span> <span class="nb">restore</span>
</code></pre></div></div>

<ul>
  <li><strong>To build dot net application</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">dotnet</span> <span class="nf">build</span>
</code></pre></div></div>

<ul>
  <li><strong>Run the application, go to the project directory</strong></li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dotnet run
</code></pre></div></div>

<ul>
  <li><strong>To publish the application, go to the project directory</strong></li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dotnet publish
</code></pre></div></div>

<ul>
  <li><strong>To install dotnet package</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">Syntax:</span>
<span class="nf">$</span> <span class="nf">dotnet</span> <span class="nb">add</span> <span class="nf">package</span> <span class="p">&lt;</span><span class="nf">PackageName</span><span class="p">&gt;</span> 
<span class="nf">Example:</span>
<span class="nf">$</span> <span class="nf">dotnet</span> <span class="nb">add</span> <span class="nf">package</span> <span class="nf">MailKit</span> 
</code></pre></div></div>

<ul>
  <li><strong>Create a new webapi project</strong></li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dotnet new webapi --name mywebapi
dotnet run
</code></pre></div></div>

<ul>
  <li><strong>Create dotnet Razor Page Project</strong></li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dotnet new razor
</code></pre></div></div>

<ul>
  <li><strong>Create Razor Page. Go into the Pages folder and create anew folder name Employees and enter the following command</strong></li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dotnet new page -n Index
</code></pre></div></div>]]></content><author><name>Mahedee Hasan</name></author><category term="Commands" /><category term=".NET" /><category term="dotnet" /><category term="commands" /><category term="vscode" /><summary type="html"><![CDATA[Sometime we need to use dotnet command to create, build and run an application. Here, I have shared some common used dotnet commands]]></summary></entry><entry><title type="html">Configure CI/CD pipeline with Jenkins and Github using an asp.net core application</title><link href="https://mahedee.net//configure-ci-cd-pipeline-with-jenkins-github-and-asp.net-core/" rel="alternate" type="text/html" title="Configure CI/CD pipeline with Jenkins and Github using an asp.net core application" /><published>2022-03-25T00:00:00+00:00</published><updated>2022-03-25T00:00:00+00:00</updated><id>https://mahedee.net//configure-ci-cd-pipeline-with-jenkins-github-and-asp.net-core</id><content type="html" xml:base="https://mahedee.net//configure-ci-cd-pipeline-with-jenkins-github-and-asp.net-core/"><![CDATA[<p><strong>Overview</strong></p>

<p>Jenkins is an open source automation server to facilitate CI/CD. It helps to automate software development jobs like building, testing, and deploying. In this article we are going to show you how to configure CI/CD pipeline with Jenkins and Github for an ASP.NET Core Web API application.</p>

<p><strong>Tools and Technology used</strong><br />
The following tools and technologies are used to configure CI/CD</p>

<ul>
  <li>Visual Studio 2022</li>
  <li>Visual C#</li>
  <li>ASP.NET Core Web API</li>
  <li>Jenkins</li>
  <li>Github</li>
  <li>IIS</li>
</ul>

<p>Let’s configure Jenkins for an asp.net core web api applications.</p>

<p><strong>Step 1: Download and install Java</strong></p>

<p>Jenkin is developed by Java. So it needs Java runtime to run. Download and install latest version of Java SDK from <a href="https://www.java.com/en/">here</a></p>

<p><strong>Step 2: Download Jenkins</strong></p>

<ul>
  <li>Download Jenkins from <a href="https://jenkins.io/">here</a></li>
  <li>Click Download -&gt; Download Jenkins 2.332.1 LTS for: -&gt; Windows</li>
</ul>

<p><strong>Step 3: Install Jenkins on Windows</strong></p>

<ul>
  <li>Double click on Jenkins.msi file and Click Next</li>
  <li>Choose Logon Type (I have choosen Run Service as LocalSystem) and clik next.</li>
  <li>Type a port number or keep default 8080 (I have choosen 8080). Click Test port and Next.</li>
  <li>Once the installation is done. Navigate to the URL http://localhost:8080/ . You will get an screen mentioned Unlock Jenkins.</li>
  <li>Go to the file mentioned in the screen and copy and pest the password on Andminstrator Password text box and click continue.</li>
  <li>Now you will get the following screen and click on Install suggested plugins.</li>
</ul>

<p><img src="/assets/images/posts/2022/jenkins-1.PNG" alt="" /></p>

<ul>
  <li>Wait untill all plugins are installed. If any plugins installation is failed, try again. Once installation is done, you will see the following screen.</li>
</ul>

<p><img src="/assets/images/posts/2022/jenkins-2.PNG" alt="" /></p>

<ul>
  <li>Fill up the form, type user name and passwrod, and click Save &amp; Continue.</li>
  <li>You will get the another screen, clik Save &amp; Finish.</li>
  <li>Now our jenkins is ready. Click Start using Jenkins.</li>
</ul>

<p><strong>Step 4: To avoid a login each time do the following</strong></p>

<ul>
  <li>Navigate Manage Jenkins -&gt; Configure Global Security</li>
  <li>Mark “Allow anonymous read access” as below</li>
</ul>

<p><img src="/assets/images/posts/2022/global-security.PNG" alt="" /></p>

<p><strong>Step 5: Install some custom plugins</strong></p>

<ul>
  <li>Navigate to “Manage Jenkins” -&gt; “Manage Plugins”</li>
  <li>Click “Available” tab</li>
  <li>Install MSBuild, MSTest, MSTestRunner, PowerShell, VSTestRunner and Git plugin if those are not already installed.</li>
  <li>You can use search field to find out the plugins.</li>
  <li>Now click Install without restart.</li>
</ul>

<p><strong>Step 6: Create an asp.net core web api project</strong></p>

<p><strong>Step 6.1: Create an Web api project</strong></p>

<ul>
  <li>Create a ASP.NET Core Web API Project Name HRM.API. Keep Solution name as HRM.</li>
</ul>

<p><strong>Step 6.2: Install the nuget packages</strong></p>

<ul>
  <li>Install the following nuget packages on HRM.API project.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore</span> <span class="nf">6.0.3</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore.InMemory</span> <span class="nf">6.0.3</span>
</code></pre></div></div>

<p><strong>Step 6.3: Create model class</strong></p>

<ul>
  <li>Create a model class name - Employee in Models folder.</li>
</ul>

<p><strong>Employee.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">HRM.API.Models</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Employee</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Designation</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">FathersName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">MothersName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="n">DateTime</span> <span class="n">DateOfBirth</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 6.4: Create Context and Seed data generator class in Db folder</strong></p>

<p><strong>HRMContext.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">HRM.API.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">HRM.API.Db</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">HRMContext</span> <span class="p">:</span> <span class="n">DbContext</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">HRMContext</span><span class="p">(</span><span class="n">DbContextOptions</span><span class="p">&lt;</span><span class="n">HRMContext</span><span class="p">&gt;</span> <span class="n">options</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
        <span class="p">{</span>

        <span class="p">}</span>
        <span class="k">public</span> <span class="n">DbSet</span><span class="p">&lt;</span><span class="n">Employee</span><span class="p">&gt;</span> <span class="n">Employees</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>SeedDataGenerator.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">HRM.API.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">HRM.API.Db</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">SeedDataGenerator</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Initialize</span><span class="p">(</span><span class="n">IServiceProvider</span> <span class="n">serviceProvider</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">context</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">HRMContext</span><span class="p">(</span>
                <span class="n">serviceProvider</span><span class="p">.</span><span class="n">GetRequiredService</span><span class="p">&lt;</span><span class="n">DbContextOptions</span><span class="p">&lt;</span><span class="n">HRMContext</span><span class="p">&gt;&gt;()))</span>
            <span class="p">{</span>
                <span class="c1">// Check any employee exists </span>
                <span class="k">if</span> <span class="p">(</span><span class="n">context</span><span class="p">.</span><span class="n">Employees</span><span class="p">.</span><span class="nf">Any</span><span class="p">())</span>
                <span class="p">{</span>
                    <span class="k">return</span><span class="p">;</span> <span class="c1">// Data already exists no need to generate</span>
                <span class="p">}</span>

                <span class="n">context</span><span class="p">.</span><span class="n">Employees</span><span class="p">.</span><span class="nf">AddRange</span><span class="p">(</span>
                    <span class="k">new</span> <span class="n">Employee</span>
                    <span class="p">{</span>
                        <span class="n">Name</span> <span class="p">=</span> <span class="s">"Md. Mahedee Hasan"</span><span class="p">,</span>
                        <span class="n">Designation</span> <span class="p">=</span> <span class="s">"Head of Software Development"</span><span class="p">,</span>
                        <span class="n">FathersName</span> <span class="p">=</span> <span class="s">"Yeasin Bhuiyan"</span><span class="p">,</span>
                        <span class="n">MothersName</span> <span class="p">=</span> <span class="s">"Moriom Begum"</span><span class="p">,</span>
                        <span class="n">DateOfBirth</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">DateTime</span><span class="p">(</span><span class="m">1984</span><span class="p">,</span> <span class="m">12</span><span class="p">,</span> <span class="m">19</span><span class="p">,</span> <span class="m">00</span><span class="p">,</span> <span class="m">00</span><span class="p">,</span> <span class="m">00</span><span class="p">)</span>
                    <span class="p">},</span>

                    <span class="k">new</span> <span class="n">Employee</span>
                    <span class="p">{</span>
                        <span class="n">Name</span> <span class="p">=</span> <span class="s">"Khaleda Islam"</span><span class="p">,</span>
                        <span class="n">Designation</span> <span class="p">=</span> <span class="s">"Software Engineer"</span><span class="p">,</span>
                        <span class="n">FathersName</span> <span class="p">=</span> <span class="s">"Shahidul Islam"</span><span class="p">,</span>
                        <span class="n">MothersName</span> <span class="p">=</span> <span class="s">"Momtaz Begum"</span><span class="p">,</span>
                        <span class="n">DateOfBirth</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">DateTime</span><span class="p">(</span><span class="m">1990</span><span class="p">,</span> <span class="m">10</span><span class="p">,</span> <span class="m">29</span><span class="p">,</span> <span class="m">00</span><span class="p">,</span> <span class="m">00</span><span class="p">,</span> <span class="m">00</span><span class="p">)</span>
                    <span class="p">},</span>

                    <span class="k">new</span> <span class="n">Employee</span>
                    <span class="p">{</span>
                        <span class="n">Name</span> <span class="p">=</span> <span class="s">"Tahiya Hasan Arisha"</span><span class="p">,</span>
                        <span class="n">Designation</span> <span class="p">=</span> <span class="s">"Jr. Software Engineer"</span><span class="p">,</span>
                        <span class="n">FathersName</span> <span class="p">=</span> <span class="s">"Md. Mahedee Hasan"</span><span class="p">,</span>
                        <span class="n">MothersName</span> <span class="p">=</span> <span class="s">"Khaleda Islam"</span><span class="p">,</span>
                        <span class="n">DateOfBirth</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">DateTime</span><span class="p">(</span><span class="m">2017</span><span class="p">,</span> <span class="m">09</span><span class="p">,</span> <span class="m">17</span><span class="p">,</span> <span class="m">00</span><span class="p">,</span> <span class="m">00</span><span class="p">,</span> <span class="m">00</span><span class="p">)</span>
                    <span class="p">},</span>

                    <span class="k">new</span> <span class="n">Employee</span>
                    <span class="p">{</span>
                        <span class="n">Name</span> <span class="p">=</span> <span class="s">"Humaira Hasan"</span><span class="p">,</span>
                        <span class="n">Designation</span> <span class="p">=</span> <span class="s">"Jr. Software Engineer"</span><span class="p">,</span>
                        <span class="n">FathersName</span> <span class="p">=</span> <span class="s">"Md. Mahedee Hasan"</span><span class="p">,</span>
                        <span class="n">MothersName</span> <span class="p">=</span> <span class="s">"Khaleda Islam"</span><span class="p">,</span>
                        <span class="n">DateOfBirth</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">DateTime</span><span class="p">(</span><span class="m">2021</span><span class="p">,</span> <span class="m">03</span><span class="p">,</span> <span class="m">17</span><span class="p">,</span> <span class="m">00</span><span class="p">,</span> <span class="m">00</span><span class="p">,</span> <span class="m">00</span><span class="p">)</span>
                    <span class="p">}</span>
                <span class="p">);</span>
                <span class="n">context</span><span class="p">.</span><span class="nf">SaveChanges</span><span class="p">();</span>

            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>
<p><strong>Step 6.5:Create Repository and It’s Interface in Repository folder</strong></p>

<p><strong>IEmployeeRepository.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">HRM.API.Models</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">HRM.API.Repository</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">interface</span> <span class="nc">IEmployeeRepository</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Employee</span><span class="p">&gt;&gt;</span> <span class="nf">SelectAllEmployees</span><span class="p">();</span>
        <span class="k">public</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Employee</span><span class="p">&gt;</span> <span class="nf">SelectEmployee</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">);</span>
        <span class="k">public</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="nf">UpdateEmployee</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="n">Employee</span> <span class="n">employee</span><span class="p">);</span>
        <span class="k">public</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="nf">SaveEmployee</span><span class="p">(</span><span class="n">Employee</span> <span class="n">employee</span><span class="p">);</span>
        <span class="k">public</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="nf">DeleteEmployee</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>EmployeeRepository.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">HRM.API.Db</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">HRM.API.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">HRM.API.Repository</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">EmployeeRepository</span> <span class="p">:</span> <span class="n">IEmployeeRepository</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">HRMContext</span> <span class="n">_context</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">EmployeeRepository</span><span class="p">(</span><span class="n">HRMContext</span> <span class="n">context</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_context</span> <span class="p">=</span> <span class="n">context</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Employee</span><span class="p">&gt;&gt;</span> <span class="nf">SelectAllEmployees</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="kt">var</span> <span class="n">allemployess</span> <span class="p">=</span> <span class="n">_context</span><span class="p">.</span><span class="n">Employees</span><span class="p">.</span><span class="nf">ToListAsync</span><span class="p">();</span>
                <span class="k">return</span> <span class="k">await</span> <span class="n">allemployess</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exp</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="p">(</span><span class="n">exp</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Employee</span><span class="p">&gt;</span> <span class="nf">SelectEmployee</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="kt">var</span> <span class="n">employee</span> <span class="p">=</span> <span class="n">_context</span><span class="p">.</span><span class="n">Employees</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
                <span class="k">return</span> <span class="k">await</span> <span class="n">employee</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exp</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="p">(</span><span class="n">exp</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="nf">UpdateEmployee</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="n">Employee</span> <span class="n">employee</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">id</span> <span class="p">!=</span> <span class="n">employee</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="s">"Cannot be updated!"</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="n">_context</span><span class="p">.</span><span class="nf">Entry</span><span class="p">(</span><span class="n">employee</span><span class="p">).</span><span class="n">State</span> <span class="p">=</span> <span class="n">EntityState</span><span class="p">.</span><span class="n">Modified</span><span class="p">;</span>

            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>
                <span class="k">return</span> <span class="s">"Data updated successfully!"</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">DbUpdateConcurrencyException</span> <span class="n">exp</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(!</span><span class="nf">EmployeeExists</span><span class="p">(</span><span class="n">id</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="k">return</span> <span class="s">"Data not found!"</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="k">else</span>
                <span class="p">{</span>
                    <span class="k">throw</span> <span class="p">(</span><span class="n">exp</span><span class="p">);</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="nf">SaveEmployee</span><span class="p">(</span><span class="n">Employee</span> <span class="n">employee</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_context</span><span class="p">.</span><span class="n">Employees</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">employee</span><span class="p">);</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>
                <span class="k">return</span> <span class="s">"Data saved successfully!"</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exp</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="p">(</span><span class="n">exp</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="nf">DeleteEmployee</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">employee</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Employees</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">employee</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="s">"Data not found!"</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="n">_context</span><span class="p">.</span><span class="n">Employees</span><span class="p">.</span><span class="nf">Remove</span><span class="p">(</span><span class="n">employee</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>

            <span class="k">return</span> <span class="s">"Data deleted successfully!"</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="kt">bool</span> <span class="nf">EmployeeExists</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">_context</span><span class="p">.</span><span class="n">Employees</span><span class="p">.</span><span class="nf">Any</span><span class="p">(</span><span class="n">e</span> <span class="p">=&gt;</span> <span class="n">e</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">id</span><span class="p">);</span>
        <span class="p">}</span>

    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 6.6: Create Employee Service class and it’s interface in Services folder</strong></p>

<p><strong>IEmployeeService</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">HRM.API.Models</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">HRM.API.Services</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">interface</span> <span class="nc">IEmployeeService</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Employee</span><span class="p">&gt;&gt;</span> <span class="nf">GetEmployees</span><span class="p">();</span>
        <span class="k">public</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Employee</span><span class="p">&gt;</span> <span class="nf">GetEmployee</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">);</span>
        <span class="k">public</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="nf">EditEmployee</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="n">Employee</span> <span class="n">employee</span><span class="p">);</span>
        <span class="k">public</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="nf">AddEmployee</span><span class="p">(</span><span class="n">Employee</span> <span class="n">employee</span><span class="p">);</span>
        <span class="k">public</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="nf">RemoveEmployee</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>EmployeeService.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">HRM.API.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">HRM.API.Repository</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">HRM.API.Services</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">EmployeeService</span> <span class="p">:</span> <span class="n">IEmployeeService</span>
    <span class="p">{</span>
        <span class="n">IEmployeeRepository</span> <span class="n">_employeeRepository</span><span class="p">;</span>
        <span class="k">public</span> <span class="nf">EmployeeService</span><span class="p">(</span><span class="n">IEmployeeRepository</span> <span class="n">repository</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_employeeRepository</span> <span class="p">=</span> <span class="n">repository</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Employee</span><span class="p">&gt;&gt;</span> <span class="nf">GetEmployees</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="k">await</span> <span class="n">_employeeRepository</span><span class="p">.</span><span class="nf">SelectAllEmployees</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exp</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="p">(</span><span class="n">exp</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Employee</span><span class="p">&gt;</span> <span class="nf">GetEmployee</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="k">await</span> <span class="n">_employeeRepository</span><span class="p">.</span><span class="nf">SelectEmployee</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exp</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="p">(</span><span class="n">exp</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="nf">EditEmployee</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="n">Employee</span> <span class="n">employee</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="k">await</span> <span class="n">_employeeRepository</span><span class="p">.</span><span class="nf">UpdateEmployee</span><span class="p">(</span><span class="n">id</span><span class="p">,</span> <span class="n">employee</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exp</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="p">(</span><span class="n">exp</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="nf">AddEmployee</span><span class="p">(</span><span class="n">Employee</span> <span class="n">employee</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="k">await</span> <span class="n">_employeeRepository</span><span class="p">.</span><span class="nf">SaveEmployee</span><span class="p">(</span><span class="n">employee</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exp</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="p">(</span><span class="n">exp</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="nf">RemoveEmployee</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="k">await</span> <span class="n">_employeeRepository</span><span class="p">.</span><span class="nf">DeleteEmployee</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exp</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="p">(</span><span class="n">exp</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>

    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 6.7: Modify Program.cs file</strong></p>

<ul>
  <li>Modify Program.cs file for InMemory database and Enable Swagger for both dev and release.</li>
</ul>

<p><strong>Program.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">HRM.API.Db</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">HRM.API.Repository</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">HRM.API.Services</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="n">WebApplication</span><span class="p">.</span><span class="nf">CreateBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>

<span class="c1">// Add services to the container.</span>

<span class="c1">// Configure in memory database</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddDbContext</span><span class="p">&lt;</span><span class="n">HRMContext</span><span class="p">&gt;(</span><span class="n">opt</span> <span class="p">=&gt;</span> <span class="n">opt</span><span class="p">.</span><span class="nf">UseInMemoryDatabase</span><span class="p">(</span><span class="s">"HRMDB"</span><span class="p">));</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">();</span>
<span class="c1">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddEndpointsApiExplorer</span><span class="p">();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddSwaggerGen</span><span class="p">();</span>


<span class="c1">//Register DI</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddScoped</span><span class="p">&lt;</span><span class="n">IEmployeeRepository</span><span class="p">,</span> <span class="n">EmployeeRepository</span><span class="p">&gt;();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddScoped</span><span class="p">&lt;</span><span class="n">IEmployeeService</span><span class="p">,</span> <span class="n">EmployeeService</span><span class="p">&gt;();</span>


<span class="kt">var</span> <span class="n">app</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>


<span class="c1">// 2. Find the service within the scope to use</span>
<span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">scope</span> <span class="p">=</span> <span class="n">app</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">CreateScope</span><span class="p">())</span>
<span class="p">{</span>
    <span class="c1">// 3. Get the instance of HRMContext in our service layer</span>
    <span class="kt">var</span> <span class="n">services</span> <span class="p">=</span> <span class="n">scope</span><span class="p">.</span><span class="n">ServiceProvider</span><span class="p">;</span>
    <span class="kt">var</span> <span class="n">context</span> <span class="p">=</span> <span class="n">services</span><span class="p">.</span><span class="n">GetRequiredService</span><span class="p">&lt;</span><span class="n">HRMContext</span><span class="p">&gt;();</span>

    <span class="c1">// 4. Call the SeedDataGenerator to generate seed data</span>
    <span class="n">SeedDataGenerator</span><span class="p">.</span><span class="nf">Initialize</span><span class="p">(</span><span class="n">services</span><span class="p">);</span>
<span class="p">}</span>



<span class="c1">// Configure the HTTP request pipeline.</span>
<span class="k">if</span> <span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">Environment</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
<span class="p">{</span>
    <span class="c1">//app.UseSwagger();</span>
    <span class="c1">//app.UseSwaggerUI();</span>
<span class="p">}</span>

<span class="c1">// To show both development and deployment</span>
<span class="n">app</span><span class="p">.</span><span class="nf">UseSwagger</span><span class="p">();</span>
<span class="n">app</span><span class="p">.</span><span class="nf">UseSwaggerUI</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseHttpsRedirection</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseAuthorization</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">MapControllers</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>

</code></pre></div></div>

<p><strong>Step 7: Create a publish profile on our application</strong></p>

<ul>
  <li>Click right button on the HRM.API Project -&gt; Click Publish.</li>
  <li>Click ‘+’ sign to create a profile.</li>
  <li>Select Folder and click Next.</li>
  <li>Release location is like - bin\Release\net6.0\publish\</li>
  <li>Click Finish</li>
  <li>From “more action” rename the profile as - JenkinsProfile</li>
  <li>
    <p>You will see two folders are created in Properties -&gt; PublishProfiles folder. Their name is - JenkinsProfile.pubxml and JenkinsProfile.pubxml.user</p>
  </li>
  <li>Modify the pubxml file in Properties/PublishProfiles/JnekinsProfile.pubxml</li>
  <li>Change WebPublishMethod to Package from FileSystem as like below.</li>
</ul>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span>
<span class="c">&lt;!--
https://go.microsoft.com/fwlink/?LinkID=208121. 
--&gt;</span>
<span class="nt">&lt;Project</span> <span class="na">ToolsVersion=</span><span class="s">"4.0"</span> <span class="na">xmlns=</span><span class="s">"http://schemas.microsoft.com/developer/msbuild/2003"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;PropertyGroup&gt;</span>
    <span class="nt">&lt;DeleteExistingFiles&gt;</span>False<span class="nt">&lt;/DeleteExistingFiles&gt;</span>
    <span class="nt">&lt;ExcludeApp_Data&gt;</span>False<span class="nt">&lt;/ExcludeApp_Data&gt;</span>
    <span class="nt">&lt;LaunchSiteAfterPublish&gt;</span>True<span class="nt">&lt;/LaunchSiteAfterPublish&gt;</span>
    <span class="nt">&lt;LastUsedBuildConfiguration&gt;</span>Release<span class="nt">&lt;/LastUsedBuildConfiguration&gt;</span>
    <span class="nt">&lt;LastUsedPlatform&gt;</span>Any CPU<span class="nt">&lt;/LastUsedPlatform&gt;</span>
    <span class="nt">&lt;PublishProvider&gt;</span>FileSystem<span class="nt">&lt;/PublishProvider&gt;</span>
    <span class="nt">&lt;PublishUrl&gt;</span>bin\Release\net6.0\publish\<span class="nt">&lt;/PublishUrl&gt;</span>
    <span class="nt">&lt;WebPublishMethod&gt;</span>Package<span class="nt">&lt;/WebPublishMethod&gt;</span>
  <span class="nt">&lt;/PropertyGroup&gt;</span>
<span class="nt">&lt;/Project&gt;</span>
</code></pre></div></div>

<ul>
  <li>Commit and push this changes on the github.</li>
</ul>

<p><strong>Step 8: Create a test project name HRM.Test on the same solution</strong></p>

<ul>
  <li>Add necessary test cases for HRM.API</li>
</ul>

<p><strong>Step 9: Build and Run Unit Test cases localy</strong></p>

<ul>
  <li>To build the application locally. Go to the directory of the HRM.API applycation where solution file exists.</li>
  <li>Run the following command on terminal to build the application.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">PS</span> <span class="nf">D:\Projects\Github\code-sample02\jenkins-demo\HRM</span><span class="p">&gt;</span> <span class="nf">dotnet</span> <span class="nf">build</span> <span class="nf">.\HRM.sln</span>
</code></pre></div></div>

<ul>
  <li>To Run unit test locally go the directory where test project file exists and run the following command.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">PS</span> <span class="nf">D:\Projects\Github\code-sample02\jenkins-demo\HRM\HRM.Test</span><span class="p">&gt;</span> <span class="nf">dotnet</span> <span class="nf">test</span> <span class="nf">.\HRM.Test.csproj</span>
</code></pre></div></div>

<p><strong>Step 10: Install Microsoft Web Deploy</strong></p>

<ul>
  <li>Download and install latest version of Microsoft web deploy, if it is not already installed. In my case, it is already installed with visual studio 2022.</li>
</ul>

<p><strong>Step 11: Create Credentials Id</strong></p>

<ul>
  <li>Navigate to “Manage Jenkins” -&gt; Manage Credentials -&gt; Click Jenkins -&gt; Click Global Credentials (Unrestricted) -&gt; Click Adding some credentials.</li>
</ul>

<p><img src="/assets/images/posts/2022/jenkins-6.PNG" alt="" /></p>

<ul>
  <li>In this case, I have given my Github user name and password.</li>
  <li>Fill the form and click OK</li>
  <li>Id will be generated automatically.</li>
  <li>Back to Global credentials (unrestricted) and click Update. You will get ID here.</li>
</ul>

<p><strong>Step 12: Create Pipeline using Jenkins</strong></p>

<ul>
  <li>Click “Create a job” on the Jenkins home page.</li>
</ul>

<p><img src="/assets/images/posts/2022/jenkins-3.PNG" alt="" /></p>

<ul>
  <li>Select Pipeline of the next screen, give a name of the pipeline, I am giving the name of pipeline is “HRMPipelines” and Click Ok.</li>
</ul>

<p><img src="/assets/images/posts/2022/jenkins-4.PNG" alt="" /></p>

<ul>
  <li>Now add follwoing script on Pipleline section as mentioned below.</li>
</ul>

<p><img src="/assets/images/posts/2022/jenkins-5.PNG" alt="" /></p>

<pre><code class="language-Groovy">pipeline {  
 agent any  
 environment {  
  dotnet = 'C:\\Program Files\\dotnet\\dotnet.exe'  
 }  
 stages {  
  stage('Checkout') {  
   steps {
       git credentialsId: 'aee7d65a-33a7-4616-ab5e-4a1598289b1b', url: 'https://github.com/mahedee/code-sample02.git', branch: 'main'
   }  
  }  
 stage('Build') {  
   steps {  
    bat 'dotnet build %WORKSPACE%\\jenkins-demo\\HRM\\HRM.sln --configuration Release' 
    //bat 'dotnet build C:\\ProgramData\\Jenkins\\.jenkins\\workspace\\HRMPipelines\\jenkins-demo\\HRM\\HRM.sln --configuration Release'  
   }  
  }  
  stage('Test') {  
   steps {  
    bat 'dotnet test %WORKSPACE%\\jenkins-demo\\HRM\\HRM.Test\\HRM.Test.csproj --logger:trx'  
   }  
  }
  
  stage("Release"){
      steps {
      bat 'dotnet build  %WORKSPACE%\\jenkins-demo\\HRM\\HRM.sln /p:PublishProfile=" %WORKSPACE%\\jenkins-demo\\HRM\\HRM.API\\Properties\\PublishProfiles\\JenkinsProfile.pubxml" /p:Platform="Any CPU" /p:DeployOnBuild=true /m'
    }
  }
  
  stage('Deploy') {
    steps {
    // Stop IIS
    bat 'net stop "w3svc"'
    
    // Deploy package to IIS
    bat '"C:\\Program Files (x86)\\IIS\\Microsoft Web Deploy V3\\msdeploy.exe" -verb:sync -source:package="%WORKSPACE%\\jenkins-demo\\HRM\\HRM.API\\bin\\Debug\\net6.0\\HRM.API.zip" -dest:auto -setParam:"IIS Web Application Name"="HRM.Web" -skip:objectName=filePath,absolutePath=".\\\\PackageTmp\\\\Web.config$" -enableRule:DoNotDelete -allowUntrusted=true'
    
    // Start IIS again
    bat 'net start "w3svc"'
    }
 }

 }  
} 
</code></pre>

<p>This is the sequential script for the pipeline to execute the stages one by one. Here we used 5 steps - Checkout, Build, Test, Release, Deploy</p>

<p>Stage 1 - Checkout: In this stage, we provide the URL and Git repository, branch as main and git credentials id. Which I have created on step 10. I pull the source code to workspace. Default workspace is - C:\ProgramData\Jenkins.jenkins\workspace</p>

<p>Stage 2 - Build: In this stage, I have build the specific project. Here HRM.API. Keep in mind you have to direct the location where sln file exists.</p>

<p>Stage 3 - Test : In this stage, I have run test project providing test project link.</p>

<p>Stage 4 - Release: In this stage, A release package HRM.zip is created in the mentioned location which is provided on JenkinsProfile.pubxml. You may check each steps output using console after executing pipeline.</p>

<p>Stage 5 - Deploy: In this tage, first stop IIS. Then deploy package to IIS and then Start IIS again. So, I have used three bat command here.</p>

<p><strong>Step 13: Configure Build Triggers</strong></p>

<ul>
  <li>Navigate to HRMPipelines -&gt; Build Triggers</li>
  <li>Mark GitHub hook trigger for GITScm polling and Pool SCM</li>
  <li>Type schedule as * * * * *  which means, keep checking the Git repository and as soon as commit/check-in is done, trigger the build process. Note: there is a space after each star.</li>
</ul>

<p><img src="/assets/images/posts/2022/jenkins-7.PNG" alt="" /></p>

<ul>
  <li>
    <p>You can use  */15 * * * * if you want to run pipeline after 15 minutes of push on main.</p>
  </li>
  <li>
    <p>Click Save</p>
  </li>
</ul>

<p><strong>Step 14: Run pipeline manually</strong></p>

<ul>
  <li>Go to the dashboard</li>
  <li>Click HRMPipelines</li>
  <li>Click Build Now and you will see the following screen. It means, build and deployment completed sucessfully.</li>
</ul>

<p><img src="/assets/images/posts/2022/jenkins-8.PNG" alt="" /></p>

<p><strong>Step 15: Change application and see output</strong></p>

<ul>
  <li>Change a little bit on your application</li>
  <li>Commit and push it to the Github</li>
  <li>Wait a bit and you will see the build and deployed successfully.</li>
</ul>

<p>Now test your application using the following URL:</p>

<p>http://localhost:8012/swagger/index.html</p>

<ul>
  <li>Here I have hosted the application on 8012 port on IIS.</li>
</ul>

<p><strong><a href="https://github.com/mahedee/code-sample02/tree/main/jenkins-demo">Source Code</a></strong></p>]]></content><author><name>Mahedee Hasan</name></author><category term="ASP.NET" /><category term="ASP.NET Core" /><category term="Web API" /><category term="CI/CD" /><category term="Jenkins" /><category term="Github" /><category term="IIS" /><category term="aspnet" /><category term="csharp" /><summary type="html"><![CDATA[Jenkins is an open source automation server to facilitate CI/CD. It helps to automate software development jobs like building, testing, and deploying. In this article we are going to show you how to configure CI/CD pipeline with Jenkins and Github for an ASP.NET Core Web API application.]]></summary></entry><entry><title type="html">Configure Swagger on api gateway using ocelot in asp.net core application</title><link href="https://mahedee.net//configure-swagger-on-api-gateway-using-ocelot-in-asp.net-core-application/" rel="alternate" type="text/html" title="Configure Swagger on api gateway using ocelot in asp.net core application" /><published>2022-03-18T00:00:00+00:00</published><updated>2022-03-18T00:00:00+00:00</updated><id>https://mahedee.net//configure-swagger-on-api-gateway-using-ocelot-in-asp.net-core-application</id><content type="html" xml:base="https://mahedee.net//configure-swagger-on-api-gateway-using-ocelot-in-asp.net-core-application/"><![CDATA[<!-- ## Playing with Clean Architecture and CQRS pattern using asp.net core EF and Dapper -->

<p><strong>Introduction</strong></p>

<p>Swagger configuration on API gateway is not as simple as you are configure normal application. You have to configure it in different way. In this article I will create an API gateway using ocelot and asp.net core application and show you how to configure swagger on API gateway.</p>

<p><strong>Tools and technologies used</strong></p>
<ul>
  <li>Visual Studio 2022</li>
  <li>.NET 6.0</li>
  <li>In Memory Database</li>
  <li>Entity Framework</li>
  <li>ASP.NET Core Web API</li>
  <li>C#</li>
  <li>Ocelot and</li>
  <li>MMLib.SwaggerForOcelot</li>
</ul>

<p><strong>Implementation</strong></p>

<p><strong>Step 1: Create solution and projects.</strong></p>

<ul>
  <li>Create a solution name APIGateway</li>
  <li>Add 4 new web api project, name - Catalog.API, Location.API, Ordering.API and BFF.Web in the solution.</li>
</ul>

<p>Here, BFF.Web project will act as API Gateway.</p>

<p><strong>Step 2: Install nuget packages.</strong></p>

<ul>
  <li>Install following nuget package in Catalog.API Project</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore.InMemory</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore.SqlServer</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore.Tools</span>
</code></pre></div></div>

<ul>
  <li>Install following nuget package in Ordering.API Project</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore.InMemory</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore.SqlServer</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore.Tools</span>
</code></pre></div></div>

<ul>
  <li>Install following nuget packages in BFF.Web Project</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Ocelot</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Ocelot.Provider.Polly</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Ocelot.Cache.CacheManager</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">MMLib.SwaggerForOcelot</span>
</code></pre></div></div>

<p><strong>Step 3: Organize Catalog.API Project</strong></p>

<ul>
  <li>Create a Product model class in Catalog.API/Model folder</li>
</ul>

<p><strong>Product.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">System.ComponentModel.DataAnnotations</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.ComponentModel.DataAnnotations.Schema</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Catalog.API.Model</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Product</span>
    <span class="p">{</span>
        <span class="p">[</span><span class="n">Key</span><span class="p">]</span>
        <span class="p">[</span><span class="nf">DatabaseGenerated</span><span class="p">(</span><span class="n">DatabaseGeneratedOption</span><span class="p">.</span><span class="n">Identity</span><span class="p">)]</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">string</span> <span class="n">Description</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">decimal</span> <span class="n">Price</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">int</span> <span class="n">AvailableStock</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">int</span> <span class="n">RestockThreshold</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create a CatalogContext class in Catalog.API/Db folder</li>
</ul>

<p><strong>CatalogContext.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Catalog.API.Model</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Catalog.API.Db</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CatalogContext</span> <span class="p">:</span> <span class="n">DbContext</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">CatalogContext</span><span class="p">(</span><span class="n">DbContextOptions</span><span class="p">&lt;</span><span class="n">CatalogContext</span><span class="p">&gt;</span> <span class="n">options</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
        <span class="p">{</span>

        <span class="p">}</span>

        <span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">OnModelCreating</span><span class="p">(</span><span class="n">ModelBuilder</span> <span class="n">modelBuilder</span><span class="p">)</span>
        <span class="p">{</span>

        <span class="p">}</span>

        <span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">OnConfiguring</span><span class="p">(</span><span class="n">DbContextOptionsBuilder</span> <span class="n">optionsBuilder</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">base</span><span class="p">.</span><span class="nf">OnConfiguring</span><span class="p">(</span><span class="n">optionsBuilder</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">DbSet</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="n">Products</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Modify Program.cs file as follows</li>
</ul>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Catalog.API.Db</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="n">WebApplication</span><span class="p">.</span><span class="nf">CreateBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>

<span class="c1">// Add services to the container.</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">();</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddDbContext</span><span class="p">&lt;</span><span class="n">CatalogContext</span><span class="p">&gt;(</span><span class="n">opt</span> <span class="p">=&gt;</span> <span class="n">opt</span><span class="p">.</span><span class="nf">UseInMemoryDatabase</span><span class="p">(</span><span class="s">"CatalogDB"</span><span class="p">));</span>

<span class="c1">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddEndpointsApiExplorer</span><span class="p">();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddSwaggerGen</span><span class="p">();</span>

<span class="kt">var</span> <span class="n">app</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

<span class="c1">// Configure the HTTP request pipeline.</span>
<span class="k">if</span> <span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">Environment</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
<span class="p">{</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwagger</span><span class="p">();</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwaggerUI</span><span class="p">();</span>
<span class="p">}</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseHttpsRedirection</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseAuthorization</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">MapControllers</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>

</code></pre></div></div>

<ul>
  <li>Create a conroller class name ProductsController in Catalog.API/Controllers folder</li>
</ul>

<p><strong>CatalogController.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">#</span><span class="n">nullable</span> <span class="n">disable</span>
<span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Linq</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Threading.Tasks</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Http</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Catalog.API.Db</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Catalog.API.Model</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Catalog.API.Controllers</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
    <span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">ProductsController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">CatalogContext</span> <span class="n">_context</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">ProductsController</span><span class="p">(</span><span class="n">CatalogContext</span> <span class="n">context</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_context</span> <span class="p">=</span> <span class="n">context</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/Products</span>
        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"GetAll"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;&gt;&gt;</span> <span class="nf">GetProducts</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Products</span><span class="p">.</span><span class="nf">ToListAsync</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/Products/5</span>
        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;&gt;</span> <span class="nf">GetProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">product</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Products</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">product</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="n">product</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// PUT: api/Products/5</span>
        <span class="c1">// To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754</span>
        <span class="p">[</span><span class="nf">HttpPut</span><span class="p">(</span><span class="s">"Edit/{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">PutProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="n">Product</span> <span class="n">product</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">id</span> <span class="p">!=</span> <span class="n">product</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">_context</span><span class="p">.</span><span class="nf">Entry</span><span class="p">(</span><span class="n">product</span><span class="p">).</span><span class="n">State</span> <span class="p">=</span> <span class="n">EntityState</span><span class="p">.</span><span class="n">Modified</span><span class="p">;</span>

            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">DbUpdateConcurrencyException</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(!</span><span class="nf">ProductExists</span><span class="p">(</span><span class="n">id</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
                <span class="p">}</span>
                <span class="k">else</span>
                <span class="p">{</span>
                    <span class="k">throw</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// POST: api/Products</span>
        <span class="c1">// To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754</span>
        <span class="p">[</span><span class="nf">HttpPost</span><span class="p">(</span><span class="s">"Add"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;&gt;</span> <span class="nf">PostProduct</span><span class="p">(</span><span class="n">Product</span> <span class="n">product</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_context</span><span class="p">.</span><span class="n">Products</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">product</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>

            <span class="k">return</span> <span class="nf">CreatedAtAction</span><span class="p">(</span><span class="s">"GetProduct"</span><span class="p">,</span> <span class="k">new</span> <span class="p">{</span> <span class="n">id</span> <span class="p">=</span> <span class="n">product</span><span class="p">.</span><span class="n">Id</span> <span class="p">},</span> <span class="n">product</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">// DELETE: api/Products/5</span>
        <span class="p">[</span><span class="nf">HttpDelete</span><span class="p">(</span><span class="s">"Delete/{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">DeleteProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">product</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Products</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">product</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">_context</span><span class="p">.</span><span class="n">Products</span><span class="p">.</span><span class="nf">Remove</span><span class="p">(</span><span class="n">product</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>

            <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="kt">bool</span> <span class="nf">ProductExists</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">_context</span><span class="p">.</span><span class="n">Products</span><span class="p">.</span><span class="nf">Any</span><span class="p">(</span><span class="n">e</span> <span class="p">=&gt;</span> <span class="n">e</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">id</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 4: Organize Ordering.API Project</strong></p>

<ul>
  <li>Create a Order model class in Ordering.API/Model folder</li>
</ul>

<p><strong>Order.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">namespace</span> <span class="nn">Ordering.API.Models</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Order</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Address</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="n">DateTime</span> <span class="n">OrderDate</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">string</span> <span class="n">Comments</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>


</code></pre></div></div>

<ul>
  <li>Create a OrderingContext class in Ordering.API/Db folder</li>
</ul>

<p><strong>OrderingContext.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.API.Models</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.API.Db</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">OrderingContext</span> <span class="p">:</span> <span class="n">DbContext</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">OrderingContext</span><span class="p">(</span><span class="n">DbContextOptions</span><span class="p">&lt;</span><span class="n">OrderingContext</span><span class="p">&gt;</span> <span class="n">options</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
        <span class="p">{</span>

        <span class="p">}</span>
        <span class="k">public</span> <span class="n">DbSet</span><span class="p">&lt;</span><span class="n">Ordering</span><span class="p">.</span><span class="n">API</span><span class="p">.</span><span class="n">Models</span><span class="p">.</span><span class="n">Order</span><span class="p">&gt;</span> <span class="n">Order</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>


</code></pre></div></div>

<ul>
  <li>Modify Program.cs file as follows</li>
</ul>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.API.Db</span><span class="p">;</span>

<span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="n">WebApplication</span><span class="p">.</span><span class="nf">CreateBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>

<span class="c1">// Add services to the container.</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">();</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddDbContext</span><span class="p">&lt;</span><span class="n">OrderingContext</span><span class="p">&gt;(</span><span class="n">opt</span> <span class="p">=&gt;</span> <span class="n">opt</span><span class="p">.</span><span class="nf">UseInMemoryDatabase</span><span class="p">(</span><span class="s">"CatalogDB"</span><span class="p">));</span>

<span class="c1">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddEndpointsApiExplorer</span><span class="p">();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddSwaggerGen</span><span class="p">();</span>

<span class="kt">var</span> <span class="n">app</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

<span class="c1">// Configure the HTTP request pipeline.</span>
<span class="k">if</span> <span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">Environment</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
<span class="p">{</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwagger</span><span class="p">();</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwaggerUI</span><span class="p">();</span>
<span class="p">}</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseHttpsRedirection</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseAuthorization</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">MapControllers</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>

</code></pre></div></div>

<ul>
  <li>Create a conroller class name OrdersController in Ordering.API/Controllers folder</li>
</ul>

<p><strong>OrdersController.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">#</span><span class="n">nullable</span> <span class="n">disable</span>
<span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Linq</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Threading.Tasks</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Http</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.API.Db</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.API.Models</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.API.Controllers</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
    <span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">OrdersController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">OrderingContext</span> <span class="n">_context</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">OrdersController</span><span class="p">(</span><span class="n">OrderingContext</span> <span class="n">context</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_context</span> <span class="p">=</span> <span class="n">context</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/Orders</span>
        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"GetAll"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Order</span><span class="p">&gt;&gt;&gt;</span> <span class="nf">GetOrder</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Order</span><span class="p">.</span><span class="nf">ToListAsync</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/Orders/5</span>
        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">Order</span><span class="p">&gt;&gt;</span> <span class="nf">GetOrder</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">order</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Order</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">order</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="n">order</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// PUT: api/Orders/5</span>
        <span class="c1">// To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754</span>
        <span class="p">[</span><span class="nf">HttpPut</span><span class="p">(</span><span class="s">"Edit/{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">PutOrder</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="n">Order</span> <span class="n">order</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">id</span> <span class="p">!=</span> <span class="n">order</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">_context</span><span class="p">.</span><span class="nf">Entry</span><span class="p">(</span><span class="n">order</span><span class="p">).</span><span class="n">State</span> <span class="p">=</span> <span class="n">EntityState</span><span class="p">.</span><span class="n">Modified</span><span class="p">;</span>

            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">DbUpdateConcurrencyException</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(!</span><span class="nf">OrderExists</span><span class="p">(</span><span class="n">id</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
                <span class="p">}</span>
                <span class="k">else</span>
                <span class="p">{</span>
                    <span class="k">throw</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// POST: api/Orders</span>
        <span class="c1">// To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754</span>
        <span class="p">[</span><span class="nf">HttpPost</span><span class="p">(</span><span class="s">"Add"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">Order</span><span class="p">&gt;&gt;</span> <span class="nf">PostOrder</span><span class="p">(</span><span class="n">Order</span> <span class="n">order</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_context</span><span class="p">.</span><span class="n">Order</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">order</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>

            <span class="k">return</span> <span class="nf">CreatedAtAction</span><span class="p">(</span><span class="s">"GetOrder"</span><span class="p">,</span> <span class="k">new</span> <span class="p">{</span> <span class="n">id</span> <span class="p">=</span> <span class="n">order</span><span class="p">.</span><span class="n">Id</span> <span class="p">},</span> <span class="n">order</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">// DELETE: api/Orders/5</span>
        <span class="p">[</span><span class="nf">HttpDelete</span><span class="p">(</span><span class="s">"Delete/{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">DeleteOrder</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">order</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Order</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">order</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">_context</span><span class="p">.</span><span class="n">Order</span><span class="p">.</span><span class="nf">Remove</span><span class="p">(</span><span class="n">order</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>

            <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="kt">bool</span> <span class="nf">OrderExists</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">_context</span><span class="p">.</span><span class="n">Order</span><span class="p">.</span><span class="nf">Any</span><span class="p">(</span><span class="n">e</span> <span class="p">=&gt;</span> <span class="n">e</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">id</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 5: Organize Location.API Project</strong></p>

<ul>
  <li>Create CountriesController in Location.API/Controllers folder</li>
</ul>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Location.API.Controllers</span>
<span class="p">{</span>
    <span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CountriesController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
    <span class="p">{</span>
      <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"GetAll"</span><span class="p">)]</span>
      <span class="k">public</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="nf">Get</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="kt">string</span><span class="p">[]</span> <span class="p">{</span><span class="s">"America"</span><span class="p">,</span><span class="s">"Bangladesh"</span><span class="p">,</span> <span class="s">"Canada"</span> <span class="p">};</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 6: Organize BFF.Web (API Gateway)  Project</strong></p>

<ul>
  <li>Create a folder name Routes and add the following files in that folder</li>
</ul>

<p><strong>ocelot.catalog.api.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">
</span><span class="p">{</span><span class="w">
  </span><span class="nl">"Routes"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"DownstreamPathTemplate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/{everything}"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"DownstreamScheme"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"SwaggerKey"</span><span class="p">:</span><span class="w"> </span><span class="s2">"catalog"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"DownstreamHostAndPorts"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"Host"</span><span class="p">:</span><span class="w"> </span><span class="s2">"localhost"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Port"</span><span class="p">:</span><span class="w"> </span><span class="s2">"7282"</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"UpstreamPathTemplate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/catalog/{everything}"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"UpstreamHttpMethod"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"GET"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"POST"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"PUT"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"DELETE"</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<p><strong>ocelot.location.api.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"Routes"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"DownstreamPathTemplate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/{everything}"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"DownstreamScheme"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"SwaggerKey"</span><span class="p">:</span><span class="w"> </span><span class="s2">"location"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"DownstreamHostAndPorts"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"Host"</span><span class="p">:</span><span class="w"> </span><span class="s2">"localhost"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Port"</span><span class="p">:</span><span class="w"> </span><span class="s2">"7003"</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"UpstreamPathTemplate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/location/{everything}"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"UpstreamHttpMethod"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"GET"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"POST"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"PUT"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"DELETE"</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<p><strong>ocelot.ordering.api.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"Routes"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"DownstreamPathTemplate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/{everything}"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"DownstreamScheme"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"SwaggerKey"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ordering"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"DownstreamHostAndPorts"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"Host"</span><span class="p">:</span><span class="w"> </span><span class="s2">"localhost"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Port"</span><span class="p">:</span><span class="w"> </span><span class="s2">"7126"</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"UpstreamPathTemplate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/ordering/{everything}"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"UpstreamHttpMethod"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"GET"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"POST"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"PUT"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"DELETE"</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<p><strong>ocelot.global.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"GlobalConfiguration"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"BaseUrl"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://localhost:5205"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p><strong>ocelot.SwaggerEndPoints.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"SwaggerEndPoints"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"bffweb"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"TransformByOcelotConfig"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Config"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"Name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"BFF.Web"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1.0"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://localhost:5205/swagger/v1/swagger.json"</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"location"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"TransformByOcelotConfig"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Config"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"Name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Location.API"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1.0"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://localhost:5205/location/swagger/v1/swagger.json"</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"catalog"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"TransformByOcelotConfig"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Config"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"Name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Catalog.API"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1.0"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://localhost:5205/catalog/swagger/v1/swagger.json"</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ordering"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"TransformByOcelotConfig"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Config"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"Name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Ordering.API"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1.0"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://localhost:5205/catalog/swagger/v1/swagger.json"</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<ul>
  <li>Add AlterUpstream Class in Config Folder</li>
</ul>

<p><strong>AlterUpstream.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Newtonsoft.Json</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Newtonsoft.Json.Linq</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">BFF.Web.Config</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">AlterUpstream</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">static</span> <span class="kt">string</span> <span class="nf">AlterUpstreamSwaggerJson</span><span class="p">(</span><span class="n">HttpContext</span> <span class="n">context</span><span class="p">,</span> <span class="kt">string</span> <span class="n">swaggerJson</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">swagger</span> <span class="p">=</span> <span class="n">JObject</span><span class="p">.</span><span class="nf">Parse</span><span class="p">(</span><span class="n">swaggerJson</span><span class="p">);</span>
            <span class="c1">// ... alter upstream json</span>
            <span class="k">return</span> <span class="n">swagger</span><span class="p">.</span><span class="nf">ToString</span><span class="p">(</span><span class="n">Formatting</span><span class="p">.</span><span class="n">Indented</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>Modify Program.cs file as follows</li>
</ul>

<p><strong>Program.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">BFF.Web.Config</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">MMLib.SwaggerForOcelot.DependencyInjection</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ocelot.DependencyInjection</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ocelot.Middleware</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ocelot.Provider.Polly</span><span class="p">;</span>

<span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="n">WebApplication</span><span class="p">.</span><span class="nf">CreateBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>

<span class="kt">var</span> <span class="n">routes</span> <span class="p">=</span> <span class="s">"Routes"</span><span class="p">;</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Configuration</span><span class="p">.</span><span class="nf">AddOcelotWithSwaggerSupport</span><span class="p">(</span><span class="n">options</span> <span class="p">=&gt;</span>
<span class="p">{</span>
    <span class="n">options</span><span class="p">.</span><span class="n">Folder</span> <span class="p">=</span> <span class="n">routes</span><span class="p">;</span>
<span class="p">});</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddOcelot</span><span class="p">(</span><span class="n">builder</span><span class="p">.</span><span class="n">Configuration</span><span class="p">).</span><span class="nf">AddPolly</span><span class="p">();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddSwaggerForOcelot</span><span class="p">(</span><span class="n">builder</span><span class="p">.</span><span class="n">Configuration</span><span class="p">);</span>

<span class="kt">var</span> <span class="n">environment</span> <span class="p">=</span> <span class="n">Environment</span><span class="p">.</span><span class="nf">GetEnvironmentVariable</span><span class="p">(</span><span class="s">"ASPNETCORE_ENVIRONMENT"</span><span class="p">);</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Configuration</span><span class="p">.</span><span class="nf">SetBasePath</span><span class="p">(</span><span class="n">Directory</span><span class="p">.</span><span class="nf">GetCurrentDirectory</span><span class="p">())</span>
    <span class="p">.</span><span class="nf">AddOcelot</span><span class="p">(</span><span class="n">routes</span><span class="p">,</span> <span class="n">builder</span><span class="p">.</span><span class="n">Environment</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">AddEnvironmentVariables</span><span class="p">();</span>


<span class="c1">// Add services to the container.</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">();</span>
<span class="c1">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddEndpointsApiExplorer</span><span class="p">();</span>

<span class="c1">// Swagger for ocelot</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddSwaggerGen</span><span class="p">();</span>

<span class="kt">var</span> <span class="n">app</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

<span class="c1">// Configure the HTTP request pipeline.</span>
<span class="k">if</span> <span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">Environment</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
<span class="p">{</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwagger</span><span class="p">();</span>
<span class="p">}</span>


<span class="n">app</span><span class="p">.</span><span class="nf">UseHttpsRedirection</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseAuthorization</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseSwaggerForOcelotUI</span><span class="p">(</span><span class="n">options</span> <span class="p">=&gt;</span>
<span class="p">{</span>
    <span class="n">options</span><span class="p">.</span><span class="n">PathToSwaggerGenerator</span> <span class="p">=</span> <span class="s">"/swagger/docs"</span><span class="p">;</span>
    <span class="n">options</span><span class="p">.</span><span class="n">ReConfigureUpstreamSwaggerJson</span> <span class="p">=</span> <span class="n">AlterUpstream</span><span class="p">.</span><span class="n">AlterUpstreamSwaggerJson</span><span class="p">;</span>

<span class="p">}).</span><span class="nf">UseOcelot</span><span class="p">().</span><span class="nf">Wait</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">MapControllers</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>

</code></pre></div></div>

<p><strong>Step 7: Run and Test application</strong></p>

<ul>
  <li>Now run multiple (all) projects and test application using postman.</li>
  <li>Check all end point using api gateway and swagger using the following URL</li>
</ul>

<p>https://localhost:7205/swagger/index.html</p>

<ul>
  <li>Select Swagger definition from top right corner of BFF</li>
</ul>

<p><strong><a href="https://github.com/mahedee/code-sample02/tree/main/ocelot-swagger">Source code</a></strong></p>]]></content><author><name>Mahedee Hasan</name></author><category term="Web API" /><category term="ASP.NET Core" /><category term="C#" /><category term="Ocelot" /><category term="webapi" /><category term="aspnetcore" /><category term="csharp" /><category term="ocelot" /><summary type="html"><![CDATA[Swagger configuration on API gateway is not as simple as you are configure normal application. You have to configure it in different way. In this article I will create an API gateway using ocelot and asp.net core application and show you how to configure swagger on API gateway.]]></summary></entry><entry><title type="html">Configure service mesh using Istio with asp.net core applications on Kubernetes</title><link href="https://mahedee.net//configure-service-mesh-using-istio-with-asp.net-core-and-kubernetes/" rel="alternate" type="text/html" title="Configure service mesh using Istio with asp.net core applications on Kubernetes" /><published>2022-03-01T00:00:00+00:00</published><updated>2022-03-01T00:00:00+00:00</updated><id>https://mahedee.net//configure-service-mesh-using-istio-with-asp.net-core-and-kubernetes</id><content type="html" xml:base="https://mahedee.net//configure-service-mesh-using-istio-with-asp.net-core-and-kubernetes/"><![CDATA[<p><strong>Overview</strong></p>

<p>A service mesh is a configurable infrustructure layer. It have capabilities to handle service-to-service communication, resilency, and many cross-cutting concerns. Proxy is a key component of service mesh. Sidecar proxy is injected in each services in this concept. Here I will show you service mesh communication using Istio with asp.net core applications on Kubernetes environment.</p>

<p>Istio is an open platform for providing a uniform way to integrate microservices, manage traffic flow accross microservices, enforce policies and aggregate telemetry data. Istio uses following tools -</p>

<ul>
  <li>Prometheus: It monitors everything in the cluster.</li>
  <li>Grafana: Data visualization tools.</li>
  <li>Jaeger: It’s used for distributed tracing.</li>
</ul>

<p><strong>Tools and Technology used</strong><br />
The following tools and technologies used to configure Istio</p>
<ul>
  <li>Visual Studio 2022</li>
  <li>Visual C#</li>
  <li>ASP.NET Core Web API</li>
  <li>Ocelot</li>
  <li>Docker desktop</li>
  <li>Kubernetes</li>
  <li>Istio</li>
</ul>

<p>Let’s configure Istio on asp.net core web api applications.</p>

<p><strong>Step 1: Download Istio</strong></p>
<ul>
  <li>Go to the link below and download “istio-1.12.2-win.zip”<br />
https://github.com/istio/istio/releases/tag/1.12.2</li>
</ul>

<p>or download and extract the latest release automatically (Linux or macOS):
curl -L https://istio.io/downloadIstio | sh -</p>

<ul>
  <li>
    <p>Extract zip file and move to the Istio Package directory. For example, istio-1.12.2.</p>
  </li>
  <li>
    <p>Then installation directory contains:</p>
    <ul>
      <li>Sample applications in sample/directory</li>
      <li>The istioctl client binary in the bin/directory</li>
    </ul>
  </li>
</ul>

<p><strong>Step 2: Add istioctl client to your path</strong></p>

<ul>
  <li>Use the following command in git bash to add istioctl client to your path.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">export</span> <span class="nf">PATH=$PWD</span><span class="nv">/bin:$PATH</span>
</code></pre></div></div>

<p>Note: The above command doesn’t run on powershell. So, use git bash. If you close the git bash, istioctl doesn’t work. You have to run the above command again.</p>

<ul>
  <li>To check istioctl client use the following command in git bash.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">istioctl</span>
</code></pre></div></div>

<p><strong>Step 3: Install Istio</strong></p>

<ul>
  <li>For installation, we use the demo configuration profile. It’s selected to have a good set of defaults for testing, but there are other profiles for production or performance testing. Use below command to install Istio.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">istioctl</span> <span class="nf">install</span> <span class="nf">--set</span> <span class="nf">profile=demo</span> <span class="nf">-y</span>
</code></pre></div></div>
<ul>
  <li>Use the following command to verify Istio.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">kubectl</span> <span class="nb">get</span> <span class="nf">all</span> <span class="nf">-n</span> <span class="nf">istio-system</span>
</code></pre></div></div>

<p>Output:</p>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">NAME</span>                                        <span class="nf">READY</span>   <span class="nf">STATUS</span>    <span class="nf">RESTARTS</span>   <span class="nf">AGE</span>
<span class="nf">pod</span><span class="nv">/istio-egressgateway-c9cbbd99f-wk265</span>     <span class="mf">1</span><span class="nv">/1</span>     <span class="nf">Running</span>   <span class="mf">0</span>          <span class="nf">87s</span>
<span class="nf">pod</span><span class="nv">/istio-ingressgateway-7c8bc47b49-xpvvc</span>   <span class="mf">1</span><span class="nv">/1</span>     <span class="nf">Running</span>   <span class="mf">0</span>          <span class="nf">86s</span>
<span class="nf">pod</span><span class="nv">/istiod-765596f7ff-2p72v</span>                 <span class="mf">1</span><span class="nv">/1</span>     <span class="nf">Running</span>   <span class="mf">0</span>          <span class="nf">3m13s</span>

<span class="nf">NAME</span>                           <span class="nf">TYPE</span>           <span class="nf">CLUSTER-IP</span>       <span class="nf">EXTERNAL-IP</span>   <span class="nf">PORT</span><span class="s">(S)</span>                                                                      <span class="nf">AGE</span>
<span class="nf">service</span><span class="nv">/istio-egressgateway</span>    <span class="nf">ClusterIP</span>      <span class="nf">10.101.157.106</span>   <span class="p">&lt;</span><span class="nf">none</span><span class="p">&gt;</span>        <span class="mf">80</span><span class="nv">/TCP,443/TCP</span>                                                               <span class="nf">85s</span>
<span class="nf">service</span><span class="nv">/istio-ingressgateway</span>   <span class="nf">LoadBalancer</span>   <span class="nf">10.109.205.109</span>   <span class="nf">localhost</span>     <span class="nf">15021:32149</span><span class="nv">/TCP,80:30563/TCP,443:30960/TCP,31400:32369/TCP,15443:32309/TCP</span>   <span class="nf">85s</span>
<span class="nf">service</span><span class="nv">/istiod</span>                 <span class="nf">ClusterIP</span>      <span class="nf">10.109.211.149</span>   <span class="p">&lt;</span><span class="nf">none</span><span class="p">&gt;</span>        <span class="mf">15010</span><span class="nv">/TCP,15012/TCP,443/TCP,15014/TCP</span>                                        <span class="nf">3m12s</span>

<span class="nf">NAME</span>                                   <span class="nf">READY</span>   <span class="nf">UP-TO-DATE</span>   <span class="nf">AVAILABLE</span>   <span class="nf">AGE</span>
<span class="nf">deployment.apps</span><span class="nv">/istio-egressgateway</span>    <span class="mf">1</span><span class="nv">/1</span>     <span class="mf">1</span>            <span class="mf">1</span>           <span class="nf">87s</span>
<span class="nf">deployment.apps</span><span class="nv">/istio-ingressgateway</span>   <span class="mf">1</span><span class="nv">/1</span>     <span class="mf">1</span>            <span class="mf">1</span>           <span class="nf">86s</span>
<span class="nf">deployment.apps</span><span class="nv">/istiod</span>                 <span class="mf">1</span><span class="nv">/1</span>     <span class="mf">1</span>            <span class="mf">1</span>           <span class="nf">3m13s</span>

<span class="nf">NAME</span>                                              <span class="nf">DESIRED</span>   <span class="nf">CURRENT</span>   <span class="nf">READY</span>   <span class="nf">AGE</span>
<span class="nf">replicaset.apps</span><span class="nv">/istio-egressgateway-c9cbbd99f</span>     <span class="mf">1</span>         <span class="mf">1</span>         <span class="mf">1</span>       <span class="nf">87s</span>
<span class="nf">replicaset.apps</span><span class="nv">/istio-ingressgateway-7c8bc47b49</span>   <span class="mf">1</span>         <span class="mf">1</span>         <span class="mf">1</span>       <span class="nf">86s</span>
<span class="nf">replicaset.apps</span><span class="nv">/istiod-765596f7ff</span>                 <span class="mf">1</span>         <span class="mf">1</span>         <span class="mf">1</span>       <span class="nf">3m13s</span>
</code></pre></div></div>

<p><strong>Step 4: Configure for auto proxy injection</strong></p>

<ul>
  <li>Add a namespace label to instruct Istio to automatically inject Envoy sidecar proxies when you deploy your application later. Use below command to configure default namespance with Istio sidecar proxy.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">kubectl</span> <span class="nf">label</span> <span class="nf">namespace</span> <span class="nf">default</span> <span class="nf">istio-injection=enabled</span>
</code></pre></div></div>

<ul>
  <li>Check label by using below command</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">kubectl</span> <span class="nf">describe</span> <span class="nf">namespace</span> <span class="nf">default</span>
</code></pre></div></div>

<p><strong>Step 5: Create asp.net core applications</strong></p>

<ul>
  <li>Create 4 asp.net core web api projects.</li>
  <li>Projects names are Catalog.API, Location.API, Ordering.API and BFF.Web.</li>
</ul>

<p><strong>Step 6: Organize Catalog.API Project</strong></p>

<ul>
  <li>Add the following nuget packages in the project.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore.InMemory</span>
<span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore.SqlServer</span>
<span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore.Tools</span>
</code></pre></div></div>

<ul>
  <li>Add a model class name Product in the model folder.</li>
</ul>

<p><strong>Product.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System.ComponentModel.DataAnnotations</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.ComponentModel.DataAnnotations.Schema</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Catalog.API.Model</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Product</span>
    <span class="p">{</span>
        <span class="p">[</span><span class="n">Key</span><span class="p">]</span>
        <span class="p">[</span><span class="nf">DatabaseGenerated</span><span class="p">(</span><span class="n">DatabaseGeneratedOption</span><span class="p">.</span><span class="n">Identity</span><span class="p">)]</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">string</span> <span class="n">Description</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">decimal</span> <span class="n">Price</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">int</span> <span class="n">AvailableStock</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">int</span> <span class="n">RestockThreshold</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Add CatalogContext class in Db folder.</li>
</ul>

<p><strong>CatalogContext.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Catalog.API.Model</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Catalog.API.Db</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CatalogContext</span> <span class="p">:</span> <span class="n">DbContext</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">CatalogContext</span><span class="p">(</span><span class="n">DbContextOptions</span><span class="p">&lt;</span><span class="n">CatalogContext</span><span class="p">&gt;</span> <span class="n">options</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
        <span class="p">{</span>

        <span class="p">}</span>
        <span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">OnConfiguring</span><span class="p">(</span><span class="n">DbContextOptionsBuilder</span> <span class="n">optionsBuilder</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">base</span><span class="p">.</span><span class="nf">OnConfiguring</span><span class="p">(</span><span class="n">optionsBuilder</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">DbSet</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="n">Products</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Configure InMemory database and modify Program class as follows.</li>
</ul>

<p><strong>Program.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Catalog.API.Db</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="n">WebApplication</span><span class="p">.</span><span class="nf">CreateBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>

<span class="c1">// Add services to the container.</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">();</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddDbContext</span><span class="p">&lt;</span><span class="n">CatalogContext</span><span class="p">&gt;(</span><span class="n">opt</span> <span class="p">=&gt;</span> <span class="n">opt</span><span class="p">.</span><span class="nf">UseInMemoryDatabase</span><span class="p">(</span><span class="s">"CatalogDB"</span><span class="p">));</span>

<span class="c1">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddEndpointsApiExplorer</span><span class="p">();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddSwaggerGen</span><span class="p">();</span>

<span class="kt">var</span> <span class="n">app</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

<span class="c1">// Configure the HTTP request pipeline.</span>
<span class="k">if</span> <span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">Environment</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
<span class="p">{</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwagger</span><span class="p">();</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwaggerUI</span><span class="p">();</span>
<span class="p">}</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseHttpsRedirection</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseAuthorization</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">MapControllers</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>

</code></pre></div></div>

<ul>
  <li>Create ProductsController in Controllers folder</li>
</ul>

<p><strong>ProductsController.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">#</span><span class="n">nullable</span> <span class="n">disable</span>
<span class="k">using</span> <span class="nn">Catalog.API.Db</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Catalog.API.Model</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Catalog.API.Controllers</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
    <span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">ProductsController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">CatalogContext</span> <span class="n">_context</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">ProductsController</span><span class="p">(</span><span class="n">CatalogContext</span> <span class="n">context</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_context</span> <span class="p">=</span> <span class="n">context</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/Products</span>
        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"GetAll"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;&gt;&gt;</span> <span class="nf">GetProducts</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Products</span><span class="p">.</span><span class="nf">ToListAsync</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/Products/5</span>
        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;&gt;</span> <span class="nf">GetProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">product</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Products</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">product</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="n">product</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// PUT: api/Products/5</span>
        <span class="c1">// To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754</span>
        <span class="p">[</span><span class="nf">HttpPut</span><span class="p">(</span><span class="s">"Edit/{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">PutProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="n">Product</span> <span class="n">product</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">id</span> <span class="p">!=</span> <span class="n">product</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">_context</span><span class="p">.</span><span class="nf">Entry</span><span class="p">(</span><span class="n">product</span><span class="p">).</span><span class="n">State</span> <span class="p">=</span> <span class="n">EntityState</span><span class="p">.</span><span class="n">Modified</span><span class="p">;</span>

            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">DbUpdateConcurrencyException</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(!</span><span class="nf">ProductExists</span><span class="p">(</span><span class="n">id</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
                <span class="p">}</span>
                <span class="k">else</span>
                <span class="p">{</span>
                    <span class="k">throw</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// POST: api/Products</span>
        <span class="c1">// To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754</span>
        <span class="p">[</span><span class="nf">HttpPost</span><span class="p">(</span><span class="s">"Add"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;&gt;</span> <span class="nf">PostProduct</span><span class="p">(</span><span class="n">Product</span> <span class="n">product</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_context</span><span class="p">.</span><span class="n">Products</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">product</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>

            <span class="k">return</span> <span class="nf">CreatedAtAction</span><span class="p">(</span><span class="s">"GetProduct"</span><span class="p">,</span> <span class="k">new</span> <span class="p">{</span> <span class="n">id</span> <span class="p">=</span> <span class="n">product</span><span class="p">.</span><span class="n">Id</span> <span class="p">},</span> <span class="n">product</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">// DELETE: api/Products/5</span>
        <span class="p">[</span><span class="nf">HttpDelete</span><span class="p">(</span><span class="s">"Delete/{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">DeleteProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">product</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Products</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">product</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">_context</span><span class="p">.</span><span class="n">Products</span><span class="p">.</span><span class="nf">Remove</span><span class="p">(</span><span class="n">product</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>

            <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="kt">bool</span> <span class="nf">ProductExists</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">_context</span><span class="p">.</span><span class="n">Products</span><span class="p">.</span><span class="nf">Any</span><span class="p">(</span><span class="n">e</span> <span class="p">=&gt;</span> <span class="n">e</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">id</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Add Dockerfile in the Catalog.API Project</li>
</ul>

<p><strong>Dockerfile</strong></p>

<div class="language-Dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">FROM</span><span class="w"> </span><span class="s">mcr.microsoft.com/dotnet/aspnet:6.0</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">base</span>
<span class="k">WORKDIR</span><span class="s"> /app</span>
<span class="k">EXPOSE</span><span class="s"> 80</span>
<span class="k">EXPOSE</span><span class="s"> 443</span>

<span class="k">FROM</span><span class="w"> </span><span class="s">mcr.microsoft.com/dotnet/sdk:6.0</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">build</span>
<span class="k">WORKDIR</span><span class="s"> /src</span>
<span class="k">COPY</span><span class="s"> ["/Catalog.API.csproj", "Catalog.API/"]</span>
<span class="k">RUN </span>dotnet restore <span class="s2">"Catalog.API/Catalog.API.csproj"</span>
<span class="k">WORKDIR</span><span class="s"> "/src/Catalog.API"</span>
<span class="k">COPY</span><span class="s"> . .</span>
<span class="k">WORKDIR</span><span class="s"> "/src/Catalog.API"</span>
<span class="k">RUN </span>dotnet build <span class="s2">"Catalog.API.csproj"</span> <span class="nt">-c</span> Release <span class="nt">-o</span> /app/build

<span class="k">FROM</span><span class="w"> </span><span class="s">build</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">publish</span>
<span class="k">RUN </span>dotnet publish <span class="s2">"Catalog.API.csproj"</span> <span class="nt">-c</span> Release <span class="nt">-o</span> /app/publish

<span class="k">FROM</span><span class="w"> </span><span class="s">base</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">final</span>
<span class="k">WORKDIR</span><span class="s"> /app</span>
<span class="k">COPY</span><span class="s"> --from=publish /app/publish .</span>
<span class="k">ENTRYPOINT</span><span class="s"> ["dotnet", "Catalog.API.dll"]</span>

</code></pre></div></div>

<ul>
  <li>Go to director where dockerfile reside and run the following command to build docker image.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">docker</span> <span class="nf">image</span> <span class="nf">build</span> <span class="nf">-t</span> <span class="nf">mahedee</span><span class="nv">/catalog:1.0.1</span> <span class="nf">.</span>
</code></pre></div></div>

<p>Note: Don’t forgot to add . at the end of the command.</p>

<ul>
  <li>To configure pod add the following to file with code in Deploy/k8s folder</li>
</ul>

<p><strong>deployment.yml</strong></p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="c1"># Configure Deployment</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Deployment</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">catalogapi-deployment</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">matchLabels</span><span class="pi">:</span>
      <span class="na">app</span><span class="pi">:</span> <span class="s">catalogapi-pod</span>
  <span class="na">template</span><span class="pi">:</span>
    <span class="na">metadata</span><span class="pi">:</span>
      <span class="na">labels</span><span class="pi">:</span>
        <span class="na">app</span><span class="pi">:</span> <span class="s">catalogapi-pod</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">containers</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">catalogapi-container</span>
        <span class="na">image</span><span class="pi">:</span> <span class="s">mahedee/catalog:1.0.1</span>
        <span class="na">resources</span><span class="pi">:</span>
          <span class="na">limits</span><span class="pi">:</span>
            <span class="na">memory</span><span class="pi">:</span> <span class="s2">"</span><span class="s">128Mi"</span> <span class="c1"># 128 mili bytes</span>
            <span class="na">cpu</span><span class="pi">:</span> <span class="s2">"</span><span class="s">500m"</span>     <span class="c1"># 500 mili cpu</span>
        <span class="na">ports</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">containerPort</span><span class="pi">:</span> <span class="m">80</span>



</code></pre></div></div>
<p><strong>service.yml</strong></p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="c1"># Configure service</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Service</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">catalogapi-service</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">app</span><span class="pi">:</span> <span class="s">catalogapi-pod</span>
  <span class="na">ports</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">port</span><span class="pi">:</span> <span class="m">8001</span>
    <span class="na">targetPort</span><span class="pi">:</span> <span class="m">80</span>
  <span class="na">type</span><span class="pi">:</span> <span class="s">LoadBalancer</span> <span class="c1"># use LoadBalancer if you want to accesss out side of pod</span>

</code></pre></div></div>

<ul>
  <li>Go to the Deploy/k8s directory and run the following commands.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">kubectl</span> <span class="nf">apply</span> <span class="nf">-f</span> <span class="nf">.\deployment.yml</span>

<span class="nf">kubectl</span> <span class="nf">apply</span> <span class="nf">-f</span> <span class="nf">.\service.yml</span>
</code></pre></div></div>

<p><strong>Step 7: Check pods have proxy auto-injected</strong></p>

<ul>
  <li>By default istio will be injected automatically under this namespace.</li>
  <li>Use the following command to check pods have proxy auto-injected.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">kubectl</span> <span class="nb">get</span> <span class="nf">pods</span>   <span class="err">//</span> <span class="nf">To</span> <span class="nf">check</span> <span class="nf">pods</span>
</code></pre></div></div>
<p>Output:</p>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">NAME</span>                                      <span class="nf">READY</span>   <span class="nf">STATUS</span>    <span class="nf">RESTARTS</span>   <span class="nf">AGE</span>
<span class="nf">catalogapi-deployment-68d56ccddd-sqfnj</span>    <span class="mf">2</span><span class="nv">/2</span>     <span class="nf">Running</span>   <span class="mf">0</span>          <span class="nf">14m</span>
</code></pre></div></div>

<ul>
  <li>Show the catalogapi proxy setup using the following command</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">kubectl</span> <span class="nf">describe</span> <span class="nf">pods</span> <span class="nf">catalogapi-deployment-68d56ccddd-sqfnj</span> 
</code></pre></div></div>

<ul>
  <li>Find all proxy container using the following command</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">docker</span> <span class="nf">container</span> <span class="nf">ls</span> <span class="nf">--filter</span> <span class="nf">name=istio-proxy_*</span>
</code></pre></div></div>

<ul>
  <li>Check proxy processes for the catalogapi</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">docker</span> <span class="nf">container</span> <span class="nf">ls</span> <span class="nf">--filter</span> <span class="nf">name=istio-proxy_catalogapi-deployment*</span> <span class="nf">-q</span>
</code></pre></div></div>

<p><strong>Step 8: Organize Location.API</strong></p>

<ul>
  <li>Create a Controller name CountriesController in the Controllers folder as follows.</li>
</ul>

<p><strong>CountriesController.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Location.API.Controllers</span>
<span class="p">{</span>
    <span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CountriesController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
    <span class="p">{</span>
      <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"GetAll"</span><span class="p">)]</span>
      <span class="k">public</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="nf">Get</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="kt">string</span><span class="p">[]</span> <span class="p">{</span><span class="s">"America"</span><span class="p">,</span><span class="s">"Bangladesh"</span><span class="p">,</span> <span class="s">"Canada"</span> <span class="p">};</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Add docker file in the project root directory as follows.</li>
</ul>

<p><strong>Dockerfile</strong></p>

<div class="language-Dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">FROM</span><span class="w"> </span><span class="s">mcr.microsoft.com/dotnet/aspnet:6.0</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">base</span>
<span class="k">WORKDIR</span><span class="s"> /app</span>
<span class="k">EXPOSE</span><span class="s"> 80</span>
<span class="k">EXPOSE</span><span class="s"> 443</span>

<span class="k">ENV</span><span class="s"> ASPNETCORE_URLS=http://*:80;</span>
<span class="k">ENV</span><span class="s"> ASPNETCORE_ENVIRONMENT=Development</span>

<span class="k">FROM</span><span class="w"> </span><span class="s">mcr.microsoft.com/dotnet/sdk:6.0</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">build</span>
<span class="k">WORKDIR</span><span class="s"> /src</span>

<span class="k">COPY</span><span class="s"> ["/Location.API.csproj", "Location.API/"]</span>
<span class="k">RUN </span>dotnet restore <span class="s2">"Location.API/Location.API.csproj"</span>

<span class="k">WORKDIR</span><span class="s"> "/src/Location.API"</span>
<span class="k">COPY</span><span class="s"> . .</span>
<span class="k">WORKDIR</span><span class="s"> "/src/Location.API"</span>
<span class="k">RUN </span>dotnet build <span class="s2">"Location.API.csproj"</span> <span class="nt">-c</span> Release <span class="nt">-o</span> /app/build

<span class="k">FROM</span><span class="w"> </span><span class="s">build</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">publish</span>
<span class="k">RUN </span>dotnet publish <span class="s2">"Location.API.csproj"</span> <span class="nt">-c</span> Release <span class="nt">-o</span> /app/publish

<span class="k">FROM</span><span class="w"> </span><span class="s">base</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">final</span>
<span class="k">WORKDIR</span><span class="s"> /app</span>
<span class="k">COPY</span><span class="s"> --from=publish /app/publish .</span>
<span class="k">ENTRYPOINT</span><span class="s"> ["dotnet", "Location.API.dll"]</span>
</code></pre></div></div>

<ul>
  <li>Go to the root directory where Dockerfile reside and run the following command to build docker image.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">docker</span> <span class="nf">image</span> <span class="nf">build</span> <span class="nf">-t</span> <span class="nf">mahedee</span><span class="nv">/location:1.0.1</span> <span class="nf">.</span>
</code></pre></div></div>

<ul>
  <li>To configure pod add the following to file with code in Deploy/k8s folder</li>
</ul>

<p><strong>deployment.yml</strong></p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Deployment</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">locationapi-deployment</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">matchLabels</span><span class="pi">:</span>
      <span class="na">app</span><span class="pi">:</span> <span class="s">locationapi-pod</span>
  <span class="na">template</span><span class="pi">:</span>
    <span class="na">metadata</span><span class="pi">:</span>
      <span class="na">labels</span><span class="pi">:</span>
        <span class="na">app</span><span class="pi">:</span> <span class="s">locationapi-pod</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">containers</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">locationapi-container</span>
        <span class="na">image</span><span class="pi">:</span> <span class="s">mahedee/location:1.0.1</span>
        <span class="na">resources</span><span class="pi">:</span>
          <span class="na">limits</span><span class="pi">:</span>
            <span class="na">memory</span><span class="pi">:</span> <span class="s2">"</span><span class="s">128Mi"</span> <span class="c1"># 128 mili bytes</span>
            <span class="na">cpu</span><span class="pi">:</span> <span class="s2">"</span><span class="s">500m"</span>     <span class="c1"># 500 mili cpu</span>
        <span class="na">ports</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">containerPort</span><span class="pi">:</span> <span class="m">80</span>

</code></pre></div></div>

<p><strong>service.yml</strong></p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Service</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">locationapi-service</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">app</span><span class="pi">:</span> <span class="s">locationapi-pod</span>
  <span class="na">ports</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">port</span><span class="pi">:</span> <span class="m">8002</span>
    <span class="na">targetPort</span><span class="pi">:</span> <span class="m">80</span>
  <span class="c1">#type: LoadBalancer</span>
</code></pre></div></div>

<ul>
  <li>Go to the Deploy/k8s directory and run the following commands.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">kubectl</span> <span class="nf">apply</span> <span class="nf">-f</span> <span class="nf">.\deployment.yml</span>

<span class="nf">kubectl</span> <span class="nf">apply</span> <span class="nf">-f</span> <span class="nf">.\service.yml</span>
</code></pre></div></div>

<p><strong>Step 9: Organize Ordering.API</strong></p>

<ul>
  <li>Add the following nuget packages in the project.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore.InMemory</span>
<span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore.SqlServer</span>
<span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore.Tools</span>
</code></pre></div></div>

<ul>
  <li>Create Order class in Models folders as follows.</li>
</ul>

<p><strong>Order.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">Ordering.API.Models</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Order</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Address</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="n">DateTime</span> <span class="n">OrderDate</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">string</span> <span class="n">Comments</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create Ordering OrderingContext class in Db folder.</li>
</ul>

<p><strong>OrderingContext.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.API.Models</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.API.Db</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">OrderingContext</span> <span class="p">:</span> <span class="n">DbContext</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">OrderingContext</span><span class="p">(</span><span class="n">DbContextOptions</span><span class="p">&lt;</span><span class="n">OrderingContext</span><span class="p">&gt;</span> <span class="n">options</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
        <span class="p">{</span>

        <span class="p">}</span>
        <span class="k">public</span> <span class="n">DbSet</span><span class="p">&lt;</span><span class="n">Ordering</span><span class="p">.</span><span class="n">API</span><span class="p">.</span><span class="n">Models</span><span class="p">.</span><span class="n">Order</span><span class="p">&gt;</span> <span class="n">Order</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Modify Program.cs to add dbcontext.</li>
</ul>

<p><strong>Program.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.API.Db</span><span class="p">;</span>

<span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="n">WebApplication</span><span class="p">.</span><span class="nf">CreateBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>

<span class="c1">// Add services to the container.</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">();</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddDbContext</span><span class="p">&lt;</span><span class="n">OrderingContext</span><span class="p">&gt;(</span><span class="n">opt</span> <span class="p">=&gt;</span> <span class="n">opt</span><span class="p">.</span><span class="nf">UseInMemoryDatabase</span><span class="p">(</span><span class="s">"CatalogDB"</span><span class="p">));</span>

<span class="c1">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddEndpointsApiExplorer</span><span class="p">();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddSwaggerGen</span><span class="p">();</span>

<span class="kt">var</span> <span class="n">app</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

<span class="c1">// Configure the HTTP request pipeline.</span>
<span class="k">if</span> <span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">Environment</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
<span class="p">{</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwagger</span><span class="p">();</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwaggerUI</span><span class="p">();</span>
<span class="p">}</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseHttpsRedirection</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseAuthorization</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">MapControllers</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>

</code></pre></div></div>

<ul>
  <li>Create OrdersController in Controllers folder as follows.</li>
</ul>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">#</span><span class="n">nullable</span> <span class="n">disable</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.API.Db</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.API.Models</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.API.Controllers</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
    <span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">OrdersController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">OrderingContext</span> <span class="n">_context</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">OrdersController</span><span class="p">(</span><span class="n">OrderingContext</span> <span class="n">context</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_context</span> <span class="p">=</span> <span class="n">context</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/Orders</span>
        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"GetAll"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Order</span><span class="p">&gt;&gt;&gt;</span> <span class="nf">GetOrder</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Order</span><span class="p">.</span><span class="nf">ToListAsync</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/Orders/5</span>
        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">Order</span><span class="p">&gt;&gt;</span> <span class="nf">GetOrder</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">order</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Order</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">order</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="n">order</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// PUT: api/Orders/5</span>
        <span class="c1">// To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754</span>
        <span class="p">[</span><span class="nf">HttpPut</span><span class="p">(</span><span class="s">"Edit/{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">PutOrder</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="n">Order</span> <span class="n">order</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">id</span> <span class="p">!=</span> <span class="n">order</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">_context</span><span class="p">.</span><span class="nf">Entry</span><span class="p">(</span><span class="n">order</span><span class="p">).</span><span class="n">State</span> <span class="p">=</span> <span class="n">EntityState</span><span class="p">.</span><span class="n">Modified</span><span class="p">;</span>

            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">DbUpdateConcurrencyException</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(!</span><span class="nf">OrderExists</span><span class="p">(</span><span class="n">id</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
                <span class="p">}</span>
                <span class="k">else</span>
                <span class="p">{</span>
                    <span class="k">throw</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// POST: api/Orders</span>
        <span class="c1">// To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754</span>
        <span class="p">[</span><span class="nf">HttpPost</span><span class="p">(</span><span class="s">"Add"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">Order</span><span class="p">&gt;&gt;</span> <span class="nf">PostOrder</span><span class="p">(</span><span class="n">Order</span> <span class="n">order</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_context</span><span class="p">.</span><span class="n">Order</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">order</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>

            <span class="k">return</span> <span class="nf">CreatedAtAction</span><span class="p">(</span><span class="s">"GetOrder"</span><span class="p">,</span> <span class="k">new</span> <span class="p">{</span> <span class="n">id</span> <span class="p">=</span> <span class="n">order</span><span class="p">.</span><span class="n">Id</span> <span class="p">},</span> <span class="n">order</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">// DELETE: api/Orders/5</span>
        <span class="p">[</span><span class="nf">HttpDelete</span><span class="p">(</span><span class="s">"Delete/{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">DeleteOrder</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">order</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Order</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">order</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">_context</span><span class="p">.</span><span class="n">Order</span><span class="p">.</span><span class="nf">Remove</span><span class="p">(</span><span class="n">order</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>

            <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="kt">bool</span> <span class="nf">OrderExists</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">_context</span><span class="p">.</span><span class="n">Order</span><span class="p">.</span><span class="nf">Any</span><span class="p">(</span><span class="n">e</span> <span class="p">=&gt;</span> <span class="n">e</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">id</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create Docker file in the root directory</li>
</ul>

<p><strong>Dockerfile</strong></p>

<div class="language-Dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">FROM</span><span class="w"> </span><span class="s">mcr.microsoft.com/dotnet/aspnet:6.0</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">base</span>
<span class="k">WORKDIR</span><span class="s"> /app</span>
<span class="k">EXPOSE</span><span class="s"> 80</span>
<span class="k">EXPOSE</span><span class="s"> 443</span>

<span class="k">ENV</span><span class="s"> ASPNETCORE_URLS=http://*:80;</span>
<span class="k">ENV</span><span class="s"> ASPNETCORE_ENVIRONMENT=Development</span>

<span class="k">FROM</span><span class="w"> </span><span class="s">mcr.microsoft.com/dotnet/sdk:6.0</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">build</span>
<span class="k">WORKDIR</span><span class="s"> /src</span>
<span class="k">COPY</span><span class="s"> ["/Ordering.API.csproj", "Ordering.API/"]</span>
<span class="k">RUN </span>dotnet restore <span class="s2">"Ordering.API/Ordering.API.csproj"</span>
<span class="k">WORKDIR</span><span class="s"> "/src/Ordering.API"</span>
<span class="k">COPY</span><span class="s"> . .</span>
<span class="k">WORKDIR</span><span class="s"> "/src/Ordering.API"</span>
<span class="k">RUN </span>dotnet build <span class="s2">"Ordering.API.csproj"</span> <span class="nt">-c</span> Release <span class="nt">-o</span> /app/build

<span class="k">FROM</span><span class="w"> </span><span class="s">build</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">publish</span>
<span class="k">RUN </span>dotnet publish <span class="s2">"Ordering.API.csproj"</span> <span class="nt">-c</span> Release <span class="nt">-o</span> /app/publish

<span class="k">FROM</span><span class="w"> </span><span class="s">base</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">final</span>
<span class="k">WORKDIR</span><span class="s"> /app</span>
<span class="k">COPY</span><span class="s"> --from=publish /app/publish .</span>
<span class="k">ENTRYPOINT</span><span class="s"> ["dotnet", "Ordering.API.dll"]</span>
</code></pre></div></div>

<ul>
  <li>Go to the directory where docker file exists and run the following command to build docker image.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">docker</span> <span class="nf">image</span> <span class="nf">build</span> <span class="nf">-t</span> <span class="nf">mahedee</span><span class="nv">/ordering:1.0.1</span> <span class="nf">.</span>
</code></pre></div></div>

<ul>
  <li>To configure pod add the following to file with code in Deploy/k8s folder</li>
</ul>

<p><strong>deployment.yml</strong></p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Deployment</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">locationapi-deployment</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">matchLabels</span><span class="pi">:</span>
      <span class="na">app</span><span class="pi">:</span> <span class="s">locationapi-pod</span>
  <span class="na">template</span><span class="pi">:</span>
    <span class="na">metadata</span><span class="pi">:</span>
      <span class="na">labels</span><span class="pi">:</span>
        <span class="na">app</span><span class="pi">:</span> <span class="s">locationapi-pod</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">containers</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">locationapi-container</span>
        <span class="na">image</span><span class="pi">:</span> <span class="s">mahedee/location:1.0.1</span>
        <span class="na">resources</span><span class="pi">:</span>
          <span class="na">limits</span><span class="pi">:</span>
            <span class="na">memory</span><span class="pi">:</span> <span class="s2">"</span><span class="s">128Mi"</span> <span class="c1"># 128 mili bytes</span>
            <span class="na">cpu</span><span class="pi">:</span> <span class="s2">"</span><span class="s">500m"</span>     <span class="c1"># 500 mili cpu</span>
        <span class="na">ports</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">containerPort</span><span class="pi">:</span> <span class="m">80</span>

</code></pre></div></div>

<p><strong>service.yml</strong></p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Service</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">orderingapi-service</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">app</span><span class="pi">:</span> <span class="s">orderingapi-pod</span>
  <span class="na">ports</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">port</span><span class="pi">:</span> <span class="m">8003</span>
    <span class="na">targetPort</span><span class="pi">:</span> <span class="m">80</span>
  <span class="na">type</span><span class="pi">:</span> <span class="s">LoadBalancer</span>
</code></pre></div></div>

<ul>
  <li>Go to the Deploy/k8s directory and run the following commands.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">kubectl</span> <span class="nf">apply</span> <span class="nf">-f</span> <span class="nf">.\deployment.yml</span>

<span class="nf">kubectl</span> <span class="nf">apply</span> <span class="nf">-f</span> <span class="nf">.\service.yml</span>
</code></pre></div></div>

<p><strong>Step 10: Organize API Gateway BFF.Web</strong></p>

<ul>
  <li>Install the following nuget packages in the project.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">Install-Package</span> <span class="nf">Ocelot</span>
<span class="nf">Install-Package</span> <span class="nf">Ocelot.Cache.CacheManager</span>
<span class="nf">Install-Package</span> <span class="nf">MMLib.SwaggerForOcelot</span>
<span class="nf">Install-Package</span> <span class="nf">Ocelot.Provider.Polly</span>
</code></pre></div></div>

<ul>
  <li>Create a folder name Routes/Routes.dev and add the following files in that folder</li>
</ul>

<p><strong>ocelot.catalog.api.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"Routes"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"DownstreamPathTemplate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/{everything}"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"DownstreamScheme"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"SwaggerKey"</span><span class="p">:</span><span class="w"> </span><span class="s2">"catalog"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"DownstreamHostAndPorts"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"Host"</span><span class="p">:</span><span class="w"> </span><span class="s2">"localhost"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Port"</span><span class="p">:</span><span class="w"> </span><span class="s2">"7282"</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"UpstreamPathTemplate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/catalog/{everything}"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"UpstreamHttpMethod"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"GET"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"POST"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"PUT"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"DELETE"</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<p><strong>ocelot.location.api.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"Routes"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"DownstreamPathTemplate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/{everything}"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"DownstreamScheme"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"SwaggerKey"</span><span class="p">:</span><span class="w"> </span><span class="s2">"location"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"DownstreamHostAndPorts"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"Host"</span><span class="p">:</span><span class="w"> </span><span class="s2">"localhost"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Port"</span><span class="p">:</span><span class="w"> </span><span class="s2">"7003"</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"UpstreamPathTemplate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/location/{everything}"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"UpstreamHttpMethod"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"GET"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"POST"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"PUT"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"DELETE"</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p><strong>ocelot.ordering.api.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"Routes"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"DownstreamPathTemplate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/{everything}"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"DownstreamScheme"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"SwaggerKey"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ordering"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"DownstreamHostAndPorts"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"Host"</span><span class="p">:</span><span class="w"> </span><span class="s2">"localhost"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Port"</span><span class="p">:</span><span class="w"> </span><span class="s2">"7126"</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"UpstreamPathTemplate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/ordering/{everything}"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"UpstreamHttpMethod"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"GET"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"POST"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"PUT"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"DELETE"</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<p><strong>ocelot.global.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"GlobalConfiguration"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"BaseUrl"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://localhost:5205"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p><strong>ocelot.SwaggerEndPoints.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"SwaggerEndPoints"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"bffweb"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"TransformByOcelotConfig"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Config"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"Name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"BFF.Web"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1.0"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://localhost:5205/swagger/v1/swagger.json"</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"location"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"TransformByOcelotConfig"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Config"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"Name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Location.API"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1.0"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://localhost:5205/location/swagger/v1/swagger.json"</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"catalog"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"TransformByOcelotConfig"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Config"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"Name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Catalog.API"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1.0"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://localhost:5205/catalog/swagger/v1/swagger.json"</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ordering"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"TransformByOcelotConfig"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Config"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"Name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Ordering.API"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1.0"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://localhost:5205/ordering/swagger/v1/swagger.json"</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<ul>
  <li>Create a folder name Routes/Routes.prod and add the following files in that folder</li>
</ul>

<p><strong>ocelot.catalog.api.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"Routes"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"DownstreamPathTemplate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/{everything}"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"DownstreamScheme"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"SwaggerKey"</span><span class="p">:</span><span class="w"> </span><span class="s2">"catalog"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"DownstreamHostAndPorts"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"Host"</span><span class="p">:</span><span class="w"> </span><span class="s2">"catalogapi-service"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Port"</span><span class="p">:</span><span class="w"> </span><span class="s2">"8001"</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"UpstreamPathTemplate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/catalog/{everything}"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"UpstreamHttpMethod"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"GET"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"POST"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"PUT"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"DELETE"</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">


</span></code></pre></div></div>

<p><strong>ocelot.location.api.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"Routes"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"DownstreamPathTemplate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/{everything}"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"DownstreamScheme"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"SwaggerKey"</span><span class="p">:</span><span class="w"> </span><span class="s2">"location"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"DownstreamHostAndPorts"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"Host"</span><span class="p">:</span><span class="w"> </span><span class="s2">"locationapi-service"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Port"</span><span class="p">:</span><span class="w"> </span><span class="s2">"8002"</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"UpstreamPathTemplate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/location/{everything}"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"UpstreamHttpMethod"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"GET"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"POST"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"PUT"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"DELETE"</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<p><strong>ocelot.ordering.api.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"Routes"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"DownstreamPathTemplate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/{everything}"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"DownstreamScheme"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"SwaggerKey"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ordering"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"DownstreamHostAndPorts"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"Host"</span><span class="p">:</span><span class="w"> </span><span class="s2">"orderingapi-service"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Port"</span><span class="p">:</span><span class="w"> </span><span class="s2">"8003"</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"UpstreamPathTemplate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/ordering/{everything}"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"UpstreamHttpMethod"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"GET"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"POST"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"PUT"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"DELETE"</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">


</span></code></pre></div></div>

<p><strong>ocelot.global.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"GlobalConfiguration"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"BaseUrl"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://bffweb-service:8011"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<p><strong>ocelot.SwaggerEndPoints.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"SwaggerEndPoints"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"bffweb"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"TransformByOcelotConfig"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Config"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"Name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"BFF.Web"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1.0"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://bffweb-service:8011/swagger/v1/swagger.json"</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"location"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"TransformByOcelotConfig"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Config"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"Name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Location.API"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1.0"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://bffweb-service:8011/location/swagger/v1/swagger.json"</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"catalog"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"TransformByOcelotConfig"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Config"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"Name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Catalog.API"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1.0"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://bffweb-service:8011/catalog/swagger/v1/swagger.json"</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ordering"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"TransformByOcelotConfig"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Config"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"Name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Ordering.API"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1.0"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://bffweb-service:8011/catalog/swagger/v1/swagger.json"</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<ul>
  <li>Add AlterUpstream Class in Config Folder</li>
</ul>

<p><strong>AlterUpstream.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Newtonsoft.Json</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Newtonsoft.Json.Linq</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">BFF.Web.Config</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">AlterUpstream</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">static</span> <span class="kt">string</span> <span class="nf">AlterUpstreamSwaggerJson</span><span class="p">(</span><span class="n">HttpContext</span> <span class="n">context</span><span class="p">,</span> <span class="kt">string</span> <span class="n">swaggerJson</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">swagger</span> <span class="p">=</span> <span class="n">JObject</span><span class="p">.</span><span class="nf">Parse</span><span class="p">(</span><span class="n">swaggerJson</span><span class="p">);</span>
            <span class="c1">// ... alter upstream json</span>
            <span class="k">return</span> <span class="n">swagger</span><span class="p">.</span><span class="nf">ToString</span><span class="p">(</span><span class="n">Formatting</span><span class="p">.</span><span class="n">Indented</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>
<ul>
  <li>Modify Program.cs to configure ocelot</li>
</ul>

<p><strong>Program.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Catalog.API.Db</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="n">WebApplication</span><span class="p">.</span><span class="nf">CreateBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>

<span class="c1">// Add services to the container.</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">();</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddDbContext</span><span class="p">&lt;</span><span class="n">CatalogContext</span><span class="p">&gt;(</span><span class="n">opt</span> <span class="p">=&gt;</span> <span class="n">opt</span><span class="p">.</span><span class="nf">UseInMemoryDatabase</span><span class="p">(</span><span class="s">"CatalogDB"</span><span class="p">));</span>

<span class="c1">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddEndpointsApiExplorer</span><span class="p">();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddSwaggerGen</span><span class="p">();</span>

<span class="kt">var</span> <span class="n">app</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

<span class="c1">// Configure the HTTP request pipeline.</span>
<span class="k">if</span> <span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">Environment</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
<span class="p">{</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwagger</span><span class="p">();</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwaggerUI</span><span class="p">();</span>
<span class="p">}</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseHttpsRedirection</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseAuthorization</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">MapControllers</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>

</code></pre></div></div>

<ul>
  <li>Add docker file in the root directory.</li>
</ul>

<p><strong>Dockerfile</strong></p>

<div class="language-Dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#See https://aka.ms/containerfastmode to understand how Visual Studio uses this Dockerfile to build your images for faster debugging.</span>

<span class="k">FROM</span><span class="w"> </span><span class="s">mcr.microsoft.com/dotnet/aspnet:6.0</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">base</span>
<span class="k">WORKDIR</span><span class="s"> /app</span>
<span class="k">EXPOSE</span><span class="s"> 80</span>
<span class="k">EXPOSE</span><span class="s"> 443</span>

<span class="k">ENV</span><span class="s"> ASPNETCORE_URLS=http://*:80;</span>
<span class="k">ENV</span><span class="s"> ASPNETCORE_ENVIRONMENT=Development</span>

<span class="k">FROM</span><span class="w"> </span><span class="s">mcr.microsoft.com/dotnet/sdk:6.0</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">build</span>
<span class="k">WORKDIR</span><span class="s"> /src</span>
<span class="k">COPY</span><span class="s"> ["/BFF.Web.csproj", "BFF.Web/"]</span>
<span class="k">RUN </span>dotnet restore <span class="s2">"BFF.Web/BFF.Web.csproj"</span>

<span class="k">WORKDIR</span><span class="s"> "/src/BFF.Web"</span>
<span class="k">COPY</span><span class="s"> . .</span>
<span class="k">WORKDIR</span><span class="s"> "/src/BFF.Web"</span>
<span class="k">RUN </span>dotnet build <span class="s2">"BFF.Web.csproj"</span> <span class="nt">-c</span> Release <span class="nt">-o</span> /app/build

<span class="k">FROM</span><span class="w"> </span><span class="s">build</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">publish</span>
<span class="k">RUN </span>dotnet publish <span class="s2">"BFF.Web.csproj"</span> <span class="nt">-c</span> Release <span class="nt">-o</span> /app/publish

<span class="k">FROM</span><span class="w"> </span><span class="s">base</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">final</span>
<span class="k">WORKDIR</span><span class="s"> /app</span>
<span class="k">COPY</span><span class="s"> --from=publish /app/publish .</span>
<span class="k">ENTRYPOINT</span><span class="s"> ["dotnet", "BFF.Web.dll"]</span>
</code></pre></div></div>

<ul>
  <li>Go to director where dockerfile reside and run the following command to build docker image.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">docker</span> <span class="nf">image</span> <span class="nf">build</span> <span class="nf">-t</span> <span class="nf">mahedee</span><span class="nv">/bff.web:1.0.1</span> <span class="nf">.</span>
</code></pre></div></div>

<ul>
  <li>To configure pod and service add the following yml file with code in Deploy/k8s folder</li>
</ul>

<p><strong>deployment.yml</strong></p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Deployment</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">bffweb-deployment</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">matchLabels</span><span class="pi">:</span>
      <span class="na">app</span><span class="pi">:</span> <span class="s">bffweb-pod</span>
  <span class="na">template</span><span class="pi">:</span>
    <span class="na">metadata</span><span class="pi">:</span>
      <span class="na">labels</span><span class="pi">:</span>
        <span class="na">app</span><span class="pi">:</span> <span class="s">bffweb-pod</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">containers</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">bffweb-container</span>
        <span class="na">image</span><span class="pi">:</span> <span class="s">mahedee/bff.web:1.0.1</span>
        <span class="na">resources</span><span class="pi">:</span>
          <span class="na">limits</span><span class="pi">:</span>
            <span class="na">memory</span><span class="pi">:</span> <span class="s2">"</span><span class="s">128Mi"</span>
            <span class="na">cpu</span><span class="pi">:</span> <span class="s2">"</span><span class="s">500m"</span>
        <span class="na">ports</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">containerPort</span><span class="pi">:</span> <span class="m">80</span>

<span class="nn">---</span>

<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Service</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">bffweb-service</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">app</span><span class="pi">:</span> <span class="s">bffweb-pod</span>
  <span class="na">ports</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">port</span><span class="pi">:</span> <span class="m">8011</span>
    <span class="na">targetPort</span><span class="pi">:</span> <span class="m">80</span>
  <span class="na">type</span><span class="pi">:</span> <span class="s">LoadBalancer</span>


</code></pre></div></div>

<ul>
  <li>Go to the Deploy/k8s directory and run the following commands.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">kubectl</span> <span class="nf">apply</span> <span class="nf">-f</span> <span class="nf">.\deployment.yml</span>
</code></pre></div></div>

<ul>
  <li>Now you can running services using in the kubernetes using the following command</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">kubectl</span> <span class="nb">get</span> <span class="nf">svc</span>
</code></pre></div></div>

<p>Output:</p>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nf">NAME</span>                  <span class="nf">TYPE</span>           <span class="nf">CLUSTER-IP</span>       <span class="nf">EXTERNAL-IP</span>   <span class="nf">PORT</span><span class="s">(S)</span>          <span class="nf">AGE</span>
<span class="nf">bffweb-service</span>        <span class="nf">LoadBalancer</span>   <span class="nf">10.111.186.235</span>   <span class="nf">localhost</span>     <span class="nf">8011:31690</span><span class="nv">/TCP</span>   <span class="nf">10m</span>
<span class="nf">catalogapi-service</span>    <span class="nf">LoadBalancer</span>   <span class="nf">10.101.130.94</span>    <span class="nf">localhost</span>     <span class="nf">8001:30710</span><span class="nv">/TCP</span>   <span class="nf">138m</span>
<span class="nf">kubernetes</span>            <span class="nf">ClusterIP</span>      <span class="nf">10.96.0.1</span>        <span class="p">&lt;</span><span class="nf">none</span><span class="p">&gt;</span>        <span class="mf">443</span><span class="nv">/TCP</span>          <span class="nf">3d20h</span>
<span class="nf">locationapi-service</span>   <span class="nf">ClusterIP</span>      <span class="nf">10.100.204.33</span>    <span class="p">&lt;</span><span class="nf">none</span><span class="p">&gt;</span>        <span class="mf">8002</span><span class="nv">/TCP</span>         <span class="nf">7m57s</span>
<span class="nf">orderingapi-service</span>   <span class="nf">LoadBalancer</span>   <span class="nf">10.96.12.11</span>      <span class="nf">localhost</span>     <span class="nf">8003:31264</span><span class="nv">/TCP</span>   <span class="nf">15m</span>

</code></pre></div></div>

<ul>
  <li>
    <p>You can now access catalog api, location api and ordering api using bffweb’s swagger defination</p>
  </li>
  <li>
    <p>Check all end point using api gateway and swagger using the following URL</p>
  </li>
</ul>

<p>http://localhost:8011/swagger/index.html</p>

<p>Select Swagger definition from top right corner of BFF</p>

<p><strong>Visualizing Service Mesh</strong></p>

<p><strong>Step 11: Install Kiali dashboard</strong></p>

<ul>
  <li>Go to the Istio’s directory. Install Kiali and other addons and wait for them to be deployed. Execute below command inside Istio folder. Use Git bash instead of powershell.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">kubectl</span> <span class="nf">apply</span> <span class="nf">-f</span> <span class="nf">samples</span><span class="nv">/addons</span>
</code></pre></div></div>

<ul>
  <li>Execute below command and wait till get success roll out message.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">kubectl</span> <span class="nf">rollout</span> <span class="nf">status</span> <span class="nf">deployment</span><span class="nv">/kiali</span> <span class="nf">-n</span> <span class="nf">istio-system</span>
</code></pre></div></div>

<p>Note: If there are errors trying to install the addons, try running the command again. There may be some timing issues which will be resolved when the command is run again.</p>

<ul>
  <li>Verify the deployment with below command.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">kubectl</span> <span class="nb">get</span> <span class="nf">po</span> <span class="nf">-n</span> <span class="nf">istio-system</span>
</code></pre></div></div>

<p>Output:</p>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">NAME</span>                                    <span class="nf">READY</span>   <span class="nf">STATUS</span>    <span class="nf">RESTARTS</span>   <span class="nf">AGE</span>
<span class="nf">grafana-6ccd56f4b6-sc894</span>                <span class="mf">1</span><span class="nv">/1</span>     <span class="nf">Running</span>   <span class="mf">0</span>          <span class="nf">13m</span>
<span class="nf">istio-egressgateway-c9cbbd99f-wk265</span>     <span class="mf">1</span><span class="nv">/1</span>     <span class="nf">Running</span>   <span class="mf">0</span>          <span class="nf">87m</span>
<span class="nf">istio-ingressgateway-7c8bc47b49-xpvvc</span>   <span class="mf">1</span><span class="nv">/1</span>     <span class="nf">Running</span>   <span class="mf">0</span>          <span class="nf">87m</span>
<span class="nf">istiod-765596f7ff-2p72v</span>                 <span class="mf">1</span><span class="nv">/1</span>     <span class="nf">Running</span>   <span class="mf">0</span>          <span class="nf">89m</span>
<span class="nf">jaeger-5d44bc5c5d-g2wcl</span>                 <span class="mf">1</span><span class="nv">/1</span>     <span class="nf">Running</span>   <span class="mf">0</span>          <span class="nf">13m</span>
<span class="nf">kiali-79b86ff5bc-cqwrp</span>                  <span class="mf">1</span><span class="nv">/1</span>     <span class="nf">Running</span>   <span class="mf">0</span>          <span class="nf">13m</span>
<span class="nf">prometheus-64fd8ccd65-lglld</span>             <span class="mf">2</span><span class="nv">/2</span>     <span class="nf">Running</span>   <span class="mf">0</span>          <span class="nf">13m</span>
</code></pre></div></div>

<ul>
  <li>Now run the Kiali dashboard using the below command</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">istioctl</span> <span class="nf">dashboard</span> <span class="nf">kiali</span>
</code></pre></div></div>
<p>Kiali dashboard will be open.</p>

<p>Hit the gateway URL. Use the following URL and hit several times and you will get the reflect in kiali dashbaord as below.</p>

<p>http://localhost:8011/swagger/index.html</p>

<p>Select Swagger definition from top right corner of BFF</p>

<p><img src="/assets/images/posts/2022/Kiali.PNG" alt="" /></p>

<p><strong>Step 12: Monitoring with Prometheus &amp; Grafana</strong></p>

<ul>
  <li>Check Prometheus and Grafana is running using the following command.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">kubectl</span> <span class="nb">get</span> <span class="nf">po</span> <span class="nf">-n</span> <span class="nf">istio-system</span>
</code></pre></div></div>

<ul>
  <li>Run Prometheus dashboard using the following command</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">istioctl</span> <span class="nf">dashboard</span> <span class="nf">prometheus</span>
</code></pre></div></div>

<p>View graph in diffrent ways like -</p>

<ul>
  <li>Select istio_requests_total.</li>
  <li>Switch to Graph.</li>
  <li>Check Status/Targets - Kubernetes service discovery.</li>
</ul>

<p><img src="/assets/images/posts/2022/Prometheus.PNG" alt="" /></p>

<ul>
  <li>Run Grafana dashboard using the following command</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">istioctl</span> <span class="nf">dashboard</span> <span class="nf">grafana</span>
</code></pre></div></div>
<ul>
  <li>Go to Dashboar-&gt;Manage-&gt;Istio and see the dashboar as below.</li>
</ul>

<p><img src="/assets/images/posts/2022/Grafana.PNG" alt="" /></p>

<p><strong>Step 13: Distributed Tracing using Jaegar UI</strong></p>

<ul>
  <li>Run Jaeger UI using the following command</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">istioctl</span> <span class="nf">dashboard</span> <span class="nf">jaeger</span>
</code></pre></div></div>

<p><img src="/assets/images/posts/2022/jaeger.PNG" alt="" /></p>

<p><strong>Step 14: Logging from Istio and Envoy</strong></p>

<ul>
  <li>Create a YAML file and name the file elasticsearch.yaml  and write below code.</li>
</ul>

<p><strong>elasticsearch.yaml</strong></p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Logging Namespace. All below are a part of this namespace.</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Namespace</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">logging</span>
<span class="nn">---</span>
<span class="c1"># Elasticsearch Service</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Service</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">elasticsearch</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">logging</span>
  <span class="na">labels</span><span class="pi">:</span>
    <span class="na">app</span><span class="pi">:</span> <span class="s">elasticsearch</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">ports</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">port</span><span class="pi">:</span> <span class="m">9200</span>
    <span class="na">protocol</span><span class="pi">:</span> <span class="s">TCP</span>
    <span class="na">targetPort</span><span class="pi">:</span> <span class="s">db</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">app</span><span class="pi">:</span> <span class="s">elasticsearch</span>
<span class="nn">---</span>
<span class="c1"># Elasticsearch Deployment</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Deployment</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">elasticsearch</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">logging</span>
  <span class="na">labels</span><span class="pi">:</span>
    <span class="na">app</span><span class="pi">:</span> <span class="s">elasticsearch</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">replicas</span><span class="pi">:</span> <span class="m">1</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">matchLabels</span><span class="pi">:</span>
      <span class="na">app</span><span class="pi">:</span> <span class="s">elasticsearch</span>
  <span class="na">template</span><span class="pi">:</span>
    <span class="na">metadata</span><span class="pi">:</span>
      <span class="na">labels</span><span class="pi">:</span>
        <span class="na">app</span><span class="pi">:</span> <span class="s">elasticsearch</span>
      <span class="na">annotations</span><span class="pi">:</span>
        <span class="na">sidecar.istio.io/inject</span><span class="pi">:</span> <span class="s2">"</span><span class="s">false"</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">containers</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">image</span><span class="pi">:</span> <span class="s">docker.elastic.co/elasticsearch/elasticsearch-oss:6.1.1</span>
        <span class="na">name</span><span class="pi">:</span> <span class="s">elasticsearch</span>
        <span class="na">resources</span><span class="pi">:</span>
          <span class="c1"># need more cpu upon initialization, therefore burstable class</span>
          <span class="na">limits</span><span class="pi">:</span>
            <span class="na">cpu</span><span class="pi">:</span> <span class="s">1000m</span>
          <span class="na">requests</span><span class="pi">:</span>
            <span class="na">cpu</span><span class="pi">:</span> <span class="s">100m</span>
        <span class="na">env</span><span class="pi">:</span>
          <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">discovery.type</span>
            <span class="na">value</span><span class="pi">:</span> <span class="s">single-node</span>
        <span class="na">ports</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">containerPort</span><span class="pi">:</span> <span class="m">9200</span>
          <span class="na">name</span><span class="pi">:</span> <span class="s">db</span>
          <span class="na">protocol</span><span class="pi">:</span> <span class="s">TCP</span>
        <span class="pi">-</span> <span class="na">containerPort</span><span class="pi">:</span> <span class="m">9300</span>
          <span class="na">name</span><span class="pi">:</span> <span class="s">transport</span>
          <span class="na">protocol</span><span class="pi">:</span> <span class="s">TCP</span>
        <span class="na">volumeMounts</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">elasticsearch</span>
          <span class="na">mountPath</span><span class="pi">:</span> <span class="s">/data</span>
      <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">elasticsearch</span>
        <span class="na">emptyDir</span><span class="pi">:</span> <span class="pi">{}</span>

</code></pre></div></div>
<ul>
  <li>Create a YAML file and name the file kibana.yaml  and write below code.</li>
</ul>

<p><strong>kibana.yaml</strong></p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Kibana Service</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Service</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">kibana</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">logging</span>
  <span class="na">labels</span><span class="pi">:</span>
    <span class="na">app</span><span class="pi">:</span> <span class="s">kibana</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">ports</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">port</span><span class="pi">:</span> <span class="m">5601</span>
    <span class="na">protocol</span><span class="pi">:</span> <span class="s">TCP</span>
    <span class="na">targetPort</span><span class="pi">:</span> <span class="s">ui</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">app</span><span class="pi">:</span> <span class="s">kibana</span>
<span class="nn">---</span>
<span class="c1"># Kibana Deployment</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Deployment</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">kibana</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">logging</span>
  <span class="na">labels</span><span class="pi">:</span>
    <span class="na">app</span><span class="pi">:</span> <span class="s">kibana</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">replicas</span><span class="pi">:</span> <span class="m">1</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">matchLabels</span><span class="pi">:</span>
      <span class="na">app</span><span class="pi">:</span> <span class="s">kibana</span>
  <span class="na">template</span><span class="pi">:</span>
    <span class="na">metadata</span><span class="pi">:</span>
      <span class="na">labels</span><span class="pi">:</span>
        <span class="na">app</span><span class="pi">:</span> <span class="s">kibana</span>
      <span class="na">annotations</span><span class="pi">:</span>
        <span class="na">sidecar.istio.io/inject</span><span class="pi">:</span> <span class="s2">"</span><span class="s">false"</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">containers</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">kibana</span>
        <span class="na">image</span><span class="pi">:</span> <span class="s">docker.elastic.co/kibana/kibana-oss:6.1.1</span>
        <span class="na">resources</span><span class="pi">:</span>
          <span class="c1"># need more cpu upon initialization, therefore burstable class</span>
          <span class="na">limits</span><span class="pi">:</span>
            <span class="na">cpu</span><span class="pi">:</span> <span class="s">1000m</span>
          <span class="na">requests</span><span class="pi">:</span>
            <span class="na">cpu</span><span class="pi">:</span> <span class="s">100m</span>
        <span class="na">env</span><span class="pi">:</span>
          <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">ELASTICSEARCH_URL</span>
            <span class="na">value</span><span class="pi">:</span> <span class="s">http://elasticsearch:9200</span>
        <span class="na">ports</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">containerPort</span><span class="pi">:</span> <span class="m">5601</span>
          <span class="na">name</span><span class="pi">:</span> <span class="s">ui</span>
          <span class="na">protocol</span><span class="pi">:</span> <span class="s">TCP</span>
<span class="nn">---</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">networking.istio.io/v1alpha3</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Gateway</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">kibana-gateway</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">logging</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">istio</span><span class="pi">:</span> <span class="s">ingressgateway</span>
  <span class="na">servers</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">port</span><span class="pi">:</span>
      <span class="na">number</span><span class="pi">:</span> <span class="m">15033</span>
      <span class="na">name</span><span class="pi">:</span> <span class="s">http-kibana</span>
      <span class="na">protocol</span><span class="pi">:</span> <span class="s">HTTP</span>
    <span class="na">hosts</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s2">"</span><span class="s">*"</span>
<span class="nn">---</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">networking.istio.io/v1alpha3</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">VirtualService</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">kibana-vs</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">logging</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">hosts</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s2">"</span><span class="s">*"</span>
  <span class="na">gateways</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">kibana-gateway</span>
  <span class="na">http</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">match</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">port</span><span class="pi">:</span> <span class="m">15033</span>
    <span class="na">route</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">destination</span><span class="pi">:</span>
        <span class="na">host</span><span class="pi">:</span> <span class="s">kibana</span>
        <span class="na">port</span><span class="pi">:</span>
          <span class="na">number</span><span class="pi">:</span> <span class="m">5601</span>

</code></pre></div></div>

<ul>
  <li>Create a YAML file and name the file fluentd.yaml  and write below code.</li>
</ul>

<p><strong>fluentd.yaml</strong></p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">ServiceAccount</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">fluentd</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">kube-system</span>
<span class="nn">---</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">rbac.authorization.k8s.io/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">ClusterRole</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">fluentd</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">kube-system</span>
<span class="na">rules</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">apiGroups</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">"</span>
    <span class="na">resources</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">pods</span>
      <span class="pi">-</span> <span class="s">namespaces</span>
    <span class="na">verbs</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">get</span>
      <span class="pi">-</span> <span class="s">list</span>
      <span class="pi">-</span> <span class="s">watch</span>
<span class="nn">---</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">ClusterRoleBinding</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">rbac.authorization.k8s.io/v1</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">fluentd</span>
<span class="na">roleRef</span><span class="pi">:</span>
  <span class="na">kind</span><span class="pi">:</span> <span class="s">ClusterRole</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">fluentd</span>
  <span class="na">apiGroup</span><span class="pi">:</span> <span class="s">rbac.authorization.k8s.io</span>
<span class="na">subjects</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">kind</span><span class="pi">:</span> <span class="s">ServiceAccount</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">fluentd</span>
    <span class="na">namespace</span><span class="pi">:</span> <span class="s">kube-system</span>
<span class="nn">---</span>
<span class="c1"># Fluentd Service</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Service</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">fluentd-es</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">kube-system</span>
  <span class="na">labels</span><span class="pi">:</span>
    <span class="na">app</span><span class="pi">:</span> <span class="s">fluentd-es</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">ports</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">fluentd-tcp</span>
      <span class="na">port</span><span class="pi">:</span> <span class="m">24224</span>
      <span class="na">protocol</span><span class="pi">:</span> <span class="s">TCP</span>
      <span class="na">targetPort</span><span class="pi">:</span> <span class="m">24224</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">fluentd-udp</span>
      <span class="na">port</span><span class="pi">:</span> <span class="m">24224</span>
      <span class="na">protocol</span><span class="pi">:</span> <span class="s">UDP</span>
      <span class="na">targetPort</span><span class="pi">:</span> <span class="m">24224</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">k8s-app</span><span class="pi">:</span> <span class="s">fluentd-logging</span>
<span class="nn">---</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">DaemonSet</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">fluentd</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">kube-system</span>
  <span class="na">labels</span><span class="pi">:</span>
    <span class="na">k8s-app</span><span class="pi">:</span> <span class="s">fluentd-logging</span>
    <span class="na">version</span><span class="pi">:</span> <span class="s">v1</span>
    <span class="na">kubernetes.io/cluster-service</span><span class="pi">:</span> <span class="s2">"</span><span class="s">true"</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">matchLabels</span><span class="pi">:</span>
      <span class="na">k8s-app</span><span class="pi">:</span> <span class="s">fluentd-logging</span>
  <span class="na">template</span><span class="pi">:</span>
    <span class="na">metadata</span><span class="pi">:</span>
      <span class="na">labels</span><span class="pi">:</span>
        <span class="na">k8s-app</span><span class="pi">:</span> <span class="s">fluentd-logging</span>
        <span class="na">version</span><span class="pi">:</span> <span class="s">v1</span>
        <span class="na">kubernetes.io/cluster-service</span><span class="pi">:</span> <span class="s2">"</span><span class="s">true"</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">serviceAccount</span><span class="pi">:</span> <span class="s">fluentd</span>
      <span class="na">serviceAccountName</span><span class="pi">:</span> <span class="s">fluentd</span>
      <span class="na">tolerations</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">key</span><span class="pi">:</span> <span class="s">node-role.kubernetes.io/master</span>
          <span class="na">effect</span><span class="pi">:</span> <span class="s">NoSchedule</span>
      <span class="na">containers</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">fluentd</span>
          <span class="na">image</span><span class="pi">:</span> <span class="s">fluent/fluentd-kubernetes-daemonset:v1.3-debian-elasticsearch</span>
          <span class="na">env</span><span class="pi">:</span>
            <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">FLUENT_ELASTICSEARCH_HOST</span>
              <span class="na">value</span><span class="pi">:</span> <span class="s2">"</span><span class="s">elasticsearch.logging"</span>
            <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">FLUENT_ELASTICSEARCH_PORT</span>
              <span class="na">value</span><span class="pi">:</span> <span class="s2">"</span><span class="s">9200"</span>
            <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">FLUENT_ELASTICSEARCH_SCHEME</span>
              <span class="na">value</span><span class="pi">:</span> <span class="s2">"</span><span class="s">http"</span>
            <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">FLUENT_UID</span>
              <span class="na">value</span><span class="pi">:</span> <span class="s2">"</span><span class="s">0"</span>
          <span class="na">resources</span><span class="pi">:</span>
            <span class="na">limits</span><span class="pi">:</span>
              <span class="na">memory</span><span class="pi">:</span> <span class="s">200Mi</span>
            <span class="na">requests</span><span class="pi">:</span>
              <span class="na">cpu</span><span class="pi">:</span> <span class="s">100m</span>
              <span class="na">memory</span><span class="pi">:</span> <span class="s">200Mi</span>
          <span class="na">volumeMounts</span><span class="pi">:</span>
            <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">varlog</span>
              <span class="na">mountPath</span><span class="pi">:</span> <span class="s">/var/log</span>
            <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">varlibdockercontainers</span>
              <span class="na">mountPath</span><span class="pi">:</span> <span class="s">/var/lib/docker/containers</span>
              <span class="na">readOnly</span><span class="pi">:</span> <span class="no">true</span>
      <span class="na">terminationGracePeriodSeconds</span><span class="pi">:</span> <span class="m">30</span>
      <span class="na">volumes</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">varlog</span>
          <span class="na">hostPath</span><span class="pi">:</span>
            <span class="na">path</span><span class="pi">:</span> <span class="s">/var/log</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">varlibdockercontainers</span>
          <span class="na">hostPath</span><span class="pi">:</span>
            <span class="na">path</span><span class="pi">:</span> <span class="s">/var/lib/docker/containers</span>


</code></pre></div></div>

<ul>
  <li>Now execute all above file with below commands.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">kubectl</span> <span class="nf">apply</span> <span class="nf">-f</span> <span class="nf">elasticsearch.yaml</span>

<span class="nf">kubectl</span> <span class="nf">apply</span> <span class="nf">-f</span> <span class="nf">kibana.yaml</span>

<span class="nf">kubectl</span> <span class="nf">apply</span> <span class="nf">-f</span> <span class="nf">fluentd.yaml</span>

<span class="nf">kubectl</span> <span class="nb">get</span> <span class="nf">pods</span> <span class="nf">-n</span> <span class="nf">logging</span>

</code></pre></div></div>

<ul>
  <li>If you are using docker desktop you can use below command to port forward.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">kubectl</span> <span class="nf">port-forward</span> <span class="nf">svc</span><span class="nv">/kibana</span> <span class="nf">8099:5601</span> <span class="nf">-n</span> <span class="nf">logging</span>
</code></pre></div></div>

<ul>
  <li>Now browse kibana using http://localhost:8099/</li>
</ul>

<p><img src="/assets/images/posts/2022/kibana.PNG" alt="" /></p>

<p><strong>Step 15: Configure Istio to Log to Fluentd</strong></p>

<p>Now we are going to configure Istio to use the same FluentD instance, and send proxy logs through FluentD into Elasticsearch.
It will be actual adapter configuration that I mentioned earler.</p>

<ul>
  <li>Create a YAMl file and name the file fluentd-istio.yaml and write below code.</li>
</ul>

<p><strong>fluentd-istio.yaml</strong></p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Configuration for logentry instances</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">config.istio.io/v1alpha2</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">instance</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">newlog</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">istio-system</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">compiledTemplate</span><span class="pi">:</span> <span class="s">logentry</span>
  <span class="na">params</span><span class="pi">:</span>
    <span class="na">severity</span><span class="pi">:</span> <span class="s1">'</span><span class="s">"info"'</span>
    <span class="na">timestamp</span><span class="pi">:</span> <span class="s">request.time</span>
    <span class="na">variables</span><span class="pi">:</span>
      <span class="na">source</span><span class="pi">:</span> <span class="s">source.labels["app"] | source.workload.name | "unknown"</span>
      <span class="na">user</span><span class="pi">:</span> <span class="s">source.user | "unknown"</span>
      <span class="na">destination</span><span class="pi">:</span> <span class="s">destination.labels["app"] | destination.workload.name | "unknown"</span>
      <span class="na">responseCode</span><span class="pi">:</span> <span class="s">response.code | </span><span class="m">0</span>
      <span class="na">responseSize</span><span class="pi">:</span> <span class="s">response.size | </span><span class="m">0</span>
      <span class="na">latency</span><span class="pi">:</span> <span class="s">response.duration | "0ms"</span>
    <span class="na">monitored_resource_type</span><span class="pi">:</span> <span class="s1">'</span><span class="s">"UNSPECIFIED"'</span>
<span class="nn">---</span>
<span class="c1"># Configuration for a Fluentd handler</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">config.istio.io/v1alpha2</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">handler</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">handler</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">istio-system</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">compiledAdapter</span><span class="pi">:</span> <span class="s">fluentd</span>
  <span class="na">params</span><span class="pi">:</span>
    <span class="na">address</span><span class="pi">:</span> <span class="s2">"</span><span class="s">fluentd-es.kube-system:24224"</span>
<span class="nn">---</span>
<span class="c1"># Rule to send logentry instances to the Fluentd handler</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">config.istio.io/v1alpha2</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">rule</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">newlogtofluentd</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">istio-system</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">match</span><span class="pi">:</span> <span class="s2">"</span><span class="s">true"</span> <span class="c1"># match for all requests</span>
  <span class="na">actions</span><span class="pi">:</span>
   <span class="pi">-</span> <span class="na">handler</span><span class="pi">:</span> <span class="s">handler</span>
     <span class="na">instances</span><span class="pi">:</span>
     <span class="pi">-</span> <span class="s">newlog</span>
<span class="nn">---</span>

</code></pre></div></div>

<ul>
  <li>Apply the below command</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">kubectl</span> <span class="nf">apply</span> <span class="nf">-f</span> <span class="nf">fluentd-istio.yaml</span>
</code></pre></div></div>

<ul>
  <li>Filter on search with kubernetes.container.name is istio-proxy  and we will see logs fron istio proxy.</li>
</ul>

<p><strong>Some commands you may need</strong></p>

<p><strong>Kubectl Commands</strong></p>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">kubectl</span> <span class="nb">get</span> <span class="nf">ns</span>                   <span class="err">//</span> <span class="nf">Get</span> <span class="nf">all</span> <span class="nf">namesapces</span>

<span class="nf">kubectl</span> <span class="nb">get</span> <span class="nf">svc</span> <span class="nf">-n</span> <span class="nf">istio-system</span>   <span class="err">//</span> <span class="nf">Get</span> <span class="nf">services</span> <span class="nf">under</span> <span class="nf">istio-system</span> <span class="nf">name</span> <span class="nf">space</span>

<span class="nf">kubectl</span> <span class="nb">get</span> <span class="nf">all</span> <span class="nf">-n</span> <span class="nf">istio-system</span>   <span class="err">//</span> <span class="nf">Get</span> <span class="nf">all</span> <span class="nf">under</span> <span class="nf">istio-system</span> <span class="nf">name</span> <span class="nf">space</span>

<span class="nf">kubectl</span> <span class="nf">delete</span> <span class="nf">ns</span> <span class="nf">istio-system</span>    <span class="err">//</span> <span class="nf">Delete</span> <span class="nf">namespace</span> <span class="nf">name</span> <span class="nf">istio-system</span>

<span class="nf">kubectl</span> <span class="nb">get</span> <span class="nf">all</span>                   <span class="err">//</span> <span class="nf">Get</span> <span class="nf">everything</span> <span class="nf">in</span> <span class="nf">the</span> <span class="nf">kubernetes</span>

<span class="nf">kubectl</span> <span class="nf">delete</span> <span class="nf">--all</span> <span class="nf">pods</span>         <span class="err">//</span> <span class="nf">Delete</span> <span class="nf">all</span> <span class="nf">pods</span>

<span class="nf">kubectl</span> <span class="nf">delete</span> <span class="nf">--all</span> <span class="nf">pods</span> <span class="nf">--namespace=foo</span>  <span class="err">//</span> <span class="nf">Delete</span> <span class="nf">all</span> <span class="nf">pods</span> <span class="nf">under</span> <span class="nf">the</span> <span class="nf">namespace</span> <span class="nf">foo</span>

<span class="nf">kubectl</span> <span class="nf">delete</span> <span class="nf">--all</span> <span class="nf">deployments</span> <span class="nf">--namespace=foo</span> <span class="err">//</span> <span class="nf">Delete</span> <span class="nf">all</span> <span class="nf">deployments</span> <span class="nf">under</span> <span class="nf">the</span> <span class="nf">namespace</span> <span class="nf">foo</span>

<span class="nf">kubectl</span> <span class="nf">delete</span> <span class="nf">--all</span> <span class="nf">namespaces</span>  <span class="err">//</span> <span class="nf">Delete</span> <span class="nf">all</span> <span class="nf">name</span> <span class="nf">spaces</span>

<span class="nf">kubectl</span> <span class="nf">delete</span> <span class="nf">--all</span> <span class="nf">svc</span>           <span class="err">//</span> <span class="nf">Delete</span> <span class="nf">all</span> <span class="nf">services</span>

<span class="nf">kubectl</span> <span class="nf">delete</span> <span class="nf">--all</span> <span class="nf">deployments</span>    <span class="err">//</span> <span class="nf">Delete</span> <span class="nf">all</span> <span class="nf">deployments</span>

</code></pre></div></div>

<p><strong>Docker Commands</strong></p>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">docker</span> <span class="nf">rm</span> <span class="nf">-vf</span> <span class="nf">$</span><span class="s">(docker ps -aq)</span>     <span class="err">//</span> <span class="nf">To</span> <span class="nf">delete</span> <span class="nf">all</span> <span class="nf">containers</span> <span class="nf">including</span> <span class="nf">its</span> <span class="nf">volumes</span> <span class="nf">use</span>

<span class="nf">docker</span> <span class="nf">rmi</span> <span class="nf">-f</span> <span class="nf">$</span><span class="s">(docker images -aq)</span>  <span class="err">//</span> <span class="nf">To</span> <span class="nf">delete</span> <span class="nf">all</span> <span class="nf">the</span> <span class="nf">images</span>

<span class="nf">docker</span> <span class="nf">images</span>                       <span class="err">//</span> <span class="nf">To</span> <span class="nf">check</span> <span class="nf">docker</span> <span class="nf">images</span>

<span class="nf">docker</span> <span class="nf">image</span> <span class="nf">build</span> <span class="nf">-t</span> <span class="nf">mahedee</span><span class="nv">/location:1.0.1</span> <span class="nf">.</span>  <span class="err">//</span> <span class="nf">create</span> <span class="nf">a</span> <span class="nf">docker</span> <span class="nf">image</span> <span class="nf">name</span> <span class="nf">mahedee</span><span class="nv">/location:1.0.1</span>


</code></pre></div></div>

<p><strong><a href="https://github.com/mahedee/code-sample02/tree/main/service-mesh">Source Code</a></strong></p>]]></content><author><name>Mahedee Hasan</name></author><category term="ASP.NET" /><category term="ASP.NET Core" /><category term="Web API" /><category term="Docker" /><category term="Istio" /><category term="Kubernetes" /><category term="Microservices" /><category term="aspnet" /><category term="csharp" /><summary type="html"><![CDATA[A service mesh is a configurable infrustructure layer. It have capabilities to handle service-to-service communication, resilency, and many cross-cutting concerns. Proxy is a key component of service mesh. Sidecar proxy is injected in each services in this concept. Here I will show you service mesh communication using Istio with asp.net core applications on Kubernetes environment.]]></summary></entry></feed>