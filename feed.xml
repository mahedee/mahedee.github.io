<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://mahedee.net//feed.xml" rel="self" type="application/atom+xml" /><link href="https://mahedee.net//" rel="alternate" type="text/html" /><updated>2024-01-13T22:39:02-04:00</updated><id>https://mahedee.net//feed.xml</id><title type="html">Think Simple</title><subtitle>Think Simple</subtitle><author><name>Mahedee Hasan</name></author><entry><title type="html">Unleashing Micro Frontends with React and ASP.NET Core: A Step-by-Step Implementation Approach</title><link href="https://mahedee.net//micro-frontend-using-react-and-aspnet-core/" rel="alternate" type="text/html" title="Unleashing Micro Frontends with React and ASP.NET Core: A Step-by-Step Implementation Approach" /><published>2023-08-30T00:00:00-03:00</published><updated>2023-08-30T00:00:00-03:00</updated><id>https://mahedee.net//micro-frontend-using-react-and-aspnet-core</id><content type="html" xml:base="https://mahedee.net//micro-frontend-using-react-and-aspnet-core/"><![CDATA[<p><strong>Introduction</strong><br />
Micro frontends are an architectural pattern and approach for building modern web applications. Similar to microservices on the backend, micro frontends focus on breaking down the user interface (UI) into smaller, self-contained, and independently deployable parts.</p>

<p>In traditional monolithic frontend architectures, the entire UI is developed as a single codebase, making it difficult to scale, maintain, and iterate on different parts of the application independently. Micro frontends aim to address these challenges by allowing teams to develop and deploy UI components or features as separate entities.</p>

<p>Each micro frontend typically represents a distinct business capability or user journey and can be developed using different technologies or frameworks. This enables teams to choose the most suitable technology stack for their specific needs. For example, one micro frontend may be built using React, while another may use Angular or Vue.js.</p>

<p>Micro frontends communicate with each other and the backend through well-defined APIs or events, enabling them to work together seamlessly as a cohesive application. This approach promotes modularization, scalability, and reusability, as teams can develop, test, and deploy their micro frontends independently.</p>

<p>By adopting micro frontends, organizations can effectively distribute development efforts among multiple teams, enabling faster delivery, easier maintenance, and better isolation of components. This approach also facilitates technology diversity, allowing teams to leverage different tools and frameworks within the same application.</p>

<p><img src="/assets/images/posts/2023/mfe-01.png" alt="" /></p>

<p>Fig: Micro frontend Architecture. (Source: Internet)</p>

<p><strong>Objective</strong><br />
In this article I will show you how to build Micro front end application using react and asp.net core. Here I am going to create four react applications. One is Master or Container service and other three will be child project or service. Master service will be master-frontend application and other three service will be header-frontend, product-frontend and customer-frontend. I will create two api project using asp.net core for product-frontend and customer-frontend. At the end you will see a complete micro frontend application up and running.</p>

<p><strong>Step 1: Create four react projects.</strong></p>

<ul>
  <li>Open a terminal or bash, write below commands to create four React projects.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">npx</span> <span class="nf">create-react-app</span> <span class="nf">master-frontend</span>
<span class="nf">npx</span> <span class="nf">create-react-app</span> <span class="nf">header-frontend</span>
<span class="nf">npx</span> <span class="nf">create-react-app</span> <span class="nf">product-frontend</span>
<span class="nf">npx</span> <span class="nf">create-react-app</span> <span class="nf">customer-frontend</span>
</code></pre></div></div>

<p><strong>Step 2: Configure “header-frontend” react project</strong></p>

<ul>
  <li>Now we are going to configure header-frontend project to use inside our Master Project as a service.</li>
  <li>Go to header-frontend project</li>
  <li>Open the terminal and install below libraries with below command.
    <div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">npm</span> <span class="nf">install</span> <span class="nf">react-router-dom</span>
<span class="nf">npm</span> <span class="nf">install</span> <span class="nf">react-bootstrap</span> <span class="nf">bootstrap@5.1.3</span>
<span class="nf">npm</span> <span class="nf">install</span> <span class="nf">react-app-rewired</span> <span class="nf">history</span>
</code></pre></div>    </div>
  </li>
  <li>Inside the src directory, create a folder and name the folder components.</li>
  <li>Inside components folder create a file and name the file Header.js</li>
  <li>Write below code in src-&gt;components-&gt;Header.js</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Container</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-bootstrap</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">Header</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">Container</span> <span class="nx">fluid</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">App-header</span><span class="dl">"</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Micro</span> <span class="nx">Frontend</span> <span class="nx">using</span> <span class="nx">React</span><span class="p">.</span><span class="nx">js</span><span class="o">&lt;</span><span class="sr">/p</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/Container</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">Header</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>Open App.js file and replace with below code.</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">logo</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./logo.svg</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="dl">"</span><span class="s2">./App.css</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">BrowserRouter</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-router-dom</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">Header</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./components/Header</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">function</span> <span class="nf">App</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">BrowserRouter</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">Header</span> <span class="o">/&gt;</span>
    <span class="o">&lt;</span><span class="sr">/BrowserRouter</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">App</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>Open App.css file and replace the file with below code.</li>
</ul>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.App-header</span> <span class="p">{</span>
  <span class="nl">background-color</span><span class="p">:</span> <span class="m">#4d739e</span><span class="p">;</span>
  <span class="nl">min-height</span><span class="p">:</span> <span class="m">3vh</span><span class="p">;</span>
  <span class="nl">display</span><span class="p">:</span> <span class="n">flex</span><span class="p">;</span>
  <span class="nl">flex-direction</span><span class="p">:</span> <span class="n">column</span><span class="p">;</span>
  <span class="nl">align-items</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
  <span class="nl">justify-content</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
  <span class="nl">font-size</span><span class="p">:</span> <span class="n">calc</span><span class="p">(</span><span class="m">10px</span> <span class="err">+</span> <span class="m">2vmin</span><span class="p">);</span>
  <span class="nl">color</span><span class="p">:</span> <span class="no">white</span><span class="p">;</span>

  <span class="nl">box-shadow</span><span class="p">:</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0.25</span><span class="p">)</span> <span class="m">0px</span> <span class="m">5px</span> <span class="m">15px</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>Create another file inside src folder, name the file setupProxy.js and write below code for cors policy.</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">(</span><span class="nx">app</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">app</span><span class="p">.</span><span class="nf">use</span><span class="p">((</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">res</span><span class="p">.</span><span class="nf">header</span><span class="p">(</span><span class="dl">"</span><span class="s2">Access-Control-Allow-Origin</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">*</span><span class="dl">"</span><span class="p">);</span>
    <span class="nf">next</span><span class="p">();</span>
  <span class="p">});</span>
<span class="p">};</span>
</code></pre></div></div>

<ul>
  <li>Open index.js file and replace with below code.</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">ReactDOM</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-dom/client</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="dl">"</span><span class="s2">./index.css</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="dl">"</span><span class="s2">bootstrap/dist/css/bootstrap.min.css</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">App</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./App</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">reportWebVitals</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./reportWebVitals</span><span class="dl">"</span><span class="p">;</span>

<span class="nb">window</span><span class="p">.</span><span class="nx">renderHeader</span> <span class="o">=</span> <span class="p">(</span><span class="nx">masterId</span><span class="p">,</span> <span class="nx">history</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">root</span> <span class="o">=</span> <span class="nx">ReactDOM</span><span class="p">.</span><span class="nf">createRoot</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="nx">masterId</span><span class="p">));</span>

  <span class="nx">root</span><span class="p">.</span><span class="nf">render</span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">React</span><span class="p">.</span><span class="nx">StrictMode</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">App</span> <span class="nx">history</span><span class="o">=</span><span class="p">{</span><span class="nx">history</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/React.StrictMode</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">};</span>

<span class="nb">window</span><span class="p">.</span><span class="nx">unmountHeader</span> <span class="o">=</span> <span class="p">(</span><span class="nx">masterId</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">ReactDOM</span><span class="p">.</span><span class="nf">unmountComponentAtNode</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="nx">masterId</span><span class="p">));</span>
<span class="p">};</span>

<span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">Header-master</span><span class="dl">"</span><span class="p">))</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">root</span> <span class="o">=</span> <span class="nx">ReactDOM</span><span class="p">.</span><span class="nf">createRoot</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">root</span><span class="dl">"</span><span class="p">));</span>
  <span class="nx">root</span><span class="p">.</span><span class="nf">render</span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">React</span><span class="p">.</span><span class="nx">StrictMode</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">App</span> <span class="o">/&gt;</span>
    <span class="o">&lt;</span><span class="sr">/React.StrictMode</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>

<span class="c1">// If you want to start measuring performance in your app, pass a function</span>
<span class="c1">// to log results (for example: reportWebVitals(console.log))</span>
<span class="c1">// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals</span>
<span class="nf">reportWebVitals</span><span class="p">();</span>
</code></pre></div></div>

<ul>
  <li>Create a file inside root directory and name the file config-overrides.js and write below code. Below code will override webpack of react.</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">webpack</span><span class="p">:</span> <span class="p">(</span><span class="nx">config</span><span class="p">,</span> <span class="nx">env</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">config</span><span class="p">.</span><span class="nx">optimization</span><span class="p">.</span><span class="nx">runtimeChunk</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
    <span class="nx">config</span><span class="p">.</span><span class="nx">optimization</span><span class="p">.</span><span class="nx">splitChunks</span> <span class="o">=</span> <span class="p">{</span>
      <span class="na">cacheGroups</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">default</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
      <span class="p">},</span>
    <span class="p">};</span>

    <span class="nx">config</span><span class="p">.</span><span class="nx">output</span><span class="p">.</span><span class="nx">filename</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">static/js/[name].js</span><span class="dl">"</span><span class="p">;</span>

    <span class="nx">config</span><span class="p">.</span><span class="nx">plugins</span><span class="p">[</span><span class="mi">5</span><span class="p">].</span><span class="nx">options</span><span class="p">.</span><span class="nx">filename</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">static/css/[name].css</span><span class="dl">"</span><span class="p">;</span>
    <span class="nx">config</span><span class="p">.</span><span class="nx">plugins</span><span class="p">[</span><span class="mi">5</span><span class="p">].</span><span class="nx">options</span><span class="p">.</span><span class="nx">moduleFilename</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="dl">"</span><span class="s2">static/css/main.css</span><span class="dl">"</span><span class="p">;</span>
    <span class="k">return</span> <span class="nx">config</span><span class="p">;</span>
  <span class="p">},</span>
<span class="p">};</span>
</code></pre></div></div>

<ul>
  <li>Open package.json and replace “scripts” section with below code. This project going to be open on 3001 port because we set PORT = 3001 in script section.</li>
</ul>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="nl">"start"</span><span class="p">:</span><span class="w"> </span><span class="s2">"set PORT=3001 &amp;&amp; react-app-rewired start"</span><span class="p">,</span><span class="w">
</span><span class="nl">"build"</span><span class="p">:</span><span class="w"> </span><span class="s2">"react-app-rewired build"</span><span class="p">,</span><span class="w">
</span><span class="nl">"test"</span><span class="p">:</span><span class="w"> </span><span class="s2">"react-app-rewired test"</span><span class="p">,</span><span class="w">
</span><span class="nl">"eject"</span><span class="p">:</span><span class="w"> </span><span class="s2">"react-scripts eject"</span><span class="w">
</span><span class="p">}</span><span class="err">,</span><span class="w">

</span></code></pre></div></div>

<ul>
  <li>Now open the terminal and start the project with below command.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">npm</span> <span class="nf">start</span>
</code></pre></div></div>

<ul>
  <li>Browser output should look like below. If you see below output, means our header frontend project is ready.</li>
</ul>

<p><img src="/assets/images/posts/2023/mfe-02.png" alt="" /></p>

<p><strong>Step 3: Create Product.API Backend Project</strong></p>

<ul>
  <li>Create a web api project name Product.API</li>
  <li>Install following Nuget packages in the project</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">Microsoft.EntityFrameworkCore</span>
<span class="nf">Microsoft.EntityFrameworkCore.InMemory</span>
<span class="nf">Microsoft.EntityFrameworkCore.SqlServer</span>
<span class="nf">Microsoft.EntityFrameworkCore.Tools</span>
<span class="nf">Microsoft.VisualStudio.Web.CodeGeneration.Design</span>

</code></pre></div></div>

<ul>
  <li>Create following two model class in Model folder</li>
</ul>

<p><strong>Product.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">Product.API.Model</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Product</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span><span class="p">?</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span><span class="p">?</span> <span class="n">ShortName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;}</span>
        <span class="k">public</span> <span class="kt">double</span> <span class="n">Price</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="n">DateTime</span><span class="p">?</span> <span class="n">ManufactureDate</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="n">DateTime</span><span class="p">?</span> <span class="n">ExpiryDate</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Category.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">Product.API.Model</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Category</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span><span class="p">?</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span><span class="p">?</span> <span class="n">DisplayName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Add following DbContext and SeedGenerator class in Db folder</li>
</ul>

<p><strong>ProductContext.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Product.API.Model</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Product.API.Db</span>
<span class="p">{</span>
<span class="k">public</span> <span class="k">class</span> <span class="nc">ProductContext</span> <span class="p">:</span> <span class="n">DbContext</span>
<span class="p">{</span>
<span class="k">public</span> <span class="nf">ProductContext</span><span class="p">(</span><span class="n">DbContextOptions</span><span class="p">&lt;</span><span class="n">ProductContext</span><span class="p">&gt;</span> <span class="n">options</span><span class="p">)</span>
<span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
<span class="p">{</span>

        <span class="p">}</span>
        <span class="k">public</span> <span class="n">DbSet</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">.</span><span class="n">API</span><span class="p">.</span><span class="n">Model</span><span class="p">.</span><span class="n">Product</span><span class="p">&gt;</span> <span class="n">Products</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="n">DbSet</span><span class="p">&lt;</span><span class="n">Category</span><span class="p">&gt;</span> <span class="n">Categories</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>

<span class="p">}</span>

</code></pre></div></div>

<p><strong>SeedGenerator.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Product.API.Model</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Product.API.Db</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">SeedGenerator</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">SeedData</span><span class="p">(</span><span class="n">WebApplication</span> <span class="n">app</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">scope</span> <span class="p">=</span> <span class="n">app</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">CreateScope</span><span class="p">())</span>
            <span class="p">{</span>
                <span class="kt">var</span> <span class="n">context</span> <span class="p">=</span> <span class="n">scope</span><span class="p">.</span><span class="n">ServiceProvider</span><span class="p">.</span><span class="n">GetService</span><span class="p">&lt;</span><span class="n">ProductContext</span><span class="p">&gt;();</span>
                <span class="k">if</span> <span class="p">(!</span><span class="n">context</span><span class="p">.</span><span class="n">Products</span><span class="p">.</span><span class="nf">Any</span><span class="p">())</span>
                <span class="p">{</span>
                    <span class="n">context</span><span class="p">.</span><span class="n">Products</span><span class="p">.</span><span class="nf">AddRange</span><span class="p">(</span>
                        <span class="k">new</span> <span class="n">Product</span><span class="p">.</span><span class="n">API</span><span class="p">.</span><span class="n">Model</span><span class="p">.</span><span class="n">Product</span>
                        <span class="p">{</span>
                            <span class="n">Name</span> <span class="p">=</span> <span class="s">"Cat's Shirt "</span><span class="p">,</span>
                            <span class="n">ShortName</span> <span class="p">=</span> <span class="s">"Shirt"</span><span class="p">,</span>
                            <span class="n">Price</span> <span class="p">=</span> <span class="m">1200</span><span class="p">,</span>
                            <span class="n">ManufactureDate</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Today</span><span class="p">,</span>
                            <span class="n">ExpiryDate</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">.</span><span class="nf">AddYears</span><span class="p">(</span><span class="m">5</span><span class="p">)</span>
                        <span class="p">},</span>
                         <span class="k">new</span> <span class="n">Product</span><span class="p">.</span><span class="n">API</span><span class="p">.</span><span class="n">Model</span><span class="p">.</span><span class="n">Product</span>
                         <span class="p">{</span>
                             <span class="n">Name</span> <span class="p">=</span> <span class="s">"Lipton Tea Bag"</span><span class="p">,</span>
                             <span class="n">ShortName</span> <span class="p">=</span> <span class="s">"Tea"</span><span class="p">,</span>
                             <span class="n">Price</span> <span class="p">=</span> <span class="m">150</span><span class="p">,</span>
                             <span class="n">ManufactureDate</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Today</span><span class="p">,</span>
                             <span class="n">ExpiryDate</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">.</span><span class="nf">AddYears</span><span class="p">(</span><span class="m">2</span><span class="p">)</span>
                         <span class="p">}</span>
                         <span class="p">);</span>
                    <span class="n">context</span><span class="p">.</span><span class="nf">SaveChanges</span><span class="p">();</span>
                <span class="p">}</span>

                <span class="k">if</span> <span class="p">(!</span><span class="n">context</span><span class="p">.</span><span class="n">Categories</span><span class="p">.</span><span class="nf">Any</span><span class="p">())</span>
                <span class="p">{</span>
                    <span class="n">context</span><span class="p">.</span><span class="n">Categories</span><span class="p">.</span><span class="nf">AddRange</span><span class="p">(</span>
                        <span class="k">new</span> <span class="n">Category</span>
                        <span class="p">{</span>
                            <span class="n">Name</span> <span class="p">=</span> <span class="s">"Beverages"</span><span class="p">,</span>
                            <span class="n">DisplayName</span> <span class="p">=</span> <span class="s">"Beverages"</span>
                        <span class="p">},</span>
                        <span class="k">new</span> <span class="n">Category</span>
                        <span class="p">{</span>
                            <span class="n">Name</span> <span class="p">=</span> <span class="s">"Grossery"</span><span class="p">,</span>
                            <span class="n">DisplayName</span> <span class="p">=</span> <span class="s">"Grossery"</span>
                        <span class="p">});</span>
                    <span class="n">context</span><span class="p">.</span><span class="nf">SaveChanges</span><span class="p">();</span>
                <span class="p">}</span>


            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Modify Program.cs file to configure in memory database and seed data as follows.</li>
</ul>

<p><strong>Program.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//using Microsoft.AspNetCore.Http.Connections;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Product.API.Db</span><span class="p">;</span>

<span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="n">WebApplication</span><span class="p">.</span><span class="nf">CreateBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>

<span class="c1">// Add services to the container.</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddDbContext</span><span class="p">&lt;</span><span class="n">ProductContext</span><span class="p">&gt;(</span><span class="n">opt</span> <span class="p">=&gt;</span> <span class="n">opt</span><span class="p">.</span><span class="nf">UseInMemoryDatabase</span><span class="p">(</span><span class="s">"ProductDB"</span><span class="p">));</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">();</span>

<span class="c1">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddEndpointsApiExplorer</span><span class="p">();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddSwaggerGen</span><span class="p">();</span>

<span class="kt">var</span> <span class="n">app</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

<span class="c1">//For seeding data</span>
<span class="n">SeedGenerator</span><span class="p">.</span><span class="nf">SeedData</span><span class="p">(</span><span class="n">app</span><span class="p">);</span>

<span class="c1">// Configure the HTTP request pipeline.</span>
<span class="k">if</span> <span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">Environment</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
<span class="p">{</span>
<span class="n">app</span><span class="p">.</span><span class="nf">UseSwagger</span><span class="p">();</span>
<span class="n">app</span><span class="p">.</span><span class="nf">UseSwaggerUI</span><span class="p">();</span>

    <span class="c1">// Enable CORS</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseCors</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span>
    <span class="p">.</span><span class="nf">AllowAnyMethod</span><span class="p">()</span>
    <span class="p">.</span><span class="nf">AllowAnyHeader</span><span class="p">()</span>
    <span class="p">.</span><span class="nf">SetIsOriginAllowed</span><span class="p">(</span><span class="n">origin</span> <span class="p">=&gt;</span> <span class="k">true</span><span class="p">)</span> <span class="c1">// allow any origin</span>
    <span class="p">.</span><span class="nf">AllowCredentials</span><span class="p">());</span> <span class="c1">// allow credentials</span>

<span class="p">}</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseHttpsRedirection</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseAuthorization</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseRouting</span><span class="p">();</span>
<span class="n">app</span><span class="p">.</span><span class="nf">MapControllers</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>

</code></pre></div></div>

<ul>
  <li>Create two controller class name ProductsController and CategoriesController in Controllers folder</li>
</ul>

<p><strong>ProductsController.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Product.API.Db</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Product.API.Controllers</span>
<span class="p">{</span>
<span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
<span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
<span class="k">public</span> <span class="k">class</span> <span class="nc">ProductsController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
<span class="p">{</span>
<span class="k">private</span> <span class="k">readonly</span> <span class="n">ProductContext</span> <span class="err">\</span><span class="n">_context</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">ProductsController</span><span class="p">(</span><span class="n">ProductContext</span> <span class="n">context</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_context</span> <span class="p">=</span> <span class="n">context</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/Products</span>
        <span class="p">[</span><span class="n">HttpGet</span><span class="p">]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">.</span><span class="n">API</span><span class="p">.</span><span class="n">Model</span><span class="p">.</span><span class="n">Product</span><span class="p">&gt;&gt;&gt;</span> <span class="nf">GetProducts</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Products</span><span class="p">.</span><span class="nf">ToListAsync</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/Products/5</span>
        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">.</span><span class="n">API</span><span class="p">.</span><span class="n">Model</span><span class="p">.</span><span class="n">Product</span><span class="p">&gt;&gt;</span> <span class="nf">GetProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">product</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Products</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">product</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="n">product</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// PUT: api/Products/5</span>
        <span class="c1">// To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754</span>
        <span class="p">[</span><span class="nf">HttpPut</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">PutProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="n">Product</span><span class="p">.</span><span class="n">API</span><span class="p">.</span><span class="n">Model</span><span class="p">.</span><span class="n">Product</span> <span class="n">product</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">id</span> <span class="p">!=</span> <span class="n">product</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">_context</span><span class="p">.</span><span class="nf">Entry</span><span class="p">(</span><span class="n">product</span><span class="p">).</span><span class="n">State</span> <span class="p">=</span> <span class="n">EntityState</span><span class="p">.</span><span class="n">Modified</span><span class="p">;</span>

            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">DbUpdateConcurrencyException</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(!</span><span class="nf">ProductExists</span><span class="p">(</span><span class="n">id</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
                <span class="p">}</span>
                <span class="k">else</span>
                <span class="p">{</span>
                    <span class="k">throw</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// POST: api/Products</span>
        <span class="c1">// To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754</span>
        <span class="p">[</span><span class="n">HttpPost</span><span class="p">]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">.</span><span class="n">API</span><span class="p">.</span><span class="n">Model</span><span class="p">.</span><span class="n">Product</span><span class="p">&gt;&gt;</span> <span class="nf">PostProduct</span><span class="p">(</span><span class="n">Product</span><span class="p">.</span><span class="n">API</span><span class="p">.</span><span class="n">Model</span><span class="p">.</span><span class="n">Product</span> <span class="n">product</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_context</span><span class="p">.</span><span class="n">Products</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">product</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>

            <span class="k">return</span> <span class="nf">CreatedAtAction</span><span class="p">(</span><span class="s">"GetProduct"</span><span class="p">,</span> <span class="k">new</span> <span class="p">{</span> <span class="n">id</span> <span class="p">=</span> <span class="n">product</span><span class="p">.</span><span class="n">Id</span> <span class="p">},</span> <span class="n">product</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">// DELETE: api/Products/5</span>
        <span class="p">[</span><span class="nf">HttpDelete</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">DeleteProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">product</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Products</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">product</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">_context</span><span class="p">.</span><span class="n">Products</span><span class="p">.</span><span class="nf">Remove</span><span class="p">(</span><span class="n">product</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>

            <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="kt">bool</span> <span class="nf">ProductExists</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">_context</span><span class="p">.</span><span class="n">Products</span><span class="p">.</span><span class="nf">Any</span><span class="p">(</span><span class="n">e</span> <span class="p">=&gt;</span> <span class="n">e</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">id</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

<span class="p">}</span>
</code></pre></div></div>

<p><strong>CategoriesController.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Product.API.Db</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Product.API.Model</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Product.API.Controllers</span>
<span class="p">{</span>
<span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
<span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
<span class="k">public</span> <span class="k">class</span> <span class="nc">CategoriesController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
<span class="p">{</span>
<span class="k">private</span> <span class="k">readonly</span> <span class="n">ProductContext</span> <span class="err">\</span><span class="n">_context</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">CategoriesController</span><span class="p">(</span><span class="n">ProductContext</span> <span class="n">context</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_context</span> <span class="p">=</span> <span class="n">context</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/Categories</span>
        <span class="p">[</span><span class="n">HttpGet</span><span class="p">]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Category</span><span class="p">&gt;&gt;&gt;</span> <span class="nf">GetCategories</span><span class="p">()</span>
        <span class="p">{</span>
          <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Categories</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
          <span class="p">{</span>
              <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
          <span class="p">}</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Categories</span><span class="p">.</span><span class="nf">ToListAsync</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/Categories/5</span>
        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">Category</span><span class="p">&gt;&gt;</span> <span class="nf">GetCategory</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
          <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Categories</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
          <span class="p">{</span>
              <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
          <span class="p">}</span>
            <span class="kt">var</span> <span class="n">category</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Categories</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">category</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="n">category</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// PUT: api/Categories/5</span>
        <span class="c1">// To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754</span>
        <span class="p">[</span><span class="nf">HttpPut</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">PutCategory</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="n">Category</span> <span class="n">category</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">id</span> <span class="p">!=</span> <span class="n">category</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">_context</span><span class="p">.</span><span class="nf">Entry</span><span class="p">(</span><span class="n">category</span><span class="p">).</span><span class="n">State</span> <span class="p">=</span> <span class="n">EntityState</span><span class="p">.</span><span class="n">Modified</span><span class="p">;</span>

            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">DbUpdateConcurrencyException</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(!</span><span class="nf">CategoryExists</span><span class="p">(</span><span class="n">id</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
                <span class="p">}</span>
                <span class="k">else</span>
                <span class="p">{</span>
                    <span class="k">throw</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// POST: api/Categories</span>
        <span class="c1">// To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754</span>
        <span class="p">[</span><span class="n">HttpPost</span><span class="p">]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">Category</span><span class="p">&gt;&gt;</span> <span class="nf">PostCategory</span><span class="p">(</span><span class="n">Category</span> <span class="n">category</span><span class="p">)</span>
        <span class="p">{</span>
          <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Categories</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
          <span class="p">{</span>
              <span class="k">return</span> <span class="nf">Problem</span><span class="p">(</span><span class="s">"Entity set 'AdminContext.Categories'  is null."</span><span class="p">);</span>
          <span class="p">}</span>
            <span class="n">_context</span><span class="p">.</span><span class="n">Categories</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">category</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>

            <span class="k">return</span> <span class="nf">CreatedAtAction</span><span class="p">(</span><span class="s">"GetCategory"</span><span class="p">,</span> <span class="k">new</span> <span class="p">{</span> <span class="n">id</span> <span class="p">=</span> <span class="n">category</span><span class="p">.</span><span class="n">Id</span> <span class="p">},</span> <span class="n">category</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">// DELETE: api/Categories/5</span>
        <span class="p">[</span><span class="nf">HttpDelete</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">DeleteCategory</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Categories</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="kt">var</span> <span class="n">category</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Categories</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">category</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">_context</span><span class="p">.</span><span class="n">Categories</span><span class="p">.</span><span class="nf">Remove</span><span class="p">(</span><span class="n">category</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>

            <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="kt">bool</span> <span class="nf">CategoryExists</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Categories</span><span class="p">?.</span><span class="nf">Any</span><span class="p">(</span><span class="n">e</span> <span class="p">=&gt;</span> <span class="n">e</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">id</span><span class="p">)).</span><span class="nf">GetValueOrDefault</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>

<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Now run the application and access the endpoints using swagger.</li>
</ul>

<p><strong>Step 4: Configure product-frontend React Project</strong></p>

<p>Now we are going to configure product-frontend project to use inside our Master Project as a service.</p>

<ul>
  <li>Open the Terminal and install below libraries with below command.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">npm</span> <span class="nf">install</span> <span class="nf">react-router-dom</span>
<span class="nf">npm</span> <span class="nf">install</span> <span class="nf">react-bootstrap</span> <span class="nf">bootstrap@5.1.3</span>
<span class="nf">npm</span> <span class="nf">install</span> <span class="nf">react-app-rewired</span>
<span class="nf">npm</span> <span class="nf">install</span> <span class="nf">axios</span> <span class="nf">history</span>
<span class="nf">npm</span> <span class="nf">install</span> <span class="nf">react-data-table-component</span>
<span class="nf">npm</span> <span class="nf">install</span> <span class="nf">@mui</span><span class="nv">/material</span> <span class="nf">@emotion</span><span class="nv">/react</span> <span class="nf">@emotion</span><span class="nv">/styled</span>
<span class="nf">npm</span> <span class="nf">install</span> <span class="nf">@mui</span><span class="nv">/material</span> <span class="nf">@mui</span><span class="nv">/styled-engine-sc</span> <span class="nf">styled-components</span>
<span class="nf">npm</span> <span class="nf">install</span> <span class="nf">@mui</span><span class="nv">/icons-material</span>

</code></pre></div></div>

<ul>
  <li>Inside the src directory, create a folder and name the folder utils.</li>
  <li>Inside utils folder create a file and name the file BaseUrl.js</li>
  <li>Write below code because our product api is running on 7155 port</li>
</ul>

<p><strong>BaseUrl.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">const</span> <span class="nx">Base_URL_Product</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">https://localhost:7155/api</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>Create another js file inside the utils directory and name the file Conversions.js, write below code.</li>
</ul>

<p><strong>Conversions.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">const</span> <span class="nx">convertDateFormat</span> <span class="o">=</span> <span class="p">(</span><span class="nx">date</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">convertedDate</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Date</span><span class="p">(</span><span class="nx">date</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">convertedDate</span><span class="p">.</span><span class="nf">toDateString</span><span class="p">();</span>
<span class="p">};</span>
</code></pre></div></div>

<ul>
  <li>Inside the src directory, create a folder and name the folder services.</li>
  <li>Inside services folder create a file and name the file ProductService.js</li>
  <li>Write below code in src-&gt;services-&gt; ProductService.js</li>
</ul>

<p><strong>ProductService.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">axios</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">axios</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Base_URL_Product</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../utils/BaseUrl</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">GetAllProducts</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="nx">axios</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="nx">Base_URL_Product</span> <span class="o">+</span> <span class="s2">`/Products`</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">response</span><span class="dl">"</span><span class="p">,</span> <span class="nx">response</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">response</span><span class="p">;</span>
  <span class="p">}</span> <span class="k">catch </span><span class="p">(</span><span class="nx">er</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">throw</span> <span class="nx">er</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">};</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">GetAllCategory</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="nx">axios</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="nx">Base_URL_Product</span> <span class="o">+</span> <span class="s2">`/Categories`</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">response</span><span class="p">;</span>
  <span class="p">}</span> <span class="k">catch </span><span class="p">(</span><span class="nx">er</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">throw</span> <span class="nx">er</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<ul>
  <li>Inside the src directory, create a folder and name the folder components.</li>
  <li>Inside components folder create another folder and name the folder ProductComponent.</li>
  <li>Inside ProductComponent folder create a file and name the file DataTableComponent.js</li>
  <li>Write below code in src -&gt; components -&gt; ProductComponent -&gt; DataTableComponent.js</li>
</ul>

<p><strong>DataTableComponent.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Card</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@mui/material</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">SortIcon</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@mui/icons-material/ArrowDownward</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">DataTable</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-data-table-component</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">convertDateFormat</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../../utils/Conversions</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">DataTableComponent</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">data</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">columns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
      <span class="na">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
      <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Name</span><span class="dl">"</span><span class="p">,</span>
      <span class="na">selector</span><span class="p">:</span> <span class="p">(</span><span class="nx">row</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">row</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span>
      <span class="na">sortable</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">reorder</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="p">{</span>
      <span class="na">id</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
      <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Short Name</span><span class="dl">"</span><span class="p">,</span>
      <span class="na">selector</span><span class="p">:</span> <span class="p">(</span><span class="nx">row</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">row</span><span class="p">.</span><span class="nx">shortName</span><span class="p">,</span>
      <span class="na">sortable</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">right</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">reorder</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="p">{</span>
      <span class="na">id</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
      <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Price</span><span class="dl">"</span><span class="p">,</span>
      <span class="na">selector</span><span class="p">:</span> <span class="p">(</span><span class="nx">row</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">row</span><span class="p">.</span><span class="nx">price</span><span class="p">,</span>
      <span class="na">sortable</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">right</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">reorder</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="p">},</span>

    <span class="p">{</span>
      <span class="na">id</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span>
      <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Manufacture Date</span><span class="dl">"</span><span class="p">,</span>
      <span class="na">selector</span><span class="p">:</span> <span class="p">(</span><span class="nx">row</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nf">convertDateFormat</span><span class="p">(</span><span class="nx">row</span><span class="p">.</span><span class="nx">manufactureDate</span><span class="p">),</span>
      <span class="na">sortable</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">right</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">reorder</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="p">{</span>
      <span class="na">id</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
      <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Expiry Date</span><span class="dl">"</span><span class="p">,</span>
      <span class="na">selector</span><span class="p">:</span> <span class="p">(</span><span class="nx">row</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nf">convertDateFormat</span><span class="p">(</span><span class="nx">row</span><span class="p">.</span><span class="nx">expiryDate</span><span class="p">),</span>
      <span class="na">sortable</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">right</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">reorder</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="p">},</span>
  <span class="p">];</span>
  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">data-table</span><span class="dl">"</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">Card</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">DataTable</span>
          <span class="nx">title</span><span class="o">=</span><span class="dl">"</span><span class="s2">Product List</span><span class="dl">"</span>
          <span class="nx">columns</span><span class="o">=</span><span class="p">{</span><span class="nx">columns</span><span class="p">}</span>
          <span class="nx">data</span><span class="o">=</span><span class="p">{</span><span class="nx">data</span><span class="p">}</span>
          <span class="nx">defaultSortFieldId</span><span class="o">=</span><span class="p">{</span><span class="mi">4</span><span class="p">}</span>
          <span class="nx">sortIcon</span><span class="o">=</span><span class="p">{</span><span class="o">&lt;</span><span class="nx">SortIcon</span> <span class="o">/&gt;</span><span class="p">}</span>
          <span class="nx">pagination</span>
          <span class="nx">selectableRows</span>
          <span class="nx">paginationPerPage</span><span class="o">=</span><span class="p">{</span><span class="mi">5</span><span class="p">}</span>
          <span class="nx">paginationRowsPerPageOptions</span><span class="o">=</span><span class="p">{[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">20</span><span class="p">]}</span>
        <span class="sr">/</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="sr">/Card</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">DataTableComponent</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>Now Inside ProductComponent folder create another file and name the file ProductListComponent.js</li>
  <li>Write below code in src-&gt;components-&gt;ProductComponent-&gt; ProductListComponent.js</li>
</ul>

<p><strong>ProductListComponent.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">useEffect</span><span class="p">,</span> <span class="nx">useState</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">GetAllProducts</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../../services/ProductService</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">DataTableComponent</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./DataTableComponent</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">ProductListComponent</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">state</span><span class="p">,</span> <span class="nx">setState</span><span class="p">]</span> <span class="o">=</span> <span class="nf">useState</span><span class="p">([]);</span>

  <span class="nf">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nc">GetAllProducts</span><span class="p">().</span><span class="nf">then</span><span class="p">((</span><span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">res</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
      <span class="nf">setState</span><span class="p">(</span><span class="nx">res</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
    <span class="p">});</span>
  <span class="p">},</span> <span class="p">[]);</span>

  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">style</span><span class="o">=&gt;</span>
      <span class="o">&lt;</span><span class="nx">DataTableComponent</span> <span class="nx">data</span><span class="o">=</span><span class="p">{</span><span class="nx">state</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">ProductListComponent</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>Inside components folder create another folder and name the folder CategoryComponent.</li>
  <li>Inside CategoryComponent folder create a file and name the file DataTableComponent.js</li>
  <li>Write below code in src-&gt;components-&gt; CategoryComponent-&gt; DataTableComponent.js
DataTableComponent.js</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Card</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@mui/material</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">SortIcon</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@mui/icons-material/ArrowDownward</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">DataTable</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-data-table-component</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">DataTableComponent</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">data</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">columns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
      <span class="na">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
      <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Name</span><span class="dl">"</span><span class="p">,</span>
      <span class="na">selector</span><span class="p">:</span> <span class="p">(</span><span class="nx">row</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">row</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span>
      <span class="na">sortable</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">reorder</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="p">{</span>
      <span class="na">id</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
      <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Display Name</span><span class="dl">"</span><span class="p">,</span>
      <span class="na">selector</span><span class="p">:</span> <span class="p">(</span><span class="nx">row</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">row</span><span class="p">.</span><span class="nx">displayName</span><span class="p">,</span>
      <span class="na">sortable</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">right</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">reorder</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="p">},</span>
  <span class="p">];</span>
  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">data-table</span><span class="dl">"</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">Card</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">DataTable</span>
          <span class="nx">title</span><span class="o">=</span><span class="dl">"</span><span class="s2">Product Category List</span><span class="dl">"</span>
          <span class="nx">columns</span><span class="o">=</span><span class="p">{</span><span class="nx">columns</span><span class="p">}</span>
          <span class="nx">data</span><span class="o">=</span><span class="p">{</span><span class="nx">data</span><span class="p">}</span>
          <span class="nx">defaultSortFieldId</span><span class="o">=</span><span class="p">{</span><span class="mi">4</span><span class="p">}</span>
          <span class="nx">sortIcon</span><span class="o">=</span><span class="p">{</span><span class="o">&lt;</span><span class="nx">SortIcon</span> <span class="o">/&gt;</span><span class="p">}</span>
          <span class="nx">pagination</span>
          <span class="nx">selectableRows</span>
        <span class="o">/&gt;</span>
      <span class="o">&lt;</span><span class="sr">/Card</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">DataTableComponent</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>Inside CategoryComponentfolder create a file and name the file CategoryListComponent.js</li>
  <li>Write below code in src-&gt;components-&gt; CategoryComponent-&gt;CategoryListComponent.js
CategoryListComponent.js</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">useEffect</span><span class="p">,</span> <span class="nx">useState</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">GetAllCategory</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../../services/ProductService</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">DataTableComponent</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./DataTableComponent</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">CategoryListComponent</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">state</span><span class="p">,</span> <span class="nx">setState</span><span class="p">]</span> <span class="o">=</span> <span class="nf">useState</span><span class="p">([]);</span>

  <span class="nf">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nc">GetAllCategory</span><span class="p">().</span><span class="nf">then</span><span class="p">((</span><span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">category</span><span class="dl">"</span><span class="p">,</span> <span class="nx">res</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
      <span class="nf">setState</span><span class="p">(</span><span class="nx">res</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
    <span class="p">});</span>
  <span class="p">},</span> <span class="p">[]);</span>

  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">style</span><span class="o">=&gt;</span>
      <span class="o">&lt;</span><span class="nx">DataTableComponent</span> <span class="nx">data</span><span class="o">=</span><span class="p">{</span><span class="nx">state</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">CategoryListComponent</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>Inside the src directory, create a folder and name the folder pages.</li>
  <li>Inside pages folder create a js file and name the file ProductsPage.js and write below code.</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">ProductListComponent</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../components/ProductComponent/ProductListComponent</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">ProductsPage</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;&gt;</span>
      <span class="o">&lt;</span><span class="nx">ProductListComponent</span> <span class="o">/&gt;</span>
    <span class="o">&lt;</span><span class="sr">/</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">ProductsPage</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>Inside pages folder create a js file and name the file CategoriesPage.js and write below code.</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">GroupTypesListComponent</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../components/CategoryComponent/CategoryListComponent</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">CategoriesPage</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;&gt;</span>
      <span class="o">&lt;</span><span class="nx">GroupTypesListComponent</span> <span class="o">/&gt;</span>
    <span class="o">&lt;</span><span class="sr">/</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">CategoriesPage</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>Open App.css file and replace with below code.</li>
</ul>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.data-table</span> <span class="p">{</span>
  <span class="nl">box-shadow</span><span class="p">:</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0.25</span><span class="p">)</span> <span class="m">5px</span> <span class="m">5px</span> <span class="m">15px</span> <span class="m">0px</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>Open App.js file and replace with below code.</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">logo</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./logo.svg</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="dl">"</span><span class="s2">./App.css</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">BrowserRouter</span><span class="p">,</span> <span class="nx">Routes</span><span class="p">,</span> <span class="nx">Route</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-router-dom</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">ProductsPage</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./pages/ProductsPage</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">CategoriesPage</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./pages/CategoriesPage</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">createBrowserHistory</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">history</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">defaultHistory</span> <span class="o">=</span> <span class="nf">createBrowserHistory</span><span class="p">();</span>

<span class="kd">function</span> <span class="nf">App</span><span class="p">({</span> <span class="nx">history</span> <span class="o">=</span> <span class="nx">defaultHistory</span> <span class="p">})</span> <span class="p">{</span>
  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">BrowserRouter</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">Routes</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="dl">"</span><span class="s2">/</span><span class="dl">"</span> <span class="nx">element</span><span class="o">=</span><span class="p">{</span><span class="o">&lt;</span><span class="nx">ProductsPage</span> <span class="o">/&gt;</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="dl">"</span><span class="s2">/product-list</span><span class="dl">"</span> <span class="nx">element</span><span class="o">=</span><span class="p">{</span><span class="o">&lt;</span><span class="nx">ProductsPage</span> <span class="o">/&gt;</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="dl">"</span><span class="s2">/product-categories</span><span class="dl">"</span> <span class="nx">element</span><span class="o">=</span><span class="p">{</span><span class="o">&lt;</span><span class="nx">CategoriesPage</span> <span class="o">/&gt;</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="sr">/Routes</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/BrowserRouter</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">App</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>Open index.js file and replace with below code.</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">ReactDOM</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-dom/client</span><span class="dl">"</span><span class="p">;</span>
<span class="c1">//import ReactDOM from "react-dom";</span>
<span class="k">import</span> <span class="dl">"</span><span class="s2">./index.css</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">App</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./App</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">reportWebVitals</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./reportWebVitals</span><span class="dl">"</span><span class="p">;</span>

<span class="nb">window</span><span class="p">.</span><span class="nx">renderProduct</span> <span class="o">=</span> <span class="p">(</span><span class="nx">masterId</span><span class="p">,</span> <span class="nx">history</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">root</span> <span class="o">=</span> <span class="nx">ReactDOM</span><span class="p">.</span><span class="nf">createRoot</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="nx">masterId</span><span class="p">));</span>

  <span class="nx">root</span><span class="p">.</span><span class="nf">render</span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">React</span><span class="p">.</span><span class="nx">StrictMode</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">App</span> <span class="nx">history</span><span class="o">=</span><span class="p">{</span><span class="nx">history</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/React.StrictMode</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">};</span>

<span class="nb">window</span><span class="p">.</span><span class="nx">unmountProduct</span> <span class="o">=</span> <span class="p">(</span><span class="nx">masterId</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">root</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="nx">masterId</span><span class="p">);</span>
  <span class="c1">//root.unmount();</span>
  <span class="c1">//root.remove();</span>
<span class="p">};</span>

<span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">Product-master</span><span class="dl">"</span><span class="p">))</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">root</span> <span class="o">=</span> <span class="nx">ReactDOM</span><span class="p">.</span><span class="nf">createRoot</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">root</span><span class="dl">"</span><span class="p">));</span>
  <span class="nx">root</span><span class="p">.</span><span class="nf">render</span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">React</span><span class="p">.</span><span class="nx">StrictMode</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">App</span> <span class="o">/&gt;</span>
    <span class="o">&lt;</span><span class="sr">/React.StrictMode</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>

<span class="c1">// If you want to start measuring performance in your app, pass a function</span>
<span class="c1">// to log results (for example: reportWebVitals(console.log))</span>
<span class="c1">// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals</span>
<span class="nf">reportWebVitals</span><span class="p">();</span>
</code></pre></div></div>

<ul>
  <li>Create another file inside src folder, name the file setupProxy.js and write below code for cors policy.</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">(</span><span class="nx">app</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">app</span><span class="p">.</span><span class="nf">use</span><span class="p">((</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">res</span><span class="p">.</span><span class="nf">header</span><span class="p">(</span><span class="dl">"</span><span class="s2">Access-Control-Allow-Origin</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">*</span><span class="dl">"</span><span class="p">);</span>
    <span class="nf">next</span><span class="p">();</span>
  <span class="p">});</span>
<span class="p">};</span>
</code></pre></div></div>

<ul>
  <li>Create a file inside root directory and name the file config-overrides.js and write below code. Below code will override webpack of react.</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">webpack</span><span class="p">:</span> <span class="p">(</span><span class="nx">config</span><span class="p">,</span> <span class="nx">env</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">config</span><span class="p">.</span><span class="nx">optimization</span><span class="p">.</span><span class="nx">runtimeChunk</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
    <span class="nx">config</span><span class="p">.</span><span class="nx">optimization</span><span class="p">.</span><span class="nx">splitChunks</span> <span class="o">=</span> <span class="p">{</span>
      <span class="na">cacheGroups</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">default</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
      <span class="p">},</span>
    <span class="p">};</span>

    <span class="nx">config</span><span class="p">.</span><span class="nx">output</span><span class="p">.</span><span class="nx">filename</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">static/js/[name].js</span><span class="dl">"</span><span class="p">;</span>

    <span class="nx">config</span><span class="p">.</span><span class="nx">plugins</span><span class="p">[</span><span class="mi">5</span><span class="p">].</span><span class="nx">options</span><span class="p">.</span><span class="nx">filename</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">static/css/[name].css</span><span class="dl">"</span><span class="p">;</span>
    <span class="nx">config</span><span class="p">.</span><span class="nx">plugins</span><span class="p">[</span><span class="mi">5</span><span class="p">].</span><span class="nx">options</span><span class="p">.</span><span class="nx">moduleFilename</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="dl">"</span><span class="s2">static/css/main.css</span><span class="dl">"</span><span class="p">;</span>
    <span class="k">return</span> <span class="nx">config</span><span class="p">;</span>
  <span class="p">},</span>
<span class="p">};</span>
</code></pre></div></div>

<ul>
  <li>Open package.json and replace “scripts” section with below code. This project going to be open on 3002 port.</li>
</ul>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="nl">"start"</span><span class="p">:</span><span class="w"> </span><span class="s2">"set PORT=3002 &amp;&amp; react-app-rewired start"</span><span class="p">,</span><span class="w">
</span><span class="nl">"build"</span><span class="p">:</span><span class="w"> </span><span class="s2">"react-app-rewired build"</span><span class="p">,</span><span class="w">
</span><span class="nl">"test"</span><span class="p">:</span><span class="w"> </span><span class="s2">"react-app-rewired test"</span><span class="p">,</span><span class="w">
</span><span class="nl">"eject"</span><span class="p">:</span><span class="w"> </span><span class="s2">"react-scripts eject"</span><span class="w">
</span><span class="p">}</span><span class="err">,</span><span class="w">

</span></code></pre></div></div>

<ul>
  <li>Run Product.API back end application</li>
  <li>Go to the directory of product-fronend and run the below command</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">npm</span> <span class="nf">start</span>
</code></pre></div></div>

<ul>
  <li>Browser output should look like below.</li>
</ul>

<p><img src="/assets/images/posts/2023/mfe-03.png" alt="" /></p>

<p>• If you try using this url http://localhost:3002/product-categories. You will get the following output.</p>

<p><img src="/assets/images/posts/2023/mfe-04.png" alt="" /></p>

<ul>
  <li>If You see the above output, it means it works fine.</li>
</ul>

<p><strong>Step 5: Create Customers.API Backend Project</strong></p>

<ul>
  <li>Create a web api project name Customers.API</li>
  <li>Install following Nuget packages in the project</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nf">Microsoft.EntityFrameworkCore</span>
  <span class="nf">Microsoft.EntityFrameworkCore.InMemory</span>
  <span class="nf">Microsoft.EntityFrameworkCore.SqlServer</span>
  <span class="nf">Microsoft.EntityFrameworkCore.Tools</span>
  <span class="nf">Microsoft.VisualStudio.Web.CodeGeneration.Design</span>
</code></pre></div></div>

<ul>
  <li>Create following Customer model class in Model folder</li>
</ul>

<p><strong>Customer.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">namespace</span> <span class="nn">Customers.API.Model</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Customer</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span><span class="p">?</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span><span class="p">?</span> <span class="n">PhoneNo</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;}</span>
        <span class="k">public</span> <span class="kt">string</span><span class="p">?</span> <span class="n">EmailAddress</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;}</span>
        <span class="k">public</span> <span class="n">DateTime</span><span class="p">?</span> <span class="n">DOB</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>


</code></pre></div></div>

<ul>
  <li>Add following DbContext and SeedGenerator class in Db folder</li>
</ul>

<p><strong>CustomersContext.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Customers.API.Model</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Customers.API.Db</span>
<span class="p">{</span>
<span class="k">public</span> <span class="k">class</span> <span class="nc">CustomersContext</span> <span class="p">:</span> <span class="n">DbContext</span>
<span class="p">{</span>
<span class="k">public</span> <span class="nf">CustomersContext</span><span class="p">(</span><span class="n">DbContextOptions</span><span class="p">&lt;</span><span class="n">CustomersContext</span><span class="p">&gt;</span> <span class="n">options</span><span class="p">)</span>
<span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
<span class="p">{</span>

        <span class="p">}</span>
        <span class="k">public</span> <span class="n">DbSet</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="n">Customers</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>

<span class="p">}</span>

</code></pre></div></div>

<p><strong>SeedGenerator.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Customers.API.Model</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Customers.API.Db</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">SeedGenerator</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">SeedData</span><span class="p">(</span><span class="n">WebApplication</span> <span class="n">app</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">scope</span> <span class="p">=</span> <span class="n">app</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">CreateScope</span><span class="p">())</span>
            <span class="p">{</span>
                <span class="kt">var</span> <span class="n">context</span> <span class="p">=</span> <span class="n">scope</span><span class="p">.</span><span class="n">ServiceProvider</span><span class="p">.</span><span class="n">GetService</span><span class="p">&lt;</span><span class="n">CustomersContext</span><span class="p">&gt;();</span>


                <span class="k">if</span> <span class="p">(!</span><span class="n">context</span><span class="p">.</span><span class="n">Customers</span><span class="p">.</span><span class="nf">Any</span><span class="p">())</span>
                <span class="p">{</span>
                    <span class="n">context</span><span class="p">.</span><span class="n">Customers</span><span class="p">.</span><span class="nf">AddRange</span><span class="p">(</span>
                        <span class="k">new</span> <span class="n">Customer</span>
                        <span class="p">{</span>
                            <span class="n">Name</span> <span class="p">=</span> <span class="s">"Scott Allen"</span><span class="p">,</span>
                            <span class="n">EmailAddress</span> <span class="p">=</span> <span class="s">"scott@gmail.com"</span><span class="p">,</span>
                            <span class="n">PhoneNo</span> <span class="p">=</span> <span class="s">"5068792493"</span><span class="p">,</span>
                            <span class="n">DOB</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">.</span><span class="nf">AddYears</span><span class="p">(-</span><span class="m">50</span><span class="p">),</span>
                        <span class="p">},</span>
                        <span class="k">new</span> <span class="n">Customer</span>
                        <span class="p">{</span>
                            <span class="n">Name</span> <span class="p">=</span> <span class="s">"Graham Bell"</span><span class="p">,</span>
                            <span class="n">EmailAddress</span> <span class="p">=</span> <span class="s">"bell@outlook.com"</span><span class="p">,</span>
                            <span class="n">PhoneNo</span> <span class="p">=</span> <span class="s">"5068792494"</span><span class="p">,</span>
                            <span class="n">DOB</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">.</span><span class="nf">AddYears</span><span class="p">(-</span><span class="m">54</span><span class="p">),</span>
                        <span class="p">},</span>
                        <span class="k">new</span> <span class="n">Customer</span>
                        <span class="p">{</span>
                            <span class="n">Name</span> <span class="p">=</span> <span class="s">"Adam Smith"</span><span class="p">,</span>
                            <span class="n">EmailAddress</span> <span class="p">=</span> <span class="s">"smith@yahoo.com"</span><span class="p">,</span>
                            <span class="n">PhoneNo</span> <span class="p">=</span> <span class="s">"5068792494"</span><span class="p">,</span>
                            <span class="n">DOB</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">.</span><span class="nf">AddYears</span><span class="p">(-</span><span class="m">54</span><span class="p">),</span>
                        <span class="p">});</span> <span class="p">;</span>
                    <span class="n">context</span><span class="p">.</span><span class="nf">SaveChanges</span><span class="p">();</span>
                <span class="p">}</span>

            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Modify Program.cs file to configure in memory database and seed data as follows.
<strong>Program.cs</strong></li>
</ul>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//using Microsoft.AspNetCore.Http.Connections;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Product.API.Db</span><span class="p">;</span>

<span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="n">WebApplication</span><span class="p">.</span><span class="nf">CreateBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>

<span class="c1">// Add services to the container.</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddDbContext</span><span class="p">&lt;</span><span class="n">ProductContext</span><span class="p">&gt;(</span><span class="n">opt</span> <span class="p">=&gt;</span> <span class="n">opt</span><span class="p">.</span><span class="nf">UseInMemoryDatabase</span><span class="p">(</span><span class="s">"ProductDB"</span><span class="p">));</span>


<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">();</span>


<span class="c1">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddEndpointsApiExplorer</span><span class="p">();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddSwaggerGen</span><span class="p">();</span>

<span class="kt">var</span> <span class="n">app</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

<span class="c1">//For seeding data</span>
<span class="n">SeedGenerator</span><span class="p">.</span><span class="nf">SeedData</span><span class="p">(</span><span class="n">app</span><span class="p">);</span>

<span class="c1">// Configure the HTTP request pipeline.</span>
<span class="k">if</span> <span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">Environment</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
<span class="p">{</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwagger</span><span class="p">();</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwaggerUI</span><span class="p">();</span>

    <span class="c1">// Enable CORS</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseCors</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span>
    <span class="p">.</span><span class="nf">AllowAnyMethod</span><span class="p">()</span>
    <span class="p">.</span><span class="nf">AllowAnyHeader</span><span class="p">()</span>
    <span class="p">.</span><span class="nf">SetIsOriginAllowed</span><span class="p">(</span><span class="n">origin</span> <span class="p">=&gt;</span> <span class="k">true</span><span class="p">)</span> <span class="c1">// allow any origin</span>
    <span class="p">.</span><span class="nf">AllowCredentials</span><span class="p">());</span> <span class="c1">// allow credentials</span>
<span class="p">}</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseHttpsRedirection</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseAuthorization</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseRouting</span><span class="p">();</span>
<span class="n">app</span><span class="p">.</span><span class="nf">MapControllers</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>

</code></pre></div></div>

<ul>
  <li>Create two controller class name CustomersController in Controllers folder</li>
</ul>

<p><strong>CustomersController.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Customers.API.Db</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Customers.API.Model</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Customers.API.Controllers</span>
<span class="p">{</span>
<span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
<span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
<span class="k">public</span> <span class="k">class</span> <span class="nc">CustomersController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
<span class="p">{</span>
<span class="k">private</span> <span class="k">readonly</span> <span class="n">CustomersContext</span> <span class="err">\</span><span class="n">_context</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">CustomersController</span><span class="p">(</span><span class="n">CustomersContext</span> <span class="n">context</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_context</span> <span class="p">=</span> <span class="n">context</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/Customers</span>
        <span class="p">[</span><span class="n">HttpGet</span><span class="p">]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;&gt;&gt;</span> <span class="nf">GetCustomers</span><span class="p">()</span>
        <span class="p">{</span>
          <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Customers</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
          <span class="p">{</span>
              <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
          <span class="p">}</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Customers</span><span class="p">.</span><span class="nf">ToListAsync</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/Customers/5</span>
        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;&gt;</span> <span class="nf">GetCustomer</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
          <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Customers</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
          <span class="p">{</span>
              <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
          <span class="p">}</span>
            <span class="kt">var</span> <span class="n">customer</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Customers</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">customer</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="n">customer</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// PUT: api/Customers/5</span>
        <span class="c1">// To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754</span>
        <span class="p">[</span><span class="nf">HttpPut</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">PutCustomer</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="n">Customer</span> <span class="n">customer</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">id</span> <span class="p">!=</span> <span class="n">customer</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">_context</span><span class="p">.</span><span class="nf">Entry</span><span class="p">(</span><span class="n">customer</span><span class="p">).</span><span class="n">State</span> <span class="p">=</span> <span class="n">EntityState</span><span class="p">.</span><span class="n">Modified</span><span class="p">;</span>

            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">DbUpdateConcurrencyException</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(!</span><span class="nf">CustomerExists</span><span class="p">(</span><span class="n">id</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
                <span class="p">}</span>
                <span class="k">else</span>
                <span class="p">{</span>
                    <span class="k">throw</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// POST: api/Customers</span>
        <span class="c1">// To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754</span>
        <span class="p">[</span><span class="n">HttpPost</span><span class="p">]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;&gt;</span> <span class="nf">PostCustomer</span><span class="p">(</span><span class="n">Customer</span> <span class="n">customer</span><span class="p">)</span>
        <span class="p">{</span>
          <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Customers</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
          <span class="p">{</span>
              <span class="k">return</span> <span class="nf">Problem</span><span class="p">(</span><span class="s">"Entity set 'CustomersContext.Customers'  is null."</span><span class="p">);</span>
          <span class="p">}</span>
            <span class="n">_context</span><span class="p">.</span><span class="n">Customers</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">customer</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>

            <span class="k">return</span> <span class="nf">CreatedAtAction</span><span class="p">(</span><span class="s">"GetCustomer"</span><span class="p">,</span> <span class="k">new</span> <span class="p">{</span> <span class="n">id</span> <span class="p">=</span> <span class="n">customer</span><span class="p">.</span><span class="n">Id</span> <span class="p">},</span> <span class="n">customer</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">// DELETE: api/Customers/5</span>
        <span class="p">[</span><span class="nf">HttpDelete</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">DeleteCustomer</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Customers</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="kt">var</span> <span class="n">customer</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Customers</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">customer</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">_context</span><span class="p">.</span><span class="n">Customers</span><span class="p">.</span><span class="nf">Remove</span><span class="p">(</span><span class="n">customer</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>

            <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="kt">bool</span> <span class="nf">CustomerExists</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Customers</span><span class="p">?.</span><span class="nf">Any</span><span class="p">(</span><span class="n">e</span> <span class="p">=&gt;</span> <span class="n">e</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">id</span><span class="p">)).</span><span class="nf">GetValueOrDefault</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>

<span class="p">}</span>

<span class="c1">//using Microsoft.AspNetCore.Http.Connections;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Product.API.Db</span><span class="p">;</span>

<span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="n">WebApplication</span><span class="p">.</span><span class="nf">CreateBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>

<span class="c1">// Add services to the container.</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddDbContext</span><span class="p">&lt;</span><span class="n">ProductContext</span><span class="p">&gt;(</span><span class="n">opt</span> <span class="p">=&gt;</span> <span class="n">opt</span><span class="p">.</span><span class="nf">UseInMemoryDatabase</span><span class="p">(</span><span class="s">"ProductDB"</span><span class="p">));</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">();</span>

<span class="c1">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddEndpointsApiExplorer</span><span class="p">();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddSwaggerGen</span><span class="p">();</span>

<span class="kt">var</span> <span class="n">app</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

<span class="c1">//For seeding data</span>
<span class="n">SeedGenerator</span><span class="p">.</span><span class="nf">SeedData</span><span class="p">(</span><span class="n">app</span><span class="p">);</span>

<span class="c1">// Configure the HTTP request pipeline.</span>
<span class="k">if</span> <span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">Environment</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
<span class="p">{</span>
<span class="n">app</span><span class="p">.</span><span class="nf">UseSwagger</span><span class="p">();</span>
<span class="n">app</span><span class="p">.</span><span class="nf">UseSwaggerUI</span><span class="p">();</span>

    <span class="c1">// Enable CORS</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseCors</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span>
    <span class="p">.</span><span class="nf">AllowAnyMethod</span><span class="p">()</span>
    <span class="p">.</span><span class="nf">AllowAnyHeader</span><span class="p">()</span>
    <span class="p">.</span><span class="nf">SetIsOriginAllowed</span><span class="p">(</span><span class="n">origin</span> <span class="p">=&gt;</span> <span class="k">true</span><span class="p">)</span> <span class="c1">// allow any origin</span>
    <span class="p">.</span><span class="nf">AllowCredentials</span><span class="p">());</span> <span class="c1">// allow credentials</span>

<span class="p">}</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseHttpsRedirection</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseAuthorization</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseRouting</span><span class="p">();</span>
<span class="n">app</span><span class="p">.</span><span class="nf">MapControllers</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>

</code></pre></div></div>

<ul>
  <li>Now run the application and access the endpoints using swagger.</li>
</ul>

<p><strong>Step 6: Configure customer-frontend React Project</strong></p>

<ul>
  <li>Now we are going to configure customer-frontend project to use inside our Master Project as a service.</li>
  <li>Open the Terminal and install below libraries with below command in customer-frontend project</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">npm</span> <span class="nf">install</span> <span class="nf">react-router-dom</span>
<span class="nf">npm</span> <span class="nf">install</span> <span class="nf">react-bootstrap</span> <span class="nf">bootstrap@5.1.3</span>
<span class="nf">npm</span> <span class="nf">install</span> <span class="nf">react-app-rewired</span>
<span class="nf">npm</span> <span class="nf">install</span> <span class="nf">axios</span> <span class="nf">history</span>
<span class="nf">npm</span> <span class="nf">install</span> <span class="nf">react-data-table-component</span>
<span class="nf">npm</span> <span class="nf">install</span> <span class="nf">@mui</span><span class="nv">/material</span> <span class="nf">@emotion</span><span class="nv">/react</span> <span class="nf">@emotion</span><span class="nv">/styled</span>
<span class="nf">npm</span> <span class="nf">install</span> <span class="nf">@mui</span><span class="nv">/material</span> <span class="nf">@mui</span><span class="nv">/styled-engine-sc</span> <span class="nf">styled-components</span>
<span class="nf">npm</span> <span class="nf">install</span> <span class="nf">@mui</span><span class="nv">/icons-material</span>

</code></pre></div></div>

<ul>
  <li>Inside the src directory, create a folder and name the folder utils.</li>
  <li>Inside utils folder create a file and name the file BaseUrl.js</li>
  <li>Write below code in src-&gt;utils-&gt;BaseUrl.js</li>
</ul>

<p><strong>BaseUrl.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">const</span> <span class="nx">Base_URL_Customer</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">https://localhost:7154/api</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>Create another js file inside the utils directory and name the file Conversions.js</li>
  <li>Write below code in src-&gt;utils-&gt; Conversions.js</li>
</ul>

<p><strong>Conversions.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">const</span> <span class="nx">convertDateFormat</span> <span class="o">=</span> <span class="p">(</span><span class="nx">date</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">convertedDate</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Date</span><span class="p">(</span><span class="nx">date</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">convertedDate</span><span class="p">.</span><span class="nf">toDateString</span><span class="p">();</span>
<span class="p">};</span>
</code></pre></div></div>

<ul>
  <li>Inside the src directory, create a folder and name the folder services.</li>
  <li>Inside services folder create a file and name the file CustomerService.js</li>
  <li>Write below code in src-&gt;services-&gt; CustomerService.js</li>
</ul>

<p><strong>CustomerService.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">axios</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">axios</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Base_URL_Customer</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../utils/BaseUrl</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">GetAllCustomers</span> <span class="o">=</span> <span class="p">(</span><span class="nx">offset</span><span class="p">,</span> <span class="nx">pageSize</span><span class="p">,</span> <span class="nx">access_token</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="nx">axios</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="nx">Base_URL_Customer</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">/Customers</span><span class="dl">"</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">response</span><span class="p">;</span>
  <span class="p">}</span> <span class="k">catch </span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">throw</span> <span class="nx">error</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<ul>
  <li>Inside the src directory, create a folder and name the folder components.</li>
  <li>Inside components folder create another folder and name the folder CustomerComponent.</li>
  <li>Inside CustomerComponentfolder create a file and name the file DataTableComponent.js</li>
  <li>Write below code in src-&gt;components-&gt; CustomerComponent-&gt; DataTableComponent.js</li>
</ul>

<p><strong>DataTableComponent.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Card</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@mui/material</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">SortIcon</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@mui/icons-material/ArrowDownward</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">DataTable</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-data-table-component</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">convertDateFormat</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../../utils/Conversions</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">DataTableComponent</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">data</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">columns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
      <span class="na">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
      <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Name</span><span class="dl">"</span><span class="p">,</span>
      <span class="na">selector</span><span class="p">:</span> <span class="p">(</span><span class="nx">row</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">row</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span>
      <span class="na">sortable</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">reorder</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="p">{</span>
      <span class="na">id</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
      <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Phone No</span><span class="dl">"</span><span class="p">,</span>
      <span class="na">selector</span><span class="p">:</span> <span class="p">(</span><span class="nx">row</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">row</span><span class="p">.</span><span class="nx">phoneNo</span><span class="p">,</span>
      <span class="na">sortable</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">right</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">reorder</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="p">{</span>
      <span class="na">id</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
      <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Email Address</span><span class="dl">"</span><span class="p">,</span>
      <span class="na">selector</span><span class="p">:</span> <span class="p">(</span><span class="nx">row</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">row</span><span class="p">.</span><span class="nx">emailAddress</span><span class="p">,</span>
      <span class="na">sortable</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">right</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">reorder</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="p">{</span>
      <span class="na">id</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span>
      <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Date of Birth</span><span class="dl">"</span><span class="p">,</span>
      <span class="na">selector</span><span class="p">:</span> <span class="p">(</span><span class="nx">row</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nf">convertDateFormat</span><span class="p">(</span><span class="nx">row</span><span class="p">.</span><span class="nx">dob</span><span class="p">),</span>
      <span class="na">sortable</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">right</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">reorder</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="p">},</span>
  <span class="p">];</span>
  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">data-table</span><span class="dl">"</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">Card</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">DataTable</span>
          <span class="nx">title</span><span class="o">=</span><span class="dl">"</span><span class="s2">Customers List</span><span class="dl">"</span>
          <span class="nx">columns</span><span class="o">=</span><span class="p">{</span><span class="nx">columns</span><span class="p">}</span>
          <span class="nx">data</span><span class="o">=</span><span class="p">{</span><span class="nx">data</span><span class="p">}</span>
          <span class="nx">defaultSortFieldId</span><span class="o">=</span><span class="p">{</span><span class="mi">4</span><span class="p">}</span>
          <span class="nx">sortIcon</span><span class="o">=</span><span class="p">{</span><span class="o">&lt;</span><span class="nx">SortIcon</span> <span class="o">/&gt;</span><span class="p">}</span>
          <span class="nx">pagination</span>
          <span class="nx">selectableRows</span>
          <span class="nx">paginationPerPage</span><span class="o">=</span><span class="p">{</span><span class="mi">5</span><span class="p">}</span>
          <span class="nx">paginationRowsPerPageOptions</span><span class="o">=</span><span class="p">{[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">20</span><span class="p">]}</span>
        <span class="sr">/</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="sr">/Card</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">DataTableComponent</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>Inside CustomerComponent folder create a file and name the file CustomersListComponent.js</li>
  <li>Write below code in src-&gt;components-&gt; CustomerComponent -&gt;CustomersListComponent.js</li>
</ul>

<p><strong>CustomersListComponent.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">useEffect</span><span class="p">,</span> <span class="nx">useState</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">GetAllCustomers</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../../services/CustomerService</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">DataTableComponent</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./DataTableComponent</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">CustomersListComponent</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">state</span><span class="p">,</span> <span class="nx">setState</span><span class="p">]</span> <span class="o">=</span> <span class="nf">useState</span><span class="p">([]);</span>

  <span class="nf">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nc">GetAllCustomers</span><span class="p">().</span><span class="nf">then</span><span class="p">((</span><span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nf">setState</span><span class="p">(</span><span class="nx">res</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
    <span class="p">});</span>
  <span class="p">},</span> <span class="p">[]);</span>

  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">style</span><span class="o">=&gt;</span>
      <span class="o">&lt;</span><span class="nx">DataTableComponent</span> <span class="nx">data</span><span class="o">=</span><span class="p">{</span><span class="nx">state</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">CustomersListComponent</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>Inside the src directory, create a folder and name the folder pages.</li>
  <li>Inside pages folder create a js file and name the file CustomerPage.js</li>
  <li>Write below code in src-&gt;pages-&gt;CustomerPage.js</li>
</ul>

<p><strong>CustomerPage.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">CustomersListComponent</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../components/CustomerComponent/CustomersListComponent</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">CustomerPage</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;&gt;</span>
      <span class="o">&lt;</span><span class="nx">CustomersListComponent</span> <span class="o">/&gt;</span>
    <span class="o">&lt;</span><span class="sr">/</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">CustomerPage</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>Open App.css file and replace with below code.</li>
</ul>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.data-table</span> <span class="p">{</span>
  <span class="nl">box-shadow</span><span class="p">:</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0.25</span><span class="p">)</span> <span class="m">5px</span> <span class="m">5px</span> <span class="m">15px</span> <span class="m">0px</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>Open App.js file and replace with below code.</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">logo</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./logo.svg</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="dl">"</span><span class="s2">./App.css</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="dl">"</span><span class="s2">./App.css</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">BrowserRouter</span><span class="p">,</span> <span class="nx">Route</span><span class="p">,</span> <span class="nx">Routes</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-router-dom</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">CustomerPage</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./pages/CustomerPage</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">createBrowserHistory</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">history</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">defaultHistory</span> <span class="o">=</span> <span class="nf">createBrowserHistory</span><span class="p">();</span>
<span class="kd">function</span> <span class="nf">App</span><span class="p">({</span> <span class="nx">history</span> <span class="o">=</span> <span class="nx">defaultHistory</span> <span class="p">})</span> <span class="p">{</span>
  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">BrowserRouter</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">Routes</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="dl">"</span><span class="s2">/</span><span class="dl">"</span> <span class="nx">element</span><span class="o">=</span><span class="p">{</span><span class="o">&lt;</span><span class="nx">CustomerPage</span> <span class="o">/&gt;</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="dl">"</span><span class="s2">/customers</span><span class="dl">"</span> <span class="nx">element</span><span class="o">=</span><span class="p">{</span><span class="o">&lt;</span><span class="nx">CustomerPage</span> <span class="o">/&gt;</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="sr">/Routes</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/BrowserRouter</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">App</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>Open index.js file and replace with below code.</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">ReactDOM</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-dom/client</span><span class="dl">"</span><span class="p">;</span>
<span class="c1">//import ReactDOM from "react-dom";</span>
<span class="k">import</span> <span class="dl">"</span><span class="s2">./index.css</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">App</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./App</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">reportWebVitals</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./reportWebVitals</span><span class="dl">"</span><span class="p">;</span>

<span class="nb">window</span><span class="p">.</span><span class="nx">renderCustomer</span> <span class="o">=</span> <span class="p">(</span><span class="nx">masterId</span><span class="p">,</span> <span class="nx">history</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">customerElement</span> <span class="o">=</span> <span class="nx">ReactDOM</span><span class="p">.</span><span class="nf">createRoot</span><span class="p">(</span>
    <span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="nx">masterId</span><span class="p">)</span>
  <span class="p">);</span>

  <span class="nx">customerElement</span><span class="p">.</span><span class="nf">render</span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">React</span><span class="p">.</span><span class="nx">StrictMode</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">App</span> <span class="nx">history</span><span class="o">=</span><span class="p">{</span><span class="nx">history</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/React.StrictMode</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">};</span>

<span class="nb">window</span><span class="p">.</span><span class="nx">unmountCustomer</span> <span class="o">=</span> <span class="p">(</span><span class="nx">masterId</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">// unmount of remove component</span>
  <span class="c1">//debugger;</span>
  <span class="c1">//ReactDOM.unmountComponentAtNode(document.getElementById(masterId));</span>
<span class="p">};</span>

<span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">Customer-master</span><span class="dl">"</span><span class="p">))</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">root</span> <span class="o">=</span> <span class="nx">ReactDOM</span><span class="p">.</span><span class="nf">createRoot</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">root</span><span class="dl">"</span><span class="p">));</span>
  <span class="nx">root</span><span class="p">.</span><span class="nf">render</span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">React</span><span class="p">.</span><span class="nx">StrictMode</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">App</span> <span class="o">/&gt;</span>
    <span class="o">&lt;</span><span class="sr">/React.StrictMode</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>

<span class="c1">// If you want to start measuring performance in your app, pass a function</span>
<span class="c1">// to log results (for example: reportWebVitals(console.log))</span>
<span class="c1">// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals</span>
<span class="nf">reportWebVitals</span><span class="p">();</span>
</code></pre></div></div>

<ul>
  <li>Create another file inside src folder, name the file setupProxy.js and write below code for cors policy.</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">(</span><span class="nx">app</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">app</span><span class="p">.</span><span class="nf">use</span><span class="p">((</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">res</span><span class="p">.</span><span class="nf">header</span><span class="p">(</span><span class="dl">"</span><span class="s2">Access-Control-Allow-Origin</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">*</span><span class="dl">"</span><span class="p">);</span>
    <span class="nf">next</span><span class="p">();</span>
  <span class="p">});</span>
<span class="p">};</span>
</code></pre></div></div>

<ul>
  <li>Create a file inside root directory and name the file config-overrides.js and write below code. Below code will override webpack of react.</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">webpack</span><span class="p">:</span> <span class="p">(</span><span class="nx">config</span><span class="p">,</span> <span class="nx">env</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">config</span><span class="p">.</span><span class="nx">optimization</span><span class="p">.</span><span class="nx">runtimeChunk</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
    <span class="nx">config</span><span class="p">.</span><span class="nx">optimization</span><span class="p">.</span><span class="nx">splitChunks</span> <span class="o">=</span> <span class="p">{</span>
      <span class="na">cacheGroups</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">default</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
      <span class="p">},</span>
    <span class="p">};</span>

    <span class="nx">config</span><span class="p">.</span><span class="nx">output</span><span class="p">.</span><span class="nx">filename</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">static/js/[name].js</span><span class="dl">"</span><span class="p">;</span>

    <span class="nx">config</span><span class="p">.</span><span class="nx">plugins</span><span class="p">[</span><span class="mi">5</span><span class="p">].</span><span class="nx">options</span><span class="p">.</span><span class="nx">filename</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">static/css/[name].css</span><span class="dl">"</span><span class="p">;</span>
    <span class="nx">config</span><span class="p">.</span><span class="nx">plugins</span><span class="p">[</span><span class="mi">5</span><span class="p">].</span><span class="nx">options</span><span class="p">.</span><span class="nx">moduleFilename</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="dl">"</span><span class="s2">static/css/main.css</span><span class="dl">"</span><span class="p">;</span>
    <span class="k">return</span> <span class="nx">config</span><span class="p">;</span>
  <span class="p">},</span>
<span class="p">};</span>
</code></pre></div></div>

<ul>
  <li>Open package.json and replace “scripts” section with below code. This project going to be open on 3003 port.</li>
</ul>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="nl">"start"</span><span class="p">:</span><span class="w"> </span><span class="s2">"set PORT=3003 &amp;&amp; react-app-rewired start"</span><span class="p">,</span><span class="w">
</span><span class="nl">"build"</span><span class="p">:</span><span class="w"> </span><span class="s2">"react-app-rewired build"</span><span class="p">,</span><span class="w">
</span><span class="nl">"test"</span><span class="p">:</span><span class="w"> </span><span class="s2">"react-app-rewired test"</span><span class="p">,</span><span class="w">
</span><span class="nl">"eject"</span><span class="p">:</span><span class="w"> </span><span class="s2">"react-scripts eject"</span><span class="w">
</span><span class="p">}</span><span class="err">,</span><span class="w">

</span></code></pre></div></div>

<ul>
  <li>Now run the backend Customer.API project</li>
  <li>Go to the directory of customer-frontend application and run the following command.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">npm</span> <span class="nf">start</span>
</code></pre></div></div>

<ul>
  <li>You will see the below output. It means customer service works fine.</li>
</ul>

<p><img src="/assets/images/posts/2023/mfe-05.png" alt="" /></p>

<p><strong>Step 7: Configure master-frontend React Project</strong></p>

<ul>
  <li>Open the Terminal and install below libraries with below command.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">npm</span> <span class="nf">install</span> <span class="nf">react-router-dom</span>
<span class="nf">npm</span> <span class="nf">install</span> <span class="nf">react-bootstrap</span> <span class="nf">bootstrap@5.1.3</span>
<span class="nf">npm</span> <span class="nf">install</span> <span class="nf">@trendmicro</span><span class="nv">/react-sidenav</span>

</code></pre></div></div>

<ul>
  <li>Inside root directory create a file and name the file .env and write code.</li>
</ul>

<pre><code class="language-env">REACT_APP_HEADER_HOST=http://localhost:3001
REACT_APP_PRODUCT_HOST=http://localhost:3002
REACT_APP_CUSTOMER_HOST=http://localhost:3003
</code></pre>

<ul>
  <li>Inside the src directory create a js file to handle micro-frontend services, name the file MicroFrontend.js and write below code.</li>
</ul>

<p><strong>MicroFrontend.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">useEffect</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">function</span> <span class="nf">MicroFrontend</span><span class="p">({</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">host</span><span class="p">,</span> <span class="nx">history</span> <span class="p">})</span> <span class="p">{</span>
  <span class="nf">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">scriptId</span> <span class="o">=</span> <span class="s2">`micro-frontend-script-</span><span class="p">${</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>

    <span class="kd">const</span> <span class="nx">renderMicroFrontend</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nb">window</span><span class="p">[</span><span class="s2">`render</span><span class="p">${</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">](</span><span class="s2">`</span><span class="p">${</span><span class="nx">name</span><span class="p">}</span><span class="s2">-master`</span><span class="p">,</span> <span class="nx">history</span><span class="p">);</span>
    <span class="p">};</span>

    <span class="k">if </span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="nx">scriptId</span><span class="p">))</span> <span class="p">{</span>
      <span class="nf">renderMicroFrontend</span><span class="p">();</span>
      <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="nf">fetch</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">host</span><span class="p">}</span><span class="s2">/asset-manifest.json`</span><span class="p">)</span>
      <span class="p">.</span><span class="nf">then</span><span class="p">((</span><span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">res</span><span class="p">.</span><span class="nf">json</span><span class="p">())</span>
      <span class="p">.</span><span class="nf">then</span><span class="p">((</span><span class="nx">manifest</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">script</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">createElement</span><span class="p">(</span><span class="dl">"</span><span class="s2">script</span><span class="dl">"</span><span class="p">);</span>
        <span class="nx">script</span><span class="p">.</span><span class="nx">id</span> <span class="o">=</span> <span class="nx">scriptId</span><span class="p">;</span>
        <span class="nx">script</span><span class="p">.</span><span class="nx">crossOrigin</span> <span class="o">=</span> <span class="dl">""</span><span class="p">;</span>
        <span class="nx">script</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="s2">`</span><span class="p">${</span><span class="nx">host</span><span class="p">}${</span><span class="nx">manifest</span><span class="p">.</span><span class="nx">files</span><span class="p">[</span><span class="dl">"</span><span class="s2">main.js</span><span class="dl">"</span><span class="p">]}</span><span class="s2">`</span><span class="p">;</span>
        <span class="nx">script</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="nf">renderMicroFrontend</span><span class="p">();</span>
        <span class="p">};</span>
        <span class="nb">document</span><span class="p">.</span><span class="nx">head</span><span class="p">.</span><span class="nf">appendChild</span><span class="p">(</span><span class="nx">script</span><span class="p">);</span>
      <span class="p">});</span>

    <span class="k">return </span><span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nb">window</span><span class="p">[</span><span class="s2">`unmount</span><span class="p">${</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="nb">window</span><span class="p">[</span><span class="s2">`unmount</span><span class="p">${</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">](</span><span class="s2">`</span><span class="p">${</span><span class="nx">name</span><span class="p">}</span><span class="s2">-master`</span><span class="p">);</span>
    <span class="p">};</span>
  <span class="p">});</span>

  <span class="c1">//debugger;</span>
  <span class="k">return</span> <span class="o">&lt;</span><span class="nx">main</span> <span class="nx">id</span><span class="o">=</span><span class="p">{</span><span class="s2">`</span><span class="p">${</span><span class="nx">name</span><span class="p">}</span><span class="s2">-master`</span><span class="p">}</span> <span class="sr">/&gt;</span><span class="err">;
</span><span class="p">}</span>

<span class="nx">MicroFrontend</span><span class="p">.</span><span class="nx">defaultProps</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nb">document</span><span class="p">,</span>
  <span class="nb">window</span><span class="p">,</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">MicroFrontend</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>Inside src directory create following four folders.
    <ul>
      <li>assets</li>
      <li>common</li>
      <li>components</li>
      <li>micro-services</li>
    </ul>
  </li>
  <li>Create a js file inside common folder for sidebar navigation and name the file SideNavbar.js and write below code.</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useLocation</span><span class="p">,</span> <span class="nx">useNavigate</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-router-dom</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">SideNav</span><span class="p">,</span> <span class="p">{</span> <span class="nx">NavItem</span><span class="p">,</span> <span class="nx">NavIcon</span><span class="p">,</span> <span class="nx">NavText</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@trendmicro/react-sidenav</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">SideNavbar</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">location</span> <span class="o">=</span> <span class="nf">useLocation</span><span class="p">();</span>
  <span class="kd">const</span> <span class="nx">history</span> <span class="o">=</span> <span class="nf">useNavigate</span><span class="p">();</span>
  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">SideNav</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">sidenav</span><span class="dl">"</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">SideNav</span>
        <span class="nx">onSelect</span><span class="o">=</span><span class="p">{(</span><span class="nx">selected</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="kd">const</span> <span class="nx">to</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">/</span><span class="dl">"</span> <span class="o">+</span> <span class="nx">selected</span><span class="p">;</span>
          <span class="k">if </span><span class="p">(</span><span class="nx">location</span><span class="p">.</span><span class="nx">pathname</span> <span class="o">!==</span> <span class="nx">to</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Path Name:</span><span class="dl">"</span><span class="p">,</span> <span class="nx">location</span><span class="p">.</span><span class="nx">pathname</span><span class="p">);</span>
            <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">To:</span><span class="dl">"</span><span class="p">,</span> <span class="nx">to</span><span class="p">);</span>
            <span class="nf">history</span><span class="p">(</span><span class="nx">to</span><span class="p">);</span>
          <span class="p">}</span>
        <span class="p">}}</span>
      <span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">SideNav</span><span class="p">.</span><span class="nx">Toggle</span> <span class="o">/&gt;</span>
        <span class="o">&lt;</span><span class="nx">SideNav</span><span class="p">.</span><span class="nx">Nav</span> <span class="nx">defaultSelected</span><span class="o">=</span><span class="dl">""</span><span class="o">&gt;</span>
          <span class="o">&lt;</span><span class="nx">NavItem</span> <span class="nx">eventKey</span><span class="o">=</span><span class="dl">"</span><span class="s2">home</span><span class="dl">"</span><span class="o">&gt;</span>
            <span class="o">&lt;</span><span class="nx">NavIcon</span><span class="o">&gt;</span>
              <span class="o">&lt;</span><span class="nx">i</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">fa fa-fw fa-home</span><span class="dl">"</span> <span class="nx">style</span><span class="o">=</span> <span class="sr">/</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="sr">/NavIcon</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="nx">NavText</span><span class="o">&gt;</span><span class="nx">Dashboard</span><span class="o">&lt;</span><span class="sr">/NavText</span><span class="err">&gt;
</span>          <span class="o">&lt;</span><span class="sr">/NavItem</span><span class="err">&gt;
</span>
          <span class="o">&lt;</span><span class="nx">NavItem</span> <span class="nx">eventKey</span><span class="o">=</span><span class="dl">"</span><span class="s2">product-list</span><span class="dl">"</span><span class="o">&gt;</span>
            <span class="o">&lt;</span><span class="nx">NavIcon</span><span class="o">&gt;</span>
              <span class="o">&lt;</span><span class="nx">i</span>
                <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">fa fa-fw fa-device</span><span class="dl">"</span>
                <span class="nx">style</span><span class="o">=</span>
              <span class="sr">/</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="sr">/NavIcon</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="nx">NavText</span><span class="o">&gt;</span><span class="nx">Product</span><span class="o">&lt;</span><span class="sr">/NavText</span><span class="err">&gt;
</span>          <span class="o">&lt;</span><span class="sr">/NavItem</span><span class="err">&gt;
</span>
          <span class="o">&lt;</span><span class="nx">NavItem</span> <span class="nx">eventKey</span><span class="o">=</span><span class="dl">"</span><span class="s2">product-categories</span><span class="dl">"</span><span class="o">&gt;</span>
            <span class="o">&lt;</span><span class="nx">NavIcon</span><span class="o">&gt;</span>
              <span class="o">&lt;</span><span class="nx">i</span>
                <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">fa fa-fw fa-device</span><span class="dl">"</span>
                <span class="nx">style</span><span class="o">=</span>
              <span class="sr">/</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="sr">/NavIcon</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="nx">NavText</span><span class="o">&gt;</span><span class="nx">Categories</span><span class="o">&lt;</span><span class="sr">/NavText</span><span class="err">&gt;
</span>          <span class="o">&lt;</span><span class="sr">/NavItem</span><span class="err">&gt;
</span>
          <span class="o">&lt;</span><span class="nx">NavItem</span> <span class="nx">eventKey</span><span class="o">=</span><span class="dl">"</span><span class="s2">customers</span><span class="dl">"</span><span class="o">&gt;</span>
            <span class="o">&lt;</span><span class="nx">NavIcon</span><span class="o">&gt;</span>
              <span class="o">&lt;</span><span class="nx">i</span>
                <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">fa fa-fw fa-device</span><span class="dl">"</span>
                <span class="nx">style</span><span class="o">=</span>
              <span class="sr">/</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="sr">/NavIcon</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="nx">NavText</span><span class="o">&gt;</span><span class="nx">Customers</span><span class="o">&lt;</span><span class="sr">/NavText</span><span class="err">&gt;
</span>          <span class="o">&lt;</span><span class="sr">/NavItem</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="sr">/SideNav.Nav</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="sr">/SideNav</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/SideNav</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">SideNavbar</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>Create a css file inside assets folder and name the file homeStyle.css and write below code.</li>
</ul>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@import</span> <span class="sx">url("https://fonts.googleapis.com/css2?family=Mulish:wght@200&amp;display=swap")</span><span class="p">;</span>

<span class="o">/</span><span class="nt">_</span> <span class="nt">this</span> <span class="nt">is</span> <span class="nt">non</span> <span class="nt">resposive</span> <span class="o">,</span> <span class="nt">please</span> <span class="nt">adjust</span> <span class="nt">for</span> <span class="nt">smaller</span> <span class="nt">screens</span> <span class="nt">before</span> <span class="nt">using_</span><span class="o">/</span>

<span class="nt">-</span> <span class="p">{</span>
  <span class="nl">padding</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
  <span class="nl">margin</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
  <span class="p">}</span>

<span class="nc">.container</span> <span class="p">{</span>
<span class="nl">display</span><span class="p">:</span> <span class="n">flex</span><span class="p">;</span>

    <span class="c">/* width: 100vw;

height: 100vh; \*/</span>
<span class="nl">overflow</span><span class="p">:</span> <span class="nb">visible</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.span1</span> <span class="p">{</span>
<span class="err">/_</span> <span class="nl">border</span><span class="p">:</span> <span class="nb">rgb</span><span class="p">(</span><span class="m">149</span><span class="p">,</span> <span class="m">101</span><span class="p">,</span> <span class="m">228</span><span class="p">)</span> <span class="nb">solid</span> <span class="m">2px</span><span class="p">;</span> <span class="err">_/</span>
<span class="nl">margin-top</span><span class="p">:</span> <span class="m">90px</span><span class="p">;</span>
<span class="nl">width</span><span class="p">:</span> <span class="m">100px</span><span class="p">;</span>
<span class="nl">height</span><span class="p">:</span> <span class="m">100px</span><span class="p">;</span>
<span class="nl">position</span><span class="p">:</span> <span class="nb">fixed</span><span class="p">;</span>
<span class="nl">border-radius</span><span class="p">:</span> <span class="m">50%</span><span class="p">;</span>
<span class="nl">transform</span><span class="p">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">30deg</span><span class="p">)</span> <span class="n">scale</span><span class="p">(</span><span class="m">1.5</span><span class="p">);</span>
<span class="nl">box-shadow</span><span class="p">:</span> <span class="nb">inset</span> <span class="m">10px</span> <span class="m">10px</span> <span class="m">10px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0.1</span><span class="p">),</span>
<span class="m">15px</span> <span class="m">20px</span> <span class="m">20px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0.5</span><span class="p">),</span>
<span class="nb">inset</span> <span class="m">-25px</span> <span class="m">-20px</span> <span class="m">20px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">255</span><span class="p">,</span> <span class="m">255</span><span class="p">,</span> <span class="m">255</span><span class="p">,</span> <span class="m">0.3</span><span class="p">);</span>
<span class="nl">animation</span><span class="p">:</span> <span class="n">anim</span> <span class="m">20s</span> <span class="n">ease</span> <span class="n">infinite</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.span2</span> <span class="p">{</span>
<span class="err">/_</span> <span class="nl">border</span><span class="p">:</span> <span class="nb">solid</span> <span class="no">black</span> <span class="m">2px</span><span class="p">;</span> <span class="err">_/</span>
<span class="nl">height</span><span class="p">:</span> <span class="m">100px</span><span class="p">;</span>
<span class="nl">width</span><span class="p">:</span> <span class="m">200px</span><span class="p">;</span>
<span class="nl">text-align</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
<span class="nl">font-size</span><span class="p">:</span> <span class="m">12vh</span><span class="p">;</span>
<span class="nl">color</span><span class="p">:</span> <span class="nb">rgb</span><span class="p">(</span><span class="m">193</span><span class="p">,</span> <span class="m">193</span><span class="p">,</span> <span class="m">218</span><span class="p">);</span>
<span class="nl">justify-content</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
<span class="nl">transform</span><span class="p">:</span> <span class="n">translateX</span><span class="p">(</span><span class="m">300px</span><span class="p">)</span> <span class="n">translateY</span><span class="p">(</span><span class="m">180px</span><span class="p">);</span>
<span class="nl">letter-spacing</span><span class="p">:</span> <span class="m">10px</span><span class="p">;</span>
<span class="nl">position</span><span class="p">:</span> <span class="nb">relative</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.span2</span> <span class="nc">.medtext</span> <span class="p">{</span>
<span class="nl">font-weight</span><span class="p">:</span> <span class="m">100</span><span class="p">;</span>
<span class="nl">text-shadow</span><span class="p">:</span> <span class="m">5px</span> <span class="m">5px</span> <span class="m">20px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">19</span><span class="p">,</span> <span class="m">133</span><span class="p">,</span> <span class="m">179</span><span class="p">,</span> <span class="m">0.5</span><span class="p">),</span>
<span class="m">-10px</span> <span class="m">10px</span> <span class="m">20px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">255</span><span class="p">,</span> <span class="m">255</span><span class="p">,</span> <span class="m">255</span><span class="p">,</span> <span class="m">0.5</span><span class="p">);</span>
<span class="nl">z-index</span><span class="p">:</span> <span class="m">10</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.span2</span> <span class="nc">.large</span> <span class="p">{</span>
<span class="nl">font-size</span><span class="p">:</span> <span class="m">30vh</span><span class="p">;</span>
<span class="nl">font-weight</span><span class="p">:</span> <span class="m">200</span><span class="p">;</span>
<span class="nl">text-shadow</span><span class="p">:</span> <span class="m">10px</span> <span class="m">10px</span> <span class="m">20px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">19</span><span class="p">,</span> <span class="m">133</span><span class="p">,</span> <span class="m">179</span><span class="p">,</span> <span class="m">0.5</span><span class="p">),</span>
<span class="m">-20px</span> <span class="m">20px</span> <span class="m">30px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">255</span><span class="p">,</span> <span class="m">255</span><span class="p">,</span> <span class="m">255</span><span class="p">,</span> <span class="m">0.5</span><span class="p">);</span>
<span class="p">}</span>

<span class="nc">.span3</span> <span class="p">{</span>
<span class="nl">position</span><span class="p">:</span> <span class="nb">absolute</span><span class="p">;</span>
<span class="nl">bottom</span><span class="p">:</span> <span class="m">10px</span><span class="p">;</span>
<span class="nl">right</span><span class="p">:</span> <span class="m">20px</span><span class="p">;</span>

    <span class="nl">height</span><span class="p">:</span> <span class="m">120px</span><span class="p">;</span>
    <span class="nl">justify-content</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>

<span class="p">}</span>

<span class="nc">.span4</span> <span class="p">{</span>
<span class="nl">transform</span><span class="p">:</span> <span class="n">translateY</span><span class="p">(</span><span class="m">80px</span><span class="p">)</span> <span class="n">rotate</span><span class="p">(</span><span class="m">90deg</span><span class="p">)</span> <span class="n">translateX</span><span class="p">(</span><span class="m">300px</span><span class="p">);</span>
<span class="err">/_</span> <span class="nl">border</span><span class="p">:</span> <span class="nb">solid</span> <span class="no">red</span> <span class="m">2px</span><span class="p">;</span> <span class="err">_/</span>
<span class="nl">height</span><span class="p">:</span> <span class="m">50px</span><span class="p">;</span>
<span class="nl">justify-content</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
<span class="nl">position</span><span class="p">:</span> <span class="nb">absolute</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.span4</span> <span class="nt">h2</span> <span class="p">{</span>
<span class="nl">font-size</span><span class="p">:</span> <span class="m">80px</span><span class="p">;</span>
<span class="nl">font-weight</span><span class="p">:</span> <span class="m">10</span><span class="p">;</span>
<span class="nl">padding-bottom</span><span class="p">:</span> <span class="m">10px</span><span class="p">;</span>
<span class="nl">color</span><span class="p">:</span> <span class="nb">rgb</span><span class="p">(</span><span class="m">86</span><span class="p">,</span> <span class="m">86</span><span class="p">,</span> <span class="m">206</span><span class="p">);</span>
<span class="nl">text-shadow</span><span class="p">:</span> <span class="m">5px</span> <span class="m">5px</span> <span class="m">20px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">19</span><span class="p">,</span> <span class="m">133</span><span class="p">,</span> <span class="m">179</span><span class="p">,</span> <span class="m">0.5</span><span class="p">),</span>
<span class="m">-10px</span> <span class="m">10px</span> <span class="m">10px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">255</span><span class="p">,</span> <span class="m">255</span><span class="p">,</span> <span class="m">255</span><span class="p">,</span> <span class="m">0.5</span><span class="p">);</span>
<span class="p">}</span>

<span class="nc">.span3</span> <span class="nt">h2</span> <span class="p">{</span>
<span class="nl">color</span><span class="p">:</span> <span class="nb">rgb</span><span class="p">(</span><span class="m">86</span><span class="p">,</span> <span class="m">86</span><span class="p">,</span> <span class="m">206</span><span class="p">);</span>
<span class="p">}</span>

<span class="nc">.overflow</span> <span class="p">{</span>
<span class="nl">position</span><span class="p">:</span> <span class="nb">absolute</span><span class="p">;</span>
<span class="nl">width</span><span class="p">:</span> <span class="m">85vh</span><span class="p">;</span>
<span class="nl">height</span><span class="p">:</span> <span class="m">85vh</span><span class="p">;</span>

    <span class="nl">background</span><span class="p">:</span> <span class="n">rgba</span><span class="p">(</span><span class="m">117</span><span class="p">,</span> <span class="m">117</span><span class="p">,</span> <span class="m">224</span><span class="p">,</span> <span class="m">0.726</span><span class="p">);</span>
    <span class="nl">z-index</span><span class="p">:</span> <span class="m">5</span><span class="p">;</span>
    <span class="nl">top</span><span class="p">:</span> <span class="m">10vh</span><span class="p">;</span>
    <span class="nl">left</span><span class="p">:</span> <span class="m">5vh</span><span class="p">;</span>
    <span class="nl">border-radius</span><span class="p">:</span> <span class="m">50%</span><span class="p">;</span>
    <span class="nl">animation</span><span class="p">:</span> <span class="n">animate</span> <span class="m">5s</span> <span class="n">ease</span> <span class="n">infinite</span><span class="p">;</span>
    <span class="nl">box-shadow</span><span class="p">:</span> <span class="nb">inset</span> <span class="m">10px</span> <span class="m">-10px</span> <span class="m">30px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0.2</span><span class="p">),</span>
        <span class="m">15px</span> <span class="m">-20px</span> <span class="m">30px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">255</span><span class="p">,</span> <span class="m">255</span><span class="p">,</span> <span class="m">255</span><span class="p">,</span> <span class="m">0.5</span><span class="p">),</span>
        <span class="nb">inset</span> <span class="m">-25px</span> <span class="m">-20px</span> <span class="m">30px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0.3</span><span class="p">),</span>
        <span class="m">-20px</span> <span class="m">20px</span> <span class="m">30px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">255</span><span class="p">,</span> <span class="m">255</span><span class="p">,</span> <span class="m">255</span><span class="p">,</span> <span class="m">0.37</span><span class="p">);</span>

    <span class="nl">display</span><span class="p">:</span> <span class="n">flex</span><span class="p">;</span>
    <span class="nl">align-items</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
    <span class="nl">justify-content</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>

<span class="p">}</span>

<span class="k">@keyframes</span> <span class="n">animate</span> <span class="p">{</span>
<span class="err">0</span><span class="o">%</span> <span class="p">{</span>
<span class="nl">transform</span><span class="p">:</span> <span class="n">scale</span><span class="p">(</span><span class="m">0</span><span class="p">);</span>
<span class="p">}</span>

    <span class="err">40</span><span class="o">%</span> <span class="p">{</span>
        <span class="nl">transform</span><span class="p">:</span> <span class="n">scale</span><span class="p">(</span><span class="m">0.7</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="err">60</span><span class="o">%</span> <span class="p">{</span>
        <span class="nl">transform</span><span class="p">:</span> <span class="n">scale</span><span class="p">(</span><span class="m">0.8</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="err">100</span><span class="o">%</span> <span class="p">{</span>
        <span class="nl">transform</span><span class="p">:</span> <span class="n">scale</span><span class="p">(</span><span class="m">0</span><span class="p">);</span>
    <span class="p">}</span>

<span class="p">}</span>

<span class="nc">.hero</span> <span class="p">{</span>
<span class="nl">color</span><span class="p">:</span> <span class="nb">rgb</span><span class="p">(</span><span class="m">49</span><span class="p">,</span> <span class="m">69</span><span class="p">,</span> <span class="m">185</span><span class="p">);</span>
<span class="nl">font-size</span><span class="p">:</span> <span class="m">9vh</span><span class="p">;</span>
<span class="nl">text-align</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
<span class="nl">font-weight</span><span class="p">:</span> <span class="m">100</span><span class="p">;</span>
<span class="nl">letter-spacing</span><span class="p">:</span> <span class="m">10px</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.span5</span> <span class="p">{</span>
<span class="nl">width</span><span class="p">:</span> <span class="m">70vh</span><span class="p">;</span>
<span class="nl">height</span><span class="p">:</span> <span class="m">70vh</span><span class="p">;</span>
<span class="nl">position</span><span class="p">:</span> <span class="nb">absolute</span><span class="p">;</span>
<span class="nl">right</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
<span class="nl">border-bottom-left-radius</span><span class="p">:</span> <span class="m">100%</span><span class="p">;</span>
<span class="nl">border-top-width</span><span class="p">:</span> <span class="m">0px</span><span class="p">;</span>
<span class="nl">border-right-width</span><span class="p">:</span> <span class="m">0px</span><span class="p">;</span>
<span class="nl">box-shadow</span><span class="p">:</span> <span class="nb">inset</span> <span class="m">10px</span> <span class="m">10px</span> <span class="m">10px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0.1</span><span class="p">),</span>
<span class="m">15px</span> <span class="m">20px</span> <span class="m">20px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0.5</span><span class="p">),</span>
<span class="nb">inset</span> <span class="m">-25px</span> <span class="m">-20px</span> <span class="m">20px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">255</span><span class="p">,</span> <span class="m">255</span><span class="p">,</span> <span class="m">255</span><span class="p">,</span> <span class="m">0.3</span><span class="p">);</span>
<span class="nl">position</span><span class="p">:</span> <span class="nb">absolute</span><span class="p">;</span>
<span class="nl">animation</span><span class="p">:</span> <span class="n">anim</span> <span class="m">18s</span> <span class="n">ease</span> <span class="n">infinite</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.span6</span> <span class="p">{</span>
<span class="nl">width</span><span class="p">:</span> <span class="m">10vw</span><span class="p">;</span>
<span class="nl">height</span><span class="p">:</span> <span class="m">10vw</span><span class="p">;</span>
<span class="nl">position</span><span class="p">:</span> <span class="nb">absolute</span><span class="p">;</span>
<span class="nl">left</span><span class="p">:</span> <span class="m">40vw</span><span class="p">;</span>
<span class="nl">top</span><span class="p">:</span> <span class="m">20vh</span><span class="p">;</span>
<span class="nl">border-radius</span><span class="p">:</span> <span class="m">50%</span><span class="p">;</span>
<span class="nl">box-shadow</span><span class="p">:</span> <span class="nb">inset</span> <span class="m">10px</span> <span class="m">10px</span> <span class="m">10px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0.1</span><span class="p">),</span>
<span class="m">15px</span> <span class="m">20px</span> <span class="m">20px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0.5</span><span class="p">),</span>
<span class="nb">inset</span> <span class="m">-25px</span> <span class="m">-20px</span> <span class="m">20px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">255</span><span class="p">,</span> <span class="m">255</span><span class="p">,</span> <span class="m">255</span><span class="p">,</span> <span class="m">0.3</span><span class="p">);</span>
<span class="nl">animation</span><span class="p">:</span> <span class="n">anim</span> <span class="m">17s</span> <span class="n">ease</span> <span class="n">infinite</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.span7</span> <span class="p">{</span>
<span class="nl">width</span><span class="p">:</span> <span class="m">6vw</span><span class="p">;</span>
<span class="nl">height</span><span class="p">:</span> <span class="m">6vw</span><span class="p">;</span>
<span class="nl">position</span><span class="p">:</span> <span class="nb">absolute</span><span class="p">;</span>
<span class="nl">left</span><span class="p">:</span> <span class="m">80vw</span><span class="p">;</span>
<span class="nl">top</span><span class="p">:</span> <span class="m">80vh</span><span class="p">;</span>
<span class="nl">border-radius</span><span class="p">:</span> <span class="m">50%</span><span class="p">;</span>
<span class="nl">box-shadow</span><span class="p">:</span> <span class="nb">inset</span> <span class="m">10px</span> <span class="m">10px</span> <span class="m">10px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0.1</span><span class="p">),</span>
<span class="m">15px</span> <span class="m">20px</span> <span class="m">20px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0.5</span><span class="p">),</span>
<span class="nb">inset</span> <span class="m">-25px</span> <span class="m">-20px</span> <span class="m">20px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">255</span><span class="p">,</span> <span class="m">255</span><span class="p">,</span> <span class="m">255</span><span class="p">,</span> <span class="m">0.3</span><span class="p">);</span>
<span class="p">}</span>

<span class="nc">.body</span> <span class="p">{</span>
<span class="nl">height</span><span class="p">:</span> <span class="m">100%</span><span class="p">;</span>
<span class="nl">background</span><span class="p">:</span> <span class="no">turquoise</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.span3</span> <span class="nt">h2</span> <span class="p">{</span>
<span class="nl">font-size</span><span class="p">:</span> <span class="m">50px</span><span class="p">;</span>
<span class="nl">bottom</span><span class="p">:</span> <span class="m">10px</span><span class="p">;</span>
<span class="nl">font-weight</span><span class="p">:</span> <span class="m">100</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.span7</span> <span class="p">{</span>
<span class="nl">animation</span><span class="p">:</span> <span class="n">anim</span> <span class="m">10s</span> <span class="n">ease</span> <span class="n">infinite</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">@keyframes</span> <span class="n">anim</span> <span class="p">{</span>
<span class="err">50</span><span class="o">%</span> <span class="p">{</span>
<span class="nl">transform</span><span class="p">:</span> <span class="n">translateX</span><span class="p">(</span><span class="m">50px</span><span class="p">)</span> <span class="n">scale</span><span class="p">(</span><span class="m">1.3</span><span class="p">)</span> <span class="n">translateY</span><span class="p">(</span><span class="m">5px</span><span class="p">);</span>
<span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Inside the component folder, create a js file name the file Home.js.</li>
  <li>Write below code in src -&gt; component -&gt; Home.js</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="dl">"</span><span class="s2">../assets/homeStyle.css</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">Home</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;&gt;</span>
      <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">style</span><span class="o">=&gt;</span>
        <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">container</span><span class="dl">"</span><span class="o">&gt;</span>
          <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">span1</span><span class="dl">"</span><span class="o">&gt;&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>          <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">span2</span><span class="dl">"</span><span class="o">&gt;</span>
            <span class="o">&lt;</span><span class="nx">h2</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">medtext</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Think</span><span class="o">&lt;</span><span class="sr">/h2</span><span class="err">&gt;
</span>
            <span class="o">&lt;</span><span class="nx">h2</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">large</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Simple</span><span class="o">&lt;</span><span class="sr">/h2</span><span class="err">&gt;
</span>          <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>          <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">span3</span><span class="dl">"</span><span class="o">&gt;</span>
            <span class="o">&lt;</span><span class="nx">h2</span><span class="o">&gt;</span><span class="nx">MAHEDEE</span><span class="p">.</span><span class="nx">NET</span><span class="o">&lt;</span><span class="sr">/h2</span><span class="err">&gt;
</span>          <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>          <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">span4</span><span class="dl">"</span><span class="o">&gt;</span>
            <span class="o">&lt;</span><span class="nx">h2</span><span class="o">&gt;</span><span class="nx">Learn</span><span class="o">&lt;</span><span class="sr">/h2</span><span class="err">&gt;
</span>          <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>
          <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">span5</span><span class="dl">"</span><span class="o">&gt;&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>          <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">span6</span><span class="dl">"</span><span class="o">&gt;&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>          <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">span7</span><span class="dl">"</span><span class="o">&gt;&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>
        <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">overflow</span><span class="dl">"</span><span class="o">&gt;</span>
          <span class="o">&lt;</span><span class="nx">h1</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">hero</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">MAHEDEE</span><span class="p">.</span><span class="nx">NET</span><span class="o">&lt;</span><span class="sr">/h1</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">};</span>
</code></pre></div></div>

<ul>
  <li>Inside micro-services folder creates following js files.
    <ul>
      <li>ProductMicroServices.js</li>
      <li>LayoutMicroServices.js</li>
      <li>CustomerMicroServices.js</li>
    </ul>
  </li>
</ul>

<p><strong>ProductMicroServices.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">MicroFrontend</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../MicroFrontend</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="p">{</span> <span class="na">REACT_APP_PRODUCT_HOST</span><span class="p">:</span> <span class="nx">productHost</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">function</span> <span class="nf">ProductList</span><span class="p">({</span> <span class="nx">history</span> <span class="p">})</span> <span class="p">{</span>
  <span class="k">return</span> <span class="o">&lt;</span><span class="nx">MicroFrontend</span> <span class="nx">history</span><span class="o">=</span><span class="p">{</span><span class="nx">history</span><span class="p">}</span> <span class="nx">host</span><span class="o">=</span><span class="p">{</span><span class="nx">productHost</span><span class="p">}</span> <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">Product</span><span class="dl">"</span> <span class="o">/&gt;</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">export</span> <span class="kd">function</span> <span class="nf">CategoryList</span><span class="p">({</span> <span class="nx">history</span> <span class="p">})</span> <span class="p">{</span>
  <span class="k">return</span> <span class="o">&lt;</span><span class="nx">MicroFrontend</span> <span class="nx">history</span><span class="o">=</span><span class="p">{</span><span class="nx">history</span><span class="p">}</span> <span class="nx">host</span><span class="o">=</span><span class="p">{</span><span class="nx">productHost</span><span class="p">}</span> <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">Product</span><span class="dl">"</span> <span class="o">/&gt;</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>LayoutMicroServices.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">MicroFrontend</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../MicroFrontend</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="p">{</span> <span class="na">REACT_APP_HEADER_HOST</span><span class="p">:</span> <span class="nx">headerHost</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">function</span> <span class="nf">Header</span><span class="p">({</span> <span class="nx">history</span> <span class="p">})</span> <span class="p">{</span>
  <span class="k">return</span> <span class="o">&lt;</span><span class="nx">MicroFrontend</span> <span class="nx">history</span><span class="o">=</span><span class="p">{</span><span class="nx">history</span><span class="p">}</span> <span class="nx">host</span><span class="o">=</span><span class="p">{</span><span class="nx">headerHost</span><span class="p">}</span> <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">Header</span><span class="dl">"</span> <span class="o">/&gt;</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>CustomerMicroServices.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">MicroFrontend</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../MicroFrontend</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="p">{</span> <span class="na">REACT_APP_CUSTOMER_HOST</span><span class="p">:</span> <span class="nx">customerHost</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">function</span> <span class="nf">CustomerList</span><span class="p">({</span> <span class="nx">history</span> <span class="p">})</span> <span class="p">{</span>
  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">MicroFrontend</span> <span class="nx">history</span><span class="o">=</span><span class="p">{</span><span class="nx">history</span><span class="p">}</span> <span class="nx">host</span><span class="o">=</span><span class="p">{</span><span class="nx">customerHost</span><span class="p">}</span> <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">Customer</span><span class="dl">"</span> <span class="o">/&gt;</span>
  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>Add following import inside index.js file.</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="dl">"</span><span class="s2">bootstrap/dist/css/bootstrap.min.css</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="dl">"</span><span class="s2">@trendmicro/react-sidenav/dist/react-sidenav.css</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>Add following css inside index.css file.</li>
</ul>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.sidenav---sidenav---</span><span class="err">\</span><span class="nt">_2tBP</span> <span class="p">{</span>
  <span class="nl">background-color</span><span class="p">:</span> <span class="m">#375a83</span> <span class="cp">!important</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>Update App.js file with following code.</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">BrowserRouter</span><span class="p">,</span> <span class="nx">Routes</span><span class="p">,</span> <span class="nx">Route</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-router-dom</span><span class="dl">"</span><span class="p">;</span>
<span class="c1">//import TopNav from "./common/TopNav";</span>
<span class="k">import</span> <span class="nx">SideNavbar</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./common/SideNavbar</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Home</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./components/Home</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span>
  <span class="nx">ProductList</span><span class="p">,</span>
  <span class="nx">CategoryList</span><span class="p">,</span>
<span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./micro-services/ProductMicroServices</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Header</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./micro-services/LayoutMicroServices</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">CustomerList</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./micro-services/CustomerMicroServices</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">function</span> <span class="nf">App</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;&gt;</span>
      <span class="o">&lt;</span><span class="nx">BrowserRouter</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">Header</span> <span class="o">/&gt;</span>
        <span class="o">&lt;</span><span class="nx">SideNavbar</span> <span class="o">/&gt;</span>
        <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">style</span><span class="o">=&gt;</span>
          <span class="o">&lt;</span><span class="nx">Routes</span><span class="o">&gt;</span>
            <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="dl">"</span><span class="s2">/</span><span class="dl">"</span> <span class="nx">element</span><span class="o">=</span><span class="p">{</span><span class="o">&lt;</span><span class="nx">Home</span> <span class="o">/&gt;</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="dl">"</span><span class="s2">/home</span><span class="dl">"</span> <span class="nx">element</span><span class="o">=</span><span class="p">{</span><span class="o">&lt;</span><span class="nx">Home</span> <span class="o">/&gt;</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="dl">"</span><span class="s2">/product-list</span><span class="dl">"</span> <span class="nx">element</span><span class="o">=</span><span class="p">{</span><span class="o">&lt;</span><span class="nx">ProductList</span> <span class="o">/&gt;</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="dl">"</span><span class="s2">/product-categories</span><span class="dl">"</span> <span class="nx">element</span><span class="o">=</span><span class="p">{</span><span class="o">&lt;</span><span class="nx">CategoryList</span> <span class="o">/&gt;</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="dl">"</span><span class="s2">/customers</span><span class="dl">"</span> <span class="nx">element</span><span class="o">=</span><span class="p">{</span><span class="o">&lt;</span><span class="nx">CustomerList</span> <span class="o">/&gt;</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>          <span class="o">&lt;</span><span class="sr">/Routes</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="sr">/BrowserRouter</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">App</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>Now run all other backend and frontend application.</li>
  <li>Now go inside of master-frontend application and run following command</li>
  <li>Now the output (dashboard) look like following.</li>
</ul>

<p><img src="/assets/images/posts/2023/mfe-06.png" alt="" /></p>

<ul>
  <li>Now click on Product menu you will get the following output</li>
</ul>

<p><img src="/assets/images/posts/2023/mfe-07.png" alt="" /></p>

<ul>
  <li>Now click on Customer menu you will get the following output</li>
</ul>

<p><img src="/assets/images/posts/2023/mfe-08.png" alt="" /></p>

<ul>
  <li>Now click on Categories menu you will get the following output</li>
</ul>

<p><img src="/assets/images/posts/2023/mfe-09.png" alt="" /></p>

<p>It means. Micro front end works. Our master application is running on 3000 port and other 3 application is running on 3001, 3002 and 3003. Wow, we accomplished the journey of micro front end.</p>

<p><strong><a href="https://github.com/mahedee/code-sample02/tree/master/micro-frontend">Source code</a></strong></p>]]></content><author><name>Mahedee Hasan</name></author><category term="React" /><category term="Microservices" /><category term="ASP.NET" /><category term="C#" /><category term="react" /><category term="csharp" /><category term="Microservice" /><category term="aspnet" /><category term="microfrontend" /><summary type="html"><![CDATA[Micro frontends are an architectural pattern and approach for building modern web applications. Similar to microservices on the backend, micro frontends focus on breaking down the user interface (UI) into smaller, self-contained, and independently deployable parts.]]></summary></entry><entry><title type="html">Simplified Sample Application: Building with Redux Toolkit, React.js, and ASP.NET Core</title><link href="https://mahedee.net//sample-application-redux-react-aspnet-core/" rel="alternate" type="text/html" title="Simplified Sample Application: Building with Redux Toolkit, React.js, and ASP.NET Core" /><published>2023-07-19T00:00:00-03:00</published><updated>2023-07-19T00:00:00-03:00</updated><id>https://mahedee.net//sample-application-redux-react-aspnet-core</id><content type="html" xml:base="https://mahedee.net//sample-application-redux-react-aspnet-core/"><![CDATA[<p><strong>Introduction</strong></p>

<p>Redux is a popular state management library for JavaScript applications. It is commonly used with front-end frameworks like React, Angular, and Vue, but can also be used with other frameworks or even vanilla JavaScript.
At its core, Redux provides a predictable state container for managing the state of an application. It helps you manage the data that needs to be shared across different components in a more organized and efficient way. The main concept behind Redux is that the entire state of an application is stored in a single JavaScript object, known as the “store.”
The Redux store is immutable, which means that you cannot directly modify the state. Instead, to make changes to the state, you dispatch actions. An action is a plain JavaScript object that describes what should change in the state. These actions are processed by pure functions called “reducers,” which take the current state and the dispatched action and return a new state.
The unidirectional data flow in Redux ensures that the state changes are predictable and easy to debug, as every state mutation is explicitly defined by actions and reducers.</p>

<p><strong>Redux Toolkit</strong></p>

<p>Redux Toolkit is an official package from the Redux team that simplifies and streamlines the process of working with Redux. It provides a set of utilities and best practices to make Redux development more efficient, maintainable, and less boilerplate-heavy.
Before Redux Toolkit, working with Redux required writing a significant amount of code to set up the store, define actions, and write reducers. Redux Toolkit abstracts away much of this boilerplate code and provides a more intuitive and standardized way of using Redux.</p>

<p>Key features of Redux Toolkit include:</p>

<ul>
  <li>Configuration Simplicity: Redux Toolkit provides a function called configureStore that creates a Redux store with default configurations. It includes sensible defaults for setting up the store, applying middleware, and enabling Redux DevTools for debugging.</li>
  <li>Reduces Boilerplate: With Redux Toolkit, you can define “slice” reducers using the createSlice function. A slice is a single part of the Redux store that includes both the reducer and its related actions. This reduces the need to write separate action creators and action types manually.</li>
  <li>Immutability and Immer Integration: Redux Toolkit leverages the immer library to handle state immutability in a more convenient way. This allows you to write reducers that look like they are directly mutating the state while Redux Toolkit takes care of creating a new immutable state behind the scenes.</li>
  <li>Thunk Simplification: Redux Toolkit provides the createAsyncThunk function to simplify the creation of thunks for handling asynchronous actions. It makes it easier to write async logic, such as API calls, by dispatching pending, fulfilled, and rejected actions automatically.</li>
  <li>Easy Migration: If you already have an existing Redux application, Redux Toolkit provides a smooth migration path. It offers compatibility with standard Redux code, allowing you to gradually transition your codebase to the new approach.</li>
</ul>

<p><strong>Objective:</strong><br />
In this article I will show you how to build a front-end application using redux toolkit with react and asp.net core. Here I am going to create a backend application and a front-end application. Backend application is simple asp.net core application which exposes API. Front end application consumes the api, perform CRUD operation and manage state using redux toolkit. Let’s start.</p>

<p><strong>Tools and Technology Used</strong></p>

<ol>
  <li>ASP.net core Web API</li>
  <li>Visual C#</li>
  <li>React.js</li>
  <li>Redux Toolkit</li>
  <li>Axios</li>
  <li>Bootstrap</li>
  <li>react-toastify</li>
</ol>

<p><strong>Step 1: Create a asp.net core web api project name Ecommerce.API</strong></p>

<p><strong>Step 2: Install the following nuget packages in the project.</strong></p>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">Microsoft.EntityFrameworkCore</span>
<span class="nf">Microsoft.EntityFrameworkCore.InMemory</span>
<span class="nf">Microsoft.EntityFrameworkCore.SqlServer</span>
<span class="nf">Microsoft.EntityFrameworkCore.Tools</span>
<span class="nf">Microsoft.VisualStudio.Web.CodeGeneration.Design</span>
</code></pre></div></div>

<p><strong>Step 3: Create two Model class name Product and Customer in Models folder.</strong></p>

<p><strong>Product.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">ECommerce.API.Models</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Product</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span><span class="p">?</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span><span class="p">?</span> <span class="n">Description</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">decimal</span> <span class="n">Price</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">StockQuantity</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Customer.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">namespace</span> <span class="nn">ECommerce.API.Models</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Customer</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span><span class="p">?</span> <span class="n">FirstName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span><span class="p">?</span> <span class="n">LastName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span><span class="p">?</span> <span class="n">Email</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span><span class="p">?</span> <span class="n">Phone</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="n">DateTime</span> <span class="n">BirthDate</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

    <span class="p">}</span>
<span class="p">}</span>


</code></pre></div></div>

<p><strong>Step 4: Create a Context class name ECommerceContext for data access in Db folder.</strong></p>

<p><strong>ECommerceContext.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">ECommerce.API.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">ECommerce.API.Db</span>
<span class="p">{</span>
<span class="k">public</span> <span class="k">class</span> <span class="nc">ECommerceContext</span> <span class="p">:</span> <span class="n">DbContext</span>
<span class="p">{</span>
<span class="k">public</span> <span class="nf">ECommerceContext</span><span class="p">(</span><span class="n">DbContextOptions</span><span class="p">&lt;</span><span class="n">ECommerceContext</span><span class="p">&gt;</span> <span class="n">options</span><span class="p">)</span>
<span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
<span class="p">{</span>

        <span class="p">}</span>
        <span class="k">public</span> <span class="n">DbSet</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="n">Products</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span><span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="n">DbSet</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="n">Customers</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>

<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 5: Create a Seed Generator class name SeedGenerator in Db folder.</strong></p>

<p><strong>SeedGenerator.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">ECommerce.API.Models</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">ECommerce.API.Db</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">SeedGenerator</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">SeedData</span><span class="p">(</span><span class="n">WebApplication</span> <span class="n">app</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">scope</span> <span class="p">=</span> <span class="n">app</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">CreateScope</span><span class="p">())</span>
            <span class="p">{</span>
                <span class="kt">var</span> <span class="n">context</span> <span class="p">=</span> <span class="n">scope</span><span class="p">.</span><span class="n">ServiceProvider</span><span class="p">.</span><span class="n">GetService</span><span class="p">&lt;</span><span class="n">ECommerceContext</span><span class="p">&gt;();</span>


                <span class="k">if</span> <span class="p">(!</span><span class="n">context</span><span class="p">.</span><span class="n">Products</span><span class="p">.</span><span class="nf">Any</span><span class="p">())</span>
                <span class="p">{</span>

                    <span class="n">context</span><span class="p">.</span><span class="n">Products</span><span class="p">.</span><span class="nf">AddRange</span><span class="p">(</span>
                        <span class="k">new</span> <span class="n">Product</span>
                        <span class="p">{</span>
                            <span class="n">Name</span> <span class="p">=</span> <span class="s">"Smartphone"</span><span class="p">,</span>
                            <span class="n">Description</span> <span class="p">=</span> <span class="s">"A powerful and sleek smartphone with advanced features."</span><span class="p">,</span>
                            <span class="n">Price</span> <span class="p">=</span> <span class="m">699.99m</span><span class="p">,</span>
                            <span class="n">StockQuantity</span> <span class="p">=</span> <span class="m">50</span>
                        <span class="p">},</span>
                        <span class="k">new</span> <span class="n">Product</span>
                        <span class="p">{</span>
                            <span class="n">Name</span> <span class="p">=</span> <span class="s">"Laptop"</span><span class="p">,</span>
                            <span class="n">Description</span> <span class="p">=</span> <span class="s">"A high-performance laptop for both work and entertainment."</span><span class="p">,</span>
                            <span class="n">Price</span> <span class="p">=</span> <span class="m">1299.99m</span><span class="p">,</span>
                            <span class="n">StockQuantity</span> <span class="p">=</span> <span class="m">25</span>
                        <span class="p">},</span>
                        <span class="k">new</span> <span class="n">Product</span>
                        <span class="p">{</span>
                            <span class="n">Name</span> <span class="p">=</span> <span class="s">"Wireless Earbuds"</span><span class="p">,</span>
                            <span class="n">Description</span> <span class="p">=</span> <span class="s">"Premium wireless earbuds with noise-canceling technology."</span><span class="p">,</span>
                            <span class="n">Price</span> <span class="p">=</span> <span class="m">149.99m</span><span class="p">,</span>
                            <span class="n">StockQuantity</span> <span class="p">=</span> <span class="m">100</span>
                        <span class="p">},</span>
                        <span class="k">new</span> <span class="n">Product</span>
                        <span class="p">{</span>
                            <span class="n">Name</span> <span class="p">=</span> <span class="s">"Smart Watch"</span><span class="p">,</span>
                            <span class="n">Description</span> <span class="p">=</span> <span class="s">"A stylish smartwatch with fitness tracking and app notifications."</span><span class="p">,</span>
                            <span class="n">Price</span> <span class="p">=</span> <span class="m">199.99m</span><span class="p">,</span>
                            <span class="n">StockQuantity</span> <span class="p">=</span> <span class="m">30</span>
                        <span class="p">});</span>
                <span class="p">}</span>


                <span class="k">if</span> <span class="p">(!</span><span class="n">context</span><span class="p">.</span><span class="n">Customers</span><span class="p">.</span><span class="nf">Any</span><span class="p">())</span>
                <span class="p">{</span>
                    <span class="n">context</span><span class="p">.</span><span class="n">Customers</span><span class="p">.</span><span class="nf">AddRange</span><span class="p">(</span>
                        <span class="k">new</span> <span class="n">Customer</span>
                        <span class="p">{</span>
                            <span class="n">Id</span> <span class="p">=</span> <span class="m">1</span><span class="p">,</span>
                            <span class="n">FirstName</span> <span class="p">=</span> <span class="s">"John"</span><span class="p">,</span>
                            <span class="n">LastName</span> <span class="p">=</span> <span class="s">"Doe"</span><span class="p">,</span>
                            <span class="n">Email</span> <span class="p">=</span> <span class="s">"john@example.com"</span><span class="p">,</span>
                            <span class="n">Phone</span> <span class="p">=</span> <span class="s">"555-1234"</span><span class="p">,</span>
                            <span class="n">BirthDate</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">DateTime</span><span class="p">(</span><span class="m">1990</span><span class="p">,</span> <span class="m">5</span><span class="p">,</span> <span class="m">15</span><span class="p">)</span>
                        <span class="p">},</span>
                        <span class="k">new</span> <span class="n">Customer</span>
                        <span class="p">{</span>
                            <span class="n">Id</span> <span class="p">=</span> <span class="m">2</span><span class="p">,</span>
                            <span class="n">FirstName</span> <span class="p">=</span> <span class="s">"Jane"</span><span class="p">,</span>
                            <span class="n">LastName</span> <span class="p">=</span> <span class="s">"Smith"</span><span class="p">,</span>
                            <span class="n">Email</span> <span class="p">=</span> <span class="s">"jane@example.com"</span><span class="p">,</span>
                            <span class="n">Phone</span> <span class="p">=</span> <span class="s">"555-5678"</span><span class="p">,</span>
                            <span class="n">BirthDate</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">DateTime</span><span class="p">(</span><span class="m">1985</span><span class="p">,</span> <span class="m">8</span><span class="p">,</span> <span class="m">22</span><span class="p">)</span>
                        <span class="p">},</span>
                        <span class="k">new</span> <span class="n">Customer</span>
                        <span class="p">{</span>
                            <span class="n">Id</span> <span class="p">=</span> <span class="m">3</span><span class="p">,</span>
                            <span class="n">FirstName</span> <span class="p">=</span> <span class="s">"Michael"</span><span class="p">,</span>
                            <span class="n">LastName</span> <span class="p">=</span> <span class="s">"Johnson"</span><span class="p">,</span>
                            <span class="n">Email</span> <span class="p">=</span> <span class="s">"michael@example.com"</span><span class="p">,</span>
                            <span class="n">Phone</span> <span class="p">=</span> <span class="s">"555-9876"</span><span class="p">,</span>
                            <span class="n">BirthDate</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">DateTime</span><span class="p">(</span><span class="m">1992</span><span class="p">,</span> <span class="m">10</span><span class="p">,</span> <span class="m">10</span><span class="p">)</span>
                        <span class="p">});</span>
                <span class="p">}</span>
                    <span class="n">context</span><span class="p">.</span><span class="nf">SaveChanges</span><span class="p">();</span>

            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>


</code></pre></div></div>

<p><strong>Step 6: Configure Program class as follows.</strong></p>

<p><strong>Program.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">ECommerce.API.Db</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="n">WebApplication</span><span class="p">.</span><span class="nf">CreateBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>

<span class="c1">// Add services to the container.</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddDbContext</span><span class="p">&lt;</span><span class="n">ECommerceContext</span><span class="p">&gt;(</span><span class="n">opt</span> <span class="p">=&gt;</span> <span class="n">opt</span><span class="p">.</span><span class="nf">UseInMemoryDatabase</span><span class="p">(</span><span class="s">"ECommerceDB"</span><span class="p">));</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">();</span>
<span class="c1">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddEndpointsApiExplorer</span><span class="p">();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddSwaggerGen</span><span class="p">();</span>

<span class="kt">var</span> <span class="n">app</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

<span class="c1">//For seeding data</span>
<span class="n">SeedGenerator</span><span class="p">.</span><span class="nf">SeedData</span><span class="p">(</span><span class="n">app</span><span class="p">);</span>

<span class="c1">// Configure the HTTP request pipeline.</span>
<span class="k">if</span> <span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">Environment</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
<span class="p">{</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwagger</span><span class="p">();</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwaggerUI</span><span class="p">();</span>

    <span class="c1">// Enable CORS</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseCors</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span>
    <span class="p">.</span><span class="nf">AllowAnyMethod</span><span class="p">()</span>
    <span class="p">.</span><span class="nf">AllowAnyHeader</span><span class="p">()</span>
    <span class="p">.</span><span class="nf">SetIsOriginAllowed</span><span class="p">(</span><span class="n">origin</span> <span class="p">=&gt;</span> <span class="k">true</span><span class="p">)</span> <span class="c1">// allow any origin</span>
    <span class="p">.</span><span class="nf">AllowCredentials</span><span class="p">());</span> <span class="c1">// allow credentials</span>
<span class="p">}</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseHttpsRedirection</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseAuthorization</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">MapControllers</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>

</code></pre></div></div>

<p><strong>Step 7: Create two Controller class name ProductsController and CustomersController in Controllers folder.</strong></p>

<p><strong>ProductsController.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">ECommerce.API.Db</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">ECommerce.API.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">ECommerce.API.Controllers</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
    <span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">ProductsController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">ECommerceContext</span> <span class="n">_context</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">ProductsController</span><span class="p">(</span><span class="n">ECommerceContext</span> <span class="n">context</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_context</span> <span class="p">=</span> <span class="n">context</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/Products</span>
        <span class="p">[</span><span class="n">HttpGet</span><span class="p">]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;&gt;&gt;</span> <span class="nf">GetProducts</span><span class="p">()</span>
        <span class="p">{</span>
          <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Products</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
          <span class="p">{</span>
              <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
          <span class="p">}</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Products</span><span class="p">.</span><span class="nf">ToListAsync</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/Products/5</span>
        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;&gt;</span> <span class="nf">GetProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
          <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Products</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
          <span class="p">{</span>
              <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
          <span class="p">}</span>
            <span class="kt">var</span> <span class="n">product</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Products</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">product</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="n">product</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// PUT: api/Products/5</span>
        <span class="c1">// To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754</span>
        <span class="p">[</span><span class="nf">HttpPut</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">PutProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="n">Product</span> <span class="n">product</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">id</span> <span class="p">!=</span> <span class="n">product</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">_context</span><span class="p">.</span><span class="nf">Entry</span><span class="p">(</span><span class="n">product</span><span class="p">).</span><span class="n">State</span> <span class="p">=</span> <span class="n">EntityState</span><span class="p">.</span><span class="n">Modified</span><span class="p">;</span>

            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">DbUpdateConcurrencyException</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(!</span><span class="nf">ProductExists</span><span class="p">(</span><span class="n">id</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
                <span class="p">}</span>
                <span class="k">else</span>
                <span class="p">{</span>
                    <span class="k">throw</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// POST: api/Products</span>
        <span class="c1">// To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754</span>
        <span class="p">[</span><span class="n">HttpPost</span><span class="p">]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;&gt;</span> <span class="nf">PostProduct</span><span class="p">(</span><span class="n">Product</span> <span class="n">product</span><span class="p">)</span>
        <span class="p">{</span>
          <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Products</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
          <span class="p">{</span>
              <span class="k">return</span> <span class="nf">Problem</span><span class="p">(</span><span class="s">"Entity set 'ECommerceContext.Products'  is null."</span><span class="p">);</span>
          <span class="p">}</span>
            <span class="n">_context</span><span class="p">.</span><span class="n">Products</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">product</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>

            <span class="k">return</span> <span class="nf">CreatedAtAction</span><span class="p">(</span><span class="s">"GetProduct"</span><span class="p">,</span> <span class="k">new</span> <span class="p">{</span> <span class="n">id</span> <span class="p">=</span> <span class="n">product</span><span class="p">.</span><span class="n">Id</span> <span class="p">},</span> <span class="n">product</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">// DELETE: api/Products/5</span>
        <span class="p">[</span><span class="nf">HttpDelete</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">DeleteProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Products</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="kt">var</span> <span class="n">product</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Products</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">product</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">_context</span><span class="p">.</span><span class="n">Products</span><span class="p">.</span><span class="nf">Remove</span><span class="p">(</span><span class="n">product</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>

            <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="kt">bool</span> <span class="nf">ProductExists</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Products</span><span class="p">?.</span><span class="nf">Any</span><span class="p">(</span><span class="n">e</span> <span class="p">=&gt;</span> <span class="n">e</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">id</span><span class="p">)).</span><span class="nf">GetValueOrDefault</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>CustomersController.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">ECommerce.API.Db</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">ECommerce.API.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">ECommerce.API.Controllers</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
    <span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CustomersController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">ECommerceContext</span> <span class="n">_context</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">CustomersController</span><span class="p">(</span><span class="n">ECommerceContext</span> <span class="n">context</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_context</span> <span class="p">=</span> <span class="n">context</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/Customers</span>
        <span class="p">[</span><span class="n">HttpGet</span><span class="p">]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;&gt;&gt;</span> <span class="nf">GetCustomers</span><span class="p">()</span>
        <span class="p">{</span>
          <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Customers</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
          <span class="p">{</span>
              <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
          <span class="p">}</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Customers</span><span class="p">.</span><span class="nf">ToListAsync</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/Customers/5</span>
        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;&gt;</span> <span class="nf">GetCustomer</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
          <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Customers</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
          <span class="p">{</span>
              <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
          <span class="p">}</span>
            <span class="kt">var</span> <span class="n">customer</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Customers</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">customer</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="n">customer</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// PUT: api/Customers/5</span>
        <span class="c1">// To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754</span>
        <span class="p">[</span><span class="nf">HttpPut</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">PutCustomer</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="n">Customer</span> <span class="n">customer</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">id</span> <span class="p">!=</span> <span class="n">customer</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">_context</span><span class="p">.</span><span class="nf">Entry</span><span class="p">(</span><span class="n">customer</span><span class="p">).</span><span class="n">State</span> <span class="p">=</span> <span class="n">EntityState</span><span class="p">.</span><span class="n">Modified</span><span class="p">;</span>

            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">DbUpdateConcurrencyException</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(!</span><span class="nf">CustomerExists</span><span class="p">(</span><span class="n">id</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
                <span class="p">}</span>
                <span class="k">else</span>
                <span class="p">{</span>
                    <span class="k">throw</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// POST: api/Customers</span>
        <span class="c1">// To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754</span>
        <span class="p">[</span><span class="n">HttpPost</span><span class="p">]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;&gt;</span> <span class="nf">PostCustomer</span><span class="p">(</span><span class="n">Customer</span> <span class="n">customer</span><span class="p">)</span>
        <span class="p">{</span>
          <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Customers</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
          <span class="p">{</span>
              <span class="k">return</span> <span class="nf">Problem</span><span class="p">(</span><span class="s">"Entity set 'ECommerceContext.Customers'  is null."</span><span class="p">);</span>
          <span class="p">}</span>
            <span class="n">_context</span><span class="p">.</span><span class="n">Customers</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">customer</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>

            <span class="k">return</span> <span class="nf">CreatedAtAction</span><span class="p">(</span><span class="s">"GetCustomer"</span><span class="p">,</span> <span class="k">new</span> <span class="p">{</span> <span class="n">id</span> <span class="p">=</span> <span class="n">customer</span><span class="p">.</span><span class="n">Id</span> <span class="p">},</span> <span class="n">customer</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">// DELETE: api/Customers/5</span>
        <span class="p">[</span><span class="nf">HttpDelete</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">DeleteCustomer</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Customers</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="kt">var</span> <span class="n">customer</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Customers</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">customer</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">_context</span><span class="p">.</span><span class="n">Customers</span><span class="p">.</span><span class="nf">Remove</span><span class="p">(</span><span class="n">customer</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>

            <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"SearchCustomers"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;&gt;&gt;</span> <span class="nf">SearchCustomers</span><span class="p">(</span><span class="kt">string</span> <span class="n">name</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Customers</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="n">List</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="n">customers</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">name</span> <span class="p">!=</span> <span class="s">"all"</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">customers</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Customers</span><span class="p">.</span><span class="nf">Where</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">FirstName</span><span class="p">.</span><span class="nf">Contains</span><span class="p">(</span><span class="n">name</span><span class="p">)</span> <span class="p">||</span> <span class="n">p</span><span class="p">.</span><span class="n">LastName</span><span class="p">.</span><span class="nf">Contains</span><span class="p">(</span><span class="n">name</span><span class="p">)).</span><span class="nf">ToListAsync</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">else</span>
            <span class="p">{</span>
                <span class="n">customers</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Customers</span><span class="p">.</span><span class="nf">ToListAsync</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="n">customers</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="kt">bool</span> <span class="nf">CustomerExists</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Customers</span><span class="p">?.</span><span class="nf">Any</span><span class="p">(</span><span class="n">e</span> <span class="p">=&gt;</span> <span class="n">e</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">id</span><span class="p">)).</span><span class="nf">GetValueOrDefault</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p>Now our back-end application is ready. You can run and check the application using swagger.</p>

<p><strong>Step 8: Create a react application name - redux-app. Run the following command in your power shell terminal.</strong></p>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">npx</span> <span class="nf">create-react-app</span> <span class="nf">redux-app</span>
</code></pre></div></div>

<p><strong>Step 9: Install the following packages in the react project</strong></p>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">npm</span> <span class="nf">install</span> <span class="nf">bootstrap@4.6.0</span>
<span class="nf">npm</span> <span class="nf">install</span> <span class="nf">react-router-dom</span>
<span class="nf">npm</span> <span class="nf">install</span> <span class="nf">react-toastify</span>
<span class="nf">npm</span> <span class="nf">install</span> <span class="nf">react-redux</span> <span class="nf">@reduxjs</span><span class="nv">/toolkit</span>
<span class="nf">npm</span> <span class="nf">install</span> <span class="nf">axios</span>
</code></pre></div></div>

<p><strong>Step 10: Create Conversion.js file in src-&gt;utils folder.</strong></p>

<p><strong>Conversion.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">const</span> <span class="nx">convertDateFormat</span> <span class="o">=</span> <span class="p">(</span><span class="nx">date</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">convertedDate</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Date</span><span class="p">(</span><span class="nx">date</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">convertedDate</span><span class="p">.</span><span class="nf">toDateString</span><span class="p">();</span>
<span class="p">};</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">ConvertDateISOString</span> <span class="o">=</span> <span class="p">(</span><span class="nx">date</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="k">new</span> <span class="nc">Date</span><span class="p">(</span><span class="nx">date</span><span class="p">).</span><span class="nf">toISOString</span><span class="p">().</span><span class="nf">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
<span class="p">};</span>
</code></pre></div></div>

<p><strong>Step 11: Create ToastifyMessage.js file in src-&gt;helper folder.</strong></p>

<p><strong>ToastifyMessage.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">toast</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-toastify</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">SuccessToastify</span> <span class="o">=</span> <span class="p">(</span><span class="nx">message</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">toast</span><span class="p">.</span><span class="nf">success</span><span class="p">(</span><span class="nx">message</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">position</span><span class="p">:</span> <span class="nx">toast</span><span class="p">.</span><span class="nx">POSITION</span><span class="p">.</span><span class="nx">TOP_CENTER</span><span class="p">,</span>
    <span class="na">autoClose</span><span class="p">:</span> <span class="mi">3000</span><span class="p">,</span> <span class="c1">// auto close after 30 seconds</span>
  <span class="p">});</span>
<span class="p">};</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">WarningTostify</span> <span class="o">=</span> <span class="p">(</span><span class="nx">message</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">toast</span><span class="p">.</span><span class="nf">warning</span><span class="p">(</span><span class="nx">message</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">position</span><span class="p">:</span> <span class="nx">toast</span><span class="p">.</span><span class="nx">POSITION</span><span class="p">.</span><span class="nx">TOP_RIGHT</span><span class="p">,</span>
    <span class="na">autoClose</span><span class="p">:</span> <span class="mi">3000</span><span class="p">,</span> <span class="c1">// auto close after 30 seconds</span>
  <span class="p">});</span>
<span class="p">};</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">ErrorToastify</span> <span class="o">=</span> <span class="p">(</span><span class="nx">message</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">toast</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="nx">message</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">position</span><span class="p">:</span> <span class="nx">toast</span><span class="p">.</span><span class="nx">POSITION</span><span class="p">.</span><span class="nx">TOP_RIGHT</span><span class="p">,</span>
    <span class="na">autoClose</span><span class="p">:</span> <span class="mi">3000</span><span class="p">,</span> <span class="c1">// auto close after 30 seconds</span>
  <span class="p">});</span>
<span class="p">};</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">InfoToastify</span> <span class="o">=</span> <span class="p">(</span><span class="nx">message</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">toast</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="nx">message</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">position</span><span class="p">:</span> <span class="nx">toast</span><span class="p">.</span><span class="nx">POSITION</span><span class="p">.</span><span class="nx">TOP_RIGHT</span><span class="p">,</span>
    <span class="na">autoClose</span><span class="p">:</span> <span class="mi">3000</span><span class="p">,</span> <span class="c1">// auto close after 30 seconds</span>
  <span class="p">});</span>
<span class="p">};</span>
</code></pre></div></div>

<p><strong>Step 12: Configure Http connection using axios</strong></p>

<ul>
  <li>Create BaseURL.js in src-&gt;config folder to set the base URL for API</li>
</ul>

<p><strong>BaseURL.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">const</span> <span class="nx">Base_URL</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">https://localhost:7288/api</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>Create http-common.js in src-&gt;config folder<br />
<strong>http-common.js</strong></li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">axios</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">axios</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Base_URL</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./BaseURL</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">axios</span><span class="p">.</span><span class="nf">create</span><span class="p">({</span>
  <span class="na">baseURL</span><span class="p">:</span> <span class="nx">Base_URL</span><span class="p">,</span>
  <span class="na">headers</span><span class="p">:</span> <span class="p">{</span>
    <span class="dl">"</span><span class="s2">Content-type</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">application/json</span><span class="dl">"</span><span class="p">,</span>
  <span class="p">},</span>
<span class="p">});</span>
</code></pre></div></div>

<p><strong>Step 13: Create Service Components</strong></p>

<ul>
  <li>Create ProductService.js in src-&gt;services folder.</li>
</ul>

<p><strong>ProductService.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//ProductDataService to make asynchronous HTTP requests</span>
<span class="k">import</span> <span class="nx">http</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../config/http-common</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">getAll</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">http</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">/Products</span><span class="dl">"</span><span class="p">);</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="kd">get</span> <span class="o">=</span> <span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">http</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="s2">`/Products/</span><span class="p">${</span><span class="nx">id</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">create</span> <span class="o">=</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">http</span><span class="p">.</span><span class="nf">post</span><span class="p">(</span><span class="dl">"</span><span class="s2">/Products</span><span class="dl">"</span><span class="p">,</span> <span class="nx">data</span><span class="p">);</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">update</span> <span class="o">=</span> <span class="p">(</span><span class="nx">id</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">http</span><span class="p">.</span><span class="nf">put</span><span class="p">(</span><span class="s2">`/Products/</span><span class="p">${</span><span class="nx">id</span><span class="p">}</span><span class="s2">`</span><span class="p">,</span> <span class="nx">data</span><span class="p">);</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">remove</span> <span class="o">=</span> <span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">http</span><span class="p">.</span><span class="k">delete</span><span class="p">(</span><span class="s2">`/Products/</span><span class="p">${</span><span class="nx">id</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
<span class="p">};</span>
<span class="kd">const</span> <span class="nx">ProductDataService</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">getAll</span><span class="p">,</span>
  <span class="kd">get</span><span class="p">,</span>
  <span class="nx">create</span><span class="p">,</span>
  <span class="nx">update</span><span class="p">,</span>
  <span class="nx">remove</span><span class="p">,</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">ProductDataService</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>Create CustomerService.js in src-&gt;services folder.</li>
</ul>

<p><strong>CustomerService.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//CustomerDataService to make asynchronous HTTP requests</span>
<span class="k">import</span> <span class="nx">http</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../config/http-common</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">getAll</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">http</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">/Customers</span><span class="dl">"</span><span class="p">);</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="kd">get</span> <span class="o">=</span> <span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">http</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="s2">`/Customers/</span><span class="p">${</span><span class="nx">id</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">create</span> <span class="o">=</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">http</span><span class="p">.</span><span class="nf">post</span><span class="p">(</span><span class="dl">"</span><span class="s2">/Customers</span><span class="dl">"</span><span class="p">,</span> <span class="nx">data</span><span class="p">);</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">update</span> <span class="o">=</span> <span class="p">(</span><span class="nx">id</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">http</span><span class="p">.</span><span class="nf">put</span><span class="p">(</span><span class="s2">`/Customers/</span><span class="p">${</span><span class="nx">id</span><span class="p">}</span><span class="s2">`</span><span class="p">,</span> <span class="nx">data</span><span class="p">);</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">remove</span> <span class="o">=</span> <span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">http</span><span class="p">.</span><span class="k">delete</span><span class="p">(</span><span class="s2">`/Customers/</span><span class="p">${</span><span class="nx">id</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">findByName</span> <span class="o">=</span> <span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">http</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="s2">`/Customers/SearchCustomers?name=</span><span class="p">${</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">CustomerDataService</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">getAll</span><span class="p">,</span>
  <span class="kd">get</span><span class="p">,</span>
  <span class="nx">create</span><span class="p">,</span>
  <span class="nx">update</span><span class="p">,</span>
  <span class="nx">remove</span><span class="p">,</span>
  <span class="nx">findByName</span><span class="p">,</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">CustomerDataService</span><span class="p">;</span>
</code></pre></div></div>

<p>Step 14: Configure Redux</p>

<ul>
  <li>Create Slice, Reducer and Actions : Instead of creating many folders and files for Redux (actions, reducers, types,…), with redux-toolkit we just need all-in-one: slice.
A slice is a collection of Redux reducer logic and actions for a single feature.</li>
</ul>

<p>To create a slice, you only need to define the following:</p>

<ol>
  <li>A name to identify the slice.</li>
  <li>The initial state value.</li>
  <li>One or more reducer functions to specify how the state can be updated.</li>
</ol>

<p>Once you’ve created a slice, you can effortlessly export the generated Redux action creators and the reducer function for the entire slice.
Redux Toolkit simplifies this process with the createSlice() function, which automatically generates action types and action creators based on the reducer function names you provide.</p>

<ul>
  <li>Create slice for Product state. Create productsSlice.js in src-&gt;redux-&gt;slice folder.</li>
</ul>

<p><strong>productsSlice.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">createAsyncThunk</span><span class="p">,</span> <span class="nx">createSlice</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@reduxjs/toolkit</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">ProductDataService</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../../services/ProductService</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">initialState</span> <span class="o">=</span> <span class="p">[];</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">createProduct</span> <span class="o">=</span> <span class="nf">createAsyncThunk</span><span class="p">(</span>
  <span class="dl">"</span><span class="s2">products/create</span><span class="dl">"</span><span class="p">,</span>
  <span class="k">async </span><span class="p">(</span><span class="nx">inputData</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">res</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">ProductDataService</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="nx">inputData</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">);</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">retrieveProducts</span> <span class="o">=</span> <span class="nf">createAsyncThunk</span><span class="p">(</span>
  <span class="dl">"</span><span class="s2">products/retrieve</span><span class="dl">"</span><span class="p">,</span>
  <span class="k">async </span><span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">res</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">ProductDataService</span><span class="p">.</span><span class="nf">getAll</span><span class="p">();</span>
    <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">);</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">updateProduct</span> <span class="o">=</span> <span class="nf">createAsyncThunk</span><span class="p">(</span>
  <span class="dl">"</span><span class="s2">products/update</span><span class="dl">"</span><span class="p">,</span>
  <span class="k">async </span><span class="p">({</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">data</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">debugger</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">res</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">ProductDataService</span><span class="p">.</span><span class="nf">update</span><span class="p">(</span><span class="nx">id</span><span class="p">,</span> <span class="nx">data</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">);</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">deleteProduct</span> <span class="o">=</span> <span class="nf">createAsyncThunk</span><span class="p">(</span><span class="dl">"</span><span class="s2">products/delete</span><span class="dl">"</span><span class="p">,</span> <span class="k">async </span><span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">debugger</span><span class="p">;</span>
  <span class="k">await</span> <span class="nx">ProductDataService</span><span class="p">.</span><span class="nf">remove</span><span class="p">(</span><span class="nx">id</span><span class="p">);</span>
  <span class="k">return</span> <span class="p">{</span> <span class="nx">id</span> <span class="p">};</span>
<span class="p">});</span>

<span class="kd">const</span> <span class="nx">productSlice</span> <span class="o">=</span> <span class="nf">createSlice</span><span class="p">({</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">product</span><span class="dl">"</span><span class="p">,</span>
  <span class="nx">initialState</span><span class="p">,</span>
  <span class="na">extraReducers</span><span class="p">:</span> <span class="p">{</span>
    <span class="p">[</span><span class="nx">createProduct</span><span class="p">.</span><span class="nx">fulfilled</span><span class="p">]:</span> <span class="p">(</span><span class="nx">state</span><span class="p">,</span> <span class="nx">action</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">state</span><span class="p">.</span><span class="nf">push</span><span class="p">(</span><span class="nx">action</span><span class="p">.</span><span class="nx">payload</span><span class="p">);</span>
    <span class="p">},</span>

    <span class="p">[</span><span class="nx">retrieveProducts</span><span class="p">.</span><span class="nx">fulfilled</span><span class="p">]:</span> <span class="p">(</span><span class="nx">state</span><span class="p">,</span> <span class="nx">action</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">return</span> <span class="p">[...</span><span class="nx">action</span><span class="p">.</span><span class="nx">payload</span><span class="p">];</span>
    <span class="p">},</span>

    <span class="p">[</span><span class="nx">updateProduct</span><span class="p">.</span><span class="nx">fulfilled</span><span class="p">]:</span> <span class="p">(</span><span class="nx">state</span><span class="p">,</span> <span class="nx">action</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">index</span> <span class="o">=</span> <span class="nx">state</span><span class="p">.</span><span class="nf">findIndex</span><span class="p">(</span>
        <span class="p">(</span><span class="nx">tutorial</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">tutorial</span><span class="p">.</span><span class="nx">id</span> <span class="o">===</span> <span class="nx">action</span><span class="p">.</span><span class="nx">payload</span><span class="p">.</span><span class="nx">id</span>
      <span class="p">);</span>
      <span class="nx">state</span><span class="p">[</span><span class="nx">index</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
        <span class="p">...</span><span class="nx">state</span><span class="p">[</span><span class="nx">index</span><span class="p">],</span>
        <span class="p">...</span><span class="nx">action</span><span class="p">.</span><span class="nx">payload</span><span class="p">,</span>
      <span class="p">};</span>
    <span class="p">},</span>

    <span class="p">[</span><span class="nx">deleteProduct</span><span class="p">.</span><span class="nx">fulfilled</span><span class="p">]:</span> <span class="p">(</span><span class="nx">state</span><span class="p">,</span> <span class="nx">action</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="kd">let</span> <span class="nx">index</span> <span class="o">=</span> <span class="nx">state</span><span class="p">.</span><span class="nf">findIndex</span><span class="p">(({</span> <span class="nx">id</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="nx">id</span> <span class="o">===</span> <span class="nx">action</span><span class="p">.</span><span class="nx">payload</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span>
      <span class="nx">state</span><span class="p">.</span><span class="nf">splice</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
    <span class="p">},</span>
  <span class="p">},</span>
<span class="p">});</span>

<span class="kd">const</span> <span class="p">{</span> <span class="nx">reducer</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">productSlice</span><span class="p">;</span>
<span class="k">export</span> <span class="k">default</span> <span class="nx">reducer</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>Create slice for Customer state. Create customersSlice.js in src-&gt;redux-&gt;slice folder.</li>
</ul>

<p><strong>customersSlice.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">createAsyncThunk</span><span class="p">,</span> <span class="nx">createSlice</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@reduxjs/toolkit</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">CustomerDataService</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../../services/CustomerService</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">initialState</span> <span class="o">=</span> <span class="p">[];</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">createCustomer</span> <span class="o">=</span> <span class="nf">createAsyncThunk</span><span class="p">(</span>
  <span class="dl">"</span><span class="s2">customers/create</span><span class="dl">"</span><span class="p">,</span>
  <span class="k">async </span><span class="p">(</span><span class="nx">inputData</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">CustomerDataService</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="nx">inputData</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">response</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">);</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">retrieveCustomers</span> <span class="o">=</span> <span class="nf">createAsyncThunk</span><span class="p">(</span>
  <span class="dl">"</span><span class="s2">customers/retrieve</span><span class="dl">"</span><span class="p">,</span>
  <span class="k">async </span><span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">debugger</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">res</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">CustomerDataService</span><span class="p">.</span><span class="nf">getAll</span><span class="p">();</span>
    <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">);</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">updateCustomer</span> <span class="o">=</span> <span class="nf">createAsyncThunk</span><span class="p">(</span>
  <span class="dl">"</span><span class="s2">customers/update</span><span class="dl">"</span><span class="p">,</span>
  <span class="k">async </span><span class="p">({</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">data</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">res</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">CustomerDataService</span><span class="p">.</span><span class="nf">update</span><span class="p">(</span><span class="nx">id</span><span class="p">,</span> <span class="nx">data</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">);</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">deleteCustomer</span> <span class="o">=</span> <span class="nf">createAsyncThunk</span><span class="p">(</span>
  <span class="dl">"</span><span class="s2">customers/delete</span><span class="dl">"</span><span class="p">,</span>
  <span class="k">async </span><span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">await</span> <span class="nx">CustomerDataService</span><span class="p">.</span><span class="nf">remove</span><span class="p">(</span><span class="nx">id</span><span class="p">);</span>
    <span class="k">return</span> <span class="p">{</span> <span class="nx">id</span> <span class="p">};</span>
  <span class="p">}</span>
<span class="p">);</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">deleteAllCustomer</span> <span class="o">=</span> <span class="nf">createAsyncThunk</span><span class="p">(</span>
  <span class="dl">"</span><span class="s2">customers/deleteAll</span><span class="dl">"</span><span class="p">,</span>
  <span class="k">async </span><span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">res</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">CustomerDataService</span><span class="p">.</span><span class="nf">removeAll</span><span class="p">();</span>
    <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">);</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">findCustomerByName</span> <span class="o">=</span> <span class="nf">createAsyncThunk</span><span class="p">(</span>
  <span class="dl">"</span><span class="s2">customers/findByName</span><span class="dl">"</span><span class="p">,</span>
  <span class="k">async </span><span class="p">({</span> <span class="nx">name</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span> <span class="o">===</span> <span class="kc">null</span> <span class="o">||</span> <span class="nx">name</span> <span class="o">===</span> <span class="dl">""</span> <span class="p">?</span> <span class="dl">"</span><span class="s2">all</span><span class="dl">"</span> <span class="p">:</span> <span class="nx">name</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">res</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">CustomerDataService</span><span class="p">.</span><span class="nf">findByName</span><span class="p">(</span><span class="nx">name</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">);</span>

<span class="kd">const</span> <span class="nx">customerSlice</span> <span class="o">=</span> <span class="nf">createSlice</span><span class="p">({</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">customer</span><span class="dl">"</span><span class="p">,</span>
  <span class="nx">initialState</span><span class="p">,</span>
  <span class="na">extraReducers</span><span class="p">:</span> <span class="p">{</span>
    <span class="p">[</span><span class="nx">createCustomer</span><span class="p">.</span><span class="nx">fulfilled</span><span class="p">]:</span> <span class="p">(</span><span class="nx">state</span><span class="p">,</span> <span class="nx">action</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">state</span><span class="p">.</span><span class="nf">push</span><span class="p">(</span><span class="nx">action</span><span class="p">.</span><span class="nx">payload</span><span class="p">);</span>
    <span class="p">},</span>

    <span class="p">[</span><span class="nx">retrieveCustomers</span><span class="p">.</span><span class="nx">fulfilled</span><span class="p">]:</span> <span class="p">(</span><span class="nx">state</span><span class="p">,</span> <span class="nx">action</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">return</span> <span class="p">[...</span><span class="nx">action</span><span class="p">.</span><span class="nx">payload</span><span class="p">];</span>
    <span class="p">},</span>

    <span class="p">[</span><span class="nx">updateCustomer</span><span class="p">.</span><span class="nx">fulfilled</span><span class="p">]:</span> <span class="p">(</span><span class="nx">state</span><span class="p">,</span> <span class="nx">action</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">index</span> <span class="o">=</span> <span class="nx">state</span><span class="p">.</span><span class="nf">findIndex</span><span class="p">(</span>
        <span class="p">(</span><span class="nx">tutorial</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">tutorial</span><span class="p">.</span><span class="nx">id</span> <span class="o">===</span> <span class="nx">action</span><span class="p">.</span><span class="nx">payload</span><span class="p">.</span><span class="nx">id</span>
      <span class="p">);</span>
      <span class="nx">state</span><span class="p">[</span><span class="nx">index</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
        <span class="p">...</span><span class="nx">state</span><span class="p">[</span><span class="nx">index</span><span class="p">],</span>
        <span class="p">...</span><span class="nx">action</span><span class="p">.</span><span class="nx">payload</span><span class="p">,</span>
      <span class="p">};</span>
    <span class="p">},</span>

    <span class="p">[</span><span class="nx">deleteCustomer</span><span class="p">.</span><span class="nx">fulfilled</span><span class="p">]:</span> <span class="p">(</span><span class="nx">state</span><span class="p">,</span> <span class="nx">action</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="kd">let</span> <span class="nx">index</span> <span class="o">=</span> <span class="nx">state</span><span class="p">.</span><span class="nf">findIndex</span><span class="p">(({</span> <span class="nx">id</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="nx">id</span> <span class="o">===</span> <span class="nx">action</span><span class="p">.</span><span class="nx">payload</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span>
      <span class="nx">state</span><span class="p">.</span><span class="nf">splice</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
    <span class="p">},</span>
    <span class="p">[</span><span class="nx">deleteAllCustomer</span><span class="p">.</span><span class="nx">fulfilled</span><span class="p">]:</span> <span class="p">(</span><span class="nx">state</span><span class="p">,</span> <span class="nx">action</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">return</span> <span class="p">[];</span>
    <span class="p">},</span>
    <span class="p">[</span><span class="nx">findCustomerByName</span><span class="p">.</span><span class="nx">fulfilled</span><span class="p">]:</span> <span class="p">(</span><span class="nx">state</span><span class="p">,</span> <span class="nx">action</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">return</span> <span class="p">[...</span><span class="nx">action</span><span class="p">.</span><span class="nx">payload</span><span class="p">];</span>
    <span class="p">},</span>
  <span class="p">},</span>
<span class="p">});</span>

<span class="c1">// destructure reducer from customerSlice</span>
<span class="c1">// name mustbe reducer</span>
<span class="kd">const</span> <span class="p">{</span> <span class="nx">reducer</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">customerSlice</span><span class="p">;</span>
<span class="k">export</span> <span class="k">default</span> <span class="nx">reducer</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>Create Redux Store in src-&gt;redux folder name store.js</li>
</ul>

<p><strong>Store.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// This Store will bring Actions and Reducers together and hold the Application state.</span>

<span class="k">import</span> <span class="p">{</span> <span class="nx">configureStore</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@reduxjs/toolkit</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">productReducer</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./slices/productsSlice</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">customerReducer</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./slices/customersSlice</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">reducer</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">products</span><span class="p">:</span> <span class="nx">productReducer</span><span class="p">,</span>
  <span class="na">customers</span><span class="p">:</span> <span class="nx">customerReducer</span><span class="p">,</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">store</span> <span class="o">=</span> <span class="nf">configureStore</span><span class="p">({</span>
  <span class="na">reducer</span><span class="p">:</span> <span class="nx">reducer</span><span class="p">,</span>
  <span class="na">devTools</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
<span class="p">});</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">store</span><span class="p">;</span>
</code></pre></div></div>

<p><strong>Note:</strong><br />
The Store is the central entity that combines Actions and Reducers, responsible for managing the entire application state.</p>

<p>With the help of the <code class="language-plaintext highlighter-rouge">configureStore()</code> function from Redux Toolkit, you can enjoy the following automated benefits:</p>

<ol>
  <li>It enables the Redux DevTools Extension out of the box, providing powerful debugging capabilities.</li>
  <li>The thunk middleware is automatically set up, allowing you to start writing thunks without any additional configuration.</li>
</ol>

<p><strong>Step 15: Make state available to React components.</strong></p>

<ul>
  <li>Modify the index.js as follows. Here, we are wrapping the entire application in a <Provider> component to make store available to its child components.</Provider></li>
</ul>

<p><strong>Index.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="dl">"</span><span class="s2">react-toastify/dist/ReactToastify.css</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">ReactDOM</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-dom/client</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="dl">"</span><span class="s2">./index.css</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">App</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./App</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">reportWebVitals</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./reportWebVitals</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Provider</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-redux</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">store</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./redux/store</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">root</span> <span class="o">=</span> <span class="nx">ReactDOM</span><span class="p">.</span><span class="nf">createRoot</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">root</span><span class="dl">"</span><span class="p">));</span>
<span class="nx">root</span><span class="p">.</span><span class="nf">render</span><span class="p">(</span>
  <span class="o">&lt;</span><span class="nx">React</span><span class="p">.</span><span class="nx">StrictMode</span><span class="o">&gt;</span>
    <span class="p">{</span><span class="cm">/* Now we want our entire React App to access the store */</span><span class="p">}</span>
    <span class="o">&lt;</span><span class="nx">Provider</span> <span class="nx">store</span><span class="o">=</span><span class="p">{</span><span class="nx">store</span><span class="p">}</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">App</span> <span class="o">/&gt;</span>
    <span class="o">&lt;</span><span class="sr">/Provider</span><span class="err">&gt;
</span>  <span class="o">&lt;</span><span class="sr">/React.StrictMode</span><span class="err">&gt;
</span><span class="p">);</span>

<span class="c1">// If you want to start measuring performance in your app, pass a function</span>
<span class="c1">// to log results (for example: reportWebVitals(console.log))</span>
<span class="c1">// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals</span>
<span class="nf">reportWebVitals</span><span class="p">();</span>
</code></pre></div></div>

<p><strong>Step 16: Create a Component for Nav bar name TopNav.js in src-&gt;layout folder.</strong></p>

<p><strong>TopNav.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Link</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-router-dom</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">TopNav</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">nav</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">navbar navbar-expand navbar-dark bg-dark</span><span class="dl">"</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="dl">"</span><span class="s2">/products</span><span class="dl">"</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">navbar-brand</span><span class="dl">"</span><span class="o">&gt;</span>
        <span class="nx">Mahedee</span><span class="p">.</span><span class="nx">net</span>
      <span class="o">&lt;</span><span class="sr">/a</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">navbar-nav mr-auto</span><span class="dl">"</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">li</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">nav-item</span><span class="dl">"</span><span class="o">&gt;</span>
          <span class="o">&lt;</span><span class="nx">Link</span> <span class="nx">to</span><span class="o">=</span><span class="p">{</span><span class="dl">"</span><span class="s2">/products</span><span class="dl">"</span><span class="p">}</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">nav-link</span><span class="dl">"</span><span class="o">&gt;</span>
            <span class="nx">Products</span>
          <span class="o">&lt;</span><span class="sr">/Link</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="sr">/li</span><span class="err">&gt;
</span>
        <span class="o">&lt;</span><span class="nx">li</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">nav-item</span><span class="dl">"</span><span class="o">&gt;</span>
          <span class="o">&lt;</span><span class="nx">Link</span> <span class="nx">to</span><span class="o">=</span><span class="p">{</span><span class="dl">"</span><span class="s2">/customers</span><span class="dl">"</span><span class="p">}</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">nav-link</span><span class="dl">"</span><span class="o">&gt;</span>
            <span class="nx">Customers</span>
          <span class="o">&lt;</span><span class="sr">/Link</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="sr">/li</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/nav</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">TopNav</span><span class="p">;</span>
</code></pre></div></div>

<p><strong>Step 17: Create components for CRUD operation for Product in src-&gt;components-&gt;product.</strong></p>

<ul>
  <li>Create ProductList.js file for ProductList component.</li>
</ul>

<p><strong>ProductList.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">useCallback</span><span class="p">,</span> <span class="nx">useEffect</span><span class="p">,</span> <span class="nx">useState</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useDispatch</span><span class="p">,</span> <span class="nx">useSelector</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-redux</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Link</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-router-dom</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span>
  <span class="nx">deleteProduct</span><span class="p">,</span>
  <span class="nx">retrieveProducts</span><span class="p">,</span>
<span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../../redux/slices/productsSlice</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">WarningTostify</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../../helper/ToastifyMessage</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">ProductList</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">products</span> <span class="o">=</span> <span class="nf">useSelector</span><span class="p">((</span><span class="nx">state</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">state</span><span class="p">.</span><span class="nx">products</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">dispatch</span> <span class="o">=</span> <span class="nf">useDispatch</span><span class="p">();</span>

  <span class="kd">const</span> <span class="nx">initFetch</span> <span class="o">=</span> <span class="nf">useCallback</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nf">dispatch</span><span class="p">(</span><span class="nf">retrieveProducts</span><span class="p">());</span>
  <span class="p">},</span> <span class="p">[</span><span class="nx">dispatch</span><span class="p">]);</span>

  <span class="nf">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nf">initFetch</span><span class="p">();</span>
  <span class="p">},</span> <span class="p">[</span><span class="nx">initFetch</span><span class="p">]);</span>

  <span class="kd">function</span> <span class="nf">onDeleteProduct</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">debugger</span><span class="p">;</span>
    <span class="nf">dispatch</span><span class="p">(</span><span class="nf">deleteProduct</span><span class="p">(</span><span class="nx">id</span><span class="p">))</span>
      <span class="p">.</span><span class="nf">then</span><span class="p">((</span><span class="nx">response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nc">WarningTostify</span><span class="p">(</span><span class="s2">`Product with id: </span><span class="p">${</span><span class="nx">id</span><span class="p">}</span><span class="s2"> has been deleted.`</span><span class="p">);</span>
      <span class="p">})</span>
      <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span>
      <span class="p">});</span>
  <span class="p">}</span>

  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">card</span><span class="dl">"</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">card-body</span><span class="dl">"</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
          <span class="o">&lt;</span><span class="nx">h3</span><span class="o">&gt;</span><span class="nx">Product</span> <span class="nx">List</span><span class="o">&lt;</span><span class="sr">/h3</span><span class="err">&gt;
</span>          <span class="o">&lt;</span><span class="nx">Link</span> <span class="nx">to</span><span class="o">=</span><span class="p">{</span><span class="dl">"</span><span class="s2">/add-product/</span><span class="dl">"</span><span class="p">}</span><span class="o">&gt;</span>
            <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">btn btn-primary</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Create</span><span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>          <span class="o">&lt;</span><span class="sr">/Link</span><span class="err">&gt;
</span>
          <span class="o">&lt;</span><span class="nx">table</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">table table-stripped</span><span class="dl">"</span><span class="o">&gt;</span>
            <span class="o">&lt;</span><span class="nx">thead</span><span class="o">&gt;</span>
              <span class="o">&lt;</span><span class="nx">tr</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">th</span><span class="o">&gt;</span><span class="nx">Id</span><span class="o">&lt;</span><span class="sr">/th</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">th</span><span class="o">&gt;</span><span class="nx">Name</span><span class="o">&lt;</span><span class="sr">/th</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">th</span><span class="o">&gt;</span><span class="nx">Price</span><span class="o">&lt;</span><span class="sr">/th</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">th</span><span class="o">&gt;</span><span class="nx">Stock</span> <span class="nx">Quantity</span><span class="o">&lt;</span><span class="sr">/th</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">th</span><span class="o">&gt;</span><span class="nx">Actions</span><span class="o">&lt;</span><span class="sr">/th</span><span class="err">&gt;
</span>              <span class="o">&lt;</span><span class="sr">/tr</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="sr">/thead</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="nx">tbody</span><span class="o">&gt;</span>
              <span class="p">{</span><span class="nx">products</span> <span class="o">&amp;&amp;</span>
                <span class="nx">products</span><span class="p">.</span><span class="nf">map</span><span class="p">((</span><span class="nx">product</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span>
                  <span class="o">&lt;</span><span class="nx">tr</span> <span class="nx">key</span><span class="o">=</span><span class="p">{</span><span class="nx">product</span><span class="p">.</span><span class="nx">id</span><span class="p">}</span><span class="o">&gt;</span>
                    <span class="o">&lt;</span><span class="nx">td</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">product</span><span class="p">.</span><span class="nx">id</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/td</span><span class="err">&gt;
</span>                    <span class="o">&lt;</span><span class="nx">td</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">product</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/td</span><span class="err">&gt;
</span>                    <span class="o">&lt;</span><span class="nx">td</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">product</span><span class="p">.</span><span class="nx">price</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/td</span><span class="err">&gt;
</span>                    <span class="o">&lt;</span><span class="nx">td</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">product</span><span class="p">.</span><span class="nx">stockQuantity</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/td</span><span class="err">&gt;
</span>                    <span class="o">&lt;</span><span class="nx">td</span><span class="o">&gt;</span>
                      <span class="p">{</span><span class="dl">"</span><span class="s2"> </span><span class="dl">"</span><span class="p">}</span>
                      <span class="o">&lt;</span><span class="nx">Link</span>
                        <span class="nx">to</span><span class="o">=</span><span class="p">{</span><span class="dl">"</span><span class="s2">/edit-product/</span><span class="dl">"</span> <span class="o">+</span> <span class="nx">product</span><span class="p">.</span><span class="nx">id</span><span class="p">}</span>
                        <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">badge badge-warning</span><span class="dl">"</span>
                      <span class="o">&gt;</span>
                        <span class="nx">Edit</span>
                      <span class="o">&lt;</span><span class="sr">/Link</span><span class="err">&gt;
</span>                      <span class="o">||</span>
                      <span class="o">&lt;</span><span class="nx">Link</span>
                        <span class="nx">onClick</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="nf">onDeleteProduct</span><span class="p">(</span><span class="nx">product</span><span class="p">.</span><span class="nx">id</span><span class="p">)}</span>
                        <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">badge badge-danger</span><span class="dl">"</span>
                      <span class="o">&gt;</span>
                        <span class="nx">Delete</span>
                      <span class="o">&lt;</span><span class="sr">/Link</span><span class="err">&gt;
</span>                    <span class="o">&lt;</span><span class="sr">/td</span><span class="err">&gt;
</span>                  <span class="o">&lt;</span><span class="sr">/tr</span><span class="err">&gt;
</span>                <span class="p">))}</span>
            <span class="o">&lt;</span><span class="sr">/tbody</span><span class="err">&gt;
</span>          <span class="o">&lt;</span><span class="sr">/table</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">ProductList</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>Create AddProduct.js file for AddProduct component.</li>
</ul>

<p><strong>AddProduct.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">useState</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useDispatch</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-redux</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">createProduct</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../../redux/slices/productsSlice</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useNavigate</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-router-dom</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">SuccessToastify</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../../helper/ToastifyMessage</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">AddProduct</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">initialProductState</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">id</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span>
    <span class="na">description</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span>
    <span class="na">price</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
    <span class="na">stockQuantity</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
  <span class="p">};</span>

  <span class="kd">const</span> <span class="p">[</span><span class="nx">product</span><span class="p">,</span> <span class="nx">setProduct</span><span class="p">]</span> <span class="o">=</span> <span class="nf">useState</span><span class="p">(</span><span class="nx">initialProductState</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">navigate</span> <span class="o">=</span> <span class="nf">useNavigate</span><span class="p">();</span>

  <span class="kd">const</span> <span class="nx">dispatch</span> <span class="o">=</span> <span class="nf">useDispatch</span><span class="p">();</span>

  <span class="kd">const</span> <span class="nx">handleInputChange</span> <span class="o">=</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">value</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">;</span>

    <span class="nf">setProduct</span><span class="p">({</span> <span class="p">...</span><span class="nx">product</span><span class="p">,</span> <span class="p">[</span><span class="nx">name</span><span class="p">]:</span> <span class="nx">value</span> <span class="p">});</span>
  <span class="p">};</span>

  <span class="kd">const</span> <span class="nx">saveProduct</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nf">dispatch</span><span class="p">(</span><span class="nf">createProduct</span><span class="p">(</span><span class="nx">product</span><span class="p">))</span>
      <span class="p">.</span><span class="nf">unwrap</span><span class="p">()</span>
      <span class="p">.</span><span class="nf">then</span><span class="p">((</span><span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
        <span class="nf">setProduct</span><span class="p">({</span>
          <span class="na">id</span><span class="p">:</span> <span class="nx">data</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span>
          <span class="na">name</span><span class="p">:</span> <span class="nx">data</span><span class="p">.</span><span class="nx">title</span><span class="p">,</span>
          <span class="na">description</span><span class="p">:</span> <span class="nx">data</span><span class="p">.</span><span class="nx">description</span><span class="p">,</span>
          <span class="na">price</span><span class="p">:</span> <span class="nx">data</span><span class="p">.</span><span class="nx">price</span><span class="p">,</span>
          <span class="na">stockQuantity</span><span class="p">:</span> <span class="nx">data</span><span class="p">.</span><span class="nx">stockQuantity</span><span class="p">,</span>
        <span class="p">});</span>
        <span class="nc">SuccessToastify</span><span class="p">(</span><span class="dl">"</span><span class="s2">Product information saved successfully!!</span><span class="dl">"</span><span class="p">);</span>
        <span class="nf">navigate</span><span class="p">(</span><span class="dl">"</span><span class="s2">/products</span><span class="dl">"</span><span class="p">);</span>
      <span class="p">})</span>
      <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span>
      <span class="p">});</span>
  <span class="p">};</span>

  <span class="kd">const</span> <span class="nx">handleBackToList</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nf">navigate</span><span class="p">(</span><span class="dl">"</span><span class="s2">/products</span><span class="dl">"</span><span class="p">);</span>
  <span class="p">};</span>

  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">card</span><span class="dl">"</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">card-body</span><span class="dl">"</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">row</span><span class="dl">"</span><span class="o">&gt;</span>
          <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">col-md-3</span><span class="dl">"</span><span class="o">&gt;</span>
            <span class="o">&lt;</span><span class="nx">h3</span><span class="o">&gt;</span><span class="nx">Create</span> <span class="nx">Product</span><span class="o">&lt;</span><span class="sr">/h3</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
              <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-group</span><span class="dl">"</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">label</span> <span class="nx">htmlFor</span><span class="o">=</span><span class="dl">"</span><span class="s2">name</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Name</span><span class="o">&lt;</span><span class="sr">/label</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">input</span>
                  <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">text</span><span class="dl">"</span>
                  <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-control</span><span class="dl">"</span>
                  <span class="nx">id</span><span class="o">=</span><span class="dl">"</span><span class="s2">name</span><span class="dl">"</span>
                  <span class="nx">required</span>
                  <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nx">product</span><span class="p">.</span><span class="nx">name</span> <span class="o">||</span> <span class="dl">""</span><span class="p">}</span>
                  <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="nx">handleInputChange</span><span class="p">}</span>
                  <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">name</span><span class="dl">"</span>
                <span class="o">/&gt;</span>
              <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>              <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-group</span><span class="dl">"</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">label</span> <span class="nx">htmlFor</span><span class="o">=</span><span class="dl">"</span><span class="s2">description</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Description</span><span class="o">&lt;</span><span class="sr">/label</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">input</span>
                  <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">text</span><span class="dl">"</span>
                  <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-control</span><span class="dl">"</span>
                  <span class="nx">id</span><span class="o">=</span><span class="dl">"</span><span class="s2">description</span><span class="dl">"</span>
                  <span class="nx">required</span>
                  <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nx">product</span><span class="p">.</span><span class="nx">description</span> <span class="o">||</span> <span class="dl">""</span><span class="p">}</span>
                  <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="nx">handleInputChange</span><span class="p">}</span>
                  <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">description</span><span class="dl">"</span>
                <span class="o">/&gt;</span>
              <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>              <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-group</span><span class="dl">"</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">label</span> <span class="nx">htmlFor</span><span class="o">=</span><span class="dl">"</span><span class="s2">price</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Price</span><span class="o">&lt;</span><span class="sr">/label</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">input</span>
                  <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">text</span><span class="dl">"</span>
                  <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-control</span><span class="dl">"</span>
                  <span class="nx">id</span><span class="o">=</span><span class="dl">"</span><span class="s2">price</span><span class="dl">"</span>
                  <span class="nx">required</span>
                  <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nx">product</span><span class="p">.</span><span class="nx">price</span> <span class="o">||</span> <span class="dl">""</span><span class="p">}</span>
                  <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="nx">handleInputChange</span><span class="p">}</span>
                  <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">price</span><span class="dl">"</span>
                <span class="o">/&gt;</span>
              <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>              <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-group</span><span class="dl">"</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">label</span> <span class="nx">htmlFor</span><span class="o">=</span><span class="dl">"</span><span class="s2">stockQuantity</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Stock</span> <span class="nx">Quantity</span><span class="o">&lt;</span><span class="sr">/label</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">input</span>
                  <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">text</span><span class="dl">"</span>
                  <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-control</span><span class="dl">"</span>
                  <span class="nx">id</span><span class="o">=</span><span class="dl">"</span><span class="s2">stockQuantity</span><span class="dl">"</span>
                  <span class="nx">required</span>
                  <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nx">product</span><span class="p">.</span><span class="nx">stockQuantity</span> <span class="o">||</span> <span class="dl">""</span><span class="p">}</span>
                  <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="nx">handleInputChange</span><span class="p">}</span>
                  <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">stockQuantity</span><span class="dl">"</span>
                <span class="o">/&gt;</span>
              <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>              <span class="o">&lt;</span><span class="nx">button</span>
                <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">button</span><span class="dl">"</span>
                <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="nx">saveProduct</span><span class="p">}</span>
                <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">btn btn-success</span><span class="dl">"</span>
              <span class="o">&gt;</span>
                <span class="nx">Submit</span>
              <span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>              <span class="o">||</span>
              <span class="o">&lt;</span><span class="nx">button</span>
                <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">button</span><span class="dl">"</span>
                <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">btn btn-info</span><span class="dl">"</span>
                <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="nx">handleBackToList</span><span class="p">}</span>
              <span class="o">&gt;</span>
                <span class="nx">Back</span> <span class="nx">to</span> <span class="nx">List</span>
              <span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>          <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">AddProduct</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>Create EditProduct.js file for EditProduct component.</li>
</ul>

<p><strong>EditProduct.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">useNavigate</span><span class="p">,</span> <span class="nx">useParams</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-router-dom</span><span class="dl">"</span><span class="p">;</span>

<span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">useEffect</span><span class="p">,</span> <span class="nx">useState</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useDispatch</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-redux</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">ProductDataService</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../../services/ProductService</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">updateProduct</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../../redux/slices/productsSlice</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">SuccessToastify</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../../helper/ToastifyMessage</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">EditProduct</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">{</span> <span class="nx">id</span> <span class="p">}</span> <span class="o">=</span> <span class="nf">useParams</span><span class="p">();</span>
  <span class="kd">let</span> <span class="nx">navigate</span> <span class="o">=</span> <span class="nf">useNavigate</span><span class="p">();</span>

  <span class="kd">const</span> <span class="nx">initialProductState</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">id</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span>
    <span class="na">description</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span>
    <span class="na">price</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
    <span class="na">stockQuantity</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
  <span class="p">};</span>

  <span class="kd">const</span> <span class="p">[</span><span class="nx">productObj</span><span class="p">,</span> <span class="nx">setProductObj</span><span class="p">]</span> <span class="o">=</span> <span class="nf">useState</span><span class="p">(</span><span class="nx">initialProductState</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">dispatch</span> <span class="o">=</span> <span class="nf">useDispatch</span><span class="p">();</span>

  <span class="kd">const</span> <span class="nx">getProduct</span> <span class="o">=</span> <span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">ProductDataService</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span>
      <span class="p">.</span><span class="nf">then</span><span class="p">((</span><span class="nx">response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nf">setProductObj</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
      <span class="p">})</span>
      <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span>
      <span class="p">});</span>
  <span class="p">};</span>

  <span class="nf">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if </span><span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
      <span class="nf">getProduct</span><span class="p">(</span><span class="nx">id</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">},</span> <span class="p">[</span><span class="nx">id</span><span class="p">]);</span>

  <span class="kd">const</span> <span class="nx">handleInputChange</span> <span class="o">=</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">value</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">;</span>
    <span class="nf">setProductObj</span><span class="p">({</span> <span class="p">...</span><span class="nx">productObj</span><span class="p">,</span> <span class="p">[</span><span class="nx">name</span><span class="p">]:</span> <span class="nx">value</span> <span class="p">});</span>
  <span class="p">};</span>

  <span class="kd">const</span> <span class="nx">updateProductContent</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nf">dispatch</span><span class="p">(</span><span class="nf">updateProduct</span><span class="p">({</span> <span class="na">id</span><span class="p">:</span> <span class="nx">productObj</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="na">data</span><span class="p">:</span> <span class="nx">productObj</span> <span class="p">}))</span>
      <span class="p">.</span><span class="nf">unwrap</span><span class="p">()</span>
      <span class="p">.</span><span class="nf">then</span><span class="p">((</span><span class="nx">response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nc">SuccessToastify</span><span class="p">(</span><span class="dl">"</span><span class="s2">Product information has been updated successfully!</span><span class="dl">"</span><span class="p">);</span>
        <span class="nf">navigate</span><span class="p">(</span><span class="dl">"</span><span class="s2">/products</span><span class="dl">"</span><span class="p">);</span>
      <span class="p">})</span>
      <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span>
      <span class="p">});</span>
  <span class="p">};</span>

  <span class="kd">const</span> <span class="nx">backtoList</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nf">navigate</span><span class="p">(</span><span class="dl">"</span><span class="s2">/products</span><span class="dl">"</span><span class="p">);</span>
  <span class="p">};</span>

  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">card</span><span class="dl">"</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">card-body</span><span class="dl">"</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">row</span><span class="dl">"</span><span class="o">&gt;</span>
          <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">col-md-3</span><span class="dl">"</span><span class="o">&gt;</span>
            <span class="o">&lt;</span><span class="nx">h3</span><span class="o">&gt;</span><span class="nx">Edit</span> <span class="nx">Product</span><span class="o">&lt;</span><span class="sr">/h3</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="nx">form</span><span class="o">&gt;</span>
              <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-group</span><span class="dl">"</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">label</span> <span class="nx">htmlFor</span><span class="o">=</span><span class="dl">"</span><span class="s2">name</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Name</span><span class="o">&lt;</span><span class="sr">/label</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">input</span>
                  <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">text</span><span class="dl">"</span>
                  <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-control</span><span class="dl">"</span>
                  <span class="nx">id</span><span class="o">=</span><span class="dl">"</span><span class="s2">name</span><span class="dl">"</span>
                  <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">name</span><span class="dl">"</span>
                  <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nx">productObj</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span>
                  <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="nx">handleInputChange</span><span class="p">}</span>
                <span class="sr">/</span><span class="err">&gt;
</span>              <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>              <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-group</span><span class="dl">"</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">label</span> <span class="nx">htmlFor</span><span class="o">=</span><span class="dl">"</span><span class="s2">description</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Description</span><span class="o">&lt;</span><span class="sr">/label</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">input</span>
                  <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">text</span><span class="dl">"</span>
                  <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-control</span><span class="dl">"</span>
                  <span class="nx">id</span><span class="o">=</span><span class="dl">"</span><span class="s2">description</span><span class="dl">"</span>
                  <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">description</span><span class="dl">"</span>
                  <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nx">productObj</span><span class="p">.</span><span class="nx">description</span><span class="p">}</span>
                  <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="nx">handleInputChange</span><span class="p">}</span>
                <span class="sr">/</span><span class="err">&gt;
</span>              <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>
              <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-group</span><span class="dl">"</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">label</span> <span class="nx">htmlFor</span><span class="o">=</span><span class="dl">"</span><span class="s2">price</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Price</span><span class="o">&lt;</span><span class="sr">/label</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">input</span>
                  <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">text</span><span class="dl">"</span>
                  <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-control</span><span class="dl">"</span>
                  <span class="nx">id</span><span class="o">=</span><span class="dl">"</span><span class="s2">price</span><span class="dl">"</span>
                  <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">price</span><span class="dl">"</span>
                  <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nx">productObj</span><span class="p">.</span><span class="nx">price</span><span class="p">}</span>
                  <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="nx">handleInputChange</span><span class="p">}</span>
                <span class="sr">/</span><span class="err">&gt;
</span>              <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>
              <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-group</span><span class="dl">"</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">label</span> <span class="nx">htmlFor</span><span class="o">=</span><span class="dl">"</span><span class="s2">stockQuantity</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Stock</span> <span class="nx">Quantity</span><span class="o">&lt;</span><span class="sr">/label</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">input</span>
                  <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">text</span><span class="dl">"</span>
                  <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-control</span><span class="dl">"</span>
                  <span class="nx">id</span><span class="o">=</span><span class="dl">"</span><span class="s2">stockQuantity</span><span class="dl">"</span>
                  <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">stockQuantity</span><span class="dl">"</span>
                  <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nx">productObj</span><span class="p">.</span><span class="nx">stockQuantity</span><span class="p">}</span>
                  <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="nx">handleInputChange</span><span class="p">}</span>
                <span class="sr">/</span><span class="err">&gt;
</span>              <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="sr">/form</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-group</span><span class="dl">"</span><span class="o">&gt;</span>
              <span class="o">&lt;</span><span class="nx">input</span>
                <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">button</span><span class="dl">"</span>
                <span class="nx">value</span><span class="o">=</span><span class="dl">"</span><span class="s2">Edit</span><span class="dl">"</span>
                <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">btn btn-primary</span><span class="dl">"</span>
                <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="nx">updateProductContent</span><span class="p">}</span>
              <span class="o">&gt;&lt;</span><span class="sr">/input</span><span class="err">&gt;
</span>              <span class="o">||</span>
              <span class="o">&lt;</span><span class="nx">input</span>
                <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">button</span><span class="dl">"</span>
                <span class="nx">value</span><span class="o">=</span><span class="dl">"</span><span class="s2">Back to List</span><span class="dl">"</span>
                <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">btn btn-primary</span><span class="dl">"</span>
                <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="nx">backtoList</span><span class="p">}</span>
              <span class="o">&gt;&lt;</span><span class="sr">/input</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>          <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">EditProduct</span><span class="p">;</span>
</code></pre></div></div>

<p><strong>Step 18: Create components for CRUD operation for Customer in src-&gt;components-&gt;customer.</strong></p>

<ul>
  <li>Create CustomerList.js file for CustomerList component.</li>
</ul>

<p><strong>CustomerList.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">useCallback</span><span class="p">,</span> <span class="nx">useEffect</span><span class="p">,</span> <span class="nx">useState</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useDispatch</span><span class="p">,</span> <span class="nx">useSelector</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-redux</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Link</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-router-dom</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span>
  <span class="nx">deleteCustomer</span><span class="p">,</span>
  <span class="nx">findCustomerByName</span><span class="p">,</span>
  <span class="nx">retrieveCustomers</span><span class="p">,</span>
<span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../../redux/slices/customersSlice</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">ConvertDateISOString</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../../utils/Conversion</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">WarningTostify</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../../helper/ToastifyMessage</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">CustomerList</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">searchCustomer</span><span class="p">,</span> <span class="nx">setSearchCustomer</span><span class="p">]</span> <span class="o">=</span> <span class="nf">useState</span><span class="p">(</span><span class="dl">""</span><span class="p">);</span>

  <span class="kd">const</span> <span class="nx">customers</span> <span class="o">=</span> <span class="nf">useSelector</span><span class="p">((</span><span class="nx">state</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">state</span><span class="p">.</span><span class="nx">customers</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">dispatch</span> <span class="o">=</span> <span class="nf">useDispatch</span><span class="p">();</span>
  <span class="kd">const</span> <span class="nx">initFetch</span> <span class="o">=</span> <span class="nf">useCallback</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nf">dispatch</span><span class="p">(</span><span class="nf">retrieveCustomers</span><span class="p">());</span>
  <span class="p">},</span> <span class="p">[</span><span class="nx">dispatch</span><span class="p">]);</span>

  <span class="nf">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nf">initFetch</span><span class="p">();</span>
  <span class="p">},</span> <span class="p">[</span><span class="nx">initFetch</span><span class="p">]);</span>

  <span class="kd">function</span> <span class="nf">onDeleteCustomer</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
    <span class="nf">dispatch</span><span class="p">(</span><span class="nf">deleteCustomer</span><span class="p">(</span><span class="nx">id</span><span class="p">))</span>
      <span class="p">.</span><span class="nf">then</span><span class="p">((</span><span class="nx">response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">response</span><span class="p">);</span>
        <span class="nc">WarningTostify</span><span class="p">(</span><span class="dl">"</span><span class="s2">Customer has been deleted</span><span class="dl">"</span><span class="p">);</span>
      <span class="p">})</span>
      <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span>
      <span class="p">});</span>
  <span class="p">}</span>

  <span class="kd">const</span> <span class="nx">onChangeSearchCustomer</span> <span class="o">=</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">searchCustomer</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>

    <span class="nf">setSearchCustomer</span><span class="p">(</span><span class="nx">searchCustomer</span><span class="p">);</span>
  <span class="p">};</span>

  <span class="kd">const</span> <span class="nx">findByCustomerName</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nf">dispatch</span><span class="p">(</span><span class="nf">findCustomerByName</span><span class="p">({</span> <span class="na">name</span><span class="p">:</span> <span class="nx">searchCustomer</span> <span class="p">}));</span>
  <span class="p">};</span>

  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">card</span><span class="dl">"</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">card-body</span><span class="dl">"</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
          <span class="o">&lt;</span><span class="nx">h3</span><span class="o">&gt;</span><span class="nx">Customer</span> <span class="nx">List</span><span class="o">&lt;</span><span class="sr">/h3</span><span class="err">&gt;
</span>          <span class="o">&lt;</span><span class="nx">Link</span> <span class="nx">to</span><span class="o">=</span><span class="p">{</span><span class="dl">"</span><span class="s2">/add-customer/</span><span class="dl">"</span><span class="p">}</span><span class="o">&gt;</span>
            <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">btn btn-primary</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Create</span><span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>          <span class="o">&lt;</span><span class="sr">/Link</span><span class="err">&gt;
</span>
          <span class="o">&lt;</span><span class="nx">br</span><span class="o">&gt;&lt;</span><span class="sr">/br</span><span class="err">&gt;
</span>          <span class="o">&lt;</span><span class="nx">br</span><span class="o">&gt;&lt;</span><span class="sr">/br</span><span class="err">&gt;
</span>          <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">input-group mb-3</span><span class="dl">"</span><span class="o">&gt;</span>
            <span class="o">&lt;</span><span class="nx">input</span>
              <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">text</span><span class="dl">"</span>
              <span class="nx">placeholder</span><span class="o">=</span><span class="dl">"</span><span class="s2">Search by customer name</span><span class="dl">"</span>
              <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-control</span><span class="dl">"</span>
              <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nx">searchCustomer</span><span class="p">}</span>
              <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="nx">onChangeSearchCustomer</span><span class="p">}</span>
            <span class="sr">/</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">input-group-append</span><span class="dl">"</span><span class="o">&gt;</span>
              <span class="o">&lt;</span><span class="nx">button</span>
                <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">btn btn-info </span><span class="dl">"</span>
                <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">button</span><span class="dl">"</span>
                <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="nx">findByCustomerName</span><span class="p">}</span>
              <span class="o">&gt;</span>
                <span class="nx">Search</span>
              <span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>          <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>
          <span class="o">&lt;</span><span class="nx">table</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">table table-stripped</span><span class="dl">"</span><span class="o">&gt;</span>
            <span class="o">&lt;</span><span class="nx">thead</span><span class="o">&gt;</span>
              <span class="o">&lt;</span><span class="nx">tr</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">th</span><span class="o">&gt;</span><span class="nx">Id</span><span class="o">&lt;</span><span class="sr">/th</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">th</span><span class="o">&gt;</span><span class="nx">First</span> <span class="nx">Name</span><span class="o">&lt;</span><span class="sr">/th</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">th</span><span class="o">&gt;</span><span class="nx">Last</span> <span class="nx">Name</span><span class="o">&lt;</span><span class="sr">/th</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">th</span><span class="o">&gt;</span><span class="nx">Email</span><span class="o">&lt;</span><span class="sr">/th</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">th</span><span class="o">&gt;</span><span class="nx">Phone</span><span class="o">&lt;</span><span class="sr">/th</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">th</span><span class="o">&gt;</span><span class="nx">Birth</span> <span class="nb">Date</span><span class="o">&lt;</span><span class="sr">/th</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">th</span><span class="o">&gt;</span><span class="nx">Actions</span><span class="o">&lt;</span><span class="sr">/th</span><span class="err">&gt;
</span>              <span class="o">&lt;</span><span class="sr">/tr</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="sr">/thead</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="nx">tbody</span><span class="o">&gt;</span>
              <span class="p">{</span><span class="nx">customers</span> <span class="o">&amp;&amp;</span>
                <span class="nx">customers</span><span class="p">.</span><span class="nf">map</span><span class="p">((</span><span class="nx">customer</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span>
                  <span class="o">&lt;</span><span class="nx">tr</span> <span class="nx">key</span><span class="o">=</span><span class="p">{</span><span class="nx">customer</span><span class="p">.</span><span class="nx">id</span><span class="p">}</span><span class="o">&gt;</span>
                    <span class="o">&lt;</span><span class="nx">td</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">customer</span><span class="p">.</span><span class="nx">id</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/td</span><span class="err">&gt;
</span>                    <span class="o">&lt;</span><span class="nx">td</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">customer</span><span class="p">.</span><span class="nx">firstName</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/td</span><span class="err">&gt;
</span>                    <span class="o">&lt;</span><span class="nx">td</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">customer</span><span class="p">.</span><span class="nx">lastName</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/td</span><span class="err">&gt;
</span>                    <span class="o">&lt;</span><span class="nx">td</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">customer</span><span class="p">.</span><span class="nx">email</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/td</span><span class="err">&gt;
</span>                    <span class="o">&lt;</span><span class="nx">td</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">customer</span><span class="p">.</span><span class="nx">phone</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/td</span><span class="err">&gt;
</span>                    <span class="o">&lt;</span><span class="nx">td</span><span class="o">&gt;</span><span class="p">{</span><span class="nc">ConvertDateISOString</span><span class="p">(</span><span class="nx">customer</span><span class="p">.</span><span class="nx">birthDate</span><span class="p">)}</span><span class="o">&lt;</span><span class="sr">/td</span><span class="err">&gt;
</span>                    <span class="o">&lt;</span><span class="nx">td</span><span class="o">&gt;</span>
                      <span class="p">{</span><span class="dl">"</span><span class="s2"> </span><span class="dl">"</span><span class="p">}</span>
                      <span class="o">&lt;</span><span class="nx">Link</span>
                        <span class="nx">to</span><span class="o">=</span><span class="p">{</span><span class="dl">"</span><span class="s2">/edit-customer/</span><span class="dl">"</span> <span class="o">+</span> <span class="nx">customer</span><span class="p">.</span><span class="nx">id</span><span class="p">}</span>
                        <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">badge badge-warning</span><span class="dl">"</span>
                      <span class="o">&gt;</span>
                        <span class="nx">Edit</span>
                      <span class="o">&lt;</span><span class="sr">/Link</span><span class="err">&gt;
</span>                      <span class="o">||</span>
                      <span class="o">&lt;</span><span class="nx">Link</span>
                        <span class="nx">onClick</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="nf">onDeleteCustomer</span><span class="p">(</span><span class="nx">customer</span><span class="p">.</span><span class="nx">id</span><span class="p">)}</span>
                        <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">badge badge-danger</span><span class="dl">"</span>
                      <span class="o">&gt;</span>
                        <span class="nx">Delete</span>
                      <span class="o">&lt;</span><span class="sr">/Link</span><span class="err">&gt;
</span>                    <span class="o">&lt;</span><span class="sr">/td</span><span class="err">&gt;
</span>                  <span class="o">&lt;</span><span class="sr">/tr</span><span class="err">&gt;
</span>                <span class="p">))}</span>
            <span class="o">&lt;</span><span class="sr">/tbody</span><span class="err">&gt;
</span>          <span class="o">&lt;</span><span class="sr">/table</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">CustomerList</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>Create AddCustomer.js file for AddCustomer component.</li>
</ul>

<p><strong>AddCustomer.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">useState</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useDispatch</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-redux</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useNavigate</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-router-dom</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">createCustomer</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../../redux/slices/customersSlice</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">SuccessToastify</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../../helper/ToastifyMessage</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">AddCustomer</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">initialCustomerState</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">id</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
    <span class="na">firstName</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span>
    <span class="na">lastName</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span>
    <span class="na">email</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span>
    <span class="na">phone</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span>
    <span class="na">birthDate</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span>
  <span class="p">};</span>

  <span class="kd">const</span> <span class="p">[</span><span class="nx">customer</span><span class="p">,</span> <span class="nx">setCustomer</span><span class="p">]</span> <span class="o">=</span> <span class="nf">useState</span><span class="p">(</span><span class="nx">initialCustomerState</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">navigate</span> <span class="o">=</span> <span class="nf">useNavigate</span><span class="p">();</span>

  <span class="kd">const</span> <span class="nx">dispatch</span> <span class="o">=</span> <span class="nf">useDispatch</span><span class="p">();</span>

  <span class="kd">const</span> <span class="nx">handleInputChange</span> <span class="o">=</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">value</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">;</span>

    <span class="nf">setCustomer</span><span class="p">({</span> <span class="p">...</span><span class="nx">customer</span><span class="p">,</span> <span class="p">[</span><span class="nx">name</span><span class="p">]:</span> <span class="nx">value</span> <span class="p">});</span>
  <span class="p">};</span>

  <span class="kd">const</span> <span class="nx">saveCustomer</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nf">dispatch</span><span class="p">(</span><span class="nf">createCustomer</span><span class="p">(</span><span class="nx">customer</span><span class="p">))</span>
      <span class="p">.</span><span class="nf">unwrap</span><span class="p">()</span>
      <span class="p">.</span><span class="nf">then</span><span class="p">((</span><span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nc">SuccessToastify</span><span class="p">(</span><span class="dl">"</span><span class="s2">Customer has been created successfully!</span><span class="dl">"</span><span class="p">);</span>
        <span class="nf">setCustomer</span><span class="p">({</span>
          <span class="na">id</span><span class="p">:</span> <span class="nx">data</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span>
          <span class="na">firstName</span><span class="p">:</span> <span class="nx">data</span><span class="p">.</span><span class="nx">firstName</span><span class="p">,</span>
          <span class="na">lastName</span><span class="p">:</span> <span class="nx">data</span><span class="p">.</span><span class="nx">lastName</span><span class="p">,</span>
          <span class="na">email</span><span class="p">:</span> <span class="nx">data</span><span class="p">.</span><span class="nx">email</span><span class="p">,</span>
          <span class="na">phone</span><span class="p">:</span> <span class="nx">data</span><span class="p">.</span><span class="nx">phone</span><span class="p">,</span>
          <span class="na">birthDate</span><span class="p">:</span> <span class="nx">data</span><span class="p">.</span><span class="nx">birthDate</span><span class="p">,</span>
        <span class="p">});</span>
        <span class="nf">navigate</span><span class="p">(</span><span class="dl">"</span><span class="s2">/customers</span><span class="dl">"</span><span class="p">);</span>
      <span class="p">})</span>
      <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span>
      <span class="p">});</span>
  <span class="p">};</span>

  <span class="kd">const</span> <span class="nx">backToList</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nf">navigate</span><span class="p">(</span><span class="dl">"</span><span class="s2">/customers</span><span class="dl">"</span><span class="p">);</span>
  <span class="p">};</span>

  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">card</span><span class="dl">"</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">card-body</span><span class="dl">"</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">row</span><span class="dl">"</span><span class="o">&gt;</span>
          <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">col-md-3</span><span class="dl">"</span><span class="o">&gt;</span>
            <span class="o">&lt;</span><span class="nx">h3</span><span class="o">&gt;</span><span class="nx">Create</span> <span class="nx">Customer</span><span class="o">&lt;</span><span class="sr">/h3</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
              <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-group</span><span class="dl">"</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">label</span> <span class="nx">htmlFor</span><span class="o">=</span><span class="dl">"</span><span class="s2">firstName</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">First</span> <span class="nx">Name</span><span class="o">&lt;</span><span class="sr">/label</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">input</span>
                  <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">text</span><span class="dl">"</span>
                  <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-control</span><span class="dl">"</span>
                  <span class="nx">id</span><span class="o">=</span><span class="dl">"</span><span class="s2">firstName</span><span class="dl">"</span>
                  <span class="nx">required</span>
                  <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nx">customer</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">||</span> <span class="dl">""</span><span class="p">}</span>
                  <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="nx">handleInputChange</span><span class="p">}</span>
                  <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">firstName</span><span class="dl">"</span>
                <span class="o">/&gt;</span>
              <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>              <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-group</span><span class="dl">"</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">label</span> <span class="nx">htmlFor</span><span class="o">=</span><span class="dl">"</span><span class="s2">description</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Last</span> <span class="nx">Name</span><span class="o">&lt;</span><span class="sr">/label</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">input</span>
                  <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">text</span><span class="dl">"</span>
                  <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-control</span><span class="dl">"</span>
                  <span class="nx">id</span><span class="o">=</span><span class="dl">"</span><span class="s2">lastName</span><span class="dl">"</span>
                  <span class="nx">required</span>
                  <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nx">customer</span><span class="p">.</span><span class="nx">lastName</span> <span class="o">||</span> <span class="dl">""</span><span class="p">}</span>
                  <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="nx">handleInputChange</span><span class="p">}</span>
                  <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">lastName</span><span class="dl">"</span>
                <span class="o">/&gt;</span>
              <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>              <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-group</span><span class="dl">"</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">label</span> <span class="nx">htmlFor</span><span class="o">=</span><span class="dl">"</span><span class="s2">email</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Email</span><span class="o">&lt;</span><span class="sr">/label</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">input</span>
                  <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">text</span><span class="dl">"</span>
                  <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-control</span><span class="dl">"</span>
                  <span class="nx">id</span><span class="o">=</span><span class="dl">"</span><span class="s2">email</span><span class="dl">"</span>
                  <span class="nx">required</span>
                  <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nx">customer</span><span class="p">.</span><span class="nx">email</span> <span class="o">||</span> <span class="dl">""</span><span class="p">}</span>
                  <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="nx">handleInputChange</span><span class="p">}</span>
                  <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">email</span><span class="dl">"</span>
                <span class="o">/&gt;</span>
              <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>              <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-group</span><span class="dl">"</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">label</span> <span class="nx">htmlFor</span><span class="o">=</span><span class="dl">"</span><span class="s2">phone</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Phone</span><span class="o">&lt;</span><span class="sr">/label</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">input</span>
                  <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">text</span><span class="dl">"</span>
                  <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-control</span><span class="dl">"</span>
                  <span class="nx">id</span><span class="o">=</span><span class="dl">"</span><span class="s2">phone</span><span class="dl">"</span>
                  <span class="nx">required</span>
                  <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nx">customer</span><span class="p">.</span><span class="nx">phone</span> <span class="o">||</span> <span class="dl">""</span><span class="p">}</span>
                  <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="nx">handleInputChange</span><span class="p">}</span>
                  <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">phone</span><span class="dl">"</span>
                <span class="o">/&gt;</span>
              <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>              <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-group</span><span class="dl">"</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">label</span> <span class="nx">htmlFor</span><span class="o">=</span><span class="dl">"</span><span class="s2">birthDate</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Birth</span> <span class="nb">Date</span><span class="o">&lt;</span><span class="sr">/label</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">input</span>
                  <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">date</span><span class="dl">"</span>
                  <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-control</span><span class="dl">"</span>
                  <span class="nx">id</span><span class="o">=</span><span class="dl">"</span><span class="s2">birthDate</span><span class="dl">"</span>
                  <span class="nx">required</span>
                  <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nx">customer</span><span class="p">.</span><span class="nx">birthDate</span> <span class="o">||</span> <span class="dl">""</span><span class="p">}</span>
                  <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="nx">handleInputChange</span><span class="p">}</span>
                  <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">birthDate</span><span class="dl">"</span>
                <span class="o">/&gt;</span>
              <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>              <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="nx">saveCustomer</span><span class="p">}</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">btn btn-success</span><span class="dl">"</span><span class="o">&gt;</span>
                <span class="nx">Submit</span>
              <span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>              <span class="o">||</span>
              <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">btn btn-success</span><span class="dl">"</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="nx">backToList</span><span class="p">}</span><span class="o">&gt;</span>
                <span class="nx">Back</span> <span class="nx">to</span> <span class="nx">List</span>
              <span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>          <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">AddCustomer</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>Create EditCustomer.js file for EditCustomer component.</li>
</ul>

<p><strong>EditCustomer.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">useEffect</span><span class="p">,</span> <span class="nx">useState</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useDispatch</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-redux</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useNavigate</span><span class="p">,</span> <span class="nx">useParams</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-router-dom</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">CustomerDataService</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../../services/CustomerService</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">updateCustomer</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../../redux/slices/customersSlice</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">SuccessToastify</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../../helper/ToastifyMessage</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">ConvertDateISOString</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../../utils/Conversion</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">EditCustomer</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">{</span> <span class="nx">id</span> <span class="p">}</span> <span class="o">=</span> <span class="nf">useParams</span><span class="p">();</span>
  <span class="kd">let</span> <span class="nx">navigate</span> <span class="o">=</span> <span class="nf">useNavigate</span><span class="p">();</span>

  <span class="kd">const</span> <span class="nx">initialCustomerState</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">id</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
    <span class="na">firstName</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span>
    <span class="na">lastName</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span>
    <span class="na">email</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span>
    <span class="na">phone</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span>
    <span class="na">birthDate</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
  <span class="p">};</span>

  <span class="kd">const</span> <span class="p">[</span><span class="nx">customerObj</span><span class="p">,</span> <span class="nx">setCustomerObj</span><span class="p">]</span> <span class="o">=</span> <span class="nf">useState</span><span class="p">(</span><span class="nx">initialCustomerState</span><span class="p">);</span>

  <span class="kd">const</span> <span class="nx">dispatch</span> <span class="o">=</span> <span class="nf">useDispatch</span><span class="p">();</span>

  <span class="kd">const</span> <span class="nx">getCustomer</span> <span class="o">=</span> <span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">CustomerDataService</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span>
      <span class="p">.</span><span class="nf">then</span><span class="p">((</span><span class="nx">response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nf">setCustomerObj</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
      <span class="p">})</span>
      <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span>
      <span class="p">});</span>
  <span class="p">};</span>

  <span class="nf">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if </span><span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
      <span class="nf">getCustomer</span><span class="p">(</span><span class="nx">id</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">},</span> <span class="p">[</span><span class="nx">id</span><span class="p">]);</span>

  <span class="kd">const</span> <span class="nx">handleInputChange</span> <span class="o">=</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">value</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">;</span>
    <span class="nf">setCustomerObj</span><span class="p">({</span> <span class="p">...</span><span class="nx">customerObj</span><span class="p">,</span> <span class="p">[</span><span class="nx">name</span><span class="p">]:</span> <span class="nx">value</span> <span class="p">});</span>
  <span class="p">};</span>

  <span class="kd">const</span> <span class="nx">backtoList</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nf">navigate</span><span class="p">(</span><span class="dl">"</span><span class="s2">/customers</span><span class="dl">"</span><span class="p">);</span>
  <span class="p">};</span>

  <span class="kd">const</span> <span class="nx">onSubmit</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Clicked submit button</span><span class="dl">"</span><span class="p">);</span>

    <span class="nf">dispatch</span><span class="p">(</span><span class="nf">updateCustomer</span><span class="p">({</span> <span class="na">id</span><span class="p">:</span> <span class="nx">customerObj</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="na">data</span><span class="p">:</span> <span class="nx">customerObj</span> <span class="p">}))</span>
      <span class="p">.</span><span class="nf">unwrap</span><span class="p">()</span>
      <span class="p">.</span><span class="nf">then</span><span class="p">((</span><span class="nx">response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">response</span><span class="p">);</span>
        <span class="nc">SuccessToastify</span><span class="p">(</span><span class="dl">"</span><span class="s2">Customer has been updated successfully!</span><span class="dl">"</span><span class="p">);</span>
        <span class="nf">navigate</span><span class="p">(</span><span class="dl">"</span><span class="s2">/customers</span><span class="dl">"</span><span class="p">);</span>
      <span class="p">})</span>
      <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span>
      <span class="p">});</span>
  <span class="p">};</span>

  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">card</span><span class="dl">"</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">card-body</span><span class="dl">"</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">row</span><span class="dl">"</span><span class="o">&gt;</span>
          <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">col-md-3</span><span class="dl">"</span><span class="o">&gt;</span>
            <span class="o">&lt;</span><span class="nx">h3</span><span class="o">&gt;</span><span class="nx">Edit</span> <span class="nx">Customer</span><span class="o">&lt;</span><span class="sr">/h3</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="nx">form</span><span class="o">&gt;</span>
              <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-group</span><span class="dl">"</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">label</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">control-label</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">First</span> <span class="na">Name</span><span class="p">:</span> <span class="o">&lt;</span><span class="sr">/label</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">input</span>
                  <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-control</span><span class="dl">"</span>
                  <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">text</span><span class="dl">"</span>
                  <span class="nx">id</span><span class="o">=</span><span class="dl">"</span><span class="s2">firstName</span><span class="dl">"</span>
                  <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">firstName</span><span class="dl">"</span>
                  <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nx">customerObj</span><span class="p">.</span><span class="nx">firstName</span><span class="p">}</span>
                  <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="nx">handleInputChange</span><span class="p">}</span>
                <span class="o">&gt;&lt;</span><span class="sr">/input</span><span class="err">&gt;
</span>              <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>
              <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-group</span><span class="dl">"</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">label</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">control-label</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Last</span> <span class="na">Name</span><span class="p">:</span> <span class="o">&lt;</span><span class="sr">/label</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">input</span>
                  <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-control</span><span class="dl">"</span>
                  <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">text</span><span class="dl">"</span>
                  <span class="nx">id</span><span class="o">=</span><span class="dl">"</span><span class="s2">lastName</span><span class="dl">"</span>
                  <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">lastName</span><span class="dl">"</span>
                  <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nx">customerObj</span><span class="p">.</span><span class="nx">lastName</span><span class="p">}</span>
                  <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="nx">handleInputChange</span><span class="p">}</span>
                <span class="o">&gt;&lt;</span><span class="sr">/input</span><span class="err">&gt;
</span>              <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>
              <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-group</span><span class="dl">"</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">label</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">control-label</span><span class="dl">"</span><span class="o">&gt;</span><span class="na">Email</span><span class="p">:</span> <span class="o">&lt;</span><span class="sr">/label</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">input</span>
                  <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-control</span><span class="dl">"</span>
                  <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">text</span><span class="dl">"</span>
                  <span class="nx">id</span><span class="o">=</span><span class="dl">"</span><span class="s2">email</span><span class="dl">"</span>
                  <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">email</span><span class="dl">"</span>
                  <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nx">customerObj</span><span class="p">.</span><span class="nx">email</span><span class="p">}</span>
                  <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="nx">handleInputChange</span><span class="p">}</span>
                <span class="o">&gt;&lt;</span><span class="sr">/input</span><span class="err">&gt;
</span>              <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>
              <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-group</span><span class="dl">"</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">label</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">control-label</span><span class="dl">"</span><span class="o">&gt;</span><span class="na">Phone</span><span class="p">:</span> <span class="o">&lt;</span><span class="sr">/label</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">input</span>
                  <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-control</span><span class="dl">"</span>
                  <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">text</span><span class="dl">"</span>
                  <span class="nx">id</span><span class="o">=</span><span class="dl">"</span><span class="s2">phone</span><span class="dl">"</span>
                  <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">phone</span><span class="dl">"</span>
                  <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nx">customerObj</span><span class="p">.</span><span class="nx">phone</span><span class="p">}</span>
                  <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="nx">handleInputChange</span><span class="p">}</span>
                <span class="o">&gt;&lt;</span><span class="sr">/input</span><span class="err">&gt;
</span>              <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>
              <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-group</span><span class="dl">"</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">label</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">control-label</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Birth</span> <span class="na">Date</span><span class="p">:</span> <span class="o">&lt;</span><span class="sr">/label</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">input</span>
                  <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-control</span><span class="dl">"</span>
                  <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">date</span><span class="dl">"</span>
                  <span class="nx">id</span><span class="o">=</span><span class="dl">"</span><span class="s2">birthDate</span><span class="dl">"</span>
                  <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">birthDate</span><span class="dl">"</span>
                  <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nc">ConvertDateISOString</span><span class="p">(</span><span class="nx">customerObj</span><span class="p">.</span><span class="nx">birthDate</span><span class="p">)}</span>
                  <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="nx">handleInputChange</span><span class="p">}</span>
                <span class="o">&gt;&lt;</span><span class="sr">/input</span><span class="err">&gt;
</span>              <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="sr">/form</span><span class="err">&gt;
</span>
            <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-group</span><span class="dl">"</span><span class="o">&gt;</span>
              <span class="o">&lt;</span><span class="nx">input</span>
                <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">button</span><span class="dl">"</span>
                <span class="nx">value</span><span class="o">=</span><span class="dl">"</span><span class="s2">Edit Customer</span><span class="dl">"</span>
                <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">btn btn-primary</span><span class="dl">"</span>
                <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="nx">onSubmit</span><span class="p">}</span>
              <span class="o">&gt;&lt;</span><span class="sr">/input</span><span class="err">&gt;
</span>              <span class="o">||</span>
              <span class="o">&lt;</span><span class="nx">input</span>
                <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">button</span><span class="dl">"</span>
                <span class="nx">value</span><span class="o">=</span><span class="dl">"</span><span class="s2">Back to List</span><span class="dl">"</span>
                <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">btn btn-primary</span><span class="dl">"</span>
                <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="nx">backtoList</span><span class="p">}</span>
              <span class="o">&gt;&lt;</span><span class="sr">/input</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>          <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">EditCustomer</span><span class="p">;</span>
</code></pre></div></div>

<p><strong>Step 19: Modify App.js and configure route as follows.</strong></p>

<p><strong>App.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">logo</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./logo.svg</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="dl">"</span><span class="s2">./App.css</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">BrowserRouter</span><span class="p">,</span> <span class="nx">Route</span><span class="p">,</span> <span class="nx">Routes</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-router-dom</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="dl">"</span><span class="s2">bootstrap/dist/css/bootstrap.min.css</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">EditProduct</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./components/product/EditProduct</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">TopNav</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./layout/TopNav</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">CustomerList</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./components/customer/CustomerList</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">AddCustomer</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./components/customer/AddCustomer</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">EditCustomer</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./components/customer/EditCustomer</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">ToastContainer</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-toastify</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">ProductList</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./components/product/ProductsList</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">AddProduct</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./components/product/AddProduct</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">function</span> <span class="nf">App</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">BrowserRouter</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">TopNav</span> <span class="o">/&gt;</span>
      <span class="o">&lt;</span><span class="nx">Routes</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="dl">"</span><span class="s2">/</span><span class="dl">"</span> <span class="nx">element</span><span class="o">=</span><span class="p">{</span><span class="o">&lt;</span><span class="nx">ProductList</span> <span class="o">/&gt;</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="dl">"</span><span class="s2">/products</span><span class="dl">"</span> <span class="nx">element</span><span class="o">=</span><span class="p">{</span><span class="o">&lt;</span><span class="nx">ProductList</span> <span class="o">/&gt;</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="dl">"</span><span class="s2">/add-product</span><span class="dl">"</span> <span class="nx">element</span><span class="o">=</span><span class="p">{</span><span class="o">&lt;</span><span class="nx">AddProduct</span> <span class="o">/&gt;</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="dl">"</span><span class="s2">/edit-product/:id</span><span class="dl">"</span> <span class="nx">element</span><span class="o">=</span><span class="p">{</span><span class="o">&lt;</span><span class="nx">EditProduct</span> <span class="o">/&gt;</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="dl">"</span><span class="s2">/customers</span><span class="dl">"</span> <span class="nx">element</span><span class="o">=</span><span class="p">{</span><span class="o">&lt;</span><span class="nx">CustomerList</span> <span class="o">/&gt;</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="dl">"</span><span class="s2">/add-customer</span><span class="dl">"</span> <span class="nx">element</span><span class="o">=</span><span class="p">{</span><span class="o">&lt;</span><span class="nx">AddCustomer</span> <span class="o">/&gt;</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="dl">"</span><span class="s2">/edit-customer/:id</span><span class="dl">"</span> <span class="nx">element</span><span class="o">=</span><span class="p">{</span><span class="o">&lt;</span><span class="nx">EditCustomer</span> <span class="o">/&gt;</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="sr">/Routes</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="nx">ToastContainer</span> <span class="o">/&gt;</span>
    <span class="o">&lt;</span><span class="sr">/BrowserRouter</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">App</span><span class="p">;</span>
</code></pre></div></div>

<p><strong>Step 20: Fixed port to run front-end application.</strong></p>

<ul>
  <li>Create a file .env in root directory.</li>
  <li>Write the following code to fix the port. Now, application will run on 3002 port.</li>
</ul>

<p><strong>.env</strong></p>

<pre><code class="language-env">PORT=3002
</code></pre>

<p><strong>Step 21: Run front end application using the following command.</strong></p>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">npm</span> <span class="nf">start</span>
</code></pre></div></div>

<p>Run backend application and you will see the following screen. Now you can perform CRUD operation for both Product and Customer.</p>

<p><img src="/assets/images/posts/2023/rtk-output-01.png" alt="" /></p>

<p><strong><a href="https://github.com/mahedee/code-sample02/tree/master/react-redux-toolkit">Source code</a></strong></p>]]></content><author><name>Mahedee Hasan</name></author><category term="React" /><category term="Redux" /><category term="ASP.NET" /><category term="C#" /><category term="react" /><category term="csharp" /><category term="redux" /><category term="aspnet" /><summary type="html"><![CDATA[Redux is a popular state management library for JavaScript applications. In this article I will show you how to build a front-end application using redux toolkit with react and asp.net core.]]></summary></entry><entry><title type="html">Implementing Audit Trail in an ASP.NET Core Application with Entity Framework Plus</title><link href="https://mahedee.net//audit-trail-implementation-in-aspnet-core-app/" rel="alternate" type="text/html" title="Implementing Audit Trail in an ASP.NET Core Application with Entity Framework Plus" /><published>2023-06-19T00:00:00-03:00</published><updated>2023-06-19T00:00:00-03:00</updated><id>https://mahedee.net//audit-trail-implementation-in-aspnet-core-app</id><content type="html" xml:base="https://mahedee.net//audit-trail-implementation-in-aspnet-core-app/"><![CDATA[<p><strong>Introduction</strong></p>

<p>An audit trail is a chronological record of changes or activities performed in a system, providing a detailed history of events. In the context of software applications, including ASP.NET, an audit trail captures and logs various actions such as data modifications, user interactions, and system activities.</p>

<p><strong>Why it is important?</strong>
It helps organizations maintain a record of user activity within their systems, which can be used</p>

<ul>
  <li>To monitor user actions and detect suspicious activities</li>
  <li>To track changes and identify the root cause of issues</li>
  <li>To ensure compliance with regulatory requirements</li>
  <li>Records changes to critical data elements, ensuring accuracy and consistency</li>
  <li>Provides a detailed history of events for forensic analysis</li>
  <li>Meets legal and regulatory requirements by maintaining a detailed audit trail</li>
  <li>Offers historical data for reporting and analysis, supporting decision-making</li>
  <li>Frud detection etc.</li>
</ul>

<p>In this article, we will discuss how you can implement an audit trail feature using Entity Framework plus</p>

<p><strong>Tools and Technology Used</strong></p>

<ol>
  <li>ASP.net core Web API</li>
  <li>Visual C#</li>
  <li>Entity Framework Plus</li>
  <li>Entity Framework</li>
  <li>SQL Server</li>
</ol>

<p><strong>Step 1: Create a asp.net core web api project name AuditLog.API</strong></p>

<p><strong>Step 2: Install the following nuget packages in the project.</strong></p>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">Z.EntityFramework.Extensions.EFCore</span>
<span class="nf">Z.EntityFramework.Plus.EFCore</span>
<span class="nf">Microsoft.EntityFrameworkCore</span>
<span class="nf">Microsoft.EntityFrameworkCore.Design</span>
<span class="nf">Microsoft.EntityFrameworkCore.SqlServer</span>
<span class="nf">Microsoft.EntityFrameworkCore.Tools</span>

</code></pre></div></div>

<p><strong>Step 3: Create theww Model class name Customer, CustomAuditEntry, CustomAuditEntryProperty in Models folder.</strong></p>

<ul>
  <li>Customer class to store Customer Information</li>
  <li>CustomAuditEntry class to store Audit Entry Information</li>
  <li>CustomAuditEntryProperty class to store Audit Entry Property Information - means each properties new and old values</li>
</ul>

<p><strong>Customer.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">namespace</span> <span class="nn">AuditLog.API.Models</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Customer</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span><span class="p">?</span> <span class="n">FirstName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span><span class="p">?</span> <span class="n">LastName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>CustomAuditEntry.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Z.EntityFramework.Plus</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">AuditLog.API.Models</span>
<span class="p">{</span>
    <span class="c1">// CustomAuditEntry is a custom class that inherits from AuditEntry</span>
    <span class="c1">// It is used to add additional properties to the AuditEntry class</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CustomAuditEntry</span> <span class="p">:</span> <span class="n">AuditEntry</span>
    <span class="p">{</span>
        <span class="c1">// ApplicationName is a custom property that will be added to the AuditEntry table for storing the application name</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">AppplicationName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>CustomAuditEntryProperty.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Z.EntityFramework.Plus</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">AuditLog.API.Models</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CustomAuditEntryProperty</span> <span class="p">:</span> <span class="n">AuditEntryProperty</span>
    <span class="p">{</span>
        <span class="c1">// ApplicationName is a custom property that will be added to the AuditEntryProperty table</span>
        <span class="c1">// for storing the application name</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">AppplicationName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 4: Create a Context class name AuditLogDBContext in Persistence folder.</strong></p>

<p><strong>AuditLogDBContext.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">AuditLog.API.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Z.EntityFramework.Plus</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">AuditLog.API.Persistence</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">AuditLogDBContext</span> <span class="p">:</span> <span class="n">DbContext</span>
    <span class="p">{</span>
        <span class="c1">// AuditEntries and AuditEntryProperties are the tables that will be used to store the audit logs</span>
        <span class="k">public</span> <span class="n">DbSet</span><span class="p">&lt;</span><span class="n">CustomAuditEntry</span><span class="p">&gt;</span> <span class="n">AuditEntries</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="n">DbSet</span><span class="p">&lt;</span><span class="n">CustomAuditEntryProperty</span><span class="p">&gt;</span> <span class="n">AuditEntryProperties</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">// Customers is the table that will be used to store the customer data</span>
        <span class="k">public</span> <span class="n">DbSet</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="n">Customers</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">// AuditLogDBContext is the constructor that will be used to configure the audit log tables</span>
        <span class="k">public</span> <span class="nf">AuditLogDBContext</span><span class="p">(</span><span class="n">DbContextOptions</span><span class="p">&lt;</span><span class="n">AuditLogDBContext</span><span class="p">&gt;</span> <span class="n">options</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">// AutoSavePreAction is a delegate that will be used to save the audit logs to the database</span>
            <span class="c1">// It configures a pre-action to execute before the SaveChanges method is executed</span>
            <span class="n">AuditManager</span><span class="p">.</span><span class="n">DefaultConfiguration</span><span class="p">.</span><span class="n">AutoSavePreAction</span> <span class="p">=</span> <span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">audit</span><span class="p">)</span> <span class="p">=&gt;</span>
            <span class="p">{</span>
                <span class="p">((</span><span class="n">AuditLogDBContext</span><span class="p">)</span><span class="n">context</span><span class="p">).</span><span class="n">AuditEntries</span><span class="p">.</span><span class="nf">AddRange</span><span class="p">(</span><span class="n">audit</span><span class="p">.</span><span class="n">Entries</span><span class="p">.</span><span class="n">Cast</span><span class="p">&lt;</span><span class="n">CustomAuditEntry</span><span class="p">&gt;());</span>
            <span class="p">};</span>
        <span class="p">}</span>


    <span class="p">}</span>
<span class="p">}</span>


</code></pre></div></div>

<p><strong>Step 5: Add connection string in appsettings.json file</strong></p>

<p><strong>appsettings.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"Logging"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"LogLevel"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Default"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Information"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Microsoft.AspNetCore"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Warning"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"ConnectionStrings"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"DefaultConnection"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Server=localhost;Database=AuditLogEFPlusDB;User Id=sa;Password=myPassword;TrustServerCertificate=True;"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"AllowedHosts"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>
<p><strong>Step 6: Create two Interface ICustomerRepository and IReportingRepository in Repositories/Interfaces folder</strong></p>

<p><strong>ICustomerRepository.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">AuditLog.API.Models</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">AuditLog.API.Repositories.Interfaces</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">interface</span> <span class="nc">ICustomerRepository</span>
    <span class="p">{</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;&gt;</span> <span class="nf">GetCustomers</span><span class="p">();</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="nf">GetCustomer</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="nf">AddCustomer</span><span class="p">(</span><span class="n">Customer</span> <span class="n">customer</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="nf">UpdateCustomer</span><span class="p">(</span><span class="n">Customer</span> <span class="n">customer</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="nf">DeleteCustomer</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>IReportingRepository.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">AuditLog.API.Repositories.Interfaces</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">interface</span> <span class="nc">IReportingRepositry</span>
    <span class="p">{</span>
        <span class="c1">// Get all the changes for a particular entity response using Dynamic type</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="kt">dynamic</span><span class="p">&gt;&gt;</span> <span class="nf">GetChangeLogDynamic</span><span class="p">(</span><span class="kt">string</span> <span class="n">EntityName</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 7: Create two Repository class name CustomerRepository and ReportingRepository in Repositories/Implementations folder</strong></p>

<p><strong>CustomerRepository.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">AuditLog.API.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">AuditLog.API.Persistence</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">AuditLog.API.Repositories.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Z.EntityFramework.Plus</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">AuditLog.API.Repositories.Implementations</span>
<span class="p">{</span>

    <span class="k">public</span> <span class="k">class</span> <span class="nc">CustomerRepository</span> <span class="p">:</span> <span class="n">ICustomerRepository</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">AuditLogDBContext</span> <span class="n">_context</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">CustomerRepository</span><span class="p">(</span><span class="n">AuditLogDBContext</span> <span class="n">context</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_context</span> <span class="p">=</span> <span class="n">context</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;&gt;</span> <span class="nf">GetCustomers</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Customers</span><span class="p">.</span><span class="nf">ToListAsync</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="nf">GetCustomer</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Customers</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="nf">AddCustomer</span><span class="p">(</span><span class="n">Customer</span> <span class="n">customer</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">// Used for audit log</span>
            <span class="kt">var</span> <span class="n">audit</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Z</span><span class="p">.</span><span class="n">EntityFramework</span><span class="p">.</span><span class="n">Plus</span><span class="p">.</span><span class="nf">Audit</span><span class="p">();</span>
            <span class="n">audit</span><span class="p">.</span><span class="n">CreatedBy</span> <span class="p">=</span> <span class="s">"mahedee"</span><span class="p">;</span>

            <span class="n">_context</span><span class="p">.</span><span class="n">Customers</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">customer</span><span class="p">);</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="c1">// SaveChangesAsync(audit) will commit the changes to the database and save the audit logs</span>
                <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">(</span><span class="n">audit</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">DbUpdateException</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="nf">CustomerExists</span><span class="p">(</span><span class="n">customer</span><span class="p">.</span><span class="n">Id</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="k">return</span> <span class="k">null</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="k">else</span>
                <span class="p">{</span>
                    <span class="k">throw</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="n">customer</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="nf">UpdateCustomer</span><span class="p">(</span><span class="n">Customer</span> <span class="n">customer</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">audit</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Z</span><span class="p">.</span><span class="n">EntityFramework</span><span class="p">.</span><span class="n">Plus</span><span class="p">.</span><span class="nf">Audit</span><span class="p">();</span>
            <span class="n">audit</span><span class="p">.</span><span class="n">CreatedBy</span> <span class="p">=</span> <span class="s">"mahedee"</span><span class="p">;</span>
            <span class="kt">var</span> <span class="n">customerToUpdate</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Customers</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">customer</span><span class="p">.</span><span class="n">Id</span><span class="p">);</span>
            <span class="n">_context</span><span class="p">.</span><span class="nf">Entry</span><span class="p">(</span><span class="n">customerToUpdate</span><span class="p">).</span><span class="n">CurrentValues</span><span class="p">.</span><span class="nf">SetValues</span><span class="p">(</span><span class="n">customer</span><span class="p">);</span>

            <span class="k">try</span>
            <span class="p">{</span>
                <span class="c1">// SaveChangesAsync(audit) will commit the changes to the database and save the audit logs</span>
                <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">(</span><span class="n">audit</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">DbUpdateConcurrencyException</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(!</span><span class="nf">CustomerExists</span><span class="p">(</span><span class="n">customer</span><span class="p">.</span><span class="n">Id</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="k">return</span> <span class="k">null</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="k">else</span>
                <span class="p">{</span>
                    <span class="k">throw</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="n">customer</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="nf">DeleteCustomer</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">audit</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Z</span><span class="p">.</span><span class="n">EntityFramework</span><span class="p">.</span><span class="n">Plus</span><span class="p">.</span><span class="nf">Audit</span><span class="p">();</span>
            <span class="n">audit</span><span class="p">.</span><span class="n">CreatedBy</span> <span class="p">=</span> <span class="s">"mahedee"</span><span class="p">;</span>

            <span class="kt">var</span> <span class="n">customer</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Customers</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">customer</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="k">null</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="k">try</span>
            <span class="p">{</span>
                <span class="n">_context</span><span class="p">.</span><span class="n">Customers</span><span class="p">.</span><span class="nf">Remove</span><span class="p">(</span><span class="n">customer</span><span class="p">);</span>
                <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">(</span><span class="n">audit</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="n">customer</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="kt">bool</span> <span class="nf">CustomerExists</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">_context</span><span class="p">.</span><span class="n">Customers</span><span class="p">.</span><span class="nf">Any</span><span class="p">(</span><span class="n">e</span> <span class="p">=&gt;</span> <span class="n">e</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">id</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

<span class="p">}</span>

</code></pre></div></div>

<p><strong>ReportingRepository.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">AuditLog.API.Persistence</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">AuditLog.API.Repositories.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">AuditLog.API.Repositories.Implementations</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">ReportingRepository</span> <span class="p">:</span> <span class="n">IReportingRepositry</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">AuditLogDBContext</span> <span class="n">_context</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">ReportingRepository</span><span class="p">(</span><span class="n">AuditLogDBContext</span> <span class="n">context</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_context</span> <span class="p">=</span> <span class="n">context</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="kt">dynamic</span><span class="p">&gt;&gt;</span> <span class="nf">GetChangeLogDynamic</span><span class="p">(</span><span class="kt">string</span> <span class="n">EntityName</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">String</span> <span class="n">EntityTypeName</span> <span class="p">=</span> <span class="n">EntityName</span><span class="p">;</span>

            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="n">_context</span><span class="p">.</span><span class="n">AuditEntries</span>
            <span class="p">.</span><span class="nf">Where</span><span class="p">(</span><span class="n">a</span> <span class="p">=&gt;</span> <span class="n">a</span><span class="p">.</span><span class="n">EntityTypeName</span> <span class="p">==</span> <span class="n">EntityTypeName</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">Join</span><span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">AuditEntryProperties</span><span class="p">,</span>
            <span class="n">entry</span> <span class="p">=&gt;</span> <span class="n">entry</span><span class="p">.</span><span class="n">AuditEntryID</span><span class="p">,</span>
            <span class="n">property</span> <span class="p">=&gt;</span> <span class="n">property</span><span class="p">.</span><span class="n">AuditEntryID</span><span class="p">,</span>
                <span class="p">(</span><span class="n">entry</span><span class="p">,</span> <span class="n">property</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="k">new</span>
                <span class="p">{</span>
                    <span class="n">AuditEntryId</span> <span class="p">=</span> <span class="n">entry</span><span class="p">.</span><span class="n">AuditEntryID</span><span class="p">,</span>
                    <span class="n">EntityTypeName</span> <span class="p">=</span> <span class="n">entry</span><span class="p">.</span><span class="n">EntityTypeName</span><span class="p">,</span>
                    <span class="n">State</span> <span class="p">=</span> <span class="n">entry</span><span class="p">.</span><span class="n">State</span><span class="p">,</span>
                    <span class="n">StateName</span> <span class="p">=</span> <span class="n">entry</span><span class="p">.</span><span class="n">StateName</span><span class="p">,</span>
                    <span class="n">PropertyName</span> <span class="p">=</span> <span class="n">property</span><span class="p">.</span><span class="n">PropertyName</span><span class="p">,</span>
                    <span class="n">OldValue</span> <span class="p">=</span> <span class="n">property</span><span class="p">.</span><span class="n">OldValue</span><span class="p">,</span>
                    <span class="n">NewValue</span> <span class="p">=</span> <span class="n">property</span><span class="p">.</span><span class="n">NewValue</span><span class="p">,</span>
                    <span class="n">CreatedBy</span> <span class="p">=</span> <span class="n">entry</span><span class="p">.</span><span class="n">CreatedBy</span><span class="p">,</span>
                    <span class="n">CreatedDate</span> <span class="p">=</span> <span class="n">entry</span><span class="p">.</span><span class="n">CreatedDate</span>
                <span class="p">}</span>
                                                                                       <span class="p">)</span>
            <span class="p">.</span><span class="nf">OrderBy</span><span class="p">(</span><span class="n">result</span> <span class="p">=&gt;</span> <span class="n">result</span><span class="p">.</span><span class="n">CreatedDate</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">Select</span><span class="p">(</span><span class="n">result</span> <span class="p">=&gt;</span> <span class="k">new</span>
            <span class="p">{</span>
                <span class="n">result</span><span class="p">.</span><span class="n">AuditEntryId</span><span class="p">,</span>
                <span class="n">result</span><span class="p">.</span><span class="n">EntityTypeName</span><span class="p">,</span>
                <span class="n">result</span><span class="p">.</span><span class="n">State</span><span class="p">,</span>
                <span class="n">result</span><span class="p">.</span><span class="n">StateName</span><span class="p">,</span>
                <span class="n">result</span><span class="p">.</span><span class="n">PropertyName</span><span class="p">,</span>
                <span class="n">result</span><span class="p">.</span><span class="n">OldValue</span><span class="p">,</span>
                <span class="n">result</span><span class="p">.</span><span class="n">NewValue</span><span class="p">,</span>
                <span class="n">result</span><span class="p">.</span><span class="n">CreatedBy</span><span class="p">,</span>
                <span class="n">result</span><span class="p">.</span><span class="n">CreatedDate</span>
            <span class="p">});</span>

            <span class="k">return</span> <span class="k">await</span> <span class="n">result</span><span class="p">.</span><span class="nf">ToListAsync</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 8: Create two interfaces name ICustomerService and IReportingService in Services/Interfaces folder</strong></p>

<p><strong>ICustomerService.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">AuditLog.API.Models</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">AuditLog.API.Services.Interfaces</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">interface</span> <span class="nc">ICustomerService</span>
    <span class="p">{</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;&gt;</span> <span class="nf">GetCustomers</span><span class="p">();</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="nf">GetCustomer</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="nf">AddCustomer</span><span class="p">(</span><span class="n">Customer</span> <span class="n">customer</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="nf">UpdateCustomer</span><span class="p">(</span><span class="n">Customer</span> <span class="n">customer</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="nf">DeleteCustomer</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>IReportingService.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">namespace</span> <span class="nn">AuditLog.API.Services.Interfaces</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">interface</span> <span class="nc">IReportingService</span>
    <span class="p">{</span>
        
        <span class="c1">// Get all the changes for a particular entity response using Dynamic type</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="kt">dynamic</span><span class="p">&gt;&gt;</span> <span class="nf">GetChangeLogDynamic</span><span class="p">(</span><span class="kt">string</span> <span class="n">EntityName</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 9: Create 2 service class name CustomerService and ReportingService in Services/Implementation folder</strong></p>

<p><strong>CustomerService.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">AuditLog.API.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">AuditLog.API.Repositories.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">AuditLog.API.Services.Interfaces</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">AuditLog.API.Services.Implementations</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CustomerService</span> <span class="p">:</span> <span class="n">ICustomerService</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">ICustomerRepository</span> <span class="n">_customerRepository</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">CustomerService</span><span class="p">(</span><span class="n">ICustomerRepository</span> <span class="n">customerRepository</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_customerRepository</span> <span class="p">=</span> <span class="n">customerRepository</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;&gt;</span> <span class="nf">GetCustomers</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_customerRepository</span><span class="p">.</span><span class="nf">GetCustomers</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="nf">GetCustomer</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_customerRepository</span><span class="p">.</span><span class="nf">GetCustomer</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="nf">AddCustomer</span><span class="p">(</span><span class="n">Customer</span> <span class="n">customer</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">addedCustomer</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_customerRepository</span><span class="p">.</span><span class="nf">AddCustomer</span><span class="p">(</span><span class="n">customer</span><span class="p">);</span>
            <span class="k">return</span> <span class="n">addedCustomer</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="nf">UpdateCustomer</span><span class="p">(</span><span class="n">Customer</span> <span class="n">customer</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">updatedCustomer</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_customerRepository</span><span class="p">.</span><span class="nf">UpdateCustomer</span><span class="p">(</span><span class="n">customer</span><span class="p">);</span>
            <span class="k">return</span> <span class="n">updatedCustomer</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="nf">DeleteCustomer</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">deletedCustomer</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_customerRepository</span><span class="p">.</span><span class="nf">DeleteCustomer</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
            <span class="k">return</span> <span class="n">deletedCustomer</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>ReportingService.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">AuditLog.API.Repositories.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">AuditLog.API.Services.Interfaces</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">AuditLog.API.Services.Implementations</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">ReportingService</span> <span class="p">:</span> <span class="n">IReportingService</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IReportingRepositry</span> <span class="n">_reportingRepositry</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">ReportingService</span><span class="p">(</span><span class="n">IReportingRepositry</span> <span class="n">reportingRepositry</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_reportingRepositry</span> <span class="p">=</span> <span class="n">reportingRepositry</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="kt">dynamic</span><span class="p">&gt;&gt;</span> <span class="nf">GetChangeLogDynamic</span><span class="p">(</span><span class="kt">string</span> <span class="n">EntityName</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_reportingRepositry</span><span class="p">.</span><span class="nf">GetChangeLogDynamic</span><span class="p">(</span><span class="n">EntityName</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 10: Configure Program class as follows.</strong></p>

<p><strong>Program.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">AuditLog.API.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">AuditLog.API.Persistence</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">AuditLog.API.Repositories.Implementations</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">AuditLog.API.Repositories.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">AuditLog.API.Services.Implementations</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">AuditLog.API.Services.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Z.EntityFramework.Plus</span><span class="p">;</span>

<span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="n">WebApplication</span><span class="p">.</span><span class="nf">CreateBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>

<span class="c1">// Add services to the container.</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">();</span>
<span class="c1">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddEndpointsApiExplorer</span><span class="p">();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddSwaggerGen</span><span class="p">();</span>


<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddDbContext</span><span class="p">&lt;</span><span class="n">AuditLogDBContext</span><span class="p">&gt;(</span><span class="n">options</span> <span class="p">=&gt;</span>
    <span class="n">options</span><span class="p">.</span><span class="nf">UseSqlServer</span><span class="p">(</span>
        <span class="n">builder</span><span class="p">.</span><span class="n">Configuration</span><span class="p">.</span><span class="nf">GetConnectionString</span><span class="p">(</span><span class="s">"DefaultConnection"</span><span class="p">))</span>
<span class="p">);</span>


<span class="c1">// For Audit Log</span>

<span class="n">AuditManager</span><span class="p">.</span><span class="n">DefaultConfiguration</span>
<span class="p">.</span><span class="n">AuditEntryFactory</span> <span class="p">=</span> <span class="n">args</span> <span class="p">=&gt;</span>
   <span class="k">new</span> <span class="nf">CustomAuditEntry</span><span class="p">()</span> <span class="p">{</span> <span class="n">AppplicationName</span> <span class="p">=</span> <span class="s">"AuditLogApp"</span> <span class="p">};</span>

<span class="n">AuditManager</span><span class="p">.</span><span class="n">DefaultConfiguration</span>
            <span class="p">.</span><span class="n">AuditEntryPropertyFactory</span> <span class="p">=</span> <span class="n">args</span> <span class="p">=&gt;</span>
                <span class="k">new</span> <span class="nf">CustomAuditEntryProperty</span><span class="p">()</span> <span class="p">{</span> <span class="n">AppplicationName</span> <span class="p">=</span> <span class="s">"AuditLogApp"</span> <span class="p">};</span>

<span class="n">AuditManager</span><span class="p">.</span><span class="n">DefaultConfiguration</span><span class="p">.</span><span class="n">AutoSavePreAction</span> <span class="p">=</span> <span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">audit</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="p">((</span><span class="n">AuditLogDBContext</span><span class="p">)</span><span class="n">context</span><span class="p">).</span><span class="n">AuditEntries</span><span class="p">.</span><span class="nf">AddRange</span><span class="p">(</span><span class="n">audit</span><span class="p">.</span><span class="n">Entries</span><span class="p">.</span><span class="n">Cast</span><span class="p">&lt;</span><span class="n">CustomAuditEntry</span><span class="p">&gt;());</span>
<span class="p">};</span>


<span class="kt">string</span> <span class="n">connectionString</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="n">Configuration</span><span class="p">.</span><span class="nf">GetConnectionString</span><span class="p">(</span><span class="s">"DefaultConnection"</span><span class="p">);</span>
<span class="c1">//builder.Services.AddTransient(_ =&gt; new DBConnector(connectionString));</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddTransient</span><span class="p">&lt;</span><span class="n">ICustomerRepository</span><span class="p">,</span> <span class="n">CustomerRepository</span><span class="p">&gt;();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddTransient</span><span class="p">&lt;</span><span class="n">ICustomerService</span><span class="p">,</span> <span class="n">CustomerService</span><span class="p">&gt;();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddTransient</span><span class="p">&lt;</span><span class="n">IReportingRepositry</span><span class="p">,</span> <span class="n">ReportingRepository</span><span class="p">&gt;();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddTransient</span><span class="p">&lt;</span><span class="n">IReportingService</span><span class="p">,</span> <span class="n">ReportingService</span><span class="p">&gt;();</span>


<span class="kt">var</span> <span class="n">app</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

<span class="c1">// Configure the HTTP request pipeline.</span>
<span class="k">if</span> <span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">Environment</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
<span class="p">{</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwagger</span><span class="p">();</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwaggerUI</span><span class="p">();</span>
<span class="p">}</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseHttpsRedirection</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseAuthorization</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">MapControllers</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>


</code></pre></div></div>

<p><strong>Step 11: Create two Controller class CustomersController and ReportingController in Controllers folder.</strong></p>

<p><strong>CustomersController.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">AuditLog.API.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">AuditLog.API.Services.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">AuditLog.API.Controllers</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
    <span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CustomersController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">ICustomerService</span> <span class="n">_customerService</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">CustomersController</span><span class="p">(</span><span class="n">ICustomerService</span> <span class="n">customerService</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_customerService</span> <span class="p">=</span> <span class="n">customerService</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/Customers</span>
        <span class="p">[</span><span class="n">HttpGet</span><span class="p">]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;&gt;</span> <span class="nf">GetCustomers</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_customerService</span><span class="p">.</span><span class="nf">GetCustomers</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/Customers/5</span>
        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="nf">GetCustomer</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_customerService</span><span class="p">.</span><span class="nf">GetCustomer</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">// PUT: api/Customers/5</span>
        <span class="p">[</span><span class="nf">HttpPut</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">?&gt;</span> <span class="nf">PutCustomer</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="n">Customer</span> <span class="n">customer</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">id</span> <span class="p">!=</span> <span class="n">customer</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
            <span class="p">{</span>
               <span class="k">return</span> <span class="k">null</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="k">await</span> <span class="n">_customerService</span><span class="p">.</span><span class="nf">UpdateCustomer</span><span class="p">(</span><span class="n">customer</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">DbUpdateConcurrencyException</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(!</span><span class="nf">CustomerExists</span><span class="p">(</span><span class="n">id</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="k">return</span> <span class="k">null</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="k">else</span>
                <span class="p">{</span>
                    <span class="k">throw</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="c1">// POST: api/Customers</span>
        <span class="p">[</span><span class="n">HttpPost</span><span class="p">]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;&gt;</span> <span class="nf">PostCustomer</span><span class="p">(</span><span class="n">Customer</span> <span class="n">customer</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_customerService</span><span class="p">.</span><span class="nf">AddCustomer</span><span class="p">(</span><span class="n">customer</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">// DELETE: api/Customers/5</span>
        <span class="p">[</span><span class="nf">HttpDelete</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="nf">DeleteCustomer</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_customerService</span><span class="p">.</span><span class="nf">DeleteCustomer</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="kt">bool</span> <span class="nf">CustomerExists</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">_customerService</span><span class="p">.</span><span class="nf">GetCustomer</span><span class="p">(</span><span class="n">id</span><span class="p">)</span> <span class="p">==</span> <span class="k">null</span> <span class="p">?</span> <span class="k">false</span> <span class="p">:</span> <span class="k">true</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>


</code></pre></div></div>

<p><strong>ReportingController.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">AuditLog.API.Services.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">AuditLog.API.Controllers</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
    <span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">ReportingController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IReportingService</span> <span class="n">_reportingService</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">ReportingController</span><span class="p">(</span><span class="n">IReportingService</span> <span class="n">reportingService</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_reportingService</span> <span class="p">=</span> <span class="n">reportingService</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/AuditTrailReport</span>
        <span class="p">[</span><span class="n">HttpGet</span><span class="p">]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">Index</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/AuditTrailReport/{EntityName}</span>
        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"GetChangeLog/{EntityName}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">GetChangeLog</span><span class="p">(</span><span class="kt">string</span> <span class="n">EntityName</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="k">await</span> <span class="n">_reportingService</span><span class="p">.</span><span class="nf">GetChangeLogDynamic</span><span class="p">(</span><span class="n">EntityName</span><span class="p">));</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>
<p><strong>Step 12: Create migration and update database</strong></p>
<ul>
  <li>Open Package Manager Console (PMC).</li>
  <li>Select the project name AuditLog.API</li>
  <li>Run the following command in PMC</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">Add-Migration</span> <span class="nf">InitialCreate</span>
</code></pre></div></div>
<p>This will create a new migration file named “InitialCreate” under the Migrations folder of your</p>

<ul>
  <li>Run the following command in PMC</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">Update-Database</span>
</code></pre></div></div>

<ul>
  <li>You will see three table name Customers, AuditEntry, AuditEntryProperty are created in the database</li>
</ul>

<p><strong>Step 13: Run the application and check the swagger.</strong></p>
<ul>
  <li>Now run application create, update and delete Customer entity using swagger</li>
  <li>You will see audit trail logs in AuditEntry and AuditEntryProperty table.</li>
  <li>You can also view a sample report using Reporting controller. In GetChangeLog end point use “Customer” as entity name.</li>
</ul>

<p><img src="/assets/images/posts/2023/ef-audit-log.png" alt="" />
<strong><a href="https://github.com/mahedee/code-sample02/tree/master/AuditLogEFPlus">Source code</a></strong></p>]]></content><author><name>Mahedee Hasan</name></author><category term="ASP.NET" /><category term="ASP.NET Core" /><category term="C#" /><category term="Web API" /><category term="csharp" /><category term="aspnet" /><category term="aspnetcore" /><category term="webapi" /><summary type="html"><![CDATA[Unlock the secrets of implementing a robust audit trail in your ASP.NET application with my detailed step-by-step guide. From configure to execution, discover how to seamlessly integrate an audit trail for comprehensive monitoring and enhanced data security.]]></summary></entry><entry><title type="html">Setup your own docker private registry in windows machine</title><link href="https://mahedee.net//setup-docker-private-registry/" rel="alternate" type="text/html" title="Setup your own docker private registry in windows machine" /><published>2023-05-05T00:00:00-03:00</published><updated>2023-05-05T00:00:00-03:00</updated><id>https://mahedee.net//setup-docker-private-registry</id><content type="html" xml:base="https://mahedee.net//setup-docker-private-registry/"><![CDATA[<p>A Docker private registry is a centralized repository for storing and managing Docker images in a private and secure environment. Docker images are lightweight, standalone, and executable packages that contain all the necessary components to run a software application, including the code, runtime, libraries, and system tools. Instead of relying on public Docker Hub repositories, a private registry allows organizations to host their own Docker images internally.</p>

<p>Key features and benefits of a Docker private registry include:</p>

<ol>
  <li>
    <p><strong>Security:</strong> Keep sensitive or proprietary Docker images within the organization’s network, preventing unauthorized access.</p>
  </li>
  <li>
    <p><strong>Control:</strong> Maintain control over the distribution and versioning of Docker images, ensuring consistency across development, testing, and production environments.</p>
  </li>
  <li>
    <p><strong>Performance:</strong> Reduce image pull times by hosting images locally, especially beneficial in environments with limited or intermittent internet connectivity.</p>
  </li>
  <li>
    <p><strong>Customization:</strong> Tailor the registry to specific organizational requirements, adding authentication, access controls, and other features as needed.</p>
  </li>
  <li>
    <p><strong>Compliance:</strong> Adhere to data protection and regulatory requirements by managing and securing Docker images internally.</p>
  </li>
</ol>

<p><strong>Required Tools and Technologies</strong></p>
<ul>
  <li>Docker desktop</li>
  <li><a href="https://hub.docker.com/_/registry">Docker Registry</a></li>
  <li><a href="https://hub.docker.com/r/konradkleine/docker-registry-frontend/tags">Docker Registry front end</a></li>
</ul>

<p><strong>How to setup docker private registry</strong></p>

<ol>
  <li>
    <p>Install docker desktop in your windows machine. You can download it from <a href="https://www.docker.com/products/docker-desktop">here</a></p>
  </li>
  <li>
    <p>Pull registry and, docker-registry-frontend images and then run in a container. You can pull images and run images in a container using separate command. But here I use a docker compose file to run both images in the container using a single command.</p>
  </li>
</ol>

<p>Here, registry image is used for storing and distributing of container images and artifacts and docker-registry-frontend is used as a frontend for the private registry.</p>

<p><strong>docker-compose.yaml</strong></p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Version of the Docker Compose file</span>
<span class="na">version</span><span class="pi">:</span> <span class="s2">"</span><span class="s">3.7"</span>

<span class="c1"># Definition of services in the Docker Compose file</span>
<span class="na">services</span><span class="pi">:</span>

  <span class="c1"># Service for the Docker Registry host</span>
  <span class="na">docker-registry-host</span><span class="pi">:</span>
    <span class="c1"># Docker image to be used for the service</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">registry</span>
    
    <span class="c1"># Port mapping - maps port 5000 on the host to port 5000 on the container</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">5000:5000</span>
    
    <span class="c1"># Volume mapping - mounts the local ./registry-data directory to /var/lib/registry in the container</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">./registry-data:/var/lib/registry</span>
    
    <span class="c1"># Network configuration - connects the service to the 'docker-registry' network</span>
    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">docker-registry</span>

  <span class="c1"># Service for the Docker Registry web UI</span>
  <span class="na">docker-registry-host-web-ui</span><span class="pi">:</span>
    <span class="c1"># Docker image to be used for the service</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">konradkleine/docker-registry-frontend:v2</span>
    
    <span class="c1"># Environment variables for the service</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="na">ENV_DOCKER_REGISTRY_HOST</span><span class="pi">:</span> <span class="s">docker-registry-host</span>
      <span class="na">ENV_DOCKER_REGISTRY_PORT</span><span class="pi">:</span> <span class="m">5000</span>
    
    <span class="c1"># Port mapping - maps port 8080 on the host to port 80 on the container</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">8088:80</span>
    
    <span class="c1"># Network configuration - connects the service to the 'docker-registry' network</span>
    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">docker-registry</span>

<span class="c1"># Definition of a custom network named 'docker-registry'</span>
<span class="na">networks</span><span class="pi">:</span>
  <span class="na">docker-registry</span><span class="pi">:</span>

</code></pre></div></div>

<ul>
  <li>Now open windows terminal and go the directory where <code class="language-plaintext highlighter-rouge">docker-compose.yaml</code> file resides and run the following command.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">docker-compose</span> <span class="nf">up</span>
</code></pre></div></div>

<ul>
  <li>Now you can access the docker registry frontend using the following url and you will see the following output.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">http:</span><span class="err">/</span><span class="nv">/localhost:8088/home</span>
</code></pre></div></div>

<p><img src="/assets/images/posts/2023/docker-registry01.png" alt="" /></p>

<p><strong>Create a sample ASP.NET Core application and push images to the private registry</strong></p>

<ul>
  <li>
    <p>Create a sample ASP.NET Core Web API application name - PrivateRegistryDemo</p>
  </li>
  <li>
    <p>To see swagger in the release mode just comment out the following code in Program.cs file.</p>
  </li>
</ul>

<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code>     <span class="c1">// Configure the HTTP request pipeline.</span>
     <span class="c1">//if (app.Environment.IsDevelopment())</span>
     <span class="c1">//{</span>
         <span class="n">app</span><span class="p">.</span><span class="nf">UseSwagger</span><span class="p">();</span>
         <span class="n">app</span><span class="p">.</span><span class="nf">UseSwaggerUI</span><span class="p">();</span>
     <span class="c1">//}</span>

</code></pre></div></div>

<ul>
  <li>Add a docker file in the project and add following contents</li>
</ul>

<div class="language-docker highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#See https://aka.ms/customizecontainer to learn how to customize your debug container and how Visual Studio uses this Dockerfile to build your images for faster debugging.</span>

<span class="k">FROM</span><span class="w"> </span><span class="s">mcr.microsoft.com/dotnet/aspnet:8.0</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">base</span>
<span class="k">USER</span><span class="s"> app</span>
<span class="k">WORKDIR</span><span class="s"> /app</span>
<span class="k">EXPOSE</span><span class="s"> 8080</span>
<span class="k">EXPOSE</span><span class="s"> 8081</span>

<span class="k">FROM</span><span class="w"> </span><span class="s">mcr.microsoft.com/dotnet/sdk:8.0</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">build</span>
<span class="k">ARG</span><span class="s"> BUILD_CONFIGURATION=Release</span>
<span class="k">WORKDIR</span><span class="s"> /src</span>
<span class="k">COPY</span><span class="s"> ["PrivateRegistryDemo.csproj", "./"]</span>
<span class="k">RUN </span>dotnet restore <span class="s2">"./PrivateRegistryDemo.csproj"</span>
<span class="k">COPY</span><span class="s"> . .</span>
<span class="k">WORKDIR</span><span class="s"> "/src/."</span>
<span class="k">RUN </span>dotnet build <span class="s2">"PrivateRegistryDemo.csproj"</span> <span class="nt">-c</span> <span class="nv">$BUILD_CONFIGURATION</span> <span class="nt">-o</span> /app/build

<span class="k">FROM</span><span class="w"> </span><span class="s">build</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">publish</span>
<span class="k">ARG</span><span class="s"> BUILD_CONFIGURATION=Release</span>
<span class="k">RUN </span>dotnet publish <span class="s2">"PrivateRegistryDemo.csproj"</span> <span class="nt">-c</span> <span class="nv">$BUILD_CONFIGURATION</span> <span class="nt">-o</span> /app/publish /p:UseAppHost<span class="o">=</span><span class="nb">false</span>

<span class="k">FROM</span><span class="w"> </span><span class="s">base</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">final</span>
<span class="k">WORKDIR</span><span class="s"> /app</span>
<span class="k">COPY</span><span class="s"> --from=publish /app/publish .</span>
<span class="k">ENTRYPOINT</span><span class="s"> ["dotnet", "PrivateRegistryDemo.dll"]</span>
</code></pre></div></div>

<ul>
  <li>Now open the terminal and go to the project directory and run the following command to build the docker image.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">docker</span> <span class="nf">build</span> <span class="nf">-t</span> <span class="nf">privateregistrydemo:1.0.0</span> <span class="nf">.</span>
</code></pre></div></div>

<ul>
  <li>Now run the following command to tag the image.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">docker</span> <span class="nf">tag</span> <span class="nf">privateregistrydemo:1.0.0</span> <span class="nf">localhost:5000</span><span class="nv">/privateregistrydemo</span>
</code></pre></div></div>

<ul>
  <li>Now run the following command to push the image to the private registry.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">docker</span> <span class="nf">push</span> <span class="nf">localhost:5000</span><span class="nv">/privateregistrydemo</span>
</code></pre></div></div>

<ul>
  <li>
    <p>Now you can see the pushed image in the private registry frontend.
<img src="/assets/images/posts/2023/docker-registry02.png" alt="" /></p>
  </li>
  <li>
    <p>Now you can pull the image from the private registry using the following command.</p>
  </li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">docker</span> <span class="nf">pull</span> <span class="nf">localhost:5000</span><span class="nv">/privateregistrydemo</span>
</code></pre></div></div>

<ul>
  <li>Now you can run the image in a container using the following command.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">docker</span> <span class="nb">run</span> <span class="nf">-dp</span> <span class="nf">8080:8080</span> <span class="nf">--name</span> <span class="nf">private-registry-demo</span> <span class="nf">localhost:5000</span><span class="nv">/privateregistrydemo:latest</span>
</code></pre></div></div>

<ul>
  <li>Now you can access the application using the following url.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">http:</span><span class="err">/</span><span class="nv">/localhost:8080/swagger/index.html</span>
</code></pre></div></div>
<p>or</p>
<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">http:</span><span class="err">/</span><span class="nv">/localhost:8080/WeatherForecast</span>
</code></pre></div></div>

<ul>
  <li>Alternative: You can create your own private Docker registry with Portus using Ubuntu.</li>
</ul>

<p><a href="https://github.com/mahedee/code-sample02/tree/main/PrivateRegistryDemo">Source Code</a></p>]]></content><author><name>Mahedee Hasan</name></author><category term="Docker" /><category term="DevOps" /><category term="docker" /><category term="devops" /><summary type="html"><![CDATA[Discover step-by-step instructions to set up your own Docker private registry on a Windows machine. Enhance your development workflow, improve container management, and boost security with a personalized Docker registry solution tailored to your Windows environment]]></summary></entry><entry><title type="html">Getting started Python using Visual Studio Code</title><link href="https://mahedee.net//getting-started-python-using-vs-code/" rel="alternate" type="text/html" title="Getting started Python using Visual Studio Code" /><published>2023-04-30T00:00:00-03:00</published><updated>2023-04-30T00:00:00-03:00</updated><id>https://mahedee.net//getting-started-python-using-vs-code</id><content type="html" xml:base="https://mahedee.net//getting-started-python-using-vs-code/"><![CDATA[<h3 id="check-python-is-already-installed-or-not">Check Python is already installed or not</h3>
<ul>
  <li>To check if you have python installed on a Windows PC. Go to the Terminal and type <code class="language-plaintext highlighter-rouge">python --version</code></li>
  <li>If Python is installed, you will see the version of Python installed.</li>
  <li>Otherwise, install python using the following steps.</li>
</ul>

<h3 id="installing-python">Installing Python</h3>
<ul>
  <li>Download and install Python from the official website: <a href="https://www.python.org/downloads/">https://www.python.org/downloads/</a></li>
  <li>Check python version using the following command in the terminal.
    <div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">python</span> <span class="nf">--version</span>
</code></pre></div>    </div>
  </li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Sample Output:
Python 3.12.0
</code></pre></div></div>
<ul>
  <li>Install the Python extension for Visual Studio Code: <a href="https://marketplace.
visualstudio.com/items?itemName=ms-python.python">https://marketplace.visual
studio.com/items?itemName=ms-python.python</a></li>
</ul>

<h3 id="setting-up-the-project">Setting up the project</h3>
<ul>
  <li>Open Visual Studio Code</li>
  <li>Click on the “File” menu and select “New File”</li>
  <li>Save the file with the extension “.py”. For example - fibonacc.py</li>
  <li>Write your Python code in the file. Here I write the following code.</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="c1"># The function fib(n) is defined. This function generates the Fibonacci sequence up to the nth term.
# The function takes an integer n as input and prints the first n Fibonacci numbers separated by spaces.
</span>
<span class="k">def</span> <span class="nf">fib</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="n">a</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">b</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>

        <span class="c1"># Run a loop from 2 to n
</span>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="n">n</span><span class="p">):</span>
            <span class="n">c</span> <span class="o">=</span> <span class="n">a</span><span class="o">+</span><span class="n">b</span>
            <span class="n">a</span> <span class="o">=</span> <span class="n">b</span>
            <span class="n">b</span> <span class="o">=</span> <span class="n">c</span>
            <span class="nf">print</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>

<span class="n">n</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="nf">input</span><span class="p">(</span><span class="sh">"</span><span class="s">Enter the number of fibonacci numbers you want to print </span><span class="sh">"</span><span class="p">))</span>
<span class="nf">fib</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>Save the file</li>
  <li>Open the command palette (Ctrl+Shift+P)</li>
  <li>Type “Python: Create Terminal”</li>
  <li>Click on the terminal that opens</li>
  <li>Type <code class="language-plaintext highlighter-rouge">python fibonacci.py</code> in the terminal. You will see the ouput.</li>
</ul>

<p>Or.</p>

<ul>
  <li>Run the application using <code class="language-plaintext highlighter-rouge">Run</code> button on upper right corner of Visual Studio Code.</li>
</ul>

<p>Or.</p>

<ul>
  <li>Set a debug point and click Debug python file using upper right corner of Visual Studio Code.</li>
</ul>]]></content><author><name>Mahedee Hasan</name></author><category term="Python" /><category term="VS Code" /><category term="python" /><category term="vscode" /><summary type="html"><![CDATA[Getting started Python using Visual Studio Code. Here you will see how to install python in windows and run first application using python on visual studio code]]></summary></entry><entry><title type="html">Singleton design pattern using C#</title><link href="https://mahedee.net//singleton-design-pattern/" rel="alternate" type="text/html" title="Singleton design pattern using C#" /><published>2023-04-15T00:00:00-03:00</published><updated>2023-04-15T00:00:00-03:00</updated><id>https://mahedee.net//singleton-design-pattern</id><content type="html" xml:base="https://mahedee.net//singleton-design-pattern/"><![CDATA[<p><strong>Design Pattern</strong></p>

<p>A software design pattern is a general, reusable solution to a commonly occurring problem in software design. Design patterns are typically documented in a standardized format, making it easy for developers to understand and apply them to their own software projects. It is like a template to solve a problem.</p>

<p><strong>Singleton Design Pattern</strong></p>

<p>The Singleton pattern is a design pattern that restrict to create object more than once and provides a global point of access to that instance. This pattern is useful when you want to ensure that only one instance of a class is created and used throughout the entire application.</p>

<p>The Singleton pattern is used when you want to:</p>

<ul>
  <li>Ensure that only one instance of a class is created.</li>
  <li>Provide a single point of access to that instance.</li>
  <li>Manage a shared resource.</li>
</ul>

<p>Some downside of implementing the Singleton Pattern are</p>

<ul>
  <li>It can make unit testing more challenging since it introduces a global state to the application.</li>
  <li>It limiting potential parallelism in the program through the use of locking.</li>
</ul>

<p>In C#, there are several methods to implement a singleton pattern. The singleton pattern commonly includes the following attributes:</p>

<ul>
  <li>A single constructor that is private and has no parameters.</li>
  <li>A sealed class.</li>
  <li>A static variable that holds a reference to the single instance that is created.</li>
  <li>A public and static method that provides access to the created instance.</li>
</ul>

<p><strong>Implementation of Singleton by C#</strong></p>

<p><strong>Step 1: Create EmployeeInfo class</strong></p>

<p>This poco class is to hold employee information.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Employee</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Age</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>

</code></pre></div></div>
<p><strong>Step 2: Create a singleton class</strong></p>

<p>Here EmployeeService is a singleton class. Constructor of this class is private so that nobody can create its instance from outside.  Instance() is a static method which creates instance of the singleton class. It actually forces that only one instance of the object will be created. Lock() is used to create instance of the singleton pattern in thread safe manner in multi threaded environment. The other two methods are used to add employee information in list and get employee salary. These two are as usual method.Don’t mix up Singleton class and Static class. Keep in mind; in static class everything must be static like Method, constructor, properties. But in singleton class it is not required. Hope, you will be clear after the following example.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">public</span> <span class="k">sealed</span> <span class="k">class</span> <span class="nc">SingletonEmployeeService</span>
    <span class="p">{</span>
        <span class="c1">// singleton static object</span>
        <span class="k">private</span> <span class="k">static</span> <span class="n">SingletonEmployeeService</span> <span class="n">instance</span><span class="p">;</span>

        <span class="c1">// an object to use in a singleton class</span>
        <span class="k">private</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Employee</span><span class="p">&gt;</span> <span class="n">employees</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>

        <span class="c1">// Restrict to create object of singleton class</span>
        <span class="k">private</span> <span class="nf">SingletonEmployeeService</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">if</span><span class="p">(</span><span class="n">employees</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">employees</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Employee</span><span class="p">&gt;();</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="c1">// The static method to provide global access to the singleton object</span>
        <span class="c1">// Get singleton object of SingletonEmployeeService class</span>
        <span class="k">public</span> <span class="k">static</span> <span class="n">SingletonEmployeeService</span> <span class="nf">GetInstance</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">instance</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="c1">// Thread safe singleton</span>
                <span class="k">lock</span> <span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">SingletonEmployeeService</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="n">instance</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">SingletonEmployeeService</span><span class="p">();</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="n">instance</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// Add employee to the employees list</span>
        <span class="k">public</span> <span class="k">void</span> <span class="nf">AddEmployee</span><span class="p">(</span><span class="n">Employee</span> <span class="n">employee</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">employees</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">employee</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">// Get name of the employee by Id</span>

        <span class="k">public</span> <span class="kt">string</span> <span class="nf">GetEmployeeName</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span> <span class="p">{</span>
        
            <span class="kt">string</span> <span class="n">name</span> <span class="p">=</span> <span class="n">employees</span><span class="p">.</span><span class="nf">Where</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">id</span><span class="p">).</span><span class="nf">First</span><span class="p">().</span><span class="n">Name</span><span class="p">;</span>
            <span class="k">return</span> <span class="n">name</span><span class="p">;</span>
        <span class="p">}</span>

    <span class="p">}</span>
</code></pre></div></div>

<p>Here’s how the code works:</p>

<ul>
  <li>The class is marked as “sealed”, which means it cannot be inherited.</li>
  <li>The class has a private static object named “instance”, which holds the reference to the single instance of the class.</li>
  <li>The class also has a private List of Employee objects, which is the actual data that this class is managing.</li>
  <li>The constructor of the class is marked as private, which means that it can only be called from within the class itself. This ensures that no other code can create an instance of the class.</li>
  <li>The only way to access the singleton instance of the class is through the public static method named “GetInstance()”, which checks whether the instance has been created already. If not, it creates a new instance of the class in a thread-safe manner using a lock statement.</li>
  <li>lock() is used to create instance of the singleton pattern in thread safe manner in multi threaded environment.</li>
  <li>The class has two public methods, “AddEmployee()” and “GetEmployeeName()”, which can be used to add an employee to the employees list and to get the name of an employee by their ID, respectively.</li>
</ul>

<p><strong>Step 3: Access the singleton class</strong></p>

<p>This class creates an instance of singleton class by EmployeeService objEmployeeService = EmployeeService.Instance(); and access singleton class.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">public</span> <span class="k">class</span> <span class="nc">Program</span>
    <span class="p">{</span>
        <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
        <span class="p">{</span>

            <span class="n">Employee</span> <span class="n">emp1</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Employee</span> <span class="p">{</span> <span class="n">Id</span> <span class="p">=</span> <span class="m">1</span><span class="p">,</span> <span class="n">Name</span> <span class="p">=</span> <span class="s">"John"</span><span class="p">,</span> <span class="n">Age</span> <span class="p">=</span> <span class="m">30</span> <span class="p">};</span>
            <span class="n">Employee</span> <span class="n">emp2</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Employee</span> <span class="p">{</span> <span class="n">Id</span> <span class="p">=</span> <span class="m">2</span><span class="p">,</span> <span class="n">Name</span> <span class="p">=</span> <span class="s">"Abraham"</span><span class="p">,</span> <span class="n">Age</span> <span class="p">=</span> <span class="m">40</span><span class="p">};</span>
            

            <span class="c1">// Create singleton instance using GetInstance method not new</span>
            <span class="n">SingletonEmployeeService</span> <span class="n">singletonEmployeeService</span> <span class="p">=</span> <span class="n">SingletonEmployeeService</span><span class="p">.</span><span class="nf">GetInstance</span><span class="p">();</span>
            
            <span class="n">singletonEmployeeService</span><span class="p">.</span><span class="nf">AddEmployee</span><span class="p">(</span><span class="n">emp1</span><span class="p">);</span>
            <span class="n">singletonEmployeeService</span><span class="p">.</span><span class="nf">AddEmployee</span><span class="p">(</span><span class="n">emp2</span><span class="p">);</span>

            <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="n">singletonEmployeeService</span><span class="p">.</span><span class="nf">GetEmployeeName</span><span class="p">(</span><span class="m">2</span><span class="p">));</span>

            <span class="n">Console</span><span class="p">.</span><span class="nf">ReadKey</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// Output:</span>
    <span class="c1">// Abraham</span>

</code></pre></div></div>

<p>This C# code shows an example of how to use the SingletonEmployeeService class to manage employee data. The main() method creates two Employee objects and adds them to the singleton instance of the SingletonEmployeeService class using the AddEmployee() method. It then retrieves the name of the employee with ID=2 using the GetEmployeeName() method and prints it to the console.</p>

<p>The key thing to note here is that the SingletonEmployeeService class is accessed using the GetInstance() method, rather than creating a new instance using the “new” keyword. This ensures that there is only one instance of the SingletonEmployeeService class in the application and that it is globally accessible.</p>

<p>The code creates two Employee objects with different ID, Name, and Age values and adds them to the employees list of the singleton instance using the AddEmployee() method. Then, it retrieves the name of the employee with ID=2 using the GetEmployeeName() method, which returns the name of the employee as “Abraham” and prints it to the console using the Console.WriteLine() method.</p>

<p>Overall, this code demonstrates how the Singleton pattern can be used to ensure that there is only one instance of a class in the application and how this instance can be accessed globally to manage data in a centralized manner.</p>

<p><strong><a href="https://github.com/mahedee/code-sample02/tree/master/singleton-pattern">Source code</a></strong></p>]]></content><author><name>Mahedee Hasan</name></author><category term="OOP" /><category term="C#" /><category term="Design Pattern" /><category term="OOP" /><category term="csharp" /><category term="designpattern" /><summary type="html"><![CDATA[The Singleton pattern is a design pattern that restrict to create object more than once and provides a global point of access to that instance. This pattern is useful when you want to ensure that only one instance of a class is created and used throughout the entire application.]]></summary></entry><entry><title type="html">JavaScript setInterval method with some example</title><link href="https://mahedee.net//some-example-of-javascript-setInterval-method/" rel="alternate" type="text/html" title="JavaScript setInterval method with some example" /><published>2023-04-10T00:00:00-03:00</published><updated>2023-04-10T00:00:00-03:00</updated><id>https://mahedee.net//some-example-of-javascript-setInterval-method</id><content type="html" xml:base="https://mahedee.net//some-example-of-javascript-setInterval-method/"><![CDATA[<p><strong>Introduction</strong></p>

<p>JavaScript provides a built-in method called setInterval that allows you to execute a function or a piece of code repeatedly at a specified time interval. This can be useful for a variety of tasks, such as updating the content of a webpage, polling a server for new data, or animating an element on the page.</p>

<p><strong>Examples</strong></p>

<p>To use setInterval, you simply need to pass a function or a code block as the first argument, and the time interval (in milliseconds) as the second argument. Here’s a simple example:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">setInterval</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Hello, world!</span><span class="dl">"</span><span class="p">);</span>
<span class="p">},</span> <span class="mi">1000</span><span class="p">);</span>

</code></pre></div></div>

<p>In this example, the setInterval method will execute the arrow function every 1000 milliseconds (or 1 second), logging the message “Hello, world!” to the console.</p>

<p>You can also pass a regular function as the first argument to setInterval, like this:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">sayHello</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Hello, world!</span><span class="dl">"</span><span class="p">);</span>
<span class="p">}</span>
<span class="nf">setInterval</span><span class="p">(</span><span class="nx">sayHello</span><span class="p">,</span> <span class="mi">1000</span><span class="p">);</span>
</code></pre></div></div>

<p>This code will have the same effect as the previous example, but using a named function instead of an arrow function.</p>

<p>Another useful feature of setInterval is that it returns a unique ID that you can use to stop the interval using the clearInterval method. Here’s an example:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">intervalID</span> <span class="o">=</span> <span class="nf">setInterval</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Hello, world!</span><span class="dl">"</span><span class="p">);</span>
<span class="p">},</span> <span class="mi">1000</span><span class="p">);</span>

<span class="nf">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nf">clearInterval</span><span class="p">(</span><span class="nx">intervalID</span><span class="p">);</span>
<span class="p">},</span> <span class="mi">5000</span><span class="p">);</span>
</code></pre></div></div>

<p>In this code, we store the interval ID returned by setInterval in a variable called intervalID. Then, after 5 seconds (5000 milliseconds) have elapsed, we use the clearInterval method to stop the interval by passing the intervalID variable as an argument.</p>

<p>Finally, you can also pass arguments to the function being executed by setInterval. Here’s an example:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="kd">function</span> <span class="nf">incrementCount</span><span class="p">(</span><span class="nx">step</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">count</span> <span class="o">+=</span> <span class="nx">step</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`Count is now </span><span class="p">${</span><span class="nx">count</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
<span class="p">}</span>

<span class="nf">setInterval</span><span class="p">(</span><span class="nx">incrementCount</span><span class="p">,</span> <span class="mi">1000</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</code></pre></div></div>

<p>In this example, we’re using the incrementCount function to increment a count variable by a specified step. We pass the value 2 as the third argument to setInterval, which is then passed as the step argument to incrementCount.</p>

<p>These are just a few examples of how you can use the setInterval method in JavaScript to execute code at a specified time interval. Whether you’re updating the content of a webpage or animating an element, setInterval is a powerful tool that can help you achieve your goals.</p>]]></content><author><name>Mahedee Hasan</name></author><category term="JavaScript" /><category term="javascript" /><summary type="html"><![CDATA[Extension methods are a powerful feature in C# that allows developers to add new functionality to existing classes without modifying the original source code. This article will provide an introduction to extension methods, along with some examples and output to demonstrate how they work.]]></summary></entry><entry><title type="html">Extension Methods in C# - An Introduction with Examples and Output</title><link href="https://mahedee.net//extension-method-in-csharp/" rel="alternate" type="text/html" title="Extension Methods in C# - An Introduction with Examples and Output" /><published>2023-03-10T00:00:00-04:00</published><updated>2023-03-10T00:00:00-04:00</updated><id>https://mahedee.net//extension-method-in-csharp</id><content type="html" xml:base="https://mahedee.net//extension-method-in-csharp/"><![CDATA[<p><strong>Introduction</strong></p>

<p>Extension methods are a powerful feature in C# that allows developers to add new functionality to existing classes without modifying the original source code. This article will provide an introduction to extension methods, along with some examples and output to demonstrate how they work.</p>

<p><strong>What are Extension Methods?</strong></p>

<p>An extension method is a static method that is used to extend the functionality of an existing class without modifying the original class definition. Extension methods are defined in a static class and must be marked with the “this” keyword before the first parameter. This tells the compiler that the method is an extension method and can be called as if it were a member of the extended class.</p>

<p>Extension methods are typically used to add functionality to classes that cannot be modified directly, such as classes in the .NET Framework. They are also useful for creating reusable code that can be shared across multiple projects.</p>

<p><strong>Example of Extension Method</strong></p>

<p>Here’s an example of how to create an extension method that adds a new method to the String class:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">StringExtensions</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="kt">bool</span> <span class="nf">IsNullOrEmpty</span><span class="p">(</span><span class="k">this</span> <span class="kt">string</span> <span class="k">value</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="kt">string</span><span class="p">.</span><span class="nf">IsNullOrEmpty</span><span class="p">(</span><span class="k">value</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p>In this example, the “IsNullOrEmpty” method is added to the String class as an extension method. The method checks whether the string is null or empty and returns a boolean value.</p>

<p>To use the extension method, simply call it as if it were a member of the String class:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">string</span> <span class="n">str</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
<span class="kt">bool</span> <span class="n">result</span> <span class="p">=</span> <span class="n">str</span><span class="p">.</span><span class="nf">IsNullOrEmpty</span><span class="p">();</span>
</code></pre></div></div>

<p>In this example, the “IsNullOrEmpty” method is called on a null string. Because it is an extension method, it can be called even though the String class does not have a method with this name.</p>

<p><strong>Output of the Extension Method Example</strong></p>

<p>The output of the above code will be “true”, since the string “str” is null and the “IsNullOrEmpty” method returns true for null strings.</p>

<p>Here’s another example that demonstrates how to create an extension method that calculates the sum of an array of integers:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">IntExtensions</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="kt">int</span> <span class="nf">Sum</span><span class="p">(</span><span class="k">this</span> <span class="kt">int</span><span class="p">[]</span> <span class="n">values</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="kt">int</span> <span class="n">sum</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
        <span class="k">foreach</span> <span class="p">(</span><span class="kt">int</span> <span class="k">value</span> <span class="k">in</span> <span class="n">values</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">sum</span> <span class="p">+=</span> <span class="k">value</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">sum</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="n">To</span> <span class="n">use</span> <span class="n">the</span> <span class="n">extension</span> <span class="n">method</span><span class="p">,</span> <span class="n">simply</span> <span class="n">call</span> <span class="n">it</span> <span class="k">as</span> <span class="k">if</span> <span class="n">it</span> <span class="n">were</span> <span class="n">a</span> <span class="n">member</span> <span class="n">of</span> <span class="n">the</span> <span class="kt">int</span> <span class="n">array</span><span class="p">:</span>

<span class="err">```</span><span class="n">csharp</span>
<span class="kt">int</span><span class="p">[]</span> <span class="n">values</span> <span class="p">=</span> <span class="p">{</span> <span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="m">4</span><span class="p">,</span> <span class="m">5</span> <span class="p">};</span>
<span class="kt">int</span> <span class="n">sum</span> <span class="p">=</span> <span class="n">values</span><span class="p">.</span><span class="nf">Sum</span><span class="p">();</span>

</code></pre></div></div>

<p>In this example, the “Sum” method is called on an int array. Because it is an extension method, it can be called even though the int class does not have a method with this name.</p>

<p><strong>Output of the Extension Method Example</strong></p>

<p>The output of the above code will be “15”, since the “Sum” method calculates the sum of the values in the array.</p>

<p><strong>Another Example</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">System</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">ExtensionMethodsExample</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">MathExtensions</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">static</span> <span class="kt">double</span> <span class="nf">RoundTo</span><span class="p">(</span><span class="k">this</span> <span class="kt">double</span> <span class="n">number</span><span class="p">,</span> <span class="kt">int</span> <span class="n">decimalPlaces</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">double</span> <span class="n">multiplier</span> <span class="p">=</span> <span class="n">Math</span><span class="p">.</span><span class="nf">Pow</span><span class="p">(</span><span class="m">10</span><span class="p">,</span> <span class="n">decimalPlaces</span><span class="p">);</span>
            <span class="k">return</span> <span class="n">Math</span><span class="p">.</span><span class="nf">Round</span><span class="p">(</span><span class="n">number</span> <span class="p">*</span> <span class="n">multiplier</span><span class="p">)</span> <span class="p">/</span> <span class="n">multiplier</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">static</span> <span class="kt">int</span> <span class="nf">Factorial</span><span class="p">(</span><span class="k">this</span> <span class="kt">int</span> <span class="n">number</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">number</span> <span class="p">==</span> <span class="m">0</span> <span class="p">||</span> <span class="n">number</span> <span class="p">==</span> <span class="m">1</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="m">1</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">else</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="n">number</span> <span class="p">*</span> <span class="nf">Factorial</span><span class="p">(</span><span class="n">number</span> <span class="p">-</span> <span class="m">1</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">class</span> <span class="nc">Program</span>
    <span class="p">{</span>
        <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">double</span> <span class="n">pi</span> <span class="p">=</span> <span class="m">3.141592653589793</span><span class="p">;</span>
            <span class="kt">double</span> <span class="n">roundedPi</span> <span class="p">=</span> <span class="n">pi</span><span class="p">.</span><span class="nf">RoundTo</span><span class="p">(</span><span class="m">4</span><span class="p">);</span>
            <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">$"Pi rounded to 4 decimal places: </span><span class="p">{</span><span class="n">roundedPi</span><span class="p">}</span><span class="s">"</span><span class="p">);</span>

            <span class="kt">int</span> <span class="n">num</span> <span class="p">=</span> <span class="m">5</span><span class="p">;</span>
            <span class="kt">int</span> <span class="n">factorial</span> <span class="p">=</span> <span class="n">num</span><span class="p">.</span><span class="nf">Factorial</span><span class="p">();</span>
            <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">$"Factorial of </span><span class="p">{</span><span class="n">num</span><span class="p">}</span><span class="s">: </span><span class="p">{</span><span class="n">factorial</span><span class="p">}</span><span class="s">"</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p>In this example, we have created a static class called “MathExtensions” that contains two extension methods: “RoundTo” and “Factorial”.</p>

<p>The “RoundTo” method takes a double number and an integer number of decimal places, and returns the number rounded to the specified number of decimal places.</p>

<p>The “Factorial” method takes an integer number and calculates its factorial.</p>

<p>In the Main method, we have created a double variable “pi” and called the “RoundTo” method on it to round it to 4 decimal places. We have also created an integer variable “num” and called the “Factorial” method on it to calculate its factorial.</p>

<p>The output of this code will be:</p>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">Pi</span> <span class="nf">rounded</span> <span class="nf">to</span> <span class="mf">4</span> <span class="nf">decimal</span> <span class="nf">places:</span> <span class="mf">3.1416</span>
<span class="nf">Factorial</span> <span class="nf">of</span> <span class="nf">5:</span> <span class="mf">120</span>
</code></pre></div></div>

<p>This advanced example demonstrates how extension methods can be used to add complex functionality to existing classes, such as calculating the factorial of an integer or rounding a double to a specified number of decimal places.</p>

<p><strong>Conclusion</strong></p>

<p>Extension methods are a powerful feature in C# that allow developers to add new functionality to existing classes without modifying the original source code. They are defined in a static class and must be marked with the “this” keyword before the first parameter. Extension methods are typically used to add functionality to classes that cannot be modified directly, such as classes in the .NET Framework. They are also useful for creating reusable code that can be shared across multiple projects.</p>]]></content><author><name>Mahedee Hasan</name></author><category term="C#" /><category term="csharp" /><summary type="html"><![CDATA[Extension methods are a powerful feature in C# that allows developers to add new functionality to existing classes without modifying the original source code. This article will provide an introduction to extension methods, along with some examples and output to demonstrate how they work.]]></summary></entry><entry><title type="html">Introduction to the Yield Statement</title><link href="https://mahedee.net//introduction-to-the-yield-statement/" rel="alternate" type="text/html" title="Introduction to the Yield Statement" /><published>2023-03-01T00:00:00-04:00</published><updated>2023-03-01T00:00:00-04:00</updated><id>https://mahedee.net//introduction-to-the-yield-statement</id><content type="html" xml:base="https://mahedee.net//introduction-to-the-yield-statement/"><![CDATA[<p><strong>Introduction</strong></p>

<p>The <code class="language-plaintext highlighter-rouge">yield</code> statement is a powerful construct in C# that allows you to create custom iterators. It allows you to define a method that returns a sequence of values, but instead of returning all of the values at once, it can return them one at a time as requested. This is particularly useful when working with large data sets or when you want to avoid loading all of the data into memory at once.</p>

<p>The <code class="language-plaintext highlighter-rouge">yield</code> statement works by suspending the method’s execution and returning a value to the caller. When the method is called again, it continues executing from where it left off, remembering its previous state.</p>

<p><strong>Basic Usage of the Yield Statement</strong></p>

<p>To use the yield statement, you need to define a method that returns an <code class="language-plaintext highlighter-rouge">IEnumerable&lt;T&gt;</code> or <code class="language-plaintext highlighter-rouge">IEnumerator&lt;T&gt;</code> object. Inside the method, you can use the <code class="language-plaintext highlighter-rouge">yield return</code> statement to return a value from the sequence.</p>

<p>Here’s an example of a method that returns a sequence of integers using the <code class="language-plaintext highlighter-rouge">yield</code> statement:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">static</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="nf">GetNumbers</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">yield</span> <span class="k">return</span> <span class="m">1</span><span class="p">;</span>
    <span class="k">yield</span> <span class="k">return</span> <span class="m">2</span><span class="p">;</span>
    <span class="k">yield</span> <span class="k">return</span> <span class="m">3</span><span class="p">;</span>
    <span class="k">yield</span> <span class="k">return</span> <span class="m">4</span><span class="p">;</span>
    <span class="k">yield</span> <span class="k">return</span> <span class="m">5</span><span class="p">;</span>
<span class="p">}</span>

</code></pre></div></div>

<p>In this example, the <code class="language-plaintext highlighter-rouge">GetNumbers()</code> method defines a sequence of integers by using five <code class="language-plaintext highlighter-rouge">yield</code> return statements. When this method is called, it will return an <code class="language-plaintext highlighter-rouge">IEnumerable&lt;int&gt;</code> object that represents the sequence of integers.</p>

<p>You can use a foreach loop to iterate over the sequence and retrieve each value:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">foreach</span> <span class="p">(</span><span class="kt">int</span> <span class="n">num</span> <span class="k">in</span> <span class="nf">GetNumbers</span><span class="p">())</span>
<span class="p">{</span>
    <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="n">num</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This code will output the following:</p>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mf">1</span>
<span class="mf">2</span>
<span class="mf">3</span>
<span class="mf">4</span>
<span class="mf">5</span>
</code></pre></div></div>

<p><strong>Advanced Usage of the Yield Statement</strong></p>

<p>The <code class="language-plaintext highlighter-rouge">yield</code> statement can also be used with the <code class="language-plaintext highlighter-rouge">yield break</code> statement to stop the sequence early. Here’s an example of a method that returns a sequence of integers up to a specified limit:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">static</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="nf">GetNumbersUpTo</span><span class="p">(</span><span class="kt">int</span> <span class="n">limit</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">1</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;=</span> <span class="n">limit</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span>
    <span class="p">{</span>
        <span class="k">yield</span> <span class="k">return</span> <span class="n">i</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">yield</span> <span class="k">break</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In this example, the GetNumbersUpTo() method defines a sequence of integers up to a specified limit. It uses a for loop to generate the sequence, and then it uses the <code class="language-plaintext highlighter-rouge">yield break</code> statement to stop the sequence early.</p>

<p>You can call this method and pass in a limit to get the sequence:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">foreach</span> <span class="p">(</span><span class="kt">int</span> <span class="n">num</span> <span class="k">in</span> <span class="nf">GetNumbersUpTo</span><span class="p">(</span><span class="m">3</span><span class="p">))</span>
<span class="p">{</span>
    <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="n">num</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This code will output the following:</p>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mf">1</span>
<span class="mf">2</span>
<span class="mf">3</span>
</code></pre></div></div>

<p><strong>Conclusion</strong><br />
The yield statement is a powerful feature in C# that allows you to define custom iterators that can return sequences of values. It can be used to create efficient and memory-friendly code when working with large data sets or when you need to retrieve data on-demand. By using the yield return and yield break statements, you can define complex sequences and stop them early when necessary.</p>]]></content><author><name>Mahedee Hasan</name></author><category term="C#" /><category term="csharp" /><summary type="html"><![CDATA[The yield statement is a powerful construct in C# that allows you to create custom iterators. It allows you to define a method that returns a sequence of values, but instead of returning all of the values at once, it can return them one at a time as requested. This is particularly useful when working with large data sets or when you want to avoid loading all of the data into memory at once.]]></summary></entry><entry><title type="html">Configure Load Balancer using Eureka and ocelot with asp.net core and docker</title><link href="https://mahedee.net//Configure-Load-Balancer-using-Eureka-and-ocelot-with-aspnet-core/" rel="alternate" type="text/html" title="Configure Load Balancer using Eureka and ocelot with asp.net core and docker" /><published>2023-01-07T00:00:00-04:00</published><updated>2023-01-07T00:00:00-04:00</updated><id>https://mahedee.net//Configure-Load-Balancer-using-Eureka-and-ocelot-with-aspnet-core</id><content type="html" xml:base="https://mahedee.net//Configure-Load-Balancer-using-Eureka-and-ocelot-with-aspnet-core/"><![CDATA[<p><strong>Introduction</strong></p>

<p>A load balancer is a component that distributes incoming network traffic across multiple servers to optimize resource utilization, maximize throughput, minimize response time, and avoid overloading any single server.</p>

<p>Eureka is a service discovery tool provided by Netflix OSS, it can be used to solve load balancing by registering all instances of a service with Eureka and having the load balancer forward traffic to those instances. The Eureka server maintains a registry of all available instances of a service, and clients of the service query the registry to obtain a list of available service instances. The load balancer can then use this information to distribute incoming requests to the available service instances.</p>

<p>In this article, I will show you how to configure load balancer using Eureka and ocelot in API gateway.</p>

<p><img src="/assets/images/posts/2023/sdd-01.PNG" alt="" /></p>

<p>Fig – Load balancing architecture (Collected from internet)</p>

<p>Here, I am skipping service discovery. If you want to know more about service discovery, please read the article - <a href="https://mahedee.net/Service-Discovery-using-Eureka-Ocelot-and-ASPnet-core/">Service Discovery with Ocelot and ASP.net core</a></p>

<p><strong>Implementation</strong></p>

<p>Let’s configure Load Balancer using Eureka, Ocelot</p>

<p><strong>Tools and Technologies Used</strong></p>

<ul>
  <li>Visual Studio 2022</li>
  <li>.NET 6.0</li>
  <li>ASP.NET Core Web API</li>
  <li>Visual C#</li>
  <li>Eureka</li>
  <li>Ocelot</li>
  <li>Docker</li>
</ul>

<p><strong>Step 1: Create solution and projects</strong></p>

<ul>
  <li>Create a solution name SDDemoDocker.sln</li>
  <li>Add four Web Api Projects name BFF.Web, LocationA.API, LocationB.API, LocationC.API</li>
  <li>Here BFF.Web is an api gateway</li>
</ul>

<p><strong>Step 2: Install nuget packages</strong></p>

<ul>
  <li>Install following nuget packages in BFF.Web project</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">MMLib.SwaggerForOcelot</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Ocelot</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Ocelot.Provider.Eureka</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Ocelot.Provider.Kubernetes</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Ocelot.Provider.Polly</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Steeltoe.Discovery.Eureka</span>
</code></pre></div></div>

<ul>
  <li>Install following nuget packages in LocationA.API project</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Steeltoe.Discovery.ClientCore</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Steeltoe.Discovery.Eureka</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.VisualStudio.Azure.Containers.Tools.Targets</span>
</code></pre></div></div>

<ul>
  <li>Install following nuget packages in LocationB.API project</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Steeltoe.Discovery.ClientCore</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Steeltoe.Discovery.Eureka</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.VisualStudio.Azure.Containers.Tools.Targets</span>
</code></pre></div></div>

<ul>
  <li>Install following nuget packages in LocationC.API project</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Steeltoe.Discovery.ClientCore</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Steeltoe.Discovery.Eureka</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.VisualStudio.Azure.Containers.Tools.Targets</span>
</code></pre></div></div>

<p><strong>Step 3: Organize LocationA.API projects</strong></p>

<ul>
  <li>Register Eureka and modify program.cs as follows.</li>
</ul>

<p><strong>Program.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Steeltoe.Discovery.Client</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Steeltoe.Discovery.Eureka</span><span class="p">;</span>

<span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="n">WebApplication</span><span class="p">.</span><span class="nf">CreateBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>

<span class="c1">// Add services to the container.</span>

<span class="c1">// Add or register service discovery to your application</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddServiceDiscovery</span><span class="p">(</span><span class="n">o</span> <span class="p">=&gt;</span> <span class="n">o</span><span class="p">.</span><span class="nf">UseEureka</span><span class="p">());</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">();</span>
<span class="c1">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddEndpointsApiExplorer</span><span class="p">();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddSwaggerGen</span><span class="p">();</span>

<span class="kt">var</span> <span class="n">app</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

<span class="c1">// Configure the HTTP request pipeline.</span>
<span class="k">if</span> <span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">Environment</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
<span class="p">{</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwagger</span><span class="p">();</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwaggerUI</span><span class="p">();</span>
<span class="p">}</span>

<span class="c1">//app.UseHttpsRedirection();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseAuthorization</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">MapControllers</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>

</code></pre></div></div>

<ul>
  <li>Create a controller name DistrictController in Controllers folder and modify get method as follows.</li>
</ul>

<p><strong>DistrictController.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>

<span class="c1">// For more information on enabling Web API for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860</span>

<span class="k">namespace</span> <span class="nn">LocationA.API.Controllers</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
    <span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">DistrictController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
    <span class="p">{</span>
        <span class="c1">// GET: api/&lt;DistrictController&gt;</span>
        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"GetAll"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="nf">Get</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="kt">string</span><span class="p">[]</span> <span class="p">{</span> <span class="s">"Serivce:LocationA.API-&gt;"</span><span class="p">,</span> <span class="s">"Dhaka"</span><span class="p">,</span> <span class="s">"Chittagong"</span><span class="p">,</span> <span class="s">"Chandpur"</span><span class="p">,</span> <span class="s">"Barisal"</span><span class="p">,</span> <span class="s">"Noakhali"</span> <span class="p">};</span>
        <span class="p">}</span>

    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Modify appsettings.json to connect to the service registry</strong></p>

<p><strong>appsettings.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">
</span><span class="p">{</span><span class="w">
  </span><span class="nl">"Logging"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"LogLevel"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Default"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Information"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Microsoft.AspNetCore"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Warning"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"AllowedHosts"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*"</span><span class="p">,</span><span class="w">



  </span><span class="nl">"Spring"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"Application"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"SERVICE.LOCATIONAPI"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"Eureka"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"Client"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"ServiceUrl"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://eureka-server:8761/eureka/"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"ValidateCertificates"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
      </span><span class="nl">"ShouldRegisterWithEureka"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
    </span><span class="p">},</span><span class="w">
    
    </span><span class="err">//</span><span class="w"> </span><span class="err">No</span><span class="w"> </span><span class="err">docke</span><span class="w"> </span><span class="err">instance</span><span class="w"> </span><span class="err">added</span><span class="w">
    </span><span class="nl">"Instance"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="err">//</span><span class="nl">"port"</span><span class="p">:</span><span class="w"> </span><span class="mi">9001</span><span class="p">,</span><span class="w">
      </span><span class="nl">"NonSecurePort"</span><span class="p">:</span><span class="w"> </span><span class="mi">80</span><span class="p">,</span><span class="w">
      </span><span class="nl">"HostName"</span><span class="p">:</span><span class="w"> </span><span class="s2">"locationa.api"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"InstanceId"</span><span class="p">:</span><span class="w"> </span><span class="s2">"LocationA.API,Port:80"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"StatusPageUrlPath"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/swagger/index.html"</span><span class="w">
      </span><span class="err">//</span><span class="nl">"HealthCheckUrlPath"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/api/values/healthcheck"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<ul>
  <li>Add docker file in the project</li>
</ul>

<p><strong>Dockerfile</strong></p>

<div class="language-docker highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#See https://aka.ms/containerfastmode to understand how Visual Studio uses this Dockerfile to build your images for faster debugging.</span>

<span class="k">FROM</span><span class="w"> </span><span class="s">mcr.microsoft.com/dotnet/aspnet:6.0</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">base</span>
<span class="k">WORKDIR</span><span class="s"> /app</span>
<span class="k">EXPOSE</span><span class="s"> 80</span>
<span class="k">EXPOSE</span><span class="s"> 443</span>

<span class="k">FROM</span><span class="w"> </span><span class="s">mcr.microsoft.com/dotnet/sdk:6.0</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">build</span>
<span class="k">WORKDIR</span><span class="s"> /src</span>
<span class="k">COPY</span><span class="s"> ["LocationA.API/LocationA.API.csproj", "Location.API/"]</span>
<span class="k">RUN </span>dotnet restore <span class="s2">"LocationA.API/LocationA.API.csproj"</span>
<span class="k">COPY</span><span class="s"> . .</span>
<span class="k">WORKDIR</span><span class="s"> "/src/LocationA.API"</span>
<span class="k">RUN </span>dotnet build <span class="s2">"LocationA.API.csproj"</span> <span class="nt">-c</span> Release <span class="nt">-o</span> /app/build

<span class="k">FROM</span><span class="w"> </span><span class="s">build</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">publish</span>
<span class="k">RUN </span>dotnet publish <span class="s2">"LocationA.API.csproj"</span> <span class="nt">-c</span> Release <span class="nt">-o</span> /app/publish

<span class="k">FROM</span><span class="w"> </span><span class="s">base</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">final</span>
<span class="k">WORKDIR</span><span class="s"> /app</span>
<span class="k">COPY</span><span class="s"> --from=publish /app/publish .</span>
<span class="k">ENTRYPOINT</span><span class="s"> ["dotnet", "LocationA.API.dll"]</span>
</code></pre></div></div>

<p><strong>Step 4: Organize LocationB.API project</strong></p>

<ul>
  <li>Register Eureka and modify program.cs as follows.</li>
</ul>

<p><strong>Program.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Steeltoe.Discovery.Client</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Steeltoe.Discovery.Eureka</span><span class="p">;</span>

<span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="n">WebApplication</span><span class="p">.</span><span class="nf">CreateBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>

<span class="c1">// Add services to the container.</span>

<span class="c1">// Add or register service discovery to your application</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddServiceDiscovery</span><span class="p">(</span><span class="n">o</span> <span class="p">=&gt;</span> <span class="n">o</span><span class="p">.</span><span class="nf">UseEureka</span><span class="p">());</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">();</span>
<span class="c1">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddEndpointsApiExplorer</span><span class="p">();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddSwaggerGen</span><span class="p">();</span>

<span class="kt">var</span> <span class="n">app</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

<span class="c1">// Configure the HTTP request pipeline.</span>
<span class="k">if</span> <span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">Environment</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
<span class="p">{</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwagger</span><span class="p">();</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwaggerUI</span><span class="p">();</span>
<span class="p">}</span>

<span class="c1">//app.UseHttpsRedirection();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseAuthorization</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">MapControllers</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>

</code></pre></div></div>

<ul>
  <li>Create a controller name DistrictController in Controllers folder and modify get method as follows.</li>
</ul>

<p><strong>DistrictController.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">LocationB.API.Controllers</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
    <span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">DistrictController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
    <span class="p">{</span>
        <span class="c1">// GET: api/&lt;DistrictController&gt;</span>
        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"GetAll"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="nf">Get</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="kt">string</span><span class="p">[]</span> <span class="p">{</span> <span class="s">"Serivce:LocationB.API-&gt;"</span><span class="p">,</span> <span class="s">"Kumilla"</span><span class="p">,</span> <span class="s">"Bogura"</span><span class="p">,</span> <span class="s">"Natore"</span><span class="p">,</span> <span class="s">"Kurigram"</span><span class="p">,</span> <span class="s">"Natore"</span> <span class="p">};</span>
        <span class="p">}</span>

    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Modify appsettings.json to connect to the service registry.</li>
</ul>

<p><strong>appsettings.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"Logging"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"LogLevel"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Default"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Information"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Microsoft.AspNetCore"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Warning"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"AllowedHosts"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*"</span><span class="p">,</span><span class="w">



  </span><span class="nl">"Spring"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"Application"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"SERVICE.LOCATIONAPI"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"Eureka"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"Client"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"ServiceUrl"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://eureka-server:8761/eureka/"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"ValidateCertificates"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
      </span><span class="nl">"ShouldRegisterWithEureka"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
    </span><span class="p">},</span><span class="w">

    </span><span class="err">//</span><span class="w"> </span><span class="err">No</span><span class="w"> </span><span class="err">docke</span><span class="w"> </span><span class="err">instance</span><span class="w"> </span><span class="err">added</span><span class="w">
    </span><span class="nl">"Instance"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="err">//</span><span class="nl">"port"</span><span class="p">:</span><span class="w"> </span><span class="mi">9001</span><span class="p">,</span><span class="w">
      </span><span class="nl">"NonSecurePort"</span><span class="p">:</span><span class="w"> </span><span class="mi">80</span><span class="p">,</span><span class="w">
      </span><span class="nl">"HostName"</span><span class="p">:</span><span class="w"> </span><span class="s2">"locationb.api"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"InstanceId"</span><span class="p">:</span><span class="w"> </span><span class="s2">"LocationB.API,Port:80"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"StatusPageUrlPath"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/swagger/index.html"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<ul>
  <li>Add Dockerfile in the project</li>
</ul>

<p><strong>Dockerfile</strong></p>

<div class="language-docker highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="c">#See https://aka.ms/containerfastmode to understand how Visual Studio uses this Dockerfile to build your images for faster debugging.</span>

<span class="k">FROM</span><span class="w"> </span><span class="s">mcr.microsoft.com/dotnet/aspnet:6.0</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">base</span>
<span class="k">WORKDIR</span><span class="s"> /app</span>
<span class="k">EXPOSE</span><span class="s"> 80</span>

<span class="k">FROM</span><span class="w"> </span><span class="s">mcr.microsoft.com/dotnet/sdk:6.0</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">build</span>
<span class="k">WORKDIR</span><span class="s"> /src</span>
<span class="k">COPY</span><span class="s"> ["LocationB.API/LocationB.API.csproj", "LocationB.API/"]</span>
<span class="k">RUN </span>dotnet restore <span class="s2">"LocationB.API/LocationB.API.csproj"</span>
<span class="k">COPY</span><span class="s"> . .</span>
<span class="k">WORKDIR</span><span class="s"> "/src/LocationB.API"</span>
<span class="k">RUN </span>dotnet build <span class="s2">"LocationB.API.csproj"</span> <span class="nt">-c</span> Release <span class="nt">-o</span> /app/build

<span class="k">FROM</span><span class="w"> </span><span class="s">build</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">publish</span>
<span class="k">RUN </span>dotnet publish <span class="s2">"LocationB.API.csproj"</span> <span class="nt">-c</span> Release <span class="nt">-o</span> /app/publish

<span class="k">FROM</span><span class="w"> </span><span class="s">base</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">final</span>
<span class="k">WORKDIR</span><span class="s"> /app</span>
<span class="k">COPY</span><span class="s"> --from=publish /app/publish .</span>
<span class="k">ENTRYPOINT</span><span class="s"> ["dotnet", "LocationB.API.dll"]</span>
</code></pre></div></div>

<p><strong>Step 5: Organize LocationC.API</strong></p>

<ul>
  <li>Register Eureka and modify program.cs as follows.</li>
</ul>

<p><strong>Program.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Steeltoe.Discovery.Client</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Steeltoe.Discovery.Eureka</span><span class="p">;</span>

<span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="n">WebApplication</span><span class="p">.</span><span class="nf">CreateBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>

<span class="c1">// Add services to the container.</span>

<span class="c1">// Add or register service discovery to your application</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddServiceDiscovery</span><span class="p">(</span><span class="n">o</span> <span class="p">=&gt;</span> <span class="n">o</span><span class="p">.</span><span class="nf">UseEureka</span><span class="p">());</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">();</span>
<span class="c1">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddEndpointsApiExplorer</span><span class="p">();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddSwaggerGen</span><span class="p">();</span>

<span class="kt">var</span> <span class="n">app</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

<span class="c1">// Configure the HTTP request pipeline.</span>
<span class="k">if</span> <span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">Environment</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
<span class="p">{</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwagger</span><span class="p">();</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwaggerUI</span><span class="p">();</span>
<span class="p">}</span>

<span class="c1">//app.UseHttpsRedirection();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseAuthorization</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">MapControllers</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>

</code></pre></div></div>

<ul>
  <li>Create a controller name DistrictController in Controllers folder and modify get method as follows.</li>
</ul>

<p><strong>DistrictController.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">LocationC.API.Controllers</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
    <span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">DistrictController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
    <span class="p">{</span>
        <span class="c1">// GET: api/&lt;DistrictController&gt;</span>
        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"GetAll"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="nf">Get</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="kt">string</span><span class="p">[]</span> <span class="p">{</span><span class="s">"Serivce:LocationC.API-&gt;"</span><span class="p">,</span><span class="s">"Kustia"</span><span class="p">,</span> <span class="s">"Norail"</span><span class="p">,</span> <span class="s">"Kurigram"</span><span class="p">,</span> <span class="s">"Netrokona"</span><span class="p">};</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Modify appsettings.json to connect to the service registry.</li>
</ul>

<p><strong>appsettings.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">
</span><span class="p">{</span><span class="w">
  </span><span class="nl">"Logging"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"LogLevel"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Default"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Information"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Microsoft.AspNetCore"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Warning"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"AllowedHosts"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*"</span><span class="p">,</span><span class="w">



  </span><span class="nl">"Spring"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"Application"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"SERVICE.LOCATIONAPI"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"Eureka"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"Client"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"ServiceUrl"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://eureka-server:8761/eureka/"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"ValidateCertificates"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
      </span><span class="nl">"ShouldRegisterWithEureka"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
    </span><span class="p">},</span><span class="w">

    </span><span class="err">//</span><span class="w"> </span><span class="err">No</span><span class="w"> </span><span class="err">docke</span><span class="w"> </span><span class="err">instance</span><span class="w"> </span><span class="err">added</span><span class="w">
    </span><span class="nl">"Instance"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="err">//</span><span class="nl">"port"</span><span class="p">:</span><span class="w"> </span><span class="mi">9001</span><span class="p">,</span><span class="w">
      </span><span class="nl">"NonSecurePort"</span><span class="p">:</span><span class="w"> </span><span class="mi">80</span><span class="p">,</span><span class="w">
      </span><span class="nl">"HostName"</span><span class="p">:</span><span class="w"> </span><span class="s2">"locationc.api"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"InstanceId"</span><span class="p">:</span><span class="w"> </span><span class="s2">"LocationC.API,Port:80"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"StatusPageUrlPath"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/swagger/index.html"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<ul>
  <li>Add Dockerfile in the project</li>
</ul>

<p><strong>Dockerfile</strong></p>

<div class="language-docker highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="c">#See https://aka.ms/containerfastmode to understand how Visual Studio uses this Dockerfile to build your images for faster debugging.</span>

<span class="k">FROM</span><span class="w"> </span><span class="s">mcr.microsoft.com/dotnet/aspnet:6.0</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">base</span>
<span class="k">WORKDIR</span><span class="s"> /app</span>
<span class="k">EXPOSE</span><span class="s"> 80</span>

<span class="k">FROM</span><span class="w"> </span><span class="s">mcr.microsoft.com/dotnet/sdk:6.0</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">build</span>
<span class="k">WORKDIR</span><span class="s"> /src</span>
<span class="k">COPY</span><span class="s"> ["LocationC.API/LocationC.API.csproj", "LocationC.API/"]</span>
<span class="k">RUN </span>dotnet restore <span class="s2">"LocationC.API/LocationC.API.csproj"</span>
<span class="k">COPY</span><span class="s"> . .</span>
<span class="k">WORKDIR</span><span class="s"> "/src/LocationC.API"</span>
<span class="k">RUN </span>dotnet build <span class="s2">"LocationC.API.csproj"</span> <span class="nt">-c</span> Release <span class="nt">-o</span> /app/build

<span class="k">FROM</span><span class="w"> </span><span class="s">build</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">publish</span>
<span class="k">RUN </span>dotnet publish <span class="s2">"LocationC.API.csproj"</span> <span class="nt">-c</span> Release <span class="nt">-o</span> /app/publish

<span class="k">FROM</span><span class="w"> </span><span class="s">base</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">final</span>
<span class="k">WORKDIR</span><span class="s"> /app</span>
<span class="k">COPY</span><span class="s"> --from=publish /app/publish .</span>
<span class="k">ENTRYPOINT</span><span class="s"> ["dotnet", "LocationC.API.dll"]</span>

</code></pre></div></div>

<p><strong>Step 6: Organize BFF.Web</strong></p>

<p>In this stage, we are going to configure a gateway to communicate with other services using ocelot.</p>

<ul>
  <li>Create two folder name - Routes.dev and Routes.Prod  in root directory and add the following files ocelot.global.json, ocelot.location.api.json, ocelot.SwaggerEndPoints.json in Routes.dev and Routes.Prod folder.</li>
</ul>

<p>*Now modify the json files as follows.</p>

<p><strong>ocelot.location.api.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">
</span><span class="p">{</span><span class="w">
  </span><span class="nl">"Routes"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"DownstreamPathTemplate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/{everything}"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"DownstreamScheme"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"SwaggerKey"</span><span class="p">:</span><span class="w"> </span><span class="s2">"location"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"UseServiceDiscovery"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
      </span><span class="nl">"ServiceName"</span><span class="p">:</span><span class="w"> </span><span class="s2">"SERVICE.LOCATIONAPI"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"UpstreamPathTemplate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/location/{everything}"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"UpstreamHttpMethod"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"GET"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"POST"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"PUT"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"DELETE"</span><span class="w">
      </span><span class="p">],</span><span class="w">

      </span><span class="err">/*</span><span class="w">
        </span><span class="err">LeastConnection</span><span class="w"> </span><span class="err">-</span><span class="w"> </span><span class="err">tracks</span><span class="w"> </span><span class="err">which</span><span class="w"> </span><span class="err">services</span><span class="w"> </span><span class="err">are</span><span class="w"> </span><span class="err">dealing</span><span class="w"> </span><span class="err">with</span><span class="w"> </span><span class="err">requests</span><span class="w"> </span><span class="err">and</span><span class="w"> </span><span class="err">sends</span><span class="w"> </span><span class="err">new</span><span class="w"> </span><span class="err">requests</span><span class="w"> </span><span class="err">to</span><span class="w"> </span><span class="err">service</span><span class="w"> </span><span class="err">with</span><span class="w"> </span><span class="err">least</span><span class="w"> </span><span class="err">existing</span><span class="w"> </span><span class="err">requests.</span><span class="w"> </span><span class="err">The</span><span class="w"> </span><span class="err">algorythm</span><span class="w"> </span><span class="err">state</span><span class="w"> </span><span class="err">is</span><span class="w"> </span><span class="err">not</span><span class="w"> </span><span class="err">distributed</span><span class="w"> </span><span class="err">across</span><span class="w"> </span><span class="err">a</span><span class="w"> </span><span class="err">cluster</span><span class="w"> </span><span class="err">of</span><span class="w"> </span><span class="err">Ocelot’s.</span><span class="w">
        </span><span class="err">RoundRobin</span><span class="w"> </span><span class="err">-</span><span class="w"> </span><span class="err">loops</span><span class="w"> </span><span class="err">through</span><span class="w"> </span><span class="err">available</span><span class="w"> </span><span class="err">services</span><span class="w"> </span><span class="err">and</span><span class="w"> </span><span class="err">sends</span><span class="w"> </span><span class="err">requests.</span><span class="w"> </span><span class="err">The</span><span class="w"> </span><span class="err">algorythm</span><span class="w"> </span><span class="err">state</span><span class="w"> </span><span class="err">is</span><span class="w"> </span><span class="err">not</span><span class="w"> </span><span class="err">distributed</span><span class="w"> </span><span class="err">across</span><span class="w"> </span><span class="err">a</span><span class="w"> </span><span class="err">cluster</span><span class="w"> </span><span class="err">of</span><span class="w"> </span><span class="err">Ocelot’s.</span><span class="w">
        </span><span class="err">NoLoadBalancer</span><span class="w"> </span><span class="err">-</span><span class="w"> </span><span class="err">takes</span><span class="w"> </span><span class="err">the</span><span class="w"> </span><span class="err">first</span><span class="w"> </span><span class="err">available</span><span class="w"> </span><span class="err">service</span><span class="w"> </span><span class="err">from</span><span class="w"> </span><span class="err">config</span><span class="w"> </span><span class="err">or</span><span class="w"> </span><span class="err">service</span><span class="w"> </span><span class="err">discovery.</span><span class="w">
        </span><span class="err">CookieStickySessions</span><span class="w"> </span><span class="err">-</span><span class="w"> </span><span class="err">uses</span><span class="w"> </span><span class="err">a</span><span class="w"> </span><span class="err">cookie</span><span class="w"> </span><span class="err">to</span><span class="w"> </span><span class="err">stick</span><span class="w"> </span><span class="err">all</span><span class="w"> </span><span class="err">requests</span><span class="w"> </span><span class="err">to</span><span class="w"> </span><span class="err">a</span><span class="w"> </span><span class="err">specific</span><span class="w"> </span><span class="err">server</span><span class="w">
      </span><span class="err">*/</span><span class="w">

      </span><span class="nl">"LoadBalancerOptions"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"Type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"RoundRobin"</span><span class="w">
      </span><span class="p">}</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<p><strong>ocelot.product.api.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">
</span><span class="p">{</span><span class="w">
  </span><span class="nl">"Routes"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"DownstreamPathTemplate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/{everything}"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"DownstreamScheme"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"SwaggerKey"</span><span class="p">:</span><span class="w"> </span><span class="s2">"product"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"UseServiceDiscovery"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
      </span><span class="nl">"ServiceName"</span><span class="p">:</span><span class="w"> </span><span class="s2">"SERVICE.PRODUCTAPI"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"UpstreamPathTemplate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/product/{everything}"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"UpstreamHttpMethod"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"GET"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"POST"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"PUT"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"DELETE"</span><span class="w">
      </span><span class="p">],</span><span class="w">


      </span><span class="err">/*</span><span class="w">
        </span><span class="err">LeastConnection</span><span class="w"> </span><span class="err">-</span><span class="w"> </span><span class="err">tracks</span><span class="w"> </span><span class="err">which</span><span class="w"> </span><span class="err">services</span><span class="w"> </span><span class="err">are</span><span class="w"> </span><span class="err">dealing</span><span class="w"> </span><span class="err">with</span><span class="w"> </span><span class="err">requests</span><span class="w"> </span><span class="err">and</span><span class="w"> </span><span class="err">sends</span><span class="w"> </span><span class="err">new</span><span class="w"> </span><span class="err">requests</span><span class="w"> </span><span class="err">to</span><span class="w"> </span><span class="err">service</span><span class="w"> </span><span class="err">with</span><span class="w"> </span><span class="err">least</span><span class="w"> </span><span class="err">existing</span><span class="w"> </span><span class="err">requests.</span><span class="w"> </span><span class="err">The</span><span class="w"> </span><span class="err">algorythm</span><span class="w"> </span><span class="err">state</span><span class="w"> </span><span class="err">is</span><span class="w"> </span><span class="err">not</span><span class="w"> </span><span class="err">distributed</span><span class="w"> </span><span class="err">across</span><span class="w"> </span><span class="err">a</span><span class="w"> </span><span class="err">cluster</span><span class="w"> </span><span class="err">of</span><span class="w"> </span><span class="err">Ocelot’s.</span><span class="w">
        </span><span class="err">RoundRobin</span><span class="w"> </span><span class="err">-</span><span class="w"> </span><span class="err">loops</span><span class="w"> </span><span class="err">through</span><span class="w"> </span><span class="err">available</span><span class="w"> </span><span class="err">services</span><span class="w"> </span><span class="err">and</span><span class="w"> </span><span class="err">sends</span><span class="w"> </span><span class="err">requests.</span><span class="w"> </span><span class="err">The</span><span class="w"> </span><span class="err">algorythm</span><span class="w"> </span><span class="err">state</span><span class="w"> </span><span class="err">is</span><span class="w"> </span><span class="err">not</span><span class="w"> </span><span class="err">distributed</span><span class="w"> </span><span class="err">across</span><span class="w"> </span><span class="err">a</span><span class="w"> </span><span class="err">cluster</span><span class="w"> </span><span class="err">of</span><span class="w"> </span><span class="err">Ocelot’s.</span><span class="w">
        </span><span class="err">NoLoadBalancer</span><span class="w"> </span><span class="err">-</span><span class="w"> </span><span class="err">takes</span><span class="w"> </span><span class="err">the</span><span class="w"> </span><span class="err">first</span><span class="w"> </span><span class="err">available</span><span class="w"> </span><span class="err">service</span><span class="w"> </span><span class="err">from</span><span class="w"> </span><span class="err">config</span><span class="w"> </span><span class="err">or</span><span class="w"> </span><span class="err">service</span><span class="w"> </span><span class="err">discovery.</span><span class="w">
        </span><span class="err">CookieStickySessions</span><span class="w"> </span><span class="err">-</span><span class="w"> </span><span class="err">uses</span><span class="w"> </span><span class="err">a</span><span class="w"> </span><span class="err">cookie</span><span class="w"> </span><span class="err">to</span><span class="w"> </span><span class="err">stick</span><span class="w"> </span><span class="err">all</span><span class="w"> </span><span class="err">requests</span><span class="w"> </span><span class="err">to</span><span class="w"> </span><span class="err">a</span><span class="w"> </span><span class="err">specific</span><span class="w"> </span><span class="err">server</span><span class="w">
      </span><span class="err">*/</span><span class="w">

      </span><span class="nl">"LoadBalancerOptions"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"Type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"LeastConnection"</span><span class="w">
      </span><span class="p">}</span><span class="w">

    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<p><strong>ocelot.global.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">
</span><span class="p">{</span><span class="w">
  </span><span class="nl">"GlobalConfiguration"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"RequestIdKey"</span><span class="p">:</span><span class="w"> </span><span class="s2">"OcRequestId"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"DownstreamScheme"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"UseServiceDiscovery"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"ServiceDiscoveryProvider"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Host"</span><span class="p">:</span><span class="w"> </span><span class="s2">"bff.web"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Port"</span><span class="p">:</span><span class="w"> </span><span class="mi">80</span><span class="p">,</span><span class="w">
      </span><span class="err">//Type</span><span class="w"> </span><span class="err">can</span><span class="w"> </span><span class="err">be</span><span class="w"> </span><span class="err">Consul</span><span class="p">,</span><span class="w"> </span><span class="err">Eureka</span><span class="w">
      </span><span class="nl">"Type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Eureka"</span><span class="w"> 
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<p><strong>ocelot.SwaggerEndPoints.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">
</span><span class="p">{</span><span class="w">
  </span><span class="nl">"SwaggerEndPoints"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"bff.web"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"TransformByOcelotConfig"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Config"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"Name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"BFF.Web"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1.0"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://bff.web:80/swagger/v1/swagger.json"</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"location"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"TransformByOcelotConfig"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Config"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"Name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Location.API"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1.0"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://bff.web:80/location/swagger/v1/swagger.json"</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<ul>
  <li>Add AlterUpstream class in Config folder</li>
</ul>

<p><strong>AlterUpstream.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Newtonsoft.Json</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Newtonsoft.Json.Linq</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">BFF.Web.Config</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">AlterUpstream</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">static</span> <span class="kt">string</span> <span class="nf">AlterUpstreamSwaggerJson</span><span class="p">(</span><span class="n">HttpContext</span> <span class="n">context</span><span class="p">,</span> <span class="kt">string</span> <span class="n">swaggerJson</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">swagger</span> <span class="p">=</span> <span class="n">JObject</span><span class="p">.</span><span class="nf">Parse</span><span class="p">(</span><span class="n">swaggerJson</span><span class="p">);</span>
            <span class="c1">// ... alter upstream json</span>
            <span class="k">return</span> <span class="n">swagger</span><span class="p">.</span><span class="nf">ToString</span><span class="p">(</span><span class="n">Formatting</span><span class="p">.</span><span class="n">Indented</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Modify Program.cs file as follows</li>
</ul>

<p><strong>Program.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">BFF.Web.Config</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">MMLib.SwaggerForOcelot.DependencyInjection</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ocelot.DependencyInjection</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ocelot.Middleware</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ocelot.Provider.Eureka</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ocelot.Provider.Polly</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Steeltoe.Discovery.Client</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Steeltoe.Discovery.Eureka</span><span class="p">;</span>

<span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="n">WebApplication</span><span class="p">.</span><span class="nf">CreateBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>

<span class="c1">// Add services to the container.</span>

<span class="kt">var</span> <span class="n">routes</span> <span class="p">=</span> <span class="s">""</span><span class="p">;</span>
<span class="cp">#if DEBUG
</span><span class="n">routes</span> <span class="p">=</span> <span class="s">"Routes.dev"</span><span class="p">;</span>
<span class="cp">#else
</span><span class="n">routes</span> <span class="p">=</span> <span class="s">"Routes.prod"</span><span class="p">;</span>
<span class="cp">#endif
</span><span class="p">;</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Configuration</span><span class="p">.</span><span class="nf">AddOcelotWithSwaggerSupport</span><span class="p">(</span><span class="n">options</span> <span class="p">=&gt;</span>
<span class="p">{</span>
    <span class="n">options</span><span class="p">.</span><span class="n">Folder</span> <span class="p">=</span> <span class="n">routes</span><span class="p">;</span>
<span class="p">});</span>

<span class="c1">// Configure ocelot</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddOcelot</span><span class="p">(</span><span class="n">builder</span><span class="p">.</span><span class="n">Configuration</span><span class="p">).</span><span class="nf">AddEureka</span><span class="p">().</span><span class="nf">AddPolly</span><span class="p">();</span>

<span class="c1">//builder.Services.AddOcelot(builder.Configuration).AddPolly();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddSwaggerForOcelot</span><span class="p">(</span><span class="n">builder</span><span class="p">.</span><span class="n">Configuration</span><span class="p">);</span>

<span class="c1">// Add or register service discovery to your application</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddServiceDiscovery</span><span class="p">(</span><span class="n">o</span> <span class="p">=&gt;</span> <span class="n">o</span><span class="p">.</span><span class="nf">UseEureka</span><span class="p">());</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Host</span><span class="p">.</span><span class="nf">ConfigureAppConfiguration</span><span class="p">((</span><span class="n">hostingContext</span><span class="p">,</span> <span class="n">config</span><span class="p">)</span> <span class="p">=&gt;</span>
<span class="p">{</span>
    <span class="n">config</span><span class="p">.</span><span class="nf">SetBasePath</span><span class="p">(</span><span class="n">Directory</span><span class="p">.</span><span class="nf">GetCurrentDirectory</span><span class="p">())</span>
    <span class="p">.</span><span class="nf">AddJsonFile</span><span class="p">(</span><span class="s">"appsettings.json"</span><span class="p">,</span> <span class="n">optional</span><span class="p">:</span> <span class="k">false</span><span class="p">,</span> <span class="n">reloadOnChange</span><span class="p">:</span> <span class="k">true</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">AddJsonFile</span><span class="p">(</span><span class="s">$"appsettings.local.json"</span><span class="p">,</span> <span class="n">optional</span><span class="p">:</span> <span class="k">true</span><span class="p">,</span> <span class="n">reloadOnChange</span><span class="p">:</span> <span class="k">true</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">AddJsonFile</span><span class="p">(</span><span class="s">$"appsettings.</span><span class="p">{</span><span class="n">hostingContext</span><span class="p">.</span><span class="n">HostingEnvironment</span><span class="p">.</span><span class="n">EnvironmentName</span><span class="p">}</span><span class="s">.json"</span><span class="p">,</span> <span class="n">optional</span><span class="p">:</span> <span class="k">true</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">AddOcelot</span><span class="p">(</span><span class="n">routes</span><span class="p">,</span> <span class="n">builder</span><span class="p">.</span><span class="n">Environment</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">AddEnvironmentVariables</span><span class="p">();</span>
<span class="p">});</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">();</span>
<span class="c1">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddEndpointsApiExplorer</span><span class="p">();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddSwaggerGen</span><span class="p">();</span>

<span class="kt">var</span> <span class="n">app</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

<span class="c1">// Configure the HTTP request pipeline.</span>
<span class="k">if</span> <span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">Environment</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
<span class="p">{</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwagger</span><span class="p">();</span>
    <span class="c1">//app.UseSwaggerUI();</span>
<span class="p">}</span>



<span class="c1">//app.UseHttpsRedirection();</span>

<span class="c1">//app.UseOcelot();</span>
<span class="n">app</span><span class="p">.</span><span class="nf">UseAuthorization</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseSwaggerForOcelotUI</span><span class="p">(</span><span class="n">options</span> <span class="p">=&gt;</span>
<span class="p">{</span>
    <span class="n">options</span><span class="p">.</span><span class="n">PathToSwaggerGenerator</span> <span class="p">=</span> <span class="s">"/swagger/docs"</span><span class="p">;</span>
    <span class="n">options</span><span class="p">.</span><span class="n">ReConfigureUpstreamSwaggerJson</span> <span class="p">=</span> <span class="n">AlterUpstream</span><span class="p">.</span><span class="n">AlterUpstreamSwaggerJson</span><span class="p">;</span>

<span class="p">}).</span><span class="nf">UseOcelot</span><span class="p">().</span><span class="nf">Wait</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">MapControllers</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>

</code></pre></div></div>

<ul>
  <li>Now modify appsettings.json for BFF.Web</li>
</ul>

<p><strong>Appsettings.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">
</span><span class="p">{</span><span class="w">
  </span><span class="nl">"Logging"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"LogLevel"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Default"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Information"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Microsoft.AspNetCore"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Warning"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Microsoft.Hosting.Lifetime"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Information"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">


  </span><span class="nl">"Spring"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"Application"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"SERVICE.BFF.Web"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"Eureka"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"Client"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"ServiceUrl"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://eureka-server:8761/eureka/"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"ValidateCertificates"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
      </span><span class="nl">"ShouldRegisterWithEureka"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
    </span><span class="p">},</span><span class="w">

    </span><span class="nl">"Instance"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"NonSecurePort"</span><span class="p">:</span><span class="w"> </span><span class="mi">80</span><span class="p">,</span><span class="w">
      </span><span class="nl">"HostName"</span><span class="p">:</span><span class="w"> </span><span class="s2">"bff.web"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"InstanceId"</span><span class="p">:</span><span class="w"> </span><span class="s2">"BFF.Web"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"StatusPageUrlPath"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/swagger/index.html"</span><span class="w">
      </span><span class="err">//</span><span class="nl">"HealthCheckUrlPath"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/api/values/healthcheck"</span><span class="w">
      </span><span class="err">//</span><span class="nl">"StatusPageUrlPath"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/api/values/status"</span><span class="w">
    </span><span class="p">},</span><span class="w">

    </span><span class="nl">"AllowedHosts"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*"</span><span class="w">
  </span><span class="p">}</span><span class="w">

</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<p><strong>Step 7: Configure docker-compose</strong></p>

<ul>
  <li>Add docker-compose file in the project and modify as follows</li>
</ul>

<p><strong>docker-compose.yml</strong></p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">3.4'</span>

<span class="na">services</span><span class="pi">:</span>

  <span class="na">eureka-server</span><span class="pi">:</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">eureka-server</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">steeltoeoss/eurekaserver:latest</span>
    <span class="na">restart</span><span class="pi">:</span> <span class="s">on-failure</span>
    <span class="na">hostname</span><span class="pi">:</span> <span class="s">eureka-server</span>
    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">backend_network</span>
    <span class="c1">#ports:</span>
    <span class="c1"># - "8761:8761"</span>

  <span class="na">locationa.api</span><span class="pi">:</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">locationa.api</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">${DOCKER_REGISTRY-}locationaapi</span>
    <span class="na">restart</span><span class="pi">:</span> <span class="s">on-failure</span>
    <span class="na">hostname</span><span class="pi">:</span> <span class="s">locationa.api</span>
    <span class="na">build</span><span class="pi">:</span>
      <span class="na">context</span><span class="pi">:</span> <span class="s">.</span>
      <span class="na">dockerfile</span><span class="pi">:</span> <span class="s">Locationa.API/Dockerfile</span>
    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">backend_network</span>

  <span class="na">locationb.api</span><span class="pi">:</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">locationb.api</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">${DOCKER_REGISTRY-}locationbapi</span>
    <span class="na">restart</span><span class="pi">:</span> <span class="s">on-failure</span>
    <span class="na">hostname</span><span class="pi">:</span> <span class="s">locationb.api</span>
    <span class="na">build</span><span class="pi">:</span>
      <span class="na">context</span><span class="pi">:</span> <span class="s">.</span>
      <span class="na">dockerfile</span><span class="pi">:</span> <span class="s">LocationB.API/Dockerfile</span>
    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">backend_network</span>

  <span class="na">locationc.api</span><span class="pi">:</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">locationc.api</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">${DOCKER_REGISTRY-}locationcapi</span>
    <span class="na">restart</span><span class="pi">:</span> <span class="s">on-failure</span>
    <span class="na">hostname</span><span class="pi">:</span> <span class="s">locationc.api</span>
    <span class="na">build</span><span class="pi">:</span>
      <span class="na">context</span><span class="pi">:</span> <span class="s">.</span>
      <span class="na">dockerfile</span><span class="pi">:</span> <span class="s">LocationC.API/Dockerfile</span>
    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">backend_network</span>


  <span class="na">bff.web</span><span class="pi">:</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">bff.web</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">${DOCKER_REGISTRY-}bffweb</span>
    <span class="na">restart</span><span class="pi">:</span> <span class="s">on-failure</span>
    <span class="na">hostname</span><span class="pi">:</span> <span class="s">bff.web</span>
    <span class="na">build</span><span class="pi">:</span>
      <span class="na">context</span><span class="pi">:</span> <span class="s">.</span>
      <span class="na">dockerfile</span><span class="pi">:</span> <span class="s">BFF.Web/Dockerfile</span>
    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">backend_network</span>


<span class="na">networks</span><span class="pi">:</span>
    <span class="na">backend_network</span><span class="pi">:</span>

</code></pre></div></div>

<p><strong>docker-compose.override.yml</strong></p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">3.4'</span>

<span class="na">services</span><span class="pi">:</span>
  <span class="na">eureka-server</span><span class="pi">:</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">EUREKA_SERVER_ENABLE_SELF_PRESERVATION=false</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">8761:8761</span>



  <span class="na">locationa.api</span><span class="pi">:</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">ASPNETCORE_ENVIRONMENT=Development</span>
      <span class="c1">#- ASPNETCORE_URLS=https://+:443;http://+:80</span>
      <span class="pi">-</span> <span class="s">ASPNETCORE_URLS=http://+:80</span>
      <span class="pi">-</span> <span class="s">EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">9001:80"</span>
      <span class="c1">#- "4001:443"</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">${APPDATA}/Microsoft/UserSecrets:/root/.microsoft/usersecrets:ro</span>
      <span class="pi">-</span> <span class="s">${APPDATA}/ASP.NET/Https:/root/.aspnet/https:ro</span>
    <span class="na">depends_on</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">eureka-server</span>

  <span class="na">locationb.api</span><span class="pi">:</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">ASPNETCORE_ENVIRONMENT=Development</span>
      <span class="pi">-</span> <span class="s">ASPNETCORE_URLS=http://+:80</span>
      <span class="pi">-</span> <span class="s">EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">9002:80"</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">${APPDATA}/Microsoft/UserSecrets:/root/.microsoft/usersecrets:ro</span>
      <span class="pi">-</span> <span class="s">${APPDATA}/ASP.NET/Https:/root/.aspnet/https:ro</span>
    <span class="na">depends_on</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">eureka-server</span>


  <span class="na">locationc.api</span><span class="pi">:</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">ASPNETCORE_ENVIRONMENT=Development</span>
      <span class="pi">-</span> <span class="s">ASPNETCORE_URLS=http://+:80</span>
      <span class="pi">-</span> <span class="s">EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">9003:80"</span>
    <span class="na">depends_on</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">eureka-server</span>

  <span class="na">bff.web</span><span class="pi">:</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">ASPNETCORE_ENVIRONMENT=Development</span>
      <span class="pi">-</span> <span class="s">ASPNETCORE_URLS=http://+:80</span>
      <span class="pi">-</span> <span class="s">EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">8001:80"</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">${APPDATA}/Microsoft/UserSecrets:/root/.microsoft/usersecrets:ro</span>
      <span class="pi">-</span> <span class="s">${APPDATA}/ASP.NET/Https:/root/.aspnet/https:ro</span>
    <span class="na">depends_on</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">eureka-server</span>
      <span class="pi">-</span> <span class="s">locationa.api</span>
      <span class="pi">-</span> <span class="s">locationb.api</span>
      <span class="pi">-</span> <span class="s">locationc.api</span>

</code></pre></div></div>

<ul>
  <li>Now open your browser and visit http://localhost:8761/ to see Eureka server</li>
</ul>

<p><strong>Step 8: Now run the applications</strong></p>

<ul>
  <li>Set docker-compose as start up project</li>
  <li>Now run the application</li>
  <li>Now browse location service using BFF. You will get different data from different service as round robin basis</li>
  <li>You will see Eureka server as follows.</li>
</ul>

<p><img src="/assets/images/posts/2023/sd-03.PNG" alt="" /></p>

<p><strong><a href="https://github.com/mahedee/code-sample02/tree/main/sd-docker-demo">Source code</a></strong></p>]]></content><author><name>Mahedee Hasan</name></author><category term="C#" /><category term="ASP.NET Core" /><category term="Eureka" /><category term="Microservices" /><category term="Software Architecture" /><category term="Load Balancer" /><category term="csharp" /><category term="aspnetcore" /><category term="eureka" /><category term="microservices" /><category term="softwarearchitecture" /><category term="lb" /><summary type="html"><![CDATA[A load balancer is a component that distributes incoming network traffic across multiple servers to optimize resource utilization, maximize throughput, minimize response time, and avoid overloading any single server. Eureka is a service discovery tool provided by Netflix OSS, it can be used to solve load balancing by registering all instances of a service with Eureka and having the load balancer forward traffic to those instances. The Eureka server maintains a registry of all available instances of a service, and clients of the service query the registry to obtain a list of available service instances. The load balancer can then use this information to distribute incoming requests to the available service instances. In this article, I will show you how to configure load balancer using Eureka and ocelot in API gateway.]]></summary></entry></feed>