<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://mahedee.net//feed.xml" rel="self" type="application/atom+xml" /><link href="https://mahedee.net//" rel="alternate" type="text/html" /><updated>2025-01-18T11:05:06-05:00</updated><id>https://mahedee.net//feed.xml</id><title type="html">Think Simple</title><subtitle>Think Simple</subtitle><author><name>Mahedee Hasan</name></author><entry><title type="html">Simplifying E-Commerce Order Processing with the Facade Design Pattern in C#</title><link href="https://mahedee.net//simplifying-e-commerce-order-processing-with-the-facade-design-pattern-in-csharp/" rel="alternate" type="text/html" title="Simplifying E-Commerce Order Processing with the Facade Design Pattern in C#" /><published>2025-01-05T00:00:00-05:00</published><updated>2025-01-05T00:00:00-05:00</updated><id>https://mahedee.net//simplifying-e-commerce-order-processing-with-the-facade-design-pattern-in-csharp</id><content type="html" xml:base="https://mahedee.net//simplifying-e-commerce-order-processing-with-the-facade-design-pattern-in-csharp/"><![CDATA[<p>Managing the complexity of modern software systems can be a daunting task, especially when interacting with multiple interconnected subsystems. One practical approach to handle this challenge is the Facade Design Pattern, which provides a simplified interface to access complex subsystems. In this article, we’ll explore how the Facade Design Pattern can streamline the processing of orders in an e-commerce platform, using C# for implementation.</p>

<p><strong>What is the Facade Design Pattern?</strong>
The Facade Design Pattern is a structural pattern that simplifies the interaction between a client and multiple subsystems by providing a unified interface. It hides the complexities of the subsystems and offers a cleaner, more maintainable way for the client to access their functionality.</p>

<p><strong>Key components of the Facade Design Pattern</strong></p>

<ul>
  <li><strong>Facade</strong>: The interface that provides a simplified access to the subsystems.</li>
  <li><strong>Subsystem</strong>: The individual components or classes that make up the complex system.</li>
  <li><strong>Client</strong>: The code that interacts with the Facade to access the subsystems’ functionality.</li>
</ul>

<p><strong>Problem Statement: E-Commerce Order Processing</strong>
In an e-commerce platform, order processing involves multiple systems:</p>

<ul>
  <li>Inventory Management: To check stock availability.</li>
  <li>Payment Gateway: To process payments securely.</li>
  <li>Shipping System: To schedule deliveries.</li>
  <li>Notification Service: To send order confirmation emails.</li>
</ul>

<p>Directly managing these subsystems can lead to:</p>

<ul>
  <li>Complex Code: Multiple layers of logic and interdependencies.</li>
  <li>Error-Prone Processes: Increased chances of bugs.</li>
  <li>Reduced Maintainability: Difficult to adapt to future changes.</li>
</ul>

<p><strong>Solution: Using the Facade Design Pattern</strong></p>

<p>By introducing a Facade, we encapsulate the complexity of these subsystems into a single interface, allowing the client to interact with them seamlessly.</p>

<p><strong>Key Components of the Solution</strong></p>

<ul>
  <li>Subsystems:
    <ul>
      <li>Handle individual responsibilities (e.g., Inventory, Payment, Shipping, Notification).</li>
    </ul>
  </li>
  <li>Facade:
    <ul>
      <li>Acts as the unified interface for the client.</li>
    </ul>
  </li>
  <li>Client:
    <ul>
      <li>Interacts only with the Facade for simplified order processing.</li>
    </ul>
  </li>
</ul>

<p><strong>UML Class Diagram of the Facade Design Pattern:</strong></p>

<p><img src="/assets/images/posts/2025/facade-ecommerce.drawio.png" alt="" /></p>

<p><strong>Implementation in C#</strong></p>

<p>Let’s implement the Facade Design Pattern for e-commerce order processing in C#.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">ECommerceFacade</span>
<span class="p">{</span>

    <span class="c1">// Define subsystems</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">InventorySystem</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">bool</span> <span class="nf">CheckStock</span><span class="p">(</span><span class="kt">string</span> <span class="n">item</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">$"Checking stock for </span><span class="p">{</span><span class="n">item</span><span class="p">}</span><span class="s">..."</span><span class="p">);</span>
            <span class="k">return</span> <span class="k">true</span><span class="p">;</span> <span class="c1">// Assume stock is available</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="k">void</span> <span class="nf">UpdateInventory</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Updating inventory..."</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">class</span> <span class="nc">PaymentGateway</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">bool</span> <span class="nf">ProcessPayment</span><span class="p">(</span><span class="kt">string</span> <span class="n">cardDetails</span><span class="p">,</span> <span class="kt">decimal</span> <span class="n">amount</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">$"Processing payment of $</span><span class="p">{</span><span class="n">amount</span><span class="p">}</span><span class="s"> using </span><span class="p">{</span><span class="n">cardDetails</span><span class="p">}</span><span class="s">..."</span><span class="p">);</span>
            <span class="k">return</span> <span class="k">true</span><span class="p">;</span> <span class="c1">// Assume payment is successful</span>
        <span class="p">}</span>
    <span class="p">}</span>


    <span class="k">public</span> <span class="k">class</span> <span class="nc">ShippingSystem</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">void</span> <span class="nf">ScheduleDelivery</span><span class="p">(</span><span class="kt">string</span> <span class="n">item</span><span class="p">,</span> <span class="kt">string</span> <span class="n">address</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">$"Scheduling delivery of </span><span class="p">{</span><span class="n">item</span><span class="p">}</span><span class="s"> to </span><span class="p">{</span><span class="n">address</span><span class="p">}</span><span class="s">..."</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">class</span> <span class="nc">NotificationService</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">void</span> <span class="nf">SendOrderConfirmation</span><span class="p">(</span><span class="kt">string</span> <span class="n">email</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">$"Sending order confirmation email to </span><span class="p">{</span><span class="n">email</span><span class="p">}</span><span class="s">..."</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// Define Facade</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">OrderProcessingFacade</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">InventorySystem</span> <span class="n">_inventorySystem</span><span class="p">;</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">PaymentGateway</span> <span class="n">_paymentGateway</span><span class="p">;</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">ShippingSystem</span> <span class="n">_shippingSystem</span><span class="p">;</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">NotificationService</span> <span class="n">_notificationService</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">OrderProcessingFacade</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">_inventorySystem</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">InventorySystem</span><span class="p">();</span>
            <span class="n">_paymentGateway</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">PaymentGateway</span><span class="p">();</span>
            <span class="n">_shippingSystem</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">ShippingSystem</span><span class="p">();</span>
            <span class="n">_notificationService</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">NotificationService</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">void</span> <span class="nf">PlaceOrder</span><span class="p">(</span><span class="kt">string</span> <span class="n">item</span><span class="p">,</span> <span class="kt">string</span> <span class="n">cardDetails</span><span class="p">,</span> <span class="kt">decimal</span> <span class="n">amount</span><span class="p">,</span> <span class="kt">string</span> <span class="n">address</span><span class="p">,</span> <span class="kt">string</span> <span class="n">email</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Starting order processing..."</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(!</span><span class="n">_inventorySystem</span><span class="p">.</span><span class="nf">CheckStock</span><span class="p">(</span><span class="n">item</span><span class="p">))</span>
            <span class="p">{</span>
                <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Item is out of stock."</span><span class="p">);</span>
                <span class="k">return</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="n">_inventorySystem</span><span class="p">.</span><span class="nf">UpdateInventory</span><span class="p">();</span>

            <span class="k">if</span> <span class="p">(!</span><span class="n">_paymentGateway</span><span class="p">.</span><span class="nf">ProcessPayment</span><span class="p">(</span><span class="n">cardDetails</span><span class="p">,</span> <span class="n">amount</span><span class="p">))</span>
            <span class="p">{</span>
                <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Payment failed."</span><span class="p">);</span>
                <span class="k">return</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="n">_shippingSystem</span><span class="p">.</span><span class="nf">ScheduleDelivery</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">address</span><span class="p">);</span>
            <span class="n">_notificationService</span><span class="p">.</span><span class="nf">SendOrderConfirmation</span><span class="p">(</span><span class="n">email</span><span class="p">);</span>

            <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Order processed successfully!"</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>


    <span class="c1">// Client</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Program</span>
    <span class="p">{</span>
        <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">orderFacade</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">OrderProcessingFacade</span><span class="p">();</span>

            <span class="c1">// Order details</span>
            <span class="kt">string</span> <span class="n">item</span> <span class="p">=</span> <span class="s">"Laptop"</span><span class="p">;</span>
            <span class="kt">string</span> <span class="n">cardDetails</span> <span class="p">=</span> <span class="s">"1234-5678-9876-5432"</span><span class="p">;</span>
            <span class="kt">decimal</span> <span class="n">amount</span> <span class="p">=</span> <span class="m">1200.00m</span><span class="p">;</span>
            <span class="kt">string</span> <span class="n">address</span> <span class="p">=</span> <span class="s">"123 Main St, Toronto, ON"</span><span class="p">;</span>
            <span class="kt">string</span> <span class="n">email</span> <span class="p">=</span> <span class="s">"customer@example.com"</span><span class="p">;</span>

            <span class="c1">// Place the order</span>
            <span class="n">orderFacade</span><span class="p">.</span><span class="nf">PlaceOrder</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">cardDetails</span><span class="p">,</span> <span class="n">amount</span><span class="p">,</span> <span class="n">address</span><span class="p">,</span> <span class="n">email</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Output</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Starting order processing...
Checking stock for Laptop...
Updating inventory...
Processing payment of $1200.00 using 1234-5678-9876-5432...
Scheduling delivery of Laptop to 123 Main St, Toronto, ON...
Sending order confirmation email to customer@example.com...
Order processed successfully!
</code></pre></div></div>

<p><strong>How it Works:</strong></p>
<ul>
  <li>Subsystems handle specific operations like checking stocks, processing payments, scheduling deliveries, and sending notifications.</li>
  <li>The <code class="language-plaintext highlighter-rouge">OrderProcessingFacade</code> encapsulates the interactions with these subsystems, providing a single entry point for order processing using the <code class="language-plaintext highlighter-rouge">PlaceOrder</code> method.</li>
  <li>The client interacts with the <code class="language-plaintext highlighter-rouge">OrderProcessingFacade</code> to place an order, simplifying the complex workflow into a single method call.</li>
</ul>

<p><strong>Benefits of the Facade Design Pattern</strong></p>
<ul>
  <li>Simplified Client Interaction: The client only needs to call one method.</li>
  <li>Encapsulation of Complexity: Subsystems are hidden from the client.</li>
  <li>Improved Maintainability: Changes to subsystems are isolated from the client.</li>
  <li>Code Reusability: The Facade can be reused across different parts of the application.</li>
</ul>

<p><strong>Conclusion</strong>
The Facade Design Pattern is an essential tool for developers to manage complex systems in a scalable and maintainable way. In our e-commerce example, it transformed a complicated order-processing workflow into a straightforward client interaction. By applying this pattern, you can make your applications more user-friendly and robust, whether you’re working on e-commerce platforms, multimedia systems, or any other domain.</p>

<p>Happy coding!</p>

<p><strong><a href="https://github.com/mahedee/code-sample02/tree/master/ECommerceFacade">Source code</a></strong></p>]]></content><author><name>Mahedee Hasan</name></author><category term="C#" /><category term="Design Pattern" /><category term="Software Architecture" /><category term="csharp" /><category term="design-pattern" /><category term="software-architecture" /><category term="facade-pattern" /><summary type="html"><![CDATA[Discover how the Facade Design Pattern simplifies e-commerce order processing by unifying complex subsystems into a single interface. This article provides a step-by-step C# implementation to streamline order workflows and enhance maintainability.]]></summary></entry><entry><title type="html">Simplifying Complex Systems: 10 Real-World Use Cases of the Facade Design Pattern</title><link href="https://mahedee.net//facade_design_pattern_real_world_use_cases/" rel="alternate" type="text/html" title="Simplifying Complex Systems: 10 Real-World Use Cases of the Facade Design Pattern" /><published>2025-01-04T00:00:00-05:00</published><updated>2025-01-04T00:00:00-05:00</updated><id>https://mahedee.net//facade_design_pattern_real_world_use_cases</id><content type="html" xml:base="https://mahedee.net//facade_design_pattern_real_world_use_cases/"><![CDATA[<p>In software development, complexity is often a necessary evil. Large systems typically consist of multiple components that interact with one another in intricate ways. The Facade Design Pattern offers a simple yet powerful solution to manage this complexity by providing a unified interface to a set of subsystems. This article explores the essence of the Facade Pattern and its application in 10 real-world scenarios.</p>

<p><strong>What is the Facade Design Pattern?</strong>
The Facade Design Pattern is a structural design pattern that simplifies interactions with complex systems. It introduces a single class, called the Facade, which provides a streamlined interface to underlying subsystems. This pattern promotes ease of use, enhances maintainability, and decouples high-level modules from low-level implementation details.</p>

<p><strong>Key Components of the Facade Pattern</strong></p>
<ul>
  <li><strong>Facade:</strong> The central interface that interacts with the client and coordinates with subsystems.</li>
  <li><strong>Subsystems:</strong> The complex internal modules that perform specific functionalities.</li>
  <li><strong>Client:</strong> The external entity that uses the facade to interact with the system.</li>
</ul>

<p><strong>How the Facade Pattern Works</strong></p>
<ul>
  <li>The client sends a request to the facade.</li>
  <li>The facade coordinates with relevant subsystems to fulfill the request.</li>
  <li>The subsystems execute their specific tasks, abstracted from the client.
This process simplifies interactions and allows the client to focus on the primary functionalities without being burdened by the system’s complexities.</li>
</ul>

<p><strong>Real-World Use Cases of the Facade Pattern</strong></p>
<ol>
  <li><strong>Home Automation System</strong></li>
</ol>

<p><strong>Problem:</strong> A home automation system consists of various components such as lighting, security, and temperature control. Managing these subsystems individually can be cumbersome.</p>

<p><strong>Solution:</strong> A facade class encapsulates the interactions with each subsystem, providing a unified interface for controlling the entire home environment.</p>

<p><strong>Key Components:</strong></p>
<ul>
  <li>Facade:  HomeAutomationFacade</li>
  <li>Subsystems: LightingSystem, SecuritySystem, TemperatureControlSystem</li>
  <li>Client: HomeOwner</li>
</ul>

<p><strong>How It Works:</strong> The HomeAutomationFacade class exposes methods like turnOnLights(), enableSecurity(), and setTemperature() to the client. These methods internally coordinate with the respective subsystems to perform the desired actions.</p>

<p><strong>Benefits:</strong> Simplified control of multiple home automation components, reduced complexity for the homeowner, and improved system maintainability.</p>

<ol>
  <li><strong>Payment Gateway Integration</strong></li>
</ol>

<p><strong>Problem:</strong> Integrating multiple payment gateways with different APIs and protocols can be challenging for e-commerce platforms.</p>

<p><strong>Solution:</strong> A facade class abstracts the complexities of payment gateway integration, providing a unified interface for processing payments.</p>

<p><strong>Key Components:</strong></p>
<ul>
  <li>Facade: PaymentGatewayFacade</li>
  <li>Subsystems: PayPalGateway, StripeGateway, AuthorizeNetGateway</li>
  <li>Client: E-commerce Platform</li>
</ul>

<p><strong>How It Works:</strong> The PaymentGatewayFacade class exposes methods like processPayment() and refundPayment() to the client. These methods internally interact with the specific payment gateway subsystems based on the payment method chosen by the customer.</p>

<p><strong>Benefits:</strong> Seamless integration of multiple payment gateways, reduced development effort, and improved scalability for e-commerce platforms.</p>

<ol>
  <li><strong>E-commerce Checkout System</strong></li>
</ol>

<p><strong>Problem:</strong> Managing the complexities of checkout processes, including payment, shipping, and order management, can be overwhelming for e-commerce applications.</p>

<p><strong>Solution:</strong> A facade class simplifies the checkout process by coordinating interactions with payment, shipping, and order subsystems.</p>

<p><strong>Key Components:</strong></p>
<ul>
  <li>Facade: Checkout Manager</li>
  <li>Subsystems: Payment Gateway, Inventory, Shipping</li>
  <li>Client: E-commerce Customer</li>
</ul>

<p><strong>How It Works:</strong> During checkout, the facade manages inventory verification, payment processing, and shipping arrangements, abstracting these tasks from the user.</p>

<p><strong>Benefits:</strong> Streamlined checkout process, improved user experience, and enhanced maintainability of e-commerce applications.</p>

<ol>
  <li><strong>Operating System Interface</strong></li>
</ol>

<p><strong>Problem:</strong> Interacting with low-level operating system functionalities can be complex and platform-dependent.</p>

<p><strong>Solution:</strong> A facade class provides a high-level interface to common operating system operations, shielding the client from underlying complexities.</p>

<p><strong>Key Components:</strong></p>
<ul>
  <li>Facade: OSInterface</li>
  <li>Subsystems: Filesystem, Network, Process Management</li>
  <li>Client: Application Developer</li>
</ul>

<p><strong>How It Works:</strong> The OSInterface facade exposes methods like readFile(), writeFile(), and createProcess() to the client, which internally interact with the respective subsystems.</p>

<p><strong>Benefits:</strong> Platform-independent access to operating system functionalities, simplified development of system-level applications, and improved code portability.</p>

<ol>
  <li><strong>Travel Booking System</strong></li>
</ol>

<p><strong>Problem:</strong> Coordinating bookings across multiple travel services, including flights, hotels, and car rentals, requires handling diverse APIs and data formats.</p>

<p><strong>Solution:</strong> A facade class abstracts the complexities of travel booking, providing a unified interface for managing reservations.</p>

<p><strong>Key Components:</strong></p>
<ul>
  <li>Facade: TravelBookingFacade</li>
  <li>Subsystems: FlightBooking, HotelBooking, CarRental</li>
  <li>Client: Traveler</li>
</ul>

<p><strong>How It Works:</strong> The user selects a travel package through the Facade. The Facade communicates with each subsystem to finalize reservations and generate a single booking confirmation.</p>

<p><strong>Benefits:</strong> Simplified travel booking process, reduced complexity for travelers, and improved scalability for travel</p>

<ol>
  <li><strong>Social Media Integration</strong></li>
</ol>

<p><strong>Problem:</strong> Integrating social media platforms for sharing content and user authentication involves managing multiple APIs and authorization mechanisms.</p>

<p><strong>Solution:</strong> A facade class abstracts the intricacies of social media integration, providing a unified interface for interacting with various platforms.</p>

<p><strong>Key Components:</strong></p>
<ul>
  <li>Facade: SocialMediaFacade</li>
  <li>Subsystems: Facebook, Twitter, Instagram</li>
  <li>Client: Application User</li>
</ul>

<p><strong>How It Works:</strong> The SocialMediaFacade class exposes methods like sharePost(), authenticateUser(), and fetchProfile() to the client, which internally interacts with the respective social media subsystems.</p>

<p><strong>Benefits:</strong> Simplified social media integration, enhanced user engagement, and improved cross-platform compatibility for applications.</p>

<ol>
  <li><strong>Customer Relationship Management (CRM) System</strong></li>
</ol>

<p><strong>Problem:</strong> Managing customer interactions, sales pipelines, and marketing campaigns across multiple channels can be complex for CRM applications.</p>

<p><strong>Solution:</strong> A facade class simplifies CRM operations by providing a unified interface for customer data management and communication.</p>

<p><strong>Key Components:</strong></p>
<ul>
  <li>Facade: CRMFacade</li>
  <li>Subsystems: CustomerDatabase, SalesPipeline, MarketingCampaign</li>
  <li>Client: CRM User</li>
</ul>

<p><strong>How It Works:</strong> The CRMFacade class exposes methods like addCustomer(), createOpportunity(), and launchCampaign() to the client, which internally interacts with the CRM subsystems.</p>

<p><strong>Benefits:</strong> Streamlined customer management, improved sales efficiency, and enhanced marketing automation for CRM applications.</p>

<ol>
  <li><strong>Healthcare Management System</strong></li>
</ol>

<p><strong>Problem:</strong> Healthcare systems involve managing patient records, appointment scheduling, and medical billing, which can be complex and time-consuming.</p>

<p><strong>Solution:</strong> A facade class simplifies healthcare operations by providing a unified interface for managing patient data and medical processes.</p>

<p><strong>Key Components:</strong></p>
<ul>
  <li>Facade: HealthcareFacade</li>
  <li>Subsystems: PatientRecords, AppointmentScheduling, MedicalBilling</li>
  <li>Client: Healthcare Provider</li>
</ul>

<p><strong>How It Works:</strong> Doctors and staff interact with the Facade to fetch patient histories, book appointments, and generate bills, reducing complexity. For example, the HealthcareFacade class exposes methods like getPatientRecord(), scheduleAppointment(), and generateBill() to the client.</p>

<ol>
  <li><strong>Banking Transaction Systems</strong></li>
</ol>

<p><strong>Problem:</strong> Banking systems need to coordinate account verification, balance checking, transaction execution, and notifications.</p>

<p><strong>Solution:</strong> A facade class simplifies banking transactions by providing a unified interface for managing account operations.</p>

<p><strong>Key Components:</strong></p>
<ul>
  <li>Facade: BankingFacade</li>
  <li>Subsystems: AccountVerificationSystem, BalanceChecker, TransactionProcessor, NotificationSystem</li>
  <li>Client: Bank Customer</li>
</ul>

<p><strong>How It Works:</strong> The Facade ensures smooth execution of transactions by validating accounts, ensuring sufficient balance, completing the transaction, and notifying users. For example, the BankingFacade class exposes methods like verifyAccount(), checkBalance(), and processTransaction() to the client, which internally interacts with the respective banking subsystems.</p>

<p><strong>Benefits:</strong> Streamlined banking operations, improved transaction security, and enhanced user experience for bank customers.</p>

<ol>
  <li><strong>Enterprise Resource Planning (ERP) Systems</strong></li>
</ol>

<p><strong>Problem:</strong> Managing supply chain, HR, finance, and production through separate modules can be overwhelming.</p>

<p><strong>Solution:</strong> A Facade offers a unified interface for employees to interact with the ERP system’s diverse modules.</p>

<p><strong>Key Components:</strong></p>
<ul>
  <li>Facade: ERPSystemFacade</li>
  <li>Subsystems: SupplyChainManagement, HRManagement, FinancialManagement, ProductionManagement</li>
  <li>Client: ERP User</li>
</ul>

<p><strong>How It Works:</strong> The Facade simplifies ERP operations by providing a single interface for accessing supply chain data, managing HR processes, tracking financial transactions, and monitoring production schedules.</p>

<p><strong>Benefits:</strong> Enhanced productivity, improved data visibility, and streamlined business processes for organizations.</p>

<p><strong>Conclusion</strong>
The Facade design pattern simplifies complex systems by providing a unified interface to interact with multiple subsystems. The Facade pattern is a structural design pattern that simplifies complex systems by providing a unified interface to interact with multiple subsystems. The Facade pattern is a structural design pattern that simplifies complex systems by providing a unified interface to interact with multiple subsystems.</p>]]></content><author><name>Mahedee Hasan</name></author><category term="Design Pattern" /><category term="Software Architecture" /><category term="design-pattern" /><category term="software-architecture" /><category term="facade-pattern" /><summary type="html"><![CDATA[Simplify complex software systems with the Facade Design Pattern. Explore its key components and discover 10 real-world use cases where it streamlines operations and enhances maintainability.]]></summary></entry><entry><title type="html">Simplifying Complex Systems with the Facade Design Pattern in C#</title><link href="https://mahedee.net//simplifying_complex_systems_with_the_facade_design_pattern_in_csharp/" rel="alternate" type="text/html" title="Simplifying Complex Systems with the Facade Design Pattern in C#" /><published>2025-01-03T00:00:00-05:00</published><updated>2025-01-03T00:00:00-05:00</updated><id>https://mahedee.net//simplifying_complex_systems_with_the_facade_design_pattern_in_csharp</id><content type="html" xml:base="https://mahedee.net//simplifying_complex_systems_with_the_facade_design_pattern_in_csharp/"><![CDATA[<p><strong>What is the Facade Design Pattern?</strong>
Facade pronounce as fuh-sahd (/fəˈsɑːd/) is a structural design pattern that provides a simplified interface to a complex system of classes, libraries, or APIs. It acts as a unified interface that hides the complexities of the underlying system and provides a more straightforward way to interact with it.</p>

<p><strong>Why use the Facade Design Pattern?</strong></p>
<ul>
  <li>Simplifies complex systems by providing a more intuitive interface.</li>
  <li>Decouples client code from implementation details.</li>
  <li>Makes code easier to understand, maintain, and extend.</li>
  <li>Promotes code reusability, modularity, and flexibility by encapsulating complex logic behind a simple interface.</li>
</ul>

<p><strong>Key components of the Facade Design Pattern:</strong></p>
<ul>
  <li><strong>Facade:</strong> The facade is a class that provides a simplified interface to the complex system. It delegates client requests to the appropriate subsystems.</li>
  <li><strong>Subsystem:</strong> These are the classes or components that make up the complex system. The facade delegates requests to these subsystems to perform specific tasks.</li>
  <li><strong>Client:</strong> The client is the code that interacts with the facade to access the system’s functionality. The client doesn’t need to know the details of the subsystems.</li>
</ul>

<p><strong>UML Class Diagram of the Facade Design Pattern:</strong></p>

<p><img src="/assets/images/posts/2025/facade-design-pattern.drawio.png" alt="" /></p>

<p><strong>How to implement the Observer Facade Pattern in C#?</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">FacadePattern</span>
<span class="p">{</span>
    <span class="c1">// Subsystem 1</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">SubsystemA</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">void</span> <span class="nf">OperationA</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"SubsystemA: OperationA executed."</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// Subsystem 2</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">SubsystemB</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">void</span> <span class="nf">OperationB</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"SubsystemB: OperationB executed."</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// Subsystem 3</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">SubsystemC</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">void</span> <span class="nf">OperationC</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"SubsystemC: OperationC executed."</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// Subsystem 4</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">SubsystemD</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">void</span> <span class="nf">OperationD</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"SubsystemD: OperationD executed."</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// Facade</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Facade</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="n">SubsystemA</span> <span class="n">_subsystemA</span><span class="p">;</span>
        <span class="k">private</span> <span class="n">SubsystemB</span> <span class="n">_subsystemB</span><span class="p">;</span>
        <span class="k">private</span> <span class="n">SubsystemC</span> <span class="n">_subsystemC</span><span class="p">;</span>
        <span class="k">private</span> <span class="n">SubsystemD</span> <span class="n">_subsystemD</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">Facade</span><span class="p">(</span><span class="n">SubsystemA</span> <span class="n">subsystemA</span><span class="p">,</span> <span class="n">SubsystemB</span> <span class="n">subsystemB</span><span class="p">,</span> 
            <span class="n">SubsystemC</span> <span class="n">subsystemC</span><span class="p">,</span> <span class="n">SubsystemD</span> <span class="n">subsystemD</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_subsystemA</span> <span class="p">=</span> <span class="n">subsystemA</span><span class="p">;</span>
            <span class="n">_subsystemB</span> <span class="p">=</span> <span class="n">subsystemB</span><span class="p">;</span>
            <span class="n">_subsystemC</span> <span class="p">=</span> <span class="n">subsystemC</span><span class="p">;</span>
            <span class="n">_subsystemD</span> <span class="p">=</span> <span class="n">subsystemD</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">void</span> <span class="nf">PerformOperation1</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Operation 1\n"</span> <span class="p">+</span>
                              <span class="s">"-----------"</span><span class="p">);</span>
            <span class="n">_subsystemA</span><span class="p">.</span><span class="nf">OperationA</span><span class="p">();</span>
            <span class="n">_subsystemB</span><span class="p">.</span><span class="nf">OperationB</span><span class="p">();</span>
            <span class="n">_subsystemC</span><span class="p">.</span><span class="nf">OperationC</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">void</span> <span class="nf">PerformOperation2</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Operation 2\n"</span> <span class="p">+</span>
                              <span class="s">"-----------"</span><span class="p">);</span>
            <span class="n">_subsystemA</span><span class="p">.</span><span class="nf">OperationA</span><span class="p">();</span>
            <span class="n">_subsystemD</span><span class="p">.</span><span class="nf">OperationD</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>


    <span class="c1">// Client</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Program</span>
    <span class="p">{</span>
        <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">// Create subsystems</span>
            <span class="kt">var</span> <span class="n">subsystemA</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">SubsystemA</span><span class="p">();</span>
            <span class="kt">var</span> <span class="n">subsystemB</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">SubsystemB</span><span class="p">();</span>
            <span class="kt">var</span> <span class="n">subsystemC</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">SubsystemC</span><span class="p">();</span>
            <span class="kt">var</span> <span class="n">subsystemD</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">SubsystemD</span><span class="p">();</span>

            <span class="c1">// Create facade</span>
            <span class="kt">var</span> <span class="n">facade</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Facade</span><span class="p">(</span><span class="n">subsystemA</span><span class="p">,</span> <span class="n">subsystemB</span><span class="p">,</span> <span class="n">subsystemC</span><span class="p">,</span> <span class="n">subsystemD</span><span class="p">);</span>

            <span class="c1">// Use facade to perform operations</span>
            <span class="n">facade</span><span class="p">.</span><span class="nf">PerformOperation1</span><span class="p">();</span>
            <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">();</span>
            <span class="n">facade</span><span class="p">.</span><span class="nf">PerformOperation2</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Output</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Operation 1
-----------
SubsystemA: OperationA executed.
SubsystemB: OperationB executed.
SubsystemC: OperationC executed.

Operation 2
-----------
SubsystemA: OperationA executed.
SubsystemD: OperationD executed.

</code></pre></div></div>

<p><strong>Conclusion</strong>
At the end of this article, you should have a good understanding of the Facade Design Pattern and how to implement it in C#. By using the Facade pattern, you can simplify complex systems, improve code readability, and make your codebase more maintainable and extensible. In the next article, I will discuss with some real-world examples of the Facade pattern.</p>

<p>Happy coding!</p>

<p><strong><a href="https://github.com/mahedee/code-sample02/tree/master/FacadePattern">Source code</a></strong></p>]]></content><author><name>Mahedee Hasan</name></author><category term="C#" /><category term="Design Pattern" /><category term="Software Architecture" /><category term="csharp" /><category term="design-pattern" /><category term="software-architecture" /><category term="facade-pattern" /><summary type="html"><![CDATA[Learn how to simplify complex systems with the Facade Design Pattern in C#. This article explores the key concepts behind the Facade pattern and demonstrates its implementation with a real-world example. Whether you're new to design patterns or looking to streamline your code, this guide will help you understand how to apply the Facade pattern to create cleaner and more manageable code.]]></summary></entry><entry><title type="html">Real-Time vs Persistent Notifications: Choosing Between Observer Pattern and Databases</title><link href="https://mahedee.net//real_time_vs_persistent_notifications_observer_pattern_or_databases/" rel="alternate" type="text/html" title="Real-Time vs Persistent Notifications: Choosing Between Observer Pattern and Databases" /><published>2024-12-02T00:00:00-05:00</published><updated>2024-12-02T00:00:00-05:00</updated><id>https://mahedee.net//real_time_vs_persistent_notifications_observer_pattern_or_databases</id><content type="html" xml:base="https://mahedee.net//real_time_vs_persistent_notifications_observer_pattern_or_databases/"><![CDATA[<p>In modern application development, delivering timely and accurate notifications is crucial to ensuring a seamless user experience. However, the mechanisms used to handle notifications can vary significantly depending on the application’s needs. Two commonly used approaches are the <strong>Observer Design Pattern</strong> for real-time notifications and <strong>databases</strong> for persistent notifications. This article delves into the differences between these methods, their practical use cases, and guidance on when to use each.</p>

<p><strong>Understanding the Basics</strong></p>

<p><strong>The Observer Pattern</strong><br />
The Observer pattern is a behavioral design pattern where an object, called the <strong>subject</strong>, maintains a list of its dependents, known as <strong>observers</strong>, and notifies them of any state changes. It is ideal for scenarios requiring <strong>real-time updates</strong>.</p>

<p><strong>Key Characteristics:</strong></p>
<ul>
  <li>Real-time notifications.</li>
  <li>Decouples subjects and observers.</li>
  <li>Flexible for dynamic subscription and unsubscription.</li>
</ul>

<p><strong>Example:</strong> Stock market applications notify registered users of price changes in real-time.</p>

<p><strong>Database-Driven Notifications</strong>
In contrast, databases are used to store notifications persistently. Applications periodically query the database or send notifications based on database triggers. This approach suits scenarios where users may not need immediate updates.</p>

<p><strong>Key Characteristics:</strong></p>
<ul>
  <li>Persistent data storage.</li>
  <li>Reliable for offline access.</li>
  <li>Better for historical data retrieval and reporting.</li>
</ul>

<p><strong>Example:</strong> Email notifications for account activity or billing reminders are generated and stored in a database before being sent to users.</p>

<p><strong>When to Use the Observer Pattern</strong></p>

<p><strong>1. Real-Time Updates</strong><br />
When users need <strong>instant notifications</strong> about events, such as:</p>
<ul>
  <li>Stock price changes.</li>
  <li>Live sports scores.</li>
  <li>Real-time chat applications.</li>
</ul>

<p><strong>Why Use Observer Pattern?</strong><br />
The Observer pattern’s ability to push updates immediately ensures users receive information without delay.</p>

<p><strong>2. Dynamic User Subscriptions</strong><br />
In scenarios where users frequently subscribe or unsubscribe to updates, such as:</p>
<ul>
  <li>News apps with customizable notifications.</li>
  <li>Weather updates for specific locations.</li>
</ul>

<p><strong>Why Use Observer Pattern?</strong><br />
The pattern dynamically manages subscriptions without requiring extensive database operations.</p>

<p><strong>3. Event-Driven Architectures</strong><br />
Applications with a high volume of <strong>events triggering actions</strong> benefit from the Observer pattern, such as:</p>
<ul>
  <li>IoT systems where sensors notify a central system of status changes.</li>
  <li>Gaming systems providing real-time alerts.</li>
</ul>

<p><strong>When to Use Databases for Notifications</strong></p>

<p><strong>1. Historical Data and Persistent Storage</strong><br />
When notifications need to be stored for later reference or analytics, such as:</p>
<ul>
  <li>Banking apps saving transaction alerts.</li>
  <li>E-commerce platforms storing order updates.</li>
</ul>

<p><strong>Why Use Databases?</strong><br />
Databases ensure data integrity and allow users to access past notifications at any time.</p>

<p><strong>2. Offline Notifications</strong><br />
For applications where users might not always be connected, such as:</p>
<ul>
  <li>Travel apps storing booking confirmations.</li>
  <li>Educational platforms saving course notifications.</li>
</ul>

<p><strong>Why Use Databases?</strong><br />
Databases allow notifications to persist until the user reconnects.</p>

<p><strong>3. Bulk Notifications</strong><br />
When sending notifications to a large user base, such as:</p>
<ul>
  <li>Marketing emails or SMS campaigns.</li>
  <li>System-wide announcements in corporate tools.</li>
</ul>

<p><strong>Why Use Databases?</strong><br />
Databases can batch-process notifications and ensure delivery to all recipients without overwhelming the system.</p>

<p><strong>Combining Observer Pattern and Databases</strong></p>

<p>Many applications blend both approaches for a balanced solution. For example:</p>
<ul>
  <li>A news app uses the Observer pattern to deliver breaking news in real-time and stores all notifications in a database for users to browse later.</li>
  <li>A stock trading app pushes real-time price alerts using the Observer pattern while persisting all alerts in a database for audit purposes.</li>
</ul>

<p><strong>How It Works:</strong></p>
<ol>
  <li>The Observer pattern handles immediate delivery.</li>
  <li>A separate service persists the notifications in a database.</li>
  <li>Users can access past notifications through database queries.</li>
</ol>

<p><strong>Advantages and Limitations</strong></p>

<p><strong>Observer Pattern</strong><br />
<strong>Advantages:</strong></p>
<ul>
  <li>Provides instant updates.</li>
  <li>Decouples components for better scalability.</li>
</ul>

<p><strong>Limitations:</strong></p>
<ul>
  <li>May become complex with too many observers.</li>
  <li>No built-in persistence for notifications.</li>
</ul>

<h3 id="databases">Databases</h3>
<p><strong>Advantages:</strong></p>
<ul>
  <li>Reliable for storing and retrieving data.</li>
  <li>Ensures notifications are available even if users are offline.</li>
</ul>

<p><strong>Limitations:</strong></p>
<ul>
  <li>Cannot deliver real-time updates without additional components like polling or WebSockets.</li>
</ul>

<p><strong>Choosing the Right Approach</strong></p>

<table>
  <thead>
    <tr>
      <th><strong>Criterion</strong></th>
      <th><strong>Observer Pattern</strong></th>
      <th><strong>Database</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Notification Speed</strong></td>
      <td>Real-time</td>
      <td>Slightly delayed</td>
    </tr>
    <tr>
      <td><strong>Persistence</strong></td>
      <td>Not built-in</td>
      <td>Yes</td>
    </tr>
    <tr>
      <td><strong>Offline Access</strong></td>
      <td>No</td>
      <td>Yes</td>
    </tr>
    <tr>
      <td><strong>Dynamic Subscriptions</strong></td>
      <td>Highly suitable</td>
      <td>May require additional logic</td>
    </tr>
    <tr>
      <td><strong>Use Case Examples</strong></td>
      <td>Stock alerts, live sports updates</td>
      <td>Billing reminders, historical logs</td>
    </tr>
  </tbody>
</table>

<h2 id="conclusion">Conclusion</h2>

<p>The Observer pattern and databases serve distinct purposes in handling notifications. While the Observer pattern excels in real-time scenarios, databases provide reliability and persistence. Choosing the right approach—or combining both—depends on your application’s specific requirements. By understanding their strengths and limitations, you can design a notification system that meets both immediate and long-term needs effectively.</p>]]></content><author><name>Mahedee Hasan</name></author><category term="Design Pattern" /><category term="Software Architecture" /><category term="Database" /><category term="design-pattern" /><category term="software-architecture" /><category term="observer-pattern" /><category term="database" /><summary type="html"><![CDATA[Deciding between real-time notifications with the Observer pattern and persistent updates using databases can be challenging. This article breaks down their differences, practical use cases, and when to choose each approach to optimize your application's performance and user experience.]]></summary></entry><entry><title type="html">Leveraging the Observer Design Pattern : 10 Real-World Examples in Action</title><link href="https://mahedee.net//leveraging_the_observer_design_pattern_10_real_world_examples_in_action/" rel="alternate" type="text/html" title="Leveraging the Observer Design Pattern : 10 Real-World Examples in Action" /><published>2024-11-01T00:00:00-04:00</published><updated>2024-11-01T00:00:00-04:00</updated><id>https://mahedee.net//leveraging_the_observer_design_pattern_10_real_world_examples_in_action</id><content type="html" xml:base="https://mahedee.net//leveraging_the_observer_design_pattern_10_real_world_examples_in_action/"><![CDATA[<p>The Observer Design Pattern is a behavioral design pattern that allows an object (the <strong>subject</strong>) to notify multiple dependent objects (the <strong>observers</strong>) about changes in its state without knowing who or what those observers are. This pattern is widely used in software systems that require real-time updates or notifications. In this article, we will explore 10 real-world applications where the Observer Pattern is used to enable real-time communication, updates, or notifications.</p>

<p><strong>1. Social Media Notifications</strong></p>

<p><strong>Description:</strong>
Social media platforms, such as Facebook, Twitter, and Instagram, notify users of likes, comments, shares, and messages. These notifications keep users engaged and informed of activities on their posts and accounts they follow.</p>

<p><strong>Observer:</strong>
Users who follow posts, pages, or accounts and receive updates about activities on them.</p>

<p><strong>Subject:</strong>
Posts, accounts, or events that trigger notifications.</p>

<p><strong>How It Works:</strong>
When a user subscribes to a post or account, the system treats them as observers. When an activity (like, comment, share) occurs on the post, the platform (subject) notifies all the users observing it.</p>

<p><strong>2. Chat Applications</strong></p>

<p><strong>Description:</strong>
Messaging platforms, like WhatsApp and Slack, send real-time notifications to users when they receive new messages or mentions. This allows users to stay up-to-date with conversations even when they aren’t actively looking at the app.</p>

<p><strong>Observer:</strong>
Members of a chat group or users in a direct message thread.</p>

<p><strong>Subject:</strong>
The chat group or message thread where new messages are posted.</p>

<p><strong>How It Works:</strong>
Users subscribe to chat groups or message threads. When a new message is posted, the system (subject) notifies all users observing that group or conversation.</p>

<p><strong>3. Online Shopping and Stock Alerts</strong></p>

<p><strong>Description:</strong>
E-commerce platforms such as Amazon and eBay use the Observer Pattern to notify users about price changes, product restocks, or special promotions.</p>

<p><strong>Observer:</strong>
Customers who subscribe to updates for specific products.</p>

<p><strong>Subject:</strong>
The product or offer being tracked by the customer.</p>

<p><strong>How It Works:</strong>
Customers subscribe to specific products, and when any change occurs (e.g., price drop, availability), the platform (subject) notifies all users who have subscribed to that product.</p>

<p><strong>4. Event-Driven Monitoring Systems</strong></p>

<p><strong>Description:</strong>
IT infrastructure monitoring tools, such as Nagios and Datadog, monitor various metrics (e.g., server uptime, CPU usage, or disk space) and alert system administrators when an issue arises.</p>

<p><strong>Observer:</strong>
System administrators or monitoring teams who need real-time alerts.</p>

<p><strong>Subject:</strong>
The monitored system or resource, such as a server or application.</p>

<p><strong>How It Works:</strong>
The system (subject) tracks key metrics (e.g., CPU usage). If the metric crosses a predefined threshold, the system triggers a notification to all observers (admins) who are subscribed to the metric.</p>

<p><strong>5. News Feed Subscriptions</strong></p>

<p><strong>Description:</strong>
News platforms like Google News, BBC, and CNN allow users to follow specific topics, authors, or categories. When a new article is published under a subscribed category or by a followed author, users are notified immediately.</p>

<p><strong>Observer:</strong>
Users who subscribe to categories or authors.</p>

<p><strong>Subject:</strong>
Articles or content within a specific category or published by a specific author.</p>

<p><strong>How It Works:</strong>
When new content is published, the platform (subject) sends real-time updates to all users who are observing the particular topic or author.</p>

<p><strong>6. Gaming Leaderboards</strong></p>

<p><strong>Description:</strong>
Online games, like Fortnite or PUBG, notify players of leaderboard changes, upcoming challenges, or rewards.</p>

<p><strong>Observer:</strong>
Players who track the game’s leaderboard or their in-game performance.</p>

<p><strong>Subject:</strong>
The game’s leaderboard or event system.</p>

<p><strong>How It Works:</strong>
Players subscribe to notifications about leaderboard updates. When their rank changes or when a new event is available, the game (subject) sends an update to the players observing the leaderboard.</p>

<p><strong>7. IoT Systems</strong></p>

<p><strong>Description:</strong>
Smart home devices, such as thermostats (Nest), security cameras, and smart lights, notify users of changes or status updates in real time.</p>

<p><strong>Observer:</strong>
Homeowners or users accessing the smart home system via an app or device.</p>

<p><strong>Subject:</strong>
IoT devices, such as cameras, thermostats, or motion detectors.</p>

<p><strong>How It Works:</strong>
The IoT system (subject) monitors connected devices. When a change occurs (e.g., door opens, temperature rises), the system sends notifications to the users (observers) who are subscribed to those events.</p>

<p><strong>8. Auction Platforms</strong></p>

<p><strong>Description:</strong>
Auction platforms, such as eBay, notify participants of new bids, bid price changes, or auction closing times.</p>

<p><strong>Observer:</strong>
Bidders participating in an auction.</p>

<p><strong>Subject:</strong>
The auction itself, including the item being sold.</p>

<p><strong>How It Works:</strong>
When users place bids on an item, they subscribe to updates. If a bid is placed or the auction is about to close, the platform (subject) notifies all active bidders.</p>

<p><strong>9. Real-Time Traffic Updates</strong></p>

<p><strong>Description:</strong>
Navigation apps like Google Maps and Waze notify users about traffic conditions, road closures, or new incidents along their route.</p>

<p><strong>Observer:</strong>
Drivers using the navigation system.</p>

<p><strong>Subject:</strong>
The route being taken by the user and the traffic data related to it.</p>

<p><strong>How It Works:</strong>
When drivers enter a route, they subscribe to real-time updates. The navigation system (subject) continuously monitors traffic data, and when there’s a change (e.g., a crash or road closure), it sends an update to users along the route.</p>

<p><strong>10. Stock Market and Cryptocurrency Tracking</strong></p>

<p><strong>Description:</strong>
Stock market applications such as Robinhood, E*TRADE, or cryptocurrency platforms like Coinbase notify users of price changes, market trends, or news affecting the stocks or cryptocurrencies they are following.</p>

<p><strong>Observer:</strong>
Investors or traders who are tracking specific financial assets.</p>

<p><strong>Subject:</strong>
The asset (e.g., a stock, cryptocurrency) being tracked.</p>

<p><strong>How It Works:</strong>
Users subscribe to specific stocks or cryptocurrencies. When the price or market trend changes, the system (subject) sends an update to all observers who have subscribed to the asset.</p>

<p><strong>Conclusion</strong></p>

<p>The Observer Design Pattern is invaluable when building systems that require real-time updates or notifications. Whether it’s used for social media notifications, real-time chat alerts, or system monitoring, the Observer pattern ensures that interested parties are notified as soon as an update occurs, improving responsiveness and interactivity. Understanding its real-world applications can help in architecting software systems that are both efficient and scalable.</p>]]></content><author><name>Mahedee Hasan</name></author><category term="Design Pattern" /><category term="Software Architecture" /><category term="design-pattern" /><category term="software-architecture" /><category term="observer-pattern" /><summary type="html"><![CDATA[Discover how the Observer design pattern transforms real-world applications with real-time updates and notifications. In this article, we explore 10 practical examples, from stock market alerts to weather updates, showcasing how subjects and observers work together seamlessly to deliver dynamic user experiences.]]></summary></entry><entry><title type="html">Observer Design Pattern: Create a Real-Time Stock Market Notification System in C#</title><link href="https://mahedee.net//observer_design_pattern_real_time_stock_market_notification_csharp/" rel="alternate" type="text/html" title="Observer Design Pattern: Create a Real-Time Stock Market Notification System in C#" /><published>2024-10-11T00:00:00-04:00</published><updated>2024-10-11T00:00:00-04:00</updated><id>https://mahedee.net//observer_design_pattern_real_time_stock_market_notification_csharp</id><content type="html" xml:base="https://mahedee.net//observer_design_pattern_real_time_stock_market_notification_csharp/"><![CDATA[<p><strong>What is the Observer Design Pattern?</strong>
The Observer Design Pattern is a behavioral design pattern that allows objects to be notified of changes to other objects’ states. It establishes a one-to-many dependency between objects, where the subject (the object being observed) maintains a list of observers (objects that are interested in its state) and notifies them of any changes.</p>

<p><strong>Why use the Observer Design Pattern?</strong>
The Observer pattern is useful when you need to notify multiple objects of changes to a single object’s state without tightly coupling them. It promotes loose coupling between objects, making it easier to maintain and extend the system. It is commonly used in event-driven systems, such as GUI frameworks, real-time monitoring systems, and notification systems.</p>

<p><strong>Key components of the Observer Design Pattern:</strong></p>
<ol>
  <li><strong>Subject</strong>: The object being observed, which maintains a list of observers and notifies them of changes to its state.</li>
  <li><strong>Observer</strong>: The object that is interested in the subject’s state and receives notifications when the subject’s state changes.</li>
  <li><strong>Concrete Subject</strong>: A specific implementation of the subject that contains the state to be observed.</li>
  <li><strong>Concrete Observer</strong>: A specific implementation of the observer that receives notifications from the subject.</li>
  <li><strong>Attach / Registration</strong>: The process of adding an observer to the subject’s list of observers.</li>
  <li><strong>Detach / Deregistration</strong>: The process of removing an observer from the subject’s list of observers.</li>
  <li><strong>Notify</strong>: The process of notifying all observers of changes to the subject’s state.</li>
</ol>

<p><strong>UML Class Diagram of the Observer Design Pattern:</strong></p>

<p><img src="/assets/images/posts/2024/observer-design-pattern.drawio.png" alt="" /></p>

<p><strong>How to implement the Observer Design Pattern in C#?</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">ObserverPattern</span>
<span class="p">{</span>
    <span class="c1">// IObserver interface is used to update all the observers</span>
    <span class="k">public</span> <span class="k">interface</span> <span class="nc">IObserver</span>
    <span class="p">{</span>
        <span class="c1">// Update method is called when the subject changes</span>
        <span class="k">void</span> <span class="nf">Update</span><span class="p">(</span><span class="kt">string</span> <span class="n">state</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="c1">// Interface for the subject</span>
    <span class="c1">// It has methods to attach, detach and notify the observers</span>
    <span class="k">public</span> <span class="k">interface</span> <span class="nc">ISubject</span>
    <span class="p">{</span>
        <span class="k">void</span> <span class="nf">Attach</span><span class="p">(</span><span class="n">IObserver</span> <span class="n">observer</span><span class="p">);</span>
        <span class="k">void</span> <span class="nf">Detach</span><span class="p">(</span><span class="n">IObserver</span> <span class="n">observer</span><span class="p">);</span>
        <span class="k">void</span> <span class="nf">Notify</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="c1">// Concreate Subject class</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">ConcreateSubject</span> <span class="p">:</span> <span class="n">ISubject</span>
    <span class="p">{</span>
        <span class="c1">// List of observers attached to the subject</span>
        <span class="k">private</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">IObserver</span><span class="p">&gt;</span> <span class="n">_observers</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">IObserver</span><span class="p">&gt;();</span>
        <span class="k">private</span> <span class="kt">string</span> <span class="n">_subjectState</span><span class="p">;</span>

        <span class="k">public</span> <span class="kt">string</span> <span class="n">SubjectState</span>
        <span class="p">{</span>
            <span class="k">get</span> <span class="p">=&gt;</span> <span class="n">_subjectState</span><span class="p">;</span>

            <span class="c1">// When the state changes of subject, notify all the observers</span>
            <span class="k">set</span>
            <span class="p">{</span>
                <span class="n">_subjectState</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span>
                <span class="c1">// Call Notify method to notify all the observers</span>
                <span class="nf">Notify</span><span class="p">();</span> 
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">void</span> <span class="nf">Attach</span><span class="p">(</span><span class="n">IObserver</span> <span class="n">observer</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_observers</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">observer</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">void</span> <span class="nf">Detach</span><span class="p">(</span><span class="n">IObserver</span> <span class="n">observer</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_observers</span><span class="p">.</span><span class="nf">Remove</span><span class="p">(</span><span class="n">observer</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">// Notify all the observers</span>
        <span class="k">public</span> <span class="k">void</span> <span class="nf">Notify</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="c1">// Call Update method of all the observers attached to the subject</span>
            <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">observer</span> <span class="k">in</span> <span class="n">_observers</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">observer</span><span class="p">.</span><span class="nf">Update</span><span class="p">(</span><span class="n">_subjectState</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// Concrete Observer class</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">ConcreateObserver</span> <span class="p">:</span> <span class="n">IObserver</span>
    <span class="p">{</span>
        <span class="c1">// Used to set the name of the observer</span>
        <span class="k">private</span> <span class="kt">string</span> <span class="n">_observerName</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">ConcreateObserver</span><span class="p">(</span><span class="kt">string</span> <span class="n">name</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_observerName</span> <span class="p">=</span> <span class="n">name</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="k">void</span> <span class="nf">Update</span><span class="p">(</span><span class="kt">string</span> <span class="n">state</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">$"</span><span class="p">{</span><span class="n">_observerName</span><span class="p">}</span><span class="s"> received update: State changed to </span><span class="p">{</span><span class="n">state</span><span class="p">}</span><span class="s">"</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>


    <span class="k">internal</span> <span class="k">class</span> <span class="nc">Program</span>
    <span class="p">{</span>
        <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">// Create a subject</span>
            <span class="n">ConcreateSubject</span> <span class="n">subject</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">ConcreateSubject</span><span class="p">();</span>

            <span class="c1">// Create observers</span>
            <span class="n">IObserver</span> <span class="n">observer1</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">ConcreateObserver</span><span class="p">(</span><span class="s">"Observer-1"</span><span class="p">);</span>
            <span class="n">IObserver</span> <span class="n">observer2</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">ConcreateObserver</span><span class="p">(</span><span class="s">"Observer-2"</span><span class="p">);</span>
            <span class="n">IObserver</span> <span class="n">observer3</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">ConcreateObserver</span><span class="p">(</span><span class="s">"Observer-3"</span><span class="p">);</span>

            <span class="c1">// Attach the observers to the subject</span>
            <span class="n">subject</span><span class="p">.</span><span class="nf">Attach</span><span class="p">(</span><span class="n">observer1</span><span class="p">);</span>
            <span class="n">subject</span><span class="p">.</span><span class="nf">Attach</span><span class="p">(</span><span class="n">observer2</span><span class="p">);</span>
            <span class="n">subject</span><span class="p">.</span><span class="nf">Attach</span><span class="p">(</span><span class="n">observer3</span><span class="p">);</span>

            <span class="c1">// Change the state of the subject</span>
            <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Changing state to State 1"</span><span class="p">);</span>
            <span class="n">subject</span><span class="p">.</span><span class="n">SubjectState</span> <span class="p">=</span> <span class="s">"State-1"</span><span class="p">;</span>

            <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Changing state to State 2"</span><span class="p">);</span>
            <span class="n">subject</span><span class="p">.</span><span class="n">SubjectState</span> <span class="p">=</span> <span class="s">"State-2"</span><span class="p">;</span>

            <span class="c1">// Detach observer 1</span>
            <span class="n">subject</span><span class="p">.</span><span class="nf">Detach</span><span class="p">(</span><span class="n">observer1</span><span class="p">);</span>

            <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Changing state to State 3"</span><span class="p">);</span>
            <span class="n">subject</span><span class="p">.</span><span class="n">SubjectState</span> <span class="p">=</span> <span class="s">"State-3"</span><span class="p">;</span>

            <span class="n">Console</span><span class="p">.</span><span class="nf">ReadLine</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>Output</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Changing state to State 1
Observer-1 received update: State changed to State-1
Observer-2 received update: State changed to State-1
Observer-3 received update: State changed to State-1
Changing state to State 2
Observer-1 received update: State changed to State-2
Observer-2 received update: State changed to State-2
Observer-3 received update: State changed to State-2
Changing state to State 3
Observer-2 received update: State changed to State-3
Observer-3 received update: State changed to State-3
</code></pre></div></div>

<p><strong>Use Case: Real-Time Stock Market Notification System</strong>
Imagine a stock market application where traders are notified every time the price of a stock changes. In this scenario, the stock price is the subject, and the traders are the observers. When the price of a stock changes, all the traders who are interested in that stock should be notified of the change. Let’s implement this use case using the Observer Design Pattern in C#.</p>

<p><strong>UML Class Diagram of the Real-Time Stock Market Notification System:</strong></p>

<p><img src="/assets/images/posts/2024/observer-design-pattern-stock-notification.drawio.png" alt="" /></p>

<p><strong>Implementation of the Real-Time Stock Market Notification System in C#</strong></p>

<p><strong>Step 1: Define the Observer Interface</strong>
The observer interface provides a common contract for all observers to implement.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">interface</span> <span class="nc">IObserver</span>
<span class="p">{</span>
    <span class="k">void</span> <span class="nf">Update</span><span class="p">(</span><span class="kt">string</span> <span class="n">symbol</span><span class="p">,</span> <span class="kt">decimal</span> <span class="n">price</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
<p><strong>Step 2: Define the Subject Interface</strong>
The subject interface defines the methods to register, unregister, and notify observers. Here we define it as <code class="language-plaintext highlighter-rouge">IStock</code>.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">interface</span> <span class="nc">IStock</span>
<span class="p">{</span>
    <span class="k">void</span> <span class="nf">Register</span><span class="p">(</span><span class="n">IObserver</span> <span class="n">observer</span><span class="p">);</span>
    <span class="k">void</span> <span class="nf">Unregister</span><span class="p">(</span><span class="n">IObserver</span> <span class="n">observer</span><span class="p">);</span>
    <span class="k">void</span> <span class="nf">Notify</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>Step 3: Implement the Stock Class</strong>
The <code class="language-plaintext highlighter-rouge">Stock</code> class is a concrete subject that maintains the stock price and notifies the observers when the price changes.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">class</span> <span class="nc">Stock</span> <span class="p">:</span> <span class="n">IStock</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="kt">string</span> <span class="n">_symbol</span><span class="p">;</span>
    <span class="k">private</span> <span class="kt">decimal</span> <span class="n">_price</span><span class="p">;</span>
    <span class="k">private</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">IObserver</span><span class="p">&gt;</span> <span class="n">_observers</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">IObserver</span><span class="p">&gt;();</span>

    <span class="k">public</span> <span class="nf">Stock</span><span class="p">(</span><span class="kt">string</span> <span class="n">symbol</span><span class="p">,</span> <span class="kt">decimal</span> <span class="n">price</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">_symbol</span> <span class="p">=</span> <span class="n">symbol</span><span class="p">;</span>
        <span class="n">_price</span> <span class="p">=</span> <span class="n">price</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">void</span> <span class="nf">Register</span><span class="p">(</span><span class="n">IObserver</span> <span class="n">observer</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">_observers</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">observer</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">void</span> <span class="nf">Unregister</span><span class="p">(</span><span class="n">IObserver</span> <span class="n">observer</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">_observers</span><span class="p">.</span><span class="nf">Remove</span><span class="p">(</span><span class="n">observer</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="c1">// If the price changes, notify the observers (traders)</span>
    <span class="c1">// Here we are calling the Notify method</span>
    <span class="k">public</span> <span class="k">void</span> <span class="nf">UpdatePrice</span><span class="p">(</span><span class="kt">decimal</span> <span class="n">price</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">_price</span> <span class="p">=</span> <span class="n">price</span><span class="p">;</span>
        <span class="nf">Notify</span><span class="p">();</span>
    <span class="p">}</span>
    <span class="k">public</span> <span class="k">void</span> <span class="nf">Notify</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">observer</span> <span class="k">in</span> <span class="n">_observers</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">observer</span><span class="p">.</span><span class="nf">Update</span><span class="p">(</span><span class="n">_symbol</span><span class="p">,</span> <span class="n">_price</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>Step 4: Implement the Trader Class</strong>
The <code class="language-plaintext highlighter-rouge">Trader</code> class is a concrete observer that receives notifications when the stock price changes.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">public</span> <span class="k">class</span> <span class="nc">Trader</span> <span class="p">:</span> <span class="n">IObserver</span>
 <span class="p">{</span>
     <span class="c1">// The observer's name</span>
     <span class="k">private</span> <span class="kt">string</span> <span class="n">_name</span><span class="p">;</span>

     <span class="k">public</span> <span class="nf">Trader</span><span class="p">(</span><span class="kt">string</span> <span class="n">name</span><span class="p">)</span>
     <span class="p">{</span>
         <span class="n">_name</span> <span class="p">=</span> <span class="n">name</span><span class="p">;</span>
     <span class="p">}</span>
     <span class="k">public</span> <span class="k">void</span> <span class="nf">Update</span><span class="p">(</span><span class="kt">string</span> <span class="n">symbol</span><span class="p">,</span> <span class="kt">decimal</span> <span class="n">price</span><span class="p">)</span>
     <span class="p">{</span>
         <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">$"Notified </span><span class="p">{</span><span class="n">_name</span><span class="p">}</span><span class="s"> of </span><span class="p">{</span><span class="n">symbol</span><span class="p">}</span><span class="s">'s price change to </span><span class="p">{</span><span class="n">price</span><span class="p">}</span><span class="s">"</span><span class="p">);</span>
     <span class="p">}</span>
 <span class="p">}</span>
</code></pre></div></div>

<p><strong>Step 5: Implement the Main Program</strong>
In the main program, we create a stock object and register traders as observers. When the stock price changes, the traders are notified.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">class</span> <span class="nc">Program</span>
<span class="p">{</span>

    <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="c1">// Create a stock</span>
        <span class="n">Stock</span> <span class="n">stock</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Stock</span><span class="p">(</span><span class="s">"MSFT"</span><span class="p">,</span> <span class="m">100.00m</span><span class="p">);</span>

        <span class="c1">// Create some traders</span>
        <span class="n">Trader</span> <span class="n">joe</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Trader</span><span class="p">(</span><span class="s">"Joe"</span><span class="p">);</span>
        <span class="n">Trader</span> <span class="n">sally</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Trader</span><span class="p">(</span><span class="s">"Sally"</span><span class="p">);</span>

        <span class="c1">// Register/subscribe the traders</span>
        <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Registering Joe and Sally"</span><span class="p">);</span>
        <span class="n">stock</span><span class="p">.</span><span class="nf">Register</span><span class="p">(</span><span class="n">joe</span><span class="p">);</span>
        <span class="n">stock</span><span class="p">.</span><span class="nf">Register</span><span class="p">(</span><span class="n">sally</span><span class="p">);</span>

        <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Changing stock price to 105.00m"</span><span class="p">);</span>
        <span class="c1">// Change the stock price</span>
        <span class="n">stock</span><span class="p">.</span><span class="nf">UpdatePrice</span><span class="p">(</span><span class="m">105.00m</span><span class="p">);</span>

        <span class="c1">// Change the stock price</span>
        <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Changing stock price to 110.00m"</span><span class="p">);</span>
        <span class="n">stock</span><span class="p">.</span><span class="nf">UpdatePrice</span><span class="p">(</span><span class="m">110.00m</span><span class="p">);</span>

        <span class="c1">// Unregister/unsubscribe a trader</span>
        <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Unregistering Joe"</span><span class="p">);</span>
        <span class="n">stock</span><span class="p">.</span><span class="nf">Unregister</span><span class="p">(</span><span class="n">joe</span><span class="p">);</span>

        <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Changing stock price to 115.00m"</span><span class="p">);</span>
        <span class="c1">// Change the stock price</span>
        <span class="n">stock</span><span class="p">.</span><span class="nf">UpdatePrice</span><span class="p">(</span><span class="m">115.00m</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Now, when you run the program, you should see the following output:</p>

<p><strong>Output</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Registering Joe and Sally
Changing stock price to 105.00m
Notified Joe of MSFT's price change to 105.00
Notified Sally of MSFT's price change to 105.00
Changing stock price to 110.00m
Notified Joe of MSFT's price change to 110.00
Notified Sally of MSFT's price change to 110.00
Unregistering Joe
Changing stock price to 115.00m
Notified Sally of MSFT's price change to 115.00
</code></pre></div></div>

<p>Happy coding!</p>

<p><strong><a href="https://github.com/mahedee/code-sample02/tree/master/ObserverPattern">Source code</a></strong></p>]]></content><author><name>Mahedee Hasan</name></author><category term="C#" /><category term="Design Pattern" /><category term="Software Architecture" /><category term="csharp" /><category term="design-pattern" /><category term="software-architecture" /><category term="observer-pattern" /><summary type="html"><![CDATA[In this article, we'll explore the Observer Design Pattern and its practical application in building a real-time stock market notification system using C#. You'll learn how to implement this pattern to efficiently manage stock price updates and notify users in real-time. The article provides step-by-step instructions, code examples, and insights into how the Observer pattern can be used to build responsive and scalable notification systems.]]></summary></entry><entry><title type="html">Boost Your Productivity - Setting Up and Customizing Windows Terminal with Git Bash and Oh My Posh</title><link href="https://mahedee.net//boost_your_productivity_setting_up_and_customizing_windows_terminal_with_oh_my_posh/" rel="alternate" type="text/html" title="Boost Your Productivity - Setting Up and Customizing Windows Terminal with Git Bash and Oh My Posh" /><published>2024-09-10T00:00:00-04:00</published><updated>2024-09-10T00:00:00-04:00</updated><id>https://mahedee.net//boost_your_productivity_setting_up_and_customizing_windows_terminal_with_oh_my_posh</id><content type="html" xml:base="https://mahedee.net//boost_your_productivity_setting_up_and_customizing_windows_terminal_with_oh_my_posh/"><![CDATA[<p>Windows Terminal is a versatile and powerful tool that allows you to work with multiple command-line environments in one place, including PowerShell, Command Prompt, WSL (Windows Subsystem for Linux), and now Git Bash. By customizing Windows Terminal with “Oh My Posh”, you can enhance your productivity with better themes, prompt customization, intellisence and more. This guide will walk you through configuring Windows Terminal, setting up Oh My Posh, integrating Git Bash, and switching between different terminal profiles.</p>

<p><strong>Step 1: Install Windows Terminal</strong></p>

<p>Before we dive into customizations, make sure Windows Terminal is installed on your system.</p>

<ul>
  <li>Install Windows Terminal via the Microsoft Store:
    <ul>
      <li>Open the <strong>Microsoft Store</strong> on your Windows PC.</li>
      <li>Search for <strong>Windows Terminal</strong> and click <strong>Install</strong>.</li>
    </ul>

    <p>Or, install it using the following PowerShell command:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> winget <span class="nb">install</span> <span class="nt">--id</span> Microsoft.WindowsTerminal <span class="nt">-e</span> <span class="nt">--source</span> winget
</code></pre></div>    </div>
  </li>
</ul>

<p><strong>Step 2: Install and Set Up Git Bash</strong></p>

<p>Git Bash is a popular terminal for developers who want a Unix-like experience on Windows. It comes bundled with Git for Windows. To integrate Git Bash into Windows Terminal:</p>

<ol>
  <li><strong>Download Git for Windows</strong>:
    <ul>
      <li>Go to <a href="https://git-scm.com/download/win">Git for Windows</a> and download the installer.</li>
      <li>Follow the installation instructions. Ensure that the option “Git Bash Here” is selected, so you can access Git Bash easily from your terminal.</li>
      <li>You can also install Git for Windows using the following command:</li>
    </ul>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> winget <span class="nb">install </span>Git.Git <span class="nt">-e</span> <span class="nt">--source</span> winget
</code></pre></div>    </div>
  </li>
  <li>
    <p><strong>Add Git Bash to Windows Terminal</strong>:
Once installed, you’ll need to add Git Bash as a profile in Windows Terminal.</p>

    <ul>
      <li>Open <strong>Windows Terminal</strong> and go to <strong>Settings</strong> (press <strong>Ctrl + ,</strong> or click on the drop-down menu and select <strong>Settings</strong>).</li>
      <li>
        <p>In the <strong>Settings</strong> window, click on <strong>Profiles</strong> and then click on the <strong>Open JSON file</strong> button.</p>
      </li>
      <li>
        <p>In the <strong>profiles.json</strong> file, scroll down to the <code class="language-plaintext highlighter-rouge">"profiles"</code> section and add Git Bash as a new profile like this:</p>

        <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"guid"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{some-guid-here}"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"hidden"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
    </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Git Bash"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"commandline"</span><span class="p">:</span><span class="w"> </span><span class="s2">"</span><span class="se">\"</span><span class="s2">C:</span><span class="se">\\</span><span class="s2">Program Files</span><span class="se">\\</span><span class="s2">Git</span><span class="se">\\</span><span class="s2">bin</span><span class="se">\\</span><span class="s2">bash.exe</span><span class="se">\"</span><span class="s2"> --login -i"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"icon"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ms-appx:///ProfileIcons/git-bash.png"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"startingDirectory"</span><span class="p">:</span><span class="w"> </span><span class="s2">"%USERPROFILE%"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div>        </div>
      </li>
      <li>Replace <code class="language-plaintext highlighter-rouge">{some-guid-here}</code> with a new GUID. You can generate a new GUID using a tool like <a href="https://www.guidgenerator.com/">GUID generator</a>.</li>
      <li>Save the file and close the editor.</li>
    </ul>

    <p>or,</p>
    <ul>
      <li>You can also add it by clicking on the “+” button in the profiles section called “Add a new profile”</li>
      <li>Click on New empty profile</li>
      <li>Name the profile “Git Bash”</li>
      <li>Add the commandline <code class="language-plaintext highlighter-rouge">"C:\\Program Files\\Git\\bin\\bash.exe" --login -i</code> or browse to the location of the <code class="language-plaintext highlighter-rouge">bash.exe</code> file.</li>
      <li>Icon: You can find the Git Bash icon in the Git installation directory. For example, <code class="language-plaintext highlighter-rouge">C:\Program Files\Git\mingw64\share\git\git-for-windows.ico</code>.
       - Starting Directory: <code class="language-plaintext highlighter-rouge">%USERPROFILE%</code>
       - Save the profile.</li>
    </ul>
  </li>
  <li><strong>Switch to Git Bash</strong>:
    <ul>
      <li>Once you’ve saved the profile, Git Bash will now be available in the Windows Terminal dropdown menu.</li>
      <li>Simply select <strong>Git Bash</strong> from the profiles list, and you can start using it in the same terminal window.</li>
    </ul>
  </li>
</ol>

<p><strong>Step 3: Install PowerShell Core (Optional)</strong></p>

<p>While Git Bash is now available, you might want to also use <strong>PowerShell Core</strong> (the cross-platform version of PowerShell). To install PowerShell Core:</p>

<ol>
  <li>Download <strong>PowerShell Core</strong> from the <a href="https://github.com/PowerShell/PowerShell/releases">official GitHub repository</a>.</li>
  <li>Follow the installation instructions for your system.</li>
  <li>Add <strong>PowerShell Core</strong> to Windows Terminal:
    <ul>
      <li>In <strong>Windows Terminal Settings</strong>, add a new profile for PowerShell Core by specifying the path to <code class="language-plaintext highlighter-rouge">pwsh.exe</code>.</li>
      <li>Save the settings.</li>
    </ul>
  </li>
</ol>

<p><strong>Step 4: Install a Font with Powerline Symbols</strong>
   To display special symbols properly, install a <strong>Powerline</strong> font like <strong>CaskaydiaCove</strong> or <strong>FiraCode</strong> from the <a href="https://www.nerdfonts.com/">Nerd Fonts website</a>.</p>
<ul>
  <li>Download the font and install it on your system.</li>
  <li>In my case, I have used <strong>CaskaydiaCove Nerd Font</strong>.</li>
  <li>Or, copy the font to the font directory: <code class="language-plaintext highlighter-rouge">C:\Windows\Fonts</code>.</li>
  <li>Set the installed font in Windows Terminal under <strong>Settings</strong> &gt; <strong>Profiles</strong> &gt; <strong>PowerShell</strong> &gt; <strong>Appearance</strong> &gt; <strong>Font face</strong>.</li>
</ul>

<p><strong>Step 5: Install and Set Up Oh My Posh for PowerShell</strong></p>

<p><strong>Oh My Posh</strong> is a prompt theme engine for PowerShell that can beautify your terminal with themes, segments, and additional functionality. To install it:</p>

<ol>
  <li><strong>Install Oh My Posh</strong>:
    <ul>
      <li>Go to https://ohmyposh.dev/docs/installation/windows and follow the instructions to set up Oh My Posh.
  or,</li>
      <li>Open a PowerShell prompt and run the following command:</li>
    </ul>
  </li>
</ol>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   winget <span class="nb">install </span>JanDeDobbeleer.OhMyPosh <span class="nt">-s</span> winget
</code></pre></div></div>

<ul>
  <li>This installs a couple of things:
    <ul>
      <li>oh-my-posh.exe - Windows executable</li>
      <li>themes - The latest Oh My Posh themes</li>
      <li>You can find the themes in the directory <code class="language-plaintext highlighter-rouge">C:\Users\{your-username}\AppData\Local\Programs\oh-my-posh\themes</code>.</li>
    </ul>
  </li>
  <li>Run following command to update oh-my-posh
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  winget upgrade JanDeDobbeleer.OhMyPosh <span class="nt">-s</span> winget
</code></pre></div>    </div>
  </li>
  <li>Run the following command to check oh-my-posh installed or not
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>oh-my-posh <span class="nt">--version</span>

or
oh-my-posh.exe
</code></pre></div>    </div>
  </li>
</ul>

<ol>
  <li><strong>Configure Powershell Profile</strong>:
    <ul>
      <li>Open PowerShell and run the following command to edit your profile. If you don’t have a profile, a window will prompt you to create one. or you can create a profile in the directory <code class="language-plaintext highlighter-rouge">C:\Users\{your-username}\Documents\PowerShell\Microsoft.PowerShell_profile.ps1</code>.</li>
    </ul>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> notepad <span class="nv">$PROFILE</span>
</code></pre></div>    </div>

    <ul>
      <li>
        <p>Add the following lines to the profile script to enable Oh My Posh:</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>oh-my-posh init pwsh | Invoke-Expression
</code></pre></div>        </div>
      </li>
      <li>
        <p>For advanced feature, I have customized my profile script. You can copy and paste it into your profile script. Here is my profile script. https://gist.github.com/mahedee/f7468bd2c59fa463235e877a8d719f98</p>
      </li>
    </ul>

    <p><strong>Microsoft.PowerShell_profile.ps1</strong></p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   using namespace System.Management.Automation
   using namespace System.Management.Automation.Language
      
   <span class="k">if</span> <span class="o">(</span><span class="nv">$host</span>.Name <span class="nt">-eq</span> <span class="s1">'ConsoleHost'</span><span class="o">)</span>
   <span class="o">{</span>
       Import-Module PSReadLine
   <span class="o">}</span>


   Import-Module <span class="nt">-Name</span> Terminal-Icons

   <span class="c"># oh-my-posh init pwsh --config C:\Users\mahedee\AppData\Local\Programs\oh-my-posh\themes\jandedobbeleer.omp.json | Invoke-Expression</span>
   oh-my-posh init pwsh <span class="nt">--config</span> C:<span class="se">\U</span>sers<span class="se">\m</span>ahedee<span class="se">\A</span>ppData<span class="se">\L</span>ocal<span class="se">\P</span>rograms<span class="se">\o</span>h-my-posh<span class="se">\t</span>hemes<span class="se">\m</span>yposh-mahedee.omp.json | Invoke-Expression
   <span class="c"># oh-my-posh init pwsh --config C:\Users\mahedee\AppData\Local\Programs\oh-my-posh\themes\myposh-hanselman.omp.json | Invoke-Expression</span>
   <span class="c"># oh-my-posh init pwsh --config C:\Users\mahedee\AppData\Local\Programs\oh-my-posh\themes\cobalt2.omp.json | Invoke-Expression</span>

   Register-ArgumentCompleter <span class="nt">-Native</span> <span class="nt">-CommandName</span> winget <span class="nt">-ScriptBlock</span> <span class="o">{</span>
       param<span class="o">(</span><span class="nv">$wordToComplete</span>, <span class="nv">$commandAst</span>, <span class="nv">$cursorPosition</span><span class="o">)</span>
           <span class="o">[</span>Console]::InputEncoding <span class="o">=</span> <span class="o">[</span>Console]::OutputEncoding <span class="o">=</span> <span class="nv">$OutputEncoding</span> <span class="o">=</span> <span class="o">[</span>System.Text.Utf8Encoding]::new<span class="o">()</span>
           <span class="nv">$Local</span>:word <span class="o">=</span> <span class="nv">$wordToComplete</span>.Replace<span class="o">(</span><span class="s1">'"'</span>, <span class="s1">'""'</span><span class="o">)</span>
           <span class="nv">$Local</span>:ast <span class="o">=</span> <span class="nv">$commandAst</span>.ToString<span class="o">()</span>.Replace<span class="o">(</span><span class="s1">'"'</span>, <span class="s1">'""'</span><span class="o">)</span>
           winget <span class="nb">complete</span> <span class="nt">--word</span><span class="o">=</span><span class="s2">"</span><span class="nv">$Local</span><span class="s2">:word"</span> <span class="nt">--commandline</span> <span class="s2">"</span><span class="nv">$Local</span><span class="s2">:ast"</span> <span class="nt">--position</span> <span class="nv">$cursorPosition</span> | ForEach-Object <span class="o">{</span>
               <span class="o">[</span>System.Management.Automation.CompletionResult]::new<span class="o">(</span><span class="nv">$_</span>, <span class="nv">$_</span>, <span class="s1">'ParameterValue'</span>, <span class="nv">$_</span><span class="o">)</span>
           <span class="o">}</span>
   <span class="o">}</span>

   <span class="c"># PowerShell parameter completion shim for the dotnet CLI</span>
   Register-ArgumentCompleter <span class="nt">-Native</span> <span class="nt">-CommandName</span> dotnet <span class="nt">-ScriptBlock</span> <span class="o">{</span>
       param<span class="o">(</span><span class="nv">$commandName</span>, <span class="nv">$wordToComplete</span>, <span class="nv">$cursorPosition</span><span class="o">)</span>
           dotnet <span class="nb">complete</span> <span class="nt">--position</span> <span class="nv">$cursorPosition</span> <span class="s2">"</span><span class="nv">$wordToComplete</span><span class="s2">"</span> | ForEach-Object <span class="o">{</span>
               <span class="o">[</span>System.Management.Automation.CompletionResult]::new<span class="o">(</span><span class="nv">$_</span>, <span class="nv">$_</span>, <span class="s1">'ParameterValue'</span>, <span class="nv">$_</span><span class="o">)</span>
           <span class="o">}</span>
   <span class="o">}</span>

   <span class="c"># ---</span>


   <span class="c"># This is an example profile for PSReadLine.</span>
   <span class="c">#</span>
   <span class="c"># This is roughly what I use so there is some emphasis on emacs bindings,</span>
   <span class="c"># but most of these bindings make sense in Windows mode as well.</span>

   <span class="c"># Searching for commands with up/down arrow is really handy.  The</span>
   <span class="c"># option "moves to end" is useful if you want the cursor at the end</span>
   <span class="c"># of the line while cycling through history like it does w/o searching,</span>
   <span class="c"># without that option, the cursor will remain at the position it was</span>
   <span class="c"># when you used up arrow, which can be useful if you forget the exact</span>
   <span class="c"># string you started the search on.</span>
   Set-PSReadLineKeyHandler <span class="nt">-Key</span> UpArrow <span class="nt">-Function</span> HistorySearchBackward
   Set-PSReadLineKeyHandler <span class="nt">-Key</span> DownArrow <span class="nt">-Function</span> HistorySearchForward

   <span class="c"># This key handler shows the entire or filtered history using Out-GridView. The</span>
   <span class="c"># typed text is used as the substring pattern for filtering. A selected command</span>
   <span class="c"># is inserted to the command line without invoking. Multiple command selection</span>
   <span class="c"># is supported, e.g. selected by Ctrl + Click.</span>
   Set-PSReadLineKeyHandler <span class="nt">-Key</span> F7 <span class="sb">`</span>
                           <span class="nt">-BriefDescription</span> History <span class="sb">`</span>
                           <span class="nt">-LongDescription</span> <span class="s1">'Show command history'</span> <span class="sb">`</span>
                           <span class="nt">-ScriptBlock</span> <span class="o">{</span>
       <span class="nv">$pattern</span> <span class="o">=</span> <span class="nv">$null</span>
       <span class="o">[</span>Microsoft.PowerShell.PSConsoleReadLine]::GetBufferState<span class="o">([</span>ref]<span class="nv">$pattern</span>, <span class="o">[</span>ref]<span class="nv">$null</span><span class="o">)</span>
       <span class="k">if</span> <span class="o">(</span><span class="nv">$pattern</span><span class="o">)</span>
       <span class="o">{</span>
           <span class="nv">$pattern</span> <span class="o">=</span> <span class="o">[</span>regex]::Escape<span class="o">(</span><span class="nv">$pattern</span><span class="o">)</span>
       <span class="o">}</span>

       <span class="nv">$history</span> <span class="o">=</span> <span class="o">[</span>System.Collections.ArrayList]@<span class="o">(</span>
           <span class="nv">$last</span> <span class="o">=</span> <span class="s1">''</span>
           <span class="nv">$lines</span> <span class="o">=</span> <span class="s1">''</span>
           foreach <span class="o">(</span><span class="nv">$line</span> <span class="k">in</span> <span class="o">[</span>System.IO.File]::ReadLines<span class="o">((</span>Get-PSReadLineOption<span class="o">)</span>.HistorySavePath<span class="o">))</span>
           <span class="o">{</span>
               <span class="k">if</span> <span class="o">(</span><span class="nv">$line</span>.EndsWith<span class="o">(</span><span class="s1">'`'</span><span class="o">))</span>
               <span class="o">{</span>
                   <span class="nv">$line</span> <span class="o">=</span> <span class="nv">$line</span>.Substring<span class="o">(</span>0, <span class="nv">$line</span>.Length - 1<span class="o">)</span>
                   <span class="nv">$lines</span> <span class="o">=</span> <span class="k">if</span> <span class="o">(</span><span class="nv">$lines</span><span class="o">)</span>
                   <span class="o">{</span>
                       <span class="s2">"</span><span class="nv">$lines</span><span class="sb">`</span>n<span class="nv">$line</span><span class="s2">"
                   }
                   else
                   {
                       </span><span class="nv">$line</span><span class="s2">
                   }
                   continue
               }

               if (</span><span class="nv">$lines</span><span class="s2">)
               {
                   </span><span class="nv">$line</span><span class="s2"> = "</span><span class="nv">$lines</span><span class="sb">`</span><span class="s2">n</span><span class="nv">$line</span><span class="s2">"</span>
                   <span class="nv">$lines</span> <span class="o">=</span> <span class="s1">''</span>
               <span class="o">}</span>

               <span class="k">if</span> <span class="o">((</span><span class="nv">$line</span> <span class="nt">-cne</span> <span class="nv">$last</span><span class="o">)</span> <span class="nt">-and</span> <span class="o">(!</span><span class="nv">$pattern</span> <span class="nt">-or</span> <span class="o">(</span><span class="nv">$line</span> <span class="nt">-match</span> <span class="nv">$pattern</span><span class="o">)))</span>
               <span class="o">{</span>
                   <span class="nv">$last</span> <span class="o">=</span> <span class="nv">$line</span>
                   <span class="nv">$line</span>
               <span class="o">}</span>
           <span class="o">}</span>
       <span class="o">)</span>
       <span class="nv">$history</span>.Reverse<span class="o">()</span>

       <span class="nv">$command</span> <span class="o">=</span> <span class="nv">$history</span> | Out-GridView <span class="nt">-Title</span> History <span class="nt">-PassThru</span>
       <span class="k">if</span> <span class="o">(</span><span class="nv">$command</span><span class="o">)</span>
       <span class="o">{</span>
           <span class="o">[</span>Microsoft.PowerShell.PSConsoleReadLine]::RevertLine<span class="o">()</span>
           <span class="o">[</span>Microsoft.PowerShell.PSConsoleReadLine]::Insert<span class="o">((</span><span class="nv">$command</span> <span class="nt">-join</span> <span class="s2">"</span><span class="sb">`</span>n<span class="s2">"))
       }
   }


   # CaptureScreen is good for blog posts or email showing a transaction
   # of what you did when asking for help or demonstrating a technique.
   Set-PSReadLineKeyHandler -Chord 'Ctrl+d,Ctrl+c' -Function CaptureScreen

   # The built-in word movement uses character delimiters, but token based word
   # movement is also very useful - these are the bindings you'd use if you
   # prefer the token based movements bound to the normal emacs word movement
   # key bindings.
   Set-PSReadLineKeyHandler -Key Alt+d -Function ShellKillWord
   Set-PSReadLineKeyHandler -Key Alt+Backspace -Function ShellBackwardKillWord
   Set-PSReadLineKeyHandler -Key Alt+b -Function ShellBackwardWord
   Set-PSReadLineKeyHandler -Key Alt+f -Function ShellForwardWord
   Set-PSReadLineKeyHandler -Key Alt+B -Function SelectShellBackwardWord
   Set-PSReadLineKeyHandler -Key Alt+F -Function SelectShellForwardWord

   #region Smart Insert/Delete

   # The next four key handlers are designed to make entering matched quotes
   # parens, and braces a nicer experience.  I'd like to include functions
   # in the module that do this, but this implementation still isn't as smart
   # as ReSharper, so I'm just providing it as a sample.

   Set-PSReadLineKeyHandler -Key '"</span><span class="s1">',"'</span><span class="s2">" </span><span class="sb">`</span>
                           <span class="nt">-BriefDescription</span> SmartInsertQuote <span class="sb">`</span><span class="s2">
                           -LongDescription "</span>Insert paired quotes <span class="k">if </span>not already on a quote<span class="s2">" </span><span class="sb">`</span>
                           <span class="nt">-ScriptBlock</span> <span class="o">{</span>
       param<span class="o">(</span><span class="nv">$key</span>, <span class="nv">$arg</span><span class="o">)</span>

       <span class="nv">$quote</span> <span class="o">=</span> <span class="nv">$key</span>.KeyChar

       <span class="nv">$selectionStart</span> <span class="o">=</span> <span class="nv">$null</span>
       <span class="nv">$selectionLength</span> <span class="o">=</span> <span class="nv">$null</span>
       <span class="o">[</span>Microsoft.PowerShell.PSConsoleReadLine]::GetSelectionState<span class="o">([</span>ref]<span class="nv">$selectionStart</span>, <span class="o">[</span>ref]<span class="nv">$selectionLength</span><span class="o">)</span>

       <span class="nv">$line</span> <span class="o">=</span> <span class="nv">$null</span>
       <span class="nv">$cursor</span> <span class="o">=</span> <span class="nv">$null</span>
       <span class="o">[</span>Microsoft.PowerShell.PSConsoleReadLine]::GetBufferState<span class="o">([</span>ref]<span class="nv">$line</span>, <span class="o">[</span>ref]<span class="nv">$cursor</span><span class="o">)</span>

       <span class="c"># If text is selected, just quote it without any smarts</span>
       <span class="k">if</span> <span class="o">(</span><span class="nv">$selectionStart</span> <span class="nt">-ne</span> <span class="nt">-1</span><span class="o">)</span>
       <span class="o">{</span>
           <span class="o">[</span>Microsoft.PowerShell.PSConsoleReadLine]::Replace<span class="o">(</span><span class="nv">$selectionStart</span>, <span class="nv">$selectionLength</span>, <span class="nv">$quote</span> + <span class="nv">$line</span>.SubString<span class="o">(</span><span class="nv">$selectionStart</span>, <span class="nv">$selectionLength</span><span class="o">)</span> + <span class="nv">$quote</span><span class="o">)</span>
           <span class="o">[</span>Microsoft.PowerShell.PSConsoleReadLine]::SetCursorPosition<span class="o">(</span><span class="nv">$selectionStart</span> + <span class="nv">$selectionLength</span> + 2<span class="o">)</span>
           <span class="k">return</span>
       <span class="o">}</span>

       <span class="nv">$ast</span> <span class="o">=</span> <span class="nv">$null</span>
       <span class="nv">$tokens</span> <span class="o">=</span> <span class="nv">$null</span>
       <span class="nv">$parseErrors</span> <span class="o">=</span> <span class="nv">$null</span>
       <span class="o">[</span>Microsoft.PowerShell.PSConsoleReadLine]::GetBufferState<span class="o">([</span>ref]<span class="nv">$ast</span>, <span class="o">[</span>ref]<span class="nv">$tokens</span>, <span class="o">[</span>ref]<span class="nv">$parseErrors</span>, <span class="o">[</span>ref]<span class="nv">$null</span><span class="o">)</span>

       <span class="k">function </span>FindToken
       <span class="o">{</span>
           param<span class="o">(</span><span class="nv">$tokens</span>, <span class="nv">$cursor</span><span class="o">)</span>

           foreach <span class="o">(</span><span class="nv">$token</span> <span class="k">in</span> <span class="nv">$tokens</span><span class="o">)</span>
           <span class="o">{</span>
               <span class="k">if</span> <span class="o">(</span><span class="nv">$cursor</span> <span class="nt">-lt</span> <span class="nv">$token</span>.Extent.StartOffset<span class="o">)</span> <span class="o">{</span> <span class="k">continue</span> <span class="o">}</span>
               <span class="k">if</span> <span class="o">(</span><span class="nv">$cursor</span> <span class="nt">-lt</span> <span class="nv">$token</span>.Extent.EndOffset<span class="o">)</span> <span class="o">{</span>
                   <span class="nv">$result</span> <span class="o">=</span> <span class="nv">$token</span>
                   <span class="nv">$token</span> <span class="o">=</span> <span class="nv">$token</span> <span class="nt">-as</span> <span class="o">[</span>StringExpandableToken]
                   <span class="k">if</span> <span class="o">(</span><span class="nv">$token</span><span class="o">)</span> <span class="o">{</span>
                       <span class="nv">$nested</span> <span class="o">=</span> FindToken <span class="nv">$token</span>.NestedTokens <span class="nv">$cursor</span>
                       <span class="k">if</span> <span class="o">(</span><span class="nv">$nested</span><span class="o">)</span> <span class="o">{</span> <span class="nv">$result</span> <span class="o">=</span> <span class="nv">$nested</span> <span class="o">}</span>
                   <span class="o">}</span>

                   <span class="k">return</span> <span class="nv">$result</span>
               <span class="o">}</span>
           <span class="o">}</span>
           <span class="k">return</span> <span class="nv">$null</span>
       <span class="o">}</span>

       <span class="nv">$token</span> <span class="o">=</span> FindToken <span class="nv">$tokens</span> <span class="nv">$cursor</span>

       <span class="c"># If we're on or inside a **quoted** string token (so not generic), we need to be smarter</span>
       <span class="k">if</span> <span class="o">(</span><span class="nv">$token</span> <span class="nt">-is</span> <span class="o">[</span>StringToken] <span class="nt">-and</span> <span class="nv">$token</span>.Kind <span class="nt">-ne</span> <span class="o">[</span>TokenKind]::Generic<span class="o">)</span> <span class="o">{</span>
           <span class="c"># If we're at the start of the string, assume we're inserting a new string</span>
           <span class="k">if</span> <span class="o">(</span><span class="nv">$token</span>.Extent.StartOffset <span class="nt">-eq</span> <span class="nv">$cursor</span><span class="o">)</span> <span class="o">{</span>
               <span class="o">[</span>Microsoft.PowerShell.PSConsoleReadLine]::Insert<span class="o">(</span><span class="s2">"</span><span class="nv">$quote$quote</span><span class="s2"> "</span><span class="o">)</span>
               <span class="o">[</span>Microsoft.PowerShell.PSConsoleReadLine]::SetCursorPosition<span class="o">(</span><span class="nv">$cursor</span> + 1<span class="o">)</span>
               <span class="k">return</span>
           <span class="o">}</span>

           <span class="c"># If we're at the end of the string, move over the closing quote if present.</span>
           <span class="k">if</span> <span class="o">(</span><span class="nv">$token</span>.Extent.EndOffset <span class="nt">-eq</span> <span class="o">(</span><span class="nv">$cursor</span> + 1<span class="o">)</span> <span class="nt">-and</span> <span class="nv">$line</span><span class="o">[</span><span class="nv">$cursor</span><span class="o">]</span> <span class="nt">-eq</span> <span class="nv">$quote</span><span class="o">)</span> <span class="o">{</span>
               <span class="o">[</span>Microsoft.PowerShell.PSConsoleReadLine]::SetCursorPosition<span class="o">(</span><span class="nv">$cursor</span> + 1<span class="o">)</span>
               <span class="k">return</span>
           <span class="o">}</span>
       <span class="o">}</span>

       <span class="k">if</span> <span class="o">(</span><span class="nv">$null</span> <span class="nt">-eq</span> <span class="nv">$token</span> <span class="nt">-or</span>
           <span class="nv">$token</span>.Kind <span class="nt">-eq</span> <span class="o">[</span>TokenKind]::RParen <span class="nt">-or</span> <span class="nv">$token</span>.Kind <span class="nt">-eq</span> <span class="o">[</span>TokenKind]::RCurly <span class="nt">-or</span> <span class="nv">$token</span>.Kind <span class="nt">-eq</span> <span class="o">[</span>TokenKind]::RBracket<span class="o">)</span> <span class="o">{</span>
           <span class="k">if</span> <span class="o">(</span><span class="nv">$line</span><span class="o">[</span>0..<span class="nv">$cursor</span><span class="o">]</span>.Where<span class="o">{</span><span class="nv">$_</span> <span class="nt">-eq</span> <span class="nv">$quote</span><span class="o">}</span>.Count % 2 <span class="nt">-eq</span> 1<span class="o">)</span> <span class="o">{</span>
               <span class="c"># Odd number of quotes before the cursor, insert a single quote</span>
               <span class="o">[</span>Microsoft.PowerShell.PSConsoleReadLine]::Insert<span class="o">(</span><span class="nv">$quote</span><span class="o">)</span>
           <span class="o">}</span>
           <span class="k">else</span> <span class="o">{</span>
               <span class="c"># Insert matching quotes, move cursor to be in between the quotes</span>
               <span class="o">[</span>Microsoft.PowerShell.PSConsoleReadLine]::Insert<span class="o">(</span><span class="s2">"</span><span class="nv">$quote$quote</span><span class="s2">"</span><span class="o">)</span>
               <span class="o">[</span>Microsoft.PowerShell.PSConsoleReadLine]::SetCursorPosition<span class="o">(</span><span class="nv">$cursor</span> + 1<span class="o">)</span>
           <span class="o">}</span>
           <span class="k">return</span>
       <span class="o">}</span>

       <span class="c"># If cursor is at the start of a token, enclose it in quotes.</span>
       <span class="k">if</span> <span class="o">(</span><span class="nv">$token</span>.Extent.StartOffset <span class="nt">-eq</span> <span class="nv">$cursor</span><span class="o">)</span> <span class="o">{</span>
           <span class="k">if</span> <span class="o">(</span><span class="nv">$token</span>.Kind <span class="nt">-eq</span> <span class="o">[</span>TokenKind]::Generic <span class="nt">-or</span> <span class="nv">$token</span>.Kind <span class="nt">-eq</span> <span class="o">[</span>TokenKind]::Identifier <span class="nt">-or</span> 
               <span class="nv">$token</span>.Kind <span class="nt">-eq</span> <span class="o">[</span>TokenKind]::Variable <span class="nt">-or</span> <span class="nv">$token</span>.TokenFlags.hasFlag<span class="o">([</span>TokenFlags]::Keyword<span class="o">))</span> <span class="o">{</span>
               <span class="nv">$end</span> <span class="o">=</span> <span class="nv">$token</span>.Extent.EndOffset
               <span class="nv">$len</span> <span class="o">=</span> <span class="nv">$end</span> - <span class="nv">$cursor</span>
               <span class="o">[</span>Microsoft.PowerShell.PSConsoleReadLine]::Replace<span class="o">(</span><span class="nv">$cursor</span>, <span class="nv">$len</span>, <span class="nv">$quote</span> + <span class="nv">$line</span>.SubString<span class="o">(</span><span class="nv">$cursor</span>, <span class="nv">$len</span><span class="o">)</span> + <span class="nv">$quote</span><span class="o">)</span>
               <span class="o">[</span>Microsoft.PowerShell.PSConsoleReadLine]::SetCursorPosition<span class="o">(</span><span class="nv">$end</span> + 2<span class="o">)</span>
               <span class="k">return</span>
           <span class="o">}</span>
       <span class="o">}</span>

       <span class="c"># We failed to be smart, so just insert a single quote</span>
       <span class="o">[</span>Microsoft.PowerShell.PSConsoleReadLine]::Insert<span class="o">(</span><span class="nv">$quote</span><span class="o">)</span>
   <span class="o">}</span>

   Set-PSReadLineKeyHandler <span class="nt">-Key</span> <span class="s1">'('</span>,<span class="s1">'{'</span>,<span class="s1">'['</span> <span class="sb">`</span><span class="s2">
                           -BriefDescription InsertPairedBraces </span><span class="sb">`</span>
                           <span class="nt">-LongDescription</span> <span class="s2">"Insert matching braces"</span> <span class="sb">`</span><span class="s2">
                           -ScriptBlock {
       param(</span><span class="nv">$key</span><span class="s2">, </span><span class="nv">$arg</span><span class="s2">)

       </span><span class="nv">$closeChar</span><span class="s2"> = switch (</span><span class="nv">$key</span><span class="s2">.KeyChar)
       {
           &lt;#case#&gt; '(' { [char]')'; break }
           &lt;#case#&gt; '{' { [char]'}'; break }
           &lt;#case#&gt; '[' { [char]']'; break }
       }

       </span><span class="nv">$selectionStart</span><span class="s2"> = </span><span class="nv">$null</span><span class="s2">
       </span><span class="nv">$selectionLength</span><span class="s2"> = </span><span class="nv">$null</span><span class="s2">
       [Microsoft.PowerShell.PSConsoleReadLine]::GetSelectionState([ref]</span><span class="nv">$selectionStart</span><span class="s2">, [ref]</span><span class="nv">$selectionLength</span><span class="s2">)

       </span><span class="nv">$line</span><span class="s2"> = </span><span class="nv">$null</span><span class="s2">
       </span><span class="nv">$cursor</span><span class="s2"> = </span><span class="nv">$null</span><span class="s2">
       [Microsoft.PowerShell.PSConsoleReadLine]::GetBufferState([ref]</span><span class="nv">$line</span><span class="s2">, [ref]</span><span class="nv">$cursor</span><span class="s2">)
          
       if (</span><span class="nv">$selectionStart</span><span class="s2"> -ne -1)
       {
         # Text is selected, wrap it in brackets
         [Microsoft.PowerShell.PSConsoleReadLine]::Replace(</span><span class="nv">$selectionStart</span><span class="s2">, </span><span class="nv">$selectionLength</span><span class="s2">, </span><span class="nv">$key</span><span class="s2">.KeyChar + </span><span class="nv">$line</span><span class="s2">.SubString(</span><span class="nv">$selectionStart</span><span class="s2">, </span><span class="nv">$selectionLength</span><span class="s2">) + </span><span class="nv">$closeChar</span><span class="s2">)
         [Microsoft.PowerShell.PSConsoleReadLine]::SetCursorPosition(</span><span class="nv">$selectionStart</span><span class="s2"> + </span><span class="nv">$selectionLength</span><span class="s2"> + 2)
       } else {
         # No text is selected, insert a pair
         [Microsoft.PowerShell.PSConsoleReadLine]::Insert("</span><span class="si">$(</span><span class="nv">$key</span>.KeyChar<span class="si">)</span><span class="nv">$closeChar</span><span class="s2">")
         [Microsoft.PowerShell.PSConsoleReadLine]::SetCursorPosition(</span><span class="nv">$cursor</span><span class="s2"> + 1)
       }
   }

   Set-PSReadLineKeyHandler -Key ')',']','}' </span><span class="sb">`</span>
                           <span class="nt">-BriefDescription</span> SmartCloseBraces <span class="sb">`</span><span class="s2">
                           -LongDescription "</span>Insert closing brace or skip<span class="s2">" </span><span class="sb">`</span>
                           <span class="nt">-ScriptBlock</span> <span class="o">{</span>
       param<span class="o">(</span><span class="nv">$key</span>, <span class="nv">$arg</span><span class="o">)</span>

       <span class="nv">$line</span> <span class="o">=</span> <span class="nv">$null</span>
       <span class="nv">$cursor</span> <span class="o">=</span> <span class="nv">$null</span>
       <span class="o">[</span>Microsoft.PowerShell.PSConsoleReadLine]::GetBufferState<span class="o">([</span>ref]<span class="nv">$line</span>, <span class="o">[</span>ref]<span class="nv">$cursor</span><span class="o">)</span>

       <span class="k">if</span> <span class="o">(</span><span class="nv">$line</span><span class="o">[</span><span class="nv">$cursor</span><span class="o">]</span> <span class="nt">-eq</span> <span class="nv">$key</span>.KeyChar<span class="o">)</span>
       <span class="o">{</span>
           <span class="o">[</span>Microsoft.PowerShell.PSConsoleReadLine]::SetCursorPosition<span class="o">(</span><span class="nv">$cursor</span> + 1<span class="o">)</span>
       <span class="o">}</span>
       <span class="k">else</span>
       <span class="o">{</span>
           <span class="o">[</span>Microsoft.PowerShell.PSConsoleReadLine]::Insert<span class="o">(</span><span class="s2">"</span><span class="si">$(</span><span class="nv">$key</span>.KeyChar<span class="si">)</span><span class="s2">"</span><span class="o">)</span>
       <span class="o">}</span>
   <span class="o">}</span>

   Set-PSReadLineKeyHandler <span class="nt">-Key</span> Backspace <span class="sb">`</span><span class="s2">
                           -BriefDescription SmartBackspace </span><span class="sb">`</span>
                           <span class="nt">-LongDescription</span> <span class="s2">"Delete previous character or matching quotes/parens/braces"</span> <span class="sb">`</span><span class="s2">
                           -ScriptBlock {
       param(</span><span class="nv">$key</span><span class="s2">, </span><span class="nv">$arg</span><span class="s2">)

       </span><span class="nv">$line</span><span class="s2"> = </span><span class="nv">$null</span><span class="s2">
       </span><span class="nv">$cursor</span><span class="s2"> = </span><span class="nv">$null</span><span class="s2">
       [Microsoft.PowerShell.PSConsoleReadLine]::GetBufferState([ref]</span><span class="nv">$line</span><span class="s2">, [ref]</span><span class="nv">$cursor</span><span class="s2">)

       if (</span><span class="nv">$cursor</span><span class="s2"> -gt 0)
       {
           </span><span class="nv">$toMatch</span><span class="s2"> = </span><span class="nv">$null</span><span class="s2">
           if (</span><span class="nv">$cursor</span><span class="s2"> -lt </span><span class="nv">$line</span><span class="s2">.Length)
           {
               switch (</span><span class="nv">$line</span><span class="s2">[</span><span class="nv">$cursor</span><span class="s2">])
               {
                   &lt;#case#&gt; '"</span><span class="s1">' { $toMatch = '</span><span class="s2">"'; break }
                   &lt;#case#&gt; "</span><span class="s1">'" { $toMatch = "'</span><span class="s2">"; break }
                   &lt;#case#&gt; ')' { </span><span class="nv">$toMatch</span><span class="s2"> = '('; break }
                   &lt;#case#&gt; ']' { </span><span class="nv">$toMatch</span><span class="s2"> = '['; break }
                   &lt;#case#&gt; '}' { </span><span class="nv">$toMatch</span><span class="s2"> = '{'; break }
               }
           }

           if (</span><span class="nv">$toMatch</span><span class="s2"> -ne </span><span class="nv">$null</span><span class="s2"> -and </span><span class="nv">$line</span><span class="s2">[</span><span class="nv">$cursor</span><span class="s2">-1] -eq </span><span class="nv">$toMatch</span><span class="s2">)
           {
               [Microsoft.PowerShell.PSConsoleReadLine]::Delete(</span><span class="nv">$cursor</span><span class="s2"> - 1, 2)
           }
           else
           {
               [Microsoft.PowerShell.PSConsoleReadLine]::BackwardDeleteChar(</span><span class="nv">$key</span><span class="s2">, </span><span class="nv">$arg</span><span class="s2">)
           }
       }
   }

   #endregion Smart Insert/Delete

   # Sometimes you enter a command but realize you forgot to do something else first.
   # This binding will let you save that command in the history so you can recall it,
   # but it doesn't actually execute.  It also clears the line with RevertLine so the
   # undo stack is reset - though redo will still reconstruct the command line.
   Set-PSReadLineKeyHandler -Key Alt+w </span><span class="sb">`</span>
                           <span class="nt">-BriefDescription</span> SaveInHistory <span class="sb">`</span><span class="s2">
                           -LongDescription "</span>Save current line <span class="k">in </span><span class="nb">history </span>but <span class="k">do </span>not execute<span class="s2">" </span><span class="sb">`</span>
                           <span class="nt">-ScriptBlock</span> <span class="o">{</span>
       param<span class="o">(</span><span class="nv">$key</span>, <span class="nv">$arg</span><span class="o">)</span>

       <span class="nv">$line</span> <span class="o">=</span> <span class="nv">$null</span>
       <span class="nv">$cursor</span> <span class="o">=</span> <span class="nv">$null</span>
       <span class="o">[</span>Microsoft.PowerShell.PSConsoleReadLine]::GetBufferState<span class="o">([</span>ref]<span class="nv">$line</span>, <span class="o">[</span>ref]<span class="nv">$cursor</span><span class="o">)</span>
       <span class="o">[</span>Microsoft.PowerShell.PSConsoleReadLine]::AddToHistory<span class="o">(</span><span class="nv">$line</span><span class="o">)</span>
       <span class="o">[</span>Microsoft.PowerShell.PSConsoleReadLine]::RevertLine<span class="o">()</span>
   <span class="o">}</span>

   <span class="c"># Insert text from the clipboard as a here string</span>
   Set-PSReadLineKeyHandler <span class="nt">-Key</span> Ctrl+V <span class="sb">`</span><span class="s2">
                           -BriefDescription PasteAsHereString </span><span class="sb">`</span>
                           <span class="nt">-LongDescription</span> <span class="s2">"Paste the clipboard text as a here string"</span> <span class="sb">`</span><span class="s2">
                           -ScriptBlock {
       param(</span><span class="nv">$key</span><span class="s2">, </span><span class="nv">$arg</span><span class="s2">)

       Add-Type -Assembly PresentationCore
       if ([System.Windows.Clipboard]::ContainsText())
       {
           # Get clipboard text - remove trailing spaces, convert </span><span class="se">\r\n</span><span class="s2"> to </span><span class="se">\n</span><span class="s2">, and remove the final </span><span class="se">\n</span><span class="s2">.
           </span><span class="nv">$text</span><span class="s2"> = ([System.Windows.Clipboard]::GetText() -replace "</span><span class="se">\p</span><span class="o">{</span>Zs<span class="o">}</span><span class="k">*</span><span class="sb">`</span><span class="s2">r?</span><span class="sb">`</span>n<span class="s2">","</span><span class="sb">`</span><span class="s2">n"</span><span class="o">)</span>.TrimEnd<span class="o">()</span>
           <span class="o">[</span>Microsoft.PowerShell.PSConsoleReadLine]::Insert<span class="o">(</span><span class="s2">"@'</span><span class="sb">`</span>n<span class="nv">$text</span><span class="sb">`</span><span class="s2">n'@"</span><span class="o">)</span>
       <span class="o">}</span>
       <span class="k">else</span>
       <span class="o">{</span>
           <span class="o">[</span>Microsoft.PowerShell.PSConsoleReadLine]::Ding<span class="o">()</span>
       <span class="o">}</span>
   <span class="o">}</span>

   <span class="c"># Sometimes you want to get a property of invoke a member on what you've entered so far</span>
   <span class="c"># but you need parens to do that.  This binding will help by putting parens around the current selection,</span>
   <span class="c"># or if nothing is selected, the whole line.</span>
   Set-PSReadLineKeyHandler <span class="nt">-Key</span> <span class="s1">'Alt+('</span> <span class="sb">`</span>
                           <span class="nt">-BriefDescription</span> ParenthesizeSelection <span class="sb">`</span>
                           <span class="nt">-LongDescription</span> <span class="s2">"Put parenthesis around the selection or entire line and move the cursor to after the closing parenthesis"</span> <span class="sb">`</span>
                           <span class="nt">-ScriptBlock</span> <span class="o">{</span>
       param<span class="o">(</span><span class="nv">$key</span>, <span class="nv">$arg</span><span class="o">)</span>

       <span class="nv">$selectionStart</span> <span class="o">=</span> <span class="nv">$null</span>
       <span class="nv">$selectionLength</span> <span class="o">=</span> <span class="nv">$null</span>
       <span class="o">[</span>Microsoft.PowerShell.PSConsoleReadLine]::GetSelectionState<span class="o">([</span>ref]<span class="nv">$selectionStart</span>, <span class="o">[</span>ref]<span class="nv">$selectionLength</span><span class="o">)</span>

       <span class="nv">$line</span> <span class="o">=</span> <span class="nv">$null</span>
       <span class="nv">$cursor</span> <span class="o">=</span> <span class="nv">$null</span>
       <span class="o">[</span>Microsoft.PowerShell.PSConsoleReadLine]::GetBufferState<span class="o">([</span>ref]<span class="nv">$line</span>, <span class="o">[</span>ref]<span class="nv">$cursor</span><span class="o">)</span>
       <span class="k">if</span> <span class="o">(</span><span class="nv">$selectionStart</span> <span class="nt">-ne</span> <span class="nt">-1</span><span class="o">)</span>
       <span class="o">{</span>
           <span class="o">[</span>Microsoft.PowerShell.PSConsoleReadLine]::Replace<span class="o">(</span><span class="nv">$selectionStart</span>, <span class="nv">$selectionLength</span>, <span class="s1">'('</span> + <span class="nv">$line</span>.SubString<span class="o">(</span><span class="nv">$selectionStart</span>, <span class="nv">$selectionLength</span><span class="o">)</span> + <span class="s1">')'</span><span class="o">)</span>
           <span class="o">[</span>Microsoft.PowerShell.PSConsoleReadLine]::SetCursorPosition<span class="o">(</span><span class="nv">$selectionStart</span> + <span class="nv">$selectionLength</span> + 2<span class="o">)</span>
       <span class="o">}</span>
       <span class="k">else</span>
       <span class="o">{</span>
           <span class="o">[</span>Microsoft.PowerShell.PSConsoleReadLine]::Replace<span class="o">(</span>0, <span class="nv">$line</span>.Length, <span class="s1">'('</span> + <span class="nv">$line</span> + <span class="s1">')'</span><span class="o">)</span>
           <span class="o">[</span>Microsoft.PowerShell.PSConsoleReadLine]::EndOfLine<span class="o">()</span>
       <span class="o">}</span>
   <span class="o">}</span>

   <span class="c"># Each time you press Alt+', this key handler will change the token</span>
   <span class="c"># under or before the cursor.  It will cycle through single quotes, double quotes, or</span>
   <span class="c"># no quotes each time it is invoked.</span>
   Set-PSReadLineKeyHandler <span class="nt">-Key</span> <span class="s2">"Alt+'"</span> <span class="sb">`</span>
                           <span class="nt">-BriefDescription</span> ToggleQuoteArgument <span class="sb">`</span>
                           <span class="nt">-LongDescription</span> <span class="s2">"Toggle quotes on the argument under the cursor"</span> <span class="sb">`</span>
                           <span class="nt">-ScriptBlock</span> <span class="o">{</span>
       param<span class="o">(</span><span class="nv">$key</span>, <span class="nv">$arg</span><span class="o">)</span>

       <span class="nv">$ast</span> <span class="o">=</span> <span class="nv">$null</span>
       <span class="nv">$tokens</span> <span class="o">=</span> <span class="nv">$null</span>
       <span class="nv">$errors</span> <span class="o">=</span> <span class="nv">$null</span>
       <span class="nv">$cursor</span> <span class="o">=</span> <span class="nv">$null</span>
       <span class="o">[</span>Microsoft.PowerShell.PSConsoleReadLine]::GetBufferState<span class="o">([</span>ref]<span class="nv">$ast</span>, <span class="o">[</span>ref]<span class="nv">$tokens</span>, <span class="o">[</span>ref]<span class="nv">$errors</span>, <span class="o">[</span>ref]<span class="nv">$cursor</span><span class="o">)</span>

       <span class="nv">$tokenToChange</span> <span class="o">=</span> <span class="nv">$null</span>
       foreach <span class="o">(</span><span class="nv">$token</span> <span class="k">in</span> <span class="nv">$tokens</span><span class="o">)</span>
       <span class="o">{</span>
           <span class="nv">$extent</span> <span class="o">=</span> <span class="nv">$token</span>.Extent
           <span class="k">if</span> <span class="o">(</span><span class="nv">$extent</span>.StartOffset <span class="nt">-le</span> <span class="nv">$cursor</span> <span class="nt">-and</span> <span class="nv">$extent</span>.EndOffset <span class="nt">-ge</span> <span class="nv">$cursor</span><span class="o">)</span>
           <span class="o">{</span>
               <span class="nv">$tokenToChange</span> <span class="o">=</span> <span class="nv">$token</span>

               <span class="c"># If the cursor is at the end (it's really 1 past the end) of the previous token,</span>
               <span class="c"># we only want to change the previous token if there is no token under the cursor</span>
               <span class="k">if</span> <span class="o">(</span><span class="nv">$extent</span>.EndOffset <span class="nt">-eq</span> <span class="nv">$cursor</span> <span class="nt">-and</span> <span class="nv">$foreach</span>.MoveNext<span class="o">())</span>
               <span class="o">{</span>
                   <span class="nv">$nextToken</span> <span class="o">=</span> <span class="nv">$foreach</span>.Current
                   <span class="k">if</span> <span class="o">(</span><span class="nv">$nextToken</span>.Extent.StartOffset <span class="nt">-eq</span> <span class="nv">$cursor</span><span class="o">)</span>
                   <span class="o">{</span>
                       <span class="nv">$tokenToChange</span> <span class="o">=</span> <span class="nv">$nextToken</span>
                   <span class="o">}</span>
               <span class="o">}</span>
               <span class="nb">break</span>
           <span class="o">}</span>
       <span class="o">}</span>

       <span class="k">if</span> <span class="o">(</span><span class="nv">$tokenToChange</span> <span class="nt">-ne</span> <span class="nv">$null</span><span class="o">)</span>
       <span class="o">{</span>
           <span class="nv">$extent</span> <span class="o">=</span> <span class="nv">$tokenToChange</span>.Extent
           <span class="nv">$tokenText</span> <span class="o">=</span> <span class="nv">$extent</span>.Text
           <span class="k">if</span> <span class="o">(</span><span class="nv">$tokenText</span><span class="o">[</span>0] <span class="nt">-eq</span> <span class="s1">'"'</span> <span class="nt">-and</span> <span class="nv">$tokenText</span><span class="o">[</span><span class="nt">-1</span><span class="o">]</span> <span class="nt">-eq</span> <span class="s1">'"'</span><span class="o">)</span>
           <span class="o">{</span>
               <span class="c"># Switch to no quotes</span>
               <span class="nv">$replacement</span> <span class="o">=</span> <span class="nv">$tokenText</span>.Substring<span class="o">(</span>1, <span class="nv">$tokenText</span>.Length - 2<span class="o">)</span>
           <span class="o">}</span>
           elseif <span class="o">(</span><span class="nv">$tokenText</span><span class="o">[</span>0] <span class="nt">-eq</span> <span class="s2">"'"</span> <span class="nt">-and</span> <span class="nv">$tokenText</span><span class="o">[</span><span class="nt">-1</span><span class="o">]</span> <span class="nt">-eq</span> <span class="s2">"'"</span><span class="o">)</span>
           <span class="o">{</span>
               <span class="c"># Switch to double quotes</span>
               <span class="nv">$replacement</span> <span class="o">=</span> <span class="s1">'"'</span> + <span class="nv">$tokenText</span>.Substring<span class="o">(</span>1, <span class="nv">$tokenText</span>.Length - 2<span class="o">)</span> + <span class="s1">'"'</span>
           <span class="o">}</span>
           <span class="k">else</span>
           <span class="o">{</span>
               <span class="c"># Add single quotes</span>
               <span class="nv">$replacement</span> <span class="o">=</span> <span class="s2">"'"</span> + <span class="nv">$tokenText</span> + <span class="s2">"'"</span>
           <span class="o">}</span>

           <span class="o">[</span>Microsoft.PowerShell.PSConsoleReadLine]::Replace<span class="o">(</span>
               <span class="nv">$extent</span>.StartOffset,
               <span class="nv">$tokenText</span>.Length,
               <span class="nv">$replacement</span><span class="o">)</span>
       <span class="o">}</span>
   <span class="o">}</span>

   <span class="c"># This example will replace any aliases on the command line with the resolved commands.</span>
   Set-PSReadLineKeyHandler <span class="nt">-Key</span> <span class="s2">"Alt+%"</span> <span class="sb">`</span>
                           <span class="nt">-BriefDescription</span> ExpandAliases <span class="sb">`</span>
                           <span class="nt">-LongDescription</span> <span class="s2">"Replace all aliases with the full command"</span> <span class="sb">`</span>
                           <span class="nt">-ScriptBlock</span> <span class="o">{</span>
       param<span class="o">(</span><span class="nv">$key</span>, <span class="nv">$arg</span><span class="o">)</span>

       <span class="nv">$ast</span> <span class="o">=</span> <span class="nv">$null</span>
       <span class="nv">$tokens</span> <span class="o">=</span> <span class="nv">$null</span>
       <span class="nv">$errors</span> <span class="o">=</span> <span class="nv">$null</span>
       <span class="nv">$cursor</span> <span class="o">=</span> <span class="nv">$null</span>
       <span class="o">[</span>Microsoft.PowerShell.PSConsoleReadLine]::GetBufferState<span class="o">([</span>ref]<span class="nv">$ast</span>, <span class="o">[</span>ref]<span class="nv">$tokens</span>, <span class="o">[</span>ref]<span class="nv">$errors</span>, <span class="o">[</span>ref]<span class="nv">$cursor</span><span class="o">)</span>

       <span class="nv">$startAdjustment</span> <span class="o">=</span> 0
       foreach <span class="o">(</span><span class="nv">$token</span> <span class="k">in</span> <span class="nv">$tokens</span><span class="o">)</span>
       <span class="o">{</span>
           <span class="k">if</span> <span class="o">(</span><span class="nv">$token</span>.TokenFlags <span class="nt">-band</span> <span class="o">[</span>TokenFlags]::CommandName<span class="o">)</span>
           <span class="o">{</span>
               <span class="nv">$alias</span> <span class="o">=</span> <span class="nv">$ExecutionContext</span>.InvokeCommand.GetCommand<span class="o">(</span><span class="nv">$token</span>.Extent.Text, <span class="s1">'Alias'</span><span class="o">)</span>
               <span class="k">if</span> <span class="o">(</span><span class="nv">$alias</span> <span class="nt">-ne</span> <span class="nv">$null</span><span class="o">)</span>
               <span class="o">{</span>
                   <span class="nv">$resolvedCommand</span> <span class="o">=</span> <span class="nv">$alias</span>.ResolvedCommandName
                   <span class="k">if</span> <span class="o">(</span><span class="nv">$resolvedCommand</span> <span class="nt">-ne</span> <span class="nv">$null</span><span class="o">)</span>
                   <span class="o">{</span>
                       <span class="nv">$extent</span> <span class="o">=</span> <span class="nv">$token</span>.Extent
                       <span class="nv">$length</span> <span class="o">=</span> <span class="nv">$extent</span>.EndOffset - <span class="nv">$extent</span>.StartOffset
                       <span class="o">[</span>Microsoft.PowerShell.PSConsoleReadLine]::Replace<span class="o">(</span>
                           <span class="nv">$extent</span>.StartOffset + <span class="nv">$startAdjustment</span>,
                           <span class="nv">$length</span>,
                           <span class="nv">$resolvedCommand</span><span class="o">)</span>

                       <span class="c"># Our copy of the tokens won't have been updated, so we need to</span>
                       <span class="c"># adjust by the difference in length</span>
                       <span class="nv">$startAdjustment</span> +<span class="o">=</span> <span class="o">(</span><span class="nv">$resolvedCommand</span>.Length - <span class="nv">$length</span><span class="o">)</span>
                   <span class="o">}</span>
               <span class="o">}</span>
           <span class="o">}</span>
       <span class="o">}</span>
   <span class="o">}</span>

   <span class="c"># F1 for help on the command line - naturally</span>
   Set-PSReadLineKeyHandler <span class="nt">-Key</span> F1 <span class="sb">`</span>
                           <span class="nt">-BriefDescription</span> CommandHelp <span class="sb">`</span>
                           <span class="nt">-LongDescription</span> <span class="s2">"Open the help window for the current command"</span> <span class="sb">`</span>
                           <span class="nt">-ScriptBlock</span> <span class="o">{</span>
       param<span class="o">(</span><span class="nv">$key</span>, <span class="nv">$arg</span><span class="o">)</span>

       <span class="nv">$ast</span> <span class="o">=</span> <span class="nv">$null</span>
       <span class="nv">$tokens</span> <span class="o">=</span> <span class="nv">$null</span>
       <span class="nv">$errors</span> <span class="o">=</span> <span class="nv">$null</span>
       <span class="nv">$cursor</span> <span class="o">=</span> <span class="nv">$null</span>
       <span class="o">[</span>Microsoft.PowerShell.PSConsoleReadLine]::GetBufferState<span class="o">([</span>ref]<span class="nv">$ast</span>, <span class="o">[</span>ref]<span class="nv">$tokens</span>, <span class="o">[</span>ref]<span class="nv">$errors</span>, <span class="o">[</span>ref]<span class="nv">$cursor</span><span class="o">)</span>

       <span class="nv">$commandAst</span> <span class="o">=</span> <span class="nv">$ast</span>.FindAll<span class="o">(</span> <span class="o">{</span>
           <span class="nv">$node</span> <span class="o">=</span> <span class="nv">$args</span><span class="o">[</span>0]
           <span class="nv">$node</span> <span class="nt">-is</span> <span class="o">[</span>CommandAst] <span class="nt">-and</span>
               <span class="nv">$node</span>.Extent.StartOffset <span class="nt">-le</span> <span class="nv">$cursor</span> <span class="nt">-and</span>
               <span class="nv">$node</span>.Extent.EndOffset <span class="nt">-ge</span> <span class="nv">$cursor</span>
           <span class="o">}</span>, <span class="nv">$true</span><span class="o">)</span> | Select-Object <span class="nt">-Last</span> 1

       <span class="k">if</span> <span class="o">(</span><span class="nv">$commandAst</span> <span class="nt">-ne</span> <span class="nv">$null</span><span class="o">)</span>
       <span class="o">{</span>
           <span class="nv">$commandName</span> <span class="o">=</span> <span class="nv">$commandAst</span>.GetCommandName<span class="o">()</span>
           <span class="k">if</span> <span class="o">(</span><span class="nv">$commandName</span> <span class="nt">-ne</span> <span class="nv">$null</span><span class="o">)</span>
           <span class="o">{</span>
               <span class="nv">$command</span> <span class="o">=</span> <span class="nv">$ExecutionContext</span>.InvokeCommand.GetCommand<span class="o">(</span><span class="nv">$commandName</span>, <span class="s1">'All'</span><span class="o">)</span>
               <span class="k">if</span> <span class="o">(</span><span class="nv">$command</span> <span class="nt">-is</span> <span class="o">[</span>AliasInfo]<span class="o">)</span>
               <span class="o">{</span>
                   <span class="nv">$commandName</span> <span class="o">=</span> <span class="nv">$command</span>.ResolvedCommandName
               <span class="o">}</span>

               <span class="k">if</span> <span class="o">(</span><span class="nv">$commandName</span> <span class="nt">-ne</span> <span class="nv">$null</span><span class="o">)</span>
               <span class="o">{</span>
                   Get-Help <span class="nv">$commandName</span> <span class="nt">-ShowWindow</span>
               <span class="o">}</span>
           <span class="o">}</span>
       <span class="o">}</span>
   <span class="o">}</span>


   <span class="c">#</span>
   <span class="c"># Ctrl+Shift+j then type a key to mark the current directory.</span>
   <span class="c"># Ctrj+j then the same key will change back to that directory without</span>
   <span class="c"># needing to type cd and won't change the command line.</span>

   <span class="c">#</span>
   <span class="nv">$global</span>:PSReadLineMarks <span class="o">=</span> @<span class="o">{}</span>

   Set-PSReadLineKeyHandler <span class="nt">-Key</span> Ctrl+J <span class="sb">`</span>
                           <span class="nt">-BriefDescription</span> MarkDirectory <span class="sb">`</span>
                           <span class="nt">-LongDescription</span> <span class="s2">"Mark the current directory"</span> <span class="sb">`</span>
                           <span class="nt">-ScriptBlock</span> <span class="o">{</span>
       param<span class="o">(</span><span class="nv">$key</span>, <span class="nv">$arg</span><span class="o">)</span>

       <span class="nv">$key</span> <span class="o">=</span> <span class="o">[</span>Console]::ReadKey<span class="o">(</span><span class="nv">$true</span><span class="o">)</span>
       <span class="nv">$global</span>:PSReadLineMarks[<span class="nv">$key</span>.KeyChar] <span class="o">=</span> <span class="nv">$pwd</span>
   <span class="o">}</span>

   Set-PSReadLineKeyHandler <span class="nt">-Key</span> Ctrl+j <span class="sb">`</span>
                           <span class="nt">-BriefDescription</span> JumpDirectory <span class="sb">`</span>
                           <span class="nt">-LongDescription</span> <span class="s2">"Goto the marked directory"</span> <span class="sb">`</span>
                           <span class="nt">-ScriptBlock</span> <span class="o">{</span>
       param<span class="o">(</span><span class="nv">$key</span>, <span class="nv">$arg</span><span class="o">)</span>

       <span class="nv">$key</span> <span class="o">=</span> <span class="o">[</span>Console]::ReadKey<span class="o">()</span>
       <span class="nv">$dir</span> <span class="o">=</span> <span class="nv">$global</span>:PSReadLineMarks[<span class="nv">$key</span>.KeyChar]
       <span class="k">if</span> <span class="o">(</span><span class="nv">$dir</span><span class="o">)</span>
       <span class="o">{</span>
           <span class="nb">cd</span> <span class="nv">$dir</span>
           <span class="o">[</span>Microsoft.PowerShell.PSConsoleReadLine]::InvokePrompt<span class="o">()</span>
       <span class="o">}</span>
   <span class="o">}</span>

   Set-PSReadLineKeyHandler <span class="nt">-Key</span> Alt+j <span class="sb">`</span>
                           <span class="nt">-BriefDescription</span> ShowDirectoryMarks <span class="sb">`</span>
                           <span class="nt">-LongDescription</span> <span class="s2">"Show the currently marked directories"</span> <span class="sb">`</span>
                           <span class="nt">-ScriptBlock</span> <span class="o">{</span>
       param<span class="o">(</span><span class="nv">$key</span>, <span class="nv">$arg</span><span class="o">)</span>

       <span class="nv">$global</span>:PSReadLineMarks.GetEnumerator<span class="o">()</span> | % <span class="o">{</span>
           <span class="o">[</span>PSCustomObject]@<span class="o">{</span>Key <span class="o">=</span> <span class="nv">$_</span>.Key<span class="p">;</span> Dir <span class="o">=</span> <span class="nv">$_</span>.Value<span class="o">}</span> <span class="o">}</span> |
           Format-Table <span class="nt">-AutoSize</span> | Out-Host

       <span class="o">[</span>Microsoft.PowerShell.PSConsoleReadLine]::InvokePrompt<span class="o">()</span>
   <span class="o">}</span>

   <span class="c"># Auto correct 'git cmt' to 'git commit'</span>
   Set-PSReadLineOption <span class="nt">-CommandValidationHandler</span> <span class="o">{</span>
       param<span class="o">([</span>CommandAst]<span class="nv">$CommandAst</span><span class="o">)</span>

       switch <span class="o">(</span><span class="nv">$CommandAst</span>.GetCommandName<span class="o">())</span>
       <span class="o">{</span>
           <span class="s1">'git'</span> <span class="o">{</span>
               <span class="nv">$gitCmd</span> <span class="o">=</span> <span class="nv">$CommandAst</span>.CommandElements[1].Extent
               switch <span class="o">(</span><span class="nv">$gitCmd</span>.Text<span class="o">)</span>
               <span class="o">{</span>
                   <span class="s1">'cmt'</span> <span class="o">{</span>
                       <span class="o">[</span>Microsoft.PowerShell.PSConsoleReadLine]::Replace<span class="o">(</span>
                           <span class="nv">$gitCmd</span>.StartOffset, <span class="nv">$gitCmd</span>.EndOffset - <span class="nv">$gitCmd</span>.StartOffset, <span class="s1">'commit'</span><span class="o">)</span>
                   <span class="o">}</span>
               <span class="o">}</span>
           <span class="o">}</span>
       <span class="o">}</span>
   <span class="o">}</span>

   <span class="c"># `ForwardChar` accepts the entire suggestion text when the cursor is at the end of the line.</span>
   <span class="c"># This custom binding makes `RightArrow` behave similarly - accepting the next word instead of the entire suggestion text.</span>
   Set-PSReadLineKeyHandler <span class="nt">-Key</span> RightArrow <span class="sb">`</span>
                           <span class="nt">-BriefDescription</span> ForwardCharAndAcceptNextSuggestionWord <span class="sb">`</span>
                           <span class="nt">-LongDescription</span> <span class="s2">"Move cursor one character to the right in the current editing line and accept the next word in suggestion when it's at the end of current editing line"</span> <span class="sb">`</span>
                           <span class="nt">-ScriptBlock</span> <span class="o">{</span>
       param<span class="o">(</span><span class="nv">$key</span>, <span class="nv">$arg</span><span class="o">)</span>

       <span class="nv">$line</span> <span class="o">=</span> <span class="nv">$null</span>
       <span class="nv">$cursor</span> <span class="o">=</span> <span class="nv">$null</span>
       <span class="o">[</span>Microsoft.PowerShell.PSConsoleReadLine]::GetBufferState<span class="o">([</span>ref]<span class="nv">$line</span>, <span class="o">[</span>ref]<span class="nv">$cursor</span><span class="o">)</span>

       <span class="k">if</span> <span class="o">(</span><span class="nv">$cursor</span> <span class="nt">-lt</span> <span class="nv">$line</span>.Length<span class="o">)</span> <span class="o">{</span>
           <span class="o">[</span>Microsoft.PowerShell.PSConsoleReadLine]::ForwardChar<span class="o">(</span><span class="nv">$key</span>, <span class="nv">$arg</span><span class="o">)</span>
       <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
           <span class="o">[</span>Microsoft.PowerShell.PSConsoleReadLine]::AcceptNextSuggestionWord<span class="o">(</span><span class="nv">$key</span>, <span class="nv">$arg</span><span class="o">)</span>
       <span class="o">}</span>
   <span class="o">}</span>

   <span class="c"># Cycle through arguments on current line and select the text. This makes it easier to quickly change the argument if re-running a previously run command from the history</span>
   <span class="c"># or if using a psreadline predictor. You can also use a digit argument to specify which argument you want to select, i.e. Alt+1, Alt+a selects the first argument</span>
   <span class="c"># on the command line. </span>
   Set-PSReadLineKeyHandler <span class="nt">-Key</span> Alt+a <span class="sb">`</span>
                           <span class="nt">-BriefDescription</span> SelectCommandArguments <span class="sb">`</span>
                           <span class="nt">-LongDescription</span> <span class="s2">"Set current selection to next command argument in the command line. Use of digit argument selects argument by position"</span> <span class="sb">`</span>
                           <span class="nt">-ScriptBlock</span> <span class="o">{</span>
       param<span class="o">(</span><span class="nv">$key</span>, <span class="nv">$arg</span><span class="o">)</span>
        
       <span class="nv">$ast</span> <span class="o">=</span> <span class="nv">$null</span>
       <span class="nv">$cursor</span> <span class="o">=</span> <span class="nv">$null</span>
       <span class="o">[</span>Microsoft.PowerShell.PSConsoleReadLine]::GetBufferState<span class="o">([</span>ref]<span class="nv">$ast</span>, <span class="o">[</span>ref]<span class="nv">$null</span>, <span class="o">[</span>ref]<span class="nv">$null</span>, <span class="o">[</span>ref]<span class="nv">$cursor</span><span class="o">)</span>
        
       <span class="nv">$asts</span> <span class="o">=</span> <span class="nv">$ast</span>.FindAll<span class="o">(</span> <span class="o">{</span>
           <span class="nv">$args</span><span class="o">[</span>0] <span class="nt">-is</span> <span class="o">[</span>System.Management.Automation.Language.ExpressionAst] <span class="nt">-and</span>
           <span class="nv">$args</span><span class="o">[</span>0].Parent <span class="nt">-is</span> <span class="o">[</span>System.Management.Automation.Language.CommandAst] <span class="nt">-and</span>
           <span class="nv">$args</span><span class="o">[</span>0].Extent.StartOffset <span class="nt">-ne</span> <span class="nv">$args</span><span class="o">[</span>0].Parent.Extent.StartOffset
         <span class="o">}</span>, <span class="nv">$true</span><span class="o">)</span>
        
       <span class="k">if</span> <span class="o">(</span><span class="nv">$asts</span>.Count <span class="nt">-eq</span> 0<span class="o">)</span> <span class="o">{</span>
           <span class="o">[</span>Microsoft.PowerShell.PSConsoleReadLine]::Ding<span class="o">()</span>
           <span class="k">return</span>
       <span class="o">}</span>
          
       <span class="nv">$nextAst</span> <span class="o">=</span> <span class="nv">$null</span>

       <span class="k">if</span> <span class="o">(</span><span class="nv">$null</span> <span class="nt">-ne</span> <span class="nv">$arg</span><span class="o">)</span> <span class="o">{</span>
           <span class="nv">$nextAst</span> <span class="o">=</span> <span class="nv">$asts</span><span class="o">[</span><span class="nv">$arg</span> - 1]
       <span class="o">}</span>
       <span class="k">else</span> <span class="o">{</span>
           foreach <span class="o">(</span><span class="nv">$ast</span> <span class="k">in</span> <span class="nv">$asts</span><span class="o">)</span> <span class="o">{</span>
               <span class="k">if</span> <span class="o">(</span><span class="nv">$ast</span>.Extent.StartOffset <span class="nt">-ge</span> <span class="nv">$cursor</span><span class="o">)</span> <span class="o">{</span>
                   <span class="nv">$nextAst</span> <span class="o">=</span> <span class="nv">$ast</span>
                   <span class="nb">break</span>
               <span class="o">}</span>
           <span class="o">}</span> 
              
           <span class="k">if</span> <span class="o">(</span><span class="nv">$null</span> <span class="nt">-eq</span> <span class="nv">$nextAst</span><span class="o">)</span> <span class="o">{</span>
               <span class="nv">$nextAst</span> <span class="o">=</span> <span class="nv">$asts</span><span class="o">[</span>0]
           <span class="o">}</span>
       <span class="o">}</span>

       <span class="nv">$startOffsetAdjustment</span> <span class="o">=</span> 0
       <span class="nv">$endOffsetAdjustment</span> <span class="o">=</span> 0

       <span class="k">if</span> <span class="o">(</span><span class="nv">$nextAst</span> <span class="nt">-is</span> <span class="o">[</span>System.Management.Automation.Language.StringConstantExpressionAst] <span class="nt">-and</span>
           <span class="nv">$nextAst</span>.StringConstantType <span class="nt">-ne</span> <span class="o">[</span>System.Management.Automation.Language.StringConstantType]::BareWord<span class="o">)</span> <span class="o">{</span>
               <span class="nv">$startOffsetAdjustment</span> <span class="o">=</span> 1
               <span class="nv">$endOffsetAdjustment</span> <span class="o">=</span> 2
       <span class="o">}</span>
        
       <span class="o">[</span>Microsoft.PowerShell.PSConsoleReadLine]::SetCursorPosition<span class="o">(</span><span class="nv">$nextAst</span>.Extent.StartOffset + <span class="nv">$startOffsetAdjustment</span><span class="o">)</span>
       <span class="o">[</span>Microsoft.PowerShell.PSConsoleReadLine]::SetMark<span class="o">(</span><span class="nv">$null</span>, <span class="nv">$null</span><span class="o">)</span>
       <span class="o">[</span>Microsoft.PowerShell.PSConsoleReadLine]::SelectForwardChar<span class="o">(</span><span class="nv">$null</span>, <span class="o">(</span><span class="nv">$nextAst</span>.Extent.EndOffset - <span class="nv">$nextAst</span>.Extent.StartOffset<span class="o">)</span> - <span class="nv">$endOffsetAdjustment</span><span class="o">)</span>
   <span class="o">}</span>


   Set-PSReadLineOption <span class="nt">-PredictionSource</span> History
   Set-PSReadLineOption <span class="nt">-PredictionViewStyle</span> ListView
   Set-PSReadLineOption <span class="nt">-EditMode</span> Windows


   <span class="c"># This is an example of a macro that you might use to execute a command.</span>
   <span class="c"># This will add the command to history.</span>
   Set-PSReadLineKeyHandler <span class="nt">-Key</span> Ctrl+Shift+b <span class="sb">`</span>
                           <span class="nt">-BriefDescription</span> BuildCurrentDirectory <span class="sb">`</span>
                           <span class="nt">-LongDescription</span> <span class="s2">"Build the current directory"</span> <span class="sb">`</span>
                           <span class="nt">-ScriptBlock</span> <span class="o">{</span>
       <span class="o">[</span>Microsoft.PowerShell.PSConsoleReadLine]::RevertLine<span class="o">()</span>
       <span class="o">[</span>Microsoft.PowerShell.PSConsoleReadLine]::Insert<span class="o">(</span><span class="s2">"dotnet build"</span><span class="o">)</span>
       <span class="o">[</span>Microsoft.PowerShell.PSConsoleReadLine]::AcceptLine<span class="o">()</span>
   <span class="o">}</span>

   Set-PSReadLineKeyHandler <span class="nt">-Key</span> Ctrl+Shift+t <span class="sb">`</span>
                           <span class="nt">-BriefDescription</span> BuildCurrentDirectory <span class="sb">`</span>
                           <span class="nt">-LongDescription</span> <span class="s2">"Build the current directory"</span> <span class="sb">`</span>
                           <span class="nt">-ScriptBlock</span> <span class="o">{</span>
       <span class="o">[</span>Microsoft.PowerShell.PSConsoleReadLine]::RevertLine<span class="o">()</span>
       <span class="o">[</span>Microsoft.PowerShell.PSConsoleReadLine]::Insert<span class="o">(</span><span class="s2">"dotnet test"</span><span class="o">)</span>
       <span class="o">[</span>Microsoft.PowerShell.PSConsoleReadLine]::AcceptLine<span class="o">()</span>
   <span class="o">}</span>
</code></pre></div>    </div>
  </li>
</ol>

<ul>
  <li>You can follow this reference: https://ohmyposh.dev/docs/installation/prompt</li>
</ul>

<ol>
  <li><strong>Configure Terminal Settings</strong>
    <ul>
      <li>Open Windows Terminal and go to <strong>Settings</strong>.</li>
      <li>At the bottom, click on <strong>Open JSON file</strong>.</li>
      <li>The <code class="language-plaintext highlighter-rouge">settings.json</code> file will open in your default text editor.</li>
      <li>Add the following lines to the <code class="language-plaintext highlighter-rouge">settings.json</code> file to enable Oh My Posh:</li>
      <li>Here is my settings.json file. You can copy and paste it into your settings.json file. https://gist.github.com/mahedee/44fa5b644aa06597456d8cac5c2f3dd2</li>
    </ul>
  </li>
</ol>

<p><strong>settings.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"$help"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https://aka.ms/terminal-documentation"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"$schema"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https://aka.ms/terminal-profiles-schema"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"actions"</span><span class="p">:</span><span class="w"> 
        </span><span class="p">[</span><span class="w">
            </span><span class="p">{</span><span class="w">
                </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> 
                </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"action"</span><span class="p">:</span><span class="w"> </span><span class="s2">"copy"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"singleLine"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
                </span><span class="p">},</span><span class="w">
                </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"User.copy.644BA8F2"</span><span class="p">,</span><span class="w">
                </span><span class="nl">"keys"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+c"</span><span class="w">
            </span><span class="p">},</span><span class="w">
            </span><span class="p">{</span><span class="w">
                </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> 
                </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"action"</span><span class="p">:</span><span class="w"> </span><span class="s2">"newTab"</span><span class="w">
                </span><span class="p">},</span><span class="w">
                </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"User.newTab.5DEADB41"</span><span class="p">,</span><span class="w">
                </span><span class="nl">"keys"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+t"</span><span class="w">
            </span><span class="p">},</span><span class="w">
            </span><span class="p">{</span><span class="w">
                </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> 
                </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"action"</span><span class="p">:</span><span class="w"> </span><span class="s2">"commandPalette"</span><span class="w">
                </span><span class="p">},</span><span class="w">
                </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"User.commandPalette.D3F0B923"</span><span class="p">,</span><span class="w">
                </span><span class="nl">"keys"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+shift+p"</span><span class="w">
            </span><span class="p">},</span><span class="w">
            </span><span class="p">{</span><span class="w">
                </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> 
                </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"action"</span><span class="p">:</span><span class="w"> </span><span class="s2">"splitPane"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"split"</span><span class="p">:</span><span class="w"> </span><span class="s2">"auto"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"splitMode"</span><span class="p">:</span><span class="w"> </span><span class="s2">"duplicate"</span><span class="w">
                </span><span class="p">},</span><span class="w">
                </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"User.splitPane.A6751878"</span><span class="p">,</span><span class="w">
                </span><span class="nl">"keys"</span><span class="p">:</span><span class="w"> </span><span class="s2">"alt+shift+d"</span><span class="w">
            </span><span class="p">},</span><span class="w">
            </span><span class="p">{</span><span class="w">
                </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"paste"</span><span class="p">,</span><span class="w">
                </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"User.paste"</span><span class="p">,</span><span class="w">
                </span><span class="nl">"keys"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+v"</span><span class="w">
            </span><span class="p">},</span><span class="w">
            </span><span class="p">{</span><span class="w">
                </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"toggleAlwaysOnTop"</span><span class="p">,</span><span class="w">
                </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"User.toggleAlwaysOnTop"</span><span class="p">,</span><span class="w">
                </span><span class="nl">"keys"</span><span class="p">:</span><span class="w"> </span><span class="s2">"alt+shift+f11"</span><span class="w">
            </span><span class="p">},</span><span class="w">
            </span><span class="p">{</span><span class="w">
                </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"closePane"</span><span class="p">,</span><span class="w">
                </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"User.closePane"</span><span class="p">,</span><span class="w">
                </span><span class="nl">"keys"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+w"</span><span class="w">
            </span><span class="p">},</span><span class="w">
            </span><span class="p">{</span><span class="w">
                </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> 
                </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"action"</span><span class="p">:</span><span class="w"> </span><span class="s2">"splitPane"</span><span class="w">
                </span><span class="p">},</span><span class="w">
                </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"User.splitPane.91AB55B1"</span><span class="p">,</span><span class="w">
                </span><span class="nl">"keys"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+shift+minus"</span><span class="w">
            </span><span class="p">},</span><span class="w">
            </span><span class="p">{</span><span class="w">
                </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"toggleFocusMode"</span><span class="p">,</span><span class="w">
                </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"User.toggleFocusMode"</span><span class="p">,</span><span class="w">
                </span><span class="nl">"keys"</span><span class="p">:</span><span class="w"> </span><span class="s2">"shift+f11"</span><span class="w">
            </span><span class="p">},</span><span class="w">
            </span><span class="p">{</span><span class="w">
                </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"unbound"</span><span class="p">,</span><span class="w">
                </span><span class="nl">"keys"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+d"</span><span class="w">
            </span><span class="p">},</span><span class="w">
            </span><span class="p">{</span><span class="w">
                </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"find"</span><span class="p">,</span><span class="w">
                </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"User.find"</span><span class="p">,</span><span class="w">
                </span><span class="nl">"keys"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+shift+f"</span><span class="w">
            </span><span class="p">},</span><span class="w">
            </span><span class="p">{</span><span class="w">
                </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> 
                </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"action"</span><span class="p">:</span><span class="w"> </span><span class="s2">"openSettings"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"target"</span><span class="p">:</span><span class="w"> </span><span class="s2">"settingsUI"</span><span class="w">
                </span><span class="p">},</span><span class="w">
                </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"User.openSettings.6CD791B"</span><span class="p">,</span><span class="w">
                </span><span class="nl">"keys"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ctrl+shift+comma"</span><span class="w">
            </span><span class="p">}</span><span class="w">
        </span><span class="p">],</span><span class="w">
        </span><span class="nl">"copyFormatting"</span><span class="p">:</span><span class="w"> </span><span class="s2">"none"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"copyOnSelect"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
        </span><span class="nl">"defaultProfile"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{61c54bbd-c2c6-5271-96e7-009a87ff44bf}"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"newTabMenu"</span><span class="p">:</span><span class="w"> 
        </span><span class="p">[</span><span class="w">
            </span><span class="p">{</span><span class="w">
                </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"remainingProfiles"</span><span class="w">
            </span><span class="p">}</span><span class="w">
        </span><span class="p">],</span><span class="w">
        </span><span class="nl">"profiles"</span><span class="p">:</span><span class="w"> 
        </span><span class="p">{</span><span class="w">
            </span><span class="nl">"defaults"</span><span class="p">:</span><span class="w"> </span><span class="p">{},</span><span class="w">
            </span><span class="nl">"list"</span><span class="p">:</span><span class="w"> 
            </span><span class="p">[</span><span class="w">
                </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"commandline"</span><span class="p">:</span><span class="w"> </span><span class="s2">"%SystemRoot%</span><span class="se">\\</span><span class="s2">System32</span><span class="se">\\</span><span class="s2">WindowsPowerShell</span><span class="se">\\</span><span class="s2">v1.0</span><span class="se">\\</span><span class="s2">powershell.exe"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"font"</span><span class="p">:</span><span class="w"> 
                    </span><span class="p">{</span><span class="w">
                        </span><span class="nl">"face"</span><span class="p">:</span><span class="w"> </span><span class="s2">"CaskaydiaCove Nerd Font"</span><span class="w">
                    </span><span class="p">},</span><span class="w">
                    </span><span class="nl">"guid"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{61c54bbd-c2c6-5271-96e7-009a87ff44bf}"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"hidden"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Windows PowerShell"</span><span class="w">
                </span><span class="p">},</span><span class="w">
                </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"commandline"</span><span class="p">:</span><span class="w"> </span><span class="s2">"%SystemRoot%</span><span class="se">\\</span><span class="s2">System32</span><span class="se">\\</span><span class="s2">cmd.exe"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"guid"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{0caa0dad-35be-5f56-a8ff-afceeeaa6101}"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"hidden"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Command Prompt"</span><span class="w">
                </span><span class="p">},</span><span class="w">
                </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"guid"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{b453ae62-4e3d-5e58-b989-0a998ec441b8}"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"hidden"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Azure Cloud Shell"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"source"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Windows.Terminal.Azure"</span><span class="w">
                </span><span class="p">},</span><span class="w">
                </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"guid"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{8d610568-1d18-58b9-abbd-c7eec0a40dd4}"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"hidden"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Developer Command Prompt for VS 2022"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"source"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Windows.Terminal.VisualStudio"</span><span class="w">
                </span><span class="p">},</span><span class="w">
                </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"guid"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{97f5749f-a899-50f2-a042-7cf1e52bf252}"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"hidden"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Developer PowerShell for VS 2022"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"source"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Windows.Terminal.VisualStudio"</span><span class="w">
                </span><span class="p">},</span><span class="w">
                </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"commandline"</span><span class="p">:</span><span class="w"> </span><span class="s2">"C:</span><span class="se">\\</span><span class="s2">Program Files</span><span class="se">\\</span><span class="s2">Git</span><span class="se">\\</span><span class="s2">bin</span><span class="se">\\</span><span class="s2">bash.exe"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"font"</span><span class="p">:</span><span class="w"> 
                    </span><span class="p">{</span><span class="w">
                        </span><span class="nl">"face"</span><span class="p">:</span><span class="w"> </span><span class="s2">"CaskaydiaCove Nerd Font"</span><span class="w">
                    </span><span class="p">},</span><span class="w">
                    </span><span class="nl">"guid"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{0b98aac8-d3d9-404f-a6a5-236565bb4610}"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"hidden"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"icon"</span><span class="p">:</span><span class="w"> </span><span class="s2">"C:</span><span class="se">\\</span><span class="s2">Program Files</span><span class="se">\\</span><span class="s2">Git</span><span class="se">\\</span><span class="s2">mingw64</span><span class="se">\\</span><span class="s2">share</span><span class="se">\\</span><span class="s2">git</span><span class="se">\\</span><span class="s2">git-for-windows.ico"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Git Bash"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"startingDirectory"</span><span class="p">:</span><span class="w"> </span><span class="s2">"%USERPROFILE%"</span><span class="w">
                </span><span class="p">},</span><span class="w">
                </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"guid"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{16208362-94fc-5b1f-a491-5b2624d5ab56}"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"hidden"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Visual Studio Debug Console"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"source"</span><span class="p">:</span><span class="w"> </span><span class="s2">"VSDebugConsole"</span><span class="w">
                </span><span class="p">},</span><span class="w">
                </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"guid"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{72b5d9e6-2c71-5e9a-bf26-e8f53ae4c661}"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"hidden"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Developer Command Prompt for VS 2022 (2)"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"source"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Windows.Terminal.VisualStudio"</span><span class="w">
                </span><span class="p">},</span><span class="w">
                </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"guid"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{62090c5f-ff51-5b36-8031-449b2b91dff2}"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"hidden"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Developer PowerShell for VS 2022 (2)"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"source"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Windows.Terminal.VisualStudio"</span><span class="w">
                </span><span class="p">}</span><span class="w">
            </span><span class="p">]</span><span class="w">
        </span><span class="p">},</span><span class="w">
        </span><span class="nl">"schemes"</span><span class="p">:</span><span class="w"> 
        </span><span class="p">[</span><span class="w">
            </span><span class="p">{</span><span class="w">
                </span><span class="nl">"background"</span><span class="p">:</span><span class="w"> </span><span class="s2">"#300A24"</span><span class="p">,</span><span class="w">
                </span><span class="nl">"black"</span><span class="p">:</span><span class="w"> </span><span class="s2">"#171421"</span><span class="p">,</span><span class="w">
                </span><span class="nl">"blue"</span><span class="p">:</span><span class="w"> </span><span class="s2">"#0037DA"</span><span class="p">,</span><span class="w">
                </span><span class="nl">"brightBlack"</span><span class="p">:</span><span class="w"> </span><span class="s2">"#767676"</span><span class="p">,</span><span class="w">
                </span><span class="nl">"brightBlue"</span><span class="p">:</span><span class="w"> </span><span class="s2">"#08458F"</span><span class="p">,</span><span class="w">
                </span><span class="nl">"brightCyan"</span><span class="p">:</span><span class="w"> </span><span class="s2">"#2C9FB3"</span><span class="p">,</span><span class="w">
                </span><span class="nl">"brightGreen"</span><span class="p">:</span><span class="w"> </span><span class="s2">"#26A269"</span><span class="p">,</span><span class="w">
                </span><span class="nl">"brightPurple"</span><span class="p">:</span><span class="w"> </span><span class="s2">"#A347BA"</span><span class="p">,</span><span class="w">
                </span><span class="nl">"brightRed"</span><span class="p">:</span><span class="w"> </span><span class="s2">"#C01C28"</span><span class="p">,</span><span class="w">
                </span><span class="nl">"brightWhite"</span><span class="p">:</span><span class="w"> </span><span class="s2">"#F2F2F2"</span><span class="p">,</span><span class="w">
                </span><span class="nl">"brightYellow"</span><span class="p">:</span><span class="w"> </span><span class="s2">"#A2734C"</span><span class="p">,</span><span class="w">
                </span><span class="nl">"cursorColor"</span><span class="p">:</span><span class="w"> </span><span class="s2">"#FFFFFF"</span><span class="p">,</span><span class="w">
                </span><span class="nl">"cyan"</span><span class="p">:</span><span class="w"> </span><span class="s2">"#3A96DD"</span><span class="p">,</span><span class="w">
                </span><span class="nl">"foreground"</span><span class="p">:</span><span class="w"> </span><span class="s2">"#FFFFFF"</span><span class="p">,</span><span class="w">
                </span><span class="nl">"green"</span><span class="p">:</span><span class="w"> </span><span class="s2">"#26A269"</span><span class="p">,</span><span class="w">
                </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Ubuntu-ColorScheme"</span><span class="p">,</span><span class="w">
                </span><span class="nl">"purple"</span><span class="p">:</span><span class="w"> </span><span class="s2">"#881798"</span><span class="p">,</span><span class="w">
                </span><span class="nl">"red"</span><span class="p">:</span><span class="w"> </span><span class="s2">"#C21A23"</span><span class="p">,</span><span class="w">
                </span><span class="nl">"selectionBackground"</span><span class="p">:</span><span class="w"> </span><span class="s2">"#FFFFFF"</span><span class="p">,</span><span class="w">
                </span><span class="nl">"white"</span><span class="p">:</span><span class="w"> </span><span class="s2">"#CCCCCC"</span><span class="p">,</span><span class="w">
                </span><span class="nl">"yellow"</span><span class="p">:</span><span class="w"> </span><span class="s2">"#A2734C"</span><span class="w">
            </span><span class="p">}</span><span class="w">
        </span><span class="p">],</span><span class="w">
        </span><span class="nl">"themes"</span><span class="p">:</span><span class="w"> </span><span class="p">[]</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<ul>
  <li>Run the following command to Install PowerShell Gallery Modules. This is used to install the Terminal-Icons module, which is required by Oh My Posh:</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  Install-Module <span class="nt">-Name</span> Terminal-Icons <span class="nt">-Repository</span> PSGallery
</code></pre></div></div>

<ol>
  <li><strong>Configure Theme</strong>:
    <ul>
      <li>You can choose a theme from the <a href="https://ohmyposh.dev/docs/themes">Oh My Posh theme gallery</a>.</li>
      <li>Generally themes are located in <code class="language-plaintext highlighter-rouge">C:\Users\{your-username}\AppData\Local\Programs\oh-my-posh\themes</code>.</li>
      <li>
        <p>You can initialize Oh My Posh with a specific theme by running the following command:</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>oh-my-posh init pwsh <span class="nt">--config</span> C:<span class="se">\U</span>sers<span class="se">\{</span>your-username<span class="o">}</span><span class="se">\A</span>ppData<span class="se">\L</span>ocal<span class="se">\P</span>rograms<span class="se">\o</span>h-my-posh<span class="se">\t</span>hemes<span class="se">\j</span>andedobbeleer.omp.json | Invoke-Expression
</code></pre></div>        </div>
      </li>
      <li>In my case, I have created a custom theme named <code class="language-plaintext highlighter-rouge">myposh-mahedee.omp.json</code></li>
      <li>
        <p>You can copy it from here:
https://gist.github.com/mahedee/e93c0f1f145dcb6db804c73fa4ed859e</p>
      </li>
      <li>Create a file named <code class="language-plaintext highlighter-rouge">myposh-mahedee.omp.json</code> and copy it to the themes directory.</li>
      <li>
        <p>Now initialize Oh My Posh with this theme:</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>oh-my-posh init pwsh <span class="nt">--config</span> C:<span class="se">\U</span>sers<span class="se">\{</span>your-username<span class="o">}</span><span class="se">\A</span>ppData<span class="se">\L</span>ocal<span class="se">\P</span>rograms<span class="se">\o</span>h-my-posh<span class="se">\t</span>hemes<span class="se">\m</span>yposh-mahedee.omp.json | Invoke-Expression
</code></pre></div>        </div>
      </li>
      <li>
        <p>In my case and as per example below, you will see the theme is configured in the PowerShell profile script - Microsoft.PowerShell_profile.ps1 as follows:</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> oh-my-posh init pwsh <span class="nt">--config</span> C:<span class="se">\U</span>sers<span class="se">\m</span>ahedee<span class="se">\A</span>ppData<span class="se">\L</span>ocal<span class="se">\P</span>rograms<span class="se">\o</span>h-my-posh<span class="se">\t</span>hemes<span class="se">\m</span>yposh-mahedee.omp.json | Invoke-Expression
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ol>

<p><strong>Step 6: Configure IntelliSense in PowerShell using PSReadLine</strong></p>
<ul>
  <li>Install the PSReadLine module by running the following command in PowerShell:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  Install-Module <span class="nt">-Name</span> PSReadLine <span class="nt">-AllowClobber</span> <span class="nt">-Force</span>
</code></pre></div>    </div>
    <p>References: https://learn.microsoft.com/en-us/powershell/module/psreadline/about/about_psreadline?view=powershell-7.4</p>
  </li>
  <li>Enable Predictive IntelliSense by running the following command:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  Set-PSReadLineOption <span class="nt">-PredictionSource</span> History
</code></pre></div>    </div>
  </li>
</ul>

<p><strong>Step 7: Restart Windows Terminal</strong></p>
<ul>
  <li>After saving the profile, close and reopen Windows Terminal to see the changes.</li>
  <li>Now you should see the Oh My Posh theme applied to your PowerShell prompt, making it visually appealing and informative.</li>
  <li>Use the terminal as you normally would, and enjoy the enhanced experience provided by Oh My Posh.</li>
  <li>You can see the theme is applied in the PowerShell prompt as shown below:</li>
</ul>

<p><img src="/assets/images/posts/2024/my-terminal.png" alt="Oh My Posh Theme" /></p>

<p><strong>Efficient Command Usage and History</strong></p>

<p>Windows Terminal makes it easy to work efficiently and navigate your history:</p>

<ol>
  <li>
    <p><strong>Use the Up and Down Arrow Keys</strong>: To quickly scroll through the history of commands.</p>
  </li>
  <li>
    <p><strong>Search Through History</strong>: Press <strong>Ctrl + R</strong> and start typing a command to search for it.</p>
  </li>
  <li>
    <p><strong>Save Command History</strong>: By default, PowerShell saves the history. If you want to ensure your history is saved across sessions, add this to your <code class="language-plaintext highlighter-rouge">$PROFILE</code>:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$historyPath</span> <span class="o">=</span> <span class="s2">"</span><span class="nv">$env</span><span class="s2">:USERPROFILE</span><span class="se">\D</span><span class="s2">ocuments</span><span class="se">\P</span><span class="s2">owerShell_history.txt"</span>
<span class="k">if</span> <span class="o">(</span>Test-Path <span class="nv">$historyPath</span><span class="o">)</span> <span class="o">{</span>
    Get-Content <span class="nv">$historyPath</span> | Add-History
<span class="o">}</span>
Register-EngineEvent PowerShell.Exiting <span class="nt">-Action</span> <span class="o">{</span> Get-History | Export-Csv <span class="nv">$historyPath</span> <span class="nt">-NoTypeInformation</span> <span class="o">}</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p><strong>Use Aliases for Common Commands</strong>:
In PowerShell or Git Bash, create aliases for long commands to make them quicker to type:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Set-Alias gs git status
Set-Alias gl git log
</code></pre></div>    </div>
  </li>
</ol>

<p><strong>Additional Tips and Tricks</strong></p>

<ol>
  <li><strong>Split Panes</strong>: You can split your terminal into multiple panes.
    <ul>
      <li><strong>Ctrl + Shift + D</strong>: Split horizontally.</li>
      <li><strong>Alt + Shift + D</strong>: Split vertically.</li>
      <li><strong>Ctrl + Shift + W</strong>: Close a pane.</li>
    </ul>
  </li>
  <li><strong>Quick Access to Profiles</strong>: You can easily switch between profiles in Windows Terminal via the dropdown menu or by using the keyboard shortcut.
    <ul>
      <li><strong>Ctrl + Tab</strong>: Cycle through profiles.</li>
      <li><strong>Ctrl + Shift + Tab</strong>: Cycle through profiles in reverse order.</li>
    </ul>
  </li>
  <li><strong>Use Profiles for Different Environments</strong>: Create multiple profiles for PowerShell, Git Bash, WSL, or other environments and switch seamlessly between them.</li>
</ol>

<p><strong>Conclusion</strong></p>

<p>By following these steps, you’ve successfully set up a productive and efficient Windows Terminal environment. With <strong>Oh My Posh</strong>, you’ve made your PowerShell experience visually appealing and informative. You’ve also integrated <strong>Git Bash</strong> for a seamless Unix-like experience on Windows, making it easier to switch between different tools and environments. Similar way you can include Ubuntu, putty etc.</p>

<p>Windows Terminal offers unmatched flexibility in managing your development tools, and with the addition of themes, custom profiles, and persistent command history, your workflow will be more efficient than ever before.</p>

<p>Happy coding!</p>]]></content><author><name>Mahedee Hasan</name></author><category term="Windows" /><category term="Terminal" /><category term="Git Bash" /><category term="Productivity" /><category term="PowerShell" /><category term="windows" /><category term="terminal" /><category term="gitbash" /><category term="productivity" /><category term="powershell" /><summary type="html"><![CDATA[Discover how to enhance your productivity by setting up and customizing Windows Terminal with Git Bash and Oh My Posh. This comprehensive guide walks you through the installation, configuration, and optimization of your terminal environment, making it easier and more efficient to work on development projects.]]></summary></entry><entry><title type="html">How to Configure SSL and HTTPS for RabbitMQ in Docker</title><link href="https://mahedee.net//how-to-configure-ssl-and-https-for-rabbitmq-in-docker/" rel="alternate" type="text/html" title="How to Configure SSL and HTTPS for RabbitMQ in Docker" /><published>2024-08-02T00:00:00-04:00</published><updated>2024-08-02T00:00:00-04:00</updated><id>https://mahedee.net//how-to-configure-ssl-and-https-for-rabbitmq-in-docker</id><content type="html" xml:base="https://mahedee.net//how-to-configure-ssl-and-https-for-rabbitmq-in-docker/"><![CDATA[<p>Securing RabbitMQ with SSL/TLS and enabling HTTPS access for the Management UI is essential to protect data and ensure a secure environment. This guide walks you through the steps to set up RabbitMQ with SSL/TLS on Docker Desktop and enable HTTPS for the Management UI. Follow along to configure RabbitMQ to handle encrypted AMQP connections as well as a secure Management interface.</p>

<p><strong>Prerequisites</strong></p>

<p>To follow this guide, you’ll need:</p>
<ol>
  <li><strong>Docker Desktop</strong>: Installed and running on your machine.</li>
  <li><strong>RabbitMQ Configuration Files</strong>: Basic familiarity with RabbitMQ configurations and SSL certificates.</li>
  <li><strong>OpenSSL</strong>: To create self-signed certificates if needed.</li>
</ol>

<p><strong>Step 1: Create SSL/TLS Certificates</strong></p>

<p>To secure RabbitMQ over SSL, you’ll need three key files:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">ca_certificate.pem</code>: Certificate Authority (CA) certificate. This file is required for RabbitMQ to validate client certificates.</li>
  <li><code class="language-plaintext highlighter-rouge">server_certificate.pem</code>: Server certificate signed by the CA. This file is used by RabbitMQ to authenticate itself to clients.</li>
  <li><code class="language-plaintext highlighter-rouge">server_key.pem</code>: Private key for the server certificate. This file is used by RabbitMQ to decrypt incoming client requests.</li>
</ul>

<p><strong>Creating Self-Signed Certificates</strong></p>

<p><strong>1: Create a Certificate Authority (CA)</strong></p>

<p>First, create a CA certificate to sign the server certificate.</p>

<p>1.1 <strong>Generate a private key for the CA</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   openssl genpkey <span class="nt">-algorithm</span> RSA <span class="nt">-out</span> ca_key.pem <span class="nt">-aes256</span>
</code></pre></div></div>

<ul>
  <li>You’ll be prompted to create a passphrase for the CA key. Remember this, as it will be needed to sign certificates.</li>
</ul>

<p>1.2 <strong>Generate a CA certificate</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   openssl req <span class="nt">-x509</span> <span class="nt">-new</span> <span class="nt">-nodes</span> <span class="nt">-key</span> ca_key.pem <span class="nt">-sha256</span> <span class="nt">-days</span> 3650 <span class="nt">-out</span> ca_certificate.pem
</code></pre></div></div>

<ul>
  <li>You’ll be asked to fill out details for the CA certificate (such as country, organization, etc.). This will generate the <code class="language-plaintext highlighter-rouge">ca_certificate.pem</code> file.</li>
  <li>You can keep everything blank if you’re creating a self-signed certificate for testing purposes.</li>
</ul>

<p><strong>2: Create the Server Certificate and Key</strong></p>

<p>Next, create the server certificate that RabbitMQ will use, signed by your CA.</p>

<p>2.1. <strong>Generate a private key for the server</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   openssl genpkey <span class="nt">-algorithm</span> RSA <span class="nt">-out</span> server_key.pem
</code></pre></div></div>

<p>2.2. <strong>Create a Certificate Signing Request (CSR) for the server certificate</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   openssl req <span class="nt">-new</span> <span class="nt">-key</span> server_key.pem <span class="nt">-out</span> server_csr.pem
</code></pre></div></div>

<ul>
  <li>You’ll be prompted to enter details for the server. Be sure to set <code class="language-plaintext highlighter-rouge">Common Name (CN)</code> to the server’s hostname or IP address, as clients will check this when verifying the server’s identity.</li>
  <li>You can keep other fields blank for testing purposes.</li>
</ul>

<p>2.3. <strong>Sign the server certificate with the CA</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   openssl x509 <span class="nt">-req</span> <span class="nt">-in</span> server_csr.pem <span class="nt">-CA</span> ca_certificate.pem <span class="nt">-CAkey</span> ca_key.pem <span class="nt">-CAcreateserial</span> <span class="nt">-out</span> server_certificate.pem <span class="nt">-days</span> 3650 <span class="nt">-sha256</span>
</code></pre></div></div>

<ul>
  <li>This step signs the <code class="language-plaintext highlighter-rouge">server_certificate.pem</code> with <code class="language-plaintext highlighter-rouge">ca_certificate.pem</code>, creating a valid SSL certificate for the server. The <code class="language-plaintext highlighter-rouge">-CAcreateserial</code> flag creates a <code class="language-plaintext highlighter-rouge">ca_certificate.srl</code> file that manages the CA’s serial numbers for certificates.</li>
</ul>

<p>After completing the above steps, you should have these files:</p>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">ca_certificate.pem</code></strong>: The CA certificate file used to verify server identity.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">server_certificate.pem</code></strong>: The server’s signed certificate file.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">server_key.pem</code></strong>: The server’s private key file.</li>
</ul>

<p>These files can now be used in the <code class="language-plaintext highlighter-rouge">docker-compose.yml</code> setup you configured earlier. Ensure the certificates are placed in the correct <code class="language-plaintext highlighter-rouge">certs</code> directory and that permissions are set to secure access to the private key (<code class="language-plaintext highlighter-rouge">server_key.pem</code>).</p>

<p><strong>Step 2: Set Up <code class="language-plaintext highlighter-rouge">rabbitmq.conf</code> for SSL and HTTPS</strong></p>

<p>RabbitMQ requires configurations to enable SSL for AMQP client connections (on port 5671) and HTTPS for the Management UI (on port 15671). Let’s create a <code class="language-plaintext highlighter-rouge">rabbitmq.conf</code> file with these configurations:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># SSL settings for the main AMQP listener (used for client connections over SSL/TLS)
listeners.ssl.default = 5671                     # AMQP listener over SSL/TLS on port 5671
ssl_options.cacertfile = /etc/rabbitmq/certs/ca_certificate.pem  # Path to the CA certificate to verify client certificates
ssl_options.certfile = /etc/rabbitmq/certs/server_certificate.pem # Path to the server certificate for RabbitMQ
ssl_options.keyfile = /etc/rabbitmq/certs/server_key.pem         # Path to the server private key for SSL
ssl_options.verify = verify_peer                # Requires clients to present valid certificates (mutual authentication)
ssl_options.fail_if_no_peer_cert = true         # Disconnects clients if they don't present a valid certificate

# Enable HTTPS for the management interface
management.listener.port = 15671                # Port for accessing RabbitMQ Management UI over HTTPS
management.listener.ssl = true                  # Enable SSL for the management UI listener
management.listener.ip = 0.0.0.0                # Bind to all available network interfaces to accept external connections

# SSL options for HTTPS management listener
management.listener.ssl_opts.cacertfile = /etc/rabbitmq/certs/ca_certificate.pem  # CA certificate for HTTPS verification
management.listener.ssl_opts.certfile = /etc/rabbitmq/certs/server_certificate.pem # Server certificate for HTTPS
management.listener.ssl_opts.keyfile = /etc/rabbitmq/certs/server_key.pem         # Private key for HTTPS
management.listener.ssl_opts.verify = verify_none          # Allows clients to access without presenting a client certificate
management.listener.ssl_opts.fail_if_no_peer_cert = false  # Does not require client certificates for HTTPS access

</code></pre></div></div>

<p>In this configuration:</p>
<ul>
  <li><strong>AMQP (5671)</strong>: The <code class="language-plaintext highlighter-rouge">verify_peer</code> and <code class="language-plaintext highlighter-rouge">fail_if_no_peer_cert</code> options enforce strict client certificate validation.</li>
  <li><strong>Management UI (15671)</strong>: Allows HTTPS access without requiring client certificates.</li>
</ul>

<p>Save this file as <code class="language-plaintext highlighter-rouge">rabbitmq.conf</code>.</p>

<p><strong>Step 3: Configure <code class="language-plaintext highlighter-rouge">docker-compose.yml</code> for RabbitMQ</strong></p>

<p>To set up RabbitMQ with the configurations and certificates, we need to update <code class="language-plaintext highlighter-rouge">docker-compose.yml</code>:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">3.8'</span>

<span class="na">services</span><span class="pi">:</span>
  <span class="na">rabbitmq</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">rabbitmq:3-management</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">rabbitmq</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">5671:5671"</span>         <span class="c1"># RabbitMQ SSL port</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">15671:15671"</span>       <span class="c1"># RabbitMQ management plugin port</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="na">RABBITMQ_DEFAULT_USER</span><span class="pi">:</span> <span class="s">user</span>             <span class="c1"># Default username</span>
      <span class="na">RABBITMQ_DEFAULT_PASS</span><span class="pi">:</span> <span class="s">password</span>         <span class="c1"># Default password</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">rabbitmq_data:/var/lib/rabbitmq</span>      <span class="c1"># Data persistence</span>
      <span class="pi">-</span> <span class="s">./certs:/etc/rabbitmq/certs</span>          <span class="c1"># Mount the certs directory of local machine to the container directory</span>
      <span class="pi">-</span> <span class="s">./rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf</span>  <span class="c1"># Custom RabbitMQ configuration file. This file is used to enable SSL and configure the SSL certificates. rabbitmq.conf file is mounted to the container directory /etc/rabbitmq/rabbitmq.conf</span>
    <span class="na">command</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">rabbitmq-server"</span><span class="pi">]</span>            <span class="c1"># Start the RabbitMQ server. This command is used to start the RabbitMQ server with the custom configuration file.</span>

<span class="na">volumes</span><span class="pi">:</span>
  <span class="na">rabbitmq_data</span><span class="pi">:</span>

<span class="c1">#rabbitmq_data is mounted to /var/lib/rabbitmq inside the container. RabbitMQ stores its data in /var/lib/rabbitmq by default, so mounting a persistent volume to this location ensures that data generated by RabbitMQ is saved in the rabbitmq_data volume.</span>

</code></pre></div></div>

<p><strong>Explanation of the Volume Mounts</strong></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">rabbitmq_data</code>: Ensures RabbitMQ data (queues, exchanges, etc.) persist across container restarts.</li>
  <li><code class="language-plaintext highlighter-rouge">./certs</code>: Mounts the local certificates folder to <code class="language-plaintext highlighter-rouge">/etc/rabbitmq/certs</code> inside the container, where RabbitMQ can access them.</li>
  <li><code class="language-plaintext highlighter-rouge">./rabbitmq.conf</code>: Mounts the custom configuration file into <code class="language-plaintext highlighter-rouge">/etc/rabbitmq/rabbitmq.conf</code> inside the container.</li>
</ul>

<p>The folder structure as follows:</p>
<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rabbitmq-ssl
│   docker-compose.yml
│   rabbitmq.conf
│   certs/
│       ca_certificate.pem
│       server_certificate.pem
│       server_key.pem
</code></pre></div></div>

<p><strong>Step 4: Start RabbitMQ and Verify SSL Configuration</strong></p>

<ol>
  <li>
    <p>Run the following command to start the RabbitMQ container with HTTPS and SSL enabled:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker-compose up <span class="nt">-d</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Verify that RabbitMQ is listening on the correct ports:</p>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker ps
</code></pre></div>    </div>
    <p>You should see ports 5671 (for AMQP over SSL) and 15671 (for HTTPS management) mapped.</p>
  </li>
</ol>

<p><strong>Step 5: Access the RabbitMQ Management UI over HTTPS</strong></p>

<p>Open your browser and navigate to <code class="language-plaintext highlighter-rouge">https://localhost:15671</code>. If you’re using a self-signed certificate, you’ll likely see a security warning. Proceed by accepting the certificate to access the Management UI.</p>

<p><strong>Step 6: Configure AMQP Clients for SSL Connections</strong></p>

<p>For applications or services that connect to RabbitMQ over AMQP, use the following settings:</p>
<ul>
  <li><strong>URL</strong>: <code class="language-plaintext highlighter-rouge">amqps://localhost:5671</code></li>
  <li><strong>CA Certificate</strong>: <code class="language-plaintext highlighter-rouge">ca_certificate.pem</code> (for client validation)</li>
</ul>

<p>Client applications should verify the RabbitMQ server certificate by using <code class="language-plaintext highlighter-rouge">ca_certificate.pem</code>. Depending on the client library, you may need to specify additional SSL options.</p>

<p><strong>Troubleshooting Tips</strong></p>

<ul>
  <li><strong>Permissions</strong>: Ensure that the <code class="language-plaintext highlighter-rouge">.pem</code> files are readable by the RabbitMQ process inside the container.</li>
  <li><strong>SSL/TLS Version Compatibility</strong>: Some clients may have specific SSL/TLS requirements. Ensure your configuration aligns with the client’s requirements.</li>
</ul>

<p><strong>Conclusion</strong></p>

<p>Setting up RabbitMQ with SSL/TLS and enabling HTTPS access for the Management UI greatly enhances security, especially in production environments. With these configurations, RabbitMQ can securely handle both AMQP client connections and browser-based management over HTTPS.</p>

<p>Following these steps, you’ll have a robust, secure RabbitMQ instance that protects your data in transit and allows safe administration.</p>

<p><strong>Note for docker container:</strong></p>
<ul>
  <li>docker exec -it rabbitmq bash - access the container terminal, rabbitmq is the container name</li>
  <li>docker exec -it rabbitmq ls -l /etc/rabbitmq/certs - list the certs in the container</li>
  <li>You can access container terminal from docker desktop as follows:
    <ul>
      <li>Click on the container</li>
      <li>Click on Termianl tab</li>
    </ul>
  </li>
</ul>]]></content><author><name>Mahedee Hasan</name></author><category term="RabbitMQ" /><category term="Docker" /><category term="SSL" /><category term="rabbitmq" /><category term="docker" /><category term="ssl" /><summary type="html"><![CDATA[Securing RabbitMQ with SSL/TLS and enabling HTTPS access for the Management UI is essential to protect data and ensure a secure environment. This guide walks you through the steps to set up RabbitMQ with SSL/TLS on Docker Desktop and enable HTTPS for the Management UI. Follow along to configure RabbitMQ to handle encrypted AMQP connections as well as a secure Management interface.]]></summary></entry><entry><title type="html">Step-by-Step Guide: Deploying an ASP.NET Core Application with Azure Kubernetes Services, Azure SQL Server, and Azure Container Registry</title><link href="https://mahedee.net//step-by-step-guide-deploying-aspnet-core-application-with-aks-acr-sql/" rel="alternate" type="text/html" title="Step-by-Step Guide: Deploying an ASP.NET Core Application with Azure Kubernetes Services, Azure SQL Server, and Azure Container Registry" /><published>2024-07-07T00:00:00-04:00</published><updated>2024-07-07T00:00:00-04:00</updated><id>https://mahedee.net//step-by-step-guide-deploying-aspnet-core-application-with-aks-acr-sql</id><content type="html" xml:base="https://mahedee.net//step-by-step-guide-deploying-aspnet-core-application-with-aks-acr-sql/"><![CDATA[<p><strong>What is Azure Kubernetes Services (AKS)?</strong> 
Azure Kubernetes Services (AKS) is a managed Kubernetes service provided by Microsoft Azure. It offers a simplified way to deploy, manage, and scale containerized applications using Kubernetes. AKS is a fully managed service that eliminates the complexity of managing Kubernetes clusters, allowing you to focus on building and deploying your applications.</p>

<p><strong>What is Azure SQL Server?</strong>
Azure SQL Server is a managed relational database service provided by Microsoft Azure. It offers a scalable, secure, and fully managed database service that is compatible with SQL Server. Azure SQL Server provides high availability, automatic backups, and built-in security features to protect your data.</p>

<p><strong>What is Azure Container Registry (ACR)?</strong>
Azure Container Registry (ACR) is a managed container registry provided by Microsoft Azure. It allows you to store and manage container images securely in the cloud. ACR integrates with Azure services like Azure Kubernetes Services (AKS) to simplify the deployment of containerized applications.</p>

<p>In this article, you’ll learn how to deploy an ASP.NET Core application using Azure Kubernetes Services (AKS), Azure SQL Server, and Azure Container Registry (ACR). The steps below assume you have some basic familiarity with ASP.NET Core, Azure services, and Docker.</p>

<p><strong>Prerequisites</strong>
Before you begin, ensure you have the following:</p>
<ul>
  <li>An Azure subscription (create a free account if you don’t have one)</li>
  <li>Azure CLI installed on your local machine</li>
  <li>Docker Desktop installed on your local machine</li>
  <li>Visual Studio or any other code editor</li>
  <li>Basic knowledge of ASP.NET Core, Docker, and Kubernetes</li>
  <li>Kubectl installed on your local machine</li>
</ul>

<p><strong>Step 1: Create an Azure SQL Database</strong></p>
<ul>
  <li>Open the Azure portal and sign in with your Azure account.</li>
  <li>Click on the “Create a resource” button and search for “SQL Database”.</li>
  <li>Click on the “Create” button to create a new SQL Database.</li>
  <li>Fill in the required details like server name, database name, resource group, and pricing tier.</li>
  <li>Click on the “Review + create” button to create the SQL Database.</li>
</ul>

<p>or</p>
<ul>
  <li>Login to Azure CLI</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az login
</code></pre></div></div>

<ul>
  <li>Create a resource group for the SQL Server and Database</li>
  <li>Create a SQL Server and Database using Azure CLI</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Create a resource group</span>
az group create <span class="nt">--name</span> &lt;ResourceGroupName&gt; <span class="nt">--location</span> &lt;Location&gt;

<span class="c"># Create a SQL Server</span>
az sql server create <span class="nt">--name</span> &lt;SqlServerName&gt; <span class="nt">--resource-group</span> &lt;ResourceGroupName&gt; <span class="nt">--location</span> &lt;Location&gt; <span class="nt">--admin-user</span> &lt;AdminUser&gt; <span class="nt">--admin-password</span> &lt;AdminPassword&gt;

<span class="c"># Create a SQL Database with the S0 pricing tier</span>
az sql db create <span class="nt">--resource-group</span> &lt;ResourceGroupName&gt; <span class="nt">--server</span> &lt;SqlServerName&gt; <span class="nt">--name</span> &lt;DatabaseName&gt; <span class="nt">--service-objective</span> S0
</code></pre></div></div>

<p>Example of creating a SQL Server and Database using Azure CLI:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Create a resource group named myresourcegroup in the westus location</span>
az group create <span class="nt">--name</span> myresourcegroup <span class="nt">--location</span> westus

<span class="c"># Create a SQL Server named myserver in the myresourcegroup resource group with the admin user mahedee and password mypass@123</span>
az sql server create <span class="nt">--name</span> mahedeesqlserver <span class="nt">--resource-group</span> myresourcegroup <span class="nt">--location</span> westus <span class="nt">--admin-user</span> mahedee <span class="nt">--admin-password</span> mypass@123

<span class="c"># Create a SQL Database named mydatabase in the myresourcegroup resource group with the S0 pricing tier</span>
az sql db create <span class="nt">--resource-group</span> myresourcegroup <span class="nt">--server</span> mahedeesqlserver <span class="nt">--name</span> HRMDB <span class="nt">--service-objective</span> S0
</code></pre></div></div>

<ul>
  <li>Set Up Firewall Rules Allow your local machine or AKS to access the SQL server.</li>
  <li>Try to connect to the SQL Server using SQL Server Management Studio (SSMS) or Azure Data Studio to verify the connection.</li>
  <li>You will get a message that the IP address is not allowed to access the server.</li>
  <li>It will show the IP address range that is need to be added to the firewall rules.</li>
  <li>Collect start and end IP address range from the error message and add the IP address range to the firewall rules using the Azure CLI.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Allow your local machine to access the SQL server</span>
az sql server firewall-rule create <span class="nt">--resource-group</span> myresourcegroup <span class="nt">--server</span> mahedeesqlserver <span class="nt">--name</span> AllowLocalMachine <span class="nt">--start-ip-address</span> &lt;YourIPAddress&gt; <span class="nt">--end-ip-address</span> &lt;YourIPAddress&gt;
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Example: Allow your local machine to access the SQL server</span>
az sql server firewall-rule create <span class="nt">--resource-group</span> myresourcegroup <span class="nt">--server</span> mahedeesqlserver <span class="nt">--name</span> AllowLocalMachine <span class="nt">--start-ip-address</span> 162.237.182.0 <span class="nt">--end-ip-address</span> 162.237.182.255
</code></pre></div></div>

<p><strong>Step 2: Create an ASP.NET Core Application</strong></p>

<ul>
  <li>Create a new ASP.NET Core application using Visual Studio or the .NET CLI.</li>
  <li>Install the required NuGet packages for Azure SQL Database and Entity Framework Core.</li>
  <li>Configure the connection string to your Azure SQL Database.</li>
  <li>Create the required models and DbContext for your application.</li>
  <li>Add the required services and middleware to your application.</li>
  <li>Build and run your ASP.NET Core application locally to test it.</li>
</ul>

<p>In this Article I have created an asp.net core web api application name HRM.API. Source of the application is given at the end of the article.</p>

<ul>
  <li>
    <p>Now create a Dockerfile in the root of your project to containerize your ASP.NET Core application.</p>
  </li>
  <li>
    <p>I have added lot of comments in the Dockerfile to explain each step.</p>
  </li>
</ul>

<p><strong>Dockerfile</strong></p>

<div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Define the base image</span>
<span class="c"># Use the official ASP.NET Core runtime image the alias base sets here to use it in the next stage</span>

<span class="c"># Switches the execution to a user named app. This is a security best practice to avoid running as root.</span>
<span class="c"># The app user must exist in the aspnet:8.0 image. If not, this command will fail unless the user is created beforehand.</span>

<span class="c"># Sets the working directory to /app. All subsequent commands in this stage will be relative to this directory.</span>

<span class="c"># Informs Docker that the container will listen on ports 8080 and 8081. </span>
<span class="c"># This is for documentation purposes and does not expose the ports to the host by itself; you need to publish these ports explicitly with docker run -p.</span>

<span class="k">FROM</span><span class="w"> </span><span class="s">mcr.microsoft.com/dotnet/aspnet:8.0</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">base</span>
<span class="k">USER</span><span class="s"> app</span>
<span class="k">WORKDIR</span><span class="s"> /app</span>
<span class="k">EXPOSE</span><span class="s"> 8080</span>
<span class="k">EXPOSE</span><span class="s"> 8081</span>


<span class="c"># Define the Build Stage</span>
<span class="c"># Use the official ASP.NET Core SDK image to build the application</span>
<span class="c"># Set the working directory to /src. This directory will be existing only in the build stage.</span>
<span class="c"># Copies all files from the current directory on the host machine to the /src directory in the container.</span>
<span class="c"># Restores project dependencies from the .csproj file. This ensures all necessary NuGet packages are downloaded.</span>
<span class="c"># Builds the application in Release configuration and outputs the compiled files to the /app directory inside the container.</span>
<span class="k">FROM</span><span class="w"> </span><span class="s">mcr.microsoft.com/dotnet/sdk:8.0</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">build</span>
<span class="k">WORKDIR</span><span class="s"> /src</span>
<span class="k">COPY</span><span class="s"> . .</span>
<span class="k">RUN </span>dotnet restore
<span class="k">RUN </span>dotnet publish <span class="nt">-c</span> Release <span class="nt">-o</span> /app

<span class="c"># Final State</span>
<span class="c"># Use the base image defined in the first stage.</span>
<span class="c"># Set the working directory to /app.</span>
<span class="c"># Copies the compiled application from the build stage to the /app directory in the final image.</span>
<span class="c"># Defines the command to run when the container starts. Here, it launches the application by executing the .NET runtime to run the HRM.API.dll file.</span>
<span class="k">FROM</span><span class="w"> </span><span class="s">base</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">final</span>
<span class="k">WORKDIR</span><span class="s"> /app</span>
<span class="k">COPY</span><span class="s"> --from=build /app .</span>
<span class="k">ENTRYPOINT</span><span class="s"> ["dotnet", "HRM.API.dll"]</span>

<span class="c"># You can see only the app directory in the final image because Multi-stage builds isolate the content of each stage from the other stages.</span>
<span class="c"># Docker multi-stage build process implicitly discards everything in the intermediate stages when the final stage is built.</span>
</code></pre></div></div>

<ul>
  <li>Build and Test the Docker Image Locally</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Build the Docker image using the Dockerfile</span>
docker build <span class="nt">-t</span> hrm:latest <span class="nb">.</span>

<span class="c"># Run the Docker image locally</span>
docker run <span class="nt">-p</span> 8080:8080 hrm:latest
</code></pre></div></div>

<p>Access your application at http://localhost:8080/swagger/index.html to verify it works.</p>

<p><strong>Step 3: Create an Azure Container Registry (ACR)</strong></p>
<ul>
  <li>Open the Azure portal and sign in with your Azure account.</li>
  <li>Click on “Create a resource” and search for “Container Registry”.</li>
  <li>Select “Container Registry” and click on “Create”.</li>
  <li>Fill in the required details like registry name, resource group, location, and SKU.</li>
  <li>Click on “Review + create” and then “Create” to create the ACR.</li>
</ul>

<p>or</p>
<ul>
  <li>Create an Azure Container Registry using Azure CLI</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Create a resource group for the ACR</span>
<span class="c"># Since we already have a resource group, we can skip this step</span>
az group create <span class="nt">--name</span> &lt;ResourceGroupName&gt; <span class="nt">--location</span> &lt;Location&gt;

<span class="c"># Create an ACR</span>
az acr create <span class="nt">--name</span> &lt;ACRName&gt; <span class="nt">--resource-group</span> &lt;ResourceGroupName&gt; <span class="nt">--sku</span> Basic <span class="nt">--location</span> &lt;Location&gt;
</code></pre></div></div>

<p>Example of creating an Azure Container Registry using Azure CLI:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Create a resource group named myresourcegroup in the westus location</span>
<span class="c"># Since we already have a resource group, we can skip this step</span>
az group create <span class="nt">--name</span> myresourcegroup <span class="nt">--location</span> westus

<span class="c"># Create an ACR named myacr in the myresourcegroup resource group with the Basic SKU</span>
az acr create <span class="nt">--name</span> mh17acr <span class="nt">--resource-group</span> myresourcegroup <span class="nt">--sku</span> Basic <span class="nt">--location</span> westus
</code></pre></div></div>

<p><strong>Step 4: Push the Docker Image to Azure Container Registry (ACR)</strong></p>
<ul>
  <li>Tag the Docker image with the ACR URL. Tagging the image with the ACR URL is required to push the image to the ACR.</li>
  <li>Log in to the ACR using the Azure CLI.</li>
  <li>Push the Docker image to the ACR.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Tag the Docker image with the ACR URL</span>
docker tag hrm:latest &lt;ACRName&gt;.azurecr.io/hrm:latest
<span class="c"># Login to the ACR using the Azure CLI</span>
az acr login <span class="nt">--name</span> &lt;ACRName&gt;
<span class="c"># Push the Docker image to the ACR</span>
docker push &lt;ACRName&gt;.azurecr.io/hrm:latest
</code></pre></div></div>
<p>Example of pushing a Docker image to Azure Container Registry using Azure CLI:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Tag the Docker image with the ACR URL</span>
docker tag hrm:latest mh17acr.azurecr.io/hrm:latest
<span class="c"># Login to the ACR using the Azure CLI</span>
az acr login <span class="nt">--name</span> mh17acr
<span class="c"># Push the Docker image to the ACR</span>
docker push mh17acr.azurecr.io/hrm:latest
</code></pre></div></div>
<ul>
  <li>Verify that the Docker image is successfully pushed to the ACR by checking the ACR in the Azure portal. or using Azure CLI</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># List the repositories in the ACR</span>
az acr repository list <span class="nt">--name</span> &lt;ACRName&gt; <span class="nt">--output</span> table
</code></pre></div></div>
<p>Example of listing the repositories in the ACR using Azure CLI:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c"># List the repositories in the ACR</span>
  az acr repository list <span class="nt">--name</span> mh17acr <span class="nt">--output</span> table
</code></pre></div></div>

<p><strong>Step 5: Create an Azure Kubernetes Services (AKS) Cluster</strong></p>
<ul>
  <li>Open the Azure portal and sign in with your Azure account.</li>
  <li>Click on the “Create a resource” button and search for “Kubernetes Service”.</li>
  <li>Click on “Create” to create a new AKS cluster.</li>
  <li>Fill in the required information, such as the resource group, location, and cluster name.</li>
  <li>Basics Tab:
    <ul>
      <li>Subscription: Choose your Azure subscription.</li>
      <li>Resource Group: Create a new resource group or select an existing one.</li>
      <li>Kubernetes Cluster Name: Enter a unique name for your AKS cluster.</li>
      <li>Region: Select the region for your cluster.</li>
      <li>Click “Next: Node Pools” to proceed.</li>
    </ul>
  </li>
  <li>Node Pools Tab:
    <ul>
      <li>Click “Add a node pool” to add a new node pool.</li>
      <li>Node Pool Name: Enter a name for the node pool.</li>
      <li>Virtual Machine Size: Choose the VM size for the node pool.</li>
      <li>Node Count: Enter the number of nodes in the pool.</li>
      <li>Click “Next: Authentication” to proceed.</li>
    </ul>
  </li>
  <li>Authentication Tab:
    <ul>
      <li>Leave the default settings for authentication.</li>
      <li>Click “Next: Networking” to proceed.</li>
    </ul>
  </li>
  <li>Networking Tab:
    <ul>
      <li>Leave the default settings for networking.</li>
      <li>Click “Next: Monitoring” to proceed.</li>
    </ul>
  </li>
  <li>Monitoring Tab:
    <ul>
      <li>Enable monitoring if required.</li>
      <li>Click “Next: Tags” to proceed.</li>
    </ul>
  </li>
  <li>Tags Tab:
    <ul>
      <li>Add any required tags to the cluster.</li>
      <li>Click “Next: Review + create” to proceed.</li>
    </ul>
  </li>
  <li>Review + create Tab:
    <ul>
      <li>Review the cluster configuration.</li>
      <li>Click “Create” to create the AKS cluster.</li>
    </ul>
  </li>
  <li>Click on “Review + create” and then “Create” to create the AKS cluster.</li>
  <li>Once the cluster is created, click on the “Connect” button to connect to the cluster using kubectl.</li>
</ul>

<p>or</p>
<ul>
  <li>Create an AKS cluster using Azure CLI</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Create a resource group for the AKS cluster</span>
az group create <span class="nt">--name</span> &lt;ResourceGroupName&gt; <span class="nt">--location</span> &lt;Location&gt;
<span class="c"># Create an AKS cluster</span>
az aks create <span class="nt">--resource-group</span> &lt;ResourceGroupName&gt; <span class="nt">--name</span> &lt;AKSName&gt; <span class="nt">--node-count</span> &lt;NumberOfNodes&gt; <span class="nt">--enable-addons</span> monitoring <span class="nt">--generate-ssh-keys</span>
</code></pre></div></div>
<p>Example of creating an AKS cluster using Azure CLI:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Create a resource group for the AKS cluster</span>
<span class="c"># Since we already have a resource group, we can skip this step</span>
az group create <span class="nt">--name</span> myresourcegroup <span class="nt">--location</span> westus

<span class="c"># Create an AKS cluster</span>
az aks create <span class="nt">--resource-group</span> myresourcegroup <span class="nt">--name</span> myakscluster <span class="nt">--node-count</span> 1 <span class="nt">--enable-addons</span> monitoring <span class="nt">--generate-ssh-keys</span> <span class="nt">--location</span> westus <span class="nt">--kubernetes-version</span> 1.29.9 <span class="nt">--node-vm-size</span> Standard_B2s <span class="nt">--enable-cluster-autoscaler</span> <span class="nt">--min-count</span> 1 <span class="nt">--max-count</span> 3
</code></pre></div></div>
<p>Note: Sometimes, CLI commands may not work due to the version of the CLI. In that case, you can use the Azure portal to create the AKS cluster.</p>

<ul>
  <li>Now Connect to the AKS cluster. Use the following command to connect to the AKS cluster:</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az aks get-credentials <span class="nt">--resource-group</span> &lt;ResourceGroupName&gt; <span class="nt">--name</span> &lt;AKSName&gt;
</code></pre></div></div>

<p>Example of connecting to an AKS cluster using Azure CLI:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Connect to the AKS cluster</span>
az aks get-credentials <span class="nt">--resource-group</span> myresourcegroup <span class="nt">--name</span> myakscluster

<span class="c"># Output</span>
Merged <span class="s2">"myakscluster"</span> as current context <span class="k">in</span> /Users/username/.kube/config
</code></pre></div></div>

<ul>
  <li>To get the list of contexts, run the following command:</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl config get-contexts
</code></pre></div></div>
<ul>
  <li>To switch to a different context, run the following command:</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl config use-context &lt;ContextName&gt;
</code></pre></div></div>

<p><strong>Step 6: Link ACR(Azure Container Registry) to AKS</strong>
If the Azure Kubernetes Service (AKS) cluster is not linked to your ACR, Kubernetes cannot pull the image.</p>

<p>Run the following command to allow AKS to access your ACR:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az aks update <span class="nt">-n</span> &lt;aks-cluster-name&gt; <span class="nt">-g</span> &lt;resource-group-name&gt; <span class="nt">--attach-acr</span> mh17acr
</code></pre></div></div>

<p>Example of linking an ACR to an AKS cluster using Azure CLI:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Link the ACR to the AKS cluster</span>
az aks update <span class="nt">-n</span> myakscluster <span class="nt">-g</span> myresourcegroup <span class="nt">--attach-acr</span> mh17acr 
</code></pre></div></div>

<p><strong>Step 7: Deploy the ASP.NET Core Application to AKS</strong></p>

<ul>
  <li>Connect to the AKS cluster</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az aks get-credentials <span class="nt">--resource-group</span> &lt;ResourceGroupName&gt; <span class="nt">--name</span> &lt;AKSName&gt;
</code></pre></div></div>

<p>Example of connecting to an AKS cluster using Azure CLI:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Connect to the AKS cluster</span>
az aks get-credentials <span class="nt">--resource-group</span> myresourcegroup <span class="nt">--name</span> myakscluster

<span class="c"># Output</span>
Merged <span class="s2">"myakscluster"</span> as current context <span class="k">in</span> /Users/username/.kube/config
</code></pre></div></div>

<ul>
  <li>To get the list of contexts, run the following command:</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl config get-contexts
</code></pre></div></div>
<ul>
  <li>To switch to a different context, run the following command:</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl config use-context &lt;ContextName&gt;
</code></pre></div></div>

<ul>
  <li>Create a Kubernetes Pod for the ASP.NET Core application</li>
  <li>
    <p>Here I used lots of comments to explain each section of the yaml file. You can remove the comments before using it.</p>

    <p><strong>pod_aks.yml</strong></p>
  </li>
</ul>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Pod</span> <span class="c1"># Pod is the smallest deployable unit in Kubernetes and it represents a single instance of a running process in your cluster.</span>
<span class="na">metadata</span><span class="pi">:</span> <span class="c1"># Metadata section provides information about the Pod</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">hrm-pod</span> <span class="c1"># Name of the Pod. Name must be unique within the namespace.</span>
  <span class="na">labels</span><span class="pi">:</span>       <span class="c1"># Labels are key/value pairs that are attached to objects, such as pods. Labels are intended to be used to specify identifying attributes of objects that are meaningful and relevant to users.</span>
    <span class="na">app</span><span class="pi">:</span> <span class="s">hrm-api</span>

<span class="c1"># Specification for the Pod</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">containers</span><span class="pi">:</span> <span class="c1"># List of containers within the Pod</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">hrm-ctr</span>
      <span class="na">image</span><span class="pi">:</span> <span class="s">mh17acr.azurecr.io/hrm:latest</span> 
      <span class="na">ports</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">containerPort</span><span class="pi">:</span> <span class="m">8080</span> <span class="c1"># Port that the container will expose</span>
      <span class="na">env</span><span class="pi">:</span> <span class="c1"># List of environment variables to set in the container</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">ConnectionStrings__DefaultConnection</span> <span class="c1"># Name of the environment variable. Here __ is used to represent the hierarchy of the connection string. It means ConnectionStrings:DefaultConnection</span>
          <span class="na">value</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Server=mahedeesqlserver.database.windows.net;Database=HRMDB;User</span><span class="nv"> </span><span class="s">Id=mahedee;Password=mypass@123;MultipleActiveResultSets=true"</span>
  
</code></pre></div></div>

<ul>
  <li>Create a Kubernetes Service for the ASP.NET Core application</li>
  <li>
    <p>Here I used lots of comments to explain each section of the yaml file. You can remove the comments before using it.</p>

    <p><strong>service_aks.yml</strong></p>
  </li>
</ul>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Service</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">labels</span><span class="pi">:</span>
    <span class="na">app</span><span class="pi">:</span> <span class="s">hrm-api</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">hrm-service</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">type</span><span class="pi">:</span> <span class="s">LoadBalancer</span>
  <span class="na">ports</span><span class="pi">:</span>
    <span class="c1"># First port configuration</span>
    <span class="pi">-</span> <span class="na">port</span><span class="pi">:</span> <span class="m">8011</span> <span class="c1"># Port that the service will expose</span>
      <span class="na">protocol</span><span class="pi">:</span> <span class="s">TCP</span> <span class="c1"># Protocol that the service will use</span>
      <span class="na">targetPort</span><span class="pi">:</span> <span class="m">8080</span> <span class="c1"># Port on the container where traffic will be directed</span>
      <span class="na">name</span><span class="pi">:</span> <span class="s">http</span> <span class="c1"># Name of the port (useful for service discovery)</span>
      <span class="na">nodePort</span><span class="pi">:</span> <span class="m">30376</span> <span class="c1"># Specific port on the cluster nodes to expose (used with NodePort/LoadBalancer services)</span>
    <span class="c1"># Second port configuration</span>
    <span class="pi">-</span> <span class="na">port</span><span class="pi">:</span> <span class="m">8081</span> <span class="c1"># Port that the service will expose</span>
      <span class="na">protocol</span><span class="pi">:</span> <span class="s">TCP</span> <span class="c1"># Protocol that the service will use</span>
      <span class="na">targetPort</span><span class="pi">:</span> <span class="m">8081</span> <span class="c1"># Port on the container where traffic will be directed</span>
      <span class="na">name</span><span class="pi">:</span> <span class="s">https</span> <span class="c1"># Name of the port (useful for service discovery)</span>
      <span class="na">nodePort</span><span class="pi">:</span> <span class="m">30676</span> <span class="c1"># Specific port on the cluster nodes to expose (used with NodePort/LoadBalancer services)</span>
  <span class="c1"># Selector matches Pods with the label "app: hrm-api"</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">app</span><span class="pi">:</span> <span class="s">hrm-api</span>
<span class="na">status</span><span class="pi">:</span>
  <span class="na">loadBalancer</span><span class="pi">:</span> <span class="pi">{}</span> <span class="c1"># Placeholder for LoadBalancer details (IP or DNS name) once provisioned</span>

<span class="c1"># Use spaces (2 or 4 spaces) for indentation in YAML files; tabs are not allowed.</span>
<span class="c1"># The YAML specification prohibits the use of tabs, and using spaces ensures consistency and proper parsing.</span>
  
</code></pre></div></div>

<ul>
  <li>
    <p>Deploy the ASP.NET Core application to the AKS cluster</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl apply <span class="nt">-f</span> pod_aks.yml
kubectl apply <span class="nt">-f</span> service_aks.yml
</code></pre></div>    </div>
  </li>
  <li>
    <p>Verify that the ASP.NET Core application is deployed to the AKS cluster by checking the pods and services in the Kubernetes dashboard or using the following commands:</p>
  </li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  kubectl get pods

  Output:

  NAME      READY   STATUS    RESTARTS   AGE
  hrm-pod   1/1     Running   0          16s
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  kubectl get svc

  Output:
  NAME          TYPE           CLUSTER-IP   EXTERNAL-IP      PORT<span class="o">(</span>S<span class="o">)</span>                         AGE
  hrm-service   LoadBalancer   10.0.80.25   52.137.187.193   8011:30376/TCP,8081:30676/TCP   24s
  kubernetes    ClusterIP      10.0.0.1     &lt;none&gt;           443/TCP                         21m
</code></pre></div></div>

<ul>
  <li>Access the ASP.NET Core application using the external IP address of the service.</li>
  <li>In this access the application using the following URL:</li>
</ul>

<p>http://52.137.187.193:8011/swagger/index.html</p>

<ul>
  <li>To delete the pod and service, use the following commands:</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl delete <span class="nt">-f</span> pod_aks.yml
kubectl delete <span class="nt">-f</span> service_aks.yml
</code></pre></div></div>

<ul>
  <li>Command to get log of a pod
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl logs <span class="nt">-f</span> hrm-pod
</code></pre></div>    </div>
  </li>
</ul>

<p><strong>Trouble Shooting: Application cannot connect to the Azure SQL Database</strong></p>
<ul>
  <li>Run the following command to check the logs of the pod to identify any connection issues:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl logs <span class="nt">-f</span> hrm-pod
</code></pre></div>    </div>
  </li>
  <li>You will get the error message in the logs if there is any issue connecting to the Azure SQL Database.</li>
  <li>It says AKS pod cannot connect to the Azure SQL Database. It will show source IP address is not allowed to access the server.</li>
  <li>To resolve this issue, you need to allow the AKS cluster’s IP address to access the Azure SQL Database.</li>
  <li>Run the following command to set up the firewall rule to allow the AKS cluster’s IP address to access the Azure SQL Database:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az sql server firewall-rule create <span class="nt">--resource-group</span> &lt;ResourceGroupName&gt; <span class="nt">--server</span> &lt;SqlServerName&gt; <span class="nt">--name</span> AllowAKSIP <span class="nt">--start-ip-address</span> 13.64.73.58 <span class="nt">--end-ip-address</span> 13.64.73.58
</code></pre></div>    </div>
    <p>Example:</p>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az sql server firewall-rule create <span class="nt">--resource-group</span> &lt;ResourceGroupName&gt; <span class="nt">--server</span> &lt;SqlServerName&gt; <span class="nt">--name</span> AllowAKSIP <span class="nt">--start-ip-address</span> 13.64.73.58 <span class="nt">--end-ip-address</span> 13.64.73.58
</code></pre></div>    </div>
  </li>
  <li>After setting up the firewall rule, try to access the Azure SQL Database from the AKS pod again. The connection should be successful now.</li>
  <li>Kubernetes pods ip address can be changed after restart. So, it is better to use static ip address for the AKS cluster.</li>
</ul>

<p><strong>Common Commands:</strong></p>

<ul>
  <li>To update azur CLI run the following command:</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az upgrade
</code></pre></div></div>

<ul>
  <li>To know the region of the AKS cluster, run the following command:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az aks show <span class="nt">-n</span> &lt;aks-cluster-name&gt; <span class="nt">-g</span> &lt;resource-group-name&gt; <span class="nt">--query</span> location <span class="nt">-o</span> tsv
</code></pre></div>    </div>
  </li>
  <li>To know the region of the Azure SQL Database, run the following command:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az sql server show <span class="nt">-n</span> &lt;sql-server-name&gt; <span class="nt">-g</span> &lt;resource-group-name&gt; <span class="nt">--query</span> location <span class="nt">-o</span> tsv
</code></pre></div>    </div>
  </li>
  <li>To know the ip address of the AKS cluster, run the following command:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az aks show <span class="nt">-n</span> &lt;aks-cluster-name&gt; <span class="nt">-g</span> &lt;resource-group-name&gt; <span class="nt">--query</span> outboundIpAddresses <span class="nt">-o</span> tsv
</code></pre></div>    </div>
  </li>
  <li>To get list of contexts, run the following command:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl config get-contexts
</code></pre></div>    </div>
  </li>
  <li>To switch to a different context, run the following command:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl config use-context &lt;context-name&gt;
</code></pre></div>    </div>
  </li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl get pods <span class="nt">--watch</span>  <span class="c"># Watch the pods in the current namespace</span>
</code></pre></div></div>

<ul>
  <li>To get the logs of a pod, run the following command:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl logs <span class="nt">-f</span> &lt;pod-name&gt;
</code></pre></div>    </div>
  </li>
  <li>To get the logs of a pod in a specific container, run the following command:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl logs <span class="nt">-f</span> &lt;pod-name&gt; <span class="nt">-c</span> &lt;container-name&gt;
</code></pre></div>    </div>
  </li>
  <li>Describe a pod
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl describe pod &lt;pod-name&gt;
</code></pre></div>    </div>
  </li>
  <li>To get the details of a pod, run the following command:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl get pod &lt;pod-name&gt; <span class="nt">-o</span> yaml
</code></pre></div>    </div>
  </li>
</ul>

<p><strong><a href="https://github.com/mahedee/code-sample02/tree/master/aks-hrm">Source code</a></strong></p>]]></content><author><name>Mahedee Hasan</name></author><category term="ASP.NET Core" /><category term="Kubernetes" /><category term="SQL Server" /><category term="Docker" /><category term="Azure" /><category term="DevOps" /><category term="Microservices" /><category term="aspnetcore" /><category term="kubernetes" /><category term="sqlserver" /><category term="docker" /><category term="azure" /><category term="devops" /><category term="microservices" /><summary type="html"><![CDATA[Securing RabbitMQ with SSL/TLS and enabling HTTPS access for the Management UI is essential to protect data and ensure a secure environment. This guide walks you through the steps to set up RabbitMQ with SSL/TLS on Docker Desktop and enable HTTPS for the Management UI. Follow along to configure RabbitMQ to handle encrypted AMQP connections as well as a secure Management interface.]]></summary></entry><entry><title type="html">Understanding Different Kinds of Kubernetes Resources</title><link href="https://mahedee.net//understanding-different-kinds-of-kubernetes-resources/" rel="alternate" type="text/html" title="Understanding Different Kinds of Kubernetes Resources" /><published>2024-06-08T00:00:00-04:00</published><updated>2024-06-08T00:00:00-04:00</updated><id>https://mahedee.net//understanding-different-kinds-of-kubernetes-resources</id><content type="html" xml:base="https://mahedee.net//understanding-different-kinds-of-kubernetes-resources/"><![CDATA[<p>Kubernetes, a leading container orchestration platform, is designed to simplify the deployment, scaling, and management of applications. Central to Kubernetes are its <strong>resources</strong>, each tailored for specific tasks like running applications, managing storage, or ensuring smooth communication between components. Understanding these resources is crucial for leveraging Kubernetes to its full potential.</p>

<p>Here’s a comprehensive guide to the most commonly used Kubernetes resources, their purposes, and use cases.</p>

<p><strong>1. Pod</strong>
The <strong>Pod</strong> is the smallest and most basic deployable unit in Kubernetes. A Pod encapsulates one or more tightly coupled containers that share the same network namespace and storage.</p>

<p><strong>Purpose</strong>:</p>
<ul>
  <li>To host application containers, often one per Pod.</li>
  <li>Acts as the building block for higher-level abstractions like Deployments.</li>
</ul>

<p><strong>Use Case</strong>:</p>
<ul>
  <li>Deploying simple applications or debugging purposes.</li>
</ul>

<p><strong>Example</strong>:</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Pod</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">hrm-pod</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">containers</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">hrm-container</span>
      <span class="na">image</span><span class="pi">:</span> <span class="s">mh17acr.azurecr.io/hrm:latest</span>
      <span class="na">ports</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">containerPort</span><span class="pi">:</span> <span class="m">8080</span>
</code></pre></div></div>

<p><strong>2. Deployment</strong>
A <strong>Deployment</strong> is a higher-level abstraction that manages a group of Pods. It handles updates, scaling, and fault tolerance for stateless applications.</p>

<p><strong>Purpose</strong>:</p>
<ul>
  <li>To ensure a specific number of replicas are running.</li>
  <li>Supports rolling updates and rollbacks.</li>
</ul>

<p><strong>Use Case</strong>:</p>
<ul>
  <li>Deploying scalable, stateless applications.</li>
</ul>

<p><strong>Example</strong>:</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Deployment</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">hrm-deployment</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">replicas</span><span class="pi">:</span> <span class="m">3</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">matchLabels</span><span class="pi">:</span>
      <span class="na">app</span><span class="pi">:</span> <span class="s">hrm-api</span>
  <span class="na">template</span><span class="pi">:</span>
    <span class="na">metadata</span><span class="pi">:</span>
      <span class="na">labels</span><span class="pi">:</span>
        <span class="na">app</span><span class="pi">:</span> <span class="s">hrm-api</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">containers</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">hrm-container</span>
          <span class="na">image</span><span class="pi">:</span> <span class="s">mh17acr.azurecr.io/hrm:latest</span>
          <span class="na">ports</span><span class="pi">:</span>
            <span class="pi">-</span> <span class="na">containerPort</span><span class="pi">:</span> <span class="m">8080</span>
</code></pre></div></div>

<p><strong>3. Service</strong>
A <strong>Service</strong> provides a stable network endpoint for accessing a group of Pods. It abstracts the dynamic nature of Pods and exposes them through a fixed IP or DNS.</p>

<p><strong>Purpose</strong>:</p>
<ul>
  <li>To route traffic to Pods, regardless of their lifecycle.</li>
  <li>Supports load balancing.</li>
</ul>

<p><strong>Use Case</strong>:</p>
<ul>
  <li>Connecting frontend applications to backend APIs.</li>
</ul>

<p><strong>Example</strong>:</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Service</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">hrm-service</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">app</span><span class="pi">:</span> <span class="s">hrm-api</span>
  <span class="na">ports</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">protocol</span><span class="pi">:</span> <span class="s">TCP</span>
      <span class="na">port</span><span class="pi">:</span> <span class="m">80</span>
      <span class="na">targetPort</span><span class="pi">:</span> <span class="m">8080</span>
  <span class="na">type</span><span class="pi">:</span> <span class="s">ClusterIP</span>
</code></pre></div></div>

<p><strong>4. ConfigMap</strong>
A <strong>ConfigMap</strong> is used to store non-sensitive configuration data as key-value pairs. This allows configuration changes without rebuilding container images.</p>

<p><strong>Purpose</strong>:</p>
<ul>
  <li>To decouple configuration from application logic.</li>
</ul>

<p><strong>Use Case</strong>:</p>
<ul>
  <li>Managing application settings like environment variables.</li>
</ul>

<p><strong>Example</strong>:</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">ConfigMap</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">hrm-config</span>
<span class="na">data</span><span class="pi">:</span>
  <span class="na">environment</span><span class="pi">:</span> <span class="s">production</span>
  <span class="na">log_level</span><span class="pi">:</span> <span class="s">debug</span>
</code></pre></div></div>

<p><strong>5. Secret</strong>
A <strong>Secret</strong> securely stores sensitive information, such as passwords, tokens, and keys. Unlike ConfigMaps, Secrets encode data in Base64 for security.</p>

<p><strong>Purpose</strong>:</p>
<ul>
  <li>To securely manage sensitive data.</li>
</ul>

<p><strong>Use Case</strong>:</p>
<ul>
  <li>Storing database credentials or API keys.</li>
</ul>

<p><strong>Example</strong>:</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Secret</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">hrm-secret</span>
<span class="na">type</span><span class="pi">:</span> <span class="s">Opaque</span>
<span class="na">data</span><span class="pi">:</span>
  <span class="na">password</span><span class="pi">:</span> <span class="s">bXlwYXNzd29yZA==</span> <span class="c1"># Base64 encoded "mypassword"</span>
</code></pre></div></div>

<p><strong>6. StatefulSet</strong>
A <strong>StatefulSet</strong> manages stateful applications, ensuring each Pod has a unique, stable identity and persistent storage.</p>

<p><strong>Purpose</strong>:</p>
<ul>
  <li>To deploy applications that require stable Pod identities and ordered deployment.</li>
</ul>

<p><strong>Use Case</strong>:</p>
<ul>
  <li>Databases, distributed systems, or applications requiring persistent storage.</li>
</ul>

<p><strong>Example</strong>:</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">StatefulSet</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">hrm-db</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">serviceName</span><span class="pi">:</span> <span class="s2">"</span><span class="s">hrm-db-service"</span>
  <span class="na">replicas</span><span class="pi">:</span> <span class="m">2</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">matchLabels</span><span class="pi">:</span>
      <span class="na">app</span><span class="pi">:</span> <span class="s">hrm-db</span>
  <span class="na">template</span><span class="pi">:</span>
    <span class="na">metadata</span><span class="pi">:</span>
      <span class="na">labels</span><span class="pi">:</span>
        <span class="na">app</span><span class="pi">:</span> <span class="s">hrm-db</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">containers</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">mysql-container</span>
          <span class="na">image</span><span class="pi">:</span> <span class="s">mysql:5.7</span>
          <span class="na">ports</span><span class="pi">:</span>
            <span class="pi">-</span> <span class="na">containerPort</span><span class="pi">:</span> <span class="m">3306</span>
</code></pre></div></div>

<p><strong>7. Job</strong>
A <strong>Job</strong> runs tasks to completion, such as batch processing or database migrations. It ensures the task is retried upon failure.</p>

<p><strong>Purpose</strong>:</p>
<ul>
  <li>To run one-time or short-lived tasks.</li>
</ul>

<p><strong>Use Case</strong>:</p>
<ul>
  <li>Running a data import job or executing scripts.</li>
</ul>

<p><strong>Example</strong>:</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">batch/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Job</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">hrm-job</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">template</span><span class="pi">:</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">containers</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">hrm-task</span>
          <span class="na">image</span><span class="pi">:</span> <span class="s">busybox</span>
          <span class="na">command</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">sh"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">-c"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">echo</span><span class="nv"> </span><span class="s">'Hello,</span><span class="nv"> </span><span class="s">Kubernetes!'"</span><span class="pi">]</span>
      <span class="na">restartPolicy</span><span class="pi">:</span> <span class="s">Never</span>
  <span class="na">backoffLimit</span><span class="pi">:</span> <span class="m">4</span>
</code></pre></div></div>

<p><strong>8. CronJob</strong>
A <strong>CronJob</strong> schedules Jobs at specific times, like a cron job in Linux.</p>

<p><strong>Purpose</strong>:</p>
<ul>
  <li>To run periodic tasks automatically.</li>
</ul>

<p><strong>Use Case</strong>:</p>
<ul>
  <li>Running backups, generating reports, or performing maintenance tasks.</li>
</ul>

<p><strong>Example</strong>:</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">batch/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">CronJob</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">hrm-cronjob</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">schedule</span><span class="pi">:</span> <span class="s2">"</span><span class="s">0</span><span class="nv"> </span><span class="s">3</span><span class="nv"> </span><span class="s">*</span><span class="nv"> </span><span class="s">*</span><span class="nv"> </span><span class="s">*"</span> <span class="c1"># Run daily at 3 AM</span>
  <span class="na">jobTemplate</span><span class="pi">:</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">template</span><span class="pi">:</span>
        <span class="na">spec</span><span class="pi">:</span>
          <span class="na">containers</span><span class="pi">:</span>
            <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">hrm-task</span>
              <span class="na">image</span><span class="pi">:</span> <span class="s">busybox</span>
              <span class="na">command</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">sh"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">-c"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">echo</span><span class="nv"> </span><span class="s">'Scheduled</span><span class="nv"> </span><span class="s">Task'"</span><span class="pi">]</span>
          <span class="na">restartPolicy</span><span class="pi">:</span> <span class="s">OnFailure</span>
</code></pre></div></div>

<p><strong>9. PersistentVolume (PV) and PersistentVolumeClaim (PVC)</strong>
A <strong>PersistentVolume (PV)</strong> represents physical storage in the cluster, while a <strong>PersistentVolumeClaim (PVC)</strong> requests specific storage resources from a PV.</p>

<p><strong>Purpose</strong>:</p>
<ul>
  <li>To manage persistent storage for stateful applications.</li>
</ul>

<p><strong>Use Case</strong>:</p>
<ul>
  <li>Storing database data or application logs.</li>
</ul>

<p><strong>Example</strong>:</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># PersistentVolume</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">PersistentVolume</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">hrm-pv</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">capacity</span><span class="pi">:</span>
    <span class="na">storage</span><span class="pi">:</span> <span class="s">5Gi</span>
  <span class="na">accessModes</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">ReadWriteOnce</span>
  <span class="na">hostPath</span><span class="pi">:</span>
    <span class="na">path</span><span class="pi">:</span> <span class="s">/data/hrm</span>

<span class="c1"># PersistentVolumeClaim</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">PersistentVolumeClaim</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">hrm-pvc</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">accessModes</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">ReadWriteOnce</span>
  <span class="na">resources</span><span class="pi">:</span>
    <span class="na">requests</span><span class="pi">:</span>
      <span class="na">storage</span><span class="pi">:</span> <span class="s">5Gi</span>
</code></pre></div></div>

<p><strong>Conclusion</strong>
Kubernetes resources provide powerful abstractions to deploy, manage, and scale applications in a cloud-native way. By understanding these resource types and their purposes, you can design robust, scalable, and secure architectures tailored to your application’s needs. Whether you’re deploying a stateless microservice or managing a complex stateful database, Kubernetes has the tools to make it easier.</p>]]></content><author><name>Mahedee Hasan</name></author><category term="Kubernetes" /><category term="Docker" /><category term="Microservices" /><category term="DevOps" /><category term="Azure" /><category term="kubernetes" /><category term="docker" /><category term="azure" /><category term="devops" /><category term="microservices" /><summary type="html"><![CDATA[Learn about the different types of Kubernetes resources, their purposes, and how they help manage and scale applications in a containerized environment. Perfect for beginners and experts alike!]]></summary></entry></feed>