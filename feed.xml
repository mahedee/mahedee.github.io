<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://mahedee.net//feed.xml" rel="self" type="application/atom+xml" /><link href="https://mahedee.net//" rel="alternate" type="text/html" /><updated>2023-01-30T12:20:39+00:00</updated><id>https://mahedee.net//feed.xml</id><title type="html">Think Simple</title><subtitle>hi</subtitle><author><name>Mahedee Hasan</name></author><entry><title type="html">Configure Load Balancer using Eureka and ocelot with asp.net core</title><link href="https://mahedee.net//Configure-Load-Balancer-using-Eureka-and-ocelot-with-aspnet-core/" rel="alternate" type="text/html" title="Configure Load Balancer using Eureka and ocelot with asp.net core" /><published>2023-01-07T00:00:00+00:00</published><updated>2023-01-07T00:00:00+00:00</updated><id>https://mahedee.net//Configure-Load-Balancer-using-Eureka-and-ocelot-with-aspnet-core</id><content type="html" xml:base="https://mahedee.net//Configure-Load-Balancer-using-Eureka-and-ocelot-with-aspnet-core/"><![CDATA[<p><strong>Introduction</strong></p>

<p>A load balancer is a component that distributes incoming network traffic across multiple servers to optimize resource utilization, maximize throughput, minimize response time, and avoid overloading any single server.</p>

<p>Eureka is a service discovery tool provided by Netflix OSS, it can be used to solve load balancing by registering all instances of a service with Eureka and having the load balancer forward traffic to those instances. The Eureka server maintains a registry of all available instances of a service, and clients of the service query the registry to obtain a list of available service instances. The load balancer can then use this information to distribute incoming requests to the available service instances.</p>

<p>In this article, I will show you how to configure load balancer using Eureka and ocelot in API gateway.</p>

<p><img src="/assets/images/posts/2023/lb-01.PNG" alt="" /></p>

<p>Fig – Load balancing architecture (Collected from internet)</p>

<p>Here, I am skipping service discovery. If you want to know more about service discovery, please read the article - <a href="https://mahedee.net/Service-Discovery-using-Eureka-Ocelot-and-ASPnet-core/">Service Discovery with Ocelot and ASP.net core</a></p>

<p><strong>Implementation</strong></p>

<p>Let’s configure Load Balancer using Eureka, Ocelot</p>

<p><strong>Tools and Technologies Used</strong></p>

<ul>
  <li>Visual Studio 2022</li>
  <li>.NET 6.0</li>
  <li>ASP.NET Core Web API</li>
  <li>Visual C#</li>
  <li>Eureka</li>
  <li>Ocelot</li>
  <li>Docker</li>
</ul>

<p><strong>Step 1: Create solution and projects</strong></p>

<ul>
  <li>Create a solution name SDDemoDocker.sln</li>
  <li>Add four Web Api Projects name BFF.Web, LocationA.API, LocationB.API, LocationC.API</li>
  <li>Here BFF.Web is an api gateway</li>
</ul>

<p><strong>Step 2: Install nuget packages</strong></p>

<ul>
  <li>Install following nuget packages in BFF.Web project</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">MMLib.SwaggerForOcelot</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Ocelot</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Ocelot.Provider.Eureka</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Ocelot.Provider.Kubernetes</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Ocelot.Provider.Polly</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Steeltoe.Discovery.Eureka</span>
</code></pre></div></div>

<ul>
  <li>Install following nuget packages in LocationA.API project</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Steeltoe.Discovery.ClientCore</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Steeltoe.Discovery.Eureka</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.VisualStudio.Azure.Containers.Tools.Targets</span>
</code></pre></div></div>

<ul>
  <li>Install following nuget packages in LocationB.API project</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Steeltoe.Discovery.ClientCore</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Steeltoe.Discovery.Eureka</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.VisualStudio.Azure.Containers.Tools.Targets</span>
</code></pre></div></div>

<ul>
  <li>Install following nuget packages in LocationC.API project</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Steeltoe.Discovery.ClientCore</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Steeltoe.Discovery.Eureka</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.VisualStudio.Azure.Containers.Tools.Targets</span>
</code></pre></div></div>

<p><strong>Step 3: Organize LocationA.API projects</strong></p>

<ul>
  <li>Register Eureka and modify program.cs as follows.</li>
</ul>

<p><strong>Program.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Steeltoe.Discovery.Client</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Steeltoe.Discovery.Eureka</span><span class="p">;</span>

<span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="n">WebApplication</span><span class="p">.</span><span class="nf">CreateBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>

<span class="c1">// Add services to the container.</span>

<span class="c1">// Add or register service discovery to your application</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddServiceDiscovery</span><span class="p">(</span><span class="n">o</span> <span class="p">=&gt;</span> <span class="n">o</span><span class="p">.</span><span class="nf">UseEureka</span><span class="p">());</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">();</span>
<span class="c1">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddEndpointsApiExplorer</span><span class="p">();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddSwaggerGen</span><span class="p">();</span>

<span class="kt">var</span> <span class="n">app</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

<span class="c1">// Configure the HTTP request pipeline.</span>
<span class="k">if</span> <span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">Environment</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
<span class="p">{</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwagger</span><span class="p">();</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwaggerUI</span><span class="p">();</span>
<span class="p">}</span>

<span class="c1">//app.UseHttpsRedirection();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseAuthorization</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">MapControllers</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>

</code></pre></div></div>

<ul>
  <li>Create a controller name DistrictController in Controllers folder and modify get method as follows.</li>
</ul>

<p><strong>DistrictController.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>

<span class="c1">// For more information on enabling Web API for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860</span>

<span class="k">namespace</span> <span class="nn">LocationA.API.Controllers</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
    <span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">DistrictController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
    <span class="p">{</span>
        <span class="c1">// GET: api/&lt;DistrictController&gt;</span>
        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"GetAll"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="nf">Get</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="kt">string</span><span class="p">[]</span> <span class="p">{</span> <span class="s">"Serivce:LocationA.API-&gt;"</span><span class="p">,</span> <span class="s">"Dhaka"</span><span class="p">,</span> <span class="s">"Chittagong"</span><span class="p">,</span> <span class="s">"Chandpur"</span><span class="p">,</span> <span class="s">"Barisal"</span><span class="p">,</span> <span class="s">"Noakhali"</span> <span class="p">};</span>
        <span class="p">}</span>

    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Modify appsettings.json to connect to the service registry</strong></p>

<p><strong>appsettings.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">
</span><span class="p">{</span><span class="w">
  </span><span class="nl">"Logging"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"LogLevel"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Default"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Information"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Microsoft.AspNetCore"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Warning"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"AllowedHosts"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*"</span><span class="p">,</span><span class="w">



  </span><span class="nl">"Spring"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"Application"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"SERVICE.LOCATIONAPI"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"Eureka"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"Client"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"ServiceUrl"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://eureka-server:8761/eureka/"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"ValidateCertificates"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
      </span><span class="nl">"ShouldRegisterWithEureka"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
    </span><span class="p">},</span><span class="w">
    
    </span><span class="err">//</span><span class="w"> </span><span class="err">No</span><span class="w"> </span><span class="err">docke</span><span class="w"> </span><span class="err">instance</span><span class="w"> </span><span class="err">added</span><span class="w">
    </span><span class="nl">"Instance"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="err">//</span><span class="nl">"port"</span><span class="p">:</span><span class="w"> </span><span class="mi">9001</span><span class="p">,</span><span class="w">
      </span><span class="nl">"NonSecurePort"</span><span class="p">:</span><span class="w"> </span><span class="mi">80</span><span class="p">,</span><span class="w">
      </span><span class="nl">"HostName"</span><span class="p">:</span><span class="w"> </span><span class="s2">"locationa.api"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"InstanceId"</span><span class="p">:</span><span class="w"> </span><span class="s2">"LocationA.API,Port:80"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"StatusPageUrlPath"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/swagger/index.html"</span><span class="w">
      </span><span class="err">//</span><span class="nl">"HealthCheckUrlPath"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/api/values/healthcheck"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<ul>
  <li>Add docker file in the project</li>
</ul>

<p><strong>Dockerfile</strong></p>

<div class="language-docker highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#See https://aka.ms/containerfastmode to understand how Visual Studio uses this Dockerfile to build your images for faster debugging.</span>

<span class="k">FROM</span><span class="w"> </span><span class="s">mcr.microsoft.com/dotnet/aspnet:6.0</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">base</span>
<span class="k">WORKDIR</span><span class="s"> /app</span>
<span class="k">EXPOSE</span><span class="s"> 80</span>
<span class="k">EXPOSE</span><span class="s"> 443</span>

<span class="k">FROM</span><span class="w"> </span><span class="s">mcr.microsoft.com/dotnet/sdk:6.0</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">build</span>
<span class="k">WORKDIR</span><span class="s"> /src</span>
<span class="k">COPY</span><span class="s"> ["LocationA.API/LocationA.API.csproj", "Location.API/"]</span>
<span class="k">RUN </span>dotnet restore <span class="s2">"LocationA.API/LocationA.API.csproj"</span>
<span class="k">COPY</span><span class="s"> . .</span>
<span class="k">WORKDIR</span><span class="s"> "/src/LocationA.API"</span>
<span class="k">RUN </span>dotnet build <span class="s2">"LocationA.API.csproj"</span> <span class="nt">-c</span> Release <span class="nt">-o</span> /app/build

<span class="k">FROM</span><span class="w"> </span><span class="s">build</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">publish</span>
<span class="k">RUN </span>dotnet publish <span class="s2">"LocationA.API.csproj"</span> <span class="nt">-c</span> Release <span class="nt">-o</span> /app/publish

<span class="k">FROM</span><span class="w"> </span><span class="s">base</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">final</span>
<span class="k">WORKDIR</span><span class="s"> /app</span>
<span class="k">COPY</span><span class="s"> --from=publish /app/publish .</span>
<span class="k">ENTRYPOINT</span><span class="s"> ["dotnet", "LocationA.API.dll"]</span>
</code></pre></div></div>

<p><strong>Step 4: Organize LocationB.API project</strong></p>

<ul>
  <li>Register Eureka and modify program.cs as follows.</li>
</ul>

<p><strong>Program.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Steeltoe.Discovery.Client</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Steeltoe.Discovery.Eureka</span><span class="p">;</span>

<span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="n">WebApplication</span><span class="p">.</span><span class="nf">CreateBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>

<span class="c1">// Add services to the container.</span>

<span class="c1">// Add or register service discovery to your application</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddServiceDiscovery</span><span class="p">(</span><span class="n">o</span> <span class="p">=&gt;</span> <span class="n">o</span><span class="p">.</span><span class="nf">UseEureka</span><span class="p">());</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">();</span>
<span class="c1">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddEndpointsApiExplorer</span><span class="p">();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddSwaggerGen</span><span class="p">();</span>

<span class="kt">var</span> <span class="n">app</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

<span class="c1">// Configure the HTTP request pipeline.</span>
<span class="k">if</span> <span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">Environment</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
<span class="p">{</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwagger</span><span class="p">();</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwaggerUI</span><span class="p">();</span>
<span class="p">}</span>

<span class="c1">//app.UseHttpsRedirection();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseAuthorization</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">MapControllers</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>

</code></pre></div></div>

<ul>
  <li>Create a controller name DistrictController in Controllers folder and modify get method as follows.</li>
</ul>

<p><strong>DistrictController.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">LocationB.API.Controllers</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
    <span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">DistrictController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
    <span class="p">{</span>
        <span class="c1">// GET: api/&lt;DistrictController&gt;</span>
        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"GetAll"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="nf">Get</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="kt">string</span><span class="p">[]</span> <span class="p">{</span> <span class="s">"Serivce:LocationB.API-&gt;"</span><span class="p">,</span> <span class="s">"Kumilla"</span><span class="p">,</span> <span class="s">"Bogura"</span><span class="p">,</span> <span class="s">"Natore"</span><span class="p">,</span> <span class="s">"Kurigram"</span><span class="p">,</span> <span class="s">"Natore"</span> <span class="p">};</span>
        <span class="p">}</span>

    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Modify appsettings.json to connect to the service registry.</li>
</ul>

<p><strong>appsettings.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"Logging"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"LogLevel"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Default"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Information"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Microsoft.AspNetCore"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Warning"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"AllowedHosts"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*"</span><span class="p">,</span><span class="w">



  </span><span class="nl">"Spring"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"Application"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"SERVICE.LOCATIONAPI"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"Eureka"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"Client"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"ServiceUrl"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://eureka-server:8761/eureka/"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"ValidateCertificates"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
      </span><span class="nl">"ShouldRegisterWithEureka"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
    </span><span class="p">},</span><span class="w">

    </span><span class="err">//</span><span class="w"> </span><span class="err">No</span><span class="w"> </span><span class="err">docke</span><span class="w"> </span><span class="err">instance</span><span class="w"> </span><span class="err">added</span><span class="w">
    </span><span class="nl">"Instance"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="err">//</span><span class="nl">"port"</span><span class="p">:</span><span class="w"> </span><span class="mi">9001</span><span class="p">,</span><span class="w">
      </span><span class="nl">"NonSecurePort"</span><span class="p">:</span><span class="w"> </span><span class="mi">80</span><span class="p">,</span><span class="w">
      </span><span class="nl">"HostName"</span><span class="p">:</span><span class="w"> </span><span class="s2">"locationb.api"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"InstanceId"</span><span class="p">:</span><span class="w"> </span><span class="s2">"LocationB.API,Port:80"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"StatusPageUrlPath"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/swagger/index.html"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<ul>
  <li>Add Dockerfile in the project</li>
</ul>

<p><strong>Dockerfile</strong></p>

<div class="language-docker highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="c">#See https://aka.ms/containerfastmode to understand how Visual Studio uses this Dockerfile to build your images for faster debugging.</span>

<span class="k">FROM</span><span class="w"> </span><span class="s">mcr.microsoft.com/dotnet/aspnet:6.0</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">base</span>
<span class="k">WORKDIR</span><span class="s"> /app</span>
<span class="k">EXPOSE</span><span class="s"> 80</span>

<span class="k">FROM</span><span class="w"> </span><span class="s">mcr.microsoft.com/dotnet/sdk:6.0</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">build</span>
<span class="k">WORKDIR</span><span class="s"> /src</span>
<span class="k">COPY</span><span class="s"> ["LocationB.API/LocationB.API.csproj", "LocationB.API/"]</span>
<span class="k">RUN </span>dotnet restore <span class="s2">"LocationB.API/LocationB.API.csproj"</span>
<span class="k">COPY</span><span class="s"> . .</span>
<span class="k">WORKDIR</span><span class="s"> "/src/LocationB.API"</span>
<span class="k">RUN </span>dotnet build <span class="s2">"LocationB.API.csproj"</span> <span class="nt">-c</span> Release <span class="nt">-o</span> /app/build

<span class="k">FROM</span><span class="w"> </span><span class="s">build</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">publish</span>
<span class="k">RUN </span>dotnet publish <span class="s2">"LocationB.API.csproj"</span> <span class="nt">-c</span> Release <span class="nt">-o</span> /app/publish

<span class="k">FROM</span><span class="w"> </span><span class="s">base</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">final</span>
<span class="k">WORKDIR</span><span class="s"> /app</span>
<span class="k">COPY</span><span class="s"> --from=publish /app/publish .</span>
<span class="k">ENTRYPOINT</span><span class="s"> ["dotnet", "LocationB.API.dll"]</span>
</code></pre></div></div>

<p><strong>Step 5: Organize LocationC.API</strong></p>

<ul>
  <li>Register Eureka and modify program.cs as follows.</li>
</ul>

<p><strong>Program.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Steeltoe.Discovery.Client</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Steeltoe.Discovery.Eureka</span><span class="p">;</span>

<span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="n">WebApplication</span><span class="p">.</span><span class="nf">CreateBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>

<span class="c1">// Add services to the container.</span>

<span class="c1">// Add or register service discovery to your application</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddServiceDiscovery</span><span class="p">(</span><span class="n">o</span> <span class="p">=&gt;</span> <span class="n">o</span><span class="p">.</span><span class="nf">UseEureka</span><span class="p">());</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">();</span>
<span class="c1">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddEndpointsApiExplorer</span><span class="p">();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddSwaggerGen</span><span class="p">();</span>

<span class="kt">var</span> <span class="n">app</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

<span class="c1">// Configure the HTTP request pipeline.</span>
<span class="k">if</span> <span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">Environment</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
<span class="p">{</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwagger</span><span class="p">();</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwaggerUI</span><span class="p">();</span>
<span class="p">}</span>

<span class="c1">//app.UseHttpsRedirection();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseAuthorization</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">MapControllers</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>

</code></pre></div></div>

<ul>
  <li>Create a controller name DistrictController in Controllers folder and modify get method as follows.</li>
</ul>

<p><strong>DistrictController.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">LocationC.API.Controllers</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
    <span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">DistrictController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
    <span class="p">{</span>
        <span class="c1">// GET: api/&lt;DistrictController&gt;</span>
        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"GetAll"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="nf">Get</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="kt">string</span><span class="p">[]</span> <span class="p">{</span><span class="s">"Serivce:LocationC.API-&gt;"</span><span class="p">,</span><span class="s">"Kustia"</span><span class="p">,</span> <span class="s">"Norail"</span><span class="p">,</span> <span class="s">"Kurigram"</span><span class="p">,</span> <span class="s">"Netrokona"</span><span class="p">};</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Modify appsettings.json to connect to the service registry.</li>
</ul>

<p><strong>appsettings.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">
</span><span class="p">{</span><span class="w">
  </span><span class="nl">"Logging"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"LogLevel"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Default"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Information"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Microsoft.AspNetCore"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Warning"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"AllowedHosts"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*"</span><span class="p">,</span><span class="w">



  </span><span class="nl">"Spring"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"Application"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"SERVICE.LOCATIONAPI"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"Eureka"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"Client"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"ServiceUrl"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://eureka-server:8761/eureka/"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"ValidateCertificates"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
      </span><span class="nl">"ShouldRegisterWithEureka"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
    </span><span class="p">},</span><span class="w">

    </span><span class="err">//</span><span class="w"> </span><span class="err">No</span><span class="w"> </span><span class="err">docke</span><span class="w"> </span><span class="err">instance</span><span class="w"> </span><span class="err">added</span><span class="w">
    </span><span class="nl">"Instance"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="err">//</span><span class="nl">"port"</span><span class="p">:</span><span class="w"> </span><span class="mi">9001</span><span class="p">,</span><span class="w">
      </span><span class="nl">"NonSecurePort"</span><span class="p">:</span><span class="w"> </span><span class="mi">80</span><span class="p">,</span><span class="w">
      </span><span class="nl">"HostName"</span><span class="p">:</span><span class="w"> </span><span class="s2">"locationc.api"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"InstanceId"</span><span class="p">:</span><span class="w"> </span><span class="s2">"LocationC.API,Port:80"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"StatusPageUrlPath"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/swagger/index.html"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<ul>
  <li>Add Dockerfile in the project</li>
</ul>

<p><strong>Dockerfile</strong></p>

<div class="language-docker highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="c">#See https://aka.ms/containerfastmode to understand how Visual Studio uses this Dockerfile to build your images for faster debugging.</span>

<span class="k">FROM</span><span class="w"> </span><span class="s">mcr.microsoft.com/dotnet/aspnet:6.0</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">base</span>
<span class="k">WORKDIR</span><span class="s"> /app</span>
<span class="k">EXPOSE</span><span class="s"> 80</span>

<span class="k">FROM</span><span class="w"> </span><span class="s">mcr.microsoft.com/dotnet/sdk:6.0</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">build</span>
<span class="k">WORKDIR</span><span class="s"> /src</span>
<span class="k">COPY</span><span class="s"> ["LocationC.API/LocationC.API.csproj", "LocationC.API/"]</span>
<span class="k">RUN </span>dotnet restore <span class="s2">"LocationC.API/LocationC.API.csproj"</span>
<span class="k">COPY</span><span class="s"> . .</span>
<span class="k">WORKDIR</span><span class="s"> "/src/LocationC.API"</span>
<span class="k">RUN </span>dotnet build <span class="s2">"LocationC.API.csproj"</span> <span class="nt">-c</span> Release <span class="nt">-o</span> /app/build

<span class="k">FROM</span><span class="w"> </span><span class="s">build</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">publish</span>
<span class="k">RUN </span>dotnet publish <span class="s2">"LocationC.API.csproj"</span> <span class="nt">-c</span> Release <span class="nt">-o</span> /app/publish

<span class="k">FROM</span><span class="w"> </span><span class="s">base</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">final</span>
<span class="k">WORKDIR</span><span class="s"> /app</span>
<span class="k">COPY</span><span class="s"> --from=publish /app/publish .</span>
<span class="k">ENTRYPOINT</span><span class="s"> ["dotnet", "LocationC.API.dll"]</span>

</code></pre></div></div>

<p><strong>Step 6: Organize BFF.Web</strong></p>

<p>In this stage, we are going to configure a gateway to communicate with other services using ocelot.</p>

<ul>
  <li>Create two folder name - Routes.dev and Routes.Prod  in root directory and add the following files ocelot.global.json, ocelot.location.api.json, ocelot.SwaggerEndPoints.json in Routes.dev and Routes.Prod folder.</li>
</ul>

<p>*Now modify the json files as follows.</p>

<p><strong>ocelot.location.api.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">
</span><span class="p">{</span><span class="w">
  </span><span class="nl">"Routes"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"DownstreamPathTemplate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/{everything}"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"DownstreamScheme"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"SwaggerKey"</span><span class="p">:</span><span class="w"> </span><span class="s2">"location"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"UseServiceDiscovery"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
      </span><span class="nl">"ServiceName"</span><span class="p">:</span><span class="w"> </span><span class="s2">"SERVICE.LOCATIONAPI"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"UpstreamPathTemplate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/location/{everything}"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"UpstreamHttpMethod"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"GET"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"POST"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"PUT"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"DELETE"</span><span class="w">
      </span><span class="p">],</span><span class="w">

      </span><span class="err">/*</span><span class="w">
        </span><span class="err">LeastConnection</span><span class="w"> </span><span class="err">-</span><span class="w"> </span><span class="err">tracks</span><span class="w"> </span><span class="err">which</span><span class="w"> </span><span class="err">services</span><span class="w"> </span><span class="err">are</span><span class="w"> </span><span class="err">dealing</span><span class="w"> </span><span class="err">with</span><span class="w"> </span><span class="err">requests</span><span class="w"> </span><span class="err">and</span><span class="w"> </span><span class="err">sends</span><span class="w"> </span><span class="err">new</span><span class="w"> </span><span class="err">requests</span><span class="w"> </span><span class="err">to</span><span class="w"> </span><span class="err">service</span><span class="w"> </span><span class="err">with</span><span class="w"> </span><span class="err">least</span><span class="w"> </span><span class="err">existing</span><span class="w"> </span><span class="err">requests.</span><span class="w"> </span><span class="err">The</span><span class="w"> </span><span class="err">algorythm</span><span class="w"> </span><span class="err">state</span><span class="w"> </span><span class="err">is</span><span class="w"> </span><span class="err">not</span><span class="w"> </span><span class="err">distributed</span><span class="w"> </span><span class="err">across</span><span class="w"> </span><span class="err">a</span><span class="w"> </span><span class="err">cluster</span><span class="w"> </span><span class="err">of</span><span class="w"> </span><span class="err">Ocelot’s.</span><span class="w">
        </span><span class="err">RoundRobin</span><span class="w"> </span><span class="err">-</span><span class="w"> </span><span class="err">loops</span><span class="w"> </span><span class="err">through</span><span class="w"> </span><span class="err">available</span><span class="w"> </span><span class="err">services</span><span class="w"> </span><span class="err">and</span><span class="w"> </span><span class="err">sends</span><span class="w"> </span><span class="err">requests.</span><span class="w"> </span><span class="err">The</span><span class="w"> </span><span class="err">algorythm</span><span class="w"> </span><span class="err">state</span><span class="w"> </span><span class="err">is</span><span class="w"> </span><span class="err">not</span><span class="w"> </span><span class="err">distributed</span><span class="w"> </span><span class="err">across</span><span class="w"> </span><span class="err">a</span><span class="w"> </span><span class="err">cluster</span><span class="w"> </span><span class="err">of</span><span class="w"> </span><span class="err">Ocelot’s.</span><span class="w">
        </span><span class="err">NoLoadBalancer</span><span class="w"> </span><span class="err">-</span><span class="w"> </span><span class="err">takes</span><span class="w"> </span><span class="err">the</span><span class="w"> </span><span class="err">first</span><span class="w"> </span><span class="err">available</span><span class="w"> </span><span class="err">service</span><span class="w"> </span><span class="err">from</span><span class="w"> </span><span class="err">config</span><span class="w"> </span><span class="err">or</span><span class="w"> </span><span class="err">service</span><span class="w"> </span><span class="err">discovery.</span><span class="w">
        </span><span class="err">CookieStickySessions</span><span class="w"> </span><span class="err">-</span><span class="w"> </span><span class="err">uses</span><span class="w"> </span><span class="err">a</span><span class="w"> </span><span class="err">cookie</span><span class="w"> </span><span class="err">to</span><span class="w"> </span><span class="err">stick</span><span class="w"> </span><span class="err">all</span><span class="w"> </span><span class="err">requests</span><span class="w"> </span><span class="err">to</span><span class="w"> </span><span class="err">a</span><span class="w"> </span><span class="err">specific</span><span class="w"> </span><span class="err">server</span><span class="w">
      </span><span class="err">*/</span><span class="w">

      </span><span class="nl">"LoadBalancerOptions"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"Type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"RoundRobin"</span><span class="w">
      </span><span class="p">}</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<p><strong>ocelot.product.api.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">
</span><span class="p">{</span><span class="w">
  </span><span class="nl">"Routes"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"DownstreamPathTemplate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/{everything}"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"DownstreamScheme"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"SwaggerKey"</span><span class="p">:</span><span class="w"> </span><span class="s2">"product"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"UseServiceDiscovery"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
      </span><span class="nl">"ServiceName"</span><span class="p">:</span><span class="w"> </span><span class="s2">"SERVICE.PRODUCTAPI"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"UpstreamPathTemplate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/product/{everything}"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"UpstreamHttpMethod"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"GET"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"POST"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"PUT"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"DELETE"</span><span class="w">
      </span><span class="p">],</span><span class="w">


      </span><span class="err">/*</span><span class="w">
        </span><span class="err">LeastConnection</span><span class="w"> </span><span class="err">-</span><span class="w"> </span><span class="err">tracks</span><span class="w"> </span><span class="err">which</span><span class="w"> </span><span class="err">services</span><span class="w"> </span><span class="err">are</span><span class="w"> </span><span class="err">dealing</span><span class="w"> </span><span class="err">with</span><span class="w"> </span><span class="err">requests</span><span class="w"> </span><span class="err">and</span><span class="w"> </span><span class="err">sends</span><span class="w"> </span><span class="err">new</span><span class="w"> </span><span class="err">requests</span><span class="w"> </span><span class="err">to</span><span class="w"> </span><span class="err">service</span><span class="w"> </span><span class="err">with</span><span class="w"> </span><span class="err">least</span><span class="w"> </span><span class="err">existing</span><span class="w"> </span><span class="err">requests.</span><span class="w"> </span><span class="err">The</span><span class="w"> </span><span class="err">algorythm</span><span class="w"> </span><span class="err">state</span><span class="w"> </span><span class="err">is</span><span class="w"> </span><span class="err">not</span><span class="w"> </span><span class="err">distributed</span><span class="w"> </span><span class="err">across</span><span class="w"> </span><span class="err">a</span><span class="w"> </span><span class="err">cluster</span><span class="w"> </span><span class="err">of</span><span class="w"> </span><span class="err">Ocelot’s.</span><span class="w">
        </span><span class="err">RoundRobin</span><span class="w"> </span><span class="err">-</span><span class="w"> </span><span class="err">loops</span><span class="w"> </span><span class="err">through</span><span class="w"> </span><span class="err">available</span><span class="w"> </span><span class="err">services</span><span class="w"> </span><span class="err">and</span><span class="w"> </span><span class="err">sends</span><span class="w"> </span><span class="err">requests.</span><span class="w"> </span><span class="err">The</span><span class="w"> </span><span class="err">algorythm</span><span class="w"> </span><span class="err">state</span><span class="w"> </span><span class="err">is</span><span class="w"> </span><span class="err">not</span><span class="w"> </span><span class="err">distributed</span><span class="w"> </span><span class="err">across</span><span class="w"> </span><span class="err">a</span><span class="w"> </span><span class="err">cluster</span><span class="w"> </span><span class="err">of</span><span class="w"> </span><span class="err">Ocelot’s.</span><span class="w">
        </span><span class="err">NoLoadBalancer</span><span class="w"> </span><span class="err">-</span><span class="w"> </span><span class="err">takes</span><span class="w"> </span><span class="err">the</span><span class="w"> </span><span class="err">first</span><span class="w"> </span><span class="err">available</span><span class="w"> </span><span class="err">service</span><span class="w"> </span><span class="err">from</span><span class="w"> </span><span class="err">config</span><span class="w"> </span><span class="err">or</span><span class="w"> </span><span class="err">service</span><span class="w"> </span><span class="err">discovery.</span><span class="w">
        </span><span class="err">CookieStickySessions</span><span class="w"> </span><span class="err">-</span><span class="w"> </span><span class="err">uses</span><span class="w"> </span><span class="err">a</span><span class="w"> </span><span class="err">cookie</span><span class="w"> </span><span class="err">to</span><span class="w"> </span><span class="err">stick</span><span class="w"> </span><span class="err">all</span><span class="w"> </span><span class="err">requests</span><span class="w"> </span><span class="err">to</span><span class="w"> </span><span class="err">a</span><span class="w"> </span><span class="err">specific</span><span class="w"> </span><span class="err">server</span><span class="w">
      </span><span class="err">*/</span><span class="w">

      </span><span class="nl">"LoadBalancerOptions"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"Type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"LeastConnection"</span><span class="w">
      </span><span class="p">}</span><span class="w">

    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<p><strong>ocelot.global.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">
</span><span class="p">{</span><span class="w">
  </span><span class="nl">"GlobalConfiguration"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"RequestIdKey"</span><span class="p">:</span><span class="w"> </span><span class="s2">"OcRequestId"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"DownstreamScheme"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"UseServiceDiscovery"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"ServiceDiscoveryProvider"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Host"</span><span class="p">:</span><span class="w"> </span><span class="s2">"bff.web"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Port"</span><span class="p">:</span><span class="w"> </span><span class="mi">80</span><span class="p">,</span><span class="w">
      </span><span class="err">//Type</span><span class="w"> </span><span class="err">can</span><span class="w"> </span><span class="err">be</span><span class="w"> </span><span class="err">Consul</span><span class="p">,</span><span class="w"> </span><span class="err">Eureka</span><span class="w">
      </span><span class="nl">"Type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Eureka"</span><span class="w"> 
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<p><strong>ocelot.SwaggerEndPoints.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">
</span><span class="p">{</span><span class="w">
  </span><span class="nl">"SwaggerEndPoints"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"bff.web"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"TransformByOcelotConfig"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Config"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"Name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"BFF.Web"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1.0"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://bff.web:80/swagger/v1/swagger.json"</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"location"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"TransformByOcelotConfig"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Config"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"Name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Location.API"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1.0"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://bff.web:80/location/swagger/v1/swagger.json"</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<ul>
  <li>Add AlterUpstream class in Config folder</li>
</ul>

<p><strong>AlterUpstream.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Newtonsoft.Json</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Newtonsoft.Json.Linq</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">BFF.Web.Config</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">AlterUpstream</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">static</span> <span class="kt">string</span> <span class="nf">AlterUpstreamSwaggerJson</span><span class="p">(</span><span class="n">HttpContext</span> <span class="n">context</span><span class="p">,</span> <span class="kt">string</span> <span class="n">swaggerJson</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">swagger</span> <span class="p">=</span> <span class="n">JObject</span><span class="p">.</span><span class="nf">Parse</span><span class="p">(</span><span class="n">swaggerJson</span><span class="p">);</span>
            <span class="c1">// ... alter upstream json</span>
            <span class="k">return</span> <span class="n">swagger</span><span class="p">.</span><span class="nf">ToString</span><span class="p">(</span><span class="n">Formatting</span><span class="p">.</span><span class="n">Indented</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Modify Program.cs file as follows</li>
</ul>

<p><strong>Program.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">BFF.Web.Config</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">MMLib.SwaggerForOcelot.DependencyInjection</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ocelot.DependencyInjection</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ocelot.Middleware</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ocelot.Provider.Eureka</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ocelot.Provider.Polly</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Steeltoe.Discovery.Client</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Steeltoe.Discovery.Eureka</span><span class="p">;</span>

<span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="n">WebApplication</span><span class="p">.</span><span class="nf">CreateBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>

<span class="c1">// Add services to the container.</span>

<span class="kt">var</span> <span class="n">routes</span> <span class="p">=</span> <span class="s">""</span><span class="p">;</span>
<span class="cp">#if DEBUG
</span><span class="n">routes</span> <span class="p">=</span> <span class="s">"Routes.dev"</span><span class="p">;</span>
<span class="cp">#else
</span><span class="n">routes</span> <span class="p">=</span> <span class="s">"Routes.prod"</span><span class="p">;</span>
<span class="cp">#endif
</span><span class="p">;</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Configuration</span><span class="p">.</span><span class="nf">AddOcelotWithSwaggerSupport</span><span class="p">(</span><span class="n">options</span> <span class="p">=&gt;</span>
<span class="p">{</span>
    <span class="n">options</span><span class="p">.</span><span class="n">Folder</span> <span class="p">=</span> <span class="n">routes</span><span class="p">;</span>
<span class="p">});</span>

<span class="c1">// Configure ocelot</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddOcelot</span><span class="p">(</span><span class="n">builder</span><span class="p">.</span><span class="n">Configuration</span><span class="p">).</span><span class="nf">AddEureka</span><span class="p">().</span><span class="nf">AddPolly</span><span class="p">();</span>

<span class="c1">//builder.Services.AddOcelot(builder.Configuration).AddPolly();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddSwaggerForOcelot</span><span class="p">(</span><span class="n">builder</span><span class="p">.</span><span class="n">Configuration</span><span class="p">);</span>

<span class="c1">// Add or register service discovery to your application</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddServiceDiscovery</span><span class="p">(</span><span class="n">o</span> <span class="p">=&gt;</span> <span class="n">o</span><span class="p">.</span><span class="nf">UseEureka</span><span class="p">());</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Host</span><span class="p">.</span><span class="nf">ConfigureAppConfiguration</span><span class="p">((</span><span class="n">hostingContext</span><span class="p">,</span> <span class="n">config</span><span class="p">)</span> <span class="p">=&gt;</span>
<span class="p">{</span>
    <span class="n">config</span><span class="p">.</span><span class="nf">SetBasePath</span><span class="p">(</span><span class="n">Directory</span><span class="p">.</span><span class="nf">GetCurrentDirectory</span><span class="p">())</span>
    <span class="p">.</span><span class="nf">AddJsonFile</span><span class="p">(</span><span class="s">"appsettings.json"</span><span class="p">,</span> <span class="n">optional</span><span class="p">:</span> <span class="k">false</span><span class="p">,</span> <span class="n">reloadOnChange</span><span class="p">:</span> <span class="k">true</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">AddJsonFile</span><span class="p">(</span><span class="s">$"appsettings.local.json"</span><span class="p">,</span> <span class="n">optional</span><span class="p">:</span> <span class="k">true</span><span class="p">,</span> <span class="n">reloadOnChange</span><span class="p">:</span> <span class="k">true</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">AddJsonFile</span><span class="p">(</span><span class="s">$"appsettings.</span><span class="p">{</span><span class="n">hostingContext</span><span class="p">.</span><span class="n">HostingEnvironment</span><span class="p">.</span><span class="n">EnvironmentName</span><span class="p">}</span><span class="s">.json"</span><span class="p">,</span> <span class="n">optional</span><span class="p">:</span> <span class="k">true</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">AddOcelot</span><span class="p">(</span><span class="n">routes</span><span class="p">,</span> <span class="n">builder</span><span class="p">.</span><span class="n">Environment</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">AddEnvironmentVariables</span><span class="p">();</span>
<span class="p">});</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">();</span>
<span class="c1">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddEndpointsApiExplorer</span><span class="p">();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddSwaggerGen</span><span class="p">();</span>

<span class="kt">var</span> <span class="n">app</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

<span class="c1">// Configure the HTTP request pipeline.</span>
<span class="k">if</span> <span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">Environment</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
<span class="p">{</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwagger</span><span class="p">();</span>
    <span class="c1">//app.UseSwaggerUI();</span>
<span class="p">}</span>



<span class="c1">//app.UseHttpsRedirection();</span>

<span class="c1">//app.UseOcelot();</span>
<span class="n">app</span><span class="p">.</span><span class="nf">UseAuthorization</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseSwaggerForOcelotUI</span><span class="p">(</span><span class="n">options</span> <span class="p">=&gt;</span>
<span class="p">{</span>
    <span class="n">options</span><span class="p">.</span><span class="n">PathToSwaggerGenerator</span> <span class="p">=</span> <span class="s">"/swagger/docs"</span><span class="p">;</span>
    <span class="n">options</span><span class="p">.</span><span class="n">ReConfigureUpstreamSwaggerJson</span> <span class="p">=</span> <span class="n">AlterUpstream</span><span class="p">.</span><span class="n">AlterUpstreamSwaggerJson</span><span class="p">;</span>

<span class="p">}).</span><span class="nf">UseOcelot</span><span class="p">().</span><span class="nf">Wait</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">MapControllers</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>

</code></pre></div></div>

<ul>
  <li>Now modify appsettings.json for BFF.Web</li>
</ul>

<p><strong>Appsettings.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">
</span><span class="p">{</span><span class="w">
  </span><span class="nl">"Logging"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"LogLevel"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Default"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Information"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Microsoft.AspNetCore"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Warning"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Microsoft.Hosting.Lifetime"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Information"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">


  </span><span class="nl">"Spring"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"Application"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"SERVICE.BFF.Web"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"Eureka"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"Client"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"ServiceUrl"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://eureka-server:8761/eureka/"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"ValidateCertificates"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
      </span><span class="nl">"ShouldRegisterWithEureka"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
    </span><span class="p">},</span><span class="w">

    </span><span class="nl">"Instance"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"NonSecurePort"</span><span class="p">:</span><span class="w"> </span><span class="mi">80</span><span class="p">,</span><span class="w">
      </span><span class="nl">"HostName"</span><span class="p">:</span><span class="w"> </span><span class="s2">"bff.web"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"InstanceId"</span><span class="p">:</span><span class="w"> </span><span class="s2">"BFF.Web"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"StatusPageUrlPath"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/swagger/index.html"</span><span class="w">
      </span><span class="err">//</span><span class="nl">"HealthCheckUrlPath"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/api/values/healthcheck"</span><span class="w">
      </span><span class="err">//</span><span class="nl">"StatusPageUrlPath"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/api/values/status"</span><span class="w">
    </span><span class="p">},</span><span class="w">

    </span><span class="nl">"AllowedHosts"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*"</span><span class="w">
  </span><span class="p">}</span><span class="w">

</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<p><strong>Step 7: Configure docker-compose</strong></p>

<ul>
  <li>Add docker-compose file in the project and modify as follows</li>
</ul>

<p><strong>docker-compose.yml</strong></p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">3.4'</span>

<span class="na">services</span><span class="pi">:</span>

  <span class="na">eureka-server</span><span class="pi">:</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">eureka-server</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">steeltoeoss/eurekaserver:latest</span>
    <span class="na">restart</span><span class="pi">:</span> <span class="s">on-failure</span>
    <span class="na">hostname</span><span class="pi">:</span> <span class="s">eureka-server</span>
    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">backend_network</span>
    <span class="c1">#ports:</span>
    <span class="c1"># - "8761:8761"</span>

  <span class="na">locationa.api</span><span class="pi">:</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">locationa.api</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">${DOCKER_REGISTRY-}locationaapi</span>
    <span class="na">restart</span><span class="pi">:</span> <span class="s">on-failure</span>
    <span class="na">hostname</span><span class="pi">:</span> <span class="s">locationa.api</span>
    <span class="na">build</span><span class="pi">:</span>
      <span class="na">context</span><span class="pi">:</span> <span class="s">.</span>
      <span class="na">dockerfile</span><span class="pi">:</span> <span class="s">Locationa.API/Dockerfile</span>
    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">backend_network</span>

  <span class="na">locationb.api</span><span class="pi">:</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">locationb.api</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">${DOCKER_REGISTRY-}locationbapi</span>
    <span class="na">restart</span><span class="pi">:</span> <span class="s">on-failure</span>
    <span class="na">hostname</span><span class="pi">:</span> <span class="s">locationb.api</span>
    <span class="na">build</span><span class="pi">:</span>
      <span class="na">context</span><span class="pi">:</span> <span class="s">.</span>
      <span class="na">dockerfile</span><span class="pi">:</span> <span class="s">LocationB.API/Dockerfile</span>
    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">backend_network</span>

  <span class="na">locationc.api</span><span class="pi">:</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">locationc.api</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">${DOCKER_REGISTRY-}locationcapi</span>
    <span class="na">restart</span><span class="pi">:</span> <span class="s">on-failure</span>
    <span class="na">hostname</span><span class="pi">:</span> <span class="s">locationc.api</span>
    <span class="na">build</span><span class="pi">:</span>
      <span class="na">context</span><span class="pi">:</span> <span class="s">.</span>
      <span class="na">dockerfile</span><span class="pi">:</span> <span class="s">LocationC.API/Dockerfile</span>
    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">backend_network</span>


  <span class="na">bff.web</span><span class="pi">:</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">bff.web</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">${DOCKER_REGISTRY-}bffweb</span>
    <span class="na">restart</span><span class="pi">:</span> <span class="s">on-failure</span>
    <span class="na">hostname</span><span class="pi">:</span> <span class="s">bff.web</span>
    <span class="na">build</span><span class="pi">:</span>
      <span class="na">context</span><span class="pi">:</span> <span class="s">.</span>
      <span class="na">dockerfile</span><span class="pi">:</span> <span class="s">BFF.Web/Dockerfile</span>
    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">backend_network</span>


<span class="na">networks</span><span class="pi">:</span>
    <span class="na">backend_network</span><span class="pi">:</span>

</code></pre></div></div>

<p><strong>docker-compose.override.yml</strong></p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">3.4'</span>

<span class="na">services</span><span class="pi">:</span>
  <span class="na">eureka-server</span><span class="pi">:</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">EUREKA_SERVER_ENABLE_SELF_PRESERVATION=false</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">8761:8761</span>



  <span class="na">locationa.api</span><span class="pi">:</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">ASPNETCORE_ENVIRONMENT=Development</span>
      <span class="c1">#- ASPNETCORE_URLS=https://+:443;http://+:80</span>
      <span class="pi">-</span> <span class="s">ASPNETCORE_URLS=http://+:80</span>
      <span class="pi">-</span> <span class="s">EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">9001:80"</span>
      <span class="c1">#- "4001:443"</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">${APPDATA}/Microsoft/UserSecrets:/root/.microsoft/usersecrets:ro</span>
      <span class="pi">-</span> <span class="s">${APPDATA}/ASP.NET/Https:/root/.aspnet/https:ro</span>
    <span class="na">depends_on</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">eureka-server</span>

  <span class="na">locationb.api</span><span class="pi">:</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">ASPNETCORE_ENVIRONMENT=Development</span>
      <span class="pi">-</span> <span class="s">ASPNETCORE_URLS=http://+:80</span>
      <span class="pi">-</span> <span class="s">EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">9002:80"</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">${APPDATA}/Microsoft/UserSecrets:/root/.microsoft/usersecrets:ro</span>
      <span class="pi">-</span> <span class="s">${APPDATA}/ASP.NET/Https:/root/.aspnet/https:ro</span>
    <span class="na">depends_on</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">eureka-server</span>


  <span class="na">locationc.api</span><span class="pi">:</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">ASPNETCORE_ENVIRONMENT=Development</span>
      <span class="pi">-</span> <span class="s">ASPNETCORE_URLS=http://+:80</span>
      <span class="pi">-</span> <span class="s">EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">9003:80"</span>
    <span class="na">depends_on</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">eureka-server</span>

  <span class="na">bff.web</span><span class="pi">:</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">ASPNETCORE_ENVIRONMENT=Development</span>
      <span class="pi">-</span> <span class="s">ASPNETCORE_URLS=http://+:80</span>
      <span class="pi">-</span> <span class="s">EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">8001:80"</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">${APPDATA}/Microsoft/UserSecrets:/root/.microsoft/usersecrets:ro</span>
      <span class="pi">-</span> <span class="s">${APPDATA}/ASP.NET/Https:/root/.aspnet/https:ro</span>
    <span class="na">depends_on</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">eureka-server</span>
      <span class="pi">-</span> <span class="s">locationa.api</span>
      <span class="pi">-</span> <span class="s">locationb.api</span>
      <span class="pi">-</span> <span class="s">locationc.api</span>

</code></pre></div></div>

<ul>
  <li>Now open your browser and visit http://localhost:8761/ to see Eureka server</li>
</ul>

<p><strong>Step 8: Now run the applications</strong></p>

<ul>
  <li>Set docker-compose as start up project</li>
  <li>Now run the application</li>
  <li>Now browse location service using BFF. You will get different data from different service as round robin basis</li>
  <li>You will see Eureka server as follows.</li>
</ul>

<p><img src="/assets/images/posts/2023/sd-03.PNG" alt="" /></p>

<p><strong><a href="https://github.com/mahedee/code-sample02/tree/main/sd-demo">Source code</a></strong></p>]]></content><author><name>Mahedee Hasan</name></author><category term="C#" /><category term="ASP.NET Core" /><category term="Eureka" /><category term="Microservices" /><category term="Software Architecture" /><category term="Load Balancer" /><category term="csharp" /><category term="aspnetcore" /><category term="eureka" /><category term="microservices" /><category term="softwarearchitecture" /><category term="lb" /><summary type="html"><![CDATA[A load balancer is a component that distributes incoming network traffic across multiple servers to optimize resource utilization, maximize throughput, minimize response time, and avoid overloading any single server. Eureka is a service discovery tool provided by Netflix OSS, it can be used to solve load balancing by registering all instances of a service with Eureka and having the load balancer forward traffic to those instances. The Eureka server maintains a registry of all available instances of a service, and clients of the service query the registry to obtain a list of available service instances. The load balancer can then use this information to distribute incoming requests to the available service instances. In this article, I will show you how to configure load balancer using Eureka and ocelot in API gateway.]]></summary></entry><entry><title type="html">Application of Event Sourcing using asp.net core, DDD, EF, EventStoreDB and SQL Server</title><link href="https://mahedee.net//Application-of-Event-Sourcing-using-aspnet-core-DDD-EF-EventStoreDB-and-SQL-Server/" rel="alternate" type="text/html" title="Application of Event Sourcing using asp.net core, DDD, EF, EventStoreDB and SQL Server" /><published>2022-12-16T00:00:00+00:00</published><updated>2022-12-16T00:00:00+00:00</updated><id>https://mahedee.net//Application-of-Event-Sourcing-using-aspnet-core-DDD-EF-EventStoreDB-and-SQL-Server</id><content type="html" xml:base="https://mahedee.net//Application-of-Event-Sourcing-using-aspnet-core-DDD-EF-EventStoreDB-and-SQL-Server/"><![CDATA[<p><strong>Introduction</strong></p>

<p>Event sourcing is a most important pattern to design a microservice based application. If you are working with multiple services in a microservice based application, you have to use event driven architecture. In this article I will discuss and apply event sourcing using asp.net core, DDD and EventStoreDB.</p>

<p><strong>Domain Driven Design (DDD)</strong>_<br />
Domain-driven design (DDD) is a major software design approach, focusing on modeling software to match a domain according to input from that domain’s experts.  Under domain-driven design, the structure and language of software code (class names, class methods, class variables) should match the business domain. (Wikipedia)</p>

<p><strong>Event Sourcing</strong><br />
Event sourcing is a technique to store all events of an Object to get all of its versions. Event sourcing pattern is used to implement microservice based application.  Using this pattern, we can track the changes of an object in its lifecycle.</p>

<p><strong>EventStoreDB</strong> 
EventStoreDB specially built for Event Sourcing. It is a NoSQL database. This is a one-way database – we can only insert data into database.</p>

<p><strong>Implementation</strong><br />
Let’s implement Event Sourcing using DDD and EventStoreDB.</p>

<p><strong>Tools and Technologies Used</strong></p>

<ul>
  <li>Visual Studio 2022</li>
  <li>.NET 6.0</li>
  <li>ASP.NET Core Web API</li>
  <li>Visual C#</li>
  <li>DDD</li>
  <li>EventStoreDB</li>
  <li>SQL Server</li>
</ul>

<p><strong>Step 1: Install EventStoreDB</strong></p>

<ul>
  <li>
    <p>You can install EventStoreDB using EventStoreDB documentation. Visit the following link : https://developers.eventstore.com/server/v20.10/installation.html#quick-start</p>
  </li>
  <li>
    <p>Or, you can run docker image of EventStoreDB as below.</p>
  </li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">docker</span> <span class="nb">run</span> <span class="nf">--name</span> <span class="nf">esdb-node</span> <span class="nf">-it</span> <span class="nf">-p</span> <span class="nf">2113:2113</span> <span class="nf">-p</span> <span class="nf">1113:1113</span> <span class="nf">eventstore</span><span class="nv">/eventstore:latest</span> <span class="nf">--insecure</span> <span class="nf">--run-projections=All</span> <span class="nf">--enable-external-tcp</span> <span class="nf">--enable-atom-pub-over-http</span>
</code></pre></div></div>

<ul>
  <li>Here I used docker images for EventStoreDB. After running the above command, browse EventStoreDB using the following link.</li>
</ul>

<p>http://localhost:2113/web/index.html#/dashboard</p>

<p><strong>Step 2: Create solution and projects</strong></p>

<ul>
  <li>Create a solution name EventSourcing.</li>
  <li>Add a new web api projects name -  Catalog.API</li>
  <li>Add three class library projects name – Application, Domain, Infrastructure</li>
</ul>

<p><strong>Step 3: Install nuget packages</strong></p>

<ul>
  <li>Install following nuget packages in Catalog.API</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore.Tools</span>
</code></pre></div></div>
<ul>
  <li>Install following nuget packages in Application</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">MediatR</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">MediatR.Extensions.Microsoft.DependencyInjection</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.Extensions.DependencyInjection.Abstractions</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Newtonsoft.Json</span>
</code></pre></div></div>

<ul>
  <li>Install following nuget packages in Infrastructure</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">EventStore.Client.Grpc.Streams</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.Extensions.Configuration.Abstractions</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.Extensions.DependencyInjection.Abstractions</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Newtonsoft.Json</span>
</code></pre></div></div>

<p><strong>Step 4: Organize Domain</strong></p>

<ul>
  <li>Create IBaseEntity interface for Base entity in Entities-&gt;Common folder.</li>
</ul>

<p><strong>IBaseEntity.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">Domain.Entities.Common</span>
<span class="p">{</span>
    <span class="c1">/// Ref: Coverience in C#</span>
    <span class="c1">/// &lt;summary&gt;</span>
    <span class="c1">/// Interface for Base Entity</span>
    <span class="c1">/// &lt;/summary&gt;</span>
    <span class="c1">/// &lt;typeparam name="TKey"&gt;&lt;/typeparam&gt;</span>
    <span class="k">public</span> <span class="k">interface</span> <span class="nc">IBaseEntity</span><span class="p">&lt;</span><span class="k">out</span> <span class="n">TKey</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="n">TKey</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create IDomainEvent interface for domain event in Entities-&gt;Common folder</li>
</ul>

<p><strong>IDomainEvent.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">Domain.Entities.Common</span>
<span class="p">{</span>

    <span class="c1">/// &lt;summary&gt;</span>
    <span class="c1">/// Interface for Domain Event</span>
    <span class="c1">/// &lt;/summary&gt;</span>
    <span class="c1">/// &lt;typeparam name="TKey"&gt;&lt;/typeparam&gt;</span>
    <span class="k">public</span> <span class="k">interface</span> <span class="nc">IDomainEvent</span><span class="p">&lt;</span><span class="k">out</span> <span class="n">TKey</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">long</span> <span class="n">AggregateVersion</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
        <span class="n">TKey</span> <span class="n">AggregateId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
        <span class="n">DateTime</span> <span class="n">TimeStamp</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create IAggregateRoot interface for Aggregate Root in Entities-&gt;Common folder. IAggregateRoot is the combination of IBaseEntity and IAggregateRoot</li>
</ul>

<p><strong>IAggregateRoot.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">Domain.Entities.Common</span>
<span class="p">{</span>
    <span class="c1">/// &lt;summary&gt;</span>
    <span class="c1">/// Interface for AggregateRoot</span>
    <span class="c1">/// IAggregateRoot is the combination of IBaseEntity and IAggregateRoot</span>
    <span class="c1">/// &lt;/summary&gt;</span>
    <span class="c1">/// &lt;typeparam name="TKey"&gt;&lt;/typeparam&gt;</span>
    <span class="k">public</span> <span class="k">interface</span> <span class="nc">IAggregateRoot</span><span class="p">&lt;</span><span class="k">out</span> <span class="n">TKey</span><span class="p">&gt;</span> <span class="p">:</span> <span class="n">IBaseEntity</span><span class="p">&lt;</span><span class="n">TKey</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="kt">long</span> <span class="n">Version</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
        <span class="n">IReadOnlyCollection</span><span class="p">&lt;</span><span class="n">IDomainEvent</span><span class="p">&lt;</span><span class="n">TKey</span><span class="p">&gt;&gt;</span> <span class="n">Events</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span>  <span class="p">}</span>
        <span class="k">void</span> <span class="nf">ClearEvents</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create BaseEntity class for Base Aggregate Root in Entities-&gt;Common folder. BaseEntity’s properties is shared in all entity classes.</li>
</ul>

<p><strong>BaseEntity.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">Domain.Entities.Common</span>
<span class="p">{</span>
    <span class="c1">/// &lt;summary&gt;</span>
    <span class="c1">/// Base class for BaseAggregateRoot class</span>
    <span class="c1">/// Shared for all entities</span>
    <span class="c1">/// &lt;/summary&gt;</span>
    <span class="c1">/// &lt;typeparam name="TKey"&gt;&lt;/typeparam&gt;</span>
    <span class="k">public</span> <span class="k">abstract</span> <span class="k">class</span> <span class="nc">BaseEntity</span><span class="p">&lt;</span><span class="n">TKey</span><span class="p">&gt;</span> <span class="p">:</span> <span class="n">IBaseEntity</span><span class="p">&lt;</span><span class="n">TKey</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">protected</span> <span class="nf">BaseEntity</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
        <span class="k">protected</span> <span class="nf">BaseEntity</span><span class="p">(</span><span class="n">TKey</span> <span class="n">id</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="n">Id</span> <span class="p">=</span> <span class="n">id</span><span class="p">;</span>

        <span class="c1">//Implementation of interface</span>
        <span class="k">public</span> <span class="n">TKey</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">protected</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create BaseDomainEvent class for all domain event class in Entities-&gt;Common folder.</li>
</ul>

<p><strong>BaseDomainEvent.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">Domain.Entities.Common</span>
<span class="p">{</span>
    <span class="c1">/// &lt;summary&gt;</span>
    <span class="c1">/// Base domain event for all domain event</span>
    <span class="c1">/// &lt;/summary&gt;</span>
    <span class="c1">/// &lt;typeparam name="TA"&gt;&lt;/typeparam&gt;</span>
    <span class="c1">/// &lt;typeparam name="TKey"&gt;&lt;/typeparam&gt;</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">BaseDomainEvent</span><span class="p">&lt;</span><span class="n">TA</span><span class="p">,</span> <span class="n">TKey</span><span class="p">&gt;</span> <span class="p">:</span> <span class="n">IDomainEvent</span><span class="p">&lt;</span><span class="n">TKey</span><span class="p">&gt;</span> <span class="k">where</span> <span class="n">TA</span> <span class="p">:</span> <span class="n">IAggregateRoot</span><span class="p">&lt;</span><span class="n">TKey</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">protected</span> <span class="nf">BaseDomainEvent</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
        <span class="k">public</span> <span class="nf">BaseDomainEvent</span><span class="p">(</span><span class="n">TA</span> <span class="n">aggregateRoot</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span><span class="p">(</span><span class="n">aggregateRoot</span> <span class="k">is</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentNullException</span><span class="p">(</span><span class="k">nameof</span><span class="p">(</span><span class="n">aggregateRoot</span><span class="p">));</span>
            <span class="p">}</span>

            <span class="n">AggregateId</span> <span class="p">=</span> <span class="n">aggregateRoot</span><span class="p">.</span><span class="n">Id</span><span class="p">;</span>
            <span class="n">AggregateVersion</span> <span class="p">=</span> <span class="n">aggregateRoot</span><span class="p">.</span><span class="n">Version</span><span class="p">;</span>
            <span class="n">TimeStamp</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="c1">//Implementation of IDomainEvent</span>
        <span class="k">public</span> <span class="kt">long</span> <span class="n">AggregateVersion</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">//Implementation of IDomainEvent</span>
        <span class="k">public</span> <span class="n">TKey</span> <span class="n">AggregateId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">//Implementation of IDomainEvent</span>
        <span class="k">public</span> <span class="n">DateTime</span> <span class="n">TimeStamp</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create BaseAggregateRoot class for all aggregate root in Entities-&gt;Common folder. Here _event queue is used to queue all events of the aggregate root. AddEvent method used to add new event.</li>
</ul>

<p><strong>BaseAggregateRoot.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">System.Collections.Immutable</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Reflection</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Domain.Entities.Common</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">abstract</span> <span class="k">class</span> <span class="nc">BaseAggregateRoot</span><span class="p">&lt;</span><span class="n">TA</span><span class="p">,</span> <span class="n">TKey</span><span class="p">&gt;</span> <span class="p">:</span> <span class="n">BaseEntity</span><span class="p">&lt;</span><span class="n">TKey</span><span class="p">&gt;,</span> <span class="n">IAggregateRoot</span><span class="p">&lt;</span><span class="n">TKey</span><span class="p">&gt;</span> <span class="k">where</span> <span class="n">TA</span> <span class="p">:</span> <span class="n">IAggregateRoot</span><span class="p">&lt;</span><span class="n">TKey</span><span class="p">&gt;</span>
    <span class="p">{</span>

        <span class="c1">// Queuing all events</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">Queue</span><span class="p">&lt;</span><span class="n">IDomainEvent</span><span class="p">&lt;</span><span class="n">TKey</span><span class="p">&gt;&gt;</span> <span class="n">_events</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Queue</span><span class="p">&lt;</span><span class="n">IDomainEvent</span><span class="p">&lt;</span><span class="n">TKey</span><span class="p">&gt;&gt;();</span>

        <span class="k">protected</span> <span class="nf">BaseAggregateRoot</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
        <span class="k">protected</span> <span class="nf">BaseAggregateRoot</span><span class="p">(</span><span class="n">TKey</span> <span class="n">id</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>

        <span class="p">}</span>

        <span class="k">protected</span> <span class="k">void</span> <span class="nf">AddEvent</span><span class="p">(</span><span class="n">IDomainEvent</span><span class="p">&lt;</span><span class="n">TKey</span><span class="p">&gt;</span> <span class="n">@event</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span><span class="p">(</span><span class="n">@event</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentNullException</span><span class="p">(</span><span class="k">nameof</span><span class="p">(</span><span class="n">@event</span><span class="p">));</span>
            <span class="p">}</span>

            <span class="n">_events</span><span class="p">.</span><span class="nf">Enqueue</span><span class="p">(</span><span class="n">@event</span><span class="p">);</span>
            <span class="nf">Apply</span><span class="p">(</span><span class="n">@event</span><span class="p">);</span>
            <span class="n">Version</span><span class="p">++;</span>
        <span class="p">}</span>

        <span class="c1">/// &lt;summary&gt;</span>
        <span class="c1">/// This method is implemented in the derived class</span>
        <span class="c1">/// Apply this method to implement different events</span>
        <span class="c1">/// &lt;/summary&gt;</span>
        <span class="c1">/// &lt;param name="event"&gt;&lt;/param&gt;</span>
        
        <span class="k">protected</span> <span class="k">abstract</span> <span class="k">void</span> <span class="nf">Apply</span><span class="p">(</span><span class="n">IDomainEvent</span><span class="p">&lt;</span><span class="n">TKey</span><span class="p">&gt;</span> <span class="n">@event</span><span class="p">);</span>

        <span class="c1">// Implementation of IAggregateRoot</span>
        <span class="c1">// Aggregate version</span>
        <span class="k">public</span> <span class="kt">long</span> <span class="n">Version</span><span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">// Implementation of IAggregateRoot</span>
        <span class="k">public</span> <span class="n">IReadOnlyCollection</span><span class="p">&lt;</span><span class="n">IDomainEvent</span><span class="p">&lt;</span><span class="n">TKey</span><span class="p">&gt;&gt;</span> <span class="n">Events</span> <span class="p">=&gt;</span> <span class="n">_events</span><span class="p">.</span><span class="nf">ToImmutableArray</span><span class="p">();</span>

        <span class="c1">// Implementation of IAggregateRoot</span>
        <span class="k">public</span> <span class="k">void</span> <span class="nf">ClearEvents</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">_events</span><span class="p">.</span><span class="nf">Clear</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="err">#</span><span class="n">region</span> <span class="n">Factory</span>

        <span class="k">private</span> <span class="k">static</span> <span class="k">readonly</span> <span class="n">ConstructorInfo</span> <span class="n">CTor</span><span class="p">;</span>

        <span class="k">static</span> <span class="nf">BaseAggregateRoot</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">aggregateType</span> <span class="p">=</span> <span class="k">typeof</span><span class="p">(</span><span class="n">TA</span><span class="p">);</span>
            <span class="n">CTor</span> <span class="p">=</span> <span class="n">aggregateType</span><span class="p">.</span><span class="nf">GetConstructor</span><span class="p">(</span><span class="n">BindingFlags</span><span class="p">.</span><span class="n">Instance</span> <span class="p">|</span> <span class="n">BindingFlags</span><span class="p">.</span><span class="n">NonPublic</span> <span class="p">|</span> <span class="n">BindingFlags</span><span class="p">.</span><span class="n">Public</span><span class="p">,</span>
                <span class="k">null</span><span class="p">,</span> <span class="k">new</span> <span class="n">Type</span><span class="p">[</span><span class="m">0</span><span class="p">],</span> <span class="k">new</span> <span class="n">ParameterModifier</span><span class="p">[</span><span class="m">0</span><span class="p">]);</span>
            <span class="k">if</span> <span class="p">(</span><span class="k">null</span> <span class="p">==</span> <span class="n">CTor</span><span class="p">)</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">InvalidOperationException</span><span class="p">(</span><span class="s">$"Unable to find required private parameterless constructor for Aggregate of type '</span><span class="p">{</span><span class="n">aggregateType</span><span class="p">.</span><span class="n">Name</span><span class="p">}</span><span class="s">'"</span><span class="p">);</span>
        <span class="p">}</span>


        <span class="c1">/// &lt;summary&gt;</span>
        <span class="c1">/// Create Base Aggregate root when Rehydrate all Events</span>
        <span class="c1">/// &lt;/summary&gt;</span>
        <span class="c1">/// &lt;param name="events"&gt;&lt;/param&gt;</span>
        <span class="c1">/// &lt;returns&gt;&lt;/returns&gt;</span>
        <span class="c1">/// &lt;exception cref="ArgumentNullException"&gt;&lt;/exception&gt;</span>
        <span class="k">public</span> <span class="k">static</span> <span class="n">TA</span> <span class="nf">Create</span><span class="p">(</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">IDomainEvent</span><span class="p">&lt;</span><span class="n">TKey</span><span class="p">&gt;&gt;</span> <span class="n">events</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="k">null</span> <span class="p">==</span> <span class="n">events</span> <span class="p">||</span> <span class="p">!</span><span class="n">events</span><span class="p">.</span><span class="nf">Any</span><span class="p">())</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentNullException</span><span class="p">(</span><span class="k">nameof</span><span class="p">(</span><span class="n">events</span><span class="p">));</span>
            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="p">(</span><span class="n">TA</span><span class="p">)</span><span class="n">CTor</span><span class="p">.</span><span class="nf">Invoke</span><span class="p">(</span><span class="k">new</span> <span class="kt">object</span><span class="p">[</span><span class="m">0</span><span class="p">]);</span>

            <span class="c1">// Problem is in here</span>
            <span class="kt">var</span> <span class="n">baseAggregate</span> <span class="p">=</span> <span class="n">result</span> <span class="k">as</span> <span class="n">BaseAggregateRoot</span><span class="p">&lt;</span><span class="n">TA</span><span class="p">,</span> <span class="n">TKey</span><span class="p">&gt;;</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">baseAggregate</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
                <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">@event</span> <span class="k">in</span> <span class="n">events</span><span class="p">)</span>
                    <span class="n">baseAggregate</span><span class="p">.</span><span class="nf">AddEvent</span><span class="p">(</span><span class="n">@event</span><span class="p">);</span>

            <span class="n">result</span><span class="p">.</span><span class="nf">ClearEvents</span><span class="p">();</span>

            <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="err">#</span><span class="n">endregion</span>  
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create CatalogItemCreated  Event class in Events-&gt;CatalogItem folder</li>
</ul>

<p><strong>CatalogItemCreated.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Domain.Entities.Common</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Domain.Events.CatalogItem</span>
<span class="p">{</span>
    <span class="c1">/// &lt;summary&gt;</span>
    <span class="c1">/// Catalog item created event</span>
    <span class="c1">/// &lt;/summary&gt;</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CatalogItemCreated</span><span class="p">:</span> <span class="n">BaseDomainEvent</span><span class="p">&lt;</span><span class="n">Entities</span><span class="p">.</span><span class="n">CatalogItem</span><span class="p">,</span> <span class="n">Guid</span><span class="p">&gt;</span>
    <span class="p">{</span>

        <span class="k">private</span> <span class="nf">CatalogItemCreated</span><span class="p">()</span>
        <span class="p">{</span>

        <span class="p">}</span>
        <span class="k">public</span> <span class="nf">CatalogItemCreated</span><span class="p">(</span><span class="n">Entities</span><span class="p">.</span><span class="n">CatalogItem</span> <span class="n">catalogItem</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">catalogItem</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">//Id = catalogItem.Id;</span>
            <span class="n">Name</span> <span class="p">=</span> <span class="n">catalogItem</span><span class="p">.</span><span class="n">Name</span><span class="p">;</span>
            <span class="n">Description</span> <span class="p">=</span> <span class="n">catalogItem</span><span class="p">.</span><span class="n">Description</span><span class="p">;</span>
            <span class="n">Price</span> <span class="p">=</span> <span class="n">catalogItem</span><span class="p">.</span><span class="n">Price</span><span class="p">;</span>
            <span class="n">AvailableStock</span> <span class="p">=</span> <span class="n">catalogItem</span><span class="p">.</span><span class="n">AvailableStock</span><span class="p">;</span>
            <span class="n">RestockThreshold</span> <span class="p">=</span> <span class="n">catalogItem</span><span class="p">.</span><span class="n">RestockThreshold</span><span class="p">;</span>
            <span class="n">MaxStockThreshold</span> <span class="p">=</span> <span class="n">catalogItem</span><span class="p">.</span><span class="n">MaxStockThreshold</span><span class="p">;</span>
            <span class="n">OnReorder</span> <span class="p">=</span> <span class="n">catalogItem</span><span class="p">.</span><span class="n">OnReorder</span><span class="p">;</span>
            <span class="n">IsDeleted</span> <span class="p">=</span> <span class="n">catalogItem</span><span class="p">.</span><span class="n">IsDeleted</span><span class="p">;</span>
            
        <span class="p">}</span>

        <span class="c1">//public Guid Id { get; set; }</span>

        <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">string</span> <span class="n">Description</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">double</span> <span class="n">Price</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="c1">// Quantity in stock</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">AvailableStock</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="c1">// Available stock at which we should reorder</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">RestockThreshold</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="c1">// Maximum number of units that can be in-stock at any time (due to physicial/logistical constraints in warehouses)</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">MaxStockThreshold</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="c1">/// &lt;summary&gt;</span>
        <span class="c1">/// True if item is on reorder</span>
        <span class="c1">/// &lt;/summary&gt;</span>
        <span class="k">public</span> <span class="kt">bool</span> <span class="n">OnReorder</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">bool</span> <span class="n">IsDeleted</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

    <span class="p">}</span>
<span class="p">}</span>
 
</code></pre></div></div>

<ul>
  <li>Create CatalogItemDeleted Event class in Events-&gt;CatalogItem folder</li>
</ul>

<p><strong>CatalogItemDeleted.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Domain.Entities.Common</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Domain.Events.CatalogItem</span>
<span class="p">{</span>
    <span class="c1">/// &lt;summary&gt;</span>
    <span class="c1">/// Catalog item created event</span>
    <span class="c1">/// &lt;/summary&gt;</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CatalogItemDeleted</span><span class="p">:</span> <span class="n">BaseDomainEvent</span><span class="p">&lt;</span><span class="n">Entities</span><span class="p">.</span><span class="n">CatalogItem</span><span class="p">,</span> <span class="n">Guid</span><span class="p">&gt;</span>
    <span class="p">{</span>

        <span class="k">private</span> <span class="nf">CatalogItemDeleted</span><span class="p">()</span>
        <span class="p">{</span>

        <span class="p">}</span>
        <span class="k">public</span> <span class="nf">CatalogItemDeleted</span><span class="p">(</span><span class="n">Entities</span><span class="p">.</span><span class="n">CatalogItem</span> <span class="n">catalogItem</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">catalogItem</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">IsDeleted</span> <span class="p">=</span> <span class="n">catalogItem</span><span class="p">.</span><span class="n">IsDeleted</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="kt">bool</span> <span class="n">IsDeleted</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

    <span class="p">}</span>
<span class="p">}</span>


</code></pre></div></div>

<ul>
  <li>Create CatalogItemUpdated Event class in Events-&gt;CatalogItem folder</li>
</ul>

<p><strong>CatalogItemUpdated.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Domain.Entities.Common</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Domain.Events.CatalogItem</span>
<span class="p">{</span>
    <span class="c1">/// &lt;summary&gt;</span>
    <span class="c1">/// Catalog item created event</span>
    <span class="c1">/// &lt;/summary&gt;</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CatalogItemUpdated</span><span class="p">:</span> <span class="n">BaseDomainEvent</span><span class="p">&lt;</span><span class="n">Entities</span><span class="p">.</span><span class="n">CatalogItem</span><span class="p">,</span> <span class="n">Guid</span><span class="p">&gt;</span>
    <span class="p">{</span>

        <span class="k">private</span> <span class="nf">CatalogItemUpdated</span><span class="p">()</span>
        <span class="p">{</span>

        <span class="p">}</span>
        <span class="k">public</span> <span class="nf">CatalogItemUpdated</span><span class="p">(</span><span class="n">Entities</span><span class="p">.</span><span class="n">CatalogItem</span> <span class="n">catalogItem</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">catalogItem</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">//Id = catalogItem.Id;</span>
            <span class="n">Name</span> <span class="p">=</span> <span class="n">catalogItem</span><span class="p">.</span><span class="n">Name</span><span class="p">;</span>
            <span class="n">Description</span> <span class="p">=</span> <span class="n">catalogItem</span><span class="p">.</span><span class="n">Description</span><span class="p">;</span>
            <span class="n">Price</span> <span class="p">=</span> <span class="n">catalogItem</span><span class="p">.</span><span class="n">Price</span><span class="p">;</span>
            <span class="n">AvailableStock</span> <span class="p">=</span> <span class="n">catalogItem</span><span class="p">.</span><span class="n">AvailableStock</span><span class="p">;</span>
            <span class="n">RestockThreshold</span> <span class="p">=</span> <span class="n">catalogItem</span><span class="p">.</span><span class="n">RestockThreshold</span><span class="p">;</span>
            <span class="n">MaxStockThreshold</span> <span class="p">=</span> <span class="n">catalogItem</span><span class="p">.</span><span class="n">MaxStockThreshold</span><span class="p">;</span>
            <span class="n">OnReorder</span> <span class="p">=</span> <span class="n">catalogItem</span><span class="p">.</span><span class="n">OnReorder</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">//public Guid Id { get; set; }</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">string</span> <span class="n">Description</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">double</span> <span class="n">Price</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="c1">// Quantity in stock</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">AvailableStock</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="c1">// Available stock at which we should reorder</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">RestockThreshold</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="c1">// Maximum number of units that can be in-stock at any time (due to physicial/logistical constraints in warehouses)</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">MaxStockThreshold</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="c1">/// &lt;summary&gt;</span>
        <span class="c1">/// True if item is on reorder</span>
        <span class="c1">/// &lt;/summary&gt;</span>
        <span class="k">public</span> <span class="kt">bool</span> <span class="n">OnReorder</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create CatalogItem Aggregate Root class in Entities folder.  Here we used DDD so CatalogItem is the main domain class here. Create, update, delete is performed using this class.</li>
</ul>

<p><strong>CatalogItem.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Domain.Entities.Common</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Domain.Events.CatalogItem</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Domain.Entities</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CatalogItem</span> <span class="p">:</span> <span class="n">BaseAggregateRoot</span><span class="p">&lt;</span><span class="n">CatalogItem</span><span class="p">,</span> <span class="n">Guid</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="nf">CatalogItem</span><span class="p">()</span>
        <span class="p">{</span>

        <span class="p">}</span>

        <span class="k">public</span> <span class="nf">CatalogItem</span><span class="p">(</span><span class="n">Guid</span> <span class="n">id</span><span class="p">,</span> <span class="kt">string</span> <span class="n">name</span><span class="p">,</span> <span class="kt">string</span> <span class="n">description</span><span class="p">,</span> <span class="kt">double</span> <span class="n">price</span><span class="p">,</span> <span class="kt">int</span> <span class="n">availableStock</span><span class="p">,</span> 
            <span class="kt">int</span> <span class="n">restockThreshold</span><span class="p">,</span> <span class="kt">int</span> <span class="n">maxStockThreshold</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">onReorder</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Id</span> <span class="p">=</span> <span class="n">id</span><span class="p">;</span>
            <span class="n">Name</span> <span class="p">=</span> <span class="n">name</span><span class="p">;</span>
            <span class="n">Description</span> <span class="p">=</span> <span class="n">description</span><span class="p">;</span>
            <span class="n">Price</span> <span class="p">=</span> <span class="n">price</span><span class="p">;</span>
            <span class="n">AvailableStock</span> <span class="p">=</span> <span class="n">availableStock</span><span class="p">;</span>
            <span class="n">RestockThreshold</span> <span class="p">=</span> <span class="n">restockThreshold</span><span class="p">;</span>
            <span class="n">MaxStockThreshold</span> <span class="p">=</span> <span class="n">maxStockThreshold</span><span class="p">;</span>
            <span class="n">OnReorder</span> <span class="p">=</span> <span class="n">onReorder</span><span class="p">;</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">Version</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">(</span><span class="s">"Catalog item already created"</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(</span><span class="kt">string</span><span class="p">.</span><span class="nf">IsNullOrEmpty</span><span class="p">(</span><span class="n">name</span><span class="p">))</span>
            <span class="p">{</span>
                <span class="c1">//Validation Exception will be placed here</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">(</span><span class="s">"Name Can not be Empty"</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">price</span> <span class="p">&lt;=</span> <span class="m">0</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="c1">//Validation Exception will be placed here</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">(</span><span class="s">"Price must be positive value"</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="c1">// Add CatalogItem Event Here to create</span>
            <span class="nf">AddEvent</span><span class="p">(</span><span class="k">new</span> <span class="nf">CatalogItemCreated</span><span class="p">(</span><span class="k">this</span><span class="p">));</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">string</span> <span class="n">Description</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">double</span> <span class="n">Price</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">// Quantity in stock</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">AvailableStock</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">// Available stock at which we should reorder</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">RestockThreshold</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">// Maximum number of units that can be in-stock at any time (due to physicial/logistical constraints in warehouses)</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">MaxStockThreshold</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">/// &lt;summary&gt;</span>
        <span class="c1">/// True if item is on reorder</span>
        <span class="c1">/// &lt;/summary&gt;</span>
        <span class="k">public</span> <span class="kt">bool</span> <span class="n">OnReorder</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">bool</span> <span class="n">IsDeleted</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>

        <span class="k">public</span> <span class="k">static</span> <span class="n">CatalogItem</span> <span class="nf">Create</span><span class="p">(</span><span class="kt">string</span> <span class="n">name</span><span class="p">,</span> <span class="kt">string</span> <span class="n">description</span><span class="p">,</span> <span class="kt">double</span> <span class="n">price</span><span class="p">,</span> <span class="kt">int</span> <span class="n">availableStock</span><span class="p">,</span> 
            <span class="kt">int</span> <span class="n">restockThreshold</span><span class="p">,</span> <span class="kt">int</span> <span class="n">maxStockThreshold</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">onReorder</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">CatalogItem</span><span class="p">(</span><span class="n">Guid</span><span class="p">.</span><span class="nf">NewGuid</span><span class="p">(),</span> <span class="n">name</span><span class="p">,</span> <span class="n">description</span><span class="p">,</span> <span class="n">price</span><span class="p">,</span> <span class="n">availableStock</span><span class="p">,</span> <span class="n">restockThreshold</span><span class="p">,</span> <span class="n">maxStockThreshold</span><span class="p">,</span> <span class="n">onReorder</span><span class="p">);</span> <span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">void</span> <span class="nf">Update</span><span class="p">(</span><span class="n">Guid</span> <span class="n">id</span><span class="p">,</span> <span class="kt">string</span> <span class="n">name</span><span class="p">,</span> <span class="kt">string</span> <span class="n">description</span><span class="p">,</span> <span class="kt">double</span> <span class="n">price</span><span class="p">,</span> <span class="kt">int</span> <span class="n">availableStock</span><span class="p">,</span>
         <span class="kt">int</span> <span class="n">restockThreshold</span><span class="p">,</span> <span class="kt">int</span> <span class="n">maxStockThreshold</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">onReorder</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Id</span> <span class="p">=</span> <span class="n">id</span><span class="p">;</span>
            <span class="n">Name</span> <span class="p">=</span> <span class="n">name</span><span class="p">;</span>
            <span class="n">Description</span> <span class="p">=</span> <span class="n">description</span><span class="p">;</span>
            <span class="n">Price</span> <span class="p">=</span> <span class="n">price</span><span class="p">;</span>
            <span class="n">AvailableStock</span> <span class="p">=</span> <span class="n">availableStock</span><span class="p">;</span>
            <span class="n">RestockThreshold</span> <span class="p">=</span> <span class="n">restockThreshold</span><span class="p">;</span>
            <span class="n">MaxStockThreshold</span> <span class="p">=</span> <span class="n">maxStockThreshold</span><span class="p">;</span>
            <span class="n">OnReorder</span> <span class="p">=</span> <span class="n">onReorder</span><span class="p">;</span>

            <span class="nf">AddEvent</span><span class="p">(</span><span class="k">new</span> <span class="nf">CatalogItemUpdated</span><span class="p">(</span><span class="k">this</span><span class="p">));</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">void</span> <span class="nf">Delete</span><span class="p">(</span><span class="n">Guid</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Id</span> <span class="p">=</span> <span class="n">id</span><span class="p">;</span>
            <span class="n">IsDeleted</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
            <span class="nf">AddEvent</span><span class="p">(</span><span class="k">new</span> <span class="nf">CatalogItemDeleted</span><span class="p">(</span><span class="k">this</span><span class="p">));</span>
        <span class="p">}</span>



        <span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">Apply</span><span class="p">(</span><span class="n">IDomainEvent</span><span class="p">&lt;</span><span class="n">Guid</span><span class="p">&gt;</span> <span class="n">@event</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">switch</span> <span class="p">(</span><span class="n">@event</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">case</span> <span class="n">CatalogItemCreated</span> <span class="n">catalogItemCreated</span><span class="p">:</span> <span class="nf">OnCatalogItemCreated</span><span class="p">(</span><span class="n">catalogItemCreated</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
                <span class="k">case</span> <span class="n">CatalogItemUpdated</span> <span class="n">catalogItemUpdated</span><span class="p">:</span> <span class="nf">OnCatalogItemUpdated</span><span class="p">(</span><span class="n">catalogItemUpdated</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
                <span class="k">case</span> <span class="n">CatalogItemDeleted</span> <span class="n">catalogItemDeleted</span><span class="p">:</span> 
                    <span class="n">IsDeleted</span> <span class="p">=</span> <span class="n">catalogItemDeleted</span><span class="p">.</span><span class="n">IsDeleted</span><span class="p">;</span>
                    <span class="k">break</span><span class="p">;</span>

            <span class="p">}</span>
        <span class="p">}</span>

        <span class="c1">// On Catalog Item Created Event</span>
        <span class="k">private</span> <span class="k">void</span> <span class="nf">OnCatalogItemCreated</span><span class="p">(</span><span class="n">CatalogItemCreated</span> <span class="n">catalogItemCreated</span><span class="p">)</span>
        <span class="p">{</span>

            <span class="n">Id</span> <span class="p">=</span> <span class="n">catalogItemCreated</span><span class="p">.</span><span class="n">AggregateId</span><span class="p">;</span> <span class="c1">// Must have ID</span>
            <span class="n">Name</span> <span class="p">=</span> <span class="n">catalogItemCreated</span><span class="p">.</span><span class="n">Name</span><span class="p">;</span>
            <span class="n">Description</span><span class="p">=</span> <span class="n">catalogItemCreated</span><span class="p">.</span><span class="n">Description</span><span class="p">;</span>
            <span class="n">Price</span> <span class="p">=</span> <span class="n">catalogItemCreated</span><span class="p">.</span><span class="n">Price</span><span class="p">;</span>
            <span class="n">AvailableStock</span> <span class="p">=</span> <span class="n">catalogItemCreated</span><span class="p">.</span><span class="n">AvailableStock</span><span class="p">;</span>
            <span class="n">RestockThreshold</span> <span class="p">=</span> <span class="n">catalogItemCreated</span><span class="p">.</span><span class="n">RestockThreshold</span><span class="p">;</span>
            <span class="n">MaxStockThreshold</span> <span class="p">=</span> <span class="n">catalogItemCreated</span><span class="p">.</span><span class="n">MaxStockThreshold</span><span class="p">;</span>
            <span class="n">OnReorder</span> <span class="p">=</span> <span class="n">catalogItemCreated</span><span class="p">.</span><span class="n">OnReorder</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// On Catalog Item Updated Event</span>
        <span class="k">private</span> <span class="k">void</span> <span class="nf">OnCatalogItemUpdated</span><span class="p">(</span><span class="n">CatalogItemUpdated</span> <span class="n">catalogItemUpdated</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Name</span> <span class="p">=</span> <span class="n">catalogItemUpdated</span><span class="p">.</span><span class="n">Name</span><span class="p">;</span>
            <span class="n">Description</span> <span class="p">=</span> <span class="n">catalogItemUpdated</span><span class="p">.</span><span class="n">Description</span><span class="p">;</span>
            <span class="n">Price</span> <span class="p">=</span> <span class="n">catalogItemUpdated</span><span class="p">.</span><span class="n">Price</span><span class="p">;</span>
            <span class="n">AvailableStock</span> <span class="p">=</span> <span class="n">catalogItemUpdated</span><span class="p">.</span><span class="n">AvailableStock</span><span class="p">;</span>
            <span class="n">RestockThreshold</span> <span class="p">=</span> <span class="n">catalogItemUpdated</span><span class="p">.</span><span class="n">RestockThreshold</span><span class="p">;</span>
            <span class="n">MaxStockThreshold</span> <span class="p">=</span> <span class="n">catalogItemUpdated</span><span class="p">.</span><span class="n">MaxStockThreshold</span><span class="p">;</span>
            <span class="n">OnReorder</span> <span class="p">=</span> <span class="n">catalogItemUpdated</span><span class="p">.</span><span class="n">OnReorder</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>Step 5: Organize Application</strong></p>

<ul>
  <li>Add domain as a reference project in Application project. You may add using project file as follows.</li>
</ul>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nt">&lt;ItemGroup&gt;</span>
    <span class="nt">&lt;ProjectReference</span> <span class="na">Include=</span><span class="s">"..\Domain\Domain.csproj"</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;/ItemGroup&gt;</span>
</code></pre></div></div>

<ul>
  <li>Create CreateCatalogItemDTO class in Common-&gt;DTOs folder</li>
</ul>

<p><strong>CreateCatalogItemDTO.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">namespace</span> <span class="nn">Application.Common.DTOs</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CreateCatalogItemDTO</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">string</span> <span class="n">Description</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">double</span> <span class="n">Price</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">// Quantity in stock</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">AvailableStock</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">// Available stock at which we should reorder</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">RestockThreshold</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">// Maximum number of units that can be in-stock at any time (due to physicial/logistical constraints in warehouses)</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">MaxStockThreshold</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">/// &lt;summary&gt;</span>
        <span class="c1">/// True if item is on reorder</span>
        <span class="c1">/// &lt;/summary&gt;</span>
        <span class="k">public</span> <span class="kt">bool</span> <span class="n">OnReorder</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create UpdateCatalogItemDTO class in Common-&gt;DTOs folder</li>
</ul>

<p><strong>UpdateCatalogItemDTO.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">namespace</span> <span class="nn">Application.Common.DTOs</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">UpdateCatalogItemDTO</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="n">Guid</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">string</span> <span class="n">Description</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">double</span> <span class="n">Price</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">// Quantity in stock</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">AvailableStock</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">// Available stock at which we should reorder</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">RestockThreshold</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">// Maximum number of units that can be in-stock at any time (due to physicial/logistical constraints in warehouses)</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">MaxStockThreshold</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">/// &lt;summary&gt;</span>
        <span class="c1">/// True if item is on reorder</span>
        <span class="c1">/// &lt;/summary&gt;</span>
        <span class="k">public</span> <span class="kt">bool</span> <span class="n">OnReorder</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create IAggregateRepository Interface in Common-&gt;Interfaces folder. This interface is used for event sourcing. Here,  AppendAsync method is used to append events to store in event store database, RehydreateAsync method is used to read all events using aggregate id and ReadEventsAsync method is used to read events as a log and return in to dictionary.</li>
</ul>

<p><strong>IAggregateRepository.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Domain.Entities.Common</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Application.Common.Interfaces</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">interface</span> <span class="nc">IAggregateRepository</span><span class="p">&lt;</span><span class="n">TA</span><span class="p">,</span> <span class="n">TKey</span><span class="p">&gt;</span> <span class="k">where</span> <span class="n">TA</span> <span class="p">:</span> <span class="k">class</span><span class="err">,</span> <span class="nc">IAggregateRoot</span><span class="p">&lt;</span><span class="n">TKey</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="c1">// Append events to store in event store database</span>
        <span class="n">Task</span> <span class="nf">AppendAsync</span><span class="p">(</span><span class="n">TA</span> <span class="n">aggregate</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span> <span class="p">=</span> <span class="k">default</span><span class="p">);</span>

        <span class="c1">// Read all events using aggregate ID</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">TA</span><span class="p">?&gt;</span> <span class="nf">RehydreateAsync</span><span class="p">(</span><span class="n">TKey</span> <span class="n">aggregateId</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span> <span class="p">=</span> <span class="k">default</span><span class="p">);</span>

        <span class="c1">// Read events as a log and return into a dictionary</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">object</span><span class="p">&gt;&gt;</span> <span class="nf">ReadEventsAsync</span><span class="p">(</span><span class="n">TKey</span> <span class="n">aggregateId</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span> <span class="p">=</span> <span class="k">default</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create ICatalogItemRepository interface to insert and update into sql server. Since, we use soft delete so here delete means update of isDelete filed to 1.</li>
</ul>

<p><strong>ICatalogItemRepository.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Domain.Entities</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Application.Common.Interfaces</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">interface</span> <span class="nc">ICatalogItemRepository</span>
    <span class="p">{</span>
        <span class="n">Task</span> <span class="nf">AddAsync</span><span class="p">(</span><span class="n">CatalogItem</span> <span class="n">catalogItem</span><span class="p">);</span>
        <span class="n">Task</span> <span class="nf">UpdateAsync</span><span class="p">(</span><span class="n">CatalogItem</span> <span class="n">catalogItem</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create PrivateSetterContractResolver class in Common-&gt;Resolvers folder. This is a Custom Contract Resolver to Set Private property when Rehydrate Events</li>
</ul>

<p><strong>PrivateSetterContractResolver.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Newtonsoft.Json</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Newtonsoft.Json.Serialization</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Reflection</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Application.Common.Resolvers</span>
<span class="p">{</span>
    <span class="c1">/// &lt;summary&gt;</span>
    <span class="c1">/// Custom Contract Resolver to Set Private property when Rehydrate Events</span>
    <span class="c1">/// &lt;/summary&gt;</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">PrivateSetterContractResolver</span> <span class="p">:</span> <span class="n">DefaultContractResolver</span>
    <span class="p">{</span>
        <span class="k">protected</span> <span class="k">override</span> <span class="n">JsonProperty</span> <span class="nf">CreateProperty</span><span class="p">(</span><span class="n">MemberInfo</span> <span class="n">member</span><span class="p">,</span> <span class="n">MemberSerialization</span> <span class="n">memberSerialization</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">jsonProperty</span> <span class="p">=</span> <span class="k">base</span><span class="p">.</span><span class="nf">CreateProperty</span><span class="p">(</span><span class="n">member</span><span class="p">,</span> <span class="n">memberSerialization</span><span class="p">);</span>

            <span class="k">if</span><span class="p">(</span><span class="n">jsonProperty</span><span class="p">.</span><span class="n">Writable</span><span class="p">)</span>
                <span class="k">return</span> <span class="n">jsonProperty</span><span class="p">;</span>

            <span class="k">if</span><span class="p">(</span><span class="n">member</span> <span class="k">is</span> <span class="n">PropertyInfo</span> <span class="n">propertyInfo</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="kt">var</span> <span class="n">setter</span> <span class="p">=</span> <span class="n">propertyInfo</span><span class="p">.</span><span class="nf">GetSetMethod</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>
                <span class="n">jsonProperty</span><span class="p">.</span><span class="n">Writable</span> <span class="p">=</span> <span class="n">setter</span> <span class="p">!=</span> <span class="k">null</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="n">jsonProperty</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="c1">//EnvironmentVariableTarget jsonProperty = base.CreateProperty();</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create CreateCatalogItemCommand and CreateCatalogItemCommandHandler class in Commands-&gt;CatalogItems folder.</li>
</ul>

<p><strong>CreateCatalogItemCommand.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Application.Common.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Domain.Entities</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Application.Commands.CatalogItems</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CreateCatalogItemCommand</span> <span class="p">:</span> <span class="n">INotification</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">CreateCatalogItemCommand</span><span class="p">(</span><span class="kt">string</span> <span class="n">name</span><span class="p">,</span> <span class="kt">string</span> <span class="n">description</span><span class="p">,</span> <span class="kt">double</span> <span class="n">price</span><span class="p">,</span> <span class="kt">int</span> <span class="n">availableStock</span><span class="p">,</span> <span class="kt">int</span> <span class="n">restockThreshold</span><span class="p">,</span> 
            <span class="kt">int</span> <span class="n">maxStockThreshold</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">onReorder</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Name</span> <span class="p">=</span> <span class="n">name</span><span class="p">;</span>
            <span class="n">Description</span> <span class="p">=</span> <span class="n">description</span><span class="p">;</span>
            <span class="n">Price</span> <span class="p">=</span> <span class="n">price</span><span class="p">;</span>
            <span class="n">AvailableStock</span> <span class="p">=</span> <span class="n">availableStock</span><span class="p">;</span>
            <span class="n">RestockThreshold</span> <span class="p">=</span> <span class="n">restockThreshold</span><span class="p">;</span>
            <span class="n">MaxStockThreshold</span> <span class="p">=</span> <span class="n">maxStockThreshold</span><span class="p">;</span>
            <span class="n">OnReorder</span> <span class="p">=</span> <span class="n">onReorder</span><span class="p">;</span>
        <span class="p">}</span>


        <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">string</span> <span class="n">Description</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">double</span> <span class="n">Price</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">// Quantity in stock</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">AvailableStock</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">// Available stock at which we should reorder</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">RestockThreshold</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">// Maximum number of units that can be in-stock at any time (due to physicial/logistical constraints in warehouses)</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">MaxStockThreshold</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">/// &lt;summary&gt;</span>
        <span class="c1">/// True if item is on reorder</span>
        <span class="c1">/// &lt;/summary&gt;</span>
        <span class="k">public</span> <span class="kt">bool</span> <span class="n">OnReorder</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">class</span> <span class="nc">CreateCatalogItemCommandHandler</span> <span class="p">:</span> <span class="n">INotificationHandler</span><span class="p">&lt;</span><span class="n">CreateCatalogItemCommand</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IAggregateRepository</span><span class="p">&lt;</span><span class="n">CatalogItem</span><span class="p">,</span> <span class="n">Guid</span><span class="p">&gt;</span> <span class="n">_aggregateRepository</span><span class="p">;</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">ICatalogItemRepository</span> <span class="n">_catalogItemRepository</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">CreateCatalogItemCommandHandler</span><span class="p">(</span><span class="n">IAggregateRepository</span><span class="p">&lt;</span><span class="n">CatalogItem</span><span class="p">,</span> <span class="n">Guid</span><span class="p">&gt;</span> <span class="n">aggregateRepository</span><span class="p">,</span> 
            <span class="n">ICatalogItemRepository</span> <span class="n">catalogItemRepository</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_aggregateRepository</span> <span class="p">=</span> <span class="n">aggregateRepository</span><span class="p">;</span>
            <span class="n">_catalogItemRepository</span> <span class="p">=</span> <span class="n">catalogItemRepository</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span> <span class="nf">Handle</span><span class="p">(</span><span class="n">CreateCatalogItemCommand</span> <span class="n">notification</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
        <span class="p">{</span>

    

            <span class="c1">// Insert event into eventstore db</span>
            <span class="kt">var</span> <span class="n">catalogItem</span> <span class="p">=</span> <span class="n">CatalogItem</span><span class="p">.</span><span class="nf">Create</span><span class="p">(</span><span class="n">notification</span><span class="p">.</span><span class="n">Name</span><span class="p">,</span> <span class="n">notification</span><span class="p">.</span><span class="n">Description</span><span class="p">,</span> <span class="n">notification</span><span class="p">.</span><span class="n">Price</span><span class="p">,</span> <span class="n">notification</span><span class="p">.</span><span class="n">AvailableStock</span><span class="p">,</span>
                <span class="n">notification</span><span class="p">.</span><span class="n">RestockThreshold</span><span class="p">,</span> <span class="n">notification</span><span class="p">.</span><span class="n">MaxStockThreshold</span><span class="p">,</span> <span class="n">notification</span><span class="p">.</span><span class="n">OnReorder</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_aggregateRepository</span><span class="p">.</span><span class="nf">AppendAsync</span><span class="p">(</span><span class="n">catalogItem</span><span class="p">);</span>

            <span class="c1">// Save data into database</span>
            <span class="c1">//await _catalogItemAggregateRepository.SaveAsync(catalogItem.Events.FirstOrDefault());</span>
            <span class="k">await</span> <span class="n">_catalogItemRepository</span><span class="p">.</span><span class="nf">AddAsync</span><span class="p">(</span><span class="n">catalogItem</span><span class="p">);</span>

            <span class="c1">// Dispatch events to any event/service bus to do next actions</span>
            <span class="c1">// We can also register EventStore db Subscription to receive Event Notification</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create UpdateCatalogItemCommand and UpdateCatalogItemCommandHandler class in Commands-&gt;CatalogItems folder.</li>
</ul>

<p><strong>UpdateCatalogItemCommand.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Application.Common.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Domain.Entities</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Application.Commands.CatalogItems</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">UpdateCatalogItemCommand</span> <span class="p">:</span> <span class="n">INotification</span>
    <span class="p">{</span>
        <span class="c1">// Update Catalog Item Command</span>
        <span class="k">public</span> <span class="nf">UpdateCatalogItemCommand</span><span class="p">(</span><span class="n">Guid</span> <span class="n">id</span><span class="p">,</span> <span class="kt">string</span> <span class="n">name</span><span class="p">,</span> <span class="kt">string</span> <span class="n">description</span><span class="p">,</span> <span class="kt">double</span> <span class="n">price</span><span class="p">,</span> <span class="kt">int</span> <span class="n">availableStock</span><span class="p">,</span> <span class="kt">int</span> <span class="n">restockThreshold</span><span class="p">,</span>
            <span class="kt">int</span> <span class="n">maxStockThreshold</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">onReorder</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">CatalogItemId</span> <span class="p">=</span> <span class="n">id</span><span class="p">;</span>
            <span class="n">Name</span> <span class="p">=</span> <span class="n">name</span><span class="p">;</span>
            <span class="n">Description</span> <span class="p">=</span> <span class="n">description</span><span class="p">;</span>
            <span class="n">Price</span> <span class="p">=</span> <span class="n">price</span><span class="p">;</span>
            <span class="n">AvailableStock</span> <span class="p">=</span> <span class="n">availableStock</span><span class="p">;</span>
            <span class="n">RestockThreshold</span> <span class="p">=</span> <span class="n">restockThreshold</span><span class="p">;</span>
            <span class="n">MaxStockThreshold</span> <span class="p">=</span> <span class="n">maxStockThreshold</span><span class="p">;</span>
            <span class="n">OnReorder</span> <span class="p">=</span> <span class="n">onReorder</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">Guid</span> <span class="n">CatalogItemId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">string</span> <span class="n">Description</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">double</span> <span class="n">Price</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">// Quantity in stock</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">AvailableStock</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">// Available stock at which we should reorder</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">RestockThreshold</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">// Maximum number of units that can be in-stock at any time (due to physicial/logistical constraints in warehouses)</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">MaxStockThreshold</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">/// &lt;summary&gt;</span>
        <span class="c1">/// True if item is on reorder</span>
        <span class="c1">/// &lt;/summary&gt;</span>
        <span class="k">public</span> <span class="kt">bool</span> <span class="n">OnReorder</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

    <span class="p">}</span>

    <span class="k">public</span> <span class="k">class</span> <span class="nc">UpdateCatalogItemCommandHandler</span><span class="p">:</span> <span class="n">INotificationHandler</span><span class="p">&lt;</span><span class="n">UpdateCatalogItemCommand</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IAggregateRepository</span><span class="p">&lt;</span><span class="n">CatalogItem</span><span class="p">,</span> <span class="n">Guid</span><span class="p">&gt;</span> <span class="n">_aggregateRepository</span><span class="p">;</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">ICatalogItemRepository</span> <span class="n">_catalogItemRepository</span><span class="p">;</span>
        <span class="k">public</span> <span class="nf">UpdateCatalogItemCommandHandler</span><span class="p">(</span><span class="n">IAggregateRepository</span><span class="p">&lt;</span><span class="n">CatalogItem</span><span class="p">,</span> <span class="n">Guid</span><span class="p">&gt;</span> <span class="n">aggregateRepository</span><span class="p">,</span> 
            <span class="n">ICatalogItemRepository</span> <span class="n">catalogItemRepository</span><span class="p">)</span>
        <span class="p">{</span> 
            <span class="n">_aggregateRepository</span> <span class="p">=</span> <span class="n">aggregateRepository</span><span class="p">;</span>
            <span class="n">_catalogItemRepository</span> <span class="p">=</span> <span class="n">catalogItemRepository</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="err">#</span><span class="n">region</span> <span class="n">INotificationHandler</span> <span class="n">implementation</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span> <span class="nf">Handle</span><span class="p">(</span><span class="n">UpdateCatalogItemCommand</span> <span class="n">notification</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">catalogItem</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_aggregateRepository</span><span class="p">.</span><span class="nf">RehydreateAsync</span><span class="p">(</span><span class="n">notification</span><span class="p">.</span><span class="n">CatalogItemId</span><span class="p">,</span> <span class="n">cancellationToken</span><span class="p">);</span>

            <span class="k">if</span><span class="p">(</span><span class="n">catalogItem</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">(</span><span class="s">"Invalide catalog item information"</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="n">catalogItem</span><span class="p">.</span><span class="nf">Update</span><span class="p">(</span><span class="n">notification</span><span class="p">.</span><span class="n">CatalogItemId</span><span class="p">,</span> <span class="n">notification</span><span class="p">.</span><span class="n">Name</span><span class="p">,</span> <span class="n">notification</span><span class="p">.</span><span class="n">Description</span><span class="p">,</span> <span class="n">notification</span><span class="p">.</span><span class="n">Price</span><span class="p">,</span>
                <span class="n">notification</span><span class="p">.</span><span class="n">AvailableStock</span><span class="p">,</span> <span class="n">notification</span><span class="p">.</span><span class="n">RestockThreshold</span><span class="p">,</span> <span class="n">notification</span><span class="p">.</span><span class="n">MaxStockThreshold</span><span class="p">,</span> <span class="n">notification</span><span class="p">.</span><span class="n">OnReorder</span><span class="p">);</span>

            <span class="k">await</span> <span class="n">_aggregateRepository</span><span class="p">.</span><span class="nf">AppendAsync</span><span class="p">(</span><span class="n">catalogItem</span><span class="p">,</span> <span class="n">cancellationToken</span><span class="p">);</span>

            <span class="c1">// Save data into database</span>

            <span class="k">await</span> <span class="n">_catalogItemRepository</span><span class="p">.</span><span class="nf">UpdateAsync</span><span class="p">(</span><span class="n">catalogItem</span><span class="p">);</span>


        <span class="p">}</span>

        <span class="err">#</span><span class="n">endregion</span>
    <span class="p">}</span>


<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create DeleteCatalogItemCommand and DeleteCatlogItemCommandHandler class in Commands-&gt;CatalogItems folder.</li>
</ul>

<p><strong>DeleteCatalogItemCommand.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Application.Common.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Domain.Entities</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Application.Commands.CatalogItems</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">DeleteCatalogItemCommand</span> <span class="p">:</span> <span class="n">INotification</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">DeleteCatalogItemCommand</span><span class="p">(</span><span class="n">Guid</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Id</span> <span class="p">=</span> <span class="n">id</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="n">Guid</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">class</span> <span class="nc">DeleteCatlogItemCommandHandler</span> <span class="p">:</span> <span class="n">INotificationHandler</span><span class="p">&lt;</span><span class="n">DeleteCatalogItemCommand</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IAggregateRepository</span><span class="p">&lt;</span><span class="n">CatalogItem</span><span class="p">,</span> <span class="n">Guid</span><span class="p">&gt;</span> <span class="n">_aggregateRepository</span><span class="p">;</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">ICatalogItemRepository</span> <span class="n">_catalogItemRepository</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">DeleteCatlogItemCommandHandler</span><span class="p">(</span><span class="n">IAggregateRepository</span><span class="p">&lt;</span><span class="n">CatalogItem</span><span class="p">,</span> <span class="n">Guid</span><span class="p">&gt;</span> <span class="n">agrregateRepository</span>
            <span class="p">,</span> <span class="n">ICatalogItemRepository</span> <span class="n">catalogItemRepository</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_aggregateRepository</span> <span class="p">=</span> <span class="n">agrregateRepository</span><span class="p">;</span>
            <span class="n">_catalogItemRepository</span> <span class="p">=</span> <span class="n">catalogItemRepository</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span> <span class="nf">Handle</span><span class="p">(</span><span class="n">DeleteCatalogItemCommand</span> <span class="n">notification</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">catalogItem</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_aggregateRepository</span><span class="p">.</span><span class="nf">RehydreateAsync</span><span class="p">(</span><span class="n">notification</span><span class="p">.</span><span class="n">Id</span><span class="p">,</span> <span class="n">cancellationToken</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">catalogItem</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">(</span><span class="s">"Invalid Catalog Item information"</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="n">catalogItem</span><span class="p">.</span><span class="nf">Delete</span><span class="p">(</span><span class="n">catalogItem</span><span class="p">.</span><span class="n">Id</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_aggregateRepository</span><span class="p">.</span><span class="nf">AppendAsync</span><span class="p">(</span><span class="n">catalogItem</span><span class="p">,</span> <span class="n">cancellationToken</span><span class="p">);</span>

            <span class="c1">// Save data into database</span>
            <span class="k">await</span> <span class="n">_catalogItemRepository</span><span class="p">.</span><span class="nf">UpdateAsync</span><span class="p">(</span><span class="n">catalogItem</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create GetCatalogItemLogByIdQuery and GetCatalogItemLogByIdQueryHandler class in Queries-&gt;CatalogItems folder</li>
</ul>

<p><strong>GetCatalogItemLogByIdQuery.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Application.Common.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Domain.Entities</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Application.Queries.CatalogItems</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">GetCatalogItemLogByIdQuery</span> <span class="p">:</span> <span class="n">IRequest</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">&gt;&gt;</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">GetCatalogItemLogByIdQuery</span><span class="p">(</span><span class="n">Guid</span> <span class="n">catalogItemId</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">CatalogItemId</span> <span class="p">=</span> <span class="n">catalogItemId</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">Guid</span> <span class="n">CatalogItemId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">class</span> <span class="nc">GetCatalogItemLogByIdQueryHandler</span> <span class="p">:</span> <span class="n">IRequestHandler</span><span class="p">&lt;</span><span class="n">GetCatalogItemLogByIdQuery</span><span class="p">,</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">&gt;&gt;</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IAggregateRepository</span><span class="p">&lt;</span><span class="n">CatalogItem</span><span class="p">,</span> <span class="n">Guid</span><span class="p">&gt;</span> <span class="n">_aggregateRepository</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">GetCatalogItemLogByIdQueryHandler</span><span class="p">(</span><span class="n">IAggregateRepository</span><span class="p">&lt;</span><span class="n">CatalogItem</span><span class="p">,</span> <span class="n">Guid</span><span class="p">&gt;</span> <span class="n">aggregateRepository</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_aggregateRepository</span> <span class="p">=</span> <span class="n">aggregateRepository</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">&gt;&gt;</span> <span class="nf">Handle</span><span class="p">(</span><span class="n">GetCatalogItemLogByIdQuery</span> <span class="n">request</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">data</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_aggregateRepository</span><span class="p">.</span><span class="nf">ReadEventsAsync</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">CatalogItemId</span><span class="p">,</span> <span class="n">cancellationToken</span><span class="p">);</span>
            <span class="k">return</span> <span class="n">data</span><span class="p">.</span><span class="n">Values</span><span class="p">.</span><span class="nf">ToList</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create service collection extension method in root directory.</li>
</ul>

<p><strong>DependencyInjection.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Extensions.DependencyInjection</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Reflection</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Application</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">DependencyInjection</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">static</span> <span class="n">IServiceCollection</span> <span class="nf">AddApplication</span><span class="p">(</span><span class="k">this</span> <span class="n">IServiceCollection</span> <span class="n">services</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">//Add MediatR to the Pipe line</span>
            <span class="n">services</span><span class="p">.</span><span class="nf">AddMediatR</span><span class="p">(</span><span class="n">Assembly</span><span class="p">.</span><span class="nf">GetExecutingAssembly</span><span class="p">());</span>
            <span class="k">return</span> <span class="n">services</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 6: Organize Infrastructure</strong></p>

<ul>
  <li>Add Domain and Application project as reference in the Infrastructure project.</li>
  <li>You may add in the project file as follows.</li>
</ul>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
  <span class="nt">&lt;ItemGroup&gt;</span>
    <span class="nt">&lt;ProjectReference</span> <span class="na">Include=</span><span class="s">"..\Application\Application.csproj"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;ProjectReference</span> <span class="na">Include=</span><span class="s">"..\Domain\Domain.csproj"</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;/ItemGroup&gt;</span>

</code></pre></div></div>

<ul>
  <li>Create ApplicationDbContext class in Persistance folder</li>
</ul>

<p><strong>ApplicationDbContext.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Domain.Entities</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Reflection</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Infrastructure.Persistance</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">ApplicationDbContext</span> <span class="p">:</span> <span class="n">DbContext</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">ApplicationDbContext</span><span class="p">(</span><span class="n">DbContextOptions</span><span class="p">&lt;</span><span class="n">ApplicationDbContext</span><span class="p">&gt;</span> <span class="n">options</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
        <span class="p">{</span>

        <span class="p">}</span>

        <span class="k">public</span> <span class="n">DbSet</span><span class="p">&lt;</span><span class="n">CatalogItem</span><span class="p">&gt;</span> <span class="n">CatalogItems</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">OnConfiguring</span><span class="p">(</span><span class="n">DbContextOptionsBuilder</span> <span class="n">optionsBuilder</span><span class="p">)</span>
        <span class="p">{</span>

        <span class="p">}</span>

        <span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">OnModelCreating</span><span class="p">(</span><span class="n">ModelBuilder</span> <span class="n">builder</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">base</span><span class="p">.</span><span class="nf">OnModelCreating</span><span class="p">(</span><span class="n">builder</span><span class="p">);</span>
            <span class="n">builder</span><span class="p">.</span><span class="nf">ApplyConfigurationsFromAssembly</span><span class="p">(</span><span class="n">Assembly</span><span class="p">.</span><span class="nf">GetExecutingAssembly</span><span class="p">());</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>


</code></pre></div></div>

<ul>
  <li>Create CatalogItemRepository class in Persistance folder for insert and update in the sql server.</li>
</ul>

<p><strong>CatalogItemRepository.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Application.Common.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Domain.Entities</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Infrastructure.Persistance</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CatalogItemRepository</span> <span class="p">:</span> <span class="n">ICatalogItemRepository</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">ApplicationDbContext</span> <span class="n">_context</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">CatalogItemRepository</span><span class="p">(</span><span class="n">ApplicationDbContext</span> <span class="n">applicationDbContext</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_context</span> <span class="p">=</span> <span class="n">applicationDbContext</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span> <span class="nf">AddAsync</span><span class="p">(</span><span class="n">CatalogItem</span> <span class="n">catalogItem</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">AddAsync</span><span class="p">(</span><span class="n">catalogItem</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span> <span class="nf">UpdateAsync</span><span class="p">(</span><span class="n">CatalogItem</span> <span class="n">catalogItem</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_context</span><span class="p">.</span><span class="nf">Entry</span><span class="p">(</span><span class="n">catalogItem</span><span class="p">).</span><span class="n">State</span> <span class="p">=</span> <span class="n">Microsoft</span><span class="p">.</span><span class="n">EntityFrameworkCore</span><span class="p">.</span><span class="n">EntityState</span><span class="p">.</span><span class="n">Modified</span><span class="p">;</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create AggregateRepository class in Persistance for inserting into event store db.</li>
</ul>

<p><strong>AggregateRepository.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Application.Common.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Application.Common.Resolvers</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Domain.Entities.Common</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">EventStore.Client</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Newtonsoft.Json</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Text</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Text.Json</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Text.Json.Serialization</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">JsonSerializer</span> <span class="p">=</span> <span class="n">System</span><span class="p">.</span><span class="n">Text</span><span class="p">.</span><span class="n">Json</span><span class="p">.</span><span class="n">JsonSerializer</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Infrastructure.Persistance</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">AggregateRepository</span><span class="p">&lt;</span><span class="n">TA</span><span class="p">,</span> <span class="n">TKey</span><span class="p">&gt;</span> <span class="p">:</span> <span class="n">IAggregateRepository</span><span class="p">&lt;</span><span class="n">TA</span><span class="p">,</span> <span class="n">TKey</span><span class="p">&gt;</span> <span class="k">where</span> <span class="n">TA</span> <span class="p">:</span> <span class="k">class</span><span class="err">,</span> <span class="nc">IAggregateRoot</span><span class="p">&lt;</span><span class="n">TKey</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">EventStoreClient</span> <span class="n">_eventStoreClient</span><span class="p">;</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="kt">string</span> <span class="n">_stramBaseName</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">AggregateRepository</span><span class="p">(</span><span class="n">EventStoreClient</span> <span class="n">eventStoreClient</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_eventStoreClient</span> <span class="p">=</span> <span class="n">eventStoreClient</span><span class="p">;</span>
            <span class="kt">var</span> <span class="n">aggregateType</span> <span class="p">=</span> <span class="k">typeof</span><span class="p">(</span><span class="n">TA</span><span class="p">);</span>
            <span class="n">_stramBaseName</span> <span class="p">=</span> <span class="n">aggregateType</span><span class="p">.</span><span class="n">Name</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span> <span class="nf">AppendAsync</span><span class="p">(</span><span class="n">TA</span> <span class="n">aggregate</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span> <span class="p">=</span> <span class="k">default</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="k">null</span> <span class="p">==</span> <span class="n">aggregate</span><span class="p">)</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentNullException</span><span class="p">(</span><span class="k">nameof</span><span class="p">(</span><span class="n">aggregate</span><span class="p">));</span>
            <span class="k">if</span> <span class="p">(!</span><span class="n">aggregate</span><span class="p">.</span><span class="n">Events</span><span class="p">.</span><span class="nf">Any</span><span class="p">())</span>
                <span class="k">return</span><span class="p">;</span>

            <span class="kt">var</span> <span class="n">streamName</span> <span class="p">=</span> <span class="nf">GetStreamName</span><span class="p">(</span><span class="n">aggregate</span><span class="p">.</span><span class="n">Id</span><span class="p">);</span>

            <span class="kt">var</span> <span class="n">eventList</span> <span class="p">=</span> <span class="n">aggregate</span><span class="p">.</span><span class="n">Events</span><span class="p">.</span><span class="nf">Select</span><span class="p">(</span><span class="n">Map</span><span class="p">).</span><span class="nf">ToArray</span><span class="p">();</span>

            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_eventStoreClient</span><span class="p">.</span><span class="nf">AppendToStreamAsync</span><span class="p">(</span><span class="n">streamName</span><span class="p">,</span> <span class="n">StreamState</span><span class="p">.</span><span class="n">Any</span><span class="p">,</span>
                <span class="n">eventList</span><span class="p">.</span><span class="nf">ToArray</span><span class="p">(),</span> <span class="n">cancellationToken</span><span class="p">:</span> <span class="n">cancellationToken</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">object</span><span class="p">&gt;&gt;</span> <span class="nf">ReadEventsAsync</span><span class="p">(</span><span class="n">TKey</span> <span class="n">aggregateId</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span> <span class="p">=</span> <span class="k">default</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">streamName</span> <span class="p">=</span> <span class="nf">GetStreamName</span><span class="p">(</span><span class="n">aggregateId</span><span class="p">);</span>
            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="n">_eventStoreClient</span><span class="p">.</span><span class="nf">ReadStreamAsync</span><span class="p">(</span><span class="n">Direction</span><span class="p">.</span><span class="n">Forwards</span><span class="p">,</span> <span class="n">streamName</span><span class="p">,</span> <span class="n">StreamPosition</span><span class="p">.</span><span class="n">Start</span><span class="p">);</span>

            <span class="kt">var</span> <span class="n">events</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">object</span><span class="p">&gt;();</span>
            <span class="kt">var</span> <span class="n">index</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>

            <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">data</span> <span class="k">in</span> <span class="k">await</span> <span class="n">result</span><span class="p">.</span><span class="nf">ToListAsync</span><span class="p">(</span><span class="n">cancellationToken</span><span class="p">:</span> <span class="n">cancellationToken</span><span class="p">))</span>
            <span class="p">{</span>
                <span class="c1">// Read event metadata to get type information of an event</span>
                <span class="kt">var</span> <span class="n">eventMetaData</span> <span class="p">=</span> <span class="n">JsonSerializer</span><span class="p">.</span><span class="n">Deserialize</span><span class="p">&lt;</span><span class="n">EventMeta</span><span class="p">&gt;(</span><span class="n">Encoding</span><span class="p">.</span><span class="n">UTF8</span><span class="p">.</span><span class="nf">GetString</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">Event</span><span class="p">.</span><span class="n">Metadata</span><span class="p">.</span><span class="nf">ToArray</span><span class="p">()));</span>
                <span class="n">Type</span><span class="p">?</span> <span class="n">typeInfo</span> <span class="p">=</span> <span class="n">Type</span><span class="p">.</span><span class="nf">GetType</span><span class="p">(</span><span class="n">eventMetaData</span><span class="p">.</span><span class="n">EventType</span><span class="p">);</span>
                <span class="k">if</span><span class="p">(</span><span class="n">typeInfo</span> <span class="k">is</span> <span class="k">null</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">(</span><span class="s">$"Invalid type </span><span class="p">{</span><span class="n">eventMetaData</span><span class="p">.</span><span class="n">EventType</span><span class="p">}</span><span class="s">"</span><span class="p">);</span>
                <span class="p">}</span>

                <span class="kt">var</span> <span class="n">jsonData</span> <span class="p">=</span> <span class="n">Encoding</span><span class="p">.</span><span class="n">UTF8</span><span class="p">.</span><span class="nf">GetString</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">Event</span><span class="p">.</span><span class="n">Data</span><span class="p">.</span><span class="nf">ToArray</span><span class="p">());</span>
                <span class="kt">var</span> <span class="n">eventInfo</span> <span class="p">=</span> <span class="n">JsonConvert</span><span class="p">.</span><span class="nf">DeserializeObject</span><span class="p">(</span><span class="n">jsonData</span><span class="p">,</span> <span class="n">typeInfo</span><span class="p">,</span> <span class="k">new</span> <span class="nf">JsonSerializerSettings</span><span class="p">()</span>
                <span class="p">{</span>
                    <span class="n">ConstructorHandling</span> <span class="p">=</span> <span class="n">ConstructorHandling</span><span class="p">.</span><span class="n">AllowNonPublicDefaultConstructor</span><span class="p">,</span>
                    <span class="n">ContractResolver</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">PrivateSetterContractResolver</span><span class="p">()</span>
                <span class="p">});</span>

                <span class="n">events</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">index</span><span class="p">,</span> <span class="k">new</span>
                <span class="p">{</span>
                    <span class="n">Events</span> <span class="p">=</span> <span class="n">eventInfo</span><span class="p">,</span>
                    <span class="n">EventType</span> <span class="p">=</span> <span class="n">data</span><span class="p">.</span><span class="n">OriginalEvent</span><span class="p">.</span><span class="n">EventType</span>
                <span class="p">});</span>

                <span class="n">index</span><span class="p">++;</span>

            <span class="p">}</span>

            <span class="k">return</span> <span class="n">events</span><span class="p">;</span>
        <span class="p">}</span>


        <span class="c1">/// &lt;summary&gt;</span>
        <span class="c1">/// Read all events using Aggregate ID</span>
        <span class="c1">/// &lt;/summary&gt;</span>
        <span class="c1">/// &lt;param name="aggregateId"&gt;&lt;/param&gt;</span>
        <span class="c1">/// &lt;param name="cancellationToken"&gt;&lt;/param&gt;</span>
        <span class="c1">/// &lt;returns&gt;&lt;/returns&gt;</span>
        <span class="c1">/// &lt;exception cref="NotImplementedException"&gt;&lt;/exception&gt;</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">TA</span><span class="p">?&gt;</span> <span class="nf">RehydreateAsync</span><span class="p">(</span><span class="n">TKey</span> <span class="n">key</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span> <span class="p">=</span> <span class="k">default</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">try</span>
            <span class="p">{</span>

                <span class="kt">var</span> <span class="n">streamName</span> <span class="p">=</span> <span class="nf">GetStreamName</span><span class="p">(</span><span class="n">key</span><span class="p">);</span>

                <span class="kt">var</span> <span class="n">events</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">IDomainEvent</span><span class="p">&lt;</span><span class="n">TKey</span><span class="p">&gt;&gt;();</span>

                <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="n">_eventStoreClient</span><span class="p">.</span><span class="nf">ReadStreamAsync</span><span class="p">(</span><span class="n">Direction</span><span class="p">.</span><span class="n">Forwards</span><span class="p">,</span> <span class="n">streamName</span><span class="p">,</span> <span class="n">StreamPosition</span><span class="p">.</span><span class="n">Start</span><span class="p">);</span>


                <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">data</span> <span class="k">in</span> <span class="k">await</span> <span class="n">result</span><span class="p">.</span><span class="nf">ToListAsync</span><span class="p">(</span><span class="n">cancellationToken</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="c1">//Read Event Metadata to get Type Information of an event</span>
                    <span class="kt">var</span> <span class="n">eventMetaData</span> <span class="p">=</span> <span class="n">JsonSerializer</span><span class="p">.</span><span class="n">Deserialize</span><span class="p">&lt;</span><span class="n">EventMeta</span><span class="p">&gt;</span>
                        <span class="p">(</span><span class="n">Encoding</span><span class="p">.</span><span class="n">UTF8</span><span class="p">.</span><span class="nf">GetString</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">Event</span><span class="p">.</span><span class="n">Metadata</span><span class="p">.</span><span class="nf">ToArray</span><span class="p">()));</span>

                    <span class="n">Type</span><span class="p">?</span> <span class="n">typeInfo</span> <span class="p">=</span> <span class="n">Type</span><span class="p">.</span><span class="nf">GetType</span><span class="p">(</span><span class="n">eventMetaData</span><span class="p">.</span><span class="n">EventType</span><span class="p">);</span>

                    <span class="k">if</span> <span class="p">(</span><span class="n">typeInfo</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
                    <span class="p">{</span>
                        <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">(</span><span class="s">$"Invalid type </span><span class="p">{</span><span class="n">eventMetaData</span><span class="p">.</span><span class="n">EventType</span><span class="p">}</span><span class="s">"</span><span class="p">);</span>
                    <span class="p">}</span>

                    <span class="kt">var</span> <span class="n">jsonData</span> <span class="p">=</span> <span class="n">Encoding</span><span class="p">.</span><span class="n">UTF8</span><span class="p">.</span><span class="nf">GetString</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">Event</span><span class="p">.</span><span class="n">Data</span><span class="p">.</span><span class="nf">ToArray</span><span class="p">());</span>
                    <span class="kt">var</span> <span class="n">eventInfo</span> <span class="p">=</span> <span class="n">JsonConvert</span><span class="p">.</span><span class="nf">DeserializeObject</span><span class="p">(</span><span class="n">jsonData</span><span class="p">,</span> <span class="n">typeInfo</span><span class="p">,</span> <span class="k">new</span> <span class="nf">JsonSerializerSettings</span><span class="p">()</span>
                    <span class="p">{</span>
                        <span class="n">ConstructorHandling</span> <span class="p">=</span> <span class="n">ConstructorHandling</span><span class="p">.</span><span class="n">AllowNonPublicDefaultConstructor</span><span class="p">,</span>
                        <span class="n">ContractResolver</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">PrivateSetterContractResolver</span><span class="p">()</span>
                    <span class="p">});</span>


                    <span class="n">events</span><span class="p">.</span><span class="nf">Add</span><span class="p">((</span><span class="n">IDomainEvent</span><span class="p">&lt;</span><span class="n">TKey</span><span class="p">&gt;)</span><span class="n">eventInfo</span><span class="p">);</span>
                <span class="p">}</span>

                <span class="k">if</span> <span class="p">(!</span><span class="n">events</span><span class="p">.</span><span class="nf">Any</span><span class="p">())</span>
                    <span class="k">return</span> <span class="k">null</span><span class="p">;</span>

                <span class="kt">var</span> <span class="n">aggregateResult</span> <span class="p">=</span> <span class="n">BaseAggregateRoot</span><span class="p">&lt;</span><span class="n">TA</span><span class="p">,</span> <span class="n">TKey</span><span class="p">&gt;.</span><span class="nf">Create</span><span class="p">(</span><span class="n">events</span><span class="p">.</span><span class="nf">OrderBy</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">AggregateVersion</span><span class="p">));</span>

                <span class="k">return</span> <span class="n">aggregateResult</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">e</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="n">e</span><span class="p">);</span>
                <span class="k">throw</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="c1">// Techical: Expression-bodied member</span>
        <span class="c1">// Generate stream name format</span>
        <span class="k">private</span> <span class="kt">string</span> <span class="nf">GetStreamName</span><span class="p">(</span><span class="n">TKey</span> <span class="n">aggregateKey</span><span class="p">)</span>
            <span class="p">=&gt;</span> <span class="s">$"</span><span class="p">{</span><span class="n">_stramBaseName</span><span class="p">}</span><span class="s">_</span><span class="p">{</span><span class="n">aggregateKey</span><span class="p">}</span><span class="s">"</span><span class="p">;</span>

        <span class="c1">// Map domain event to event data</span>
        <span class="k">private</span> <span class="k">static</span> <span class="n">EventData</span> <span class="nf">Map</span><span class="p">(</span><span class="n">IDomainEvent</span><span class="p">&lt;</span><span class="n">TKey</span><span class="p">&gt;</span> <span class="n">@event</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">meta</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">EventMeta</span><span class="p">()</span>
            <span class="p">{</span>
                <span class="n">EventType</span> <span class="p">=</span> <span class="n">@event</span><span class="p">.</span><span class="nf">GetType</span><span class="p">().</span><span class="n">AssemblyQualifiedName</span>
            <span class="p">};</span>

            <span class="kt">var</span> <span class="n">metaJson</span> <span class="p">=</span> <span class="n">System</span><span class="p">.</span><span class="n">Text</span><span class="p">.</span><span class="n">Json</span><span class="p">.</span><span class="n">JsonSerializer</span><span class="p">.</span><span class="nf">Serialize</span><span class="p">(</span><span class="n">meta</span><span class="p">);</span>
            <span class="kt">var</span> <span class="n">metadata</span> <span class="p">=</span> <span class="n">Encoding</span><span class="p">.</span><span class="n">UTF8</span><span class="p">.</span><span class="nf">GetBytes</span><span class="p">(</span><span class="n">metaJson</span><span class="p">);</span>

            <span class="kt">var</span> <span class="n">eventData</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">EventData</span><span class="p">(</span>
                <span class="n">Uuid</span><span class="p">.</span><span class="nf">NewUuid</span><span class="p">(),</span>
                <span class="n">@event</span><span class="p">.</span><span class="nf">GetType</span><span class="p">().</span><span class="n">Name</span><span class="p">,</span>
                <span class="n">JsonSerializer</span><span class="p">.</span><span class="nf">SerializeToUtf8Bytes</span><span class="p">(</span><span class="n">@event</span><span class="p">,</span> <span class="n">@event</span><span class="p">.</span><span class="nf">GetType</span><span class="p">(),</span> <span class="k">new</span> <span class="nf">JsonSerializerOptions</span><span class="p">()</span>
                <span class="p">{</span>
                    <span class="n">ReferenceHandler</span> <span class="p">=</span> <span class="n">ReferenceHandler</span><span class="p">.</span><span class="n">IgnoreCycles</span>
                <span class="p">}),</span>
                <span class="n">metadata</span>
                <span class="p">);</span>
            <span class="k">return</span> <span class="n">eventData</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">/// &lt;summary&gt;</span>
        <span class="c1">///  Meta data information for an event which will also saved into each Event Payload</span>
        <span class="c1">/// &lt;/summary&gt;</span>
        <span class="k">internal</span> <span class="k">struct</span> <span class="nc">EventMeta</span>
        <span class="p">{</span>
            <span class="k">public</span> <span class="kt">string</span> <span class="n">EventType</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Add service collection extension method in the root directory. Here sql server, event store db and dependency injection is configured.</li>
</ul>

<p><strong>DependencyInjection.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Application.Common.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Domain.Entities</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Domain.Entities.Common</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">EventStore.Client</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Infrastructure.Persistance</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Extensions.Configuration</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Extensions.DependencyInjection</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Infrastructure</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">DependencyInjection</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">static</span> <span class="n">IServiceCollection</span> <span class="nf">AddEventStore</span><span class="p">(</span><span class="k">this</span> <span class="n">IServiceCollection</span> <span class="n">services</span><span class="p">,</span> <span class="n">IConfiguration</span> <span class="n">configuration</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">// Event store database connection</span>
            <span class="kt">var</span> <span class="n">settings</span> <span class="p">=</span> <span class="n">EventStoreClientSettings</span>
                <span class="p">.</span><span class="nf">Create</span><span class="p">(</span><span class="s">"esdb://127.0.0.1:2113?tls=false&amp;keepAliveTimeout=10000&amp;keepAliveInterval=10000"</span><span class="p">);</span>

            <span class="kt">var</span> <span class="n">client</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">EventStoreClient</span><span class="p">(</span><span class="n">settings</span><span class="p">);</span>
            <span class="n">services</span><span class="p">.</span><span class="nf">AddSingleton</span><span class="p">(</span><span class="n">client</span><span class="p">);</span>

            <span class="c1">// Register DbContext for SQL Server</span>

            <span class="n">services</span><span class="p">.</span><span class="n">AddDbContext</span><span class="p">&lt;</span><span class="n">ApplicationDbContext</span><span class="p">&gt;(</span><span class="n">options</span> <span class="p">=&gt;</span>
            <span class="p">{</span>
                <span class="n">options</span><span class="p">.</span><span class="nf">UseSqlServer</span><span class="p">(</span>
                    <span class="n">configuration</span><span class="p">.</span><span class="nf">GetConnectionString</span><span class="p">(</span><span class="s">"DefaultConnection"</span><span class="p">),</span>
                    <span class="n">sqlServerOptionsAction</span><span class="p">:</span> <span class="n">sqlOptions</span> <span class="p">=&gt;</span>
                    <span class="p">{</span>
                    <span class="p">});</span>
            <span class="p">});</span>

            <span class="n">services</span><span class="p">.</span><span class="n">AddScoped</span><span class="p">&lt;</span><span class="n">ICatalogItemRepository</span><span class="p">,</span> <span class="n">CatalogItemRepository</span><span class="p">&gt;();</span>
            <span class="n">services</span><span class="p">.</span><span class="n">AddEventsRepository</span><span class="p">&lt;</span><span class="n">CatalogItem</span><span class="p">,</span> <span class="n">Guid</span><span class="p">&gt;();</span>

            <span class="k">return</span> <span class="n">services</span><span class="p">;</span>

        <span class="p">}</span>


        <span class="k">private</span> <span class="k">static</span> <span class="n">IServiceCollection</span> <span class="n">AddEventsRepository</span><span class="p">&lt;</span><span class="n">TA</span><span class="p">,</span> <span class="n">TK</span><span class="p">&gt;(</span><span class="k">this</span> <span class="n">IServiceCollection</span> <span class="n">services</span><span class="p">)</span>
    <span class="k">where</span> <span class="n">TA</span> <span class="p">:</span> <span class="k">class</span><span class="err">,</span> <span class="nc">IAggregateRoot</span><span class="p">&lt;</span><span class="n">TK</span><span class="p">&gt;</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">services</span><span class="p">.</span><span class="nf">AddSingleton</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">IAggregateRepository</span><span class="p">&lt;</span><span class="n">TA</span><span class="p">,</span> <span class="n">TK</span><span class="p">&gt;),</span> <span class="k">typeof</span><span class="p">(</span><span class="n">AggregateRepository</span><span class="p">&lt;</span><span class="n">TA</span><span class="p">,</span> <span class="n">TK</span><span class="p">&gt;));</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 7: Organize Catalog.API</strong></p>

<ul>
  <li>Add connection string in the appsettings.json file as follows.</li>
</ul>

<p><strong>appsettings.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">
</span><span class="p">{</span><span class="w">
  </span><span class="nl">"Logging"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"LogLevel"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Default"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Information"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Microsoft.AspNetCore"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Warning"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"AllowedHosts"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"ConnectionStrings"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"DefaultConnection"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Data Source=localhost;Initial Catalog=CatalogDB;Persist Security Info=False;User ID=sa; Password = yourpassword;Pooling=False;MultipleActiveResultSets=False;Encrypt=False;TrustServerCertificate=False"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<ul>
  <li>Add CatalogItemController class in Controllers folder as follows.</li>
</ul>

<p><strong>CatalogItemController.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Application.Commands.CatalogItems</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Application.Common.DTOs</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Application.Queries.CatalogItems</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Catalog.API.Controllers</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
    <span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CatalogItemController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
    <span class="p">{</span>

        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IMediator</span> <span class="n">_mediator</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">CatalogItemController</span><span class="p">(</span><span class="n">IMediator</span> <span class="n">mediator</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_mediator</span> <span class="p">=</span> <span class="n">mediator</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="p">[</span><span class="nf">HttpPost</span><span class="p">(</span><span class="s">"Create"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">CreateCatalogItemAsync</span><span class="p">([</span><span class="n">FromBody</span><span class="p">]</span> <span class="n">CreateCatalogItemDTO</span><span class="p">?</span> <span class="n">dto</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">dto</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>

            <span class="kt">var</span> <span class="n">command</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">CreateCatalogItemCommand</span><span class="p">(</span><span class="n">dto</span><span class="p">.</span><span class="n">Name</span><span class="p">,</span> <span class="n">dto</span><span class="p">.</span><span class="n">Description</span><span class="p">,</span> <span class="n">dto</span><span class="p">.</span><span class="n">Price</span><span class="p">,</span> <span class="n">dto</span><span class="p">.</span><span class="n">AvailableStock</span><span class="p">,</span> <span class="n">dto</span><span class="p">.</span><span class="n">RestockThreshold</span><span class="p">,</span>
                <span class="n">dto</span><span class="p">.</span><span class="n">MaxStockThreshold</span><span class="p">,</span> <span class="n">dto</span><span class="p">.</span><span class="n">OnReorder</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_mediator</span><span class="p">.</span><span class="nf">Publish</span><span class="p">(</span><span class="n">command</span><span class="p">);</span>

            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">command</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="p">[</span><span class="nf">HttpPatch</span><span class="p">(</span><span class="s">"update/{id:guid}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">UpdateCatalogItem</span><span class="p">(</span><span class="n">Guid</span> <span class="n">id</span><span class="p">,</span> <span class="p">[</span><span class="n">FromBody</span><span class="p">]</span> <span class="n">UpdateCatalogItemDTO</span><span class="p">?</span> <span class="n">dto</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">dto</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>

            <span class="kt">var</span> <span class="n">updateCommand</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">UpdateCatalogItemCommand</span><span class="p">(</span><span class="n">id</span><span class="p">,</span> <span class="n">dto</span><span class="p">.</span><span class="n">Name</span><span class="p">,</span> <span class="n">dto</span><span class="p">.</span><span class="n">Description</span><span class="p">,</span> <span class="n">dto</span><span class="p">.</span><span class="n">Price</span><span class="p">,</span> <span class="n">dto</span><span class="p">.</span><span class="n">AvailableStock</span><span class="p">,</span>
                <span class="n">dto</span><span class="p">.</span><span class="n">RestockThreshold</span><span class="p">,</span> <span class="n">dto</span><span class="p">.</span><span class="n">MaxStockThreshold</span><span class="p">,</span> <span class="n">dto</span><span class="p">.</span><span class="n">OnReorder</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_mediator</span><span class="p">.</span><span class="nf">Publish</span><span class="p">(</span><span class="n">updateCommand</span><span class="p">);</span>

            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">updateCommand</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">/// &lt;summary&gt;</span>
        <span class="c1">/// Delete a catalog item which is soft delete not hard delete</span>
        <span class="c1">/// &lt;/summary&gt;</span>
        <span class="c1">/// &lt;param name="id"&gt;&lt;/param&gt;</span>
        <span class="c1">/// &lt;returns&gt;&lt;/returns&gt;</span>
        <span class="p">[</span><span class="nf">HttpDelete</span><span class="p">(</span><span class="s">"delete/{id:guid}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">DeleteCatalogItem</span><span class="p">(</span><span class="n">Guid</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">deleteCatalogCommand</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">DeleteCatalogItemCommand</span><span class="p">(</span><span class="n">id</span><span class="p">);</span> 
            <span class="k">await</span> <span class="n">_mediator</span><span class="p">.</span><span class="nf">Publish</span><span class="p">(</span><span class="n">deleteCatalogCommand</span><span class="p">);</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"log/{id:guid}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">GetLog</span><span class="p">(</span><span class="n">Guid</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="k">await</span> <span class="n">_mediator</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="k">new</span> <span class="nf">GetCatalogItemLogByIdQuery</span><span class="p">(</span><span class="n">id</span><span class="p">)));</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Modify Program.cs as follows.</li>
</ul>

<p><strong>Program.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Application</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Infrastructure</span><span class="p">;</span>

<span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="n">WebApplication</span><span class="p">.</span><span class="nf">CreateBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>

<span class="c1">// Add services to the container.</span>

<span class="kt">var</span> <span class="n">environment</span> <span class="p">=</span> <span class="n">Environment</span><span class="p">.</span><span class="nf">GetEnvironmentVariable</span><span class="p">(</span><span class="s">"ASPNETCORE_ENVIRONMENT"</span><span class="p">);</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Configuration</span><span class="p">.</span><span class="nf">SetBasePath</span><span class="p">(</span><span class="n">Directory</span><span class="p">.</span><span class="nf">GetCurrentDirectory</span><span class="p">())</span>
    <span class="p">.</span><span class="nf">AddJsonFile</span><span class="p">(</span><span class="s">"appsettings.json"</span><span class="p">,</span> <span class="n">optional</span><span class="p">:</span> <span class="k">false</span><span class="p">,</span> <span class="n">reloadOnChange</span><span class="p">:</span> <span class="k">true</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">AddJsonFile</span><span class="p">(</span><span class="s">$"appsettings.</span><span class="p">{</span><span class="n">environment</span><span class="p">}</span><span class="s">.json"</span><span class="p">,</span> <span class="n">optional</span><span class="p">:</span> <span class="k">true</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">AddEnvironmentVariables</span><span class="p">();</span>

<span class="c1">//Register Application layer and Event Store layer from Infrastructure here</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddApplication</span><span class="p">().</span><span class="nf">AddEventStore</span><span class="p">(</span><span class="n">builder</span><span class="p">.</span><span class="n">Configuration</span><span class="p">);</span>



<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">();</span>
<span class="c1">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddEndpointsApiExplorer</span><span class="p">();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddSwaggerGen</span><span class="p">();</span>

<span class="kt">var</span> <span class="n">app</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

<span class="c1">// Configure the HTTP request pipeline.</span>
<span class="k">if</span> <span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">Environment</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
<span class="p">{</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwagger</span><span class="p">();</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwaggerUI</span><span class="p">();</span>
<span class="p">}</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseHttpsRedirection</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseAuthorization</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">MapControllers</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>

</code></pre></div></div>

<p><strong>Step 8: Add Migration</strong></p>

<ul>
  <li>Set Catalog.API as startup project and go to package manager console.</li>
  <li>Select Infrastructure as Default project and run the following commands.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Add-Migration</span> <span class="nf">init-mig</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Update-Database</span> <span class="nf">-Verbose</span>
</code></pre></div></div>

<p><strong>Step 9: Run application and perform CRUD operation using swagger.  See the impact in sql server and EventStoreDB as follows.</strong></p>

<p>Swagger UI: Create, update and delete CatalogItem using SwaggerUI</p>

<p><img src="/assets/images/posts/2022/es-01.png" alt="" /></p>

<p>EventStoreDB UI: Browse event store db to see the impact</p>

<p><img src="/assets/images/posts/2022/es-02.png" alt="" /></p>

<p><strong><a href="https://github.com/mahedee/code-sample02/tree/main/eventsourcing">Source code</a></strong></p>]]></content><author><name>Mahedee Hasan</name></author><category term="C#" /><category term="ASP.NET Core" /><category term="DDD" /><category term="EventStoreDB" /><category term="Microservices" /><category term="Software Architecture" /><category term="csharp" /><category term="aspnetcore" /><category term="ddd" /><category term="eventstoredb" /><category term="microservices" /><category term="softwarearchitecture" /><summary type="html"><![CDATA[Event sourcing is a most important pattern to design a microservice based application. If you are working with multiple services in a microservice based application, you have to use event driven architecture. In this article I will discuss and apply event sourcing using asp.net core, DDD and EventStoreDB.]]></summary></entry><entry><title type="html">How to create .Net custom template using GitHub Packages Registry</title><link href="https://mahedee.net//How-to-create-Net-custom-template-using-GitHub-Packages-Registry/" rel="alternate" type="text/html" title="How to create .Net custom template using GitHub Packages Registry" /><published>2022-11-14T00:00:00+00:00</published><updated>2022-11-14T00:00:00+00:00</updated><id>https://mahedee.net//How-to-create-Net-custom-template-using-GitHub-Packages-Registry</id><content type="html" xml:base="https://mahedee.net//How-to-create-Net-custom-template-using-GitHub-Packages-Registry/"><![CDATA[<p><strong>Introduction</strong></p>

<p>.NET gives us opportunity to create custom template for future use and GitHub packages registry is most popular now a days to host custom template. In this article, I will show you how to create .net custom template using GitHub packages registry.</p>

<p><strong>Tools and Technology uses</strong></p>
<ul>
  <li>Visual Studio 2022</li>
  <li>.NET 6</li>
  <li>Visual C#</li>
  <li>GitHub</li>
</ul>

<p><strong>Implementation</strong></p>

<p><strong>Step 1: Create a personal access token (PAT) from GitHub</strong></p>

<ul>
  <li>Login into you GitHub</li>
  <li>Go to settings -&gt; Developer Settings -&gt; Personal Access Tokens</li>
  <li>Click “Generate new token” button</li>
  <li>Type Note for the token, expiration days</li>
  <li>Select scope for the token – here I have selected repo, write:packages, delete:packages as shown below.</li>
</ul>

<p><img src="/assets/images/posts/2022/temp-01.png" alt="" /></p>

<ul>
  <li>Now click “Generate Token” at the bottom of the panel</li>
  <li>Copy the token and store the token for further use because you cannot find it later</li>
</ul>

<p><img src="/assets/images/posts/2022/temp-02.png" alt="" /></p>

<p><strong>Step – 2: Add Nuget Source in visual studio</strong></p>

<ul>
  <li>Type the following command to add source</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">dotnet</span> <span class="nf">nuget</span> <span class="nb">add</span> <span class="nf">source</span> <span class="nf">https:</span><span class="err">/</span><span class="nv">/nuget.pkg.github.com/mahedee/index.json</span> <span class="nf">--name</span> <span class="nf">github-mahedee</span> <span class="nf">--username</span> <span class="nf">mahedee</span> <span class="nf">--password</span> <span class="p">&lt;</span><span class="nf">Your</span> <span class="nf">personal</span> <span class="nf">Access</span> <span class="nf">Token</span><span class="p">&gt;</span>
</code></pre></div></div>

<ul>
  <li>
    <p>You will see a source is added in C:\Users\mahedee\AppData\Roaming\NuGet\NuGet.Config file</p>
  </li>
  <li>You can add source from visual studio Tools -&gt; Options -&gt; NuGet Package Manager -&gt; Package Sources</li>
  <li>Restart visual studio to get new nuget package source</li>
</ul>

<p><strong>Step – 3: Create template for your application</strong></p>
<ul>
  <li>Create a project or multiple projects using a solution file.</li>
  <li>Here, I have created a clean architecture template with a solution file and  multiple projects</li>
  <li>Create a folder name – “.template.config” in the root directory of your application.</li>
</ul>

<p><img src="/assets/images/posts/2022/temp-03.png" alt="" /></p>

<ul>
  <li>Create a file template.json in .template.config folder.</li>
  <li>Add the following content to template.json file</li>
</ul>

<p><strong>template.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">
</span><span class="p">{</span><span class="w">
  </span><span class="nl">"$schema"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://json.schemastore.org/template"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"author"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Mahedee Hasan"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"classifications"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="s2">"dotnet"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"CleanArchitecture"</span><span class="w">
  </span><span class="p">],</span><span class="w">
  </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Clean Architecture project template"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Project template to create project using Clean Architecture"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"identity"</span><span class="p">:</span><span class="w"> </span><span class="s2">"CleanArchitecture"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"shortName"</span><span class="p">:</span><span class="w"> </span><span class="s2">"CleanArchitecture"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"sourceName"</span><span class="p">:</span><span class="w"> </span><span class="s2">"CleanArch"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"tags"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"language"</span><span class="p">:</span><span class="w"> </span><span class="s2">"C#"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"project"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"symbols"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"Framework"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"parameter"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"The target framework for the project."</span><span class="p">,</span><span class="w">
      </span><span class="nl">"datatype"</span><span class="p">:</span><span class="w"> </span><span class="s2">"choice"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"choices"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"choice"</span><span class="p">:</span><span class="w"> </span><span class="s2">"net6.0"</span><span class="w">
        </span><span class="p">},</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"choice"</span><span class="p">:</span><span class="w"> </span><span class="s2">"net5.0"</span><span class="w">
      </span><span class="p">}</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"defaultValue"</span><span class="p">:</span><span class="w"> </span><span class="s2">"net6.0"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"replaces"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{TargetFramework}"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<p><strong>Step -4: Install and create template locally (Optional)</strong></p>

<ul>
  <li>Go to one where “.template.config” folder exists.</li>
  <li>Now run the following command. Don’t forgot to add space “.” at the end.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">dotnet</span> <span class="nf">new</span> <span class="nf">--install</span> <span class="nf">.</span>
</code></pre></div></div>

<ul>
  <li>You will see in the output that template is created. You will see Short Name of template which is used to install template.</li>
  <li>Now go to the directory where you want to install template and type the following command.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">dotnet</span> <span class="nf">new</span> <span class="nf">CleanArchitecture</span>
<span class="nf">or,</span>
<span class="nf">dotnet</span> <span class="nf">new</span> <span class="nf">CleanArchitecture</span> <span class="nf">--force</span>
</code></pre></div></div>

<p>Here CleanArchitecture is short name of the template</p>

<ul>
  <li>To create template by another name type as follows.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">dotnet</span> <span class="nf">new</span> <span class="nf">CleanArchitecture</span> <span class="nf">-o</span> <span class="nf">Location</span>
</code></pre></div></div>

<p>Now projects name will be Location instead of CleanArch as mentioned in the previous json file.</p>

<ul>
  <li>Now go to the same directory to uninstall the template and type the following command.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">dotnet</span> <span class="nf">new</span> <span class="nf">--uninstall</span> <span class="nf">.</span>
</code></pre></div></div>

<p><strong>Step - 5: Packing a template into a NuGet Package (nupkg file)</strong></p>

<ul>
  <li>Create a .csproj file one directory up of “.template.config” folder.</li>
  <li>
    <p>In my case the folder structure as follows</p>

    <p><img src="/assets/images/posts/2022/temp-04.png" alt="" /></p>
  </li>
</ul>

<p><strong>Add the following content in TemplatePack.csproj project.</strong></p>

<p><strong>TemplatePack.csproj</strong></p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nt">&lt;Project</span> <span class="na">Sdk=</span><span class="s">"Microsoft.NET.Sdk"</span><span class="nt">&gt;</span> 

  <span class="nt">&lt;PropertyGroup&gt;</span> 

    <span class="nt">&lt;PackageType&gt;</span>Template<span class="nt">&lt;/PackageType&gt;</span> 

    <span class="nt">&lt;PackageVersion&gt;</span>1.0.0<span class="nt">&lt;/PackageVersion&gt;</span> 

    <span class="nt">&lt;PackageId&gt;</span>Mahedee.CleanArchitecture.Templates<span class="nt">&lt;/PackageId&gt;</span> 

    <span class="nt">&lt;Title&gt;</span>Clean Architecture Template<span class="nt">&lt;/Title&gt;</span> 

    <span class="nt">&lt;Authors&gt;</span>Mahedee Hasan<span class="nt">&lt;/Authors&gt;</span> 

    <span class="nt">&lt;Description&gt;</span>Clean Architecture Template<span class="nt">&lt;/Description&gt;</span> 

    <span class="nt">&lt;PackageTags&gt;</span>dotnet-new;templates;clean-architecture<span class="nt">&lt;/PackageTags&gt;</span> 

    <span class="nt">&lt;TargetFramework&gt;</span>netstandard2.0<span class="nt">&lt;/TargetFramework&gt;</span> 

    <span class="nt">&lt;IncludeContentInPack&gt;</span>true<span class="nt">&lt;/IncludeContentInPack&gt;</span> 

    <span class="nt">&lt;IncludeBuildOutput&gt;</span>false<span class="nt">&lt;/IncludeBuildOutput&gt;</span> 

    <span class="nt">&lt;ContentTargetFolders&gt;</span>content<span class="nt">&lt;/ContentTargetFolders&gt;</span> 

    <span class="nt">&lt;NoWarn&gt;</span>$(NoWarn);NU5128<span class="nt">&lt;/NoWarn&gt;</span> 

    <span class="nt">&lt;NoDefaultExcludes&gt;</span>true<span class="nt">&lt;/NoDefaultExcludes&gt;</span> 
    <span class="nt">&lt;RepositoryUrl&gt;</span>https://github.com/mahedee/public-packages<span class="nt">&lt;/RepositoryUrl&gt;</span>

  <span class="nt">&lt;/PropertyGroup&gt;</span> 

  <span class="nt">&lt;ItemGroup&gt;</span> 
    <span class="nt">&lt;Content</span> <span class="na">Include=</span><span class="s">"CleanArchitecture\**\*"</span> <span class="na">Exclude=</span><span class="s">"CleanArchitecture\**\bin\**;CleanArchitecture\**\obj\**"</span> <span class="nt">/&gt;</span> 
    <span class="nt">&lt;Compile</span> <span class="na">Remove=</span><span class="s">"..\**\*"</span> <span class="nt">/&gt;</span> 

  <span class="nt">&lt;/ItemGroup&gt;</span> 

 

<span class="nt">&lt;/Project&gt;</span> 

</code></pre></div></div>

<ul>
  <li>To create package go to the directory where TemplatePack.csproj file exists and type the following command.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">dotnet</span> <span class="nf">pack</span>
</code></pre></div></div>

<ul>
  <li>You will Mahedee.CleanArchitecture.Templates.1.0.0.nupkg file is created in bin/Debug folder.</li>
</ul>

<p><strong>Step 6: Now push the package to github package registry</strong></p>
<ul>
  <li>Go to the directory where Mahedee.CleanArchitecture.Templates.1.0.0.nupkg is exists.</li>
  <li>Type the following command to push the package in github package registry</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">dotnet</span> <span class="nf">nuget</span> <span class="nf">push</span> <span class="nf">.\Mahedee.CleanArchitecture.Templates.1.0.0.nupkg</span> <span class="nf">--api-key</span> <span class="p">&lt;</span><span class="nf">Your</span> <span class="nf">personal</span> <span class="nf">access</span> <span class="nf">token</span><span class="p">&gt;</span> <span class="nf">--source</span> <span class="nf">github-mahedee</span>
</code></pre></div></div>

<ul>
  <li>Here, “github-mahedee” is a github source which we have added in step – 2.</li>
  <li>Now login your github and you will see a template is uploaded to your package registry.</li>
</ul>

<p><strong>Step 7: Download template and install in local machine</strong></p>

<ul>
  <li>Run the following command to install in local machine</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">dotnet</span> <span class="nf">new</span> <span class="nf">--install</span>  <span class="nf">Mahedee.CleanArchitecture.Templates</span>
</code></pre></div></div>
<p>Mahedee.CleanArchitecture.Templates is package Id.</p>

<p><strong>output:</strong></p>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">The</span> <span class="nf">following</span> <span class="nf">template</span> <span class="nf">packages</span> <span class="nf">will</span> <span class="nf">be</span> <span class="nf">installed:</span>
   <span class="nf">Mahedee.CleanArchitecture.Templates</span>

<span class="nf">Success:</span> <span class="nf">Mahedee.CleanArchitecture.Templates::1.0.0</span> <span class="nf">installed</span> <span class="nf">the</span> <span class="nf">following</span> <span class="nf">templates:</span>
<span class="nf">Template</span> <span class="nf">Name</span>                        <span class="nf">Short</span> <span class="nf">Name</span>         <span class="nf">Language</span>  <span class="nf">Tags</span>
<span class="nf">-----------------------------------</span>  <span class="nf">-----------------</span>  <span class="nf">--------</span>  <span class="nf">------------------------</span>
<span class="nf">Clean</span> <span class="nf">Architecture</span> <span class="nf">project</span> <span class="nf">template</span>  <span class="nf">CleanArchitecture</span>  <span class="p">[</span><span class="nf">C#</span><span class="p">]</span>      <span class="nf">dotnet</span><span class="nv">/CleanArchitecture</span>

</code></pre></div></div>

<ul>
  <li>Now go to the directory where you want to regenerate the template and type the following command.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">dotnet</span> <span class="nf">new</span> <span class="nf">CleanArchitecture</span>
</code></pre></div></div>

<p>Here CleanArchitecture is the short name of the template</p>

<p><strong>Note</strong></p>
<ul>
  <li>To see installed template in locally use the following command. You will also see how to uninstall the particular template.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">dotnet</span> <span class="nf">new</span> <span class="nf">--uninstall</span>
</code></pre></div></div>

<ul>
  <li>To uninstall a particular template from local machine, use the following command.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">dotnet</span> <span class="nf">new</span> <span class="nf">--uninstall</span> <span class="nf">Mahedee.CleanArchitecture.Templates</span>
<span class="nf">dotnet</span> <span class="nf">new</span> <span class="nf">–uninstall</span> <span class="p">&lt;</span><span class="nf">package</span> <span class="nf">id</span><span class="p">&gt;</span> 
</code></pre></div></div>

<p><strong><a href="https://github.com/mahedee/code-sample02/tree/main/CleanArchitectureTemplate">Source code</a></strong></p>]]></content><author><name>Mahedee Hasan</name></author><category term="C#" /><category term="ASP.NET Core" /><category term="GitHub" /><category term="NuGet" /><category term="Packages" /><category term="csharp" /><category term="aspnetcore" /><category term="github" /><category term="nuget" /><category term="packages" /><summary type="html"><![CDATA[.NET gives us opportunity to create custom template for future use and GitHub packages registry is most popular now a days to host custom template. In this article, I will show you how to create .net custom template using GitHub packages registry]]></summary></entry><entry><title type="html">How to handle Idempotentcy in distributed system using asp.net core</title><link href="https://mahedee.net//How-to-handle-Idempotentcy-in-distributed-system-using-aspnet-core/" rel="alternate" type="text/html" title="How to handle Idempotentcy in distributed system using asp.net core" /><published>2022-08-10T00:00:00+00:00</published><updated>2022-08-10T00:00:00+00:00</updated><id>https://mahedee.net//How-to-handle-Idempotentcy-in-distributed-system-using-aspnet-core</id><content type="html" xml:base="https://mahedee.net//How-to-handle-Idempotentcy-in-distributed-system-using-aspnet-core/"><![CDATA[<p><strong>Introduction</strong></p>

<p>In a distributed application, idempotent operation or idempotency refers to the property of an operation such that multiple identical requests have the same effect as a single request. This is useful in situations where a request may be lost or a response may be delayed, as it allows the client to retry the request without worrying about producing unintended side effects.</p>

<p>For example, consider a distributed system that allows users to transfer money between accounts. If a client sends a request to transfer $100 from account A to account B, but the request is lost before it is received by the server, the client may not know whether the transfer was successful or not. If the transfer operation is idempotent, the client can simply retry the request, and the server will ensure that the transfer is performed only once, regardless of the number of times the request is received.</p>

<p>There are several approaches to solving idempotency in distributed systems:</p>

<p><strong>1. Versioning:</strong> As mentioned earlier, versioning is a technique where the server stores a version number for each resource and only performs an operation if the version number has not changed since the client’s last request. This allows the server to detect and ignore duplicate requests.</p>

<p><strong>2. Request IDs:</strong>   Another approach is to assign a unique request ID to each request and store a record of all request IDs that have been processed by the server. If the server receives a request with a request ID that it has already processed, it can simply ignore the request.</p>

<p><strong>3. Locking:</strong>   In some cases, it may be necessary to use locks to ensure that only one instance of an operation is in progress at a time. For example, a distributed lock could be used to prevent multiple clients from concurrently transferring money from the same account.</p>

<p><strong>4. State reconciliation:</strong>   In a distributed system, it is possible for the state of a resource to become inconsistent due to lost or delayed requests. One way to solve this problem is to use state reconciliation, where the server periodically checks the state of all resources and reconciles any inconsistencies.</p>

<p>In this article I will show you how to handle idempotent operation using asp.net core. Here, I have created a request Id (idempotencyKey here) and check whether it is already exists within a time period.</p>

<p><strong>Implementation:</strong><br />
Let’s implement idempotency using asp.net core.</p>

<p><strong>Tools and Technologies used:</strong></p>
<ul>
  <li>Visual Studio 2022</li>
  <li>Visual C#</li>
  <li>SQL Server</li>
  <li>Redis</li>
  <li>.NET 6.0</li>
  <li>ASP.NET Core Web API</li>
</ul>

<p><strong>Step 1: Setup and run Redis in docker container.</strong></p>

<ul>
  <li>Run Redis docker image using the following command.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">docker</span> <span class="nb">run</span> <span class="nf">-d</span> <span class="nf">-p</span> <span class="nf">6379:6379</span> <span class="nf">--name</span> <span class="nf">myredis</span> <span class="nf">--network</span> <span class="nf">redisnet</span> <span class="nf">redis</span>
</code></pre></div></div>

<ul>
  <li>You can use Redis desktop manager as client of Redis</li>
</ul>

<p><strong>Step 2: Create solution and project</strong></p>

<ul>
  <li>Create a solution name IdempotentDemo using visual studio</li>
  <li>Create a new web api project name Accounting.API</li>
</ul>

<p><strong>Step 3: Install nuget packages</strong></p>

<ul>
  <li>Install following nuget packages in Accounting.API</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore.SqlServer</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore.Tools</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.Extensions.Caching.StackExchangeRedis</span>
</code></pre></div></div>

<p><strong>Step 4: Add connection string for SQL server and Redis</strong></p>

<ul>
  <li>Modify appsettings.json as follows</li>
</ul>

<p><strong>appsettings.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"Logging"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"LogLevel"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Default"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Information"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Microsoft.AspNetCore"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Warning"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"AllowedHosts"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"ConnectionStrings"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"AccountingDBConnection"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Server=localhost;Database=AccountingDB;User Id=sa;Password=yourdbserverpassword;"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="err">//Redis</span><span class="w"> </span><span class="err">Server</span><span class="w">
  </span><span class="nl">"Redis"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"Server"</span><span class="p">:</span><span class="w"> </span><span class="s2">"localhost:6379"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<p><strong>Step 5: Create model TransactionDetails class in Models folder</strong></p>

<p><strong>TransactionDetails.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">namespace</span> <span class="nn">Accounting.API.Models</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">TransactionDetails</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="n">Int64</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">// Master transaction Id</span>
        <span class="k">public</span> <span class="n">Int64</span> <span class="n">TransactionId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        
        <span class="c1">// Id against GL Code</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">AccountId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span> 

        <span class="k">public</span> <span class="kt">decimal</span> <span class="n">DrAmount</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">decimal</span> <span class="n">CrAmount</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">// Cash = 1, Cheque = 2</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">TransactionType</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">// Any note</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Description</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 6: Create DbContext class in Db folder as follows.</strong></p>

<p><strong>AccountingContext.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Accounting.API.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Accounting.API.Db</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">AccountingContext</span> <span class="p">:</span> <span class="n">DbContext</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">AccountingContext</span><span class="p">(</span><span class="n">DbContextOptions</span><span class="p">&lt;</span><span class="n">AccountingContext</span><span class="p">&gt;</span> <span class="n">options</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
        <span class="p">{</span>

        <span class="p">}</span>

        <span class="k">public</span> <span class="n">DbSet</span><span class="p">&lt;</span><span class="n">TransactionDetails</span><span class="p">&gt;</span> <span class="n">TransactionDetails</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 7: Register Redis Caching server and SQL server in Program.cs file as follows.</strong></p>

<p><strong>Program.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Accounting.API.Db</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="n">WebApplication</span><span class="p">.</span><span class="nf">CreateBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>

<span class="c1">// Add services to the container.</span>

<span class="c1">// Configuration for SQL Server connection</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddDbContext</span><span class="p">&lt;</span><span class="n">AccountingContext</span><span class="p">&gt;(</span><span class="n">options</span> <span class="p">=&gt;</span>
<span class="p">{</span>
    <span class="n">options</span><span class="p">.</span><span class="nf">UseSqlServer</span><span class="p">(</span><span class="n">builder</span><span class="p">.</span><span class="n">Configuration</span><span class="p">.</span><span class="nf">GetConnectionString</span><span class="p">(</span><span class="s">"AccountingDBConnection"</span><span class="p">));</span>
<span class="p">});</span>


<span class="c1">// Register Redis caching server</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddStackExchangeRedisCache</span><span class="p">(</span><span class="n">options</span> <span class="p">=&gt;</span>
<span class="p">{</span>
    <span class="n">options</span><span class="p">.</span><span class="n">Configuration</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="n">Configuration</span><span class="p">[</span><span class="s">"Redis:Server"</span><span class="p">];</span>
<span class="p">});</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">();</span>
<span class="c1">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddEndpointsApiExplorer</span><span class="p">();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddSwaggerGen</span><span class="p">();</span>

<span class="kt">var</span> <span class="n">app</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

<span class="c1">// Configure the HTTP request pipeline.</span>
<span class="k">if</span> <span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">Environment</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
<span class="p">{</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwagger</span><span class="p">();</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwaggerUI</span><span class="p">();</span>
<span class="p">}</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseHttpsRedirection</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseAuthorization</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">MapControllers</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>

</code></pre></div></div>

<p><strong>Step 8: Add Migration</strong></p>
<ul>
  <li>Got to package manager console and run the following command</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Add-Migration</span> <span class="nf">init-mig</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Update-Database</span> <span class="nf">-Verbose</span>
</code></pre></div></div>

<p><strong>Step 9: Create Hashgenerator class in Utility folder to create hash.</strong></p>

<p><strong>HashGenerator.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System.Security.Cryptography</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Text</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Accounting.API.Utility</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">HashGenerator</span>
    <span class="p">{</span>

        <span class="k">public</span> <span class="k">static</span> <span class="kt">string</span> <span class="nf">GetHash</span><span class="p">(</span><span class="kt">string</span> <span class="n">plainText</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">string</span> <span class="n">hashText</span> <span class="p">=</span> <span class="kt">string</span><span class="p">.</span><span class="n">Empty</span><span class="p">;</span>
            <span class="n">hashText</span> <span class="p">=</span> <span class="nf">ComputeSha256Hash</span><span class="p">(</span><span class="n">plainText</span><span class="p">);</span>
            <span class="k">return</span> <span class="n">hashText</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">static</span> <span class="kt">string</span> <span class="nf">ComputeSha256Hash</span><span class="p">(</span><span class="kt">string</span> <span class="n">rawData</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">// Create a SHA256   </span>
            <span class="k">using</span> <span class="p">(</span><span class="n">SHA256</span> <span class="n">sha256Hash</span> <span class="p">=</span> <span class="n">SHA256</span><span class="p">.</span><span class="nf">Create</span><span class="p">())</span>
            <span class="p">{</span>
                <span class="c1">// ComputeHash - returns byte array  </span>
                <span class="kt">byte</span><span class="p">[]</span> <span class="n">bytes</span> <span class="p">=</span> <span class="n">sha256Hash</span><span class="p">.</span><span class="nf">ComputeHash</span><span class="p">(</span><span class="n">Encoding</span><span class="p">.</span><span class="n">UTF8</span><span class="p">.</span><span class="nf">GetBytes</span><span class="p">(</span><span class="n">rawData</span><span class="p">));</span>

                <span class="c1">// Convert byte array to a string   </span>
                <span class="n">StringBuilder</span> <span class="n">builder</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">StringBuilder</span><span class="p">();</span>
                <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">bytes</span><span class="p">.</span><span class="n">Length</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span>
                <span class="p">{</span>
                    <span class="n">builder</span><span class="p">.</span><span class="nf">Append</span><span class="p">(</span><span class="n">bytes</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="nf">ToString</span><span class="p">(</span><span class="s">"x2"</span><span class="p">));</span>
                <span class="p">}</span>
                <span class="k">return</span> <span class="n">builder</span><span class="p">.</span><span class="nf">ToString</span><span class="p">();</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 10: Create TransactionDetailsController  controller class in Controllers folder as follows.</strong></p>

<p><strong>TransactionDetailsController.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Accounting.API.Db</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Accounting.API.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Accounting.API.Utility</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Extensions.Caching.Distributed</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Newtonsoft.Json</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Text</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Accounting.API.Controllers</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
    <span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">TransactionDetailsController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">AccountingContext</span> <span class="n">_context</span><span class="p">;</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IDistributedCache</span> <span class="n">_distributedCache</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">TransactionDetailsController</span><span class="p">(</span><span class="n">AccountingContext</span> <span class="n">context</span><span class="p">,</span> <span class="n">IDistributedCache</span> <span class="n">distributedCache</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_context</span> <span class="p">=</span> <span class="n">context</span><span class="p">;</span>
            <span class="n">_distributedCache</span> <span class="p">=</span> <span class="n">distributedCache</span><span class="p">;</span>

        <span class="p">}</span>

        <span class="c1">// GET: api/TransactionDetails</span>
        <span class="p">[</span><span class="n">HttpGet</span><span class="p">]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">TransactionDetails</span><span class="p">&gt;&gt;&gt;</span> <span class="nf">GetTransactionDetails</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">TransactionDetails</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">TransactionDetails</span><span class="p">.</span><span class="nf">ToListAsync</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/TransactionDetails/5</span>
        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">TransactionDetails</span><span class="p">&gt;&gt;</span> <span class="nf">GetTransactionDetails</span><span class="p">(</span><span class="kt">long</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">TransactionDetails</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="kt">var</span> <span class="n">transactionDetails</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">TransactionDetails</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">transactionDetails</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="n">transactionDetails</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// PUT: api/TransactionDetails/5</span>
        <span class="c1">// To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754</span>
        <span class="p">[</span><span class="nf">HttpPut</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">PutTransactionDetails</span><span class="p">(</span><span class="kt">long</span> <span class="n">id</span><span class="p">,</span> <span class="n">TransactionDetails</span> <span class="n">transactionDetails</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">id</span> <span class="p">!=</span> <span class="n">transactionDetails</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">_context</span><span class="p">.</span><span class="nf">Entry</span><span class="p">(</span><span class="n">transactionDetails</span><span class="p">).</span><span class="n">State</span> <span class="p">=</span> <span class="n">EntityState</span><span class="p">.</span><span class="n">Modified</span><span class="p">;</span>

            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">DbUpdateConcurrencyException</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(!</span><span class="nf">TransactionDetailsExists</span><span class="p">(</span><span class="n">id</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
                <span class="p">}</span>
                <span class="k">else</span>
                <span class="p">{</span>
                    <span class="k">throw</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// POST: api/TransactionDetails</span>
        <span class="c1">// To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754</span>
        <span class="p">[</span><span class="n">HttpPost</span><span class="p">]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">TransactionDetails</span><span class="p">&gt;&gt;</span> <span class="nf">PostTransactionDetails</span><span class="p">(</span><span class="n">TransactionDetails</span> <span class="n">transactionDetails</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">// Create a hash key using transaction id, dr and cr amount</span>
            <span class="kt">string</span> <span class="n">idempotencyKey</span> <span class="p">=</span> <span class="n">HashGenerator</span><span class="p">.</span><span class="nf">GetHash</span><span class="p">(</span><span class="n">transactionDetails</span><span class="p">.</span><span class="n">TransactionId</span><span class="p">.</span><span class="nf">ToString</span><span class="p">()</span> 
                <span class="p">+</span> <span class="n">transactionDetails</span><span class="p">.</span><span class="n">DrAmount</span><span class="p">.</span><span class="nf">ToString</span><span class="p">()</span> <span class="p">+</span> <span class="n">transactionDetails</span><span class="p">.</span><span class="n">CrAmount</span><span class="p">.</span><span class="nf">ToString</span><span class="p">());</span>


            <span class="c1">// check hash key is exists in the redis cache</span>
            <span class="kt">var</span> <span class="n">isCached</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_distributedCache</span><span class="p">.</span><span class="nf">GetAsync</span><span class="p">(</span><span class="n">idempotencyKey</span><span class="p">).</span><span class="nf">ConfigureAwait</span><span class="p">(</span><span class="k">false</span><span class="p">);</span>

            <span class="k">if</span><span class="p">(</span><span class="n">isCached</span> <span class="k">is</span> <span class="n">not</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="c1">// if same value is already exists in the cache then return existing value. </span>
                <span class="kt">var</span> <span class="n">decodedResult</span> <span class="p">=</span> <span class="n">JsonConvert</span><span class="p">.</span><span class="n">DeserializeObject</span><span class="p">&lt;</span><span class="n">TransactionDetails</span><span class="p">&gt;(</span><span class="n">Encoding</span><span class="p">.</span><span class="n">UTF8</span><span class="p">.</span><span class="nf">GetString</span><span class="p">(</span><span class="n">isCached</span><span class="p">));</span>
                <span class="c1">//var employeeDecodedResult = _mapper.Map&lt;EmployeeResponseDTO&gt;(decodedResult);</span>
                <span class="k">return</span> <span class="n">decodedResult</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="c1">// if input object is null return with a problem</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">TransactionDetails</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">Problem</span><span class="p">(</span><span class="s">"Entity set 'AccountingContext.TransactionDetails'  is null."</span><span class="p">);</span>
            <span class="p">}</span>


            <span class="c1">// Save into database</span>
            <span class="n">_context</span><span class="p">.</span><span class="n">TransactionDetails</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">transactionDetails</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>

            <span class="c1">// Set value into cache after save</span>
            <span class="c1">// value will be removed after 10 mins</span>
            <span class="c1">// It will be removed after 2 mins, if it is not requested within 2 mins</span>

            <span class="kt">var</span> <span class="n">options</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">DistributedCacheEntryOptions</span><span class="p">().</span><span class="nf">SetAbsoluteExpiration</span><span class="p">(</span><span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">.</span><span class="nf">AddMinutes</span><span class="p">(</span><span class="m">10</span><span class="p">)).</span><span class="nf">SetSlidingExpiration</span><span class="p">(</span><span class="n">TimeSpan</span><span class="p">.</span><span class="nf">FromMinutes</span><span class="p">(</span><span class="m">2</span><span class="p">));</span>
            <span class="k">await</span> <span class="n">_distributedCache</span><span class="p">.</span><span class="nf">SetAsync</span><span class="p">(</span><span class="n">idempotencyKey</span><span class="p">,</span>
                <span class="n">Encoding</span><span class="p">.</span><span class="n">UTF8</span><span class="p">.</span><span class="nf">GetBytes</span><span class="p">(</span><span class="n">JsonConvert</span><span class="p">.</span><span class="nf">SerializeObject</span><span class="p">(</span><span class="n">transactionDetails</span><span class="p">)),</span> <span class="n">options</span><span class="p">);</span>


            <span class="k">return</span> <span class="nf">CreatedAtAction</span><span class="p">(</span><span class="s">"GetTransactionDetails"</span><span class="p">,</span> <span class="k">new</span> <span class="p">{</span> <span class="n">id</span> <span class="p">=</span> <span class="n">transactionDetails</span><span class="p">.</span><span class="n">Id</span> <span class="p">},</span> <span class="n">transactionDetails</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">// DELETE: api/TransactionDetails/5</span>
        <span class="p">[</span><span class="nf">HttpDelete</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">DeleteTransactionDetails</span><span class="p">(</span><span class="kt">long</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">TransactionDetails</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="kt">var</span> <span class="n">transactionDetails</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">TransactionDetails</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">transactionDetails</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">_context</span><span class="p">.</span><span class="n">TransactionDetails</span><span class="p">.</span><span class="nf">Remove</span><span class="p">(</span><span class="n">transactionDetails</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>

            <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="kt">bool</span> <span class="nf">TransactionDetailsExists</span><span class="p">(</span><span class="kt">long</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">TransactionDetails</span><span class="p">?.</span><span class="nf">Any</span><span class="p">(</span><span class="n">e</span> <span class="p">=&gt;</span> <span class="n">e</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">id</span><span class="p">)).</span><span class="nf">GetValueOrDefault</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 10: Now run application and save data using swagger UI.</strong></p>

<ul>
  <li>Try to save same data twice or more</li>
  <li>Check database, you will see data will save one once</li>
</ul>

<p>Now look at the PostTransactionDetails class. Here I have created idempotencyKey (a hash key) using transaction id, debit amount and credit amount. In this case, idempotencyKey is actually request key. When we save any data, we are storing a request key of corresponding input in redis cache. Whenever, we are going to save data we are checking hash key of existing input. If it is existing then it will not save and consider as idempotent operation.</p>

<p><strong>DistributedCacheEntryOptions</strong></p>

<ul>
  <li>
    <p>SetAbsoluteExpiration: Here you can set the expiration time of the cached object.</p>
  </li>
  <li>
    <p>SetSlidingExpiration: This is similar to Absolute Expiration. It expires as a cached object if it not being requested for a defined amount of time period. Note that Sliding Expiration should always be set lower than the absolute expiration</p>
  </li>
</ul>

<p><strong>Note:</strong>
In distributed caching, cache is not stored in to an individual web server’s memory. Cache data is centrally managed and the same data is available to all the app servers. The distributed caching has several advantages, as shown below.
The cache is stored centrally, so all the users get the same data and data is not dependent on which web server handles its request.
The cache data is not impacted if any problem happens with the web server; i.e.,  restart, new server is added, a server is removed.</p>

<p><strong><a href="https://github.com/mahedee/code-sample02/tree/main/IdempotentDemo">Source code</a></strong></p>]]></content><author><name>Mahedee Hasan</name></author><category term="C#" /><category term="ASP.NET Core" /><category term="Redis" /><category term="Microservices" /><category term="Software Architecture" /><category term="csharp" /><category term="aspnetcore" /><category term="redis" /><category term="Microservices" /><category term="softwarearchitecture" /><summary type="html"><![CDATA[In a distributed application, idempotent operation or idempotency refers to the property of an operation such that multiple identical requests have the same effect as a single request. This is useful in situations where a request may be lost or a response may be delayed, as it allows the client to retry the request without worrying about producing unintended side effects.]]></summary></entry><entry><title type="html">Service Discovery using Eureka, Ocelot and ASP.net core</title><link href="https://mahedee.net//Service-Discovery-using-Eureka-Ocelot-and-ASPnet-core/" rel="alternate" type="text/html" title="Service Discovery using Eureka, Ocelot and ASP.net core" /><published>2022-07-11T00:00:00+00:00</published><updated>2022-07-11T00:00:00+00:00</updated><id>https://mahedee.net//Service-Discovery-using-Eureka-Ocelot-and-ASPnet-core</id><content type="html" xml:base="https://mahedee.net//Service-Discovery-using-Eureka-Ocelot-and-ASPnet-core/"><![CDATA[<p><strong>Introduction</strong></p>

<p>Service discovery is a process in microservice architecture that enables dynamic registration and lookup of services in a network environment. It allows microservices to discover each other, establish communication, and collaborate to complete a task. This helps to improve resilience, scalability, and flexibility of microservice-based systems. In this article, I will show you how to configure service discovery with ocelot in API gateway.</p>

<p>Service discovery implementations within microservices architecture discovery includes both:</p>

<ul>
  <li>a central server (or servers) that maintain a global view of addresses.</li>
  <li>clients that connect to the central server to update and retrieve addresses.</li>
</ul>

<p>It is always hard to manage lots of micro services as well as had to maintain tens or hundreds of LB’s and DNS records. In a microservice architecture, service lifespan is measured in seconds and minutes. With microservices, addresses are added and changed constantly as new hosts are added, ports are changed, or services are terminated. The highly transient nature of microservices is again pushing the limits of today’s technologies, and we see different organizations adopting different strategies.</p>

<p><img src="/assets/images/posts/2022/sd-01.PNG" alt="" />
Fig – Real world problem (Collected from internet)</p>

<p><img src="/assets/images/posts/2022/sd-02.PNG" alt="" />
Fig – Service discovery pattern (Collected from internet)</p>

<p><strong>What is Eureka Server?</strong><br />
Eureka is a popular, open-source service registry software used to implement the service discovery pattern in microservice architecture. It is actually Netflix OSS product, and spring cloud offers a declarative way to register and invoke services by Java annotation. It provides a centralized registry of microservices, enabling services to dynamically discover each other without hardcoding the addresses.
In a typical setup, microservices register themselves with the Eureka server, providing information such as their hostname and IP address. Other microservices can then query the Eureka server to discover the endpoint of the microservice they need to communicate with. 
Eureka also provides some additional features such as load balancing, failover, and health checks to ensure high availability and reliability of the microservices.</p>

<p><strong>Implementation</strong></p>

<p>Let’s implement Service Discovery using Ocelot and asp.net core</p>

<p><strong>Tools and Technologies Used</strong></p>
<ul>
  <li>Visual Studio 2022</li>
  <li>.NET 6.0</li>
  <li>ASP.NET Core Web API</li>
  <li>Visual C#</li>
  <li>Eureka</li>
</ul>

<p><strong>Step 1: Create solution and projects</strong></p>

<ul>
  <li>Create a solution name SDDemo.sln</li>
  <li>Add four Web Api Projects name BFF.Web, Customer.API, Location.API, Product.API</li>
  <li>Here BFF.Web is an api gateway</li>
</ul>

<p><strong>Step 2: Install nuget packages</strong></p>

<ul>
  <li>Install following nuget packages in BFF.Web project</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">MMLib.SwaggerForOcelot</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Ocelot</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Ocelot.Provider.Eureka</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Ocelot.Provider.Polly</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Steeltoe.Discovery.Eureka</span>

</code></pre></div></div>

<ul>
  <li>Install following nuget packages in Customer.API project</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Steeltoe.Discovery.ClientCore</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Steeltoe.Discovery.Eureka</span>
</code></pre></div></div>

<ul>
  <li>Install following nuget packages in Location.API project</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Steeltoe.Discovery.ClientCore</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Steeltoe.Discovery.Eureka</span>
</code></pre></div></div>

<ul>
  <li>Install following nuget packages in Product.API project</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Steeltoe.Discovery.ClientCore</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Steeltoe.Discovery.Eureka</span>
</code></pre></div></div>

<p><strong>Step 3: Organize Customer.API projects</strong></p>

<ul>
  <li>Register Eureka and modify program.cs as follows.</li>
</ul>

<p><strong>Program.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Steeltoe.Discovery.Client</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Steeltoe.Discovery.Eureka</span><span class="p">;</span>

<span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="n">WebApplication</span><span class="p">.</span><span class="nf">CreateBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>

<span class="c1">// Add services to the container.</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddServiceDiscovery</span><span class="p">(</span><span class="n">o</span> <span class="p">=&gt;</span> <span class="n">o</span><span class="p">.</span><span class="nf">UseEureka</span><span class="p">());</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">();</span>
<span class="c1">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddEndpointsApiExplorer</span><span class="p">();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddSwaggerGen</span><span class="p">();</span>

<span class="kt">var</span> <span class="n">app</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

<span class="c1">// Configure the HTTP request pipeline.</span>
<span class="k">if</span> <span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">Environment</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
<span class="p">{</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwagger</span><span class="p">();</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwaggerUI</span><span class="p">();</span>
<span class="p">}</span>

<span class="c1">//app.UseHttpsRedirection();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseAuthorization</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">MapControllers</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>

</code></pre></div></div>

<ul>
  <li>Create a controller name CustomerController in Controllers folder and modify get method as follows.</li>
</ul>

<p><strong>CustomerController.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>

<span class="c1">// For more information on enabling Web API for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860</span>

<span class="k">namespace</span> <span class="nn">Customer.API.Controllers</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
    <span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CustomerController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
    <span class="p">{</span>
        <span class="c1">// GET: api/&lt;CustomerController&gt;</span>
        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"GetAll"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="nf">Get</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="kt">string</span><span class="p">[]</span> <span class="p">{</span> <span class="s">"Md. Mahedee Hasan"</span><span class="p">,</span> <span class="s">"Khaleda Islam"</span><span class="p">,</span> <span class="s">"Tahiya Hasan"</span><span class="p">,</span> <span class="s">"Humaira Hasan"</span> <span class="p">};</span>
        <span class="p">}</span>

    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Modify appsettings.json to connect to the service registry.</li>
</ul>

<p><strong>appsettings.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">
</span><span class="p">{</span><span class="w">
  </span><span class="nl">"Logging"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"LogLevel"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Default"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Information"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Microsoft.AspNetCore"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Warning"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Microsoft.Hosting.Lifetime"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Information"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">


  </span><span class="nl">"Spring"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"Application"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"SERVICE.CUSTOMERAPI"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"Eureka"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"Client"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"ServiceUrl"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://localhost:8761/eureka/"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"ValidateCertificates"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
      </span><span class="nl">"ShouldRegisterWithEureka"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
    </span><span class="p">},</span><span class="w">

    </span><span class="nl">"Instance"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="err">//</span><span class="nl">"port"</span><span class="p">:</span><span class="w"> </span><span class="mi">9001</span><span class="p">,</span><span class="w">
      </span><span class="nl">"NonSecurePort"</span><span class="p">:</span><span class="w"> </span><span class="mi">9002</span><span class="p">,</span><span class="w">
      </span><span class="nl">"HostName"</span><span class="p">:</span><span class="w"> </span><span class="s2">"localhost"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"InstanceId"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Customer.API,Port:9002"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"StatusPageUrlPath"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/swagger/index.html"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"HealthCheckUrlPath"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/api/values/healthcheck"</span><span class="w">
      </span><span class="err">//</span><span class="nl">"StatusPageUrlPath"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/api/values/status"</span><span class="w">
    </span><span class="p">},</span><span class="w">

    </span><span class="nl">"AllowedHosts"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*"</span><span class="w">
  </span><span class="p">}</span><span class="w">

</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<p><strong>Step 4: Organize Location.API project</strong></p>

<ul>
  <li>Register Eureka and modify program.cs as follows.</li>
</ul>

<p><strong>Program.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Steeltoe.Discovery.Client</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Steeltoe.Discovery.Eureka</span><span class="p">;</span>

<span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="n">WebApplication</span><span class="p">.</span><span class="nf">CreateBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>

<span class="c1">// Add services to the container.</span>

<span class="c1">//builder.Services.AddDiscoveryClient(builder.Configuration);</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddServiceDiscovery</span><span class="p">(</span><span class="n">o</span> <span class="p">=&gt;</span> <span class="n">o</span><span class="p">.</span><span class="nf">UseEureka</span><span class="p">());</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">();</span>
<span class="c1">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddEndpointsApiExplorer</span><span class="p">();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddSwaggerGen</span><span class="p">();</span>

<span class="kt">var</span> <span class="n">app</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

<span class="c1">// Configure the HTTP request pipeline.</span>
<span class="k">if</span> <span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">Environment</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
<span class="p">{</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwagger</span><span class="p">();</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwaggerUI</span><span class="p">();</span>
<span class="p">}</span>

<span class="c1">//app.UseHttpsRedirection();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseAuthorization</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">MapControllers</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>

</code></pre></div></div>

<ul>
  <li>Create a controller name DistrictController in Controllers folder and modify get method as follows.</li>
</ul>

<p><strong>DistrictController.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>

<span class="c1">// For more information on enabling Web API for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860</span>

<span class="k">namespace</span> <span class="nn">Location.API.Controllers</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
    <span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">DistrictController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
    <span class="p">{</span>
        <span class="c1">// GET: api/&lt;DistrictController&gt;</span>
        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"GetAll"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="nf">Get</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="kt">string</span><span class="p">[]</span> <span class="p">{</span> <span class="s">"Dhaka"</span><span class="p">,</span> <span class="s">"Chittagong"</span><span class="p">,</span> <span class="s">"Chandpur"</span><span class="p">,</span> <span class="s">"Barisal"</span><span class="p">,</span> <span class="s">"Noakhali"</span> <span class="p">};</span>
        <span class="p">}</span>

    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Modify appsettings.json to connect to the service registry.</li>
</ul>

<p><strong>appsettings.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"Logging"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"LogLevel"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Default"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Information"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Microsoft.AspNetCore"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Warning"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Microsoft.Hosting.Lifetime"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Information"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">


  </span><span class="nl">"Spring"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"Application"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"SERVICE.LOCATIONAPI"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"Eureka"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"Client"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="err">////</span><span class="nl">"serviceUrl"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://192.168.0.107:8761/eureka/"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"ServiceUrl"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://localhost:8761/eureka/"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"ValidateCertificates"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
      </span><span class="nl">"ShouldRegisterWithEureka"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
    </span><span class="p">},</span><span class="w">

    </span><span class="nl">"Instance"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"NonSecurePort"</span><span class="p">:</span><span class="w"> </span><span class="mi">9001</span><span class="p">,</span><span class="w">
      </span><span class="nl">"HostName"</span><span class="p">:</span><span class="w"> </span><span class="s2">"localhost"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"InstanceId"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Location.API,Port:9001"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"StatusPageUrlPath"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/swagger/index.html"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"HealthCheckUrlPath"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/api/values/healthcheck"</span><span class="w">
      </span><span class="err">//</span><span class="nl">"StatusPageUrlPath"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/api/values/status"</span><span class="w">
    </span><span class="p">},</span><span class="w">

    </span><span class="nl">"AllowedHosts"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*"</span><span class="w">
  </span><span class="p">}</span><span class="w">

</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<p><strong>Step 5: Organize Product.API</strong></p>

<ul>
  <li>Register Eureka and modify program.cs as follows.</li>
</ul>

<p><strong>Program.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Steeltoe.Discovery.Client</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Steeltoe.Discovery.Eureka</span><span class="p">;</span>

<span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="n">WebApplication</span><span class="p">.</span><span class="nf">CreateBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>

<span class="c1">// Add services to the container.</span>

<span class="c1">//builder.Services.AddDiscoveryClient(builder.Configuration);</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddServiceDiscovery</span><span class="p">(</span><span class="n">o</span> <span class="p">=&gt;</span> <span class="n">o</span><span class="p">.</span><span class="nf">UseEureka</span><span class="p">());</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">();</span>
<span class="c1">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddEndpointsApiExplorer</span><span class="p">();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddSwaggerGen</span><span class="p">();</span>

<span class="kt">var</span> <span class="n">app</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

<span class="c1">// Configure the HTTP request pipeline.</span>
<span class="k">if</span> <span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">Environment</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
<span class="p">{</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwagger</span><span class="p">();</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwaggerUI</span><span class="p">();</span>
<span class="p">}</span>

<span class="c1">//app.UseHttpsRedirection();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseAuthorization</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">MapControllers</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>

</code></pre></div></div>

<ul>
  <li>Create a controller name ProductsController in Controllers folder and modify get method as follows.</li>
</ul>

<p><strong>ProductsController.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>

<span class="c1">// For more information on enabling Web API for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860</span>

<span class="k">namespace</span> <span class="nn">Product.API.Controllers</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
    <span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">ProductsController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
    <span class="p">{</span>
        <span class="c1">// GET: api/&lt;ProductsController&gt;</span>
        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"GetAll"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="nf">Get</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="kt">string</span><span class="p">[]</span> <span class="p">{</span> <span class="s">"T-Shirt"</span><span class="p">,</span> <span class="s">"Casual Shirt"</span><span class="p">,</span> <span class="s">"Socks"</span><span class="p">,</span> <span class="s">"Shampo"</span><span class="p">,</span> <span class="s">"Business Bag"</span> <span class="p">};</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Modify appsettings.json to connect to the service registry.</li>
</ul>

<p><strong>appsettings.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">
</span><span class="p">{</span><span class="w">
  </span><span class="nl">"Logging"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"LogLevel"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Default"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Information"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Microsoft.AspNetCore"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Warning"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"AllowedHosts"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*"</span><span class="p">,</span><span class="w">



  </span><span class="nl">"Spring"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"Application"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"SERVICE.PRODUCTAPI"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"Eureka"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"Client"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"ServiceUrl"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://localhost:8761/eureka/"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"ValidateCertificates"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
      </span><span class="nl">"ShouldRegisterWithEureka"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
    </span><span class="p">},</span><span class="w">

    </span><span class="nl">"Instance"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="err">//</span><span class="nl">"port"</span><span class="p">:</span><span class="w"> </span><span class="mi">9001</span><span class="p">,</span><span class="w">
      </span><span class="nl">"NonSecurePort"</span><span class="p">:</span><span class="w"> </span><span class="mi">9003</span><span class="p">,</span><span class="w">
      </span><span class="nl">"HostName"</span><span class="p">:</span><span class="w"> </span><span class="s2">"localhost"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"InstanceId"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Product.API,Port:9003"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"StatusPageUrlPath"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/swagger/index.html"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"HealthCheckUrlPath"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/api/values/healthcheck"</span><span class="w">
      </span><span class="err">//</span><span class="nl">"StatusPageUrlPath"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/api/values/status"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<p><strong>Step 6: Organize BFF.Web</strong></p>

<p>In this stage, we are going to configure a gateway to communicate with other services using ocelot.</p>

<ul>
  <li>
    <p>Create a folder name - Routes.dev in root directory and add the following files. ocelot.customer.api.json, ocelot.global.json, ocelot.location.api.json, ocelot.product.api.json, ocelot.SwaggerEndPoints.json in Routes.dev folder.</p>
  </li>
  <li>
    <p>Now modify the json files as follows.</p>
  </li>
</ul>

<p><strong>ocelot.customer.api.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">
</span><span class="p">{</span><span class="w">
  </span><span class="nl">"Routes"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"DownstreamPathTemplate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/{everything}"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"DownstreamScheme"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"SwaggerKey"</span><span class="p">:</span><span class="w"> </span><span class="s2">"customer"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"UseServiceDiscovery"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
      </span><span class="nl">"ServiceName"</span><span class="p">:</span><span class="w"> </span><span class="s2">"SERVICE.CUSTOMERAPI"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"UpstreamPathTemplate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/customer/{everything}"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"UpstreamHttpMethod"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"GET"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"POST"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"PUT"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"DELETE"</span><span class="w">
      </span><span class="p">],</span><span class="w">

      </span><span class="err">/*</span><span class="w">
        </span><span class="err">LeastConnection</span><span class="w"> </span><span class="err">-</span><span class="w"> </span><span class="err">tracks</span><span class="w"> </span><span class="err">which</span><span class="w"> </span><span class="err">services</span><span class="w"> </span><span class="err">are</span><span class="w"> </span><span class="err">dealing</span><span class="w"> </span><span class="err">with</span><span class="w"> </span><span class="err">requests</span><span class="w"> </span><span class="err">and</span><span class="w"> </span><span class="err">sends</span><span class="w"> </span><span class="err">new</span><span class="w"> </span><span class="err">requests</span><span class="w"> </span><span class="err">to</span><span class="w"> </span><span class="err">service</span><span class="w"> </span><span class="err">with</span><span class="w"> </span><span class="err">least</span><span class="w"> </span><span class="err">existing</span><span class="w"> </span><span class="err">requests.</span><span class="w"> </span><span class="err">The</span><span class="w"> </span><span class="err">algorythm</span><span class="w"> </span><span class="err">state</span><span class="w"> </span><span class="err">is</span><span class="w"> </span><span class="err">not</span><span class="w"> </span><span class="err">distributed</span><span class="w"> </span><span class="err">across</span><span class="w"> </span><span class="err">a</span><span class="w"> </span><span class="err">cluster</span><span class="w"> </span><span class="err">of</span><span class="w"> </span><span class="err">Ocelot’s.</span><span class="w">
        </span><span class="err">RoundRobin</span><span class="w"> </span><span class="err">-</span><span class="w"> </span><span class="err">loops</span><span class="w"> </span><span class="err">through</span><span class="w"> </span><span class="err">available</span><span class="w"> </span><span class="err">services</span><span class="w"> </span><span class="err">and</span><span class="w"> </span><span class="err">sends</span><span class="w"> </span><span class="err">requests.</span><span class="w"> </span><span class="err">The</span><span class="w"> </span><span class="err">algorythm</span><span class="w"> </span><span class="err">state</span><span class="w"> </span><span class="err">is</span><span class="w"> </span><span class="err">not</span><span class="w"> </span><span class="err">distributed</span><span class="w"> </span><span class="err">across</span><span class="w"> </span><span class="err">a</span><span class="w"> </span><span class="err">cluster</span><span class="w"> </span><span class="err">of</span><span class="w"> </span><span class="err">Ocelot’s.</span><span class="w">
        </span><span class="err">NoLoadBalancer</span><span class="w"> </span><span class="err">-</span><span class="w"> </span><span class="err">takes</span><span class="w"> </span><span class="err">the</span><span class="w"> </span><span class="err">first</span><span class="w"> </span><span class="err">available</span><span class="w"> </span><span class="err">service</span><span class="w"> </span><span class="err">from</span><span class="w"> </span><span class="err">config</span><span class="w"> </span><span class="err">or</span><span class="w"> </span><span class="err">service</span><span class="w"> </span><span class="err">discovery.</span><span class="w">
        </span><span class="err">CookieStickySessions</span><span class="w"> </span><span class="err">-</span><span class="w"> </span><span class="err">uses</span><span class="w"> </span><span class="err">a</span><span class="w"> </span><span class="err">cookie</span><span class="w"> </span><span class="err">to</span><span class="w"> </span><span class="err">stick</span><span class="w"> </span><span class="err">all</span><span class="w"> </span><span class="err">requests</span><span class="w"> </span><span class="err">to</span><span class="w"> </span><span class="err">a</span><span class="w"> </span><span class="err">specific</span><span class="w"> </span><span class="err">server</span><span class="w">
      </span><span class="err">*/</span><span class="w">

      </span><span class="nl">"LoadBalancerOptions"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"Type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"LeastConnection"</span><span class="w">
      </span><span class="p">}</span><span class="w">

    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<p><strong>ocelot.location.api.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"Routes"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"DownstreamPathTemplate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/{everything}"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"DownstreamScheme"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"SwaggerKey"</span><span class="p">:</span><span class="w"> </span><span class="s2">"location"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"UseServiceDiscovery"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
      </span><span class="nl">"ServiceName"</span><span class="p">:</span><span class="w"> </span><span class="s2">"SERVICE.LOCATIONAPI"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"UpstreamPathTemplate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/location/{everything}"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"UpstreamHttpMethod"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"GET"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"POST"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"PUT"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"DELETE"</span><span class="w">
      </span><span class="p">],</span><span class="w">

      </span><span class="nl">"LoadBalancerOptions"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"Type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"LeastConnection"</span><span class="w">
      </span><span class="p">}</span><span class="w">

    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<p><strong>ocelot.product.api.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"Routes"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"DownstreamPathTemplate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/{everything}"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"DownstreamScheme"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"SwaggerKey"</span><span class="p">:</span><span class="w"> </span><span class="s2">"product"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"UseServiceDiscovery"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
      </span><span class="nl">"ServiceName"</span><span class="p">:</span><span class="w"> </span><span class="s2">"SERVICE.PRODUCTAPI"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"UpstreamPathTemplate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/product/{everything}"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"UpstreamHttpMethod"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"GET"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"POST"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"PUT"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"DELETE"</span><span class="w">
      </span><span class="p">],</span><span class="w">


      </span><span class="err">/*</span><span class="w">
        </span><span class="err">LeastConnection</span><span class="w"> </span><span class="err">-</span><span class="w"> </span><span class="err">tracks</span><span class="w"> </span><span class="err">which</span><span class="w"> </span><span class="err">services</span><span class="w"> </span><span class="err">are</span><span class="w"> </span><span class="err">dealing</span><span class="w"> </span><span class="err">with</span><span class="w"> </span><span class="err">requests</span><span class="w"> </span><span class="err">and</span><span class="w"> </span><span class="err">sends</span><span class="w"> </span><span class="err">new</span><span class="w"> </span><span class="err">requests</span><span class="w"> </span><span class="err">to</span><span class="w"> </span><span class="err">service</span><span class="w"> </span><span class="err">with</span><span class="w"> </span><span class="err">least</span><span class="w"> </span><span class="err">existing</span><span class="w"> </span><span class="err">requests.</span><span class="w"> </span><span class="err">The</span><span class="w"> </span><span class="err">algorythm</span><span class="w"> </span><span class="err">state</span><span class="w"> </span><span class="err">is</span><span class="w"> </span><span class="err">not</span><span class="w"> </span><span class="err">distributed</span><span class="w"> </span><span class="err">across</span><span class="w"> </span><span class="err">a</span><span class="w"> </span><span class="err">cluster</span><span class="w"> </span><span class="err">of</span><span class="w"> </span><span class="err">Ocelot’s.</span><span class="w">
        </span><span class="err">RoundRobin</span><span class="w"> </span><span class="err">-</span><span class="w"> </span><span class="err">loops</span><span class="w"> </span><span class="err">through</span><span class="w"> </span><span class="err">available</span><span class="w"> </span><span class="err">services</span><span class="w"> </span><span class="err">and</span><span class="w"> </span><span class="err">sends</span><span class="w"> </span><span class="err">requests.</span><span class="w"> </span><span class="err">The</span><span class="w"> </span><span class="err">algorythm</span><span class="w"> </span><span class="err">state</span><span class="w"> </span><span class="err">is</span><span class="w"> </span><span class="err">not</span><span class="w"> </span><span class="err">distributed</span><span class="w"> </span><span class="err">across</span><span class="w"> </span><span class="err">a</span><span class="w"> </span><span class="err">cluster</span><span class="w"> </span><span class="err">of</span><span class="w"> </span><span class="err">Ocelot’s.</span><span class="w">
        </span><span class="err">NoLoadBalancer</span><span class="w"> </span><span class="err">-</span><span class="w"> </span><span class="err">takes</span><span class="w"> </span><span class="err">the</span><span class="w"> </span><span class="err">first</span><span class="w"> </span><span class="err">available</span><span class="w"> </span><span class="err">service</span><span class="w"> </span><span class="err">from</span><span class="w"> </span><span class="err">config</span><span class="w"> </span><span class="err">or</span><span class="w"> </span><span class="err">service</span><span class="w"> </span><span class="err">discovery.</span><span class="w">
        </span><span class="err">CookieStickySessions</span><span class="w"> </span><span class="err">-</span><span class="w"> </span><span class="err">uses</span><span class="w"> </span><span class="err">a</span><span class="w"> </span><span class="err">cookie</span><span class="w"> </span><span class="err">to</span><span class="w"> </span><span class="err">stick</span><span class="w"> </span><span class="err">all</span><span class="w"> </span><span class="err">requests</span><span class="w"> </span><span class="err">to</span><span class="w"> </span><span class="err">a</span><span class="w"> </span><span class="err">specific</span><span class="w"> </span><span class="err">server</span><span class="w">
      </span><span class="err">*/</span><span class="w">

      </span><span class="nl">"LoadBalancerOptions"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"Type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"LeastConnection"</span><span class="w">
      </span><span class="p">}</span><span class="w">

    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<p><strong>ocelot.global.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">
</span><span class="p">{</span><span class="w">
  </span><span class="nl">"GlobalConfiguration"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"RequestIdKey"</span><span class="p">:</span><span class="w"> </span><span class="s2">"OcRequestId"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"DownstreamScheme"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"UseServiceDiscovery"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"ServiceDiscoveryProvider"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Host"</span><span class="p">:</span><span class="w"> </span><span class="s2">"localhost"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Port"</span><span class="p">:</span><span class="w"> </span><span class="mi">8001</span><span class="p">,</span><span class="w">
      </span><span class="err">//Type</span><span class="w"> </span><span class="err">can</span><span class="w"> </span><span class="err">be</span><span class="w"> </span><span class="err">Consul</span><span class="p">,</span><span class="w"> </span><span class="err">Eureka</span><span class="w">
      </span><span class="nl">"Type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Eureka"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<p><strong>ocelot.SwaggerEndPoints.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"SwaggerEndPoints"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"bff.web"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"TransformByOcelotConfig"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Config"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"Name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"BFF.Web"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1.0"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://localhost:8001/swagger/v1/swagger.json"</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"location"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"TransformByOcelotConfig"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Config"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"Name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Location.API"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1.0"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://localhost:8001/location/swagger/v1/swagger.json"</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"customer"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"TransformByOcelotConfig"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Config"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"Name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Customer.API"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1.0"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://localhost:8001/customer/swagger/v1/swagger.json"</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"product"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"TransformByOcelotConfig"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Config"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"Name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Product.API"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1.0"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://localhost:8001/product/swagger/v1/swagger.json"</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<ul>
  <li>Add AlterUpstream class in Config folder</li>
</ul>

<p><strong>AlterUpstream.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Newtonsoft.Json</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Newtonsoft.Json.Linq</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">BFF.Web.Config</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">AlterUpstream</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">static</span> <span class="kt">string</span> <span class="nf">AlterUpstreamSwaggerJson</span><span class="p">(</span><span class="n">HttpContext</span> <span class="n">context</span><span class="p">,</span> <span class="kt">string</span> <span class="n">swaggerJson</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">swagger</span> <span class="p">=</span> <span class="n">JObject</span><span class="p">.</span><span class="nf">Parse</span><span class="p">(</span><span class="n">swaggerJson</span><span class="p">);</span>
            <span class="c1">// ... alter upstream json</span>
            <span class="k">return</span> <span class="n">swagger</span><span class="p">.</span><span class="nf">ToString</span><span class="p">(</span><span class="n">Formatting</span><span class="p">.</span><span class="n">Indented</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Modify Program.cs file as follows</li>
</ul>

<p><strong>Program.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">BFF.Web.Config</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">MMLib.SwaggerForOcelot.DependencyInjection</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ocelot.DependencyInjection</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ocelot.Middleware</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ocelot.Provider.Eureka</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ocelot.Provider.Polly</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Steeltoe.Discovery.Client</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Steeltoe.Discovery.Eureka</span><span class="p">;</span>

<span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="n">WebApplication</span><span class="p">.</span><span class="nf">CreateBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>

<span class="c1">// Add services to the container.</span>

<span class="kt">var</span> <span class="n">routes</span> <span class="p">=</span> <span class="s">""</span><span class="p">;</span>
<span class="cp">#if DEBUG
</span><span class="n">routes</span> <span class="p">=</span> <span class="s">"Routes.dev"</span><span class="p">;</span>
<span class="cp">#else
</span><span class="n">routes</span> <span class="p">=</span> <span class="s">"Routes.prod"</span><span class="p">;</span>
<span class="cp">#endif
</span><span class="p">;</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Configuration</span><span class="p">.</span><span class="nf">AddOcelotWithSwaggerSupport</span><span class="p">(</span><span class="n">options</span> <span class="p">=&gt;</span>
<span class="p">{</span>
    <span class="n">options</span><span class="p">.</span><span class="n">Folder</span> <span class="p">=</span> <span class="n">routes</span><span class="p">;</span>
<span class="p">});</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddOcelot</span><span class="p">(</span><span class="n">builder</span><span class="p">.</span><span class="n">Configuration</span><span class="p">).</span><span class="nf">AddEureka</span><span class="p">().</span><span class="nf">AddPolly</span><span class="p">();</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddSwaggerForOcelot</span><span class="p">(</span><span class="n">builder</span><span class="p">.</span><span class="n">Configuration</span><span class="p">);</span>

<span class="c1">// Register service discovery - Eureka</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddServiceDiscovery</span><span class="p">(</span><span class="n">o</span> <span class="p">=&gt;</span> <span class="n">o</span><span class="p">.</span><span class="nf">UseEureka</span><span class="p">());</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Host</span><span class="p">.</span><span class="nf">ConfigureAppConfiguration</span><span class="p">((</span><span class="n">hostingContext</span><span class="p">,</span> <span class="n">config</span><span class="p">)</span> <span class="p">=&gt;</span>
<span class="p">{</span>
    <span class="n">config</span><span class="p">.</span><span class="nf">SetBasePath</span><span class="p">(</span><span class="n">Directory</span><span class="p">.</span><span class="nf">GetCurrentDirectory</span><span class="p">())</span>
    <span class="p">.</span><span class="nf">AddJsonFile</span><span class="p">(</span><span class="s">"appsettings.json"</span><span class="p">,</span> <span class="n">optional</span><span class="p">:</span> <span class="k">false</span><span class="p">,</span> <span class="n">reloadOnChange</span><span class="p">:</span> <span class="k">true</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">AddJsonFile</span><span class="p">(</span><span class="s">$"appsettings.local.json"</span><span class="p">,</span> <span class="n">optional</span><span class="p">:</span> <span class="k">true</span><span class="p">,</span> <span class="n">reloadOnChange</span><span class="p">:</span> <span class="k">true</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">AddJsonFile</span><span class="p">(</span><span class="s">$"appsettings.</span><span class="p">{</span><span class="n">hostingContext</span><span class="p">.</span><span class="n">HostingEnvironment</span><span class="p">.</span><span class="n">EnvironmentName</span><span class="p">}</span><span class="s">.json"</span><span class="p">,</span> <span class="n">optional</span><span class="p">:</span> <span class="k">true</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">AddOcelot</span><span class="p">(</span><span class="n">routes</span><span class="p">,</span> <span class="n">builder</span><span class="p">.</span><span class="n">Environment</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">AddEnvironmentVariables</span><span class="p">();</span>
<span class="p">});</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">();</span>
<span class="c1">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddEndpointsApiExplorer</span><span class="p">();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddSwaggerGen</span><span class="p">();</span>

<span class="kt">var</span> <span class="n">app</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

<span class="c1">// Configure the HTTP request pipeline.</span>
<span class="k">if</span> <span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">Environment</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
<span class="p">{</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwagger</span><span class="p">();</span>
    <span class="c1">//app.UseSwaggerUI();</span>
<span class="p">}</span>



<span class="c1">//app.UseHttpsRedirection();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseAuthorization</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseSwaggerForOcelotUI</span><span class="p">(</span><span class="n">options</span> <span class="p">=&gt;</span>
<span class="p">{</span>
    <span class="n">options</span><span class="p">.</span><span class="n">PathToSwaggerGenerator</span> <span class="p">=</span> <span class="s">"/swagger/docs"</span><span class="p">;</span>
    <span class="n">options</span><span class="p">.</span><span class="n">ReConfigureUpstreamSwaggerJson</span> <span class="p">=</span> <span class="n">AlterUpstream</span><span class="p">.</span><span class="n">AlterUpstreamSwaggerJson</span><span class="p">;</span>

<span class="p">}).</span><span class="nf">UseOcelot</span><span class="p">().</span><span class="nf">Wait</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">MapControllers</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>

</code></pre></div></div>

<ul>
  <li>Now modify appsettings.json for BFF.Web</li>
</ul>

<p><strong>Appsettings.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">
</span><span class="p">{</span><span class="w">
  </span><span class="nl">"Logging"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"LogLevel"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Default"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Information"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Microsoft.AspNetCore"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Warning"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Microsoft.Hosting.Lifetime"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Information"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">


  </span><span class="nl">"Spring"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"Application"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"SERVICE.BFF.Web"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"Eureka"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"Client"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"ServiceUrl"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"DefaultZone"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://localhost:8761/eureka/"</span><span class="w">
      </span><span class="p">},</span><span class="w">
      </span><span class="nl">"ValidateCertificates"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
      </span><span class="nl">"ShouldRegisterWithEureka"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
    </span><span class="p">},</span><span class="w">

    </span><span class="nl">"Instance"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"NonSecurePort"</span><span class="p">:</span><span class="w"> </span><span class="mi">8001</span><span class="p">,</span><span class="w">
      </span><span class="nl">"HostName"</span><span class="p">:</span><span class="w"> </span><span class="s2">"localhost"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"InstanceId"</span><span class="p">:</span><span class="w"> </span><span class="s2">"BFF.Web"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"StatusPageUrlPath"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/swagger/index.html"</span><span class="w">
    </span><span class="p">},</span><span class="w">

    </span><span class="nl">"AllowedHosts"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*"</span><span class="w">
  </span><span class="p">}</span><span class="w">

</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<p><strong>Step 7: Run Eureka server on docker.</strong></p>

<ul>
  <li>Run the following command on powershell to run eureka server</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">docker</span> <span class="nb">run</span> <span class="nf">--rm</span> <span class="nf">-it</span> <span class="nf">-p</span> <span class="nf">8761:8761</span> <span class="nf">steeltoeoss</span><span class="nv">/eureka-server</span>
</code></pre></div></div>

<ul>
  <li>Now open your browser and visit http://localhost:8761/</li>
</ul>

<p><strong>Step 8: Now run the applications</strong></p>
<ul>
  <li>Run all projects at a time</li>
  <li>Browse other services throw BFF.Web – In this case your are calling services by service name not host name.</li>
  <li>You will see Eureka server as follows .</li>
</ul>

<p><img src="/assets/images/posts/2022/sd-03.PNG" alt="" /></p>

<p><strong><a href="https://github.com/mahedee/code-sample02/tree/main/sd-demo">Source code</a></strong></p>]]></content><author><name>Mahedee Hasan</name></author><category term="C#" /><category term="ASP.NET Core" /><category term="Eureka" /><category term="Microservices" /><category term="Software Architecture" /><category term="csharp" /><category term="aspnetcore" /><category term="eureka" /><category term="microservices" /><category term="softwarearchitecture" /><summary type="html"><![CDATA[Service discovery is a process in microservice architecture that enables dynamic registration and lookup of services in a network environment. It allows microservices to discover each other, establish communication, and collaborate to complete a task. This helps to improve resilience, scalability, and flexibility of microservice-based systems. In this article, I will show you how to configure service discovery with ocelot in API gateway]]></summary></entry><entry><title type="html">How to host .net core NuGet Packages in GitHub Packages Registry</title><link href="https://mahedee.net//How-to-host-dot-net-core-NuGet-Packages-in-GitHub-Packages-Registry/" rel="alternate" type="text/html" title="How to host .net core NuGet Packages in GitHub Packages Registry" /><published>2022-06-15T00:00:00+00:00</published><updated>2022-06-15T00:00:00+00:00</updated><id>https://mahedee.net//How-to-host-dot-net-core-NuGet-Packages-in-GitHub-Packages-Registry</id><content type="html" xml:base="https://mahedee.net//How-to-host-dot-net-core-NuGet-Packages-in-GitHub-Packages-Registry/"><![CDATA[<p><strong>Introduction</strong></p>

<p>GitHub packages registries is most popular now a days. It offers different packages registries for most used package managers, such as NuGet, npm, Docker etc. In this article, I will show you how to host a .net core NuGet Package in GitHub Packages Registry.</p>

<p><strong>Tools and Technology uses</strong></p>
<ul>
  <li>Visual Studio 2022</li>
  <li>.NET 6</li>
  <li>Visual C#</li>
  <li>GitHub</li>
</ul>

<p><strong>Implementation</strong></p>

<p><strong>Step 1: Create a personal access token (PAT) from GitHub</strong></p>

<ul>
  <li>Login into you GitHub</li>
  <li>Go to settings -&gt; Developer Settings -&gt; Personal Access Tokens</li>
  <li>Click “Generate new token” button</li>
  <li>Type Note for the token, expiration days</li>
  <li>
    <p>Select scope for the token – here I have selected repo, write:packages, delete:packages as shown below.</p>

    <p><img src="/assets/images/posts/2022/package-01.PNG" alt="" /></p>
  </li>
  <li>Now click “Generate Toke” at the bottom of the panel</li>
  <li>Copy the token and store the token for further use because you cannot find it later</li>
</ul>

<p><img src="/assets/images/posts/2022/package-02.PNG" alt="" /></p>

<p><strong>Step – 2: Add Nuget Source in visual studio</strong></p>
<ul>
  <li>Type the following command to add source</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">dotnet</span> <span class="nf">nuget</span> <span class="nb">add</span> <span class="nf">source</span> <span class="nf">https:</span><span class="err">/</span><span class="nv">/nuget.pkg.github.com/mahedee/index.json</span> <span class="nf">--name</span> <span class="nf">github-mahedee</span> <span class="nf">--username</span> <span class="nf">mahedee</span> <span class="nf">--password</span> <span class="p">&lt;</span><span class="nf">Your</span> <span class="nf">personal</span> <span class="nf">Access</span> <span class="nf">Token</span><span class="p">&gt;</span>
</code></pre></div></div>

<ul>
  <li>
    <p>You will see a source is added in C:\Users\mahedee\AppData\Roaming\NuGet\NuGet.Config file</p>
  </li>
  <li>Optional: You can also add source from visual studio Tools -&gt; Options -&gt; NuGet Package Manager -&gt; Package Sources</li>
  <li>Restart visual studio to get new nuget package source</li>
</ul>

<p><strong>Step – 3: Create a class library to publish in GitHub Packages</strong></p>
<ul>
  <li>Create a class library name – ‘CryptoEngine”</li>
  <li>Create a class CryptoGenerator as follows</li>
</ul>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">System.Security.Cryptography</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Text</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">CryptoEngine</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CryptoGenerator</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">static</span> <span class="kt">string</span> <span class="nf">GenerateSha256Hash</span><span class="p">(</span><span class="kt">string</span> <span class="n">plainText</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">// Create a SHA256   </span>
            <span class="k">using</span> <span class="p">(</span><span class="n">SHA256</span> <span class="n">sha256Hash</span> <span class="p">=</span> <span class="n">SHA256</span><span class="p">.</span><span class="nf">Create</span><span class="p">())</span>
            <span class="p">{</span>
                <span class="c1">// ComputeHash - returns byte array  </span>
                <span class="kt">byte</span><span class="p">[]</span> <span class="n">bytes</span> <span class="p">=</span> <span class="n">sha256Hash</span><span class="p">.</span><span class="nf">ComputeHash</span><span class="p">(</span><span class="n">Encoding</span><span class="p">.</span><span class="n">UTF8</span><span class="p">.</span><span class="nf">GetBytes</span><span class="p">(</span><span class="n">plainText</span><span class="p">));</span>

                <span class="c1">// Convert byte array to a string   </span>
                <span class="n">StringBuilder</span> <span class="n">builder</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">StringBuilder</span><span class="p">();</span>
                <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">bytes</span><span class="p">.</span><span class="n">Length</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span>
                <span class="p">{</span>
                    <span class="n">builder</span><span class="p">.</span><span class="nf">Append</span><span class="p">(</span><span class="n">bytes</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="nf">ToString</span><span class="p">(</span><span class="s">"x2"</span><span class="p">));</span>
                <span class="p">}</span>
                <span class="k">return</span> <span class="n">builder</span><span class="p">.</span><span class="nf">ToString</span><span class="p">();</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Click right button on class library project -&gt; Package -&gt; General</li>
  <li>Mark “Produce a package file during build operations”</li>
  <li>Type Package ID, Package Version, Authors, Company, Product, Description</li>
  <li>Type repository URL – A github repository and save</li>
  <li>Now you will see the csproj file as follows</li>
</ul>

<p><strong>CryptoEngine.csproj</strong></p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;Project</span> <span class="na">Sdk=</span><span class="s">"Microsoft.NET.Sdk"</span><span class="nt">&gt;</span>

  <span class="nt">&lt;PropertyGroup&gt;</span>
    <span class="nt">&lt;TargetFramework&gt;</span>net6.0<span class="nt">&lt;/TargetFramework&gt;</span>
    <span class="nt">&lt;ImplicitUsings&gt;</span>enable<span class="nt">&lt;/ImplicitUsings&gt;</span>
    <span class="nt">&lt;Nullable&gt;</span>enable<span class="nt">&lt;/Nullable&gt;</span>
    <span class="nt">&lt;GeneratePackageOnBuild&gt;</span>True<span class="nt">&lt;/GeneratePackageOnBuild&gt;</span>
    <span class="nt">&lt;PackageId&gt;</span>Mahedee.CryptoEngine<span class="nt">&lt;/PackageId&gt;</span>
    <span class="nt">&lt;Version&gt;</span>1.0.0<span class="nt">&lt;/Version&gt;</span>
    <span class="nt">&lt;Authors&gt;</span>Mahedee hasan<span class="nt">&lt;/Authors&gt;</span>
    <span class="nt">&lt;Company&gt;</span>Mahedee.NET<span class="nt">&lt;/Company&gt;</span>
    <span class="nt">&lt;Product&gt;</span>CryptoEngine<span class="nt">&lt;/Product&gt;</span>
    <span class="nt">&lt;Description&gt;</span>Chipper text generator<span class="nt">&lt;/Description&gt;</span>
    <span class="nt">&lt;RepositoryUrl&gt;</span>https://github.com/mahedee/public-packages<span class="nt">&lt;/RepositoryUrl&gt;</span>
  <span class="nt">&lt;/PropertyGroup&gt;</span>

<span class="nt">&lt;/Project&gt;</span>

</code></pre></div></div>

<p><strong>Step 4: Create a NuGet Package</strong></p>

<ul>
  <li>Click right button on project and select Pack</li>
  <li>A NuGet package will be generated in bin/Debug folder – In this case the nuget package name is Mahedee.CryptoEngine.1.0.0.nupkg</li>
  <li>Or, Go to the directory where .csproj file exists and right the following command to generate nuget package</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">dotnet</span> <span class="nf">pack</span>
</code></pre></div></div>

<p><strong>Step 5: Push NuGet package to GitHub Package Registry</strong></p>

<ul>
  <li>Go to the directory where package generated – bin/Debug in this case.</li>
  <li>Type following command</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">dotnet</span> <span class="nf">nuget</span> <span class="nf">push</span> <span class="nf">.\Mahedee.CryptoEngine.1.0.0.nupkg</span> <span class="nf">--api-key</span> <span class="p">&lt;</span><span class="nf">your</span> <span class="nf">github</span> <span class="nf">access</span> <span class="nf">token</span><span class="p">&gt;</span> <span class="nf">--source</span> <span class="nf">github-mahedee</span>
</code></pre></div></div>

<p>Here github-mahedee is my nuget source name for visual studio. Already added in step – 2.</p>

<ul>
  <li>Now login to your Github account and go to Packages tab, you will see a package is uploaded. In this case package name is Mahedee.CryptoEngine</li>
</ul>

<p><strong>Step 6: Use already uploaded package in a project</strong></p>
<ul>
  <li>If Nuget package source is not added, add it using step – 2</li>
  <li>Go to package manager console</li>
  <li>Select Package Source as “github-mahedee” and type following command</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Mahedee.CryptoEngine</span>
</code></pre></div></div>

<ul>
  <li>Or right button on project -&gt; Manage Nuget Packages</li>
  <li>Select Package source “github-mahedee”</li>
  <li>Browse and install package Mahedee.CryptoEngine</li>
</ul>

<p><strong><a href="https://github.com/mahedee/code-sample02/tree/main/dotnet-core-nuget-github">Source code</a></strong></p>]]></content><author><name>Mahedee Hasan</name></author><category term="C#" /><category term="ASP.NET Core" /><category term="GitHub" /><category term="NuGet" /><category term="Packages" /><category term="csharp" /><category term="aspnetcore" /><category term="github" /><category term="nuget" /><category term="packages" /><summary type="html"><![CDATA[GitHub packages registries is most popular now a days. It offers different packages registries for most used package managers, such as NuGet, npm, Docker etc. In this article, I will show you how to host a .net core NuGet Package in GitHub Packages Registry.]]></summary></entry><entry><title type="html">Configure QoS in API Gateway using ocelot and Polly</title><link href="https://mahedee.net//Configure-QoS-in-API-Gateway-using-ocelot-and-Polly/" rel="alternate" type="text/html" title="Configure QoS in API Gateway using ocelot and Polly" /><published>2022-06-07T00:00:00+00:00</published><updated>2022-06-07T00:00:00+00:00</updated><id>https://mahedee.net//Configure-QoS-in-API-Gateway-using-ocelot-and-Polly</id><content type="html" xml:base="https://mahedee.net//Configure-QoS-in-API-Gateway-using-ocelot-and-Polly/"><![CDATA[<p><strong>Introduction</strong><br />
API Gateway is an entry point for backend application. It maintains routing, authentication, logging, service discovery etc. Ocelot is used to design and develop API gateway for .net based application. QoS is generally configured in API gateway which provides different priorities for different applications, users or traffic. In this article, we will configure and discuss Quality of Services (QoS) using ocelot and Polly on ASP.NET Core web API project.</p>

<p><strong>What is Quality of Service (QoS)?</strong><br />
QoS provides different priorities to different applications, users or data flow. We have already mentioned, Ocelot is used to design API Gateway and Ocelot uses Polly to achieve QoS.</p>

<p>The QoSOptions node contains three important properties.</p>
<ul>
  <li>
    <p><strong>ExceptionsAllowedBeforeBreaking</strong><br />
This value must greater than 0. It means that the circuit breaker will break after a certain number of exceptions occur. For example:</p>
  </li>
  <li>
    <p><strong>DurationOfBreak</strong><br />
This value specifies how long the circuit breaker will stay open after it is tripped. The unit of this value is milliseconds. For example: 5000 means 5 seconds</p>
  </li>
  <li>
    <p><strong>TimeoutValue</strong><br />
This value specifies that a request will automatically be timed out if it takes more than this value. The unit of this value is milliseconds as well. For example: 3000 means 3 seconds.</p>
  </li>
</ul>

<p><strong>Tools and Technology used</strong></p>
<ul>
  <li>Visual Studio 2022</li>
  <li>.NET 6.0</li>
  <li>In Memory Database</li>
  <li>Entity Framework</li>
  <li>ASP.NET Core Web API</li>
  <li>Visual C#</li>
  <li>Ocelot and</li>
  <li>MMLib.SwaggerForOcelot</li>
</ul>

<p><strong>Implementation</strong></p>

<p><strong>Step 1: Create solution and projects.</strong></p>

<ul>
  <li>Create a solution name QoS.</li>
  <li>Add 2 new web api projects, name – Catalog.API, BFF.Web<br />
Here, BFF.Web project will act as API Gateway.</li>
</ul>

<p><strong>Step 2: Install nuget packages.</strong></p>

<ul>
  <li>Install following nuget packages in Catalog.API</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore.InMemory</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore.SqlServer</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore.Tools</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.VisualStudio.Web.CodeGeneration.Design</span>
</code></pre></div></div>

<ul>
  <li>Install following nuget packages in BFF.Web</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">MMLib.SwaggerForOcelot</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Ocelot</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Ocelot.Provider.Polly</span>
</code></pre></div></div>

<p><strong>Step 3: Organize Catalog.API</strong></p>

<ul>
  <li>Create CatalogItem model in Model folder</li>
</ul>

<p><strong>CatalogItem.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System.ComponentModel.DataAnnotations</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.ComponentModel.DataAnnotations.Schema</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Catalog.API.Model</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CatalogItem</span>
    <span class="p">{</span>
        <span class="p">[</span><span class="n">Key</span><span class="p">]</span>
        <span class="p">[</span><span class="nf">DatabaseGenerated</span><span class="p">(</span><span class="n">DatabaseGeneratedOption</span><span class="p">.</span><span class="n">Identity</span><span class="p">)]</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">string</span> <span class="n">Description</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">decimal</span> <span class="n">Price</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">int</span> <span class="n">AvailableStock</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">int</span> <span class="n">RestockThreshold</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create DbContext class as CatalogContext in Db folder</li>
</ul>

<p><strong>CatalogContext.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Catalog.API.Model</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Catalog.API.Db</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CatalogContext</span> <span class="p">:</span> <span class="n">DbContext</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">CatalogContext</span><span class="p">(</span><span class="n">DbContextOptions</span><span class="p">&lt;</span><span class="n">CatalogContext</span><span class="p">&gt;</span> <span class="n">options</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
        <span class="p">{</span>

        <span class="p">}</span>

        <span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">OnConfiguring</span><span class="p">(</span><span class="n">DbContextOptionsBuilder</span> <span class="n">optionsBuilder</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">base</span><span class="p">.</span><span class="nf">OnConfiguring</span><span class="p">(</span><span class="n">optionsBuilder</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">DbSet</span><span class="p">&lt;</span><span class="n">CatalogItem</span><span class="p">&gt;</span> <span class="n">CatalogItems</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create SeedDataProvider class in Db folder</li>
</ul>

<p><strong>SeedDataProvider.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Catalog.API.Model</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Catalog.API.Db</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">SeedDataProvider</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Initialize</span><span class="p">(</span><span class="n">CatalogContext</span> <span class="n">catalogContext</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span><span class="p">(!</span><span class="n">catalogContext</span><span class="p">.</span><span class="n">CatalogItems</span><span class="p">.</span><span class="nf">Any</span><span class="p">())</span>
            <span class="p">{</span>
                <span class="kt">var</span> <span class="n">catalogs</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">CatalogItem</span><span class="p">&gt;</span>
                <span class="p">{</span>
                    <span class="k">new</span> <span class="n">CatalogItem</span>
                    <span class="p">{</span>
                        <span class="n">Name</span> <span class="p">=</span> <span class="s">"T-Shirt"</span><span class="p">,</span>
                        <span class="n">Description</span> <span class="p">=</span> <span class="s">"Cats Eye T-Shirt"</span><span class="p">,</span>
                        <span class="n">Price</span> <span class="p">=</span> <span class="m">1000</span><span class="p">,</span>
                        <span class="n">AvailableStock</span> <span class="p">=</span> <span class="m">100</span><span class="p">,</span>
                        <span class="n">RestockThreshold</span> <span class="p">=</span> <span class="m">10</span>
                    <span class="p">},</span>

                    <span class="k">new</span> <span class="n">CatalogItem</span>
                    <span class="p">{</span>
                        <span class="n">Name</span> <span class="p">=</span> <span class="s">"Samsung Mobile"</span><span class="p">,</span>
                        <span class="n">Description</span> <span class="p">=</span> <span class="s">"Samsung A30"</span><span class="p">,</span>
                        <span class="n">Price</span> <span class="p">=</span> <span class="m">30000</span><span class="p">,</span>
                        <span class="n">AvailableStock</span> <span class="p">=</span> <span class="m">100</span><span class="p">,</span>
                        <span class="n">RestockThreshold</span> <span class="p">=</span> <span class="m">5</span>
                    <span class="p">},</span>

                    <span class="k">new</span> <span class="n">CatalogItem</span>
                    <span class="p">{</span>
                        <span class="n">Name</span> <span class="p">=</span> <span class="s">"Meril Beauty Soap"</span><span class="p">,</span>
                        <span class="n">Description</span> <span class="p">=</span> <span class="s">"Beauty Soap"</span><span class="p">,</span>
                        <span class="n">Price</span> <span class="p">=</span> <span class="m">40</span><span class="p">,</span>
                        <span class="n">AvailableStock</span> <span class="p">=</span> <span class="m">500</span><span class="p">,</span>
                        <span class="n">RestockThreshold</span> <span class="p">=</span> <span class="m">20</span>
                    <span class="p">}</span>
                <span class="p">};</span>

                <span class="n">catalogContext</span><span class="p">.</span><span class="n">CatalogItems</span><span class="p">.</span><span class="nf">AddRange</span><span class="p">(</span><span class="n">catalogs</span><span class="p">);</span>
                <span class="n">catalogContext</span><span class="p">.</span><span class="nf">SaveChanges</span><span class="p">();</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Modify Program class as follows.</li>
</ul>

<p><strong>Program.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Catalog.API.Db</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="n">WebApplication</span><span class="p">.</span><span class="nf">CreateBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>

<span class="c1">// Add services to the container.</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">();</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddDbContext</span><span class="p">&lt;</span><span class="n">CatalogContext</span><span class="p">&gt;(</span><span class="n">opt</span> <span class="p">=&gt;</span> <span class="n">opt</span><span class="p">.</span><span class="nf">UseInMemoryDatabase</span><span class="p">(</span><span class="s">"CatalogDB"</span><span class="p">));</span>

<span class="c1">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddEndpointsApiExplorer</span><span class="p">();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddSwaggerGen</span><span class="p">();</span>

<span class="kt">var</span> <span class="n">app</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

<span class="c1">// For Seed data generation</span>
<span class="k">using</span><span class="p">(</span><span class="kt">var</span> <span class="n">scope</span> <span class="p">=</span> <span class="n">app</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">CreateScope</span><span class="p">())</span>
<span class="p">{</span>
    <span class="kt">var</span> <span class="n">services</span> <span class="p">=</span> <span class="n">scope</span><span class="p">.</span><span class="n">ServiceProvider</span><span class="p">;</span>
    <span class="kt">var</span> <span class="n">db</span> <span class="p">=</span> <span class="n">services</span><span class="p">.</span><span class="n">GetRequiredService</span><span class="p">&lt;</span><span class="n">CatalogContext</span><span class="p">&gt;();</span>
    <span class="n">SeedDataProvider</span><span class="p">.</span><span class="nf">Initialize</span><span class="p">(</span><span class="n">db</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// Configure the HTTP request pipeline.</span>
<span class="k">if</span> <span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">Environment</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
<span class="p">{</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwagger</span><span class="p">();</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwaggerUI</span><span class="p">();</span>
<span class="p">}</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseHttpsRedirection</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseAuthorization</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">MapControllers</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>

</code></pre></div></div>

<p>Here, the following line is used to configure in memory database</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddDbContext</span><span class="p">&lt;</span><span class="n">CatalogContext</span><span class="p">&gt;(</span><span class="n">opt</span> <span class="p">=&gt;</span> <span class="n">opt</span><span class="p">.</span><span class="nf">UseInMemoryDatabase</span><span class="p">(</span><span class="s">"CatalogDB"</span><span class="p">));</span>
</code></pre></div></div>

<p>The following code snippet is used to initialize seed data</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span><span class="p">(</span><span class="kt">var</span> <span class="n">scope</span> <span class="p">=</span> <span class="n">app</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">CreateScope</span><span class="p">())</span>
<span class="p">{</span>
    <span class="kt">var</span> <span class="n">services</span> <span class="p">=</span> <span class="n">scope</span><span class="p">.</span><span class="n">ServiceProvider</span><span class="p">;</span>
    <span class="kt">var</span> <span class="n">db</span> <span class="p">=</span> <span class="n">services</span><span class="p">.</span><span class="n">GetRequiredService</span><span class="p">&lt;</span><span class="n">CatalogContext</span><span class="p">&gt;();</span>
    <span class="n">SeedDataProvider</span><span class="p">.</span><span class="nf">Initialize</span><span class="p">(</span><span class="n">db</span><span class="p">);</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Add CatalogItemsController class in Controllers folder as follows.</li>
</ul>

<p><strong>CatalogItemsController.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Catalog.API.Db</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Catalog.API.Model</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Catalog.API.Controllers</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
    <span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CatalogItemsController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">CatalogContext</span> <span class="n">_context</span><span class="p">;</span>
        <span class="k">private</span> <span class="k">static</span> <span class="kt">int</span> <span class="n">_count</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">CatalogItemsController</span><span class="p">(</span><span class="n">CatalogContext</span> <span class="n">context</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_context</span> <span class="p">=</span> <span class="n">context</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/CatalogItems</span>
        <span class="p">[</span><span class="n">HttpGet</span><span class="p">]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">CatalogItem</span><span class="p">&gt;&gt;&gt;</span> <span class="nf">GetCatalogItems</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">_count</span><span class="p">++;</span>
            <span class="k">if</span><span class="p">(</span><span class="n">_count</span> <span class="p">&lt;=</span> <span class="m">3</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="c1">// Sleep for 4 seconds</span>
                <span class="n">Thread</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="m">4000</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">CatalogItems</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">CatalogItems</span><span class="p">.</span><span class="nf">ToListAsync</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/CatalogItems/5</span>
        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">CatalogItem</span><span class="p">&gt;&gt;</span> <span class="nf">GetCatalogItem</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">CatalogItems</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="kt">var</span> <span class="n">catalogItem</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">CatalogItems</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">catalogItem</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="n">catalogItem</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// PUT: api/CatalogItems/5</span>
        <span class="c1">// To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754</span>
        <span class="p">[</span><span class="nf">HttpPut</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">PutCatalogItem</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="n">CatalogItem</span> <span class="n">catalogItem</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">id</span> <span class="p">!=</span> <span class="n">catalogItem</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">_context</span><span class="p">.</span><span class="nf">Entry</span><span class="p">(</span><span class="n">catalogItem</span><span class="p">).</span><span class="n">State</span> <span class="p">=</span> <span class="n">EntityState</span><span class="p">.</span><span class="n">Modified</span><span class="p">;</span>

            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">DbUpdateConcurrencyException</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(!</span><span class="nf">CatalogItemExists</span><span class="p">(</span><span class="n">id</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
                <span class="p">}</span>
                <span class="k">else</span>
                <span class="p">{</span>
                    <span class="k">throw</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// POST: api/CatalogItems</span>
        <span class="c1">// To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754</span>
        <span class="p">[</span><span class="n">HttpPost</span><span class="p">]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">CatalogItem</span><span class="p">&gt;&gt;</span> <span class="nf">PostCatalogItem</span><span class="p">(</span><span class="n">CatalogItem</span> <span class="n">catalogItem</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">CatalogItems</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">Problem</span><span class="p">(</span><span class="s">"Entity set 'CatalogContext.CatalogItems'  is null."</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="n">_context</span><span class="p">.</span><span class="n">CatalogItems</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">catalogItem</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>

            <span class="k">return</span> <span class="nf">CreatedAtAction</span><span class="p">(</span><span class="s">"GetCatalogItem"</span><span class="p">,</span> <span class="k">new</span> <span class="p">{</span> <span class="n">id</span> <span class="p">=</span> <span class="n">catalogItem</span><span class="p">.</span><span class="n">Id</span> <span class="p">},</span> <span class="n">catalogItem</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">// DELETE: api/CatalogItems/5</span>
        <span class="p">[</span><span class="nf">HttpDelete</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">DeleteCatalogItem</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">CatalogItems</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="kt">var</span> <span class="n">catalogItem</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">CatalogItems</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">catalogItem</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">_context</span><span class="p">.</span><span class="n">CatalogItems</span><span class="p">.</span><span class="nf">Remove</span><span class="p">(</span><span class="n">catalogItem</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>

            <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="kt">bool</span> <span class="nf">CatalogItemExists</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">CatalogItems</span><span class="p">?.</span><span class="nf">Any</span><span class="p">(</span><span class="n">e</span> <span class="p">=&gt;</span> <span class="n">e</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">id</span><span class="p">)).</span><span class="nf">GetValueOrDefault</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 4: Organize BFF.Web</strong></p>

<p>In this stage, we are going to configure a gateway to communicate with other services using ocelot.</p>

<ul>
  <li>
    <p>Create a folder name - Routes.dev in root directory and add the following files.  ocelot.catalog-api.json, ocelot.global.json, ocelot.SwaggerEndPoints.json in Routes.dev folder.</p>
  </li>
  <li>
    <p>Now modify the json files as follows.</p>
  </li>
</ul>

<p><strong>ocelot.catalog-api.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">
</span><span class="p">{</span><span class="w">
  </span><span class="nl">"Routes"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"DownstreamPathTemplate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/{everything}"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"DownstreamScheme"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"SwaggerKey"</span><span class="p">:</span><span class="w"> </span><span class="s2">"catalog-api"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"DownstreamHostAndPorts"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"Host"</span><span class="p">:</span><span class="w"> </span><span class="s2">"localhost"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Port"</span><span class="p">:</span><span class="w"> </span><span class="s2">"7282"</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"UpstreamPathTemplate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/catalog/{everything}"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"UpstreamHttpMethod"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"GET"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"POST"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"PUT"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"DELETE"</span><span class="w">
      </span><span class="p">],</span><span class="w">

      </span><span class="nl">"QoSOptions"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"ExceptionsAllowedBeforeBreaking"</span><span class="p">:</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w">
        </span><span class="nl">"DurationOfBreak"</span><span class="p">:</span><span class="w"> </span><span class="mi">5000</span><span class="p">,</span><span class="w">
        </span><span class="nl">"TimeoutValue"</span><span class="p">:</span><span class="w"> </span><span class="mi">3000</span><span class="w">
      </span><span class="p">}</span><span class="w">

    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<p>QoSOptions section of the above file basically configure QoS for Catalog service. The above configuration means that if the server does not response for 3 minutes, it will throw timeout exception. If the server throws two exceptions, it will not be accessible for five minutes.</p>

<p><strong>ocelot.global.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">
</span><span class="p">{</span><span class="w">
  </span><span class="nl">"GlobalConfiguration"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"BaseUrl"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https://localhost:7205"</span><span class="w">
    </span><span class="err">//</span><span class="nl">"ServiceDiscoveryProvider"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">

    </span><span class="err">//</span><span class="w">  </span><span class="nl">"Host"</span><span class="p">:</span><span class="w"> </span><span class="s2">"localhost"</span><span class="p">,</span><span class="w">
    </span><span class="err">//</span><span class="w">  </span><span class="nl">"Port"</span><span class="p">:</span><span class="w"> </span><span class="mi">7205</span><span class="w">
    </span><span class="err">//</span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p><strong>ocelot.SwaggerEndPoints.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">
</span><span class="p">{</span><span class="w">
  </span><span class="nl">"SwaggerEndPoints"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"bffweb"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"TransformByOcelotConfig"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Config"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"Name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"BFF.Web"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1.0"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https://localhost:7205/swagger/v1/swagger.json"</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">},</span><span class="w">

    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"catalog-api"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"TransformByOcelotConfig"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Config"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"Name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Catalog.API"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1.0"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https://localhost:7205/catalog/swagger/v1/swagger.json"</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">


</span></code></pre></div></div>

<p>Note: I have added the following code block in CatalogItemController to produce timeout manually.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="p">[</span><span class="n">HttpGet</span><span class="p">]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">CatalogItem</span><span class="p">&gt;&gt;&gt;</span> <span class="nf">GetCatalogItems</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">_count</span><span class="p">++;</span>
            <span class="k">if</span><span class="p">(</span><span class="n">_count</span> <span class="p">&lt;=</span> <span class="m">3</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="c1">// Sleep for 4 seconds</span>
                <span class="n">Thread</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="m">4000</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">CatalogItems</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">CatalogItems</span><span class="p">.</span><span class="nf">ToListAsync</span><span class="p">();</span>
        <span class="p">}</span>

</code></pre></div></div>

<p>Step 5: Run and test the application</p>

<p>Now run both web projects. In the BFF.Web, select Catalog.API-1.0 from swagger definition (“Select a definition on the top right corner”) and execute the api (CatalogItems) as follows.</p>

<p><img src="/assets/images/posts/2022/qos-01.PNG" alt="" /></p>

<p>When we visit the first time (or quickly second time), it tells us that circuit is breaking for 5000 ms. Look at the console of BFF.Web.</p>

<p><img src="/assets/images/posts/2022/qos-02.PNG" alt="" /></p>

<p>Then, the second time (quickly) it tells us that the circuit is open, and we cannot visit the service for 3 seconds as follows.</p>

<p><img src="/assets/images/posts/2022/qos-03.PNG" alt="" /></p>

<p>After 3 seconds, the service is accessible. If you execute now, you will see the output like below.</p>

<p><img src="/assets/images/posts/2022/qos-03-4.PNG" alt="" /></p>

<p><strong><a href="https://github.com/mahedee/code-sample02/tree/main/api-gateway-ocelot-qos">Source code</a></strong></p>]]></content><author><name>Mahedee Hasan</name></author><category term="C#" /><category term="ASP.NET Core" /><category term="Web API" /><category term="Microservices" /><category term="Ocelot" /><category term="Poly" /><category term="csharp" /><category term="aspnetcore" /><category term="webapi" /><category term="microservices" /><category term="ocelot" /><category term="poly" /><summary type="html"><![CDATA[API Gateway is an entry point for backend application. It maintains routing, authentication, logging, service discovery etc. Ocelot is used to design and develop API gateway for .net based application. QoS is generally configured in API gateway which provides different priorities for different applications, users or traffic. In this article, we will configure and discuss Quality of Services (QoS) using ocelot and Polly on ASP.NET Core web API project]]></summary></entry><entry><title type="html">How to create SSH fingerprint for Azure DevOps</title><link href="https://mahedee.net//how-to-create-ssh-fingerprint-for-azure-devops/" rel="alternate" type="text/html" title="How to create SSH fingerprint for Azure DevOps" /><published>2022-05-10T00:00:00+00:00</published><updated>2022-05-10T00:00:00+00:00</updated><id>https://mahedee.net//how-to-create-ssh-fingerprint-for-azure-devops</id><content type="html" xml:base="https://mahedee.net//how-to-create-ssh-fingerprint-for-azure-devops/"><![CDATA[<p>It seems easy to create SSH fingerprint and connect Azure DevOps or Github. But, sometimes, we face some problem which is hectic. In this step by step article, I am going to show you how to create SSH fingerprint for Azure DevOps and clone a repository.</p>

<p><strong>Step 1:Create SSH Keys</strong></p>

<ul>
  <li>Create a folder if not exists - name .ssh in the following directory.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>C:\Users\mahedee
</code></pre></div></div>

<ul>
  <li>
    <p>Go to run and type: <code class="language-plaintext highlighter-rouge">%userprofile%\.ssh</code></p>
  </li>
  <li>
    <p>Run the powershell command in the following directory.</p>
  </li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>C:\Users\mahedee\.ssh
</code></pre></div></div>

<ul>
  <li>Run the follwing command on powershell.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">ssh-keygen</span> <span class="nf">-C</span> <span class="nf">"test-git-dev-azure.com"</span>
</code></pre></div></div>

<p><img src="/assets/images/posts/2022/ssh-01.PNG" alt="" /></p>

<p><strong>Step 2: Add the public key to Azure DevOps</strong></p>

<ul>
  <li>Now go to the Azure DevOps web portal. Go to the avatar on the upper right corner. Select SSH public keys.</li>
</ul>

<p><img src="/assets/images/posts/2022/ssh-02.PNG" alt="" /></p>

<ul>
  <li>Select + New Key button on the upper right corner.</li>
</ul>

<p><img src="/assets/images/posts/2022/ssh-03.PNG" alt="" /></p>

<ul>
  <li>Copy the key from <code class="language-plaintext highlighter-rouge">C:\Users\mahedee\.ssh\id_rsa.pub</code> . The content of the id_rsa.pub file that you have already generated and pest the content on Public Key Data text box as belows.</li>
</ul>

<p><img src="/assets/images/posts/2022/ssh-04.PNG" alt="" /></p>

<ul>
  <li>Now click add button.</li>
</ul>

<p><strong>Step 3: Clone your repository</strong></p>

<ul>
  <li>Now run powershell command and clone a repository using SSH as bellows.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">git</span> <span class="nf">clone</span> <span class="nf">git@ssh.dev.azure.com:v3</span><span class="nv">/yourorganization/yourrepository</span>
</code></pre></div></div>

<p><strong>Troubleshooting</strong></p>

<p><strong>Problem</strong></p>

<p>After configuring SSH, I got the following error while tried to clone repository.</p>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">git</span> <span class="nf">clone</span> <span class="nf">git@ssh.dev.azure.com:v3</span><span class="nv">/yourorganization/yourrepository</span>
</code></pre></div></div>

<p>I was getting the following message:</p>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">git@ssh.dev.azure.com's</span> <span class="nf">password:</span>
</code></pre></div></div>

<p>I have tried all using all sorts of password but failed.</p>

<p><strong>Solution</strong></p>

<ol>
  <li>OpenSSH Authentication Agent was disabled on my PC. I started the service.</li>
</ol>

<p><img src="/assets/images/posts/2022/ssh-05.PNG" alt="" /></p>

<ol>
  <li>SSH.exe was not added on environment varaible. I have added it on environment variable.</li>
</ol>

<p><img src="/assets/images/posts/2022/ssh-06.PNG" alt="" /></p>

<p>Then I tried to clone the repository and It was working fine.</p>]]></content><author><name>Mahedee Hasan</name></author><category term="Command" /><category term="Source Control" /><category term="command" /><category term="sourcecontrol" /><summary type="html"><![CDATA[It seems easy to create SSH fingerprint and connect Azure DevOps or Github. But, sometimes, we face some problem which is hectic. In this step by step article, I am going to show you how to create SSH fingerprint for Azure DevOps and clone a repository.]]></summary></entry><entry><title type="html">Tips and tricks for docker</title><link href="https://mahedee.net//docker-tips-and-tricks/" rel="alternate" type="text/html" title="Tips and tricks for docker" /><published>2022-05-06T00:00:00+00:00</published><updated>2022-05-06T00:00:00+00:00</updated><id>https://mahedee.net//docker-tips-and-tricks</id><content type="html" xml:base="https://mahedee.net//docker-tips-and-tricks/"><![CDATA[<h2 id="most-used-docker-commands-for-everyday">Most used docker commands for everyday</h2>

<ul>
  <li><strong>Docker help</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">$</span> <span class="nf">docker</span> <span class="nf">-h</span>
</code></pre></div></div>

<ul>
  <li><strong>To check docker version</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">$</span> <span class="nf">docker</span> <span class="nf">--version</span>
</code></pre></div></div>

<ul>
  <li><strong>Login to docker</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">$</span> <span class="nf">docker</span> <span class="nf">login</span> 
</code></pre></div></div>

<ul>
  <li><strong>To see list of images</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">$</span> <span class="nf">docker</span> <span class="nf">image</span> <span class="nf">ls</span>
</code></pre></div></div>

<ul>
  <li><strong>List of Containers</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">$</span> <span class="nf">docker</span> <span class="nf">container</span> <span class="nf">ls</span>
</code></pre></div></div>

<ul>
  <li><strong>See list of running containers</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">docker</span> <span class="nf">ps</span>
</code></pre></div></div>

<ul>
  <li><strong>Restart a container</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">docker</span> <span class="nf">restart</span> <span class="p">&lt;</span><span class="nf">container</span> <span class="nf">name</span><span class="p">&gt;</span>
</code></pre></div></div>

<ul>
  <li><strong>To stop docker container</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">$</span> <span class="nf">docker</span> <span class="nf">stop</span> <span class="p">&lt;</span><span class="nf">container</span> <span class="nf">id</span><span class="p">&gt;</span>
</code></pre></div></div>

<ul>
  <li><strong>Remove all docker images</strong>
    <div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">docker</span> <span class="nf">rmi</span> <span class="nf">$</span><span class="s">(docker images -q)</span>
</code></pre></div>    </div>
  </li>
  <li><strong>Stop all docker containers</strong></li>
</ul>

<pre><code class="language-cmd">docker stop $(docker ps -a -q)
</code></pre>
<p><strong>Remove all docker containers</strong></p>
<pre><code class="language-cmd">docker rm $(docker ps -a -q)
</code></pre>

<p><strong>Deleting no longer needed containers (stopped)</strong></p>
<pre><code class="language-cmd">docker container prune
</code></pre>

<p><strong>Deleting no longer needed images</strong></p>
<pre><code class="language-cmd">docker image prune
</code></pre>

<p><strong>Delete all volumes, which are not used by any existing container</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker volume prune
</code></pre></div></div>
<p><strong>Same for unused networks</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker network prune
</code></pre></div></div>

<ul>
  <li><strong>To run docker composer</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">$</span> <span class="nf">docker-compose</span> <span class="nf">up</span>
</code></pre></div></div>

<ul>
  <li><strong>Build a docker image</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">Syntax:</span>
<span class="nf">$</span> <span class="nf">docker</span> <span class="nf">build</span> <span class="nf">-t</span> <span class="p">&lt;</span><span class="nf">any</span> <span class="nf">tag</span> <span class="nf">name</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nf">directory</span> <span class="nf">of</span> <span class="nf">the</span> <span class="nf">docker</span> <span class="nf">file</span><span class="p">&gt;</span>
<span class="nf">Example:</span>
<span class="nf">$</span> <span class="nf">docker</span> <span class="nf">build</span> <span class="nf">-t</span> <span class="nf">aspnetcore</span><span class="nv">/generator</span> <span class="nf">.</span>   
<span class="nf">Explanation:</span> 
<span class="nf">Here</span> <span class="nf">aspnetcore</span><span class="nv">/generator</span> <span class="nf">is</span> <span class="nf">tag</span> <span class="nf">name</span> <span class="kr">and</span> <span class="nf">'.'</span> <span class="nf">means</span> <span class="nf">current</span> <span class="nf">directory</span>
</code></pre></div></div>

<ul>
  <li><strong>To run a docker image</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">docker</span> <span class="nb">run</span> <span class="nf">--rm</span> <span class="nf">-it</span> <span class="nf">-p</span> <span class="nf">8000:80</span> <span class="nf">mcr.microsoft.com</span><span class="nv">/dotnet/core/samples:aspnetapp</span>
</code></pre></div></div>

<p>The sample asp.net core application will run on http://localhost:8000. Here, 8000 is host machine port and 80 is container port.</p>

<ul>
  <li><strong>SSH into container</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">docker</span> <span class="nb">exec</span> <span class="nf">-it</span> <span class="p">&lt;</span><span class="nf">container-id</span><span class="p">&gt;</span> <span class="nf">sh</span>
<span class="p">&gt;&gt;</span><span class="nf">ls</span> <span class="s">(Type ls to see all files and directory)</span>
<span class="p">&gt;&gt;</span><span class="nb">exit</span> <span class="s">(type exit to return from the container)</span>
</code></pre></div></div>

<ul>
  <li><strong>View information about your container using command</strong>
    <div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">PS</span> <span class="nf">C:\Users\mahedee</span><span class="p">&gt;</span> <span class="nf">docker</span> <span class="nb">exec</span> <span class="nf">-it</span> <span class="nf">b73cb9467f5a</span> <span class="nf">sh</span>
<span class="nf">#</span> <span class="nf">cd</span> <span class="nf">..</span>
<span class="nf">#</span> <span class="nf">ls</span>
<span class="nf">app</span>  <span class="nf">bin</span>  <span class="nf">boot</span>  <span class="nf">dev</span>  <span class="nf">etc</span>  <span class="nf">home</span>  <span class="nf">lib</span>  <span class="nf">lib64</span>  <span class="nf">media</span>  <span class="nf">mnt</span>  <span class="nf">opt</span>  <span class="nf">proc</span>  <span class="nf">remote_debugger</span>  <span class="nf">root</span>  <span class="nb">run</span>  <span class="nf">sbin</span>  <span class="nf">src</span>  <span class="nf">srv</span>  <span class="nf">sys</span>  <span class="nf">tmp</span>  <span class="nf">usr</span>  <span class="nf">var</span>
<span class="nf">#</span> <span class="nf">cd</span> <span class="nf">app</span>
<span class="nf">#</span> <span class="nf">ls</span>
<span class="nf">Controllers</span>  <span class="nf">Dockerfile</span>  <span class="nf">HRM.API.csproj</span>  <span class="nf">HRM.API.csproj.user</span>  <span class="nf">Program.cs</span>  <span class="nf">Properties</span>  <span class="nf">WeatherForecast.cs</span>  <span class="nf">appsettings.Development.json</span>  <span class="nf">appsettings.json</span>  <span class="nf">bin</span>  <span class="nf">obj</span>
<span class="nf">#</span> <span class="nf">cd</span> <span class="nf">..</span>
<span class="nf">#</span> <span class="nf">ls</span>
<span class="nf">app</span>  <span class="nf">bin</span>  <span class="nf">boot</span>  <span class="nf">dev</span>  <span class="nf">etc</span>  <span class="nf">home</span>  <span class="nf">lib</span>  <span class="nf">lib64</span>  <span class="nf">media</span>  <span class="nf">mnt</span>  <span class="nf">opt</span>  <span class="nf">proc</span>  <span class="nf">remote_debugger</span>  <span class="nf">root</span>  <span class="nb">run</span>  <span class="nf">sbin</span>  <span class="nf">src</span>  <span class="nf">srv</span>  <span class="nf">sys</span>  <span class="nf">tmp</span>  <span class="nf">usr</span>  <span class="nf">var</span>
<span class="nf">#</span> <span class="nf">cd</span> <span class="nf">src</span>
<span class="nf">#</span> <span class="nf">ls</span>
<span class="nf">HRM.API</span>  <span class="nf">HRM.API.sln</span>  <span class="nf">bin</span>  <span class="nf">docker-compose.dcproj</span>  <span class="nf">docker-compose.override.yml</span>  <span class="nf">docker-compose.yml</span>  <span class="nf">obj</span>
<span class="nf">#</span> <span class="nf">cd</span> <span class="nf">bin</span>
<span class="nf">#</span> <span class="nf">ls</span>
<span class="nf">Debug</span>
<span class="nf">#</span> <span class="nf">cd</span> <span class="nf">debug</span>
<span class="nf">#</span> <span class="nf">ls</span>
<span class="nf">HRM.API.deps.json</span>  <span class="nf">HRM.API.exe</span>  <span class="nf">HRM.API.runtimeconfig.json</span>  <span class="nf">Swashbuckle.AspNetCore.Swagger.dll</span>     <span class="nf">Swashbuckle.AspNetCore.SwaggerUI.dll</span>  <span class="nf">appsettings.json</span>
<span class="nf">HRM.API.dll</span>        <span class="nf">HRM.API.pdb</span>  <span class="nf">Microsoft.OpenApi.dll</span>       <span class="nf">Swashbuckle.AspNetCore.SwaggerGen.dll</span>  <span class="nf">appsettings.Development.json</span>
<span class="nf">#</span>
</code></pre></div>    </div>
  </li>
  <li><strong>Run a command in a running container</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">docker</span> <span class="nb">exec</span> <span class="p">[</span><span class="nf">OPTIONS</span><span class="p">]</span> <span class="nf">CONTAINER</span> <span class="nf">COMMAND</span> <span class="p">[</span><span class="nf">ARG...</span><span class="p">]</span>

<span class="nf">Example</span>
<span class="nf">$</span> <span class="nf">docker</span> <span class="nb">exec</span> <span class="nf">-ti</span> <span class="mf">34717</span> <span class="nf">sh</span> <span class="nf">-c</span> <span class="nf">"echo</span> <span class="nf">a</span> <span class="nf">&amp;&amp;</span> <span class="nf">echo</span> <span class="nf">b"</span>
<span class="kr">or</span>
<span class="nf">$</span> <span class="nf">docker</span> <span class="nb">exec</span> <span class="nf">-ti</span> <span class="nf">my_container</span> <span class="nf">sh</span> <span class="nf">-c</span> <span class="nf">"echo</span> <span class="nf">a</span> <span class="nf">&amp;&amp;</span> <span class="nf">echo</span> <span class="nf">b"</span>
<span class="kr">or</span> 
<span class="nf">$</span> <span class="nf">docker</span> <span class="nb">exec</span> <span class="nf">-ti</span> <span class="nf">my_container</span> <span class="nf">sh</span> <span class="nf">-c</span> <span class="nf">"dir"</span>
</code></pre></div></div>

<ul>
  <li><strong>To run bash in a container</strong></li>
</ul>

<p>Syntax:</p>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">$</span> <span class="nf">docker</span> <span class="nb">exec</span> <span class="nf">-it</span> <span class="p">&lt;</span><span class="nf">container</span> <span class="nf">id</span><span class="p">&gt;</span> <span class="nf">bas</span>
<span class="nf">Example:</span>
<span class="nf">$</span> <span class="nf">docker</span> <span class="nb">exec</span> <span class="nf">-it</span> <span class="nf">2f7</span> <span class="nf">bash</span>
</code></pre></div></div>

<p><strong>View information about your container user Visual Studio</strong></p>

<ul>
  <li>Use Ctrl+Q to activate Visual Studio Search Box, and type containers.</li>
  <li>Or, Go to View &gt; Other Windows &gt; Containers.</li>
</ul>

<p><img src="/assets/images/posts/2022/vs-container.PNG" alt="" /></p>

<p>For more information see <a href="https://docs.microsoft.com/en-us/visualstudio/containers/view-and-diagnose-containers?view=vs-2022">Use the Containers window</a></p>

<ul>
  <li><strong>Mounting a folder name ‘api’ into the container</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">$</span> <span class="nf">docker</span> <span class="nb">run</span> <span class="nf">--rm</span> <span class="nf">-it</span> <span class="nf">-v</span> <span class="nf">$</span><span class="p">{</span><span class="nf">PWD</span><span class="p">}</span><span class="nf">:C:\api</span> <span class="nf">mcr.microsoft.com</span><span class="nv">/dotnet/core/runtime:3.1</span>
</code></pre></div></div>
<p>Here ${PWD} means current directory of host machine map to the directory C:\api into the container</p>

<ul>
  <li><strong>To inspect network and other information of a container</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">$</span> <span class="nf">docker</span> <span class="nf">inspect</span> <span class="p">&lt;</span><span class="nf">container</span> <span class="nf">id</span><span class="p">&gt;</span>
</code></pre></div></div>

<ul>
  <li><strong>Run a docker image</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">Syntax:</span>
<span class="nf">$</span> <span class="nf">docker</span> <span class="nb">run</span> <span class="nf">--rm</span> <span class="nf">-it</span> <span class="nf">-p</span> <span class="p">&lt;</span><span class="nf">host</span> <span class="nf">port</span><span class="p">&gt;</span><span class="nf">:</span><span class="p">&lt;</span><span class="nf">image</span> <span class="nf">port</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nf">any</span> <span class="nf">tag</span> <span class="nf">name</span><span class="p">&gt;</span>
<span class="nf">Example:</span>
<span class="nf">$</span> <span class="nf">docker</span> <span class="nb">run</span> <span class="nf">--rm</span> <span class="nf">-it</span> <span class="nf">-p</span> <span class="nf">8777:80</span> <span class="nf">test2</span>  
<span class="nf">Explanation:</span> 
<span class="nf">Here</span> <span class="nf">test2</span> <span class="nf">is</span> <span class="nf">tag</span> <span class="nf">name</span> <span class="nf">of</span> <span class="nf">the</span> <span class="nf">image</span> <span class="nf">which</span> <span class="nf">already</span> <span class="nf">running</span>
</code></pre></div></div>

<ul>
  <li><strong>Login to docker and push an image</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">$</span> <span class="nf">docker</span> <span class="nf">login</span> 
<span class="nf">$</span> <span class="nf">docker</span> <span class="nf">push</span> <span class="nf">mahedee</span><span class="nv">/simpleapi</span>  
<span class="nf">Explanation:</span> 
<span class="nf">Here</span> <span class="nf">mahedee</span><span class="nv">/simpleapi</span> <span class="nf">is</span> <span class="nf">the</span> <span class="nf">tag</span> <span class="nf">name</span> <span class="nf">of</span> <span class="nf">the</span> <span class="nf">image</span>
</code></pre></div></div>

<ul>
  <li><strong>Setting the API Port with an Environment Variable inside a container</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">$</span> <span class="nf">export</span> <span class="nf">ASPNETCORE_URLS=http:</span><span class="err">/</span><span class="nv">/+:80</span>
</code></pre></div></div>

<ul>
  <li><strong>To see docker event in json format</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">$</span> <span class="nf">docker</span> <span class="nf">events</span> <span class="nf">--format</span> <span class="nf">''</span>

<span class="nf">Tips:</span>
<span class="nf">Run</span> <span class="nf">this</span> <span class="nf">command</span> <span class="nf">in</span> <span class="nf">another</span> <span class="nf">windows</span>
</code></pre></div></div>

<ul>
  <li><strong>To detach docker compose file</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">$</span> <span class="nf">docker-compose</span> <span class="nf">up</span> <span class="nf">-d</span>
</code></pre></div></div>
<ul>
  <li><strong>To see the log while running docker compose file</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">$</span> <span class="nf">docker-compose</span> <span class="nf">logs</span> <span class="nf">-f</span>
</code></pre></div></div>

<ul>
  <li><strong>Stop and remove containers, networks, images, and volumes</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">$</span> <span class="nf">docker-compose</span> <span class="nf">down</span>
</code></pre></div></div>

<ul>
  <li><strong>Remove one or more images</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">$</span> <span class="nf">docker</span> <span class="nf">image</span> <span class="nf">rm</span> <span class="p">&lt;</span><span class="nf">repository</span><span class="p">&gt;</span><span class="nf">:</span><span class="p">&lt;</span><span class="nf">tag</span><span class="p">&gt;</span>
<span class="nf">Example:</span>
<span class="nf">$</span> <span class="nf">docker</span> <span class="nf">image</span> <span class="nf">rm</span> <span class="nf">mahedee</span><span class="nv">/webapi:build</span>
</code></pre></div></div>

<!-- References
https://docs.microsoft.com/en-us/visualstudio/containers/view-and-diagnose-containers?view=vs-2022 

https://docs.microsoft.com/en-us/dotnet/core/docker/build-container?tabs=windows


-->

<p>__</p>]]></content><author><name>Mahedee Hasan</name></author><category term="Docker" /><category term="Commands" /><category term="commands" /><category term="docker" /><summary type="html"><![CDATA[Some tips and tricks for docker may improve your work's quality. Here, I have tried to include some commands, tricks and tips which we use everyday]]></summary></entry><entry><title type="html">How to connect SQL Server from docker container using SSMS</title><link href="https://mahedee.net//how-to-connet-sql-server-from-docker-using-ssms/" rel="alternate" type="text/html" title="How to connect SQL Server from docker container using SSMS" /><published>2022-04-10T00:00:00+00:00</published><updated>2022-04-10T00:00:00+00:00</updated><id>https://mahedee.net//how-to-connet-sql-server-from-docker-using-ssms</id><content type="html" xml:base="https://mahedee.net//how-to-connet-sql-server-from-docker-using-ssms/"><![CDATA[<p>Sometimes we need to access database which is running in container. It’s simple but sometimes we cannot remember. Here, I will show you how to connect SQL Server from docker container using SQL Server Management Studio.</p>

<p><strong>Sample docker-compose.yml</strong></p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="na">sqldbsaga</span><span class="pi">:</span>
   <span class="na">image</span><span class="pi">:</span> <span class="s">mcr.microsoft.com/mssql/server:2019-latest</span> 
</code></pre></div></div>

<p><strong>docker-compose.override.yml</strong></p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="na">sqldbsaga</span><span class="pi">:</span>
   <span class="na">environment</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">SA_PASSWORD=MyPass@word</span>
    <span class="pi">-</span> <span class="s">ACCEPT_EULA=Y</span>
   <span class="na">ports</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s2">"</span><span class="s">5533:1433"</span>
   <span class="na">volumes</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">kyc-saga-sqldb:/var/opt/mssql</span>
</code></pre></div></div>
<p><strong>Now connect using SSMS</strong></p>
<ul>
  <li>Run docker compose file</li>
  <li>Run SQL server management studio</li>
  <li>Server name should be - localhos, port name</li>
  <li>Password would be MyPass@word as below image</li>
</ul>

<p><img src="/assets/images/posts/2022/docker-ssms.PNG" alt="" /></p>

<p>Then, click Connect.</p>]]></content><author><name>Mahedee Hasan</name></author><category term="Docker" /><category term="SQL Server" /><category term="Docker" /><category term="sqlserver" /><summary type="html"><![CDATA[Sometimes we need to access database which is running in container. It's simple but sometimes we cannot remember. Here, I will show you how to connect SQL Server from docker container using SQL Server Management Studio]]></summary></entry></feed>