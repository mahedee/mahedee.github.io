<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://mahedee.net//feed.xml" rel="self" type="application/atom+xml" /><link href="https://mahedee.net//" rel="alternate" type="text/html" /><updated>2024-01-18T23:44:01-04:00</updated><id>https://mahedee.net//feed.xml</id><title type="html">Think Simple</title><subtitle>Think Simple</subtitle><author><name>Mahedee Hasan</name></author><entry><title type="html">Optimistic Concurrency Management in ASP.NET Core Application Using Raw SQL and ADO.NET</title><link href="https://mahedee.net//optimistic_concurrency_management_aspnet_core_using_raw_sql/" rel="alternate" type="text/html" title="Optimistic Concurrency Management in ASP.NET Core Application Using Raw SQL and ADO.NET" /><published>2024-01-18T00:00:00-04:00</published><updated>2024-01-18T00:00:00-04:00</updated><id>https://mahedee.net//optimistic_concurrency_management_aspnet_core_using_raw_sql</id><content type="html" xml:base="https://mahedee.net//optimistic_concurrency_management_aspnet_core_using_raw_sql/"><![CDATA[<p>In a previous article <a href="https://mahedee.net/concurrency_management_in_aspnet_core_applications_with_entity_framework/">here</a>, I discussed various ways to deal with concurrency. Optimistic concurrency is a common method for handling such situations. This article is designed to illustrate the practical aspects of managing optimistic concurrency in an ASP.NET Core application using raw SQL and ADO.NET.</p>

<p><strong>Tools and Technology Used</strong></p>

<ul>
  <li>ASP.net core Web API</li>
  <li>Visual C#</li>
  <li>Entity Framework</li>
  <li>SQL Server</li>
</ul>

<p><strong>Step 1: Create a database in SQL Server name - ConcurrencySQLDB</strong></p>

<p><strong>Step 2: Create a table name Product</strong></p>
<ul>
  <li>Run the following script to create the table</li>
</ul>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="p">[</span><span class="n">dbo</span><span class="p">].[</span><span class="n">Products</span><span class="p">](</span>
	<span class="p">[</span><span class="n">Id</span><span class="p">]</span> <span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="k">IDENTITY</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
	<span class="p">[</span><span class="n">Name</span><span class="p">]</span> <span class="p">[</span><span class="n">nvarchar</span><span class="p">](</span><span class="k">max</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
	<span class="p">[</span><span class="n">Price</span><span class="p">]</span> <span class="p">[</span><span class="nb">decimal</span><span class="p">](</span><span class="mi">18</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
	<span class="p">[</span><span class="n">Quantity</span><span class="p">]</span> <span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
	<span class="p">[</span><span class="n">RowVersion</span><span class="p">]</span> <span class="p">[</span><span class="n">uniqueidentifier</span><span class="p">]</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
 <span class="k">CONSTRAINT</span> <span class="p">[</span><span class="n">PK_Products</span><span class="p">]</span> <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="n">CLUSTERED</span> 
<span class="p">(</span>
	<span class="p">[</span><span class="n">Id</span><span class="p">]</span> <span class="k">ASC</span>
<span class="p">)</span><span class="k">WITH</span> <span class="p">(</span><span class="n">PAD_INDEX</span> <span class="o">=</span> <span class="k">OFF</span><span class="p">,</span> <span class="n">STATISTICS_NORECOMPUTE</span> <span class="o">=</span> <span class="k">OFF</span><span class="p">,</span> <span class="n">IGNORE_DUP_KEY</span> <span class="o">=</span> <span class="k">OFF</span><span class="p">,</span> <span class="n">ALLOW_ROW_LOCKS</span> <span class="o">=</span> <span class="k">ON</span><span class="p">,</span> <span class="n">ALLOW_PAGE_LOCKS</span> <span class="o">=</span> <span class="k">ON</span><span class="p">,</span> <span class="n">OPTIMIZE_FOR_SEQUENTIAL_KEY</span> <span class="o">=</span> <span class="k">OFF</span><span class="p">)</span> <span class="k">ON</span> <span class="p">[</span><span class="k">PRIMARY</span><span class="p">]</span>
<span class="p">)</span> <span class="k">ON</span> <span class="p">[</span><span class="k">PRIMARY</span><span class="p">]</span> <span class="n">TEXTIMAGE_ON</span> <span class="p">[</span><span class="k">PRIMARY</span><span class="p">]</span>
<span class="k">GO</span>
</code></pre></div></div>

<p><strong>Step 3: Create a asp.net core web api project name ConcurrencyHandling.API</strong></p>

<p><strong>Step 4: Install the following nuget packages in the project.</strong></p>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">System.Data.SqlClient</span>
</code></pre></div></div>

<p><strong>Step 5: Create a Model class name Product in Models folder</strong></p>

<ul>
  <li>Product class to store Product Information</li>
  <li>In the following class RowVersion property is a Guid which is used to track the updated version of the record.</li>
</ul>

<p><strong>Product.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">namespace</span> <span class="nn">Concurrency.API.Models</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Product</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span> <span class="p">=</span> <span class="n">String</span><span class="p">.</span><span class="n">Empty</span><span class="p">;</span>
        <span class="k">public</span> <span class="kt">decimal</span> <span class="n">Price</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Quantity</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
        <span class="k">public</span> <span class="n">Guid</span> <span class="n">RowVersion</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 6: Create a DBConnector class to connect with database in Persistence folder.</strong></p>

<p><strong>DBConnector.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">System.Data.SqlClient</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Concurrency.API.Persistence</span>
<span class="p">{</span>
    <span class="c1">// This class is used to create a connection to the database.</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">DBConnector</span> <span class="p">:</span> <span class="n">IDisposable</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="n">SqlConnection</span> <span class="n">connection</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">DBConnector</span><span class="p">(</span><span class="kt">string</span> <span class="n">connectionString</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">connection</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">SqlConnection</span><span class="p">(</span><span class="n">connectionString</span><span class="p">);</span>
            <span class="k">this</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">Open</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">void</span> <span class="nf">Dispose</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">connection</span><span class="p">.</span><span class="nf">Close</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>


</code></pre></div></div>

<p><strong>Step 7: Add connection string in appsettings.json file</strong></p>

<p><strong>appsettings.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"Logging"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"LogLevel"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Default"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Information"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Microsoft.AspNetCore"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Warning"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"ConnectionStrings"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"DefaultConnection"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Server=localhost;Database=ConcurrencySQLDB;User Id=sa;Password=MyPassword;TrustServerCertificate=True;"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"AllowedHosts"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*"</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<p><strong>Step 8: Create IProductRepository in Repositories/Interface folder</strong></p>

<p><strong>IProductRepository.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Concurrency.API.Models</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Concurrency.API.Repositories.Interfaces</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">interface</span> <span class="nc">IProductRepository</span>
    <span class="p">{</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;&gt;</span> <span class="nf">GetProducts</span><span class="p">();</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="nf">GetProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="nf">AddProduct</span><span class="p">(</span><span class="n">Product</span> <span class="n">product</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="nf">UpdateProduct</span><span class="p">(</span><span class="n">Product</span> <span class="n">product</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="nf">DeleteProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="n">Guid</span> <span class="n">rowVersion</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 9: Create ProductRepository in Repositories/Implementation folder</strong></p>

<p><strong>ProductRepository.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Concurrency.API.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Concurrency.API.Persistence</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Concurrency.API.Repositories.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Data</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Data.SqlClient</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Concurrency.API.Repositories.Implementations</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">ProductRepository</span> <span class="p">:</span> <span class="n">IProductRepository</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="n">DBConnector</span> <span class="n">_connector</span><span class="p">;</span>
        <span class="k">public</span> <span class="nf">ProductRepository</span><span class="p">(</span><span class="n">DBConnector</span> <span class="n">dBConnector</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_connector</span> <span class="p">=</span> <span class="n">dBConnector</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="nf">AddProduct</span><span class="p">(</span><span class="n">Product</span> <span class="n">model</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">try</span>
            <span class="p">{</span>   
                <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="n">State</span> <span class="p">==</span> <span class="n">ConnectionState</span><span class="p">.</span><span class="n">Closed</span><span class="p">)</span>
                    <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">Open</span><span class="p">();</span>
                <span class="kt">var</span> <span class="n">cmd</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">CreateCommand</span><span class="p">()</span> <span class="k">as</span> <span class="n">SqlCommand</span><span class="p">;</span>
                <span class="n">SqlTransaction</span> <span class="n">transaction</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">BeginTransaction</span><span class="p">(</span><span class="s">""</span><span class="p">);</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Transaction</span> <span class="p">=</span> <span class="n">transaction</span><span class="p">;</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">CommandText</span> <span class="p">=</span> <span class="s">@"INSERT INTO Products (Name, Price, Quantity, RowVersion) 
                OUTPUT inserted.Id                
                VALUES (@Name, @Price, @Quantity, @RowVersion); SELECT SCOPE_IDENTITY();"</span><span class="p">;</span>

                <span class="n">Guid</span> <span class="n">rowVersion</span> <span class="p">=</span> <span class="n">Guid</span><span class="p">.</span><span class="nf">NewGuid</span><span class="p">();</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@Name"</span><span class="p">,</span> <span class="n">model</span><span class="p">.</span><span class="n">Name</span><span class="p">);</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@Price"</span><span class="p">,</span> <span class="n">model</span><span class="p">.</span><span class="n">Price</span><span class="p">);</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@Quantity"</span><span class="p">,</span> <span class="n">model</span><span class="p">.</span><span class="n">Quantity</span><span class="p">);</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@RowVersion"</span><span class="p">,</span> <span class="n">rowVersion</span><span class="p">);</span>

                <span class="c1">// cmd.ExecuteScalar() returns the first column of the first row in the result</span>
                <span class="c1">// set returned by the query. Additional columns or rows are ignored.</span>
                <span class="kt">int</span> <span class="n">insertedId</span> <span class="p">=</span> <span class="n">Convert</span><span class="p">.</span><span class="nf">ToInt32</span><span class="p">(</span><span class="n">cmd</span><span class="p">.</span><span class="nf">ExecuteScalar</span><span class="p">());</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">insertedId</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="n">transaction</span><span class="p">.</span><span class="nf">Commit</span><span class="p">();</span>
                <span class="p">}</span>

                <span class="n">model</span><span class="p">.</span><span class="n">Id</span> <span class="p">=</span> <span class="n">insertedId</span><span class="p">;</span>
                <span class="n">model</span><span class="p">.</span><span class="n">RowVersion</span> <span class="p">=</span> <span class="n">rowVersion</span><span class="p">;</span>
                <span class="k">return</span> <span class="n">Task</span><span class="p">.</span><span class="nf">FromResult</span><span class="p">(</span><span class="n">model</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="n">ex</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">finally</span>
            <span class="p">{</span>
                <span class="c1">// close connection</span>
                <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="nf">Dispose</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="k">null</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="nf">GetProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">product</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Product</span><span class="p">();</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="n">State</span> <span class="p">==</span> <span class="n">ConnectionState</span><span class="p">.</span><span class="n">Closed</span><span class="p">)</span>
                    <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">Open</span><span class="p">();</span>
                <span class="kt">var</span> <span class="n">cmd</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">CreateCommand</span><span class="p">()</span> <span class="k">as</span> <span class="n">SqlCommand</span><span class="p">;</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">CommandText</span> <span class="p">=</span> <span class="s">@"SELECT Id, Name, Price, Quantity, RowVersion FROM Products WHERE Id = @Id"</span><span class="p">;</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@Id"</span><span class="p">,</span> <span class="n">id</span><span class="p">);</span>
                <span class="kt">var</span> <span class="n">reader</span> <span class="p">=</span> <span class="n">cmd</span><span class="p">.</span><span class="nf">ExecuteReader</span><span class="p">();</span>
                <span class="k">while</span> <span class="p">(</span><span class="n">reader</span><span class="p">.</span><span class="nf">Read</span><span class="p">())</span>
                <span class="p">{</span>
                    <span class="n">product</span><span class="p">.</span><span class="n">Id</span> <span class="p">=</span> <span class="n">Convert</span><span class="p">.</span><span class="nf">ToInt32</span><span class="p">(</span><span class="n">reader</span><span class="p">[</span><span class="s">"Id"</span><span class="p">]);</span>
                    <span class="n">product</span><span class="p">.</span><span class="n">Name</span> <span class="p">=</span> <span class="n">reader</span><span class="p">[</span><span class="s">"Name"</span><span class="p">]</span> <span class="p">!=</span> <span class="n">DBNull</span><span class="p">.</span><span class="n">Value</span> <span class="p">?</span> <span class="n">reader</span><span class="p">[</span><span class="s">"Name"</span><span class="p">].</span><span class="nf">ToString</span><span class="p">()</span> <span class="p">:</span> <span class="n">String</span><span class="p">.</span><span class="n">Empty</span><span class="p">;</span>
                    <span class="n">product</span><span class="p">.</span><span class="n">Price</span> <span class="p">=</span> <span class="n">reader</span><span class="p">[</span><span class="s">"Price"</span><span class="p">]</span> <span class="p">!=</span> <span class="n">DBNull</span><span class="p">.</span><span class="n">Value</span> <span class="p">?</span> <span class="n">Convert</span><span class="p">.</span><span class="nf">ToDecimal</span><span class="p">(</span><span class="n">reader</span><span class="p">[</span><span class="s">"Price"</span><span class="p">])</span> <span class="p">:</span> <span class="m">0</span><span class="p">;</span>
                    <span class="n">product</span><span class="p">.</span><span class="n">Quantity</span> <span class="p">=</span> <span class="n">reader</span><span class="p">[</span><span class="s">"Quantity"</span><span class="p">]</span> <span class="p">!=</span> <span class="n">DBNull</span><span class="p">.</span><span class="n">Value</span> <span class="p">?</span> <span class="n">Convert</span><span class="p">.</span><span class="nf">ToInt32</span><span class="p">(</span><span class="n">reader</span><span class="p">[</span><span class="s">"Quantity"</span><span class="p">])</span> <span class="p">:</span> <span class="m">0</span><span class="p">;</span>
                    <span class="n">product</span><span class="p">.</span><span class="n">RowVersion</span> <span class="p">=</span> <span class="n">reader</span><span class="p">[</span><span class="s">"RowVersion"</span><span class="p">]</span> <span class="p">!=</span> <span class="n">DBNull</span><span class="p">.</span><span class="n">Value</span> <span class="p">?</span> <span class="p">(</span><span class="n">Guid</span><span class="p">)</span><span class="n">reader</span><span class="p">[</span><span class="s">"RowVersion"</span><span class="p">]</span> <span class="p">:</span> <span class="n">Guid</span><span class="p">.</span><span class="n">Empty</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="n">ex</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">finally</span>
            <span class="p">{</span>
                <span class="c1">// close connection</span>
                <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="nf">Dispose</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="c1">// Task.FromResult is a helper method that creates a Task that's completed successfully</span>
            <span class="c1">// with the specified result.</span>
            <span class="k">return</span> <span class="n">Task</span><span class="p">.</span><span class="nf">FromResult</span><span class="p">(</span><span class="n">product</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;&gt;</span> <span class="nf">GetProducts</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">products</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;();</span>

            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="n">State</span> <span class="p">==</span> <span class="n">ConnectionState</span><span class="p">.</span><span class="n">Closed</span><span class="p">)</span>
                    <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">Open</span><span class="p">();</span>
                <span class="kt">var</span> <span class="n">cmd</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">CreateCommand</span><span class="p">()</span> <span class="k">as</span> <span class="n">SqlCommand</span><span class="p">;</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">CommandText</span> <span class="p">=</span> <span class="s">@"SELECT Id, Name, Price, Quantity, RowVersion FROM Products"</span><span class="p">;</span>
                <span class="kt">var</span> <span class="n">reader</span> <span class="p">=</span> <span class="n">cmd</span><span class="p">.</span><span class="nf">ExecuteReader</span><span class="p">();</span>
                <span class="k">while</span> <span class="p">(</span><span class="n">reader</span><span class="p">.</span><span class="nf">Read</span><span class="p">())</span>
                <span class="p">{</span>
                    <span class="kt">var</span> <span class="n">product</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Product</span><span class="p">()</span>
                    <span class="p">{</span>
                        <span class="n">Id</span> <span class="p">=</span> <span class="n">Convert</span><span class="p">.</span><span class="nf">ToInt32</span><span class="p">(</span><span class="n">reader</span><span class="p">[</span><span class="s">"Id"</span><span class="p">]),</span>
                        <span class="n">Name</span> <span class="p">=</span> <span class="n">reader</span><span class="p">[</span><span class="s">"Name"</span><span class="p">]</span> <span class="p">!=</span> <span class="n">DBNull</span><span class="p">.</span><span class="n">Value</span> <span class="p">?</span> <span class="n">reader</span><span class="p">[</span><span class="s">"Name"</span><span class="p">].</span><span class="nf">ToString</span><span class="p">()</span> <span class="p">:</span> <span class="n">String</span><span class="p">.</span><span class="n">Empty</span><span class="p">,</span>
                        <span class="n">Price</span> <span class="p">=</span> <span class="n">reader</span><span class="p">[</span><span class="s">"Price"</span><span class="p">]</span> <span class="p">!=</span> <span class="n">DBNull</span><span class="p">.</span><span class="n">Value</span> <span class="p">?</span> <span class="n">Convert</span><span class="p">.</span><span class="nf">ToDecimal</span><span class="p">(</span><span class="n">reader</span><span class="p">[</span><span class="s">"Price"</span><span class="p">])</span> <span class="p">:</span> <span class="m">0</span><span class="p">,</span>
                        <span class="n">Quantity</span> <span class="p">=</span> <span class="n">reader</span><span class="p">[</span><span class="s">"Quantity"</span><span class="p">]</span> <span class="p">!=</span> <span class="n">DBNull</span><span class="p">.</span><span class="n">Value</span> <span class="p">?</span> <span class="n">Convert</span><span class="p">.</span><span class="nf">ToInt32</span><span class="p">(</span><span class="n">reader</span><span class="p">[</span><span class="s">"Quantity"</span><span class="p">])</span> <span class="p">:</span> <span class="m">0</span><span class="p">,</span>
                        <span class="n">RowVersion</span> <span class="p">=</span> <span class="n">reader</span><span class="p">[</span><span class="s">"RowVersion"</span><span class="p">]</span> <span class="p">!=</span> <span class="n">DBNull</span><span class="p">.</span><span class="n">Value</span> <span class="p">?</span> <span class="p">(</span><span class="n">Guid</span><span class="p">)</span><span class="n">reader</span><span class="p">[</span><span class="s">"RowVersion"</span><span class="p">]</span> <span class="p">:</span> <span class="n">Guid</span><span class="p">.</span><span class="n">Empty</span>
                    <span class="p">};</span>
                    <span class="n">products</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">product</span><span class="p">);</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="n">ex</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">finally</span>
            <span class="p">{</span>
                <span class="c1">// close connection</span>
                <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="nf">Dispose</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="n">products</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="nf">UpdateProduct</span><span class="p">(</span><span class="n">Product</span> <span class="n">product</span><span class="p">)</span>
        <span class="p">{</span>

            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="n">State</span> <span class="p">==</span> <span class="n">ConnectionState</span><span class="p">.</span><span class="n">Closed</span><span class="p">)</span>
                    <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">Open</span><span class="p">();</span>
                <span class="kt">var</span> <span class="n">cmd</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">CreateCommand</span><span class="p">()</span> <span class="k">as</span> <span class="n">SqlCommand</span><span class="p">;</span>
                <span class="n">SqlTransaction</span> <span class="n">transaction</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">BeginTransaction</span><span class="p">(</span><span class="s">""</span><span class="p">);</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Transaction</span> <span class="p">=</span> <span class="n">transaction</span><span class="p">;</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">CommandText</span> <span class="p">=</span> <span class="s">@"UPDATE Products SET Name = @Name, Price = @Price, Quantity = @Quantity, RowVersion = @RowVersion
                    WHERE Id = @Id AND RowVersion = @RowVersion"</span><span class="p">;</span>

                <span class="n">Guid</span> <span class="n">rowVersion</span> <span class="p">=</span> <span class="n">Guid</span><span class="p">.</span><span class="nf">NewGuid</span><span class="p">();</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@Id"</span><span class="p">,</span> <span class="n">product</span><span class="p">.</span><span class="n">Id</span><span class="p">);</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@Name"</span><span class="p">,</span> <span class="n">product</span><span class="p">.</span><span class="n">Name</span><span class="p">);</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@Price"</span><span class="p">,</span> <span class="n">product</span><span class="p">.</span><span class="n">Price</span><span class="p">);</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@Quantity"</span><span class="p">,</span> <span class="n">product</span><span class="p">.</span><span class="n">Quantity</span><span class="p">);</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@RowVersion"</span><span class="p">,</span> <span class="n">rowVersion</span><span class="p">);</span>

                <span class="kt">int</span> <span class="n">effectedRow</span> <span class="p">=</span> <span class="n">cmd</span><span class="p">.</span><span class="nf">ExecuteNonQuery</span><span class="p">();</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">effectedRow</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="n">transaction</span><span class="p">.</span><span class="nf">Commit</span><span class="p">();</span>
                <span class="p">}</span>

                <span class="n">product</span><span class="p">.</span><span class="n">RowVersion</span> <span class="p">=</span> <span class="n">rowVersion</span><span class="p">;</span>
                <span class="k">return</span> <span class="n">Task</span><span class="p">.</span><span class="nf">FromResult</span><span class="p">(</span><span class="n">product</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="n">ex</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">finally</span>
            <span class="p">{</span>
                <span class="c1">// close connection</span>
                <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="nf">Dispose</span><span class="p">();</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="nf">DeleteProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="n">Guid</span> <span class="n">rowVersion</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="n">State</span> <span class="p">==</span> <span class="n">ConnectionState</span><span class="p">.</span><span class="n">Closed</span><span class="p">)</span>
                    <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">Open</span><span class="p">();</span>
                <span class="kt">var</span> <span class="n">cmd</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">CreateCommand</span><span class="p">()</span> <span class="k">as</span> <span class="n">SqlCommand</span><span class="p">;</span>
                <span class="n">SqlTransaction</span> <span class="n">transaction</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">BeginTransaction</span><span class="p">(</span><span class="s">""</span><span class="p">);</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Transaction</span> <span class="p">=</span> <span class="n">transaction</span><span class="p">;</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">CommandText</span> <span class="p">=</span> <span class="s">@"DELETE FROM Products WHERE Id = @Id AND RowVersion = @RowVersion"</span><span class="p">;</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@Id"</span><span class="p">,</span> <span class="n">id</span><span class="p">);</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@RowVersion"</span><span class="p">,</span> <span class="n">rowVersion</span><span class="p">);</span>

                <span class="kt">int</span> <span class="n">effectedRow</span> <span class="p">=</span> <span class="n">cmd</span><span class="p">.</span><span class="nf">ExecuteNonQuery</span><span class="p">();</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">effectedRow</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="n">transaction</span><span class="p">.</span><span class="nf">Commit</span><span class="p">();</span>
                <span class="p">}</span>
                <span class="k">return</span> <span class="n">Task</span><span class="p">.</span><span class="nf">FromResult</span><span class="p">(</span><span class="k">new</span> <span class="nf">Product</span><span class="p">());</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="n">ex</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">finally</span>
            <span class="p">{</span>
                <span class="c1">// close connection</span>
                <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="nf">Dispose</span><span class="p">();</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Look at the update and delete query. You will see, row version is checked while updating or deleting rows.</li>
</ul>

<p><strong>Step 10: Create IProductService in Services/Interfaces class</strong></p>

<p><strong>IProductService.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Concurrency.API.Models</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Concurrency.API.Services.Interfaces</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">interface</span> <span class="nc">IProductService</span>
    <span class="p">{</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;&gt;</span> <span class="nf">GetProducts</span><span class="p">();</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="nf">GetProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="nf">AddProduct</span><span class="p">(</span><span class="n">Product</span> <span class="n">product</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="nf">UpdateProduct</span><span class="p">(</span><span class="n">Product</span> <span class="n">product</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="nf">DeleteProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="n">Guid</span> <span class="n">rowVersion</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 11: Create ProductService in Services/Implementation class</strong></p>

<p><strong>ProductService.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Concurrency.API.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Concurrency.API.Repositories.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Concurrency.API.Services.Interfaces</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Concurrency.API.Services.Implementations</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">ProductService</span> <span class="p">:</span> <span class="n">IProductService</span>
    <span class="p">{</span>
        <span class="n">IProductRepository</span> <span class="n">_productRepository</span><span class="p">;</span>
        <span class="k">public</span> <span class="nf">ProductService</span><span class="p">(</span><span class="n">IProductRepository</span> <span class="n">productRepository</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_productRepository</span> <span class="p">=</span> <span class="n">productRepository</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="nf">AddProduct</span><span class="p">(</span><span class="n">Product</span> <span class="n">product</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">_productRepository</span><span class="p">.</span><span class="nf">AddProduct</span><span class="p">(</span><span class="n">product</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="nf">GetProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">_productRepository</span><span class="p">.</span><span class="nf">GetProduct</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;&gt;</span> <span class="nf">GetProducts</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">_productRepository</span><span class="p">.</span><span class="nf">GetProducts</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="nf">UpdateProduct</span><span class="p">(</span><span class="n">Product</span> <span class="n">product</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">_productRepository</span><span class="p">.</span><span class="nf">UpdateProduct</span><span class="p">(</span><span class="n">product</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="nf">DeleteProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="n">Guid</span> <span class="n">rowVersion</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">_productRepository</span><span class="p">.</span><span class="nf">DeleteProduct</span><span class="p">(</span><span class="n">id</span><span class="p">,</span> <span class="n">rowVersion</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 12: Configure Program class as follows.</strong></p>

<p><strong>Program.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Concurrency.API.Persistence</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Concurrency.API.Repositories.Implementations</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Concurrency.API.Repositories.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Concurrency.API.Services.Implementations</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Concurrency.API.Services.Interfaces</span><span class="p">;</span>

<span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="n">WebApplication</span><span class="p">.</span><span class="nf">CreateBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>

<span class="c1">// Add services to the container.</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">();</span>
<span class="c1">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddEndpointsApiExplorer</span><span class="p">();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddSwaggerGen</span><span class="p">();</span>


<span class="kt">string</span> <span class="n">connectionString</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="n">Configuration</span><span class="p">.</span><span class="nf">GetConnectionString</span><span class="p">(</span><span class="s">"DefaultConnection"</span><span class="p">);</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddTransient</span><span class="p">(</span><span class="n">_</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="nf">DBConnector</span><span class="p">(</span><span class="n">connectionString</span><span class="p">));</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddScoped</span><span class="p">&lt;</span><span class="n">IProductRepository</span><span class="p">,</span> <span class="n">ProductRepository</span><span class="p">&gt;();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddScoped</span><span class="p">&lt;</span><span class="n">IProductService</span><span class="p">,</span> <span class="n">ProductService</span><span class="p">&gt;();</span>

<span class="kt">var</span> <span class="n">app</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

<span class="c1">// Configure the HTTP request pipeline.</span>
<span class="k">if</span> <span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">Environment</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
<span class="p">{</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwagger</span><span class="p">();</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwaggerUI</span><span class="p">();</span>
<span class="p">}</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseHttpsRedirection</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseAuthorization</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">MapControllers</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>


</code></pre></div></div>

<p><strong>Step 13: Create a Controller class ProductsController in Controllers folder.</strong></p>

<p><strong>ProductsController.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Concurrency.API.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Concurrency.API.Persistence</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Concurrency.API.Services.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Concurrency.API.Controllers</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
    <span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">ProductsController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="n">DBConnector</span> <span class="n">_connector</span><span class="p">;</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IProductService</span> <span class="n">_productService</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">ProductsController</span><span class="p">(</span> <span class="n">DBConnector</span> <span class="n">connector</span><span class="p">,</span> <span class="n">IProductService</span> <span class="n">productService</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_connector</span> <span class="p">=</span> <span class="n">connector</span><span class="p">;</span>
            <span class="n">_productService</span> <span class="p">=</span> <span class="n">productService</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/Products</span>
        <span class="p">[</span><span class="n">HttpGet</span><span class="p">]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;&gt;&gt;</span> <span class="nf">GetProducts</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">products</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_productService</span><span class="p">.</span><span class="nf">GetProducts</span><span class="p">();</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">products</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">products</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/Products/5</span>
        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;&gt;</span> <span class="nf">GetProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">product</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_productService</span><span class="p">.</span><span class="nf">GetProduct</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">product</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">product</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">// PUT: api/Products/5</span>
        <span class="p">[</span><span class="nf">HttpPut</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">PutProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="n">Product</span> <span class="n">product</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">id</span> <span class="p">!=</span> <span class="n">product</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_productService</span><span class="p">.</span><span class="nf">UpdateProduct</span><span class="p">(</span><span class="n">product</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">result</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">// POST: api/Products</span>
        <span class="p">[</span><span class="n">HttpPost</span><span class="p">]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;&gt;</span> <span class="nf">PostProduct</span><span class="p">(</span><span class="n">Product</span> <span class="n">product</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_productService</span><span class="p">.</span><span class="nf">AddProduct</span><span class="p">(</span><span class="n">product</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">result</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">// DELETE: api/Products/5</span>
        <span class="p">[</span><span class="nf">HttpDelete</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">DeleteProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="n">Guid</span> <span class="n">rowVersion</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_productService</span><span class="p">.</span><span class="nf">DeleteProduct</span><span class="p">(</span><span class="n">id</span><span class="p">,</span> <span class="n">rowVersion</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">result</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>



</code></pre></div></div>

<p><strong>Step 14: Run the application and test concurrency</strong></p>

<ul>
  <li>Create a new record by Post method in swagger. Sample example for post data.</li>
</ul>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w">
  </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ASUS Laptop"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"price"</span><span class="p">:</span><span class="w"> </span><span class="mi">1200</span><span class="p">,</span><span class="w">
  </span><span class="nl">"quantity"</span><span class="p">:</span><span class="w"> </span><span class="mi">230</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<ul>
  <li>Update the record using the Put method in Swagger. A sample input is provided below. Meanwhile, open another tab and make an update to the record. Your record version will be altered. If you attempt to update the record using the previous record version, it will not updated due to concurrency. However, if no one else has updated it and you are using the correct record version, you can update the record.</li>
</ul>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="mi">5</span><span class="p">,</span><span class="w">
    </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ASUS Laptop"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"price"</span><span class="p">:</span><span class="w"> </span><span class="mi">1300</span><span class="p">,</span><span class="w">
    </span><span class="nl">"quantity"</span><span class="p">:</span><span class="w"> </span><span class="mi">230</span><span class="p">,</span><span class="w">
    </span><span class="nl">"rowVersion"</span><span class="p">:</span><span class="w"> </span><span class="s2">"04e92587-8c5d-4a27-b5d5-bbee9fc84458"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<ul>
  <li>Delete the record using the Delete method in Swagger. Meanwhile, open another tab and update the record. Your record version will be changed. If you attempt to delete the record using the previous record version, it will throw an exception due to concurrency. However, if no one else has updated it and you are using the correct record version, you can delete the record without encountering any problem.</li>
</ul>

<p><strong><a href="https://github.com/mahedee/code-sample02/tree/master/ConcurrencyRawSQL">Source code</a></strong></p>]]></content><author><name>Mahedee Hasan</name></author><category term="ASP.NET" /><category term="ASP.NET Core" /><category term="C#" /><category term="Web API" /><category term="EF" /><category term="Software Architecture" /><category term="csharp" /><category term="aspnet" /><category term="aspnetcore" /><category term="webapi" /><category term="ef" /><category term="softwarearchitecture" /><summary type="html"><![CDATA[Effectively dealing with concurrency is crucial, especially in large business applications, and it plays a significant role in financial systems. This article is designed to illustrate the practical aspects of managing concurrency in an ASP.NET Core application using raw SQL and ADO.NET.]]></summary></entry><entry><title type="html">Step-by-Step Guide to Integrating Audit Trail in ASP.NET Core Using ADO.NET and Raw SQL</title><link href="https://mahedee.net//Step-by-Step-Guide-to-Integrating-Audit-Trail-in-ASPNET-Core-Using-ADONET/" rel="alternate" type="text/html" title="Step-by-Step Guide to Integrating Audit Trail in ASP.NET Core Using ADO.NET and Raw SQL" /><published>2024-01-15T00:00:00-04:00</published><updated>2024-01-15T00:00:00-04:00</updated><id>https://mahedee.net//Step-by-Step-Guide-to-Integrating-Audit-Trail-in-ASPNET-Core-Using-ADONET</id><content type="html" xml:base="https://mahedee.net//Step-by-Step-Guide-to-Integrating-Audit-Trail-in-ASPNET-Core-Using-ADONET/"><![CDATA[<p><strong>Introduction</strong>
The Audit Trail stands out as a critical feature in enterprise applications, primarily serving essential roles in security and fraud transaction detection. An audit trail is a chronological record of changes or activities performed in a system, providing a detailed history of events. In the context of software applications, including ASP.NET, an audit trail captures and logs various actions such as data modifications, user interactions, and system activities. This article delves into a comprehensive guide on implementing Audit Trail functionality in an ASP.NET Core application using SQL Server with ADO.NET.</p>

<p><strong>Why it is important?</strong>
It helps organizations maintain a record of user activity within their systems, which can be used</p>

<ul>
  <li>To monitor user actions and detect suspicious activities</li>
  <li>To track changes and identify the root cause of issues</li>
  <li>To ensure compliance with regulatory requirements</li>
  <li>Records changes to critical data elements, ensuring accuracy and consistency</li>
  <li>Provides a detailed history of events for forensic analysis</li>
  <li>Meets legal and regulatory requirements by maintaining a detailed audit trail</li>
  <li>Offers historical data for reporting and analysis, supporting decision-making</li>
  <li>Frud detection etc.</li>
</ul>

<p>In this article, we will discuss how you can implement an audit trail feature using Entity Framework plus</p>

<p><strong>Tools and Technology Used</strong></p>
<ul>
  <li>ASP.net core Web API</li>
  <li>Visual C#</li>
  <li>ADO.NET</li>
  <li>SQL Server</li>
</ul>

<p><strong>Step 1: Create Database and related tables in MS SQL Server</strong></p>
<ul>
  <li>Create a database name <code class="language-plaintext highlighter-rouge">AuditLogDB</code></li>
  <li>Create a table name <code class="language-plaintext highlighter-rouge">Product</code> to store Product information</li>
  <li>Create a <code class="language-plaintext highlighter-rouge">AuditEntry</code> and <code class="language-plaintext highlighter-rouge">AuditEntryProperty</code> table to store audit information.</li>
</ul>

<p><strong>Product Table</strong></p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="p">[</span><span class="n">dbo</span><span class="p">].[</span><span class="n">Products</span><span class="p">](</span>
	<span class="p">[</span><span class="n">Id</span><span class="p">]</span> <span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="k">IDENTITY</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
	<span class="p">[</span><span class="n">Name</span><span class="p">]</span> <span class="p">[</span><span class="n">nvarchar</span><span class="p">](</span><span class="k">max</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
	<span class="p">[</span><span class="n">Price</span><span class="p">]</span> <span class="p">[</span><span class="nb">decimal</span><span class="p">](</span><span class="mi">18</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
	<span class="p">[</span><span class="n">Quantity</span><span class="p">]</span> <span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
 <span class="k">CONSTRAINT</span> <span class="p">[</span><span class="n">PK_Products</span><span class="p">]</span> <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="n">CLUSTERED</span> 
<span class="p">(</span>
	<span class="p">[</span><span class="n">Id</span><span class="p">]</span> <span class="k">ASC</span>
<span class="p">)</span><span class="k">WITH</span> <span class="p">(</span><span class="n">PAD_INDEX</span> <span class="o">=</span> <span class="k">OFF</span><span class="p">,</span> <span class="n">STATISTICS_NORECOMPUTE</span> <span class="o">=</span> <span class="k">OFF</span><span class="p">,</span> <span class="n">IGNORE_DUP_KEY</span> <span class="o">=</span> <span class="k">OFF</span><span class="p">,</span> <span class="n">ALLOW_ROW_LOCKS</span> <span class="o">=</span> <span class="k">ON</span><span class="p">,</span> <span class="n">ALLOW_PAGE_LOCKS</span> <span class="o">=</span> <span class="k">ON</span><span class="p">,</span> <span class="n">OPTIMIZE_FOR_SEQUENTIAL_KEY</span> <span class="o">=</span> <span class="k">OFF</span><span class="p">)</span> <span class="k">ON</span> <span class="p">[</span><span class="k">PRIMARY</span><span class="p">]</span>
<span class="p">)</span> <span class="k">ON</span> <span class="p">[</span><span class="k">PRIMARY</span><span class="p">]</span> <span class="n">TEXTIMAGE_ON</span> <span class="p">[</span><span class="k">PRIMARY</span><span class="p">]</span>
<span class="k">GO</span>
</code></pre></div></div>

<p><strong>AuditEntry Table</strong></p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">CREATE</span> <span class="k">TABLE</span> <span class="p">[</span><span class="n">dbo</span><span class="p">].[</span><span class="n">AuditEntry</span><span class="p">](</span>
	<span class="p">[</span><span class="n">AuditEntryID</span><span class="p">]</span> <span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="k">IDENTITY</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
	<span class="p">[</span><span class="n">EntitySetName</span><span class="p">]</span> <span class="p">[</span><span class="n">nvarchar</span><span class="p">](</span><span class="mi">255</span><span class="p">)</span> <span class="k">NULL</span><span class="p">,</span>
	<span class="p">[</span><span class="n">EntityTypeName</span><span class="p">]</span> <span class="p">[</span><span class="n">nvarchar</span><span class="p">](</span><span class="mi">255</span><span class="p">)</span> <span class="k">NULL</span><span class="p">,</span>
	<span class="p">[</span><span class="k">State</span><span class="p">]</span> <span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
	<span class="p">[</span><span class="n">StateName</span><span class="p">]</span> <span class="p">[</span><span class="n">nvarchar</span><span class="p">](</span><span class="mi">255</span><span class="p">)</span> <span class="k">NULL</span><span class="p">,</span>
	<span class="p">[</span><span class="n">CreatedBy</span><span class="p">]</span> <span class="p">[</span><span class="n">nvarchar</span><span class="p">](</span><span class="mi">255</span><span class="p">)</span> <span class="k">NULL</span><span class="p">,</span>
	<span class="p">[</span><span class="n">CreatedDate</span><span class="p">]</span> <span class="p">[</span><span class="n">datetime2</span><span class="p">](</span><span class="mi">7</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
	<span class="p">[</span><span class="n">Discriminator</span><span class="p">]</span> <span class="p">[</span><span class="n">nvarchar</span><span class="p">](</span><span class="k">max</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
	<span class="p">[</span><span class="n">AppplicationName</span><span class="p">]</span> <span class="p">[</span><span class="n">nvarchar</span><span class="p">](</span><span class="k">max</span><span class="p">)</span> <span class="k">NULL</span><span class="p">,</span>
 <span class="k">CONSTRAINT</span> <span class="p">[</span><span class="n">PK_AuditEntry</span><span class="p">]</span> <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="n">CLUSTERED</span> 
<span class="p">(</span>
	<span class="p">[</span><span class="n">AuditEntryID</span><span class="p">]</span> <span class="k">ASC</span>
<span class="p">)</span><span class="k">WITH</span> <span class="p">(</span><span class="n">PAD_INDEX</span> <span class="o">=</span> <span class="k">OFF</span><span class="p">,</span> <span class="n">STATISTICS_NORECOMPUTE</span> <span class="o">=</span> <span class="k">OFF</span><span class="p">,</span> <span class="n">IGNORE_DUP_KEY</span> <span class="o">=</span> <span class="k">OFF</span><span class="p">,</span> <span class="n">ALLOW_ROW_LOCKS</span> <span class="o">=</span> <span class="k">ON</span><span class="p">,</span> <span class="n">ALLOW_PAGE_LOCKS</span> <span class="o">=</span> <span class="k">ON</span><span class="p">,</span> <span class="n">OPTIMIZE_FOR_SEQUENTIAL_KEY</span> <span class="o">=</span> <span class="k">OFF</span><span class="p">)</span> <span class="k">ON</span> <span class="p">[</span><span class="k">PRIMARY</span><span class="p">]</span>
<span class="p">)</span> <span class="k">ON</span> <span class="p">[</span><span class="k">PRIMARY</span><span class="p">]</span> <span class="n">TEXTIMAGE_ON</span> <span class="p">[</span><span class="k">PRIMARY</span><span class="p">]</span>
<span class="k">GO</span>

</code></pre></div></div>

<p><strong>AuditEntryProperty Table</strong></p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="p">[</span><span class="n">dbo</span><span class="p">].[</span><span class="n">AuditEntryProperty</span><span class="p">](</span>
	<span class="p">[</span><span class="n">AuditEntryPropertyID</span><span class="p">]</span> <span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="k">IDENTITY</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
	<span class="p">[</span><span class="n">AuditEntryID</span><span class="p">]</span> <span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
	<span class="p">[</span><span class="n">RelationName</span><span class="p">]</span> <span class="p">[</span><span class="n">nvarchar</span><span class="p">](</span><span class="mi">255</span><span class="p">)</span> <span class="k">NULL</span><span class="p">,</span>
	<span class="p">[</span><span class="n">PropertyName</span><span class="p">]</span> <span class="p">[</span><span class="n">nvarchar</span><span class="p">](</span><span class="mi">255</span><span class="p">)</span> <span class="k">NULL</span><span class="p">,</span>
	<span class="p">[</span><span class="n">OldValue</span><span class="p">]</span> <span class="p">[</span><span class="n">nvarchar</span><span class="p">](</span><span class="k">max</span><span class="p">)</span> <span class="k">NULL</span><span class="p">,</span>
	<span class="p">[</span><span class="n">NewValue</span><span class="p">]</span> <span class="p">[</span><span class="n">nvarchar</span><span class="p">](</span><span class="k">max</span><span class="p">)</span> <span class="k">NULL</span><span class="p">,</span>
	<span class="p">[</span><span class="n">Discriminator</span><span class="p">]</span> <span class="p">[</span><span class="n">nvarchar</span><span class="p">](</span><span class="k">max</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
	<span class="p">[</span><span class="n">AppplicationName</span><span class="p">]</span> <span class="p">[</span><span class="n">nvarchar</span><span class="p">](</span><span class="k">max</span><span class="p">)</span> <span class="k">NULL</span><span class="p">,</span>
 <span class="k">CONSTRAINT</span> <span class="p">[</span><span class="n">PK_AuditEntryProperty</span><span class="p">]</span> <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="n">CLUSTERED</span> 
<span class="p">(</span>
	<span class="p">[</span><span class="n">AuditEntryPropertyID</span><span class="p">]</span> <span class="k">ASC</span>
<span class="p">)</span><span class="k">WITH</span> <span class="p">(</span><span class="n">PAD_INDEX</span> <span class="o">=</span> <span class="k">OFF</span><span class="p">,</span> <span class="n">STATISTICS_NORECOMPUTE</span> <span class="o">=</span> <span class="k">OFF</span><span class="p">,</span> <span class="n">IGNORE_DUP_KEY</span> <span class="o">=</span> <span class="k">OFF</span><span class="p">,</span> <span class="n">ALLOW_ROW_LOCKS</span> <span class="o">=</span> <span class="k">ON</span><span class="p">,</span> <span class="n">ALLOW_PAGE_LOCKS</span> <span class="o">=</span> <span class="k">ON</span><span class="p">,</span> <span class="n">OPTIMIZE_FOR_SEQUENTIAL_KEY</span> <span class="o">=</span> <span class="k">OFF</span><span class="p">)</span> <span class="k">ON</span> <span class="p">[</span><span class="k">PRIMARY</span><span class="p">]</span>
<span class="p">)</span> <span class="k">ON</span> <span class="p">[</span><span class="k">PRIMARY</span><span class="p">]</span> <span class="n">TEXTIMAGE_ON</span> <span class="p">[</span><span class="k">PRIMARY</span><span class="p">]</span>
<span class="k">GO</span>

<span class="k">ALTER</span> <span class="k">TABLE</span> <span class="p">[</span><span class="n">dbo</span><span class="p">].[</span><span class="n">AuditEntryProperty</span><span class="p">]</span>  <span class="k">WITH</span> <span class="k">CHECK</span> <span class="k">ADD</span>  <span class="k">CONSTRAINT</span> <span class="p">[</span><span class="n">FK_AuditEntryProperty_AuditEntry_AuditEntryID</span><span class="p">]</span> <span class="k">FOREIGN</span> <span class="k">KEY</span><span class="p">([</span><span class="n">AuditEntryID</span><span class="p">])</span>
<span class="k">REFERENCES</span> <span class="p">[</span><span class="n">dbo</span><span class="p">].[</span><span class="n">AuditEntry</span><span class="p">]</span> <span class="p">([</span><span class="n">AuditEntryID</span><span class="p">])</span>
<span class="k">ON</span> <span class="k">DELETE</span> <span class="k">CASCADE</span>
<span class="k">GO</span>

<span class="k">ALTER</span> <span class="k">TABLE</span> <span class="p">[</span><span class="n">dbo</span><span class="p">].[</span><span class="n">AuditEntryProperty</span><span class="p">]</span> <span class="k">CHECK</span> <span class="k">CONSTRAINT</span> <span class="p">[</span><span class="n">FK_AuditEntryProperty_AuditEntry_AuditEntryID</span><span class="p">]</span>
<span class="k">GO</span>

</code></pre></div></div>

<p><strong>Step 2: Create a asp.net core web api project name AuditLog.API</strong></p>

<p><strong>Step 3: Install the following nuget packages in the project.</strong></p>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">System.Data.SqlClient</span>
</code></pre></div></div>

<p><strong>Step 4: Create a Model class name Product in Models folder.</strong></p>

<ul>
  <li>Product class to store Product Information</li>
</ul>

<p><strong>Product.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">AuditLog.API.Models</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Product</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span> <span class="p">=</span> <span class="n">String</span><span class="p">.</span><span class="n">Empty</span><span class="p">;</span>
        <span class="k">public</span> <span class="kt">decimal</span> <span class="n">Price</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Quantity</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>Step 5: Create a DBConnector class in Persistence folder to create connection to the database</strong></p>

<p><strong>DBConnector.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System.Data.SqlClient</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">AuditLog.API.Persistence</span>
<span class="p">{</span>
    <span class="c1">// This class is used to create a connection to the database.</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">DBConnector</span> <span class="p">:</span> <span class="n">IDisposable</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="n">SqlConnection</span> <span class="n">connection</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">DBConnector</span><span class="p">(</span><span class="kt">string</span> <span class="n">connectionString</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">connection</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">SqlConnection</span><span class="p">(</span><span class="n">connectionString</span><span class="p">);</span>
            <span class="k">this</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">Open</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">void</span> <span class="nf">Dispose</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">connection</span><span class="p">.</span><span class="nf">Close</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 6: Add connection string in appsettings.json file</strong></p>

<p><strong>appsettings.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"Logging"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"LogLevel"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Default"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Information"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Microsoft.AspNetCore"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Warning"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"ConnectionStrings"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"DefaultConnection"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Server=localhost;Database=AuditLogDB;User Id=sa;Password=YourPassword;TrustServerCertificate=True;"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"AllowedHosts"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*"</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>
<p><strong>Step 7: Create classes and enums for Audit Trail in AuditTrail folder</strong></p>

<ul>
  <li>Create ApplicationEnum, StateName, EnumExtesions class in AuditTrail/Enums folder</li>
</ul>

<p><strong>ApplicationEnum.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System.ComponentModel</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">AuditLog.API.AuditTrail.Enums</span>
<span class="p">{</span>
    <span class="c1">// This enum is used to identify the names of applications that is being audited.</span>
    <span class="k">public</span> <span class="k">enum</span> <span class="n">ApplicationEnum</span>
    <span class="p">{</span>
        <span class="p">[</span><span class="nf">Description</span><span class="p">(</span><span class="s">"AuditLog.API"</span><span class="p">)]</span>
        <span class="n">AuditLogAPP</span><span class="p">,</span>

        <span class="p">[</span><span class="nf">Description</span><span class="p">(</span><span class="s">"ECommerce Application"</span><span class="p">)]</span>
        <span class="n">ECommerceAPP</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>StateName.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">AuditLog.API.AuditTrail.Enums</span>
<span class="p">{</span>
    <span class="c1">// State of the operation performed on the entity.</span>
    <span class="k">public</span> <span class="k">enum</span> <span class="n">StateName</span>
    <span class="p">{</span>
        <span class="n">EntityAdded</span><span class="p">,</span>
        <span class="n">EntityModified</span><span class="p">,</span>
        <span class="n">EntityDeleted</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>EnumExtensions.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">System.ComponentModel</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Reflection</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">AuditLog.API.AuditTrail.Enums</span>
<span class="p">{</span>
    <span class="c1">// This enum is used to identify the names of applications that is being audited.</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">EnumExtensions</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">static</span> <span class="kt">string</span> <span class="nf">GetApplication</span><span class="p">(</span><span class="k">this</span> <span class="n">Enum</span> <span class="k">value</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">FieldInfo</span><span class="p">?</span> <span class="n">fieldInfo</span> <span class="p">=</span> <span class="k">value</span><span class="p">.</span><span class="nf">GetType</span><span class="p">().</span><span class="nf">GetField</span><span class="p">(</span><span class="k">value</span><span class="p">.</span><span class="nf">ToString</span><span class="p">());</span>

            <span class="n">DescriptionAttribute</span><span class="p">?</span> <span class="n">attribute</span> <span class="p">=</span> <span class="n">fieldInfo</span><span class="p">?.</span><span class="n">GetCustomAttribute</span><span class="p">&lt;</span><span class="n">DescriptionAttribute</span><span class="p">&gt;();</span>

            <span class="k">return</span> <span class="n">attribute</span> <span class="p">!=</span> <span class="k">null</span> <span class="p">?</span> <span class="n">attribute</span><span class="p">.</span><span class="n">Description</span> <span class="p">:</span> <span class="k">value</span><span class="p">.</span><span class="nf">ToString</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">static</span> <span class="kt">string</span> <span class="nf">GetEntity</span><span class="p">(</span><span class="k">this</span> <span class="n">Enum</span> <span class="k">value</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">FieldInfo</span><span class="p">?</span> <span class="n">fieldInfo</span> <span class="p">=</span> <span class="k">value</span><span class="p">.</span><span class="nf">GetType</span><span class="p">().</span><span class="nf">GetField</span><span class="p">(</span><span class="k">value</span><span class="p">.</span><span class="nf">ToString</span><span class="p">());</span>

            <span class="n">DescriptionAttribute</span><span class="p">?</span> <span class="n">attribute</span> <span class="p">=</span> <span class="n">fieldInfo</span><span class="p">?.</span><span class="n">GetCustomAttribute</span><span class="p">&lt;</span><span class="n">DescriptionAttribute</span><span class="p">&gt;();</span>

            <span class="k">return</span> <span class="n">attribute</span> <span class="p">!=</span> <span class="k">null</span> <span class="p">?</span> <span class="n">attribute</span><span class="p">.</span><span class="n">Description</span> <span class="p">:</span> <span class="k">value</span><span class="p">.</span><span class="nf">ToString</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create IAuditTrail Interface in AuditTrail/Interface folder</li>
</ul>

<p><strong>IAuditTrail.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">AuditLog.API.AuditTrail.Interfaces</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">interface</span> <span class="nc">IAuditTrail</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">void</span> <span class="nf">Insert</span><span class="p">(</span><span class="n">T</span> <span class="n">entity</span><span class="p">);</span>
        <span class="k">void</span> <span class="nf">Update</span><span class="p">(</span><span class="n">T</span> <span class="n">oldEntity</span><span class="p">,</span> <span class="n">T</span> <span class="n">newEntity</span><span class="p">);</span>
        <span class="k">void</span> <span class="nf">Delete</span><span class="p">(</span><span class="n">T</span> <span class="n">oldEntity</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create AuditTrail class in AuditTrail/Implementaion folder</li>
</ul>

<p><strong>AuditTrail.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">AuditLog.API.AuditTrail.Enums</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">AuditLog.API.AuditTrail.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">AuditLog.API.Persistence</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Data</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Data.SqlClient</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Reflection</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">AuditLog.API.AuditTrail.Implementations</span>
<span class="p">{</span>
    <span class="c1">// This class is used to insert audit log into database.</span>
    <span class="c1">// This is the core class of the AuditTrail project.</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">AuditTrail</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="p">:</span> <span class="n">IAuditTrail</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="k">where</span> <span class="n">T</span> <span class="p">:</span> <span class="k">class</span>
    <span class="err">{</span>
        <span class="nc">private</span> <span class="n">DBConnector</span> <span class="n">_connector</span><span class="p">;</span>
        <span class="k">public</span> <span class="nf">AuditTrail</span><span class="p">(</span><span class="n">DBConnector</span> <span class="n">dBConnector</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_connector</span> <span class="p">=</span> <span class="n">dBConnector</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">void</span> <span class="nf">Insert</span><span class="p">(</span><span class="n">T</span> <span class="n">entity</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">entity</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span><span class="p">;</span>
            <span class="p">}</span>


            <span class="n">Type</span> <span class="n">type</span> <span class="p">=</span> <span class="k">typeof</span><span class="p">(</span><span class="n">T</span><span class="p">);</span>
            <span class="n">PropertyInfo</span><span class="p">[]</span> <span class="n">propertyInfos</span> <span class="p">=</span> <span class="n">type</span><span class="p">.</span><span class="nf">GetProperties</span><span class="p">();</span>
            <span class="kt">string</span> <span class="n">applicationName</span> <span class="p">=</span> <span class="n">ApplicationEnum</span><span class="p">.</span><span class="n">AuditLogAPP</span><span class="p">.</span><span class="nf">GetApplication</span><span class="p">();</span>

            <span class="kt">var</span> <span class="n">cmd</span> <span class="p">=</span> <span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">CreateCommand</span><span class="p">()</span> <span class="k">as</span> <span class="n">SqlCommand</span><span class="p">;</span>
            <span class="n">SqlTransaction</span> <span class="n">transaction</span> <span class="p">=</span> <span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">BeginTransaction</span><span class="p">(</span><span class="s">""</span><span class="p">);</span>
            <span class="n">cmd</span><span class="p">.</span><span class="n">Transaction</span> <span class="p">=</span> <span class="n">transaction</span><span class="p">;</span>


            <span class="k">try</span>
            <span class="p">{</span>

                <span class="c1">// Insert into AuditEntry table</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">CommandText</span> <span class="p">=</span> <span class="s">@"INSERT INTO [AuditEntry] (EntitySetName, EntityTypeName, State, StateName, CreatedBy, CreatedDate, Discriminator, AppplicationName) 
                                    OUTPUT inserted.AuditEntryID
                                    VALUES (@EntitySetName, @EntityTypeName, @State,@StateName, @CreatedBy, @CreatedDate, @Discriminator, @AppplicationName);
                                    SELECT SCOPE_IDENTITY();"</span><span class="p">;</span>

                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@EntitySetName"</span><span class="p">,</span> <span class="n">type</span><span class="p">.</span><span class="n">Name</span><span class="p">);</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@EntityTypeName"</span><span class="p">,</span> <span class="n">type</span><span class="p">.</span><span class="n">Name</span><span class="p">);</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@State"</span><span class="p">,</span> <span class="n">StateName</span><span class="p">.</span><span class="n">EntityAdded</span><span class="p">);</span> <span class="c1">// 0 for insert</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@StateName"</span><span class="p">,</span> <span class="n">StateName</span><span class="p">.</span><span class="n">EntityAdded</span><span class="p">.</span><span class="nf">ToString</span><span class="p">());</span> <span class="c1">// EntityAdded for insert</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@CreatedBy"</span><span class="p">,</span> <span class="s">"mahedee"</span><span class="p">);</span> <span class="c1">// It will come from session</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@CreatedDate"</span><span class="p">,</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">);</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@Discriminator"</span><span class="p">,</span> <span class="s">"CustomAuditEntry"</span><span class="p">);</span> <span class="c1">// CustomAuditEntry Model</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@AppplicationName"</span><span class="p">,</span> <span class="n">applicationName</span><span class="p">);</span> <span class="c1">// Name of the application</span>

                <span class="kt">int</span> <span class="n">auditEntryId</span> <span class="p">=</span> <span class="n">Convert</span><span class="p">.</span><span class="nf">ToInt32</span><span class="p">(</span><span class="n">cmd</span><span class="p">.</span><span class="nf">ExecuteScalar</span><span class="p">());</span>

                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">Clear</span><span class="p">();</span>


                <span class="c1">// Insert into AuditEntryProperty table</span>
                <span class="c1">// Values of each property</span>

                <span class="n">cmd</span><span class="p">.</span><span class="n">CommandText</span> <span class="p">=</span> <span class="s">@"INSERT INTO [AuditEntryProperty] (AuditEntryID, RelationName, PropertyName, OldValue, NewValue, Discriminator, AppplicationName) 
                                    VALUES (@AuditEntryID, @RelationName, @PropertyName, @OldValue, @NewValue, @DiscriminatorProperty, @AppplicationNameProperty);
                                    SELECT SCOPE_IDENTITY();"</span><span class="p">;</span>

                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">SqlParameter</span><span class="p">(</span><span class="s">"@AuditEntryID"</span><span class="p">,</span> <span class="n">SqlDbType</span><span class="p">.</span><span class="n">Int</span><span class="p">));</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">SqlParameter</span><span class="p">(</span><span class="s">"@RelationName"</span><span class="p">,</span> <span class="n">SqlDbType</span><span class="p">.</span><span class="n">NVarChar</span><span class="p">));</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">SqlParameter</span><span class="p">(</span><span class="s">"@PropertyName"</span><span class="p">,</span> <span class="n">SqlDbType</span><span class="p">.</span><span class="n">NVarChar</span><span class="p">));</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">SqlParameter</span><span class="p">(</span><span class="s">"@OldValue"</span><span class="p">,</span> <span class="n">SqlDbType</span><span class="p">.</span><span class="n">NVarChar</span><span class="p">));</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">SqlParameter</span><span class="p">(</span><span class="s">"@NewValue"</span><span class="p">,</span> <span class="n">SqlDbType</span><span class="p">.</span><span class="n">NVarChar</span><span class="p">));</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">SqlParameter</span><span class="p">(</span><span class="s">"@DiscriminatorProperty"</span><span class="p">,</span> <span class="n">SqlDbType</span><span class="p">.</span><span class="n">NVarChar</span><span class="p">));</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">SqlParameter</span><span class="p">(</span><span class="s">"@AppplicationNameProperty"</span><span class="p">,</span> <span class="n">SqlDbType</span><span class="p">.</span><span class="n">NVarChar</span><span class="p">));</span>


                <span class="k">foreach</span> <span class="p">(</span><span class="n">PropertyInfo</span> <span class="n">propertyInfo</span> <span class="k">in</span> <span class="n">propertyInfos</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">[</span><span class="s">"@AuditEntryID"</span><span class="p">].</span><span class="n">Value</span> <span class="p">=</span> <span class="n">auditEntryId</span><span class="p">;</span>
                    <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">[</span><span class="s">"@RelationName"</span><span class="p">].</span><span class="n">Value</span> <span class="p">=</span> <span class="n">DBNull</span><span class="p">.</span><span class="n">Value</span><span class="p">;</span>
                    <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">[</span><span class="s">"@PropertyName"</span><span class="p">].</span><span class="n">Value</span> <span class="p">=</span> <span class="n">propertyInfo</span><span class="p">.</span><span class="n">Name</span><span class="p">;</span> <span class="c1">// property name</span>
                    <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">[</span><span class="s">"@OldValue"</span><span class="p">].</span><span class="n">Value</span> <span class="p">=</span> <span class="n">DBNull</span><span class="p">.</span><span class="n">Value</span><span class="p">;</span> <span class="c1">// Null for insert</span>
                    <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">[</span><span class="s">"@NewValue"</span><span class="p">].</span><span class="n">Value</span> <span class="p">=</span> <span class="n">propertyInfo</span><span class="p">.</span><span class="nf">GetValue</span><span class="p">(</span><span class="n">entity</span><span class="p">);</span> <span class="c1">// property value</span>
                    <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">[</span><span class="s">"@DiscriminatorProperty"</span><span class="p">].</span><span class="n">Value</span> <span class="p">=</span> <span class="s">"CustomAuditEntryProperty"</span><span class="p">;</span>
                    <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">[</span><span class="s">"@AppplicationNameProperty"</span><span class="p">].</span><span class="n">Value</span> <span class="p">=</span> <span class="n">applicationName</span><span class="p">;</span>
                    <span class="n">cmd</span><span class="p">.</span><span class="nf">ExecuteScalar</span><span class="p">();</span>
                <span class="p">}</span>

                <span class="c1">// Commit transaction</span>
                <span class="n">transaction</span><span class="p">.</span><span class="nf">Commit</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">transaction</span><span class="p">.</span><span class="nf">Rollback</span><span class="p">();</span>
                <span class="k">throw</span> <span class="n">ex</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">finally</span>
            <span class="p">{</span>
                <span class="c1">// close connection</span>
                <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="nf">Dispose</span><span class="p">();</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">void</span> <span class="nf">Update</span><span class="p">(</span><span class="n">T</span> <span class="n">oldEntity</span><span class="p">,</span> <span class="n">T</span> <span class="n">newEntity</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">oldEntity</span> <span class="k">is</span> <span class="k">null</span> <span class="p">||</span> <span class="n">newEntity</span> <span class="k">is</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="c1">// Get the properties from type</span>
            <span class="n">Type</span> <span class="n">type</span> <span class="p">=</span> <span class="k">typeof</span><span class="p">(</span><span class="n">T</span><span class="p">);</span>
            <span class="n">PropertyInfo</span><span class="p">[]</span> <span class="n">propertyInfos</span> <span class="p">=</span> <span class="n">type</span><span class="p">.</span><span class="nf">GetProperties</span><span class="p">();</span>
            <span class="kt">string</span> <span class="n">applicationName</span> <span class="p">=</span> <span class="n">ApplicationEnum</span><span class="p">.</span><span class="n">AuditLogAPP</span><span class="p">.</span><span class="nf">GetApplication</span><span class="p">();</span>

            <span class="kt">var</span> <span class="n">cmd</span> <span class="p">=</span> <span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">CreateCommand</span><span class="p">()</span> <span class="k">as</span> <span class="n">SqlCommand</span><span class="p">;</span>
            <span class="n">SqlTransaction</span> <span class="n">transaction</span> <span class="p">=</span> <span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">BeginTransaction</span><span class="p">(</span><span class="s">""</span><span class="p">);</span>
            <span class="n">cmd</span><span class="p">.</span><span class="n">Transaction</span> <span class="p">=</span> <span class="n">transaction</span><span class="p">;</span>


            <span class="k">try</span>
            <span class="p">{</span>

                <span class="c1">// Insert into AuditEntry</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">CommandText</span> <span class="p">=</span> <span class="s">@"INSERT INTO [AuditEntry] (EntitySetName, EntityTypeName, State, StateName, CreatedBy, CreatedDate, Discriminator, AppplicationName) 
                                    OUTPUT inserted.AuditEntryID
                                    VALUES (@EntitySetName, @EntityTypeName, @State,@StateName, @CreatedBy, @CreatedDate, @Discriminator, @AppplicationName);
                                    SELECT SCOPE_IDENTITY();"</span><span class="p">;</span>

                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@EntitySetName"</span><span class="p">,</span> <span class="n">type</span><span class="p">.</span><span class="n">Name</span><span class="p">);</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@EntityTypeName"</span><span class="p">,</span> <span class="n">type</span><span class="p">.</span><span class="n">Name</span><span class="p">);</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@State"</span><span class="p">,</span> <span class="n">StateName</span><span class="p">.</span><span class="n">EntityModified</span><span class="p">);</span> <span class="c1">// 1 for update</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@StateName"</span><span class="p">,</span> <span class="n">StateName</span><span class="p">.</span><span class="n">EntityModified</span><span class="p">.</span><span class="nf">ToString</span><span class="p">());</span> <span class="c1">// EntityAdded for update // Come from an enum</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@CreatedBy"</span><span class="p">,</span> <span class="s">"mahedee"</span><span class="p">);</span> <span class="c1">// It will come from session</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@CreatedDate"</span><span class="p">,</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">);</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@Discriminator"</span><span class="p">,</span> <span class="s">"CustomAuditEntry"</span><span class="p">);</span> <span class="c1">// CustomAuditEntry Model</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@AppplicationName"</span><span class="p">,</span> <span class="n">applicationName</span><span class="p">);</span> <span class="c1">// Name of the application // Get from config enum</span>

                <span class="kt">int</span> <span class="n">auditEntryId</span> <span class="p">=</span> <span class="n">Convert</span><span class="p">.</span><span class="nf">ToInt32</span><span class="p">(</span><span class="n">cmd</span><span class="p">.</span><span class="nf">ExecuteScalar</span><span class="p">());</span>

                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">Clear</span><span class="p">();</span>


                <span class="c1">// Insert into AuditEntryProperty</span>
                <span class="c1">// Values of each property</span>

                <span class="n">cmd</span><span class="p">.</span><span class="n">CommandText</span> <span class="p">=</span> <span class="s">@"INSERT INTO [AuditEntryProperty] (AuditEntryID, RelationName, PropertyName, OldValue, NewValue, Discriminator, AppplicationName) 
                                    VALUES (@AuditEntryID, @RelationName, @PropertyName, @OldValue, @NewValue, @DiscriminatorProperty, @AppplicationNameProperty);
                                    SELECT SCOPE_IDENTITY();"</span><span class="p">;</span>

                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">SqlParameter</span><span class="p">(</span><span class="s">"@AuditEntryID"</span><span class="p">,</span> <span class="n">SqlDbType</span><span class="p">.</span><span class="n">Int</span><span class="p">));</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">SqlParameter</span><span class="p">(</span><span class="s">"@RelationName"</span><span class="p">,</span> <span class="n">SqlDbType</span><span class="p">.</span><span class="n">NVarChar</span><span class="p">));</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">SqlParameter</span><span class="p">(</span><span class="s">"@PropertyName"</span><span class="p">,</span> <span class="n">SqlDbType</span><span class="p">.</span><span class="n">NVarChar</span><span class="p">));</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">SqlParameter</span><span class="p">(</span><span class="s">"@OldValue"</span><span class="p">,</span> <span class="n">SqlDbType</span><span class="p">.</span><span class="n">NVarChar</span><span class="p">));</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">SqlParameter</span><span class="p">(</span><span class="s">"@NewValue"</span><span class="p">,</span> <span class="n">SqlDbType</span><span class="p">.</span><span class="n">NVarChar</span><span class="p">));</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">SqlParameter</span><span class="p">(</span><span class="s">"@DiscriminatorProperty"</span><span class="p">,</span> <span class="n">SqlDbType</span><span class="p">.</span><span class="n">NVarChar</span><span class="p">));</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">SqlParameter</span><span class="p">(</span><span class="s">"@AppplicationNameProperty"</span><span class="p">,</span> <span class="n">SqlDbType</span><span class="p">.</span><span class="n">NVarChar</span><span class="p">));</span>


                <span class="k">foreach</span> <span class="p">(</span><span class="n">PropertyInfo</span> <span class="n">propertyInfo</span> <span class="k">in</span> <span class="n">propertyInfos</span><span class="p">)</span>
                <span class="p">{</span>


                    <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">[</span><span class="m">0</span><span class="p">].</span><span class="n">Value</span> <span class="p">=</span> <span class="n">auditEntryId</span><span class="p">;</span>
                    <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">[</span><span class="m">1</span><span class="p">].</span><span class="n">Value</span> <span class="p">=</span> <span class="n">DBNull</span><span class="p">.</span><span class="n">Value</span><span class="p">;</span>
                    <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">[</span><span class="m">2</span><span class="p">].</span><span class="n">Value</span> <span class="p">=</span> <span class="n">propertyInfo</span><span class="p">.</span><span class="n">Name</span><span class="p">;</span> <span class="c1">// property name</span>
                    <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">[</span><span class="m">3</span><span class="p">].</span><span class="n">Value</span> <span class="p">=</span> <span class="n">propertyInfo</span><span class="p">.</span><span class="nf">GetValue</span><span class="p">(</span><span class="n">oldEntity</span><span class="p">);</span> <span class="c1">// old value</span>
                    <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">[</span><span class="m">4</span><span class="p">].</span><span class="n">Value</span> <span class="p">=</span> <span class="n">propertyInfo</span><span class="p">.</span><span class="nf">GetValue</span><span class="p">(</span><span class="n">newEntity</span><span class="p">);</span> <span class="c1">// new value</span>
                    <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">[</span><span class="m">5</span><span class="p">].</span><span class="n">Value</span> <span class="p">=</span> <span class="s">"CustomAuditEntryProperty"</span><span class="p">;</span>
                    <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">[</span><span class="m">6</span><span class="p">].</span><span class="n">Value</span> <span class="p">=</span> <span class="n">applicationName</span><span class="p">;</span>
                    <span class="n">cmd</span><span class="p">.</span><span class="nf">ExecuteScalar</span><span class="p">();</span>
                <span class="p">}</span>

                <span class="c1">// Commit transaction</span>
                <span class="n">transaction</span><span class="p">.</span><span class="nf">Commit</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">transaction</span><span class="p">.</span><span class="nf">Rollback</span><span class="p">();</span>
                <span class="k">throw</span> <span class="n">ex</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">void</span> <span class="nf">Delete</span><span class="p">(</span><span class="n">T</span> <span class="n">oldEntity</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">oldEntity</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span><span class="p">;</span>
            <span class="p">}</span>


            <span class="c1">// Get the properties from type</span>
            <span class="n">Type</span> <span class="n">type</span> <span class="p">=</span> <span class="k">typeof</span><span class="p">(</span><span class="n">T</span><span class="p">);</span>
            <span class="n">PropertyInfo</span><span class="p">[]</span> <span class="n">propertyInfos</span> <span class="p">=</span> <span class="n">type</span><span class="p">.</span><span class="nf">GetProperties</span><span class="p">();</span>
            <span class="kt">string</span> <span class="n">applicationName</span> <span class="p">=</span> <span class="n">ApplicationEnum</span><span class="p">.</span><span class="n">AuditLogAPP</span><span class="p">.</span><span class="nf">GetApplication</span><span class="p">();</span>

            <span class="kt">var</span> <span class="n">cmd</span> <span class="p">=</span> <span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">CreateCommand</span><span class="p">()</span> <span class="k">as</span> <span class="n">SqlCommand</span><span class="p">;</span>
            <span class="n">SqlTransaction</span> <span class="n">transaction</span> <span class="p">=</span> <span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">BeginTransaction</span><span class="p">(</span><span class="s">""</span><span class="p">);</span>
            <span class="n">cmd</span><span class="p">.</span><span class="n">Transaction</span> <span class="p">=</span> <span class="n">transaction</span><span class="p">;</span>


            <span class="k">try</span>
            <span class="p">{</span>

                <span class="c1">// Insert into AuditEntry</span>


                <span class="n">cmd</span><span class="p">.</span><span class="n">CommandText</span> <span class="p">=</span> <span class="s">@"INSERT INTO [AuditEntry] (EntitySetName, EntityTypeName, State, StateName, CreatedBy, CreatedDate, Discriminator, AppplicationName) 
                                    OUTPUT inserted.AuditEntryID
                                    VALUES (@EntitySetName, @EntityTypeName, @State,@StateName, @CreatedBy, @CreatedDate, @Discriminator, @AppplicationName);
                                    SELECT SCOPE_IDENTITY();"</span><span class="p">;</span>

                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@EntitySetName"</span><span class="p">,</span> <span class="n">type</span><span class="p">.</span><span class="n">Name</span><span class="p">);</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@EntityTypeName"</span><span class="p">,</span> <span class="n">type</span><span class="p">.</span><span class="n">Name</span><span class="p">);</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@State"</span><span class="p">,</span> <span class="n">StateName</span><span class="p">.</span><span class="n">EntityDeleted</span><span class="p">);</span> <span class="c1">// 2 for delete</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@StateName"</span><span class="p">,</span> <span class="n">StateName</span><span class="p">.</span><span class="n">EntityDeleted</span><span class="p">.</span><span class="nf">ToString</span><span class="p">());</span> <span class="c1">// EntityAdded for insert</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@CreatedBy"</span><span class="p">,</span> <span class="s">"mahedee"</span><span class="p">);</span> <span class="c1">// It will come from session</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@CreatedDate"</span><span class="p">,</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">);</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@Discriminator"</span><span class="p">,</span> <span class="s">"CustomAuditEntry"</span><span class="p">);</span> <span class="c1">// CustomAuditEntry Model</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@AppplicationName"</span><span class="p">,</span> <span class="n">applicationName</span><span class="p">);</span> <span class="c1">// Name of the application</span>

                <span class="kt">int</span> <span class="n">auditEntryId</span> <span class="p">=</span> <span class="n">Convert</span><span class="p">.</span><span class="nf">ToInt32</span><span class="p">(</span><span class="n">cmd</span><span class="p">.</span><span class="nf">ExecuteScalar</span><span class="p">());</span>

                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">Clear</span><span class="p">();</span>


                <span class="c1">// Insert into AuditEntryProperty</span>
                <span class="c1">// Values of each property</span>

                <span class="n">cmd</span><span class="p">.</span><span class="n">CommandText</span> <span class="p">=</span> <span class="s">@"INSERT INTO [AuditEntryProperty] (AuditEntryID, RelationName, PropertyName, OldValue, NewValue, Discriminator, AppplicationName) 
                                    VALUES (@AuditEntryID, @RelationName, @PropertyName, @OldValue, @NewValue, @DiscriminatorProperty, @AppplicationNameProperty);
                                    SELECT SCOPE_IDENTITY();"</span><span class="p">;</span>

                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">SqlParameter</span><span class="p">(</span><span class="s">"@AuditEntryID"</span><span class="p">,</span> <span class="n">SqlDbType</span><span class="p">.</span><span class="n">Int</span><span class="p">));</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">SqlParameter</span><span class="p">(</span><span class="s">"@RelationName"</span><span class="p">,</span> <span class="n">SqlDbType</span><span class="p">.</span><span class="n">NVarChar</span><span class="p">));</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">SqlParameter</span><span class="p">(</span><span class="s">"@PropertyName"</span><span class="p">,</span> <span class="n">SqlDbType</span><span class="p">.</span><span class="n">NVarChar</span><span class="p">));</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">SqlParameter</span><span class="p">(</span><span class="s">"@OldValue"</span><span class="p">,</span> <span class="n">SqlDbType</span><span class="p">.</span><span class="n">NVarChar</span><span class="p">));</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">SqlParameter</span><span class="p">(</span><span class="s">"@NewValue"</span><span class="p">,</span> <span class="n">SqlDbType</span><span class="p">.</span><span class="n">NVarChar</span><span class="p">));</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">SqlParameter</span><span class="p">(</span><span class="s">"@DiscriminatorProperty"</span><span class="p">,</span> <span class="n">SqlDbType</span><span class="p">.</span><span class="n">NVarChar</span><span class="p">));</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">SqlParameter</span><span class="p">(</span><span class="s">"@AppplicationNameProperty"</span><span class="p">,</span> <span class="n">SqlDbType</span><span class="p">.</span><span class="n">NVarChar</span><span class="p">));</span>


                <span class="k">foreach</span> <span class="p">(</span><span class="n">PropertyInfo</span> <span class="n">propertyInfo</span> <span class="k">in</span> <span class="n">propertyInfos</span><span class="p">)</span>
                <span class="p">{</span>

                    <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">[</span><span class="s">"@AuditEntryID"</span><span class="p">].</span><span class="n">Value</span> <span class="p">=</span> <span class="n">auditEntryId</span><span class="p">;</span>
                    <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">[</span><span class="s">"@RelationName"</span><span class="p">].</span><span class="n">Value</span> <span class="p">=</span> <span class="n">DBNull</span><span class="p">.</span><span class="n">Value</span><span class="p">;</span>
                    <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">[</span><span class="s">"@PropertyName"</span><span class="p">].</span><span class="n">Value</span> <span class="p">=</span> <span class="n">propertyInfo</span><span class="p">.</span><span class="n">Name</span><span class="p">;</span> <span class="c1">// property name</span>
                    <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">[</span><span class="s">"@OldValue"</span><span class="p">].</span><span class="n">Value</span> <span class="p">=</span> <span class="n">propertyInfo</span><span class="p">.</span><span class="nf">GetValue</span><span class="p">(</span><span class="n">oldEntity</span><span class="p">);</span> <span class="c1">// property value</span>
                    <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">[</span><span class="s">"@NewValue"</span><span class="p">].</span><span class="n">Value</span> <span class="p">=</span> <span class="n">DBNull</span><span class="p">.</span><span class="n">Value</span><span class="p">;</span> <span class="c1">// Null for delete</span>
                    <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">[</span><span class="s">"@DiscriminatorProperty"</span><span class="p">].</span><span class="n">Value</span> <span class="p">=</span> <span class="s">"CustomAuditEntryProperty"</span><span class="p">;</span>
                    <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">[</span><span class="s">"@AppplicationNameProperty"</span><span class="p">].</span><span class="n">Value</span> <span class="p">=</span> <span class="n">applicationName</span><span class="p">;</span>
                    <span class="n">cmd</span><span class="p">.</span><span class="nf">ExecuteScalar</span><span class="p">();</span>
                <span class="p">}</span>

                <span class="c1">// Commit transaction</span>
                <span class="n">transaction</span><span class="p">.</span><span class="nf">Commit</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">transaction</span><span class="p">.</span><span class="nf">Rollback</span><span class="p">();</span>
                <span class="k">throw</span> <span class="n">ex</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">finally</span>
            <span class="p">{</span>
                <span class="c1">// close connection</span>
                <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="nf">Dispose</span><span class="p">();</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 8: Create two Interface IProductRepository and IReportingRepository in Repositories/Interfaces folder</strong></p>

<p><strong>IProductRepository.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">AuditLog.API.Models</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">AuditLog.API.Repositories.Interfaces</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">interface</span> <span class="nc">IProductRepository</span>
    <span class="p">{</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;&gt;</span> <span class="nf">GetProducts</span><span class="p">();</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="nf">GetProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="nf">AddProduct</span><span class="p">(</span><span class="n">Product</span> <span class="n">product</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="nf">UpdateProduct</span><span class="p">(</span><span class="n">Product</span> <span class="n">product</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="nf">DeleteProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>


</code></pre></div></div>

<p><strong>IReportingRepository.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">AuditLog.API.Repositories.Interfaces</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">interface</span> <span class="nc">IReportingRepository</span>
    <span class="p">{</span>
        <span class="c1">// Get all the changes for a particular entity response using Dynamic type</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="kt">dynamic</span><span class="p">&gt;&gt;</span> <span class="nf">GetChangeLogDynamic</span><span class="p">(</span><span class="kt">string</span> <span class="n">EntityName</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>


</code></pre></div></div>

<p><strong>Step 9: Create two Repository class name ProductRepository and ReportingRepository in Repositories/Implementations folder</strong></p>

<p><strong>ProductRepository.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">AuditLog.API.AuditTrail.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">AuditLog.API.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">AuditLog.API.Persistence</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">AuditLog.API.Repositories.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Data</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Data.SqlClient</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">AuditLog.API.Repositories.Implementations</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">ProductRepository</span> <span class="p">:</span> <span class="n">IProductRepository</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="n">DBConnector</span> <span class="n">_connector</span><span class="p">;</span>
        <span class="k">private</span> <span class="n">IAuditTrail</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="n">_auditTrail</span><span class="p">;</span>
        <span class="k">public</span> <span class="nf">ProductRepository</span><span class="p">(</span><span class="n">DBConnector</span> <span class="n">dBConnector</span><span class="p">,</span> <span class="n">IAuditTrail</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="n">auditTrail</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_connector</span> <span class="p">=</span> <span class="n">dBConnector</span><span class="p">;</span>
            <span class="n">_auditTrail</span> <span class="p">=</span> <span class="n">auditTrail</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="nf">AddProduct</span><span class="p">(</span><span class="n">Product</span> <span class="n">model</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">try</span>
            <span class="p">{</span>   
                <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="n">State</span> <span class="p">==</span> <span class="n">ConnectionState</span><span class="p">.</span><span class="n">Closed</span><span class="p">)</span>
                    <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">Open</span><span class="p">();</span>
                <span class="kt">var</span> <span class="n">cmd</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">CreateCommand</span><span class="p">()</span> <span class="k">as</span> <span class="n">SqlCommand</span><span class="p">;</span>
                <span class="n">SqlTransaction</span> <span class="n">transaction</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">BeginTransaction</span><span class="p">(</span><span class="s">""</span><span class="p">);</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Transaction</span> <span class="p">=</span> <span class="n">transaction</span><span class="p">;</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">CommandText</span> <span class="p">=</span> <span class="s">@"INSERT INTO Products (Name, Price, Quantity) 
                OUTPUT inserted.Id                
                VALUES (@Name, @Price, @Quantity); SELECT SCOPE_IDENTITY();"</span><span class="p">;</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@Name"</span><span class="p">,</span> <span class="n">model</span><span class="p">.</span><span class="n">Name</span><span class="p">);</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@Price"</span><span class="p">,</span> <span class="n">model</span><span class="p">.</span><span class="n">Price</span><span class="p">);</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@Quantity"</span><span class="p">,</span> <span class="n">model</span><span class="p">.</span><span class="n">Quantity</span><span class="p">);</span>

                <span class="c1">// cmd.ExecuteScalar() returns the first column of the first row in the result</span>
                <span class="c1">// set returned by the query. Additional columns or rows are ignored.</span>
                <span class="kt">int</span> <span class="n">insertedId</span> <span class="p">=</span> <span class="n">Convert</span><span class="p">.</span><span class="nf">ToInt32</span><span class="p">(</span><span class="n">cmd</span><span class="p">.</span><span class="nf">ExecuteScalar</span><span class="p">());</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">insertedId</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="n">transaction</span><span class="p">.</span><span class="nf">Commit</span><span class="p">();</span>
                <span class="p">}</span>

                <span class="n">model</span><span class="p">.</span><span class="n">Id</span> <span class="p">=</span> <span class="n">insertedId</span><span class="p">;</span>

                <span class="c1">// Add audit trail</span>
                <span class="n">_auditTrail</span><span class="p">.</span><span class="nf">Insert</span><span class="p">(</span><span class="n">model</span><span class="p">);</span>
                <span class="k">return</span> <span class="n">Task</span><span class="p">.</span><span class="nf">FromResult</span><span class="p">(</span><span class="n">model</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="n">ex</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">finally</span>
            <span class="p">{</span>
                <span class="c1">// close connection</span>
                <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="nf">Dispose</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="k">null</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="nf">GetProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">product</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Product</span><span class="p">();</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="n">State</span> <span class="p">==</span> <span class="n">ConnectionState</span><span class="p">.</span><span class="n">Closed</span><span class="p">)</span>
                    <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">Open</span><span class="p">();</span>
                <span class="kt">var</span> <span class="n">cmd</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">CreateCommand</span><span class="p">()</span> <span class="k">as</span> <span class="n">SqlCommand</span><span class="p">;</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">CommandText</span> <span class="p">=</span> <span class="s">@"SELECT Id, Name, Price, Quantity FROM Products WHERE Id = @Id"</span><span class="p">;</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@Id"</span><span class="p">,</span> <span class="n">id</span><span class="p">);</span>
                <span class="kt">var</span> <span class="n">reader</span> <span class="p">=</span> <span class="n">cmd</span><span class="p">.</span><span class="nf">ExecuteReader</span><span class="p">();</span>
                <span class="k">while</span> <span class="p">(</span><span class="n">reader</span><span class="p">.</span><span class="nf">Read</span><span class="p">())</span>
                <span class="p">{</span>
                    <span class="n">product</span><span class="p">.</span><span class="n">Id</span> <span class="p">=</span> <span class="n">Convert</span><span class="p">.</span><span class="nf">ToInt32</span><span class="p">(</span><span class="n">reader</span><span class="p">[</span><span class="s">"Id"</span><span class="p">]);</span>
                    <span class="n">product</span><span class="p">.</span><span class="n">Name</span> <span class="p">=</span> <span class="n">reader</span><span class="p">[</span><span class="s">"Name"</span><span class="p">]</span> <span class="p">!=</span> <span class="n">DBNull</span><span class="p">.</span><span class="n">Value</span> <span class="p">?</span> <span class="n">reader</span><span class="p">[</span><span class="s">"Name"</span><span class="p">].</span><span class="nf">ToString</span><span class="p">()</span> <span class="p">:</span> <span class="k">null</span><span class="p">;</span>
                    <span class="n">product</span><span class="p">.</span><span class="n">Price</span> <span class="p">=</span> <span class="n">Convert</span><span class="p">.</span><span class="nf">ToDecimal</span><span class="p">(</span><span class="n">reader</span><span class="p">[</span><span class="s">"Price"</span><span class="p">]);</span>
                    <span class="n">product</span><span class="p">.</span><span class="n">Quantity</span> <span class="p">=</span> <span class="n">Convert</span><span class="p">.</span><span class="nf">ToInt32</span><span class="p">(</span><span class="n">reader</span><span class="p">[</span><span class="s">"Quantity"</span><span class="p">]);</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="n">ex</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">finally</span>
            <span class="p">{</span>
                <span class="c1">// close connection</span>
                <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="nf">Dispose</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="c1">// Task.FromResult is a helper method that creates a Task that's completed successfully</span>
            <span class="c1">// with the specified result.</span>
            <span class="k">return</span> <span class="n">Task</span><span class="p">.</span><span class="nf">FromResult</span><span class="p">(</span><span class="n">product</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;&gt;</span> <span class="nf">GetProducts</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">products</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;();</span>

            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="n">State</span> <span class="p">==</span> <span class="n">ConnectionState</span><span class="p">.</span><span class="n">Closed</span><span class="p">)</span>
                    <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">Open</span><span class="p">();</span>
                <span class="kt">var</span> <span class="n">cmd</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">CreateCommand</span><span class="p">()</span> <span class="k">as</span> <span class="n">SqlCommand</span><span class="p">;</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">CommandText</span> <span class="p">=</span> <span class="s">@"SELECT Id, Name, Price, Quantity FROM Products"</span><span class="p">;</span>
                <span class="kt">var</span> <span class="n">reader</span> <span class="p">=</span> <span class="n">cmd</span><span class="p">.</span><span class="nf">ExecuteReader</span><span class="p">();</span>
                <span class="k">while</span> <span class="p">(</span><span class="n">reader</span><span class="p">.</span><span class="nf">Read</span><span class="p">())</span>
                <span class="p">{</span>
                    <span class="kt">var</span> <span class="n">product</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Product</span><span class="p">()</span>
                    <span class="p">{</span>
                        <span class="n">Id</span> <span class="p">=</span> <span class="n">Convert</span><span class="p">.</span><span class="nf">ToInt32</span><span class="p">(</span><span class="n">reader</span><span class="p">[</span><span class="s">"Id"</span><span class="p">]),</span>
                        <span class="n">Name</span> <span class="p">=</span> <span class="n">reader</span><span class="p">[</span><span class="s">"Name"</span><span class="p">]</span> <span class="p">!=</span> <span class="n">DBNull</span><span class="p">.</span><span class="n">Value</span> <span class="p">?</span> <span class="n">reader</span><span class="p">[</span><span class="s">"Name"</span><span class="p">].</span><span class="nf">ToString</span><span class="p">()</span> <span class="p">:</span> <span class="k">null</span><span class="p">,</span>
                        <span class="n">Price</span> <span class="p">=</span> <span class="n">Convert</span><span class="p">.</span><span class="nf">ToDecimal</span><span class="p">(</span><span class="n">reader</span><span class="p">[</span><span class="s">"Price"</span><span class="p">]),</span>
                        <span class="n">Quantity</span> <span class="p">=</span> <span class="n">Convert</span><span class="p">.</span><span class="nf">ToInt32</span><span class="p">(</span><span class="n">reader</span><span class="p">[</span><span class="s">"Quantity"</span><span class="p">])</span>
                    <span class="p">};</span>
                    <span class="n">products</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">product</span><span class="p">);</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="n">ex</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">finally</span>
            <span class="p">{</span>
                <span class="c1">// close connection</span>
                <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="nf">Dispose</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="n">products</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="nf">UpdateProduct</span><span class="p">(</span><span class="n">Product</span> <span class="n">product</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Product</span> <span class="n">oldEntity</span> <span class="p">=</span> <span class="nf">GetProduct</span><span class="p">(</span><span class="n">product</span><span class="p">.</span><span class="n">Id</span><span class="p">).</span><span class="n">Result</span><span class="p">;</span>

            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="n">State</span> <span class="p">==</span> <span class="n">ConnectionState</span><span class="p">.</span><span class="n">Closed</span><span class="p">)</span>
                    <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">Open</span><span class="p">();</span>
                <span class="kt">var</span> <span class="n">cmd</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">CreateCommand</span><span class="p">()</span> <span class="k">as</span> <span class="n">SqlCommand</span><span class="p">;</span>
                <span class="n">SqlTransaction</span> <span class="n">transaction</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">BeginTransaction</span><span class="p">(</span><span class="s">""</span><span class="p">);</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Transaction</span> <span class="p">=</span> <span class="n">transaction</span><span class="p">;</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">CommandText</span> <span class="p">=</span> <span class="s">@"UPDATE Products SET Name = @Name, Price = @Price, Quantity = @Quantity WHERE Id = @Id"</span><span class="p">;</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@Id"</span><span class="p">,</span> <span class="n">product</span><span class="p">.</span><span class="n">Id</span><span class="p">);</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@Name"</span><span class="p">,</span> <span class="n">product</span><span class="p">.</span><span class="n">Name</span><span class="p">);</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@Price"</span><span class="p">,</span> <span class="n">product</span><span class="p">.</span><span class="n">Price</span><span class="p">);</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@Quantity"</span><span class="p">,</span> <span class="n">product</span><span class="p">.</span><span class="n">Quantity</span><span class="p">);</span>

                <span class="kt">int</span> <span class="n">effectedRow</span> <span class="p">=</span> <span class="n">cmd</span><span class="p">.</span><span class="nf">ExecuteNonQuery</span><span class="p">();</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">effectedRow</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="n">transaction</span><span class="p">.</span><span class="nf">Commit</span><span class="p">();</span>
                <span class="p">}</span>

                <span class="c1">// Update audit trail</span>
                <span class="n">_auditTrail</span><span class="p">.</span><span class="nf">Update</span><span class="p">(</span><span class="n">oldEntity</span><span class="p">,</span> <span class="n">product</span><span class="p">);</span>
                <span class="k">return</span> <span class="n">Task</span><span class="p">.</span><span class="nf">FromResult</span><span class="p">(</span><span class="n">product</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="n">ex</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">finally</span>
            <span class="p">{</span>
                <span class="c1">// close connection</span>
                <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="nf">Dispose</span><span class="p">();</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="nf">DeleteProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Product</span> <span class="n">oldEntity</span> <span class="p">=</span> <span class="nf">GetProduct</span><span class="p">(</span><span class="n">id</span><span class="p">).</span><span class="n">Result</span><span class="p">;</span>

            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="n">State</span> <span class="p">==</span> <span class="n">ConnectionState</span><span class="p">.</span><span class="n">Closed</span><span class="p">)</span>
                    <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">Open</span><span class="p">();</span>
                <span class="kt">var</span> <span class="n">cmd</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">CreateCommand</span><span class="p">()</span> <span class="k">as</span> <span class="n">SqlCommand</span><span class="p">;</span>
                <span class="n">SqlTransaction</span> <span class="n">transaction</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">BeginTransaction</span><span class="p">(</span><span class="s">""</span><span class="p">);</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Transaction</span> <span class="p">=</span> <span class="n">transaction</span><span class="p">;</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">CommandText</span> <span class="p">=</span> <span class="s">@"DELETE FROM Products WHERE Id = @Id"</span><span class="p">;</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@Id"</span><span class="p">,</span> <span class="n">id</span><span class="p">);</span>

                <span class="kt">int</span> <span class="n">effectedRow</span> <span class="p">=</span> <span class="n">cmd</span><span class="p">.</span><span class="nf">ExecuteNonQuery</span><span class="p">();</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">effectedRow</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="n">transaction</span><span class="p">.</span><span class="nf">Commit</span><span class="p">();</span>
                <span class="p">}</span>

                <span class="c1">// Add audit trail</span>
                <span class="n">_auditTrail</span><span class="p">.</span><span class="nf">Delete</span><span class="p">(</span><span class="n">oldEntity</span><span class="p">);</span>
                <span class="k">return</span> <span class="n">Task</span><span class="p">.</span><span class="nf">FromResult</span><span class="p">(</span><span class="n">oldEntity</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="n">ex</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">finally</span>
            <span class="p">{</span>
                <span class="c1">// close connection</span>
                <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="nf">Dispose</span><span class="p">();</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>ReportingRepository.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">AuditLog.API.AuditTrail.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">AuditLog.API.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">AuditLog.API.Persistence</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">AuditLog.API.Repositories.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Data</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Data.SqlClient</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Dynamic</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">AuditLog.API.Repositories.Implementations</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">ReportingRepository</span> <span class="p">:</span> <span class="n">IReportingRepository</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="n">DBConnector</span> <span class="n">_connector</span><span class="p">;</span>
        <span class="k">public</span> <span class="nf">ReportingRepository</span><span class="p">(</span><span class="n">DBConnector</span> <span class="n">dBConnector</span><span class="p">)</span> 
        <span class="p">{</span>
            <span class="n">_connector</span> <span class="p">=</span> <span class="n">dBConnector</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="kt">dynamic</span><span class="p">&gt;&gt;</span> <span class="nf">GetChangeLogDynamic</span><span class="p">(</span><span class="kt">string</span> <span class="n">EntityName</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="n">State</span> <span class="p">==</span> <span class="n">ConnectionState</span><span class="p">.</span><span class="n">Closed</span><span class="p">)</span>
                    <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">Open</span><span class="p">();</span>
                <span class="kt">var</span> <span class="n">cmd</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">CreateCommand</span><span class="p">()</span> <span class="k">as</span> <span class="n">SqlCommand</span><span class="p">;</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">CommandText</span> <span class="p">=</span> <span class="s">@"  SELECT ae.AuditEntryID, ae.EntityTypeName, ae.StateName, ae.CreatedDate, aep.AuditEntryPropertyID, aep.PropertyName, aep.OldValue, aep.NewValue, aep.AppplicationName
                                  FROM AuditEntry ae INNER JOIN AuditEntryProperty aep
                                  ON ae.AuditEntryID = aep.AuditEntryID
                                  WHERE ae.EntityTypeName = @EntityName
                                  ORDER by ae.CreatedDate"</span><span class="p">;</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@EntityName"</span><span class="p">,</span> <span class="n">EntityName</span><span class="p">);</span>
                <span class="kt">var</span> <span class="n">reader</span> <span class="p">=</span> <span class="n">cmd</span><span class="p">.</span><span class="nf">ExecuteReader</span><span class="p">();</span>
                <span class="kt">var</span> <span class="n">dt</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">DataTable</span><span class="p">();</span>
                <span class="n">dt</span><span class="p">.</span><span class="nf">Load</span><span class="p">(</span><span class="n">reader</span><span class="p">);</span>
                <span class="kt">var</span> <span class="n">list</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">dynamic</span><span class="p">&gt;();</span>
                <span class="k">foreach</span> <span class="p">(</span><span class="n">DataRow</span> <span class="n">row</span> <span class="k">in</span> <span class="n">dt</span><span class="p">.</span><span class="n">Rows</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="kt">var</span> <span class="n">expandoObject</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">ExpandoObject</span><span class="p">()</span> <span class="k">as</span> <span class="n">IDictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">object</span><span class="p">&gt;;</span>
                    <span class="k">foreach</span> <span class="p">(</span><span class="n">DataColumn</span> <span class="n">col</span> <span class="k">in</span> <span class="n">dt</span><span class="p">.</span><span class="n">Columns</span><span class="p">)</span>
                    <span class="p">{</span>
                        <span class="n">expandoObject</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">col</span><span class="p">.</span><span class="n">ColumnName</span><span class="p">,</span> <span class="n">row</span><span class="p">[</span><span class="n">col</span><span class="p">]);</span>
                    <span class="p">}</span>
                    <span class="n">list</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">expandoObject</span><span class="p">);</span>
                <span class="p">}</span>
                <span class="k">return</span> <span class="n">Task</span><span class="p">.</span><span class="nf">FromResult</span><span class="p">(</span><span class="n">list</span><span class="p">.</span><span class="nf">AsEnumerable</span><span class="p">());</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="n">ex</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">finally</span>
            <span class="p">{</span>
                <span class="c1">// close connection</span>
                <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="nf">Dispose</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="k">null</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 10: Create two interfaces name IProductService and IReportingService in Services/Interfaces folder</strong></p>

<p><strong>IProductService.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">AuditLog.API.Models</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">AuditLog.API.Services.Interfaces</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">interface</span> <span class="nc">IProductService</span>
    <span class="p">{</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;&gt;</span> <span class="nf">GetProducts</span><span class="p">();</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="nf">GetProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="nf">AddProduct</span><span class="p">(</span><span class="n">Product</span> <span class="n">product</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="nf">UpdateProduct</span><span class="p">(</span><span class="n">Product</span> <span class="n">product</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="nf">DeleteProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>IReportingService.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">namespace</span> <span class="nn">AuditLog.API.Services.Interfaces</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">interface</span> <span class="nc">IReportingService</span>
    <span class="p">{</span>
        <span class="c1">// Get all the changes for a particular entity response using Dynamic type</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="kt">dynamic</span><span class="p">&gt;&gt;</span> <span class="nf">GetChangeLogDynamic</span><span class="p">(</span><span class="kt">string</span> <span class="n">EntityName</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 11: Create two service classes name ProductService and ReportingService in Services/Implementation folder</strong></p>

<p><strong>ProductService.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">AuditLog.API.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">AuditLog.API.Repositories.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">AuditLog.API.Services.Interfaces</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">AuditLog.API.Services.Implementations</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">ProductService</span> <span class="p">:</span> <span class="n">IProductService</span>
    <span class="p">{</span>
        <span class="n">IProductRepository</span> <span class="n">_productRepository</span><span class="p">;</span>
        <span class="k">public</span> <span class="nf">ProductService</span><span class="p">(</span><span class="n">IProductRepository</span> <span class="n">productRepository</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_productRepository</span> <span class="p">=</span> <span class="n">productRepository</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="nf">AddProduct</span><span class="p">(</span><span class="n">Product</span> <span class="n">product</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">_productRepository</span><span class="p">.</span><span class="nf">AddProduct</span><span class="p">(</span><span class="n">product</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="nf">GetProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">_productRepository</span><span class="p">.</span><span class="nf">GetProduct</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;&gt;</span> <span class="nf">GetProducts</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">_productRepository</span><span class="p">.</span><span class="nf">GetProducts</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="nf">UpdateProduct</span><span class="p">(</span><span class="n">Product</span> <span class="n">product</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">_productRepository</span><span class="p">.</span><span class="nf">UpdateProduct</span><span class="p">(</span><span class="n">product</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="nf">DeleteProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">_productRepository</span><span class="p">.</span><span class="nf">DeleteProduct</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>ReportingService.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">AuditLog.API.Repositories.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">AuditLog.API.Services.Interfaces</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">AuditLog.API.Services.Implementations</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">ReportingService</span> <span class="p">:</span> <span class="n">IReportingService</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="n">IReportingRepository</span> <span class="n">_reportingRepository</span><span class="p">;</span>
        <span class="k">public</span> <span class="nf">ReportingService</span><span class="p">(</span><span class="n">IReportingRepository</span> <span class="n">reportingRepository</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_reportingRepository</span> <span class="p">=</span> <span class="n">reportingRepository</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="kt">dynamic</span><span class="p">&gt;&gt;</span> <span class="nf">GetChangeLogDynamic</span><span class="p">(</span><span class="kt">string</span> <span class="n">EntityName</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">_reportingRepository</span><span class="p">.</span><span class="nf">GetChangeLogDynamic</span><span class="p">(</span><span class="n">EntityName</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 12: Configure Program class as follows.</strong></p>

<p><strong>Program.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">AuditLog.API.AuditTrail.Implementations</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">AuditLog.API.AuditTrail.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">AuditLog.API.Persistence</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">AuditLog.API.Repositories.Implementations</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">AuditLog.API.Repositories.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">AuditLog.API.Services.Implementations</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">AuditLog.API.Services.Interfaces</span><span class="p">;</span>


<span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="n">WebApplication</span><span class="p">.</span><span class="nf">CreateBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>

<span class="c1">// Add services to the container.</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">();</span>
<span class="c1">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddEndpointsApiExplorer</span><span class="p">();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddSwaggerGen</span><span class="p">();</span>


<span class="kt">string</span> <span class="n">connectionString</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="n">Configuration</span><span class="p">.</span><span class="nf">GetConnectionString</span><span class="p">(</span><span class="s">"DefaultConnection"</span><span class="p">);</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddTransient</span><span class="p">(</span><span class="n">_</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="nf">DBConnector</span><span class="p">(</span><span class="n">connectionString</span><span class="p">));</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddScoped</span><span class="p">&lt;</span><span class="n">IProductRepository</span><span class="p">,</span> <span class="n">ProductRepository</span><span class="p">&gt;();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddScoped</span><span class="p">&lt;</span><span class="n">IProductService</span><span class="p">,</span> <span class="n">ProductService</span><span class="p">&gt;();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddScoped</span><span class="p">&lt;</span><span class="n">IReportingRepository</span><span class="p">,</span> <span class="n">ReportingRepository</span><span class="p">&gt;();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddScoped</span><span class="p">&lt;</span><span class="n">IReportingService</span><span class="p">,</span> <span class="n">ReportingService</span><span class="p">&gt;();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddScoped</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">IAuditTrail</span><span class="p">&lt;&gt;),</span> <span class="k">typeof</span><span class="p">(</span><span class="n">AuditTrail</span><span class="p">&lt;&gt;));</span>

<span class="kt">var</span> <span class="n">app</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

<span class="c1">// Configure the HTTP request pipeline.</span>
<span class="k">if</span> <span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">Environment</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
<span class="p">{</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwagger</span><span class="p">();</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwaggerUI</span><span class="p">();</span>
<span class="p">}</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseHttpsRedirection</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseAuthorization</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">MapControllers</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>



</code></pre></div></div>

<p><strong>Step 13: Create two Controller class ProductsController and ReportingController in Controllers folder.</strong></p>

<p><strong>ProductsController.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">AuditLog.API.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">AuditLog.API.Persistence</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">AuditLog.API.Services.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">AuditLog.API.Controllers</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
    <span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">ProductsController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="n">DBConnector</span> <span class="n">_connector</span><span class="p">;</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IProductService</span> <span class="n">_productService</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">ProductsController</span><span class="p">(</span> <span class="n">DBConnector</span> <span class="n">connector</span><span class="p">,</span> <span class="n">IProductService</span> <span class="n">productService</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_connector</span> <span class="p">=</span> <span class="n">connector</span><span class="p">;</span>
            <span class="n">_productService</span> <span class="p">=</span> <span class="n">productService</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/Products</span>
        <span class="p">[</span><span class="n">HttpGet</span><span class="p">]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;&gt;&gt;</span> <span class="nf">GetProducts</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">products</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_productService</span><span class="p">.</span><span class="nf">GetProducts</span><span class="p">();</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">products</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">products</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/Products/5</span>
        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;&gt;</span> <span class="nf">GetProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">product</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_productService</span><span class="p">.</span><span class="nf">GetProduct</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">product</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">product</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">// PUT: api/Products/5</span>
        <span class="p">[</span><span class="nf">HttpPut</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">PutProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="n">Product</span> <span class="n">product</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">id</span> <span class="p">!=</span> <span class="n">product</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_productService</span><span class="p">.</span><span class="nf">UpdateProduct</span><span class="p">(</span><span class="n">product</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">result</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">// POST: api/Products</span>
        <span class="p">[</span><span class="n">HttpPost</span><span class="p">]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;&gt;</span> <span class="nf">PostProduct</span><span class="p">(</span><span class="n">Product</span> <span class="n">product</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_productService</span><span class="p">.</span><span class="nf">AddProduct</span><span class="p">(</span><span class="n">product</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">result</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">// DELETE: api/Products/5</span>
        <span class="p">[</span><span class="nf">HttpDelete</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">DeleteProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_productService</span><span class="p">.</span><span class="nf">DeleteProduct</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">result</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>


</code></pre></div></div>

<p><strong>ReportingController.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">AuditLog.API.Services.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Http</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">AuditLog.API.Controllers</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
    <span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">ReportingController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="n">IReportingService</span> <span class="n">_reportingService</span><span class="p">;</span>
        <span class="k">public</span> <span class="nf">ReportingController</span><span class="p">(</span><span class="n">IReportingService</span> <span class="n">reportingService</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_reportingService</span> <span class="p">=</span> <span class="n">reportingService</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"GetChangeLogDynamic/{EntityName}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">GetChangeLogDynamic</span><span class="p">(</span><span class="kt">string</span> <span class="n">EntityName</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_reportingService</span><span class="p">.</span><span class="nf">GetChangeLogDynamic</span><span class="p">(</span><span class="n">EntityName</span><span class="p">);</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 14: Run the application and check the swagger.</strong></p>
<ul>
  <li>Now run application create, update and delete Customer entity using swagger</li>
  <li>You will see audit trail logs in AuditEntry and AuditEntryProperty table.</li>
  <li>You can also view a sample report using Reporting controller. In GetChangeLog end point use “Product” as entity name.</li>
</ul>

<p><img src="/assets/images/posts/2024/AuditEntry.png" alt="" />
<img src="/assets/images/posts/2024/AuditEntryProperty.png" alt="" />
<strong><a href="https://github.com/mahedee/code-sample02/tree/master/AuditLogRawSQL">Source code</a></strong></p>]]></content><author><name>Mahedee Hasan</name></author><category term="ASP.NET" /><category term="ASP.NET Core" /><category term="C#" /><category term="Web API" /><category term="csharp" /><category term="aspnet" /><category term="aspnetcore" /><category term="webapi" /><summary type="html"><![CDATA[The Audit Trail stands out as a critical feature in enterprise applications, primarily serving essential roles in security and fraud transaction detection. This article delves into a comprehensive guide on implementing Audit Trail functionality in an ASP.NET Core application using SQL Server with ADO.NET. Join me as I demonstrate the step-by-step process to bolster security measures and enhance transaction accountability within your application.]]></summary></entry><entry><title type="html">Optimistic Concurrency Management in ASP.NET Core Application Using Hypermedia</title><link href="https://mahedee.net//optimistic_concurrency_management_aspnet_core_using_hyper_media/" rel="alternate" type="text/html" title="Optimistic Concurrency Management in ASP.NET Core Application Using Hypermedia" /><published>2023-12-17T00:00:00-04:00</published><updated>2023-12-17T00:00:00-04:00</updated><id>https://mahedee.net//optimistic_concurrency_management_aspnet_core_using_hyper_media</id><content type="html" xml:base="https://mahedee.net//optimistic_concurrency_management_aspnet_core_using_hyper_media/"><![CDATA[<p>In the world of REST API, Hypermedia means adding links and important details directly into the API response. This helps clients use that information for more actions with the API.</p>

<p>In a previous article <a href="https://mahedee.net/concurrency_management_in_aspnet_core_applications_with_entity_framework/">here</a>, I discussed various ways to deal with concurrency. Optimistic concurrency is a common method for handling such situations. In this article, I’ll show a simple way to manage concurrency in ASP.NET using hypermedia.</p>

<p><strong>Tools and Technology Used</strong></p>

<ul>
  <li>ASP.net core Web API</li>
  <li>Visual C#</li>
  <li>Entity Framework</li>
  <li>SQL Server</li>
</ul>

<p><strong>Step 1: Create a asp.net core web api project name ConcurrencyHandling.API</strong></p>

<p><strong>Step 2: Install the following nuget packages in the project.</strong></p>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">Microsoft.EntityFrameworkCore</span>
<span class="nf">Microsoft.EntityFrameworkCore.Design</span>
<span class="nf">Microsoft.EntityFrameworkCore.SqlServer</span>
<span class="nf">Microsoft.EntityFrameworkCore.Tools</span>

</code></pre></div></div>

<p><strong>Step 3: Create a Model class name Employee in Models folder</strong></p>

<ul>
  <li>Employee class to store Employee Information</li>
  <li>In the following class RowVersion property is used to track the updated version of the record.</li>
</ul>

<p><strong>Employee.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">ConcurrencyHandling.API.Models</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Employee</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">EmployeeID</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">decimal</span> <span class="n">Salary</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="n">Guid</span> <span class="n">RowVersion</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 4: Create a Context class name ApplicationDbContext in Data folder.</strong></p>

<p><strong>ApplicationDbContext.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">ConcurrencyHandling.API.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">ConcurrencyHandling.API.Data</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">ApplicationDbContext</span> <span class="p">:</span> <span class="n">DbContext</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">ApplicationDbContext</span><span class="p">(</span><span class="n">DbContextOptions</span><span class="p">&lt;</span><span class="n">ApplicationDbContext</span><span class="p">&gt;</span> <span class="n">options</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
        <span class="p">{</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="n">DbSet</span><span class="p">&lt;</span><span class="n">Employee</span><span class="p">&gt;?</span> <span class="n">Employee</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 5: Add connection string in appsettings.json file</strong></p>

<p><strong>appsettings.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"Logging"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"LogLevel"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Default"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Information"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Microsoft.AspNetCore"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Warning"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
</span><span class="nl">"ConnectionStrings"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"DefaultConnection"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Server=localhost;Database=ConcurrencyHyperMediaDB;User Id=sa;Password=MyPassword;TrustServerCertificate=True;"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"AllowedHosts"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*"</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<p><strong>Step 6: Configure Program class as follows.</strong></p>

<p><strong>Program.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">ConcurrencyHandling.API.Data</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="n">WebApplication</span><span class="p">.</span><span class="nf">CreateBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>

<span class="c1">// Add services to the container.</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">();</span>
<span class="c1">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddEndpointsApiExplorer</span><span class="p">();</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddSwaggerGen</span><span class="p">();</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddDbContext</span><span class="p">&lt;</span><span class="n">ApplicationDbContext</span><span class="p">&gt;(</span><span class="n">options</span> <span class="p">=&gt;</span>
    <span class="n">options</span><span class="p">.</span><span class="nf">UseSqlServer</span><span class="p">(</span><span class="n">builder</span><span class="p">.</span><span class="n">Configuration</span><span class="p">.</span><span class="nf">GetConnectionString</span><span class="p">(</span><span class="s">"DefaultConnection"</span><span class="p">)));</span>

<span class="kt">var</span> <span class="n">app</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

<span class="c1">// Configure the HTTP request pipeline.</span>
<span class="k">if</span> <span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">Environment</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
<span class="p">{</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwagger</span><span class="p">();</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwaggerUI</span><span class="p">();</span>
<span class="p">}</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseHttpsRedirection</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseAuthorization</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">MapControllers</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>


</code></pre></div></div>

<p><strong>Step 7: Create a Controller class EmployeesController in Controllers folder.</strong></p>

<p><strong>EmployeesController.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">ConcurrencyHandling.API.Data</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">ConcurrencyHandling.API.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">ConcurrencyHandling.API.Controllers</span>
<span class="p">{</span>

    <span class="c1">// Concurrency check using hypermedia</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
    <span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">EmployeesController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">ApplicationDbContext</span> <span class="n">_context</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">EmployeesController</span><span class="p">(</span><span class="n">ApplicationDbContext</span> <span class="n">context</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_context</span> <span class="p">=</span> <span class="n">context</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/Employees</span>
        <span class="p">[</span><span class="n">HttpGet</span><span class="p">]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Employee</span><span class="p">&gt;&gt;&gt;</span> <span class="nf">GetEmployee</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Employee</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Employee</span><span class="p">.</span><span class="nf">ToListAsync</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/Employees/5</span>
        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">Employee</span><span class="p">&gt;&gt;</span> <span class="nf">GetEmployee</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Employee</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="kt">var</span> <span class="n">employee</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Employee</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">employee</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="k">new</span>
            <span class="p">{</span>
                <span class="n">id</span> <span class="p">=</span> <span class="n">employee</span><span class="p">.</span><span class="n">EmployeeID</span><span class="p">,</span>
                <span class="n">name</span> <span class="p">=</span> <span class="n">employee</span><span class="p">.</span><span class="n">Name</span><span class="p">,</span>
                <span class="n">salary</span> <span class="p">=</span> <span class="n">employee</span><span class="p">.</span><span class="n">Salary</span><span class="p">,</span>
                <span class="n">rowVersion</span> <span class="p">=</span> <span class="n">employee</span><span class="p">.</span><span class="n">RowVersion</span><span class="p">,</span>
                <span class="n">links</span> <span class="p">=</span> <span class="k">new</span><span class="p">[]</span>
                <span class="p">{</span>
                    <span class="k">new</span> <span class="p">{</span> <span class="n">rel</span> <span class="p">=</span> <span class="s">"edit"</span><span class="p">,</span> <span class="n">href</span> <span class="p">=</span> <span class="s">$"/employees/</span><span class="p">{</span><span class="n">id</span><span class="p">}</span><span class="s">/</span><span class="p">{</span><span class="n">employee</span><span class="p">.</span><span class="n">RowVersion</span><span class="p">}</span><span class="s">"</span><span class="p">,</span> <span class="n">method</span> <span class="p">=</span><span class="s">"PUT"</span> <span class="p">},</span>
                    <span class="k">new</span> <span class="p">{</span> <span class="n">rel</span> <span class="p">=</span> <span class="s">"delete"</span><span class="p">,</span> <span class="n">href</span> <span class="p">=</span> <span class="s">$"/employees/</span><span class="p">{</span><span class="n">id</span><span class="p">}</span><span class="s">/</span><span class="p">{</span><span class="n">employee</span><span class="p">.</span><span class="n">RowVersion</span><span class="p">}</span><span class="s">"</span><span class="p">,</span> <span class="n">method</span> <span class="p">=</span><span class="s">"DELETE"</span> <span class="p">}</span>
                <span class="p">}</span>
            <span class="p">});</span>

            <span class="c1">//employee;</span>
        <span class="p">}</span>

        <span class="c1">// PUT: api/Employees/5</span>
        <span class="c1">// To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754</span>
        <span class="p">[</span><span class="nf">HttpPut</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">PutEmployee</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="kt">string</span> <span class="n">version</span><span class="p">,</span> <span class="n">Employee</span> <span class="n">employee</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">id</span> <span class="p">!=</span> <span class="n">employee</span><span class="p">.</span><span class="n">EmployeeID</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="kt">var</span> <span class="n">existingEmployee</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Employee</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">existingEmployee</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="kt">var</span> <span class="n">currentRowVersion</span> <span class="p">=</span> <span class="n">existingEmployee</span><span class="p">.</span><span class="n">RowVersion</span><span class="p">.</span><span class="nf">ToString</span><span class="p">();</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">currentRowVersion</span> <span class="p">!=</span> <span class="n">version</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">Conflict</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">_context</span><span class="p">.</span><span class="nf">Entry</span><span class="p">(</span><span class="n">existingEmployee</span><span class="p">).</span><span class="n">CurrentValues</span><span class="p">.</span><span class="nf">SetValues</span><span class="p">(</span><span class="n">employee</span><span class="p">);</span>
            <span class="n">existingEmployee</span><span class="p">.</span><span class="n">RowVersion</span> <span class="p">=</span> <span class="n">Guid</span><span class="p">.</span><span class="nf">NewGuid</span><span class="p">();</span>
            <span class="n">_context</span><span class="p">.</span><span class="nf">Entry</span><span class="p">(</span><span class="n">existingEmployee</span><span class="p">).</span><span class="n">State</span> <span class="p">=</span> <span class="n">EntityState</span><span class="p">.</span><span class="n">Modified</span><span class="p">;</span>

            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">DbUpdateConcurrencyException</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// POST: api/Employees</span>
        <span class="c1">// To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754</span>
        <span class="p">[</span><span class="n">HttpPost</span><span class="p">]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">Employee</span><span class="p">&gt;&gt;</span> <span class="nf">PostEmployee</span><span class="p">(</span><span class="n">Employee</span> <span class="n">employee</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Employee</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">Problem</span><span class="p">(</span><span class="s">"Entity set 'ApplicationDbContext.Employee'  is null."</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="n">employee</span><span class="p">.</span><span class="n">RowVersion</span> <span class="p">=</span> <span class="n">Guid</span><span class="p">.</span><span class="nf">NewGuid</span><span class="p">();</span>
            <span class="n">_context</span><span class="p">.</span><span class="n">Employee</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">employee</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>

            <span class="k">return</span> <span class="nf">CreatedAtAction</span><span class="p">(</span><span class="s">"GetEmployee"</span><span class="p">,</span> <span class="k">new</span> <span class="p">{</span> <span class="n">id</span> <span class="p">=</span> <span class="n">employee</span><span class="p">.</span><span class="n">EmployeeID</span> <span class="p">},</span> <span class="n">employee</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">// DELETE: api/Employees/5</span>
        <span class="p">[</span><span class="nf">HttpDelete</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">DeleteEmployee</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="kt">string</span> <span class="n">version</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Employee</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="kt">var</span> <span class="n">employee</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Employee</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">employee</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">employee</span><span class="p">.</span><span class="n">RowVersion</span><span class="p">.</span><span class="nf">ToString</span><span class="p">()</span> <span class="p">!=</span> <span class="n">version</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">Conflict</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">_context</span><span class="p">.</span><span class="n">Employee</span><span class="p">.</span><span class="nf">Remove</span><span class="p">(</span><span class="n">employee</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>

            <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 8: Create migration and update database</strong></p>
<ul>
  <li>Open Package Manager Console (PMC).</li>
  <li>Select the project name ConcurrencyHandling.API</li>
  <li>Run the following command in PMC</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">Add-Migration</span> <span class="nf">InitialCreate</span>
</code></pre></div></div>
<p>This will create a new migration file named “InitialCreate” under the Migrations folder of your</p>

<ul>
  <li>Run the following command in PMC</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">Update-Database</span>
</code></pre></div></div>

<p><strong>Step 9: Run the application and test concurrency</strong></p>

<ul>
  <li>Create a new record by PostEmployee action using swagger. Sample example for post data.</li>
</ul>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"employeeID"</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w">
  </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Tahiya Hasan"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"salary"</span><span class="p">:</span><span class="w"> </span><span class="mi">1000000</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<ul>
  <li>Now, let’s retrieve the record using the GET method. You will get the following response.</li>
</ul>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
  </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Tahiya Hasan"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"salary"</span><span class="p">:</span><span class="w"> </span><span class="mi">1000000</span><span class="p">,</span><span class="w">
  </span><span class="nl">"rowVersion"</span><span class="p">:</span><span class="w"> </span><span class="s2">"8568375c-cfa5-4ec2-a2ab-b06184f424ad"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"links"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"rel"</span><span class="p">:</span><span class="w"> </span><span class="s2">"edit"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"href"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/employees/1/8568375c-cfa5-4ec2-a2ab-b06184f424ad"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"method"</span><span class="p">:</span><span class="w"> </span><span class="s2">"PUT"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"rel"</span><span class="p">:</span><span class="w"> </span><span class="s2">"delete"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"href"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/employees/1/8568375c-cfa5-4ec2-a2ab-b06184f424ad"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"method"</span><span class="p">:</span><span class="w"> </span><span class="s2">"DELETE"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<ul>
  <li>Modify or delete the record by using either the provided URL or the specified version number within the URL. In the backend, the version number from the URL will be compared with the existing version number in the action method as outlined in the controller code. The action will only be executed if the version numbers from the URL and the existing record match.</li>
</ul>

<p><strong><a href="https://github.com/mahedee/code-sample02/tree/master/ConcurrencyHyperMedia">Source code</a></strong></p>]]></content><author><name>Mahedee Hasan</name></author><category term="ASP.NET" /><category term="ASP.NET Core" /><category term="C#" /><category term="Web API" /><category term="EF" /><category term="Software Architecture" /><category term="csharp" /><category term="aspnet" /><category term="aspnetcore" /><category term="webapi" /><category term="ef" /><category term="softwarearchitecture" /><summary type="html"><![CDATA[Optimistic concurrency is a common method for handling such situations. In this article, I'll show a simple way to manage concurrency in ASP.NET using hypermedia.]]></summary></entry><entry><title type="html">Optimistic Concurrency Management in ASP.NET Core Application Using ETags and If-Match Header</title><link href="https://mahedee.net//optimistic_concurrency_management_aspnet_core_etags_if_match_header/" rel="alternate" type="text/html" title="Optimistic Concurrency Management in ASP.NET Core Application Using ETags and If-Match Header" /><published>2023-11-11T00:00:00-04:00</published><updated>2023-11-11T00:00:00-04:00</updated><id>https://mahedee.net//optimistic_concurrency_management_aspnet_core_etags_if_match_header</id><content type="html" xml:base="https://mahedee.net//optimistic_concurrency_management_aspnet_core_etags_if_match_header/"><![CDATA[<p>In my earlier article <a href="https://mahedee.net/concurrency_management_in_aspnet_core_applications_with_entity_framework/">here</a>, I talked about different ways to handle concurrency. As you know, optimistic concurrency is a common method for dealing with such situations. In this article, I’ll demonstrate a practical way to manage concurrency in ASP.NET using ETags and If-Match.</p>

<p><strong>Tools and Technology Used</strong></p>

<ul>
  <li>ASP.net core Web API</li>
  <li>Visual C#</li>
  <li>Entity Framework</li>
  <li>SQL Server</li>
</ul>

<p><strong>Step 1: Create a asp.net core web api project name ConcurrencyHandling.API</strong></p>

<p><strong>Step 2: Install the following nuget packages in the project.</strong></p>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">Microsoft.EntityFrameworkCore</span>
<span class="nf">Microsoft.EntityFrameworkCore.Design</span>
<span class="nf">Microsoft.EntityFrameworkCore.SqlServer</span>
<span class="nf">Microsoft.EntityFrameworkCore.Tools</span>

</code></pre></div></div>

<p><strong>Step 3: Create a Model class name Product in Models folder</strong></p>

<ul>
  <li>Product class to store Product Information</li>
  <li>In the following class RecordVersion property is used to track the updated version of the record.</li>
</ul>

<p><strong>Account.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">ConcurrencyHandling.API.Models</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Product</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">ProductId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span><span class="p">?</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">decimal</span> <span class="n">Price</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">StockQuantity</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">// Concurrency control properties</span>
        <span class="k">public</span> <span class="n">Guid</span> <span class="n">RecordVersion</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 4: Create a Context class name ApplicationDbContext in Data folder.</strong></p>

<p><strong>ApplicationDbContext.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">ConcurrencyHandling.API.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">ConcurrencyHandling.API.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">ConcurrencyHandling.API.Data</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">ApplicationDbContext</span> <span class="p">:</span> <span class="n">DbContext</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">ApplicationDbContext</span><span class="p">(</span><span class="n">DbContextOptions</span><span class="p">&lt;</span><span class="n">ApplicationDbContext</span><span class="p">&gt;</span> <span class="n">options</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
        <span class="p">{</span>

        <span class="p">}</span>
        <span class="k">public</span> <span class="n">DbSet</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;?</span> <span class="n">Product</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 5: Add connection string in appsettings.json file</strong></p>

<p><strong>appsettings.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"Logging"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"LogLevel"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Default"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Information"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Microsoft.AspNetCore"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Warning"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
</span><span class="nl">"ConnectionStrings"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"DefaultConnection"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Server=localhost;Database=ConcurrencyEtagsDB;User Id=sa;Password=MyPassword;TrustServerCertificate=True;"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"AllowedHosts"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*"</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<p><strong>Step 6: Configure Program class as follows.</strong></p>

<p><strong>Program.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">ConcurrencyHandling.API.Data</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="n">WebApplication</span><span class="p">.</span><span class="nf">CreateBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>

<span class="c1">// Add services to the container.</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">();</span>
<span class="c1">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddEndpointsApiExplorer</span><span class="p">();</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddSwaggerGen</span><span class="p">();</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddDbContext</span><span class="p">&lt;</span><span class="n">ApplicationDbContext</span><span class="p">&gt;(</span><span class="n">options</span> <span class="p">=&gt;</span>
    <span class="n">options</span><span class="p">.</span><span class="nf">UseSqlServer</span><span class="p">(</span><span class="n">builder</span><span class="p">.</span><span class="n">Configuration</span><span class="p">.</span><span class="nf">GetConnectionString</span><span class="p">(</span><span class="s">"DefaultConnection"</span><span class="p">)));</span>

<span class="kt">var</span> <span class="n">app</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

<span class="c1">// Configure the HTTP request pipeline.</span>
<span class="k">if</span> <span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">Environment</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
<span class="p">{</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwagger</span><span class="p">();</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwaggerUI</span><span class="p">();</span>
<span class="p">}</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseHttpsRedirection</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseAuthorization</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">MapControllers</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>

</code></pre></div></div>

<p><strong>Step 7: Create a Controller class ProductsController in Controllers folder.</strong></p>
<ul>
  <li>In GetProduct action Etag header is added with the response header like below.</li>
</ul>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Response</span><span class="p">.</span><span class="n">Headers</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">ETAG_HEADER</span><span class="p">,</span> <span class="n">product</span><span class="p">.</span><span class="n">RecordVersion</span><span class="p">.</span><span class="nf">ToString</span><span class="p">());</span>
</code></pre></div></div>

<ul>
  <li>In the PutProduct and DeleteProduct actions, if the existing record’s version matches the current Etag and the requested Etag, then the update and delete operations will occur; otherwise, they will not take place.</li>
</ul>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">PutProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="n">Product</span> <span class="n">product</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">id</span> <span class="p">!=</span> <span class="n">product</span><span class="p">.</span><span class="n">ProductId</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="kt">var</span> <span class="n">existingProduct</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Product</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">existingProduct</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="c1">// Check ETag header</span>
    <span class="kt">var</span> <span class="n">existingProductETag</span> <span class="p">=</span> <span class="n">existingProduct</span><span class="p">.</span><span class="n">RecordVersion</span><span class="p">.</span><span class="nf">ToString</span><span class="p">();</span>
    <span class="kt">var</span> <span class="n">requestProductETag</span> <span class="p">=</span> <span class="n">Request</span><span class="p">.</span><span class="n">Headers</span><span class="p">[</span><span class="n">IF_MATCH_HEADER</span><span class="p">].</span><span class="nf">FirstOrDefault</span><span class="p">();</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">existingProductETag</span> <span class="p">!=</span> <span class="n">requestProductETag</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="c1">// StatusCodes.Status412PreconditionFailed means "Precondition Failed"</span>
        <span class="c1">// meaning the ETag header value does not match the current ETag value</span>
        <span class="k">return</span> <span class="nf">StatusCode</span><span class="p">(</span><span class="n">StatusCodes</span><span class="p">.</span><span class="n">Status412PreconditionFailed</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="c1">// Update the existing product with the new values</span>
    <span class="n">_context</span><span class="p">.</span><span class="nf">Entry</span><span class="p">(</span><span class="n">existingProduct</span><span class="p">).</span><span class="n">CurrentValues</span><span class="p">.</span><span class="nf">SetValues</span><span class="p">(</span><span class="n">product</span><span class="p">);</span>
    <span class="n">existingProduct</span><span class="p">.</span><span class="n">RecordVersion</span> <span class="p">=</span> <span class="n">Guid</span><span class="p">.</span><span class="nf">NewGuid</span><span class="p">();</span>
    <span class="n">_context</span><span class="p">.</span><span class="nf">Entry</span><span class="p">(</span><span class="n">existingProduct</span><span class="p">).</span><span class="n">State</span> <span class="p">=</span> <span class="n">EntityState</span><span class="p">.</span><span class="n">Modified</span><span class="p">;</span>

    <span class="k">try</span>
    <span class="p">{</span>

        <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>
    <span class="p">}</span>
    <span class="k">catch</span> <span class="p">(</span><span class="n">DbUpdateConcurrencyException</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">throw</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>ProductsController.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">ConcurrencyHandling.API.Data</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">ConcurrencyHandling.API.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">ConcurrencyHandling.API.Controllers</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
    <span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>

    <span class="c1">// Concurrency check using ETags</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">ProductsController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">const</span> <span class="kt">string</span> <span class="n">ETAG_HEADER</span> <span class="p">=</span> <span class="s">"ETag"</span><span class="p">;</span>
        <span class="k">private</span> <span class="k">const</span> <span class="kt">string</span> <span class="n">IF_MATCH_HEADER</span> <span class="p">=</span> <span class="s">"If-Match"</span><span class="p">;</span>

        <span class="k">private</span> <span class="k">readonly</span> <span class="n">ApplicationDbContext</span> <span class="n">_context</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">ProductsController</span><span class="p">(</span><span class="n">ApplicationDbContext</span> <span class="n">context</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_context</span> <span class="p">=</span> <span class="n">context</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/Products</span>
        <span class="p">[</span><span class="n">HttpGet</span><span class="p">]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;&gt;&gt;</span> <span class="nf">GetProduct</span><span class="p">()</span>
        <span class="p">{</span>
          <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Product</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
          <span class="p">{</span>
              <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
          <span class="p">}</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Product</span><span class="p">.</span><span class="nf">ToListAsync</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/Products/5</span>
        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;&gt;</span> <span class="nf">GetProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
          <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Product</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
          <span class="p">{</span>
              <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
          <span class="p">}</span>
            <span class="kt">var</span> <span class="n">product</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Product</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">product</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="c1">// Add ETag header</span>
            <span class="n">Response</span><span class="p">.</span><span class="n">Headers</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">ETAG_HEADER</span><span class="p">,</span> <span class="n">product</span><span class="p">.</span><span class="n">RecordVersion</span><span class="p">.</span><span class="nf">ToString</span><span class="p">());</span>
            <span class="k">return</span> <span class="n">product</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// PUT: api/Products/5</span>
        <span class="c1">// To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754</span>
        <span class="p">[</span><span class="nf">HttpPut</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">PutProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="n">Product</span> <span class="n">product</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">id</span> <span class="p">!=</span> <span class="n">product</span><span class="p">.</span><span class="n">ProductId</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="kt">var</span> <span class="n">existingProduct</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Product</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">existingProduct</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="c1">// Check ETag header</span>
            <span class="kt">var</span> <span class="n">existingProductETag</span> <span class="p">=</span> <span class="n">existingProduct</span><span class="p">.</span><span class="n">RecordVersion</span><span class="p">.</span><span class="nf">ToString</span><span class="p">();</span>
            <span class="kt">var</span> <span class="n">requestProductETag</span> <span class="p">=</span> <span class="n">Request</span><span class="p">.</span><span class="n">Headers</span><span class="p">[</span><span class="n">IF_MATCH_HEADER</span><span class="p">].</span><span class="nf">FirstOrDefault</span><span class="p">();</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">existingProductETag</span> <span class="p">!=</span> <span class="n">requestProductETag</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="c1">// StatusCodes.Status412PreconditionFailed means "Precondition Failed"</span>
                <span class="c1">// meaning the ETag header value does not match the current ETag value</span>
                <span class="k">return</span> <span class="nf">StatusCode</span><span class="p">(</span><span class="n">StatusCodes</span><span class="p">.</span><span class="n">Status412PreconditionFailed</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="c1">// Update the existing product with the new values</span>
            <span class="n">_context</span><span class="p">.</span><span class="nf">Entry</span><span class="p">(</span><span class="n">existingProduct</span><span class="p">).</span><span class="n">CurrentValues</span><span class="p">.</span><span class="nf">SetValues</span><span class="p">(</span><span class="n">product</span><span class="p">);</span>
            <span class="n">existingProduct</span><span class="p">.</span><span class="n">RecordVersion</span> <span class="p">=</span> <span class="n">Guid</span><span class="p">.</span><span class="nf">NewGuid</span><span class="p">();</span>
            <span class="n">_context</span><span class="p">.</span><span class="nf">Entry</span><span class="p">(</span><span class="n">existingProduct</span><span class="p">).</span><span class="n">State</span> <span class="p">=</span> <span class="n">EntityState</span><span class="p">.</span><span class="n">Modified</span><span class="p">;</span>

            <span class="k">try</span>
            <span class="p">{</span>

                <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">DbUpdateConcurrencyException</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// POST: api/Products</span>
        <span class="c1">// To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754</span>
        <span class="p">[</span><span class="n">HttpPost</span><span class="p">]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;&gt;</span> <span class="nf">PostProduct</span><span class="p">(</span><span class="n">Product</span> <span class="n">product</span><span class="p">)</span>
        <span class="p">{</span>
          <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Product</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
          <span class="p">{</span>
              <span class="k">return</span> <span class="nf">Problem</span><span class="p">(</span><span class="s">"Entity set 'ApplicationDbContext.Product'  is null."</span><span class="p">);</span>
          <span class="p">}</span>
            <span class="n">product</span><span class="p">.</span><span class="n">RecordVersion</span> <span class="p">=</span> <span class="n">Guid</span><span class="p">.</span><span class="nf">NewGuid</span><span class="p">();</span>
            <span class="n">_context</span><span class="p">.</span><span class="n">Product</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">product</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>

            <span class="k">return</span> <span class="nf">CreatedAtAction</span><span class="p">(</span><span class="s">"GetProduct"</span><span class="p">,</span> <span class="k">new</span> <span class="p">{</span> <span class="n">id</span> <span class="p">=</span> <span class="n">product</span><span class="p">.</span><span class="n">ProductId</span> <span class="p">},</span> <span class="n">product</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">// DELETE: api/Products/5</span>
        <span class="p">[</span><span class="nf">HttpDelete</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">DeleteProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">//if (_context.Product == null)</span>
            <span class="c1">//{</span>
            <span class="c1">//    return NotFound();</span>
            <span class="c1">//}</span>
            <span class="kt">var</span> <span class="n">product</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Product</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">if</span><span class="p">(</span><span class="n">product</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="kt">var</span> <span class="n">existingProductETag</span> <span class="p">=</span> <span class="n">product</span><span class="p">.</span><span class="n">RecordVersion</span><span class="p">.</span><span class="nf">ToString</span><span class="p">();</span>
            <span class="kt">var</span> <span class="n">requestProductETag</span> <span class="p">=</span> <span class="n">Request</span><span class="p">.</span><span class="n">Headers</span><span class="p">[</span><span class="n">IF_MATCH_HEADER</span><span class="p">].</span><span class="nf">FirstOrDefault</span><span class="p">();</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">existingProductETag</span> <span class="p">!=</span> <span class="n">requestProductETag</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="c1">// StatusCodes.Status412PreconditionFailed means "Precondition Failed"</span>
                <span class="c1">// meaning the ETag header value does not match the current ETag value</span>
                <span class="k">return</span> <span class="nf">StatusCode</span><span class="p">(</span><span class="n">StatusCodes</span><span class="p">.</span><span class="n">Status412PreconditionFailed</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="n">_context</span><span class="p">.</span><span class="n">Product</span><span class="p">.</span><span class="nf">Remove</span><span class="p">(</span><span class="n">product</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>

            <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">//private bool ProductExists(int id)</span>
        <span class="c1">//{</span>
        <span class="c1">//    return (_context.Product?.Any(e =&gt; e.ProductId == id)).GetValueOrDefault();</span>
        <span class="c1">//}</span>
    <span class="p">}</span>
<span class="p">}</span>


</code></pre></div></div>

<p><strong>Step 8: Create migration and update database</strong></p>
<ul>
  <li>Open Package Manager Console (PMC).</li>
  <li>Select the project name ConcurrencyHandling.API</li>
  <li>Run the following command in PMC</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">Add-Migration</span> <span class="nf">InitialCreate</span>
</code></pre></div></div>
<p>This will create a new migration file named “InitialCreate” under the Migrations folder of your</p>

<ul>
  <li>Run the following command in PMC</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">Update-Database</span>
</code></pre></div></div>

<p><strong>Step 9: Run the application and test concurrency</strong></p>

<ul>
  <li>Create a new record by PostProduct action using swagger. Sample example for post data.</li>
</ul>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"productId"</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w">
  </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Dell Laptop"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"price"</span><span class="p">:</span><span class="w"> </span><span class="mi">1200</span><span class="p">,</span><span class="w">
  </span><span class="nl">"stockQuantity"</span><span class="p">:</span><span class="w"> </span><span class="mi">50</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<ul>
  <li>Now, let’s modify the record using the PUT method. Keep in mind to include the current ETag value in the If-Match request header.</li>
</ul>

<p><img src="/assets/images/posts/2023/etags.png" alt="" /></p>

<ul>
  <li>
    <p>Do same for the delete method.</p>
  </li>
  <li>
    <p>You can only update and delete record only when if-match header is same as row version otherwise not.</p>
  </li>
</ul>

<p><strong><a href="https://github.com/mahedee/code-sample02/tree/master/ConcurrencyEtags">Source code</a></strong></p>]]></content><author><name>Mahedee Hasan</name></author><category term="ASP.NET" /><category term="ASP.NET Core" /><category term="C#" /><category term="Web API" /><category term="EF" /><category term="Software Architecture" /><category term="csharp" /><category term="aspnet" /><category term="aspnetcore" /><category term="webapi" /><category term="ef" /><category term="softwarearchitecture" /><summary type="html"><![CDATA[Efficient concurrency management holds significant importance, especially in enterprise applications, with a heightened emphasis on financial systems. This article aims to elucidate the practical dimensions of concurrency management within an ASP.NET Core application, showcasing the effective utilization of ETags and the If-Match Header.]]></summary></entry><entry><title type="html">Enhancing ASP.NET Core Applications: Optimistic Concurrency Management with Database-Generated Tokens using Entity Framework</title><link href="https://mahedee.net//concurrency_management_in_aspnet_core_database_generated_token/" rel="alternate" type="text/html" title="Enhancing ASP.NET Core Applications: Optimistic Concurrency Management with Database-Generated Tokens using Entity Framework" /><published>2023-10-11T00:00:00-03:00</published><updated>2023-10-11T00:00:00-03:00</updated><id>https://mahedee.net//concurrency_management_in_aspnet_core_database_generated_token</id><content type="html" xml:base="https://mahedee.net//concurrency_management_in_aspnet_core_database_generated_token/"><![CDATA[<p>In a my <a href="https://mahedee.net/concurrency_management_in_aspnet_core_applications_with_entity_framework/">previous article</a>, I have discussed about verious forms of concurrency. As you’re already aware, optimistic concurrency stands out as the prevalent method for managing such scenarios. This article delves into the practical implementation of handling concurrency in ASP.NET using Entity Framework, specifically focusing on utilizing a optimistic concurrency using database-generated token.</p>

<p><strong>Tools and Technology Used</strong></p>

<ul>
  <li>ASP.net core Web API</li>
  <li>Visual C#</li>
  <li>Entity Framework</li>
  <li>SQL Server</li>
</ul>

<p><strong>Step 1: Create a asp.net core web api project name ConcurrencyHandling.API</strong></p>

<p><strong>Step 2: Install the following nuget packages in the project.</strong></p>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">Microsoft.EntityFrameworkCore</span>
<span class="nf">Microsoft.EntityFrameworkCore.Design</span>
<span class="nf">Microsoft.EntityFrameworkCore.SqlServer</span>
<span class="nf">Microsoft.EntityFrameworkCore.Tools</span>

</code></pre></div></div>

<p><strong>Step 3: Create a Model class name Account in Models folder</strong></p>

<ul>
  <li>Account class to store Account Information</li>
  <li>In the following class RowVersion property is used to track the updated version of the record.</li>
</ul>

<p><strong>Account.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Swashbuckle.AspNetCore.Annotations</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.ComponentModel.DataAnnotations</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">ConcurrencyHandling.API.Models</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Account</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">AccountID</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">decimal</span> <span class="n">Balance</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="p">[</span><span class="n">Timestamp</span><span class="p">]</span>
        <span class="k">public</span> <span class="kt">byte</span><span class="p">[]</span> <span class="n">RowVersion</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="p">[</span><span class="m">8</span><span class="p">];</span>
    <span class="p">}</span>
<span class="p">}</span>


</code></pre></div></div>

<p><strong>Step 4: Create a Context class name ApplicationDbContext in Data folder.</strong></p>
<ul>
  <li>The following code block is used in OnModelCreating method to handle concurrency.</li>
</ul>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="n">modelBuilder</span><span class="p">.</span><span class="n">Entity</span><span class="p">&lt;</span><span class="n">Account</span><span class="p">&gt;()</span>
                <span class="p">.</span><span class="nf">Property</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">RowVersion</span><span class="p">).</span><span class="nf">IsConcurrencyToken</span><span class="p">();</span>
</code></pre></div></div>

<ul>
  <li>IsConcurrencyToken() marks the property as a concurrency token. This is used by EF Core to implement optimistic concurrency. EF Core will use the value of the property in the WHERE clause of UPDATE and DELETE statements.</li>
</ul>

<p><strong>ApplicationDbContext.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">ConcurrencyHandling.API.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">ConcurrencyHandling.API.Data</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">ApplicationDbContext</span> <span class="p">:</span> <span class="n">DbContext</span>
    <span class="p">{</span>

        <span class="k">public</span> <span class="k">virtual</span> <span class="n">DbSet</span><span class="p">&lt;</span><span class="n">Account</span><span class="p">&gt;</span> <span class="n">Accounts</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>


        <span class="k">public</span> <span class="nf">ApplicationDbContext</span><span class="p">(</span><span class="n">DbContextOptions</span><span class="p">&lt;</span><span class="n">ApplicationDbContext</span><span class="p">&gt;</span> <span class="n">options</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
        <span class="p">{</span>

        <span class="p">}</span>

        <span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">OnModelCreating</span><span class="p">(</span><span class="n">ModelBuilder</span> <span class="n">modelBuilder</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">base</span><span class="p">.</span><span class="nf">OnModelCreating</span><span class="p">(</span><span class="n">modelBuilder</span><span class="p">);</span>

            <span class="c1">// IsConcurrencyToken() marks the property as a concurrency token.</span>
            <span class="c1">// This is used by EF Core to implement optimistic concurrency.</span>
            <span class="c1">// EF Core will use the value of the property in the WHERE clause of UPDATE and DELETE statements.</span>

            <span class="n">modelBuilder</span><span class="p">.</span><span class="n">Entity</span><span class="p">&lt;</span><span class="n">Account</span><span class="p">&gt;()</span>
                <span class="p">.</span><span class="nf">Property</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">RowVersion</span><span class="p">).</span><span class="nf">IsConcurrencyToken</span><span class="p">();</span>
        <span class="p">}</span>

    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 5: Add connection string in appsettings.json file</strong></p>

<p><strong>appsettings.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"Logging"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"LogLevel"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Default"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Information"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Microsoft.AspNetCore"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Warning"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"ConnectionStrings"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"DefaultConnection"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Server=localhost;Database=YourPassword;User Id=sa;Password=oLdViCtOrY2008;TrustServerCertificate=True;"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"AllowedHosts"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*"</span><span class="w">
</span><span class="p">}</span><span class="w">


</span></code></pre></div></div>

<p><strong>Step 6: Configure Program class as follows.</strong></p>

<p><strong>Program.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">ConcurrencyHandling.API.Data</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="n">WebApplication</span><span class="p">.</span><span class="nf">CreateBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>

<span class="c1">// Add services to the container.</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">();</span>
<span class="c1">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddEndpointsApiExplorer</span><span class="p">();</span>


<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddSwaggerGen</span><span class="p">();</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddDbContext</span><span class="p">&lt;</span><span class="n">ApplicationDbContext</span><span class="p">&gt;(</span><span class="n">options</span> <span class="p">=&gt;</span>
    <span class="n">options</span><span class="p">.</span><span class="nf">UseSqlServer</span><span class="p">(</span><span class="n">builder</span><span class="p">.</span><span class="n">Configuration</span><span class="p">.</span><span class="nf">GetConnectionString</span><span class="p">(</span><span class="s">"DefaultConnection"</span><span class="p">)));</span>


<span class="kt">var</span> <span class="n">app</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

<span class="c1">// Configure the HTTP request pipeline.</span>
<span class="k">if</span> <span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">Environment</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
<span class="p">{</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwagger</span><span class="p">();</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwaggerUI</span><span class="p">();</span>
<span class="p">}</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseHttpsRedirection</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseAuthorization</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">MapControllers</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>


</code></pre></div></div>

<p><strong>Step 7: Create a Controller class AccountsController in Controllers folder.</strong></p>
<ul>
  <li>In the AccountsController class that follows, the statement <code class="language-plaintext highlighter-rouge">booking.RecordVersion = Guid.NewGuid();</code> is employed within the PutBooking and PostBooking methods to update the record version. This updated version will then be utilized in subsequent requests, such as those for updating or deleting a record.</li>
</ul>

<p><strong>AccountsController.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">ConcurrencyHandling.API.Data</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">ConcurrencyHandling.API.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">ConcurrencyHandling.API.Controllers</span>
<span class="p">{</span>

    <span class="c1">// Concurrency check using database generated token</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
    <span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">AccountsController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">ApplicationDbContext</span> <span class="n">_context</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">AccountsController</span><span class="p">(</span><span class="n">ApplicationDbContext</span> <span class="n">context</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_context</span> <span class="p">=</span> <span class="n">context</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/Accounts</span>
        <span class="p">[</span><span class="n">HttpGet</span><span class="p">]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Account</span><span class="p">&gt;&gt;&gt;</span> <span class="nf">GetAccounts</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Accounts</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Accounts</span><span class="p">.</span><span class="nf">ToListAsync</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/Accounts/5</span>
        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">Account</span><span class="p">&gt;&gt;</span> <span class="nf">GetAccount</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Accounts</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="kt">var</span> <span class="n">account</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Accounts</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">account</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="n">account</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// PUT: api/Accounts/5</span>
        <span class="c1">// To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754</span>
        <span class="p">[</span><span class="nf">HttpPut</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">PutAccount</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="n">Account</span> <span class="n">account</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">id</span> <span class="p">!=</span> <span class="n">account</span><span class="p">.</span><span class="n">AccountID</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">_context</span><span class="p">.</span><span class="nf">Entry</span><span class="p">(</span><span class="n">account</span><span class="p">).</span><span class="n">State</span> <span class="p">=</span> <span class="n">EntityState</span><span class="p">.</span><span class="n">Modified</span><span class="p">;</span>

            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">DbUpdateConcurrencyException</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(!</span><span class="nf">AccountExists</span><span class="p">(</span><span class="n">id</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
                <span class="p">}</span>
                <span class="k">else</span>
                <span class="p">{</span>
                    <span class="k">throw</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// POST: api/Accounts</span>
        <span class="c1">// To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754</span>
        <span class="p">[</span><span class="n">HttpPost</span><span class="p">]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">Account</span><span class="p">&gt;&gt;</span> <span class="nf">PostAccount</span><span class="p">(</span><span class="n">Account</span> <span class="n">account</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Accounts</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">Problem</span><span class="p">(</span><span class="s">"Entity set 'ApplicationDbContext.Accounts'  is null."</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="n">_context</span><span class="p">.</span><span class="n">Accounts</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">account</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>

            <span class="k">return</span> <span class="nf">CreatedAtAction</span><span class="p">(</span><span class="s">"GetAccount"</span><span class="p">,</span> <span class="k">new</span> <span class="p">{</span> <span class="n">id</span> <span class="p">=</span> <span class="n">account</span><span class="p">.</span><span class="n">AccountID</span> <span class="p">},</span> <span class="n">account</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">// DELETE: api/Accounts/5</span>
        <span class="p">[</span><span class="nf">HttpDelete</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">DeleteAccount</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="n">Account</span> <span class="n">account</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Accounts</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="c1">//var account = await _context.Accounts.FindAsync(id);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">account</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">_context</span><span class="p">.</span><span class="n">Accounts</span><span class="p">.</span><span class="nf">Remove</span><span class="p">(</span><span class="n">account</span><span class="p">);</span>

            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">DbUpdateConcurrencyException</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(!</span><span class="nf">AccountExists</span><span class="p">(</span><span class="n">id</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
                <span class="p">}</span>
                <span class="k">else</span>
                <span class="p">{</span>
                    <span class="k">throw</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="kt">bool</span> <span class="nf">AccountExists</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Accounts</span><span class="p">?.</span><span class="nf">Any</span><span class="p">(</span><span class="n">e</span> <span class="p">=&gt;</span> <span class="n">e</span><span class="p">.</span><span class="n">AccountID</span> <span class="p">==</span> <span class="n">id</span><span class="p">)).</span><span class="nf">GetValueOrDefault</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 8: Create migration and update database</strong></p>
<ul>
  <li>Open Package Manager Console (PMC).</li>
  <li>Select the project name ConcurrencyHandling.API</li>
  <li>Run the following command in PMC</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">Add-Migration</span> <span class="nf">InitialCreate</span>
</code></pre></div></div>
<p>This will create a new migration file named “InitialCreate” under the Migrations folder of your</p>

<ul>
  <li>Run the following command in PMC</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">Update-Database</span>
</code></pre></div></div>

<p><strong>Step 9: Run the application and test concurrency</strong></p>

<ul>
  <li>Create a new record by PostAccount action using swagger. Sample example for post data.</li>
</ul>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"accountID"</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w">
  </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Mahedee Hasan"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"balance"</span><span class="p">:</span><span class="w"> </span><span class="mi">1000</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<ul>
  <li>Update the record using the PutAccount action in Swagger. A sample input is provided below. Meanwhile, open another tab and make an update to the record. Your record version will be altered. If you attempt to update the record using the previous record version, it will result in an exception due to concurrency. However, if no one else has updated it and you are using the correct record version, you can update the record without encountering any exceptions.</li>
</ul>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"accountID"</span><span class="p">:</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w">
  </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Tahiya Hasan"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"balance"</span><span class="p">:</span><span class="w"> </span><span class="mi">1000</span><span class="p">,</span><span class="w">
  </span><span class="nl">"rowVersion"</span><span class="p">:</span><span class="w"> </span><span class="s2">"AAAAAAAAB9U="</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<ul>
  <li>Delete the record using the DeleteAccount action in Swagger. A sample input is provided below. Meanwhile, open another tab and update the record. Your record version will be changed. If you attempt to delete the record using the previous record version, it will throw an exception due to concurrency. However, if no one else has updated it and you are using the correct record version, you can delete the record without encountering any exceptions.</li>
</ul>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"accountID"</span><span class="p">:</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w">
  </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Tahiya Hasan"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"balance"</span><span class="p">:</span><span class="w"> </span><span class="mi">1000</span><span class="p">,</span><span class="w">
  </span><span class="nl">"rowVersion"</span><span class="p">:</span><span class="w"> </span><span class="s2">"AAAAAAAAB9U="</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<ul>
  <li>When we execute update and delete request in the background the following query execute.</li>
</ul>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">UPDATE</span> <span class="p">[</span><span class="n">Accounts</span><span class="p">]</span> <span class="k">SET</span> <span class="p">[</span><span class="n">Balance</span><span class="p">]</span> <span class="o">=</span> <span class="o">@</span><span class="n">p0</span><span class="p">,</span> <span class="p">[</span><span class="n">Name</span><span class="p">]</span> <span class="o">=</span> <span class="o">@</span><span class="n">p1</span>
<span class="k">OUTPUT</span> <span class="n">INSERTED</span><span class="p">.[</span><span class="n">RowVersion</span><span class="p">]</span>
<span class="k">WHERE</span> <span class="p">[</span><span class="n">AccountID</span><span class="p">]</span> <span class="o">=</span> <span class="o">@</span><span class="n">p2</span> <span class="k">AND</span> <span class="p">[</span><span class="n">RowVersion</span><span class="p">]</span> <span class="o">=</span> <span class="o">@</span><span class="n">p3</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>To view the generated SQL by Entity framework. Configre SQL Log in Program class as follows and you will see the the SQL output in Visual Studio Output window.</li>
</ul>

<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddDbContext</span><span class="p">&lt;</span><span class="n">ApplicationDbContext</span><span class="p">&gt;(</span><span class="n">options</span> <span class="p">=&gt;</span>
    <span class="n">options</span><span class="p">.</span><span class="nf">UseSqlServer</span><span class="p">(</span><span class="n">builder</span><span class="p">.</span><span class="n">Configuration</span><span class="p">.</span><span class="nf">GetConnectionString</span><span class="p">(</span><span class="s">"DefaultConnection"</span><span class="p">))</span>
    <span class="p">.</span><span class="nf">LogTo</span><span class="p">(</span><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">,</span> <span class="n">LogLevel</span><span class="p">.</span><span class="n">Information</span><span class="p">));</span>
</code></pre></div></div>

<p><strong><a href="https://github.com/mahedee/code-sample02/tree/master/ConcurrencyDBToken">Source code</a></strong></p>]]></content><author><name>Mahedee Hasan</name></author><category term="ASP.NET" /><category term="ASP.NET Core" /><category term="C#" /><category term="Web API" /><category term="EF" /><category term="Software Architecture" /><category term="csharp" /><category term="aspnet" /><category term="aspnetcore" /><category term="webapi" /><category term="ef" /><category term="softwarearchitecture" /><summary type="html"><![CDATA[Effectively overseeing concurrency is paramount, particularly in enterprise applications, exerting a substantial influence on financial systems. This article seeks to illustrate the pragmatic aspects of managing concurrency in an ASP.NET Core application by employing a database-generated token through Entity Framework.]]></summary></entry><entry><title type="html">Exploring Concurrency and Concurrency Management in ASP.NET Core Applications with Entity Framework</title><link href="https://mahedee.net//concurrency_management_in_aspnet_core_applications_with_entity_framework/" rel="alternate" type="text/html" title="Exploring Concurrency and Concurrency Management in ASP.NET Core Applications with Entity Framework" /><published>2023-09-07T00:00:00-03:00</published><updated>2023-09-07T00:00:00-03:00</updated><id>https://mahedee.net//concurrency_management_in_aspnet_core_applications_with_entity_framework</id><content type="html" xml:base="https://mahedee.net//concurrency_management_in_aspnet_core_applications_with_entity_framework/"><![CDATA[<p>Concurrency refers to the simultaneous execution of multiple tasks or processes within a system. In the context of software development, it often involves managing multiple operations concurrently to improve system efficiency and responsiveness.</p>

<p>Handling concurrency in software applications is crucial to prevent conflicts and ensure data consistency when multiple users or processes attempt to access and modify shared data simultaneously. Several techniques are employed to manage concurrency effectively:</p>

<p><strong>Pessimistic Concurrency Control:</strong> Acquiring locks on data before allowing any modifications, ensuring exclusive access during the transaction.</p>

<p><strong>Optimistic Concurrency Control:</strong> Allowing multiple transactions to proceed independently but checking for conflicts at the end, typically through versioning or timestamps, and handling conflicts accordingly.</p>

<p><strong>Locking Mechanisms:</strong> Using locks to control access to shared resources and ensuring that only one process can modify data at a time.</p>

<p><strong>Transaction Isolation:</strong> Employing transactional mechanisms to encapsulate a series of operations, ensuring they either all succeed or none at all, thus maintaining data integrity.</p>

<p><strong>Conflict Resolution:</strong> Implementing strategies to resolve conflicts when they occur, such as merging changes, notifying users of conflicts, or rolling back transactions.</p>

<p>Understanding the nature of the application, the database system in use, and the specific concurrency requirements helps developers choose the most suitable approach for handling concurrency effectively. But, Optimistic Concurrency control mechanism is mostly used in the industry.</p>

<h2 id="optimistic-concurrency-handling-using-application-managed-token-using-entity-framework">Optimistic concurrency handling using application managed token using entity framework</h2>
<p>In this article, we will explore how to handle optimistic concurrency  using application managed token using entity framework. In this case, the client application will send the token to the server with the request. The server will check the token with the database. If the token is valid, then the server will update the data and send the updated token to the client. If the token is invalid, then the server will send the error message to the client. The client will show the error message to the user and refresh the data from the server. Let’s move to the demo on how to handle optimistic concurrency using an application-managed token.</p>

<p><strong>Tools and Technology Used</strong></p>

<ul>
  <li>ASP.net core Web API</li>
  <li>Visual C#</li>
  <li>Entity Framework</li>
  <li>SQL Server</li>
</ul>

<p><strong>Step 1: Create a asp.net core web api project name ConcurrencyHandling.API</strong></p>

<p><strong>Step 2: Install the following nuget packages in the project.</strong></p>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">Microsoft.EntityFrameworkCore</span>
<span class="nf">Microsoft.EntityFrameworkCore.Design</span>
<span class="nf">Microsoft.EntityFrameworkCore.SqlServer</span>
<span class="nf">Microsoft.EntityFrameworkCore.Tools</span>

</code></pre></div></div>

<p><strong>Step 3: Create a Model class name Booking</strong></p>

<ul>
  <li>Booking class to store Booking Information</li>
  <li>In the following class RecordVersion property is a Guid which is used to track the updated version of the record.</li>
  <li>ConcurrencyCheck attribute is specifies that this property participates in optimistic concurrency checking. This column is used in the WHERE clause of UPDATE and DELETE operation.</li>
</ul>

<p><strong>Booking.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System.ComponentModel.DataAnnotations</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">ConcurrencyHandling.API.Models</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Booking</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">BookingID</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">CustomerName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">RoomID</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="n">DateTime</span> <span class="n">BookingDate</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="n">DateTime</span> <span class="n">CheckInDate</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="n">DateTime</span> <span class="n">CheckOutDate</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">// ConcurrencyCheck is specifies that this property participates in optimistic concurrency checking.</span>
        <span class="p">[</span><span class="n">ConcurrencyCheck</span><span class="p">]</span>
        <span class="k">public</span> <span class="n">Guid</span> <span class="n">RecordVersion</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 4: Create a Context class name ApplicationDbContext in Data folder.</strong></p>

<p><strong>ApplicationDbContext.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">ConcurrencyHandling.API.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">ConcurrencyHandling.API.Data</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">ApplicationDbContext</span> <span class="p">:</span> <span class="n">DbContext</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="n">DbSet</span><span class="p">&lt;</span><span class="n">Booking</span><span class="p">&gt;?</span> <span class="n">Booking</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="nf">ApplicationDbContext</span><span class="p">(</span><span class="n">DbContextOptions</span><span class="p">&lt;</span><span class="n">ApplicationDbContext</span><span class="p">&gt;</span> <span class="n">options</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
        <span class="p">{</span>

        <span class="p">}</span>

    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 5: Add connection string in appsettings.json file</strong></p>

<p><strong>appsettings.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"Logging"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"LogLevel"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Default"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Information"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Microsoft.AspNetCore"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Warning"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
</span><span class="nl">"ConnectionStrings"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"DefaultConnection"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Server=localhost;Database=ConcurrencyAppTokenDB;User Id=sa;Password=YourPassword;TrustServerCertificate=True;"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"AllowedHosts"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*"</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<p><strong>Step 6: Configure Program class as follows.</strong></p>

<p><strong>Program.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">ConcurrencyHandling.API.Data</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="n">WebApplication</span><span class="p">.</span><span class="nf">CreateBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>

<span class="c1">// Add services to the container.</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">();</span>
<span class="c1">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddEndpointsApiExplorer</span><span class="p">();</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddSwaggerGen</span><span class="p">();</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddDbContext</span><span class="p">&lt;</span><span class="n">ApplicationDbContext</span><span class="p">&gt;(</span><span class="n">options</span> <span class="p">=&gt;</span>
    <span class="n">options</span><span class="p">.</span><span class="nf">UseSqlServer</span><span class="p">(</span><span class="n">builder</span><span class="p">.</span><span class="n">Configuration</span><span class="p">.</span><span class="nf">GetConnectionString</span><span class="p">(</span><span class="s">"DefaultConnection"</span><span class="p">)));</span>

<span class="kt">var</span> <span class="n">app</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

<span class="c1">// Configure the HTTP request pipeline.</span>
<span class="k">if</span> <span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">Environment</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
<span class="p">{</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwagger</span><span class="p">();</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwaggerUI</span><span class="p">();</span>
<span class="p">}</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseHttpsRedirection</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseAuthorization</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">MapControllers</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>

</code></pre></div></div>

<p><strong>Step 7: Create a Controller class BookingsController in Controllers folder.</strong></p>
<ul>
  <li>In the BookingsController class that follows, the statement <code class="language-plaintext highlighter-rouge">booking.RecordVersion = Guid.NewGuid();</code> is employed within the PutBooking and PostBooking methods to update the record version. This updated version will then be utilized in subsequent requests, such as those for updating or deleting a record.</li>
</ul>

<p><strong>BookingsController.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">ConcurrencyHandling.API.Data</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">ConcurrencyHandling.API.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">ConcurrencyHandling.API.Controllers</span>
<span class="p">{</span>
    <span class="c1">// Concurrency check using application managed token</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
    <span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">BookingsController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">ApplicationDbContext</span> <span class="n">_context</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">BookingsController</span><span class="p">(</span><span class="n">ApplicationDbContext</span> <span class="n">context</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_context</span> <span class="p">=</span> <span class="n">context</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/Bookings</span>
        <span class="p">[</span><span class="n">HttpGet</span><span class="p">]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Booking</span><span class="p">&gt;&gt;&gt;</span> <span class="nf">GetBooking</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Booking</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Booking</span><span class="p">.</span><span class="nf">ToListAsync</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/Bookings/5</span>
        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">Booking</span><span class="p">&gt;&gt;</span> <span class="nf">GetBooking</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Booking</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="kt">var</span> <span class="n">booking</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Booking</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">booking</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="n">booking</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// PUT: api/Bookings/5</span>
        <span class="c1">// To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754</span>
        <span class="p">[</span><span class="nf">HttpPut</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">PutBooking</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="n">Booking</span> <span class="n">booking</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">id</span> <span class="p">!=</span> <span class="n">booking</span><span class="p">.</span><span class="n">BookingID</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">_context</span><span class="p">.</span><span class="nf">Entry</span><span class="p">(</span><span class="n">booking</span><span class="p">).</span><span class="n">State</span> <span class="p">=</span> <span class="n">EntityState</span><span class="p">.</span><span class="n">Modified</span><span class="p">;</span>

            <span class="k">try</span>
            <span class="p">{</span>
                <span class="n">booking</span><span class="p">.</span><span class="n">RecordVersion</span> <span class="p">=</span> <span class="n">Guid</span><span class="p">.</span><span class="nf">NewGuid</span><span class="p">();</span>
                <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">DbUpdateConcurrencyException</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(!</span><span class="nf">BookingExists</span><span class="p">(</span><span class="n">id</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
                <span class="p">}</span>
                <span class="k">else</span>
                <span class="p">{</span>
                    <span class="k">throw</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// POST: api/Bookings</span>
        <span class="c1">// To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754</span>
        <span class="p">[</span><span class="n">HttpPost</span><span class="p">]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">Booking</span><span class="p">&gt;&gt;</span> <span class="nf">PostBooking</span><span class="p">(</span><span class="n">Booking</span> <span class="n">booking</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Booking</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">Problem</span><span class="p">(</span><span class="s">"Entity set 'ApplicationDbContext.Booking'  is null."</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="n">booking</span><span class="p">.</span><span class="n">RecordVersion</span> <span class="p">=</span> <span class="n">Guid</span><span class="p">.</span><span class="nf">NewGuid</span><span class="p">();</span>
            <span class="n">_context</span><span class="p">.</span><span class="n">Booking</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">booking</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>

            <span class="k">return</span> <span class="nf">CreatedAtAction</span><span class="p">(</span><span class="s">"GetBooking"</span><span class="p">,</span> <span class="k">new</span> <span class="p">{</span> <span class="n">id</span> <span class="p">=</span> <span class="n">booking</span><span class="p">.</span><span class="n">BookingID</span> <span class="p">},</span> <span class="n">booking</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">// DELETE: api/Bookings/5</span>
        <span class="p">[</span><span class="nf">HttpDelete</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">DeleteBooking</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="n">Booking</span> <span class="n">booking</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Booking</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="c1">//var booking = await _context.Booking.FindAsync(id);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">booking</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="n">_context</span><span class="p">.</span><span class="n">Booking</span><span class="p">.</span><span class="nf">Remove</span><span class="p">(</span><span class="n">booking</span><span class="p">);</span>

            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">DbUpdateConcurrencyException</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(!</span><span class="nf">BookingExists</span><span class="p">(</span><span class="n">id</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
                <span class="p">}</span>
                <span class="k">else</span>
                <span class="p">{</span>
                    <span class="k">throw</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="kt">bool</span> <span class="nf">BookingExists</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Booking</span><span class="p">?.</span><span class="nf">Any</span><span class="p">(</span><span class="n">e</span> <span class="p">=&gt;</span> <span class="n">e</span><span class="p">.</span><span class="n">BookingID</span> <span class="p">==</span> <span class="n">id</span><span class="p">)).</span><span class="nf">GetValueOrDefault</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>


</code></pre></div></div>

<p><strong>Step 8: Create migration and update database</strong></p>
<ul>
  <li>Open Package Manager Console (PMC).</li>
  <li>Select the project name ConcurrencyHandling.API</li>
  <li>Run the following command in PMC</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">Add-Migration</span> <span class="nf">InitialCreate</span>
</code></pre></div></div>
<p>This will create a new migration file named “InitialCreate” under the Migrations folder of your</p>

<ul>
  <li>Run the following command in PMC</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">Update-Database</span>
</code></pre></div></div>

<p><strong>Step 9: Run the application and test concurrency</strong></p>

<ul>
  <li>Create a new record by PostBooking action using swagger. Sample example for post data.</li>
</ul>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"bookingID"</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w">
  </span><span class="nl">"customerName"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Mahedee Hasan"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"roomID"</span><span class="p">:</span><span class="w"> </span><span class="mi">10</span><span class="p">,</span><span class="w">
  </span><span class="nl">"bookingDate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2024-01-18T16:30:41.650Z"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"checkInDate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2024-01-18T16:30:41.650Z"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"checkOutDate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2024-01-18T16:30:41.650Z"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<ul>
  <li>Update the record using the PutBooking action in Swagger. A sample input is provided below. Meanwhile, open another tab and make an update to the record. Your record version will be altered. If you attempt to update the record using the previous record version, it will result in an exception due to concurrency. However, if no one else has updated it and you are using the correct record version, you can update the record without encountering any exceptions.</li>
</ul>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"bookingID"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
  </span><span class="nl">"customerName"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Humaira Hasan"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"roomID"</span><span class="p">:</span><span class="w"> </span><span class="mi">10</span><span class="p">,</span><span class="w">
  </span><span class="nl">"bookingDate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2024-01-18T16:30:41.650Z"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"checkInDate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2024-01-18T16:30:41.650Z"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"checkOutDate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2024-01-18T16:30:41.650Z"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"recordVersion"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ed585f2c-720d-4bbb-a361-b059509d7f61"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<ul>
  <li>Delete the record using the DeleteBooking action in Swagger. A sample input is provided below. Meanwhile, open another tab and update the record. Your record version will be changed. If you attempt to delete the record using the previous record version, it will throw an exception due to concurrency. However, if no one else has updated it and you are using the correct record version, you can delete the record without encountering any exceptions.</li>
</ul>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"bookingID"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
  </span><span class="nl">"customerName"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Humaira Hasan"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"roomID"</span><span class="p">:</span><span class="w"> </span><span class="mi">10</span><span class="p">,</span><span class="w">
  </span><span class="nl">"bookingDate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2024-01-18T16:30:41.650Z"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"checkInDate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2024-01-18T16:30:41.650Z"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"checkOutDate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2024-01-18T16:30:41.650Z"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"recordVersion"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ed585f2c-720d-4bbb-a361-b059509d7f61"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<ul>
  <li>When we execute update and delete request in the background the following query execute.</li>
</ul>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">UPDATE</span> <span class="p">[</span><span class="n">Booking</span><span class="p">]</span> <span class="k">SET</span> <span class="p">[</span><span class="n">BookingDate</span><span class="p">]</span> <span class="o">=</span> <span class="o">@</span><span class="n">p0</span><span class="p">,</span> <span class="p">[</span><span class="n">CheckInDate</span><span class="p">]</span> <span class="o">=</span> <span class="o">@</span><span class="n">p1</span><span class="p">,</span> <span class="p">[</span><span class="n">CheckOutDate</span><span class="p">]</span> <span class="o">=</span> <span class="o">@</span><span class="n">p2</span><span class="p">,</span> <span class="p">[</span><span class="n">CustomerName</span><span class="p">]</span> <span class="o">=</span> <span class="o">@</span><span class="n">p3</span><span class="p">,</span> <span class="p">[</span><span class="n">RecordVersion</span><span class="p">]</span> <span class="o">=</span> <span class="o">@</span><span class="n">p4</span><span class="p">,</span> <span class="p">[</span><span class="n">RoomID</span><span class="p">]</span> <span class="o">=</span> <span class="o">@</span><span class="n">p5</span>
<span class="k">OUTPUT</span> <span class="mi">1</span>
<span class="k">WHERE</span> <span class="p">[</span><span class="n">BookingID</span><span class="p">]</span> <span class="o">=</span> <span class="o">@</span><span class="n">p6</span> <span class="k">AND</span> <span class="p">[</span><span class="n">RecordVersion</span><span class="p">]</span> <span class="o">=</span> <span class="o">@</span><span class="n">p7</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>To view the generated SQL by Entity framework. Configre SQL Log in Program class as follows and you will see the the SQL output in Visual Studio Output window as like below.</li>
</ul>

<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddDbContext</span><span class="p">&lt;</span><span class="n">ApplicationDbContext</span><span class="p">&gt;(</span><span class="n">options</span> <span class="p">=&gt;</span>
    <span class="n">options</span><span class="p">.</span><span class="nf">UseSqlServer</span><span class="p">(</span><span class="n">builder</span><span class="p">.</span><span class="n">Configuration</span><span class="p">.</span><span class="nf">GetConnectionString</span><span class="p">(</span><span class="s">"DefaultConnection"</span><span class="p">))</span>
    <span class="p">.</span><span class="nf">LogTo</span><span class="p">(</span><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">,</span> <span class="n">LogLevel</span><span class="p">.</span><span class="n">Information</span><span class="p">));</span>
</code></pre></div></div>

<p><img src="/assets/images/posts/2023/sqloutput.png" alt="" /></p>

<p><strong><a href="https://github.com/mahedee/code-sample02/tree/master/ConcurrencyAppToken">Source code</a></strong></p>]]></content><author><name>Mahedee Hasan</name></author><category term="ASP.NET" /><category term="ASP.NET Core" /><category term="C#" /><category term="Web API" /><category term="EF" /><category term="Software Architecture" /><category term="csharp" /><category term="aspnet" /><category term="aspnetcore" /><category term="webapi" /><category term="ef" /><category term="softwarearchitecture" /><summary type="html"><![CDATA[Effectively managing concurrency is a critical concern, especially in enterprise applications, with a significant impact on financial systems. This article aims to demonstrate the practical aspects of handling concurrency in an ASP.NET Core application using both Entity Framework and SQL Server.]]></summary></entry><entry><title type="html">Unleashing Micro Frontends with React and ASP.NET Core: A Step-by-Step Implementation Approach</title><link href="https://mahedee.net//micro-frontend-using-react-and-aspnet-core/" rel="alternate" type="text/html" title="Unleashing Micro Frontends with React and ASP.NET Core: A Step-by-Step Implementation Approach" /><published>2023-08-30T00:00:00-03:00</published><updated>2023-08-30T00:00:00-03:00</updated><id>https://mahedee.net//micro-frontend-using-react-and-aspnet-core</id><content type="html" xml:base="https://mahedee.net//micro-frontend-using-react-and-aspnet-core/"><![CDATA[<p><strong>Introduction</strong><br />
Micro frontends are an architectural pattern and approach for building modern web applications. Similar to microservices on the backend, micro frontends focus on breaking down the user interface (UI) into smaller, self-contained, and independently deployable parts.</p>

<p>In traditional monolithic frontend architectures, the entire UI is developed as a single codebase, making it difficult to scale, maintain, and iterate on different parts of the application independently. Micro frontends aim to address these challenges by allowing teams to develop and deploy UI components or features as separate entities.</p>

<p>Each micro frontend typically represents a distinct business capability or user journey and can be developed using different technologies or frameworks. This enables teams to choose the most suitable technology stack for their specific needs. For example, one micro frontend may be built using React, while another may use Angular or Vue.js.</p>

<p>Micro frontends communicate with each other and the backend through well-defined APIs or events, enabling them to work together seamlessly as a cohesive application. This approach promotes modularization, scalability, and reusability, as teams can develop, test, and deploy their micro frontends independently.</p>

<p>By adopting micro frontends, organizations can effectively distribute development efforts among multiple teams, enabling faster delivery, easier maintenance, and better isolation of components. This approach also facilitates technology diversity, allowing teams to leverage different tools and frameworks within the same application.</p>

<p><img src="/assets/images/posts/2023/mfe-01.png" alt="" /></p>

<p>Fig: Micro frontend Architecture. (Source: Internet)</p>

<p><strong>Objective</strong><br />
In this article I will show you how to build Micro front end application using react and asp.net core. Here I am going to create four react applications. One is Master or Container service and other three will be child project or service. Master service will be master-frontend application and other three service will be header-frontend, product-frontend and customer-frontend. I will create two api project using asp.net core for product-frontend and customer-frontend. At the end you will see a complete micro frontend application up and running.</p>

<p><strong>Step 1: Create four react projects.</strong></p>

<ul>
  <li>Open a terminal or bash, write below commands to create four React projects.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">npx</span> <span class="nf">create-react-app</span> <span class="nf">master-frontend</span>
<span class="nf">npx</span> <span class="nf">create-react-app</span> <span class="nf">header-frontend</span>
<span class="nf">npx</span> <span class="nf">create-react-app</span> <span class="nf">product-frontend</span>
<span class="nf">npx</span> <span class="nf">create-react-app</span> <span class="nf">customer-frontend</span>
</code></pre></div></div>

<p><strong>Step 2: Configure “header-frontend” react project</strong></p>

<ul>
  <li>Now we are going to configure header-frontend project to use inside our Master Project as a service.</li>
  <li>Go to header-frontend project</li>
  <li>Open the terminal and install below libraries with below command.
    <div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">npm</span> <span class="nf">install</span> <span class="nf">react-router-dom</span>
<span class="nf">npm</span> <span class="nf">install</span> <span class="nf">react-bootstrap</span> <span class="nf">bootstrap@5.1.3</span>
<span class="nf">npm</span> <span class="nf">install</span> <span class="nf">react-app-rewired</span> <span class="nf">history</span>
</code></pre></div>    </div>
  </li>
  <li>Inside the src directory, create a folder and name the folder components.</li>
  <li>Inside components folder create a file and name the file Header.js</li>
  <li>Write below code in src-&gt;components-&gt;Header.js</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Container</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-bootstrap</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">Header</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">Container</span> <span class="nx">fluid</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">App-header</span><span class="dl">"</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Micro</span> <span class="nx">Frontend</span> <span class="nx">using</span> <span class="nx">React</span><span class="p">.</span><span class="nx">js</span><span class="o">&lt;</span><span class="sr">/p</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/Container</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">Header</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>Open App.js file and replace with below code.</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">logo</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./logo.svg</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="dl">"</span><span class="s2">./App.css</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">BrowserRouter</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-router-dom</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">Header</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./components/Header</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">function</span> <span class="nf">App</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">BrowserRouter</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">Header</span> <span class="o">/&gt;</span>
    <span class="o">&lt;</span><span class="sr">/BrowserRouter</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">App</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>Open App.css file and replace the file with below code.</li>
</ul>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.App-header</span> <span class="p">{</span>
  <span class="nl">background-color</span><span class="p">:</span> <span class="m">#4d739e</span><span class="p">;</span>
  <span class="nl">min-height</span><span class="p">:</span> <span class="m">3vh</span><span class="p">;</span>
  <span class="nl">display</span><span class="p">:</span> <span class="n">flex</span><span class="p">;</span>
  <span class="nl">flex-direction</span><span class="p">:</span> <span class="n">column</span><span class="p">;</span>
  <span class="nl">align-items</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
  <span class="nl">justify-content</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
  <span class="nl">font-size</span><span class="p">:</span> <span class="n">calc</span><span class="p">(</span><span class="m">10px</span> <span class="err">+</span> <span class="m">2vmin</span><span class="p">);</span>
  <span class="nl">color</span><span class="p">:</span> <span class="no">white</span><span class="p">;</span>

  <span class="nl">box-shadow</span><span class="p">:</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0.25</span><span class="p">)</span> <span class="m">0px</span> <span class="m">5px</span> <span class="m">15px</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>Create another file inside src folder, name the file setupProxy.js and write below code for cors policy.</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">(</span><span class="nx">app</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">app</span><span class="p">.</span><span class="nf">use</span><span class="p">((</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">res</span><span class="p">.</span><span class="nf">header</span><span class="p">(</span><span class="dl">"</span><span class="s2">Access-Control-Allow-Origin</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">*</span><span class="dl">"</span><span class="p">);</span>
    <span class="nf">next</span><span class="p">();</span>
  <span class="p">});</span>
<span class="p">};</span>
</code></pre></div></div>

<ul>
  <li>Open index.js file and replace with below code.</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">ReactDOM</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-dom/client</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="dl">"</span><span class="s2">./index.css</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="dl">"</span><span class="s2">bootstrap/dist/css/bootstrap.min.css</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">App</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./App</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">reportWebVitals</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./reportWebVitals</span><span class="dl">"</span><span class="p">;</span>

<span class="nb">window</span><span class="p">.</span><span class="nx">renderHeader</span> <span class="o">=</span> <span class="p">(</span><span class="nx">masterId</span><span class="p">,</span> <span class="nx">history</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">root</span> <span class="o">=</span> <span class="nx">ReactDOM</span><span class="p">.</span><span class="nf">createRoot</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="nx">masterId</span><span class="p">));</span>

  <span class="nx">root</span><span class="p">.</span><span class="nf">render</span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">React</span><span class="p">.</span><span class="nx">StrictMode</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">App</span> <span class="nx">history</span><span class="o">=</span><span class="p">{</span><span class="nx">history</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/React.StrictMode</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">};</span>

<span class="nb">window</span><span class="p">.</span><span class="nx">unmountHeader</span> <span class="o">=</span> <span class="p">(</span><span class="nx">masterId</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">ReactDOM</span><span class="p">.</span><span class="nf">unmountComponentAtNode</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="nx">masterId</span><span class="p">));</span>
<span class="p">};</span>

<span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">Header-master</span><span class="dl">"</span><span class="p">))</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">root</span> <span class="o">=</span> <span class="nx">ReactDOM</span><span class="p">.</span><span class="nf">createRoot</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">root</span><span class="dl">"</span><span class="p">));</span>
  <span class="nx">root</span><span class="p">.</span><span class="nf">render</span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">React</span><span class="p">.</span><span class="nx">StrictMode</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">App</span> <span class="o">/&gt;</span>
    <span class="o">&lt;</span><span class="sr">/React.StrictMode</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>

<span class="c1">// If you want to start measuring performance in your app, pass a function</span>
<span class="c1">// to log results (for example: reportWebVitals(console.log))</span>
<span class="c1">// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals</span>
<span class="nf">reportWebVitals</span><span class="p">();</span>
</code></pre></div></div>

<ul>
  <li>Create a file inside root directory and name the file config-overrides.js and write below code. Below code will override webpack of react.</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">webpack</span><span class="p">:</span> <span class="p">(</span><span class="nx">config</span><span class="p">,</span> <span class="nx">env</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">config</span><span class="p">.</span><span class="nx">optimization</span><span class="p">.</span><span class="nx">runtimeChunk</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
    <span class="nx">config</span><span class="p">.</span><span class="nx">optimization</span><span class="p">.</span><span class="nx">splitChunks</span> <span class="o">=</span> <span class="p">{</span>
      <span class="na">cacheGroups</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">default</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
      <span class="p">},</span>
    <span class="p">};</span>

    <span class="nx">config</span><span class="p">.</span><span class="nx">output</span><span class="p">.</span><span class="nx">filename</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">static/js/[name].js</span><span class="dl">"</span><span class="p">;</span>

    <span class="nx">config</span><span class="p">.</span><span class="nx">plugins</span><span class="p">[</span><span class="mi">5</span><span class="p">].</span><span class="nx">options</span><span class="p">.</span><span class="nx">filename</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">static/css/[name].css</span><span class="dl">"</span><span class="p">;</span>
    <span class="nx">config</span><span class="p">.</span><span class="nx">plugins</span><span class="p">[</span><span class="mi">5</span><span class="p">].</span><span class="nx">options</span><span class="p">.</span><span class="nx">moduleFilename</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="dl">"</span><span class="s2">static/css/main.css</span><span class="dl">"</span><span class="p">;</span>
    <span class="k">return</span> <span class="nx">config</span><span class="p">;</span>
  <span class="p">},</span>
<span class="p">};</span>
</code></pre></div></div>

<ul>
  <li>Open package.json and replace “scripts” section with below code. This project going to be open on 3001 port because we set PORT = 3001 in script section.</li>
</ul>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="nl">"start"</span><span class="p">:</span><span class="w"> </span><span class="s2">"set PORT=3001 &amp;&amp; react-app-rewired start"</span><span class="p">,</span><span class="w">
</span><span class="nl">"build"</span><span class="p">:</span><span class="w"> </span><span class="s2">"react-app-rewired build"</span><span class="p">,</span><span class="w">
</span><span class="nl">"test"</span><span class="p">:</span><span class="w"> </span><span class="s2">"react-app-rewired test"</span><span class="p">,</span><span class="w">
</span><span class="nl">"eject"</span><span class="p">:</span><span class="w"> </span><span class="s2">"react-scripts eject"</span><span class="w">
</span><span class="p">}</span><span class="err">,</span><span class="w">

</span></code></pre></div></div>

<ul>
  <li>Now open the terminal and start the project with below command.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">npm</span> <span class="nf">start</span>
</code></pre></div></div>

<ul>
  <li>Browser output should look like below. If you see below output, means our header frontend project is ready.</li>
</ul>

<p><img src="/assets/images/posts/2023/mfe-02.png" alt="" /></p>

<p><strong>Step 3: Create Product.API Backend Project</strong></p>

<ul>
  <li>Create a web api project name Product.API</li>
  <li>Install following Nuget packages in the project</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">Microsoft.EntityFrameworkCore</span>
<span class="nf">Microsoft.EntityFrameworkCore.InMemory</span>
<span class="nf">Microsoft.EntityFrameworkCore.SqlServer</span>
<span class="nf">Microsoft.EntityFrameworkCore.Tools</span>
<span class="nf">Microsoft.VisualStudio.Web.CodeGeneration.Design</span>

</code></pre></div></div>

<ul>
  <li>Create following two model class in Model folder</li>
</ul>

<p><strong>Product.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">Product.API.Model</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Product</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span><span class="p">?</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span><span class="p">?</span> <span class="n">ShortName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;}</span>
        <span class="k">public</span> <span class="kt">double</span> <span class="n">Price</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="n">DateTime</span><span class="p">?</span> <span class="n">ManufactureDate</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="n">DateTime</span><span class="p">?</span> <span class="n">ExpiryDate</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Category.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">Product.API.Model</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Category</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span><span class="p">?</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span><span class="p">?</span> <span class="n">DisplayName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Add following DbContext and SeedGenerator class in Db folder</li>
</ul>

<p><strong>ProductContext.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Product.API.Model</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Product.API.Db</span>
<span class="p">{</span>
<span class="k">public</span> <span class="k">class</span> <span class="nc">ProductContext</span> <span class="p">:</span> <span class="n">DbContext</span>
<span class="p">{</span>
<span class="k">public</span> <span class="nf">ProductContext</span><span class="p">(</span><span class="n">DbContextOptions</span><span class="p">&lt;</span><span class="n">ProductContext</span><span class="p">&gt;</span> <span class="n">options</span><span class="p">)</span>
<span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
<span class="p">{</span>

        <span class="p">}</span>
        <span class="k">public</span> <span class="n">DbSet</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">.</span><span class="n">API</span><span class="p">.</span><span class="n">Model</span><span class="p">.</span><span class="n">Product</span><span class="p">&gt;</span> <span class="n">Products</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="n">DbSet</span><span class="p">&lt;</span><span class="n">Category</span><span class="p">&gt;</span> <span class="n">Categories</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>

<span class="p">}</span>

</code></pre></div></div>

<p><strong>SeedGenerator.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Product.API.Model</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Product.API.Db</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">SeedGenerator</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">SeedData</span><span class="p">(</span><span class="n">WebApplication</span> <span class="n">app</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">scope</span> <span class="p">=</span> <span class="n">app</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">CreateScope</span><span class="p">())</span>
            <span class="p">{</span>
                <span class="kt">var</span> <span class="n">context</span> <span class="p">=</span> <span class="n">scope</span><span class="p">.</span><span class="n">ServiceProvider</span><span class="p">.</span><span class="n">GetService</span><span class="p">&lt;</span><span class="n">ProductContext</span><span class="p">&gt;();</span>
                <span class="k">if</span> <span class="p">(!</span><span class="n">context</span><span class="p">.</span><span class="n">Products</span><span class="p">.</span><span class="nf">Any</span><span class="p">())</span>
                <span class="p">{</span>
                    <span class="n">context</span><span class="p">.</span><span class="n">Products</span><span class="p">.</span><span class="nf">AddRange</span><span class="p">(</span>
                        <span class="k">new</span> <span class="n">Product</span><span class="p">.</span><span class="n">API</span><span class="p">.</span><span class="n">Model</span><span class="p">.</span><span class="n">Product</span>
                        <span class="p">{</span>
                            <span class="n">Name</span> <span class="p">=</span> <span class="s">"Cat's Shirt "</span><span class="p">,</span>
                            <span class="n">ShortName</span> <span class="p">=</span> <span class="s">"Shirt"</span><span class="p">,</span>
                            <span class="n">Price</span> <span class="p">=</span> <span class="m">1200</span><span class="p">,</span>
                            <span class="n">ManufactureDate</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Today</span><span class="p">,</span>
                            <span class="n">ExpiryDate</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">.</span><span class="nf">AddYears</span><span class="p">(</span><span class="m">5</span><span class="p">)</span>
                        <span class="p">},</span>
                         <span class="k">new</span> <span class="n">Product</span><span class="p">.</span><span class="n">API</span><span class="p">.</span><span class="n">Model</span><span class="p">.</span><span class="n">Product</span>
                         <span class="p">{</span>
                             <span class="n">Name</span> <span class="p">=</span> <span class="s">"Lipton Tea Bag"</span><span class="p">,</span>
                             <span class="n">ShortName</span> <span class="p">=</span> <span class="s">"Tea"</span><span class="p">,</span>
                             <span class="n">Price</span> <span class="p">=</span> <span class="m">150</span><span class="p">,</span>
                             <span class="n">ManufactureDate</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Today</span><span class="p">,</span>
                             <span class="n">ExpiryDate</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">.</span><span class="nf">AddYears</span><span class="p">(</span><span class="m">2</span><span class="p">)</span>
                         <span class="p">}</span>
                         <span class="p">);</span>
                    <span class="n">context</span><span class="p">.</span><span class="nf">SaveChanges</span><span class="p">();</span>
                <span class="p">}</span>

                <span class="k">if</span> <span class="p">(!</span><span class="n">context</span><span class="p">.</span><span class="n">Categories</span><span class="p">.</span><span class="nf">Any</span><span class="p">())</span>
                <span class="p">{</span>
                    <span class="n">context</span><span class="p">.</span><span class="n">Categories</span><span class="p">.</span><span class="nf">AddRange</span><span class="p">(</span>
                        <span class="k">new</span> <span class="n">Category</span>
                        <span class="p">{</span>
                            <span class="n">Name</span> <span class="p">=</span> <span class="s">"Beverages"</span><span class="p">,</span>
                            <span class="n">DisplayName</span> <span class="p">=</span> <span class="s">"Beverages"</span>
                        <span class="p">},</span>
                        <span class="k">new</span> <span class="n">Category</span>
                        <span class="p">{</span>
                            <span class="n">Name</span> <span class="p">=</span> <span class="s">"Grossery"</span><span class="p">,</span>
                            <span class="n">DisplayName</span> <span class="p">=</span> <span class="s">"Grossery"</span>
                        <span class="p">});</span>
                    <span class="n">context</span><span class="p">.</span><span class="nf">SaveChanges</span><span class="p">();</span>
                <span class="p">}</span>


            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Modify Program.cs file to configure in memory database and seed data as follows.</li>
</ul>

<p><strong>Program.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//using Microsoft.AspNetCore.Http.Connections;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Product.API.Db</span><span class="p">;</span>

<span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="n">WebApplication</span><span class="p">.</span><span class="nf">CreateBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>

<span class="c1">// Add services to the container.</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddDbContext</span><span class="p">&lt;</span><span class="n">ProductContext</span><span class="p">&gt;(</span><span class="n">opt</span> <span class="p">=&gt;</span> <span class="n">opt</span><span class="p">.</span><span class="nf">UseInMemoryDatabase</span><span class="p">(</span><span class="s">"ProductDB"</span><span class="p">));</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">();</span>

<span class="c1">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddEndpointsApiExplorer</span><span class="p">();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddSwaggerGen</span><span class="p">();</span>

<span class="kt">var</span> <span class="n">app</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

<span class="c1">//For seeding data</span>
<span class="n">SeedGenerator</span><span class="p">.</span><span class="nf">SeedData</span><span class="p">(</span><span class="n">app</span><span class="p">);</span>

<span class="c1">// Configure the HTTP request pipeline.</span>
<span class="k">if</span> <span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">Environment</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
<span class="p">{</span>
<span class="n">app</span><span class="p">.</span><span class="nf">UseSwagger</span><span class="p">();</span>
<span class="n">app</span><span class="p">.</span><span class="nf">UseSwaggerUI</span><span class="p">();</span>

    <span class="c1">// Enable CORS</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseCors</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span>
    <span class="p">.</span><span class="nf">AllowAnyMethod</span><span class="p">()</span>
    <span class="p">.</span><span class="nf">AllowAnyHeader</span><span class="p">()</span>
    <span class="p">.</span><span class="nf">SetIsOriginAllowed</span><span class="p">(</span><span class="n">origin</span> <span class="p">=&gt;</span> <span class="k">true</span><span class="p">)</span> <span class="c1">// allow any origin</span>
    <span class="p">.</span><span class="nf">AllowCredentials</span><span class="p">());</span> <span class="c1">// allow credentials</span>

<span class="p">}</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseHttpsRedirection</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseAuthorization</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseRouting</span><span class="p">();</span>
<span class="n">app</span><span class="p">.</span><span class="nf">MapControllers</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>

</code></pre></div></div>

<ul>
  <li>Create two controller class name ProductsController and CategoriesController in Controllers folder</li>
</ul>

<p><strong>ProductsController.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Product.API.Db</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Product.API.Controllers</span>
<span class="p">{</span>
<span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
<span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
<span class="k">public</span> <span class="k">class</span> <span class="nc">ProductsController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
<span class="p">{</span>
<span class="k">private</span> <span class="k">readonly</span> <span class="n">ProductContext</span> <span class="err">\</span><span class="n">_context</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">ProductsController</span><span class="p">(</span><span class="n">ProductContext</span> <span class="n">context</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_context</span> <span class="p">=</span> <span class="n">context</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/Products</span>
        <span class="p">[</span><span class="n">HttpGet</span><span class="p">]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">.</span><span class="n">API</span><span class="p">.</span><span class="n">Model</span><span class="p">.</span><span class="n">Product</span><span class="p">&gt;&gt;&gt;</span> <span class="nf">GetProducts</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Products</span><span class="p">.</span><span class="nf">ToListAsync</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/Products/5</span>
        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">.</span><span class="n">API</span><span class="p">.</span><span class="n">Model</span><span class="p">.</span><span class="n">Product</span><span class="p">&gt;&gt;</span> <span class="nf">GetProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">product</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Products</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">product</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="n">product</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// PUT: api/Products/5</span>
        <span class="c1">// To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754</span>
        <span class="p">[</span><span class="nf">HttpPut</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">PutProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="n">Product</span><span class="p">.</span><span class="n">API</span><span class="p">.</span><span class="n">Model</span><span class="p">.</span><span class="n">Product</span> <span class="n">product</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">id</span> <span class="p">!=</span> <span class="n">product</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">_context</span><span class="p">.</span><span class="nf">Entry</span><span class="p">(</span><span class="n">product</span><span class="p">).</span><span class="n">State</span> <span class="p">=</span> <span class="n">EntityState</span><span class="p">.</span><span class="n">Modified</span><span class="p">;</span>

            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">DbUpdateConcurrencyException</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(!</span><span class="nf">ProductExists</span><span class="p">(</span><span class="n">id</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
                <span class="p">}</span>
                <span class="k">else</span>
                <span class="p">{</span>
                    <span class="k">throw</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// POST: api/Products</span>
        <span class="c1">// To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754</span>
        <span class="p">[</span><span class="n">HttpPost</span><span class="p">]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">.</span><span class="n">API</span><span class="p">.</span><span class="n">Model</span><span class="p">.</span><span class="n">Product</span><span class="p">&gt;&gt;</span> <span class="nf">PostProduct</span><span class="p">(</span><span class="n">Product</span><span class="p">.</span><span class="n">API</span><span class="p">.</span><span class="n">Model</span><span class="p">.</span><span class="n">Product</span> <span class="n">product</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_context</span><span class="p">.</span><span class="n">Products</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">product</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>

            <span class="k">return</span> <span class="nf">CreatedAtAction</span><span class="p">(</span><span class="s">"GetProduct"</span><span class="p">,</span> <span class="k">new</span> <span class="p">{</span> <span class="n">id</span> <span class="p">=</span> <span class="n">product</span><span class="p">.</span><span class="n">Id</span> <span class="p">},</span> <span class="n">product</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">// DELETE: api/Products/5</span>
        <span class="p">[</span><span class="nf">HttpDelete</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">DeleteProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">product</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Products</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">product</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">_context</span><span class="p">.</span><span class="n">Products</span><span class="p">.</span><span class="nf">Remove</span><span class="p">(</span><span class="n">product</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>

            <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="kt">bool</span> <span class="nf">ProductExists</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">_context</span><span class="p">.</span><span class="n">Products</span><span class="p">.</span><span class="nf">Any</span><span class="p">(</span><span class="n">e</span> <span class="p">=&gt;</span> <span class="n">e</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">id</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

<span class="p">}</span>
</code></pre></div></div>

<p><strong>CategoriesController.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Product.API.Db</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Product.API.Model</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Product.API.Controllers</span>
<span class="p">{</span>
<span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
<span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
<span class="k">public</span> <span class="k">class</span> <span class="nc">CategoriesController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
<span class="p">{</span>
<span class="k">private</span> <span class="k">readonly</span> <span class="n">ProductContext</span> <span class="err">\</span><span class="n">_context</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">CategoriesController</span><span class="p">(</span><span class="n">ProductContext</span> <span class="n">context</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_context</span> <span class="p">=</span> <span class="n">context</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/Categories</span>
        <span class="p">[</span><span class="n">HttpGet</span><span class="p">]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Category</span><span class="p">&gt;&gt;&gt;</span> <span class="nf">GetCategories</span><span class="p">()</span>
        <span class="p">{</span>
          <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Categories</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
          <span class="p">{</span>
              <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
          <span class="p">}</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Categories</span><span class="p">.</span><span class="nf">ToListAsync</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/Categories/5</span>
        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">Category</span><span class="p">&gt;&gt;</span> <span class="nf">GetCategory</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
          <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Categories</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
          <span class="p">{</span>
              <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
          <span class="p">}</span>
            <span class="kt">var</span> <span class="n">category</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Categories</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">category</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="n">category</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// PUT: api/Categories/5</span>
        <span class="c1">// To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754</span>
        <span class="p">[</span><span class="nf">HttpPut</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">PutCategory</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="n">Category</span> <span class="n">category</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">id</span> <span class="p">!=</span> <span class="n">category</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">_context</span><span class="p">.</span><span class="nf">Entry</span><span class="p">(</span><span class="n">category</span><span class="p">).</span><span class="n">State</span> <span class="p">=</span> <span class="n">EntityState</span><span class="p">.</span><span class="n">Modified</span><span class="p">;</span>

            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">DbUpdateConcurrencyException</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(!</span><span class="nf">CategoryExists</span><span class="p">(</span><span class="n">id</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
                <span class="p">}</span>
                <span class="k">else</span>
                <span class="p">{</span>
                    <span class="k">throw</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// POST: api/Categories</span>
        <span class="c1">// To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754</span>
        <span class="p">[</span><span class="n">HttpPost</span><span class="p">]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">Category</span><span class="p">&gt;&gt;</span> <span class="nf">PostCategory</span><span class="p">(</span><span class="n">Category</span> <span class="n">category</span><span class="p">)</span>
        <span class="p">{</span>
          <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Categories</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
          <span class="p">{</span>
              <span class="k">return</span> <span class="nf">Problem</span><span class="p">(</span><span class="s">"Entity set 'AdminContext.Categories'  is null."</span><span class="p">);</span>
          <span class="p">}</span>
            <span class="n">_context</span><span class="p">.</span><span class="n">Categories</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">category</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>

            <span class="k">return</span> <span class="nf">CreatedAtAction</span><span class="p">(</span><span class="s">"GetCategory"</span><span class="p">,</span> <span class="k">new</span> <span class="p">{</span> <span class="n">id</span> <span class="p">=</span> <span class="n">category</span><span class="p">.</span><span class="n">Id</span> <span class="p">},</span> <span class="n">category</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">// DELETE: api/Categories/5</span>
        <span class="p">[</span><span class="nf">HttpDelete</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">DeleteCategory</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Categories</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="kt">var</span> <span class="n">category</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Categories</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">category</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">_context</span><span class="p">.</span><span class="n">Categories</span><span class="p">.</span><span class="nf">Remove</span><span class="p">(</span><span class="n">category</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>

            <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="kt">bool</span> <span class="nf">CategoryExists</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Categories</span><span class="p">?.</span><span class="nf">Any</span><span class="p">(</span><span class="n">e</span> <span class="p">=&gt;</span> <span class="n">e</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">id</span><span class="p">)).</span><span class="nf">GetValueOrDefault</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>

<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Now run the application and access the endpoints using swagger.</li>
</ul>

<p><strong>Step 4: Configure product-frontend React Project</strong></p>

<p>Now we are going to configure product-frontend project to use inside our Master Project as a service.</p>

<ul>
  <li>Open the Terminal and install below libraries with below command.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">npm</span> <span class="nf">install</span> <span class="nf">react-router-dom</span>
<span class="nf">npm</span> <span class="nf">install</span> <span class="nf">react-bootstrap</span> <span class="nf">bootstrap@5.1.3</span>
<span class="nf">npm</span> <span class="nf">install</span> <span class="nf">react-app-rewired</span>
<span class="nf">npm</span> <span class="nf">install</span> <span class="nf">axios</span> <span class="nf">history</span>
<span class="nf">npm</span> <span class="nf">install</span> <span class="nf">react-data-table-component</span>
<span class="nf">npm</span> <span class="nf">install</span> <span class="nf">@mui</span><span class="nv">/material</span> <span class="nf">@emotion</span><span class="nv">/react</span> <span class="nf">@emotion</span><span class="nv">/styled</span>
<span class="nf">npm</span> <span class="nf">install</span> <span class="nf">@mui</span><span class="nv">/material</span> <span class="nf">@mui</span><span class="nv">/styled-engine-sc</span> <span class="nf">styled-components</span>
<span class="nf">npm</span> <span class="nf">install</span> <span class="nf">@mui</span><span class="nv">/icons-material</span>

</code></pre></div></div>

<ul>
  <li>Inside the src directory, create a folder and name the folder utils.</li>
  <li>Inside utils folder create a file and name the file BaseUrl.js</li>
  <li>Write below code because our product api is running on 7155 port</li>
</ul>

<p><strong>BaseUrl.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">const</span> <span class="nx">Base_URL_Product</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">https://localhost:7155/api</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>Create another js file inside the utils directory and name the file Conversions.js, write below code.</li>
</ul>

<p><strong>Conversions.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">const</span> <span class="nx">convertDateFormat</span> <span class="o">=</span> <span class="p">(</span><span class="nx">date</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">convertedDate</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Date</span><span class="p">(</span><span class="nx">date</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">convertedDate</span><span class="p">.</span><span class="nf">toDateString</span><span class="p">();</span>
<span class="p">};</span>
</code></pre></div></div>

<ul>
  <li>Inside the src directory, create a folder and name the folder services.</li>
  <li>Inside services folder create a file and name the file ProductService.js</li>
  <li>Write below code in src-&gt;services-&gt; ProductService.js</li>
</ul>

<p><strong>ProductService.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">axios</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">axios</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Base_URL_Product</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../utils/BaseUrl</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">GetAllProducts</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="nx">axios</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="nx">Base_URL_Product</span> <span class="o">+</span> <span class="s2">`/Products`</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">response</span><span class="dl">"</span><span class="p">,</span> <span class="nx">response</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">response</span><span class="p">;</span>
  <span class="p">}</span> <span class="k">catch </span><span class="p">(</span><span class="nx">er</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">throw</span> <span class="nx">er</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">};</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">GetAllCategory</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="nx">axios</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="nx">Base_URL_Product</span> <span class="o">+</span> <span class="s2">`/Categories`</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">response</span><span class="p">;</span>
  <span class="p">}</span> <span class="k">catch </span><span class="p">(</span><span class="nx">er</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">throw</span> <span class="nx">er</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<ul>
  <li>Inside the src directory, create a folder and name the folder components.</li>
  <li>Inside components folder create another folder and name the folder ProductComponent.</li>
  <li>Inside ProductComponent folder create a file and name the file DataTableComponent.js</li>
  <li>Write below code in src -&gt; components -&gt; ProductComponent -&gt; DataTableComponent.js</li>
</ul>

<p><strong>DataTableComponent.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Card</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@mui/material</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">SortIcon</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@mui/icons-material/ArrowDownward</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">DataTable</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-data-table-component</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">convertDateFormat</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../../utils/Conversions</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">DataTableComponent</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">data</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">columns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
      <span class="na">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
      <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Name</span><span class="dl">"</span><span class="p">,</span>
      <span class="na">selector</span><span class="p">:</span> <span class="p">(</span><span class="nx">row</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">row</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span>
      <span class="na">sortable</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">reorder</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="p">{</span>
      <span class="na">id</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
      <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Short Name</span><span class="dl">"</span><span class="p">,</span>
      <span class="na">selector</span><span class="p">:</span> <span class="p">(</span><span class="nx">row</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">row</span><span class="p">.</span><span class="nx">shortName</span><span class="p">,</span>
      <span class="na">sortable</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">right</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">reorder</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="p">{</span>
      <span class="na">id</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
      <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Price</span><span class="dl">"</span><span class="p">,</span>
      <span class="na">selector</span><span class="p">:</span> <span class="p">(</span><span class="nx">row</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">row</span><span class="p">.</span><span class="nx">price</span><span class="p">,</span>
      <span class="na">sortable</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">right</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">reorder</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="p">},</span>

    <span class="p">{</span>
      <span class="na">id</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span>
      <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Manufacture Date</span><span class="dl">"</span><span class="p">,</span>
      <span class="na">selector</span><span class="p">:</span> <span class="p">(</span><span class="nx">row</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nf">convertDateFormat</span><span class="p">(</span><span class="nx">row</span><span class="p">.</span><span class="nx">manufactureDate</span><span class="p">),</span>
      <span class="na">sortable</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">right</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">reorder</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="p">{</span>
      <span class="na">id</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
      <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Expiry Date</span><span class="dl">"</span><span class="p">,</span>
      <span class="na">selector</span><span class="p">:</span> <span class="p">(</span><span class="nx">row</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nf">convertDateFormat</span><span class="p">(</span><span class="nx">row</span><span class="p">.</span><span class="nx">expiryDate</span><span class="p">),</span>
      <span class="na">sortable</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">right</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">reorder</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="p">},</span>
  <span class="p">];</span>
  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">data-table</span><span class="dl">"</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">Card</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">DataTable</span>
          <span class="nx">title</span><span class="o">=</span><span class="dl">"</span><span class="s2">Product List</span><span class="dl">"</span>
          <span class="nx">columns</span><span class="o">=</span><span class="p">{</span><span class="nx">columns</span><span class="p">}</span>
          <span class="nx">data</span><span class="o">=</span><span class="p">{</span><span class="nx">data</span><span class="p">}</span>
          <span class="nx">defaultSortFieldId</span><span class="o">=</span><span class="p">{</span><span class="mi">4</span><span class="p">}</span>
          <span class="nx">sortIcon</span><span class="o">=</span><span class="p">{</span><span class="o">&lt;</span><span class="nx">SortIcon</span> <span class="o">/&gt;</span><span class="p">}</span>
          <span class="nx">pagination</span>
          <span class="nx">selectableRows</span>
          <span class="nx">paginationPerPage</span><span class="o">=</span><span class="p">{</span><span class="mi">5</span><span class="p">}</span>
          <span class="nx">paginationRowsPerPageOptions</span><span class="o">=</span><span class="p">{[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">20</span><span class="p">]}</span>
        <span class="sr">/</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="sr">/Card</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">DataTableComponent</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>Now Inside ProductComponent folder create another file and name the file ProductListComponent.js</li>
  <li>Write below code in src-&gt;components-&gt;ProductComponent-&gt; ProductListComponent.js</li>
</ul>

<p><strong>ProductListComponent.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">useEffect</span><span class="p">,</span> <span class="nx">useState</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">GetAllProducts</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../../services/ProductService</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">DataTableComponent</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./DataTableComponent</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">ProductListComponent</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">state</span><span class="p">,</span> <span class="nx">setState</span><span class="p">]</span> <span class="o">=</span> <span class="nf">useState</span><span class="p">([]);</span>

  <span class="nf">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nc">GetAllProducts</span><span class="p">().</span><span class="nf">then</span><span class="p">((</span><span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">res</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
      <span class="nf">setState</span><span class="p">(</span><span class="nx">res</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
    <span class="p">});</span>
  <span class="p">},</span> <span class="p">[]);</span>

  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">style</span><span class="o">=&gt;</span>
      <span class="o">&lt;</span><span class="nx">DataTableComponent</span> <span class="nx">data</span><span class="o">=</span><span class="p">{</span><span class="nx">state</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">ProductListComponent</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>Inside components folder create another folder and name the folder CategoryComponent.</li>
  <li>Inside CategoryComponent folder create a file and name the file DataTableComponent.js</li>
  <li>Write below code in src-&gt;components-&gt; CategoryComponent-&gt; DataTableComponent.js
DataTableComponent.js</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Card</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@mui/material</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">SortIcon</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@mui/icons-material/ArrowDownward</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">DataTable</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-data-table-component</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">DataTableComponent</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">data</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">columns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
      <span class="na">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
      <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Name</span><span class="dl">"</span><span class="p">,</span>
      <span class="na">selector</span><span class="p">:</span> <span class="p">(</span><span class="nx">row</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">row</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span>
      <span class="na">sortable</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">reorder</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="p">{</span>
      <span class="na">id</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
      <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Display Name</span><span class="dl">"</span><span class="p">,</span>
      <span class="na">selector</span><span class="p">:</span> <span class="p">(</span><span class="nx">row</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">row</span><span class="p">.</span><span class="nx">displayName</span><span class="p">,</span>
      <span class="na">sortable</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">right</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">reorder</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="p">},</span>
  <span class="p">];</span>
  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">data-table</span><span class="dl">"</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">Card</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">DataTable</span>
          <span class="nx">title</span><span class="o">=</span><span class="dl">"</span><span class="s2">Product Category List</span><span class="dl">"</span>
          <span class="nx">columns</span><span class="o">=</span><span class="p">{</span><span class="nx">columns</span><span class="p">}</span>
          <span class="nx">data</span><span class="o">=</span><span class="p">{</span><span class="nx">data</span><span class="p">}</span>
          <span class="nx">defaultSortFieldId</span><span class="o">=</span><span class="p">{</span><span class="mi">4</span><span class="p">}</span>
          <span class="nx">sortIcon</span><span class="o">=</span><span class="p">{</span><span class="o">&lt;</span><span class="nx">SortIcon</span> <span class="o">/&gt;</span><span class="p">}</span>
          <span class="nx">pagination</span>
          <span class="nx">selectableRows</span>
        <span class="o">/&gt;</span>
      <span class="o">&lt;</span><span class="sr">/Card</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">DataTableComponent</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>Inside CategoryComponentfolder create a file and name the file CategoryListComponent.js</li>
  <li>Write below code in src-&gt;components-&gt; CategoryComponent-&gt;CategoryListComponent.js
CategoryListComponent.js</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">useEffect</span><span class="p">,</span> <span class="nx">useState</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">GetAllCategory</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../../services/ProductService</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">DataTableComponent</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./DataTableComponent</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">CategoryListComponent</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">state</span><span class="p">,</span> <span class="nx">setState</span><span class="p">]</span> <span class="o">=</span> <span class="nf">useState</span><span class="p">([]);</span>

  <span class="nf">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nc">GetAllCategory</span><span class="p">().</span><span class="nf">then</span><span class="p">((</span><span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">category</span><span class="dl">"</span><span class="p">,</span> <span class="nx">res</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
      <span class="nf">setState</span><span class="p">(</span><span class="nx">res</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
    <span class="p">});</span>
  <span class="p">},</span> <span class="p">[]);</span>

  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">style</span><span class="o">=&gt;</span>
      <span class="o">&lt;</span><span class="nx">DataTableComponent</span> <span class="nx">data</span><span class="o">=</span><span class="p">{</span><span class="nx">state</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">CategoryListComponent</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>Inside the src directory, create a folder and name the folder pages.</li>
  <li>Inside pages folder create a js file and name the file ProductsPage.js and write below code.</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">ProductListComponent</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../components/ProductComponent/ProductListComponent</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">ProductsPage</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;&gt;</span>
      <span class="o">&lt;</span><span class="nx">ProductListComponent</span> <span class="o">/&gt;</span>
    <span class="o">&lt;</span><span class="sr">/</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">ProductsPage</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>Inside pages folder create a js file and name the file CategoriesPage.js and write below code.</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">GroupTypesListComponent</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../components/CategoryComponent/CategoryListComponent</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">CategoriesPage</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;&gt;</span>
      <span class="o">&lt;</span><span class="nx">GroupTypesListComponent</span> <span class="o">/&gt;</span>
    <span class="o">&lt;</span><span class="sr">/</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">CategoriesPage</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>Open App.css file and replace with below code.</li>
</ul>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.data-table</span> <span class="p">{</span>
  <span class="nl">box-shadow</span><span class="p">:</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0.25</span><span class="p">)</span> <span class="m">5px</span> <span class="m">5px</span> <span class="m">15px</span> <span class="m">0px</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>Open App.js file and replace with below code.</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">logo</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./logo.svg</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="dl">"</span><span class="s2">./App.css</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">BrowserRouter</span><span class="p">,</span> <span class="nx">Routes</span><span class="p">,</span> <span class="nx">Route</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-router-dom</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">ProductsPage</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./pages/ProductsPage</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">CategoriesPage</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./pages/CategoriesPage</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">createBrowserHistory</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">history</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">defaultHistory</span> <span class="o">=</span> <span class="nf">createBrowserHistory</span><span class="p">();</span>

<span class="kd">function</span> <span class="nf">App</span><span class="p">({</span> <span class="nx">history</span> <span class="o">=</span> <span class="nx">defaultHistory</span> <span class="p">})</span> <span class="p">{</span>
  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">BrowserRouter</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">Routes</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="dl">"</span><span class="s2">/</span><span class="dl">"</span> <span class="nx">element</span><span class="o">=</span><span class="p">{</span><span class="o">&lt;</span><span class="nx">ProductsPage</span> <span class="o">/&gt;</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="dl">"</span><span class="s2">/product-list</span><span class="dl">"</span> <span class="nx">element</span><span class="o">=</span><span class="p">{</span><span class="o">&lt;</span><span class="nx">ProductsPage</span> <span class="o">/&gt;</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="dl">"</span><span class="s2">/product-categories</span><span class="dl">"</span> <span class="nx">element</span><span class="o">=</span><span class="p">{</span><span class="o">&lt;</span><span class="nx">CategoriesPage</span> <span class="o">/&gt;</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="sr">/Routes</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/BrowserRouter</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">App</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>Open index.js file and replace with below code.</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">ReactDOM</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-dom/client</span><span class="dl">"</span><span class="p">;</span>
<span class="c1">//import ReactDOM from "react-dom";</span>
<span class="k">import</span> <span class="dl">"</span><span class="s2">./index.css</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">App</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./App</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">reportWebVitals</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./reportWebVitals</span><span class="dl">"</span><span class="p">;</span>

<span class="nb">window</span><span class="p">.</span><span class="nx">renderProduct</span> <span class="o">=</span> <span class="p">(</span><span class="nx">masterId</span><span class="p">,</span> <span class="nx">history</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">root</span> <span class="o">=</span> <span class="nx">ReactDOM</span><span class="p">.</span><span class="nf">createRoot</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="nx">masterId</span><span class="p">));</span>

  <span class="nx">root</span><span class="p">.</span><span class="nf">render</span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">React</span><span class="p">.</span><span class="nx">StrictMode</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">App</span> <span class="nx">history</span><span class="o">=</span><span class="p">{</span><span class="nx">history</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/React.StrictMode</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">};</span>

<span class="nb">window</span><span class="p">.</span><span class="nx">unmountProduct</span> <span class="o">=</span> <span class="p">(</span><span class="nx">masterId</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">root</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="nx">masterId</span><span class="p">);</span>
  <span class="c1">//root.unmount();</span>
  <span class="c1">//root.remove();</span>
<span class="p">};</span>

<span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">Product-master</span><span class="dl">"</span><span class="p">))</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">root</span> <span class="o">=</span> <span class="nx">ReactDOM</span><span class="p">.</span><span class="nf">createRoot</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">root</span><span class="dl">"</span><span class="p">));</span>
  <span class="nx">root</span><span class="p">.</span><span class="nf">render</span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">React</span><span class="p">.</span><span class="nx">StrictMode</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">App</span> <span class="o">/&gt;</span>
    <span class="o">&lt;</span><span class="sr">/React.StrictMode</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>

<span class="c1">// If you want to start measuring performance in your app, pass a function</span>
<span class="c1">// to log results (for example: reportWebVitals(console.log))</span>
<span class="c1">// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals</span>
<span class="nf">reportWebVitals</span><span class="p">();</span>
</code></pre></div></div>

<ul>
  <li>Create another file inside src folder, name the file setupProxy.js and write below code for cors policy.</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">(</span><span class="nx">app</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">app</span><span class="p">.</span><span class="nf">use</span><span class="p">((</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">res</span><span class="p">.</span><span class="nf">header</span><span class="p">(</span><span class="dl">"</span><span class="s2">Access-Control-Allow-Origin</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">*</span><span class="dl">"</span><span class="p">);</span>
    <span class="nf">next</span><span class="p">();</span>
  <span class="p">});</span>
<span class="p">};</span>
</code></pre></div></div>

<ul>
  <li>Create a file inside root directory and name the file config-overrides.js and write below code. Below code will override webpack of react.</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">webpack</span><span class="p">:</span> <span class="p">(</span><span class="nx">config</span><span class="p">,</span> <span class="nx">env</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">config</span><span class="p">.</span><span class="nx">optimization</span><span class="p">.</span><span class="nx">runtimeChunk</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
    <span class="nx">config</span><span class="p">.</span><span class="nx">optimization</span><span class="p">.</span><span class="nx">splitChunks</span> <span class="o">=</span> <span class="p">{</span>
      <span class="na">cacheGroups</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">default</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
      <span class="p">},</span>
    <span class="p">};</span>

    <span class="nx">config</span><span class="p">.</span><span class="nx">output</span><span class="p">.</span><span class="nx">filename</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">static/js/[name].js</span><span class="dl">"</span><span class="p">;</span>

    <span class="nx">config</span><span class="p">.</span><span class="nx">plugins</span><span class="p">[</span><span class="mi">5</span><span class="p">].</span><span class="nx">options</span><span class="p">.</span><span class="nx">filename</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">static/css/[name].css</span><span class="dl">"</span><span class="p">;</span>
    <span class="nx">config</span><span class="p">.</span><span class="nx">plugins</span><span class="p">[</span><span class="mi">5</span><span class="p">].</span><span class="nx">options</span><span class="p">.</span><span class="nx">moduleFilename</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="dl">"</span><span class="s2">static/css/main.css</span><span class="dl">"</span><span class="p">;</span>
    <span class="k">return</span> <span class="nx">config</span><span class="p">;</span>
  <span class="p">},</span>
<span class="p">};</span>
</code></pre></div></div>

<ul>
  <li>Open package.json and replace “scripts” section with below code. This project going to be open on 3002 port.</li>
</ul>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="nl">"start"</span><span class="p">:</span><span class="w"> </span><span class="s2">"set PORT=3002 &amp;&amp; react-app-rewired start"</span><span class="p">,</span><span class="w">
</span><span class="nl">"build"</span><span class="p">:</span><span class="w"> </span><span class="s2">"react-app-rewired build"</span><span class="p">,</span><span class="w">
</span><span class="nl">"test"</span><span class="p">:</span><span class="w"> </span><span class="s2">"react-app-rewired test"</span><span class="p">,</span><span class="w">
</span><span class="nl">"eject"</span><span class="p">:</span><span class="w"> </span><span class="s2">"react-scripts eject"</span><span class="w">
</span><span class="p">}</span><span class="err">,</span><span class="w">

</span></code></pre></div></div>

<ul>
  <li>Run Product.API back end application</li>
  <li>Go to the directory of product-fronend and run the below command</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">npm</span> <span class="nf">start</span>
</code></pre></div></div>

<ul>
  <li>Browser output should look like below.</li>
</ul>

<p><img src="/assets/images/posts/2023/mfe-03.png" alt="" /></p>

<p>• If you try using this url http://localhost:3002/product-categories. You will get the following output.</p>

<p><img src="/assets/images/posts/2023/mfe-04.png" alt="" /></p>

<ul>
  <li>If You see the above output, it means it works fine.</li>
</ul>

<p><strong>Step 5: Create Customers.API Backend Project</strong></p>

<ul>
  <li>Create a web api project name Customers.API</li>
  <li>Install following Nuget packages in the project</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nf">Microsoft.EntityFrameworkCore</span>
  <span class="nf">Microsoft.EntityFrameworkCore.InMemory</span>
  <span class="nf">Microsoft.EntityFrameworkCore.SqlServer</span>
  <span class="nf">Microsoft.EntityFrameworkCore.Tools</span>
  <span class="nf">Microsoft.VisualStudio.Web.CodeGeneration.Design</span>
</code></pre></div></div>

<ul>
  <li>Create following Customer model class in Model folder</li>
</ul>

<p><strong>Customer.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">namespace</span> <span class="nn">Customers.API.Model</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Customer</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span><span class="p">?</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span><span class="p">?</span> <span class="n">PhoneNo</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;}</span>
        <span class="k">public</span> <span class="kt">string</span><span class="p">?</span> <span class="n">EmailAddress</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;}</span>
        <span class="k">public</span> <span class="n">DateTime</span><span class="p">?</span> <span class="n">DOB</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>


</code></pre></div></div>

<ul>
  <li>Add following DbContext and SeedGenerator class in Db folder</li>
</ul>

<p><strong>CustomersContext.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Customers.API.Model</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Customers.API.Db</span>
<span class="p">{</span>
<span class="k">public</span> <span class="k">class</span> <span class="nc">CustomersContext</span> <span class="p">:</span> <span class="n">DbContext</span>
<span class="p">{</span>
<span class="k">public</span> <span class="nf">CustomersContext</span><span class="p">(</span><span class="n">DbContextOptions</span><span class="p">&lt;</span><span class="n">CustomersContext</span><span class="p">&gt;</span> <span class="n">options</span><span class="p">)</span>
<span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
<span class="p">{</span>

        <span class="p">}</span>
        <span class="k">public</span> <span class="n">DbSet</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="n">Customers</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>

<span class="p">}</span>

</code></pre></div></div>

<p><strong>SeedGenerator.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Customers.API.Model</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Customers.API.Db</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">SeedGenerator</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">SeedData</span><span class="p">(</span><span class="n">WebApplication</span> <span class="n">app</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">scope</span> <span class="p">=</span> <span class="n">app</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">CreateScope</span><span class="p">())</span>
            <span class="p">{</span>
                <span class="kt">var</span> <span class="n">context</span> <span class="p">=</span> <span class="n">scope</span><span class="p">.</span><span class="n">ServiceProvider</span><span class="p">.</span><span class="n">GetService</span><span class="p">&lt;</span><span class="n">CustomersContext</span><span class="p">&gt;();</span>


                <span class="k">if</span> <span class="p">(!</span><span class="n">context</span><span class="p">.</span><span class="n">Customers</span><span class="p">.</span><span class="nf">Any</span><span class="p">())</span>
                <span class="p">{</span>
                    <span class="n">context</span><span class="p">.</span><span class="n">Customers</span><span class="p">.</span><span class="nf">AddRange</span><span class="p">(</span>
                        <span class="k">new</span> <span class="n">Customer</span>
                        <span class="p">{</span>
                            <span class="n">Name</span> <span class="p">=</span> <span class="s">"Scott Allen"</span><span class="p">,</span>
                            <span class="n">EmailAddress</span> <span class="p">=</span> <span class="s">"scott@gmail.com"</span><span class="p">,</span>
                            <span class="n">PhoneNo</span> <span class="p">=</span> <span class="s">"5068792493"</span><span class="p">,</span>
                            <span class="n">DOB</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">.</span><span class="nf">AddYears</span><span class="p">(-</span><span class="m">50</span><span class="p">),</span>
                        <span class="p">},</span>
                        <span class="k">new</span> <span class="n">Customer</span>
                        <span class="p">{</span>
                            <span class="n">Name</span> <span class="p">=</span> <span class="s">"Graham Bell"</span><span class="p">,</span>
                            <span class="n">EmailAddress</span> <span class="p">=</span> <span class="s">"bell@outlook.com"</span><span class="p">,</span>
                            <span class="n">PhoneNo</span> <span class="p">=</span> <span class="s">"5068792494"</span><span class="p">,</span>
                            <span class="n">DOB</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">.</span><span class="nf">AddYears</span><span class="p">(-</span><span class="m">54</span><span class="p">),</span>
                        <span class="p">},</span>
                        <span class="k">new</span> <span class="n">Customer</span>
                        <span class="p">{</span>
                            <span class="n">Name</span> <span class="p">=</span> <span class="s">"Adam Smith"</span><span class="p">,</span>
                            <span class="n">EmailAddress</span> <span class="p">=</span> <span class="s">"smith@yahoo.com"</span><span class="p">,</span>
                            <span class="n">PhoneNo</span> <span class="p">=</span> <span class="s">"5068792494"</span><span class="p">,</span>
                            <span class="n">DOB</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">.</span><span class="nf">AddYears</span><span class="p">(-</span><span class="m">54</span><span class="p">),</span>
                        <span class="p">});</span> <span class="p">;</span>
                    <span class="n">context</span><span class="p">.</span><span class="nf">SaveChanges</span><span class="p">();</span>
                <span class="p">}</span>

            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Modify Program.cs file to configure in memory database and seed data as follows.
<strong>Program.cs</strong></li>
</ul>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//using Microsoft.AspNetCore.Http.Connections;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Product.API.Db</span><span class="p">;</span>

<span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="n">WebApplication</span><span class="p">.</span><span class="nf">CreateBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>

<span class="c1">// Add services to the container.</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddDbContext</span><span class="p">&lt;</span><span class="n">ProductContext</span><span class="p">&gt;(</span><span class="n">opt</span> <span class="p">=&gt;</span> <span class="n">opt</span><span class="p">.</span><span class="nf">UseInMemoryDatabase</span><span class="p">(</span><span class="s">"ProductDB"</span><span class="p">));</span>


<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">();</span>


<span class="c1">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddEndpointsApiExplorer</span><span class="p">();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddSwaggerGen</span><span class="p">();</span>

<span class="kt">var</span> <span class="n">app</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

<span class="c1">//For seeding data</span>
<span class="n">SeedGenerator</span><span class="p">.</span><span class="nf">SeedData</span><span class="p">(</span><span class="n">app</span><span class="p">);</span>

<span class="c1">// Configure the HTTP request pipeline.</span>
<span class="k">if</span> <span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">Environment</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
<span class="p">{</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwagger</span><span class="p">();</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwaggerUI</span><span class="p">();</span>

    <span class="c1">// Enable CORS</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseCors</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span>
    <span class="p">.</span><span class="nf">AllowAnyMethod</span><span class="p">()</span>
    <span class="p">.</span><span class="nf">AllowAnyHeader</span><span class="p">()</span>
    <span class="p">.</span><span class="nf">SetIsOriginAllowed</span><span class="p">(</span><span class="n">origin</span> <span class="p">=&gt;</span> <span class="k">true</span><span class="p">)</span> <span class="c1">// allow any origin</span>
    <span class="p">.</span><span class="nf">AllowCredentials</span><span class="p">());</span> <span class="c1">// allow credentials</span>
<span class="p">}</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseHttpsRedirection</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseAuthorization</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseRouting</span><span class="p">();</span>
<span class="n">app</span><span class="p">.</span><span class="nf">MapControllers</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>

</code></pre></div></div>

<ul>
  <li>Create two controller class name CustomersController in Controllers folder</li>
</ul>

<p><strong>CustomersController.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Customers.API.Db</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Customers.API.Model</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Customers.API.Controllers</span>
<span class="p">{</span>
<span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
<span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
<span class="k">public</span> <span class="k">class</span> <span class="nc">CustomersController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
<span class="p">{</span>
<span class="k">private</span> <span class="k">readonly</span> <span class="n">CustomersContext</span> <span class="err">\</span><span class="n">_context</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">CustomersController</span><span class="p">(</span><span class="n">CustomersContext</span> <span class="n">context</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_context</span> <span class="p">=</span> <span class="n">context</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/Customers</span>
        <span class="p">[</span><span class="n">HttpGet</span><span class="p">]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;&gt;&gt;</span> <span class="nf">GetCustomers</span><span class="p">()</span>
        <span class="p">{</span>
          <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Customers</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
          <span class="p">{</span>
              <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
          <span class="p">}</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Customers</span><span class="p">.</span><span class="nf">ToListAsync</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/Customers/5</span>
        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;&gt;</span> <span class="nf">GetCustomer</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
          <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Customers</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
          <span class="p">{</span>
              <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
          <span class="p">}</span>
            <span class="kt">var</span> <span class="n">customer</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Customers</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">customer</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="n">customer</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// PUT: api/Customers/5</span>
        <span class="c1">// To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754</span>
        <span class="p">[</span><span class="nf">HttpPut</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">PutCustomer</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="n">Customer</span> <span class="n">customer</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">id</span> <span class="p">!=</span> <span class="n">customer</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">_context</span><span class="p">.</span><span class="nf">Entry</span><span class="p">(</span><span class="n">customer</span><span class="p">).</span><span class="n">State</span> <span class="p">=</span> <span class="n">EntityState</span><span class="p">.</span><span class="n">Modified</span><span class="p">;</span>

            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">DbUpdateConcurrencyException</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(!</span><span class="nf">CustomerExists</span><span class="p">(</span><span class="n">id</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
                <span class="p">}</span>
                <span class="k">else</span>
                <span class="p">{</span>
                    <span class="k">throw</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// POST: api/Customers</span>
        <span class="c1">// To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754</span>
        <span class="p">[</span><span class="n">HttpPost</span><span class="p">]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;&gt;</span> <span class="nf">PostCustomer</span><span class="p">(</span><span class="n">Customer</span> <span class="n">customer</span><span class="p">)</span>
        <span class="p">{</span>
          <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Customers</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
          <span class="p">{</span>
              <span class="k">return</span> <span class="nf">Problem</span><span class="p">(</span><span class="s">"Entity set 'CustomersContext.Customers'  is null."</span><span class="p">);</span>
          <span class="p">}</span>
            <span class="n">_context</span><span class="p">.</span><span class="n">Customers</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">customer</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>

            <span class="k">return</span> <span class="nf">CreatedAtAction</span><span class="p">(</span><span class="s">"GetCustomer"</span><span class="p">,</span> <span class="k">new</span> <span class="p">{</span> <span class="n">id</span> <span class="p">=</span> <span class="n">customer</span><span class="p">.</span><span class="n">Id</span> <span class="p">},</span> <span class="n">customer</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">// DELETE: api/Customers/5</span>
        <span class="p">[</span><span class="nf">HttpDelete</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">DeleteCustomer</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Customers</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="kt">var</span> <span class="n">customer</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Customers</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">customer</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">_context</span><span class="p">.</span><span class="n">Customers</span><span class="p">.</span><span class="nf">Remove</span><span class="p">(</span><span class="n">customer</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>

            <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="kt">bool</span> <span class="nf">CustomerExists</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Customers</span><span class="p">?.</span><span class="nf">Any</span><span class="p">(</span><span class="n">e</span> <span class="p">=&gt;</span> <span class="n">e</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">id</span><span class="p">)).</span><span class="nf">GetValueOrDefault</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>

<span class="p">}</span>

<span class="c1">//using Microsoft.AspNetCore.Http.Connections;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Product.API.Db</span><span class="p">;</span>

<span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="n">WebApplication</span><span class="p">.</span><span class="nf">CreateBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>

<span class="c1">// Add services to the container.</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddDbContext</span><span class="p">&lt;</span><span class="n">ProductContext</span><span class="p">&gt;(</span><span class="n">opt</span> <span class="p">=&gt;</span> <span class="n">opt</span><span class="p">.</span><span class="nf">UseInMemoryDatabase</span><span class="p">(</span><span class="s">"ProductDB"</span><span class="p">));</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">();</span>

<span class="c1">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddEndpointsApiExplorer</span><span class="p">();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddSwaggerGen</span><span class="p">();</span>

<span class="kt">var</span> <span class="n">app</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

<span class="c1">//For seeding data</span>
<span class="n">SeedGenerator</span><span class="p">.</span><span class="nf">SeedData</span><span class="p">(</span><span class="n">app</span><span class="p">);</span>

<span class="c1">// Configure the HTTP request pipeline.</span>
<span class="k">if</span> <span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">Environment</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
<span class="p">{</span>
<span class="n">app</span><span class="p">.</span><span class="nf">UseSwagger</span><span class="p">();</span>
<span class="n">app</span><span class="p">.</span><span class="nf">UseSwaggerUI</span><span class="p">();</span>

    <span class="c1">// Enable CORS</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseCors</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span>
    <span class="p">.</span><span class="nf">AllowAnyMethod</span><span class="p">()</span>
    <span class="p">.</span><span class="nf">AllowAnyHeader</span><span class="p">()</span>
    <span class="p">.</span><span class="nf">SetIsOriginAllowed</span><span class="p">(</span><span class="n">origin</span> <span class="p">=&gt;</span> <span class="k">true</span><span class="p">)</span> <span class="c1">// allow any origin</span>
    <span class="p">.</span><span class="nf">AllowCredentials</span><span class="p">());</span> <span class="c1">// allow credentials</span>

<span class="p">}</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseHttpsRedirection</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseAuthorization</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseRouting</span><span class="p">();</span>
<span class="n">app</span><span class="p">.</span><span class="nf">MapControllers</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>

</code></pre></div></div>

<ul>
  <li>Now run the application and access the endpoints using swagger.</li>
</ul>

<p><strong>Step 6: Configure customer-frontend React Project</strong></p>

<ul>
  <li>Now we are going to configure customer-frontend project to use inside our Master Project as a service.</li>
  <li>Open the Terminal and install below libraries with below command in customer-frontend project</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">npm</span> <span class="nf">install</span> <span class="nf">react-router-dom</span>
<span class="nf">npm</span> <span class="nf">install</span> <span class="nf">react-bootstrap</span> <span class="nf">bootstrap@5.1.3</span>
<span class="nf">npm</span> <span class="nf">install</span> <span class="nf">react-app-rewired</span>
<span class="nf">npm</span> <span class="nf">install</span> <span class="nf">axios</span> <span class="nf">history</span>
<span class="nf">npm</span> <span class="nf">install</span> <span class="nf">react-data-table-component</span>
<span class="nf">npm</span> <span class="nf">install</span> <span class="nf">@mui</span><span class="nv">/material</span> <span class="nf">@emotion</span><span class="nv">/react</span> <span class="nf">@emotion</span><span class="nv">/styled</span>
<span class="nf">npm</span> <span class="nf">install</span> <span class="nf">@mui</span><span class="nv">/material</span> <span class="nf">@mui</span><span class="nv">/styled-engine-sc</span> <span class="nf">styled-components</span>
<span class="nf">npm</span> <span class="nf">install</span> <span class="nf">@mui</span><span class="nv">/icons-material</span>

</code></pre></div></div>

<ul>
  <li>Inside the src directory, create a folder and name the folder utils.</li>
  <li>Inside utils folder create a file and name the file BaseUrl.js</li>
  <li>Write below code in src-&gt;utils-&gt;BaseUrl.js</li>
</ul>

<p><strong>BaseUrl.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">const</span> <span class="nx">Base_URL_Customer</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">https://localhost:7154/api</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>Create another js file inside the utils directory and name the file Conversions.js</li>
  <li>Write below code in src-&gt;utils-&gt; Conversions.js</li>
</ul>

<p><strong>Conversions.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">const</span> <span class="nx">convertDateFormat</span> <span class="o">=</span> <span class="p">(</span><span class="nx">date</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">convertedDate</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Date</span><span class="p">(</span><span class="nx">date</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">convertedDate</span><span class="p">.</span><span class="nf">toDateString</span><span class="p">();</span>
<span class="p">};</span>
</code></pre></div></div>

<ul>
  <li>Inside the src directory, create a folder and name the folder services.</li>
  <li>Inside services folder create a file and name the file CustomerService.js</li>
  <li>Write below code in src-&gt;services-&gt; CustomerService.js</li>
</ul>

<p><strong>CustomerService.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">axios</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">axios</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Base_URL_Customer</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../utils/BaseUrl</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">GetAllCustomers</span> <span class="o">=</span> <span class="p">(</span><span class="nx">offset</span><span class="p">,</span> <span class="nx">pageSize</span><span class="p">,</span> <span class="nx">access_token</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="nx">axios</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="nx">Base_URL_Customer</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">/Customers</span><span class="dl">"</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">response</span><span class="p">;</span>
  <span class="p">}</span> <span class="k">catch </span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">throw</span> <span class="nx">error</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<ul>
  <li>Inside the src directory, create a folder and name the folder components.</li>
  <li>Inside components folder create another folder and name the folder CustomerComponent.</li>
  <li>Inside CustomerComponentfolder create a file and name the file DataTableComponent.js</li>
  <li>Write below code in src-&gt;components-&gt; CustomerComponent-&gt; DataTableComponent.js</li>
</ul>

<p><strong>DataTableComponent.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Card</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@mui/material</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">SortIcon</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@mui/icons-material/ArrowDownward</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">DataTable</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-data-table-component</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">convertDateFormat</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../../utils/Conversions</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">DataTableComponent</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">data</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">columns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
      <span class="na">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
      <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Name</span><span class="dl">"</span><span class="p">,</span>
      <span class="na">selector</span><span class="p">:</span> <span class="p">(</span><span class="nx">row</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">row</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span>
      <span class="na">sortable</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">reorder</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="p">{</span>
      <span class="na">id</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
      <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Phone No</span><span class="dl">"</span><span class="p">,</span>
      <span class="na">selector</span><span class="p">:</span> <span class="p">(</span><span class="nx">row</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">row</span><span class="p">.</span><span class="nx">phoneNo</span><span class="p">,</span>
      <span class="na">sortable</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">right</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">reorder</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="p">{</span>
      <span class="na">id</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
      <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Email Address</span><span class="dl">"</span><span class="p">,</span>
      <span class="na">selector</span><span class="p">:</span> <span class="p">(</span><span class="nx">row</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">row</span><span class="p">.</span><span class="nx">emailAddress</span><span class="p">,</span>
      <span class="na">sortable</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">right</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">reorder</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="p">{</span>
      <span class="na">id</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span>
      <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Date of Birth</span><span class="dl">"</span><span class="p">,</span>
      <span class="na">selector</span><span class="p">:</span> <span class="p">(</span><span class="nx">row</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nf">convertDateFormat</span><span class="p">(</span><span class="nx">row</span><span class="p">.</span><span class="nx">dob</span><span class="p">),</span>
      <span class="na">sortable</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">right</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">reorder</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="p">},</span>
  <span class="p">];</span>
  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">data-table</span><span class="dl">"</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">Card</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">DataTable</span>
          <span class="nx">title</span><span class="o">=</span><span class="dl">"</span><span class="s2">Customers List</span><span class="dl">"</span>
          <span class="nx">columns</span><span class="o">=</span><span class="p">{</span><span class="nx">columns</span><span class="p">}</span>
          <span class="nx">data</span><span class="o">=</span><span class="p">{</span><span class="nx">data</span><span class="p">}</span>
          <span class="nx">defaultSortFieldId</span><span class="o">=</span><span class="p">{</span><span class="mi">4</span><span class="p">}</span>
          <span class="nx">sortIcon</span><span class="o">=</span><span class="p">{</span><span class="o">&lt;</span><span class="nx">SortIcon</span> <span class="o">/&gt;</span><span class="p">}</span>
          <span class="nx">pagination</span>
          <span class="nx">selectableRows</span>
          <span class="nx">paginationPerPage</span><span class="o">=</span><span class="p">{</span><span class="mi">5</span><span class="p">}</span>
          <span class="nx">paginationRowsPerPageOptions</span><span class="o">=</span><span class="p">{[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">20</span><span class="p">]}</span>
        <span class="sr">/</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="sr">/Card</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">DataTableComponent</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>Inside CustomerComponent folder create a file and name the file CustomersListComponent.js</li>
  <li>Write below code in src-&gt;components-&gt; CustomerComponent -&gt;CustomersListComponent.js</li>
</ul>

<p><strong>CustomersListComponent.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">useEffect</span><span class="p">,</span> <span class="nx">useState</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">GetAllCustomers</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../../services/CustomerService</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">DataTableComponent</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./DataTableComponent</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">CustomersListComponent</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">state</span><span class="p">,</span> <span class="nx">setState</span><span class="p">]</span> <span class="o">=</span> <span class="nf">useState</span><span class="p">([]);</span>

  <span class="nf">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nc">GetAllCustomers</span><span class="p">().</span><span class="nf">then</span><span class="p">((</span><span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nf">setState</span><span class="p">(</span><span class="nx">res</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
    <span class="p">});</span>
  <span class="p">},</span> <span class="p">[]);</span>

  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">style</span><span class="o">=&gt;</span>
      <span class="o">&lt;</span><span class="nx">DataTableComponent</span> <span class="nx">data</span><span class="o">=</span><span class="p">{</span><span class="nx">state</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">CustomersListComponent</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>Inside the src directory, create a folder and name the folder pages.</li>
  <li>Inside pages folder create a js file and name the file CustomerPage.js</li>
  <li>Write below code in src-&gt;pages-&gt;CustomerPage.js</li>
</ul>

<p><strong>CustomerPage.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">CustomersListComponent</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../components/CustomerComponent/CustomersListComponent</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">CustomerPage</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;&gt;</span>
      <span class="o">&lt;</span><span class="nx">CustomersListComponent</span> <span class="o">/&gt;</span>
    <span class="o">&lt;</span><span class="sr">/</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">CustomerPage</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>Open App.css file and replace with below code.</li>
</ul>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.data-table</span> <span class="p">{</span>
  <span class="nl">box-shadow</span><span class="p">:</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0.25</span><span class="p">)</span> <span class="m">5px</span> <span class="m">5px</span> <span class="m">15px</span> <span class="m">0px</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>Open App.js file and replace with below code.</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">logo</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./logo.svg</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="dl">"</span><span class="s2">./App.css</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="dl">"</span><span class="s2">./App.css</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">BrowserRouter</span><span class="p">,</span> <span class="nx">Route</span><span class="p">,</span> <span class="nx">Routes</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-router-dom</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">CustomerPage</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./pages/CustomerPage</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">createBrowserHistory</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">history</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">defaultHistory</span> <span class="o">=</span> <span class="nf">createBrowserHistory</span><span class="p">();</span>
<span class="kd">function</span> <span class="nf">App</span><span class="p">({</span> <span class="nx">history</span> <span class="o">=</span> <span class="nx">defaultHistory</span> <span class="p">})</span> <span class="p">{</span>
  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">BrowserRouter</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">Routes</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="dl">"</span><span class="s2">/</span><span class="dl">"</span> <span class="nx">element</span><span class="o">=</span><span class="p">{</span><span class="o">&lt;</span><span class="nx">CustomerPage</span> <span class="o">/&gt;</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="dl">"</span><span class="s2">/customers</span><span class="dl">"</span> <span class="nx">element</span><span class="o">=</span><span class="p">{</span><span class="o">&lt;</span><span class="nx">CustomerPage</span> <span class="o">/&gt;</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="sr">/Routes</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/BrowserRouter</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">App</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>Open index.js file and replace with below code.</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">ReactDOM</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-dom/client</span><span class="dl">"</span><span class="p">;</span>
<span class="c1">//import ReactDOM from "react-dom";</span>
<span class="k">import</span> <span class="dl">"</span><span class="s2">./index.css</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">App</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./App</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">reportWebVitals</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./reportWebVitals</span><span class="dl">"</span><span class="p">;</span>

<span class="nb">window</span><span class="p">.</span><span class="nx">renderCustomer</span> <span class="o">=</span> <span class="p">(</span><span class="nx">masterId</span><span class="p">,</span> <span class="nx">history</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">customerElement</span> <span class="o">=</span> <span class="nx">ReactDOM</span><span class="p">.</span><span class="nf">createRoot</span><span class="p">(</span>
    <span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="nx">masterId</span><span class="p">)</span>
  <span class="p">);</span>

  <span class="nx">customerElement</span><span class="p">.</span><span class="nf">render</span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">React</span><span class="p">.</span><span class="nx">StrictMode</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">App</span> <span class="nx">history</span><span class="o">=</span><span class="p">{</span><span class="nx">history</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/React.StrictMode</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">};</span>

<span class="nb">window</span><span class="p">.</span><span class="nx">unmountCustomer</span> <span class="o">=</span> <span class="p">(</span><span class="nx">masterId</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">// unmount of remove component</span>
  <span class="c1">//debugger;</span>
  <span class="c1">//ReactDOM.unmountComponentAtNode(document.getElementById(masterId));</span>
<span class="p">};</span>

<span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">Customer-master</span><span class="dl">"</span><span class="p">))</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">root</span> <span class="o">=</span> <span class="nx">ReactDOM</span><span class="p">.</span><span class="nf">createRoot</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">root</span><span class="dl">"</span><span class="p">));</span>
  <span class="nx">root</span><span class="p">.</span><span class="nf">render</span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">React</span><span class="p">.</span><span class="nx">StrictMode</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">App</span> <span class="o">/&gt;</span>
    <span class="o">&lt;</span><span class="sr">/React.StrictMode</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>

<span class="c1">// If you want to start measuring performance in your app, pass a function</span>
<span class="c1">// to log results (for example: reportWebVitals(console.log))</span>
<span class="c1">// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals</span>
<span class="nf">reportWebVitals</span><span class="p">();</span>
</code></pre></div></div>

<ul>
  <li>Create another file inside src folder, name the file setupProxy.js and write below code for cors policy.</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">(</span><span class="nx">app</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">app</span><span class="p">.</span><span class="nf">use</span><span class="p">((</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">res</span><span class="p">.</span><span class="nf">header</span><span class="p">(</span><span class="dl">"</span><span class="s2">Access-Control-Allow-Origin</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">*</span><span class="dl">"</span><span class="p">);</span>
    <span class="nf">next</span><span class="p">();</span>
  <span class="p">});</span>
<span class="p">};</span>
</code></pre></div></div>

<ul>
  <li>Create a file inside root directory and name the file config-overrides.js and write below code. Below code will override webpack of react.</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">webpack</span><span class="p">:</span> <span class="p">(</span><span class="nx">config</span><span class="p">,</span> <span class="nx">env</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">config</span><span class="p">.</span><span class="nx">optimization</span><span class="p">.</span><span class="nx">runtimeChunk</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
    <span class="nx">config</span><span class="p">.</span><span class="nx">optimization</span><span class="p">.</span><span class="nx">splitChunks</span> <span class="o">=</span> <span class="p">{</span>
      <span class="na">cacheGroups</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">default</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
      <span class="p">},</span>
    <span class="p">};</span>

    <span class="nx">config</span><span class="p">.</span><span class="nx">output</span><span class="p">.</span><span class="nx">filename</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">static/js/[name].js</span><span class="dl">"</span><span class="p">;</span>

    <span class="nx">config</span><span class="p">.</span><span class="nx">plugins</span><span class="p">[</span><span class="mi">5</span><span class="p">].</span><span class="nx">options</span><span class="p">.</span><span class="nx">filename</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">static/css/[name].css</span><span class="dl">"</span><span class="p">;</span>
    <span class="nx">config</span><span class="p">.</span><span class="nx">plugins</span><span class="p">[</span><span class="mi">5</span><span class="p">].</span><span class="nx">options</span><span class="p">.</span><span class="nx">moduleFilename</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="dl">"</span><span class="s2">static/css/main.css</span><span class="dl">"</span><span class="p">;</span>
    <span class="k">return</span> <span class="nx">config</span><span class="p">;</span>
  <span class="p">},</span>
<span class="p">};</span>
</code></pre></div></div>

<ul>
  <li>Open package.json and replace “scripts” section with below code. This project going to be open on 3003 port.</li>
</ul>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="nl">"start"</span><span class="p">:</span><span class="w"> </span><span class="s2">"set PORT=3003 &amp;&amp; react-app-rewired start"</span><span class="p">,</span><span class="w">
</span><span class="nl">"build"</span><span class="p">:</span><span class="w"> </span><span class="s2">"react-app-rewired build"</span><span class="p">,</span><span class="w">
</span><span class="nl">"test"</span><span class="p">:</span><span class="w"> </span><span class="s2">"react-app-rewired test"</span><span class="p">,</span><span class="w">
</span><span class="nl">"eject"</span><span class="p">:</span><span class="w"> </span><span class="s2">"react-scripts eject"</span><span class="w">
</span><span class="p">}</span><span class="err">,</span><span class="w">

</span></code></pre></div></div>

<ul>
  <li>Now run the backend Customer.API project</li>
  <li>Go to the directory of customer-frontend application and run the following command.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">npm</span> <span class="nf">start</span>
</code></pre></div></div>

<ul>
  <li>You will see the below output. It means customer service works fine.</li>
</ul>

<p><img src="/assets/images/posts/2023/mfe-05.png" alt="" /></p>

<p><strong>Step 7: Configure master-frontend React Project</strong></p>

<ul>
  <li>Open the Terminal and install below libraries with below command.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">npm</span> <span class="nf">install</span> <span class="nf">react-router-dom</span>
<span class="nf">npm</span> <span class="nf">install</span> <span class="nf">react-bootstrap</span> <span class="nf">bootstrap@5.1.3</span>
<span class="nf">npm</span> <span class="nf">install</span> <span class="nf">@trendmicro</span><span class="nv">/react-sidenav</span>

</code></pre></div></div>

<ul>
  <li>Inside root directory create a file and name the file .env and write code.</li>
</ul>

<pre><code class="language-env">REACT_APP_HEADER_HOST=http://localhost:3001
REACT_APP_PRODUCT_HOST=http://localhost:3002
REACT_APP_CUSTOMER_HOST=http://localhost:3003
</code></pre>

<ul>
  <li>Inside the src directory create a js file to handle micro-frontend services, name the file MicroFrontend.js and write below code.</li>
</ul>

<p><strong>MicroFrontend.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">useEffect</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">function</span> <span class="nf">MicroFrontend</span><span class="p">({</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">host</span><span class="p">,</span> <span class="nx">history</span> <span class="p">})</span> <span class="p">{</span>
  <span class="nf">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">scriptId</span> <span class="o">=</span> <span class="s2">`micro-frontend-script-</span><span class="p">${</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>

    <span class="kd">const</span> <span class="nx">renderMicroFrontend</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nb">window</span><span class="p">[</span><span class="s2">`render</span><span class="p">${</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">](</span><span class="s2">`</span><span class="p">${</span><span class="nx">name</span><span class="p">}</span><span class="s2">-master`</span><span class="p">,</span> <span class="nx">history</span><span class="p">);</span>
    <span class="p">};</span>

    <span class="k">if </span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="nx">scriptId</span><span class="p">))</span> <span class="p">{</span>
      <span class="nf">renderMicroFrontend</span><span class="p">();</span>
      <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="nf">fetch</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">host</span><span class="p">}</span><span class="s2">/asset-manifest.json`</span><span class="p">)</span>
      <span class="p">.</span><span class="nf">then</span><span class="p">((</span><span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">res</span><span class="p">.</span><span class="nf">json</span><span class="p">())</span>
      <span class="p">.</span><span class="nf">then</span><span class="p">((</span><span class="nx">manifest</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">script</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">createElement</span><span class="p">(</span><span class="dl">"</span><span class="s2">script</span><span class="dl">"</span><span class="p">);</span>
        <span class="nx">script</span><span class="p">.</span><span class="nx">id</span> <span class="o">=</span> <span class="nx">scriptId</span><span class="p">;</span>
        <span class="nx">script</span><span class="p">.</span><span class="nx">crossOrigin</span> <span class="o">=</span> <span class="dl">""</span><span class="p">;</span>
        <span class="nx">script</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="s2">`</span><span class="p">${</span><span class="nx">host</span><span class="p">}${</span><span class="nx">manifest</span><span class="p">.</span><span class="nx">files</span><span class="p">[</span><span class="dl">"</span><span class="s2">main.js</span><span class="dl">"</span><span class="p">]}</span><span class="s2">`</span><span class="p">;</span>
        <span class="nx">script</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="nf">renderMicroFrontend</span><span class="p">();</span>
        <span class="p">};</span>
        <span class="nb">document</span><span class="p">.</span><span class="nx">head</span><span class="p">.</span><span class="nf">appendChild</span><span class="p">(</span><span class="nx">script</span><span class="p">);</span>
      <span class="p">});</span>

    <span class="k">return </span><span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nb">window</span><span class="p">[</span><span class="s2">`unmount</span><span class="p">${</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="nb">window</span><span class="p">[</span><span class="s2">`unmount</span><span class="p">${</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">](</span><span class="s2">`</span><span class="p">${</span><span class="nx">name</span><span class="p">}</span><span class="s2">-master`</span><span class="p">);</span>
    <span class="p">};</span>
  <span class="p">});</span>

  <span class="c1">//debugger;</span>
  <span class="k">return</span> <span class="o">&lt;</span><span class="nx">main</span> <span class="nx">id</span><span class="o">=</span><span class="p">{</span><span class="s2">`</span><span class="p">${</span><span class="nx">name</span><span class="p">}</span><span class="s2">-master`</span><span class="p">}</span> <span class="sr">/&gt;</span><span class="err">;
</span><span class="p">}</span>

<span class="nx">MicroFrontend</span><span class="p">.</span><span class="nx">defaultProps</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nb">document</span><span class="p">,</span>
  <span class="nb">window</span><span class="p">,</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">MicroFrontend</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>Inside src directory create following four folders.
    <ul>
      <li>assets</li>
      <li>common</li>
      <li>components</li>
      <li>micro-services</li>
    </ul>
  </li>
  <li>Create a js file inside common folder for sidebar navigation and name the file SideNavbar.js and write below code.</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useLocation</span><span class="p">,</span> <span class="nx">useNavigate</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-router-dom</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">SideNav</span><span class="p">,</span> <span class="p">{</span> <span class="nx">NavItem</span><span class="p">,</span> <span class="nx">NavIcon</span><span class="p">,</span> <span class="nx">NavText</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@trendmicro/react-sidenav</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">SideNavbar</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">location</span> <span class="o">=</span> <span class="nf">useLocation</span><span class="p">();</span>
  <span class="kd">const</span> <span class="nx">history</span> <span class="o">=</span> <span class="nf">useNavigate</span><span class="p">();</span>
  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">SideNav</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">sidenav</span><span class="dl">"</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">SideNav</span>
        <span class="nx">onSelect</span><span class="o">=</span><span class="p">{(</span><span class="nx">selected</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="kd">const</span> <span class="nx">to</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">/</span><span class="dl">"</span> <span class="o">+</span> <span class="nx">selected</span><span class="p">;</span>
          <span class="k">if </span><span class="p">(</span><span class="nx">location</span><span class="p">.</span><span class="nx">pathname</span> <span class="o">!==</span> <span class="nx">to</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Path Name:</span><span class="dl">"</span><span class="p">,</span> <span class="nx">location</span><span class="p">.</span><span class="nx">pathname</span><span class="p">);</span>
            <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">To:</span><span class="dl">"</span><span class="p">,</span> <span class="nx">to</span><span class="p">);</span>
            <span class="nf">history</span><span class="p">(</span><span class="nx">to</span><span class="p">);</span>
          <span class="p">}</span>
        <span class="p">}}</span>
      <span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">SideNav</span><span class="p">.</span><span class="nx">Toggle</span> <span class="o">/&gt;</span>
        <span class="o">&lt;</span><span class="nx">SideNav</span><span class="p">.</span><span class="nx">Nav</span> <span class="nx">defaultSelected</span><span class="o">=</span><span class="dl">""</span><span class="o">&gt;</span>
          <span class="o">&lt;</span><span class="nx">NavItem</span> <span class="nx">eventKey</span><span class="o">=</span><span class="dl">"</span><span class="s2">home</span><span class="dl">"</span><span class="o">&gt;</span>
            <span class="o">&lt;</span><span class="nx">NavIcon</span><span class="o">&gt;</span>
              <span class="o">&lt;</span><span class="nx">i</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">fa fa-fw fa-home</span><span class="dl">"</span> <span class="nx">style</span><span class="o">=</span> <span class="sr">/</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="sr">/NavIcon</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="nx">NavText</span><span class="o">&gt;</span><span class="nx">Dashboard</span><span class="o">&lt;</span><span class="sr">/NavText</span><span class="err">&gt;
</span>          <span class="o">&lt;</span><span class="sr">/NavItem</span><span class="err">&gt;
</span>
          <span class="o">&lt;</span><span class="nx">NavItem</span> <span class="nx">eventKey</span><span class="o">=</span><span class="dl">"</span><span class="s2">product-list</span><span class="dl">"</span><span class="o">&gt;</span>
            <span class="o">&lt;</span><span class="nx">NavIcon</span><span class="o">&gt;</span>
              <span class="o">&lt;</span><span class="nx">i</span>
                <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">fa fa-fw fa-device</span><span class="dl">"</span>
                <span class="nx">style</span><span class="o">=</span>
              <span class="sr">/</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="sr">/NavIcon</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="nx">NavText</span><span class="o">&gt;</span><span class="nx">Product</span><span class="o">&lt;</span><span class="sr">/NavText</span><span class="err">&gt;
</span>          <span class="o">&lt;</span><span class="sr">/NavItem</span><span class="err">&gt;
</span>
          <span class="o">&lt;</span><span class="nx">NavItem</span> <span class="nx">eventKey</span><span class="o">=</span><span class="dl">"</span><span class="s2">product-categories</span><span class="dl">"</span><span class="o">&gt;</span>
            <span class="o">&lt;</span><span class="nx">NavIcon</span><span class="o">&gt;</span>
              <span class="o">&lt;</span><span class="nx">i</span>
                <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">fa fa-fw fa-device</span><span class="dl">"</span>
                <span class="nx">style</span><span class="o">=</span>
              <span class="sr">/</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="sr">/NavIcon</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="nx">NavText</span><span class="o">&gt;</span><span class="nx">Categories</span><span class="o">&lt;</span><span class="sr">/NavText</span><span class="err">&gt;
</span>          <span class="o">&lt;</span><span class="sr">/NavItem</span><span class="err">&gt;
</span>
          <span class="o">&lt;</span><span class="nx">NavItem</span> <span class="nx">eventKey</span><span class="o">=</span><span class="dl">"</span><span class="s2">customers</span><span class="dl">"</span><span class="o">&gt;</span>
            <span class="o">&lt;</span><span class="nx">NavIcon</span><span class="o">&gt;</span>
              <span class="o">&lt;</span><span class="nx">i</span>
                <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">fa fa-fw fa-device</span><span class="dl">"</span>
                <span class="nx">style</span><span class="o">=</span>
              <span class="sr">/</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="sr">/NavIcon</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="nx">NavText</span><span class="o">&gt;</span><span class="nx">Customers</span><span class="o">&lt;</span><span class="sr">/NavText</span><span class="err">&gt;
</span>          <span class="o">&lt;</span><span class="sr">/NavItem</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="sr">/SideNav.Nav</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="sr">/SideNav</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/SideNav</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">SideNavbar</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>Create a css file inside assets folder and name the file homeStyle.css and write below code.</li>
</ul>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@import</span> <span class="sx">url("https://fonts.googleapis.com/css2?family=Mulish:wght@200&amp;display=swap")</span><span class="p">;</span>

<span class="o">/</span><span class="nt">_</span> <span class="nt">this</span> <span class="nt">is</span> <span class="nt">non</span> <span class="nt">resposive</span> <span class="o">,</span> <span class="nt">please</span> <span class="nt">adjust</span> <span class="nt">for</span> <span class="nt">smaller</span> <span class="nt">screens</span> <span class="nt">before</span> <span class="nt">using_</span><span class="o">/</span>

<span class="nt">-</span> <span class="p">{</span>
  <span class="nl">padding</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
  <span class="nl">margin</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
  <span class="p">}</span>

<span class="nc">.container</span> <span class="p">{</span>
<span class="nl">display</span><span class="p">:</span> <span class="n">flex</span><span class="p">;</span>

    <span class="c">/* width: 100vw;

height: 100vh; \*/</span>
<span class="nl">overflow</span><span class="p">:</span> <span class="nb">visible</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.span1</span> <span class="p">{</span>
<span class="err">/_</span> <span class="nl">border</span><span class="p">:</span> <span class="nb">rgb</span><span class="p">(</span><span class="m">149</span><span class="p">,</span> <span class="m">101</span><span class="p">,</span> <span class="m">228</span><span class="p">)</span> <span class="nb">solid</span> <span class="m">2px</span><span class="p">;</span> <span class="err">_/</span>
<span class="nl">margin-top</span><span class="p">:</span> <span class="m">90px</span><span class="p">;</span>
<span class="nl">width</span><span class="p">:</span> <span class="m">100px</span><span class="p">;</span>
<span class="nl">height</span><span class="p">:</span> <span class="m">100px</span><span class="p">;</span>
<span class="nl">position</span><span class="p">:</span> <span class="nb">fixed</span><span class="p">;</span>
<span class="nl">border-radius</span><span class="p">:</span> <span class="m">50%</span><span class="p">;</span>
<span class="nl">transform</span><span class="p">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">30deg</span><span class="p">)</span> <span class="n">scale</span><span class="p">(</span><span class="m">1.5</span><span class="p">);</span>
<span class="nl">box-shadow</span><span class="p">:</span> <span class="nb">inset</span> <span class="m">10px</span> <span class="m">10px</span> <span class="m">10px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0.1</span><span class="p">),</span>
<span class="m">15px</span> <span class="m">20px</span> <span class="m">20px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0.5</span><span class="p">),</span>
<span class="nb">inset</span> <span class="m">-25px</span> <span class="m">-20px</span> <span class="m">20px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">255</span><span class="p">,</span> <span class="m">255</span><span class="p">,</span> <span class="m">255</span><span class="p">,</span> <span class="m">0.3</span><span class="p">);</span>
<span class="nl">animation</span><span class="p">:</span> <span class="n">anim</span> <span class="m">20s</span> <span class="n">ease</span> <span class="n">infinite</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.span2</span> <span class="p">{</span>
<span class="err">/_</span> <span class="nl">border</span><span class="p">:</span> <span class="nb">solid</span> <span class="no">black</span> <span class="m">2px</span><span class="p">;</span> <span class="err">_/</span>
<span class="nl">height</span><span class="p">:</span> <span class="m">100px</span><span class="p">;</span>
<span class="nl">width</span><span class="p">:</span> <span class="m">200px</span><span class="p">;</span>
<span class="nl">text-align</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
<span class="nl">font-size</span><span class="p">:</span> <span class="m">12vh</span><span class="p">;</span>
<span class="nl">color</span><span class="p">:</span> <span class="nb">rgb</span><span class="p">(</span><span class="m">193</span><span class="p">,</span> <span class="m">193</span><span class="p">,</span> <span class="m">218</span><span class="p">);</span>
<span class="nl">justify-content</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
<span class="nl">transform</span><span class="p">:</span> <span class="n">translateX</span><span class="p">(</span><span class="m">300px</span><span class="p">)</span> <span class="n">translateY</span><span class="p">(</span><span class="m">180px</span><span class="p">);</span>
<span class="nl">letter-spacing</span><span class="p">:</span> <span class="m">10px</span><span class="p">;</span>
<span class="nl">position</span><span class="p">:</span> <span class="nb">relative</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.span2</span> <span class="nc">.medtext</span> <span class="p">{</span>
<span class="nl">font-weight</span><span class="p">:</span> <span class="m">100</span><span class="p">;</span>
<span class="nl">text-shadow</span><span class="p">:</span> <span class="m">5px</span> <span class="m">5px</span> <span class="m">20px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">19</span><span class="p">,</span> <span class="m">133</span><span class="p">,</span> <span class="m">179</span><span class="p">,</span> <span class="m">0.5</span><span class="p">),</span>
<span class="m">-10px</span> <span class="m">10px</span> <span class="m">20px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">255</span><span class="p">,</span> <span class="m">255</span><span class="p">,</span> <span class="m">255</span><span class="p">,</span> <span class="m">0.5</span><span class="p">);</span>
<span class="nl">z-index</span><span class="p">:</span> <span class="m">10</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.span2</span> <span class="nc">.large</span> <span class="p">{</span>
<span class="nl">font-size</span><span class="p">:</span> <span class="m">30vh</span><span class="p">;</span>
<span class="nl">font-weight</span><span class="p">:</span> <span class="m">200</span><span class="p">;</span>
<span class="nl">text-shadow</span><span class="p">:</span> <span class="m">10px</span> <span class="m">10px</span> <span class="m">20px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">19</span><span class="p">,</span> <span class="m">133</span><span class="p">,</span> <span class="m">179</span><span class="p">,</span> <span class="m">0.5</span><span class="p">),</span>
<span class="m">-20px</span> <span class="m">20px</span> <span class="m">30px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">255</span><span class="p">,</span> <span class="m">255</span><span class="p">,</span> <span class="m">255</span><span class="p">,</span> <span class="m">0.5</span><span class="p">);</span>
<span class="p">}</span>

<span class="nc">.span3</span> <span class="p">{</span>
<span class="nl">position</span><span class="p">:</span> <span class="nb">absolute</span><span class="p">;</span>
<span class="nl">bottom</span><span class="p">:</span> <span class="m">10px</span><span class="p">;</span>
<span class="nl">right</span><span class="p">:</span> <span class="m">20px</span><span class="p">;</span>

    <span class="nl">height</span><span class="p">:</span> <span class="m">120px</span><span class="p">;</span>
    <span class="nl">justify-content</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>

<span class="p">}</span>

<span class="nc">.span4</span> <span class="p">{</span>
<span class="nl">transform</span><span class="p">:</span> <span class="n">translateY</span><span class="p">(</span><span class="m">80px</span><span class="p">)</span> <span class="n">rotate</span><span class="p">(</span><span class="m">90deg</span><span class="p">)</span> <span class="n">translateX</span><span class="p">(</span><span class="m">300px</span><span class="p">);</span>
<span class="err">/_</span> <span class="nl">border</span><span class="p">:</span> <span class="nb">solid</span> <span class="no">red</span> <span class="m">2px</span><span class="p">;</span> <span class="err">_/</span>
<span class="nl">height</span><span class="p">:</span> <span class="m">50px</span><span class="p">;</span>
<span class="nl">justify-content</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
<span class="nl">position</span><span class="p">:</span> <span class="nb">absolute</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.span4</span> <span class="nt">h2</span> <span class="p">{</span>
<span class="nl">font-size</span><span class="p">:</span> <span class="m">80px</span><span class="p">;</span>
<span class="nl">font-weight</span><span class="p">:</span> <span class="m">10</span><span class="p">;</span>
<span class="nl">padding-bottom</span><span class="p">:</span> <span class="m">10px</span><span class="p">;</span>
<span class="nl">color</span><span class="p">:</span> <span class="nb">rgb</span><span class="p">(</span><span class="m">86</span><span class="p">,</span> <span class="m">86</span><span class="p">,</span> <span class="m">206</span><span class="p">);</span>
<span class="nl">text-shadow</span><span class="p">:</span> <span class="m">5px</span> <span class="m">5px</span> <span class="m">20px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">19</span><span class="p">,</span> <span class="m">133</span><span class="p">,</span> <span class="m">179</span><span class="p">,</span> <span class="m">0.5</span><span class="p">),</span>
<span class="m">-10px</span> <span class="m">10px</span> <span class="m">10px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">255</span><span class="p">,</span> <span class="m">255</span><span class="p">,</span> <span class="m">255</span><span class="p">,</span> <span class="m">0.5</span><span class="p">);</span>
<span class="p">}</span>

<span class="nc">.span3</span> <span class="nt">h2</span> <span class="p">{</span>
<span class="nl">color</span><span class="p">:</span> <span class="nb">rgb</span><span class="p">(</span><span class="m">86</span><span class="p">,</span> <span class="m">86</span><span class="p">,</span> <span class="m">206</span><span class="p">);</span>
<span class="p">}</span>

<span class="nc">.overflow</span> <span class="p">{</span>
<span class="nl">position</span><span class="p">:</span> <span class="nb">absolute</span><span class="p">;</span>
<span class="nl">width</span><span class="p">:</span> <span class="m">85vh</span><span class="p">;</span>
<span class="nl">height</span><span class="p">:</span> <span class="m">85vh</span><span class="p">;</span>

    <span class="nl">background</span><span class="p">:</span> <span class="n">rgba</span><span class="p">(</span><span class="m">117</span><span class="p">,</span> <span class="m">117</span><span class="p">,</span> <span class="m">224</span><span class="p">,</span> <span class="m">0.726</span><span class="p">);</span>
    <span class="nl">z-index</span><span class="p">:</span> <span class="m">5</span><span class="p">;</span>
    <span class="nl">top</span><span class="p">:</span> <span class="m">10vh</span><span class="p">;</span>
    <span class="nl">left</span><span class="p">:</span> <span class="m">5vh</span><span class="p">;</span>
    <span class="nl">border-radius</span><span class="p">:</span> <span class="m">50%</span><span class="p">;</span>
    <span class="nl">animation</span><span class="p">:</span> <span class="n">animate</span> <span class="m">5s</span> <span class="n">ease</span> <span class="n">infinite</span><span class="p">;</span>
    <span class="nl">box-shadow</span><span class="p">:</span> <span class="nb">inset</span> <span class="m">10px</span> <span class="m">-10px</span> <span class="m">30px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0.2</span><span class="p">),</span>
        <span class="m">15px</span> <span class="m">-20px</span> <span class="m">30px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">255</span><span class="p">,</span> <span class="m">255</span><span class="p">,</span> <span class="m">255</span><span class="p">,</span> <span class="m">0.5</span><span class="p">),</span>
        <span class="nb">inset</span> <span class="m">-25px</span> <span class="m">-20px</span> <span class="m">30px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0.3</span><span class="p">),</span>
        <span class="m">-20px</span> <span class="m">20px</span> <span class="m">30px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">255</span><span class="p">,</span> <span class="m">255</span><span class="p">,</span> <span class="m">255</span><span class="p">,</span> <span class="m">0.37</span><span class="p">);</span>

    <span class="nl">display</span><span class="p">:</span> <span class="n">flex</span><span class="p">;</span>
    <span class="nl">align-items</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
    <span class="nl">justify-content</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>

<span class="p">}</span>

<span class="k">@keyframes</span> <span class="n">animate</span> <span class="p">{</span>
<span class="err">0</span><span class="o">%</span> <span class="p">{</span>
<span class="nl">transform</span><span class="p">:</span> <span class="n">scale</span><span class="p">(</span><span class="m">0</span><span class="p">);</span>
<span class="p">}</span>

    <span class="err">40</span><span class="o">%</span> <span class="p">{</span>
        <span class="nl">transform</span><span class="p">:</span> <span class="n">scale</span><span class="p">(</span><span class="m">0.7</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="err">60</span><span class="o">%</span> <span class="p">{</span>
        <span class="nl">transform</span><span class="p">:</span> <span class="n">scale</span><span class="p">(</span><span class="m">0.8</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="err">100</span><span class="o">%</span> <span class="p">{</span>
        <span class="nl">transform</span><span class="p">:</span> <span class="n">scale</span><span class="p">(</span><span class="m">0</span><span class="p">);</span>
    <span class="p">}</span>

<span class="p">}</span>

<span class="nc">.hero</span> <span class="p">{</span>
<span class="nl">color</span><span class="p">:</span> <span class="nb">rgb</span><span class="p">(</span><span class="m">49</span><span class="p">,</span> <span class="m">69</span><span class="p">,</span> <span class="m">185</span><span class="p">);</span>
<span class="nl">font-size</span><span class="p">:</span> <span class="m">9vh</span><span class="p">;</span>
<span class="nl">text-align</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
<span class="nl">font-weight</span><span class="p">:</span> <span class="m">100</span><span class="p">;</span>
<span class="nl">letter-spacing</span><span class="p">:</span> <span class="m">10px</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.span5</span> <span class="p">{</span>
<span class="nl">width</span><span class="p">:</span> <span class="m">70vh</span><span class="p">;</span>
<span class="nl">height</span><span class="p">:</span> <span class="m">70vh</span><span class="p">;</span>
<span class="nl">position</span><span class="p">:</span> <span class="nb">absolute</span><span class="p">;</span>
<span class="nl">right</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
<span class="nl">border-bottom-left-radius</span><span class="p">:</span> <span class="m">100%</span><span class="p">;</span>
<span class="nl">border-top-width</span><span class="p">:</span> <span class="m">0px</span><span class="p">;</span>
<span class="nl">border-right-width</span><span class="p">:</span> <span class="m">0px</span><span class="p">;</span>
<span class="nl">box-shadow</span><span class="p">:</span> <span class="nb">inset</span> <span class="m">10px</span> <span class="m">10px</span> <span class="m">10px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0.1</span><span class="p">),</span>
<span class="m">15px</span> <span class="m">20px</span> <span class="m">20px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0.5</span><span class="p">),</span>
<span class="nb">inset</span> <span class="m">-25px</span> <span class="m">-20px</span> <span class="m">20px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">255</span><span class="p">,</span> <span class="m">255</span><span class="p">,</span> <span class="m">255</span><span class="p">,</span> <span class="m">0.3</span><span class="p">);</span>
<span class="nl">position</span><span class="p">:</span> <span class="nb">absolute</span><span class="p">;</span>
<span class="nl">animation</span><span class="p">:</span> <span class="n">anim</span> <span class="m">18s</span> <span class="n">ease</span> <span class="n">infinite</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.span6</span> <span class="p">{</span>
<span class="nl">width</span><span class="p">:</span> <span class="m">10vw</span><span class="p">;</span>
<span class="nl">height</span><span class="p">:</span> <span class="m">10vw</span><span class="p">;</span>
<span class="nl">position</span><span class="p">:</span> <span class="nb">absolute</span><span class="p">;</span>
<span class="nl">left</span><span class="p">:</span> <span class="m">40vw</span><span class="p">;</span>
<span class="nl">top</span><span class="p">:</span> <span class="m">20vh</span><span class="p">;</span>
<span class="nl">border-radius</span><span class="p">:</span> <span class="m">50%</span><span class="p">;</span>
<span class="nl">box-shadow</span><span class="p">:</span> <span class="nb">inset</span> <span class="m">10px</span> <span class="m">10px</span> <span class="m">10px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0.1</span><span class="p">),</span>
<span class="m">15px</span> <span class="m">20px</span> <span class="m">20px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0.5</span><span class="p">),</span>
<span class="nb">inset</span> <span class="m">-25px</span> <span class="m">-20px</span> <span class="m">20px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">255</span><span class="p">,</span> <span class="m">255</span><span class="p">,</span> <span class="m">255</span><span class="p">,</span> <span class="m">0.3</span><span class="p">);</span>
<span class="nl">animation</span><span class="p">:</span> <span class="n">anim</span> <span class="m">17s</span> <span class="n">ease</span> <span class="n">infinite</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.span7</span> <span class="p">{</span>
<span class="nl">width</span><span class="p">:</span> <span class="m">6vw</span><span class="p">;</span>
<span class="nl">height</span><span class="p">:</span> <span class="m">6vw</span><span class="p">;</span>
<span class="nl">position</span><span class="p">:</span> <span class="nb">absolute</span><span class="p">;</span>
<span class="nl">left</span><span class="p">:</span> <span class="m">80vw</span><span class="p">;</span>
<span class="nl">top</span><span class="p">:</span> <span class="m">80vh</span><span class="p">;</span>
<span class="nl">border-radius</span><span class="p">:</span> <span class="m">50%</span><span class="p">;</span>
<span class="nl">box-shadow</span><span class="p">:</span> <span class="nb">inset</span> <span class="m">10px</span> <span class="m">10px</span> <span class="m">10px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0.1</span><span class="p">),</span>
<span class="m">15px</span> <span class="m">20px</span> <span class="m">20px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0.5</span><span class="p">),</span>
<span class="nb">inset</span> <span class="m">-25px</span> <span class="m">-20px</span> <span class="m">20px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">255</span><span class="p">,</span> <span class="m">255</span><span class="p">,</span> <span class="m">255</span><span class="p">,</span> <span class="m">0.3</span><span class="p">);</span>
<span class="p">}</span>

<span class="nc">.body</span> <span class="p">{</span>
<span class="nl">height</span><span class="p">:</span> <span class="m">100%</span><span class="p">;</span>
<span class="nl">background</span><span class="p">:</span> <span class="no">turquoise</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.span3</span> <span class="nt">h2</span> <span class="p">{</span>
<span class="nl">font-size</span><span class="p">:</span> <span class="m">50px</span><span class="p">;</span>
<span class="nl">bottom</span><span class="p">:</span> <span class="m">10px</span><span class="p">;</span>
<span class="nl">font-weight</span><span class="p">:</span> <span class="m">100</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.span7</span> <span class="p">{</span>
<span class="nl">animation</span><span class="p">:</span> <span class="n">anim</span> <span class="m">10s</span> <span class="n">ease</span> <span class="n">infinite</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">@keyframes</span> <span class="n">anim</span> <span class="p">{</span>
<span class="err">50</span><span class="o">%</span> <span class="p">{</span>
<span class="nl">transform</span><span class="p">:</span> <span class="n">translateX</span><span class="p">(</span><span class="m">50px</span><span class="p">)</span> <span class="n">scale</span><span class="p">(</span><span class="m">1.3</span><span class="p">)</span> <span class="n">translateY</span><span class="p">(</span><span class="m">5px</span><span class="p">);</span>
<span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Inside the component folder, create a js file name the file Home.js.</li>
  <li>Write below code in src -&gt; component -&gt; Home.js</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="dl">"</span><span class="s2">../assets/homeStyle.css</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">Home</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;&gt;</span>
      <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">style</span><span class="o">=&gt;</span>
        <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">container</span><span class="dl">"</span><span class="o">&gt;</span>
          <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">span1</span><span class="dl">"</span><span class="o">&gt;&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>          <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">span2</span><span class="dl">"</span><span class="o">&gt;</span>
            <span class="o">&lt;</span><span class="nx">h2</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">medtext</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Think</span><span class="o">&lt;</span><span class="sr">/h2</span><span class="err">&gt;
</span>
            <span class="o">&lt;</span><span class="nx">h2</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">large</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Simple</span><span class="o">&lt;</span><span class="sr">/h2</span><span class="err">&gt;
</span>          <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>          <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">span3</span><span class="dl">"</span><span class="o">&gt;</span>
            <span class="o">&lt;</span><span class="nx">h2</span><span class="o">&gt;</span><span class="nx">MAHEDEE</span><span class="p">.</span><span class="nx">NET</span><span class="o">&lt;</span><span class="sr">/h2</span><span class="err">&gt;
</span>          <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>          <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">span4</span><span class="dl">"</span><span class="o">&gt;</span>
            <span class="o">&lt;</span><span class="nx">h2</span><span class="o">&gt;</span><span class="nx">Learn</span><span class="o">&lt;</span><span class="sr">/h2</span><span class="err">&gt;
</span>          <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>
          <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">span5</span><span class="dl">"</span><span class="o">&gt;&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>          <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">span6</span><span class="dl">"</span><span class="o">&gt;&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>          <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">span7</span><span class="dl">"</span><span class="o">&gt;&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>
        <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">overflow</span><span class="dl">"</span><span class="o">&gt;</span>
          <span class="o">&lt;</span><span class="nx">h1</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">hero</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">MAHEDEE</span><span class="p">.</span><span class="nx">NET</span><span class="o">&lt;</span><span class="sr">/h1</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">};</span>
</code></pre></div></div>

<ul>
  <li>Inside micro-services folder creates following js files.
    <ul>
      <li>ProductMicroServices.js</li>
      <li>LayoutMicroServices.js</li>
      <li>CustomerMicroServices.js</li>
    </ul>
  </li>
</ul>

<p><strong>ProductMicroServices.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">MicroFrontend</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../MicroFrontend</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="p">{</span> <span class="na">REACT_APP_PRODUCT_HOST</span><span class="p">:</span> <span class="nx">productHost</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">function</span> <span class="nf">ProductList</span><span class="p">({</span> <span class="nx">history</span> <span class="p">})</span> <span class="p">{</span>
  <span class="k">return</span> <span class="o">&lt;</span><span class="nx">MicroFrontend</span> <span class="nx">history</span><span class="o">=</span><span class="p">{</span><span class="nx">history</span><span class="p">}</span> <span class="nx">host</span><span class="o">=</span><span class="p">{</span><span class="nx">productHost</span><span class="p">}</span> <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">Product</span><span class="dl">"</span> <span class="o">/&gt;</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">export</span> <span class="kd">function</span> <span class="nf">CategoryList</span><span class="p">({</span> <span class="nx">history</span> <span class="p">})</span> <span class="p">{</span>
  <span class="k">return</span> <span class="o">&lt;</span><span class="nx">MicroFrontend</span> <span class="nx">history</span><span class="o">=</span><span class="p">{</span><span class="nx">history</span><span class="p">}</span> <span class="nx">host</span><span class="o">=</span><span class="p">{</span><span class="nx">productHost</span><span class="p">}</span> <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">Product</span><span class="dl">"</span> <span class="o">/&gt;</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>LayoutMicroServices.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">MicroFrontend</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../MicroFrontend</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="p">{</span> <span class="na">REACT_APP_HEADER_HOST</span><span class="p">:</span> <span class="nx">headerHost</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">function</span> <span class="nf">Header</span><span class="p">({</span> <span class="nx">history</span> <span class="p">})</span> <span class="p">{</span>
  <span class="k">return</span> <span class="o">&lt;</span><span class="nx">MicroFrontend</span> <span class="nx">history</span><span class="o">=</span><span class="p">{</span><span class="nx">history</span><span class="p">}</span> <span class="nx">host</span><span class="o">=</span><span class="p">{</span><span class="nx">headerHost</span><span class="p">}</span> <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">Header</span><span class="dl">"</span> <span class="o">/&gt;</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>CustomerMicroServices.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">MicroFrontend</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../MicroFrontend</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="p">{</span> <span class="na">REACT_APP_CUSTOMER_HOST</span><span class="p">:</span> <span class="nx">customerHost</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">function</span> <span class="nf">CustomerList</span><span class="p">({</span> <span class="nx">history</span> <span class="p">})</span> <span class="p">{</span>
  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">MicroFrontend</span> <span class="nx">history</span><span class="o">=</span><span class="p">{</span><span class="nx">history</span><span class="p">}</span> <span class="nx">host</span><span class="o">=</span><span class="p">{</span><span class="nx">customerHost</span><span class="p">}</span> <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">Customer</span><span class="dl">"</span> <span class="o">/&gt;</span>
  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>Add following import inside index.js file.</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="dl">"</span><span class="s2">bootstrap/dist/css/bootstrap.min.css</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="dl">"</span><span class="s2">@trendmicro/react-sidenav/dist/react-sidenav.css</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>Add following css inside index.css file.</li>
</ul>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.sidenav---sidenav---</span><span class="err">\</span><span class="nt">_2tBP</span> <span class="p">{</span>
  <span class="nl">background-color</span><span class="p">:</span> <span class="m">#375a83</span> <span class="cp">!important</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>Update App.js file with following code.</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">BrowserRouter</span><span class="p">,</span> <span class="nx">Routes</span><span class="p">,</span> <span class="nx">Route</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-router-dom</span><span class="dl">"</span><span class="p">;</span>
<span class="c1">//import TopNav from "./common/TopNav";</span>
<span class="k">import</span> <span class="nx">SideNavbar</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./common/SideNavbar</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Home</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./components/Home</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span>
  <span class="nx">ProductList</span><span class="p">,</span>
  <span class="nx">CategoryList</span><span class="p">,</span>
<span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./micro-services/ProductMicroServices</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Header</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./micro-services/LayoutMicroServices</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">CustomerList</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./micro-services/CustomerMicroServices</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">function</span> <span class="nf">App</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;&gt;</span>
      <span class="o">&lt;</span><span class="nx">BrowserRouter</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">Header</span> <span class="o">/&gt;</span>
        <span class="o">&lt;</span><span class="nx">SideNavbar</span> <span class="o">/&gt;</span>
        <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">style</span><span class="o">=&gt;</span>
          <span class="o">&lt;</span><span class="nx">Routes</span><span class="o">&gt;</span>
            <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="dl">"</span><span class="s2">/</span><span class="dl">"</span> <span class="nx">element</span><span class="o">=</span><span class="p">{</span><span class="o">&lt;</span><span class="nx">Home</span> <span class="o">/&gt;</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="dl">"</span><span class="s2">/home</span><span class="dl">"</span> <span class="nx">element</span><span class="o">=</span><span class="p">{</span><span class="o">&lt;</span><span class="nx">Home</span> <span class="o">/&gt;</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="dl">"</span><span class="s2">/product-list</span><span class="dl">"</span> <span class="nx">element</span><span class="o">=</span><span class="p">{</span><span class="o">&lt;</span><span class="nx">ProductList</span> <span class="o">/&gt;</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="dl">"</span><span class="s2">/product-categories</span><span class="dl">"</span> <span class="nx">element</span><span class="o">=</span><span class="p">{</span><span class="o">&lt;</span><span class="nx">CategoryList</span> <span class="o">/&gt;</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="dl">"</span><span class="s2">/customers</span><span class="dl">"</span> <span class="nx">element</span><span class="o">=</span><span class="p">{</span><span class="o">&lt;</span><span class="nx">CustomerList</span> <span class="o">/&gt;</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>          <span class="o">&lt;</span><span class="sr">/Routes</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="sr">/BrowserRouter</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">App</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>Now run all other backend and frontend application.</li>
  <li>Now go inside of master-frontend application and run following command</li>
  <li>Now the output (dashboard) look like following.</li>
</ul>

<p><img src="/assets/images/posts/2023/mfe-06.png" alt="" /></p>

<ul>
  <li>Now click on Product menu you will get the following output</li>
</ul>

<p><img src="/assets/images/posts/2023/mfe-07.png" alt="" /></p>

<ul>
  <li>Now click on Customer menu you will get the following output</li>
</ul>

<p><img src="/assets/images/posts/2023/mfe-08.png" alt="" /></p>

<ul>
  <li>Now click on Categories menu you will get the following output</li>
</ul>

<p><img src="/assets/images/posts/2023/mfe-09.png" alt="" /></p>

<p>It means. Micro front end works. Our master application is running on 3000 port and other 3 application is running on 3001, 3002 and 3003. Wow, we accomplished the journey of micro front end.</p>

<p><strong><a href="https://github.com/mahedee/code-sample02/tree/master/micro-frontend">Source code</a></strong></p>]]></content><author><name>Mahedee Hasan</name></author><category term="React" /><category term="Microservices" /><category term="ASP.NET" /><category term="C#" /><category term="react" /><category term="csharp" /><category term="Microservice" /><category term="aspnet" /><category term="microfrontend" /><summary type="html"><![CDATA[Micro frontends are an architectural pattern and approach for building modern web applications. Similar to microservices on the backend, micro frontends focus on breaking down the user interface (UI) into smaller, self-contained, and independently deployable parts.]]></summary></entry><entry><title type="html">Simplified Sample Application: Building with Redux Toolkit, React.js, and ASP.NET Core</title><link href="https://mahedee.net//sample-application-redux-react-aspnet-core/" rel="alternate" type="text/html" title="Simplified Sample Application: Building with Redux Toolkit, React.js, and ASP.NET Core" /><published>2023-07-19T00:00:00-03:00</published><updated>2023-07-19T00:00:00-03:00</updated><id>https://mahedee.net//sample-application-redux-react-aspnet-core</id><content type="html" xml:base="https://mahedee.net//sample-application-redux-react-aspnet-core/"><![CDATA[<p><strong>Introduction</strong></p>

<p>Redux is a popular state management library for JavaScript applications. It is commonly used with front-end frameworks like React, Angular, and Vue, but can also be used with other frameworks or even vanilla JavaScript.
At its core, Redux provides a predictable state container for managing the state of an application. It helps you manage the data that needs to be shared across different components in a more organized and efficient way. The main concept behind Redux is that the entire state of an application is stored in a single JavaScript object, known as the “store.”
The Redux store is immutable, which means that you cannot directly modify the state. Instead, to make changes to the state, you dispatch actions. An action is a plain JavaScript object that describes what should change in the state. These actions are processed by pure functions called “reducers,” which take the current state and the dispatched action and return a new state.
The unidirectional data flow in Redux ensures that the state changes are predictable and easy to debug, as every state mutation is explicitly defined by actions and reducers.</p>

<p><strong>Redux Toolkit</strong></p>

<p>Redux Toolkit is an official package from the Redux team that simplifies and streamlines the process of working with Redux. It provides a set of utilities and best practices to make Redux development more efficient, maintainable, and less boilerplate-heavy.
Before Redux Toolkit, working with Redux required writing a significant amount of code to set up the store, define actions, and write reducers. Redux Toolkit abstracts away much of this boilerplate code and provides a more intuitive and standardized way of using Redux.</p>

<p>Key features of Redux Toolkit include:</p>

<ul>
  <li>Configuration Simplicity: Redux Toolkit provides a function called configureStore that creates a Redux store with default configurations. It includes sensible defaults for setting up the store, applying middleware, and enabling Redux DevTools for debugging.</li>
  <li>Reduces Boilerplate: With Redux Toolkit, you can define “slice” reducers using the createSlice function. A slice is a single part of the Redux store that includes both the reducer and its related actions. This reduces the need to write separate action creators and action types manually.</li>
  <li>Immutability and Immer Integration: Redux Toolkit leverages the immer library to handle state immutability in a more convenient way. This allows you to write reducers that look like they are directly mutating the state while Redux Toolkit takes care of creating a new immutable state behind the scenes.</li>
  <li>Thunk Simplification: Redux Toolkit provides the createAsyncThunk function to simplify the creation of thunks for handling asynchronous actions. It makes it easier to write async logic, such as API calls, by dispatching pending, fulfilled, and rejected actions automatically.</li>
  <li>Easy Migration: If you already have an existing Redux application, Redux Toolkit provides a smooth migration path. It offers compatibility with standard Redux code, allowing you to gradually transition your codebase to the new approach.</li>
</ul>

<p><strong>Objective:</strong><br />
In this article I will show you how to build a front-end application using redux toolkit with react and asp.net core. Here I am going to create a backend application and a front-end application. Backend application is simple asp.net core application which exposes API. Front end application consumes the api, perform CRUD operation and manage state using redux toolkit. Let’s start.</p>

<p><strong>Tools and Technology Used</strong></p>

<ol>
  <li>ASP.net core Web API</li>
  <li>Visual C#</li>
  <li>React.js</li>
  <li>Redux Toolkit</li>
  <li>Axios</li>
  <li>Bootstrap</li>
  <li>react-toastify</li>
</ol>

<p><strong>Step 1: Create a asp.net core web api project name Ecommerce.API</strong></p>

<p><strong>Step 2: Install the following nuget packages in the project.</strong></p>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">Microsoft.EntityFrameworkCore</span>
<span class="nf">Microsoft.EntityFrameworkCore.InMemory</span>
<span class="nf">Microsoft.EntityFrameworkCore.SqlServer</span>
<span class="nf">Microsoft.EntityFrameworkCore.Tools</span>
<span class="nf">Microsoft.VisualStudio.Web.CodeGeneration.Design</span>
</code></pre></div></div>

<p><strong>Step 3: Create two Model class name Product and Customer in Models folder.</strong></p>

<p><strong>Product.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">ECommerce.API.Models</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Product</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span><span class="p">?</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span><span class="p">?</span> <span class="n">Description</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">decimal</span> <span class="n">Price</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">StockQuantity</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Customer.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">namespace</span> <span class="nn">ECommerce.API.Models</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Customer</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span><span class="p">?</span> <span class="n">FirstName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span><span class="p">?</span> <span class="n">LastName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span><span class="p">?</span> <span class="n">Email</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span><span class="p">?</span> <span class="n">Phone</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="n">DateTime</span> <span class="n">BirthDate</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

    <span class="p">}</span>
<span class="p">}</span>


</code></pre></div></div>

<p><strong>Step 4: Create a Context class name ECommerceContext for data access in Db folder.</strong></p>

<p><strong>ECommerceContext.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">ECommerce.API.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">ECommerce.API.Db</span>
<span class="p">{</span>
<span class="k">public</span> <span class="k">class</span> <span class="nc">ECommerceContext</span> <span class="p">:</span> <span class="n">DbContext</span>
<span class="p">{</span>
<span class="k">public</span> <span class="nf">ECommerceContext</span><span class="p">(</span><span class="n">DbContextOptions</span><span class="p">&lt;</span><span class="n">ECommerceContext</span><span class="p">&gt;</span> <span class="n">options</span><span class="p">)</span>
<span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
<span class="p">{</span>

        <span class="p">}</span>
        <span class="k">public</span> <span class="n">DbSet</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="n">Products</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span><span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="n">DbSet</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="n">Customers</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>

<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 5: Create a Seed Generator class name SeedGenerator in Db folder.</strong></p>

<p><strong>SeedGenerator.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">ECommerce.API.Models</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">ECommerce.API.Db</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">SeedGenerator</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">SeedData</span><span class="p">(</span><span class="n">WebApplication</span> <span class="n">app</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">scope</span> <span class="p">=</span> <span class="n">app</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">CreateScope</span><span class="p">())</span>
            <span class="p">{</span>
                <span class="kt">var</span> <span class="n">context</span> <span class="p">=</span> <span class="n">scope</span><span class="p">.</span><span class="n">ServiceProvider</span><span class="p">.</span><span class="n">GetService</span><span class="p">&lt;</span><span class="n">ECommerceContext</span><span class="p">&gt;();</span>


                <span class="k">if</span> <span class="p">(!</span><span class="n">context</span><span class="p">.</span><span class="n">Products</span><span class="p">.</span><span class="nf">Any</span><span class="p">())</span>
                <span class="p">{</span>

                    <span class="n">context</span><span class="p">.</span><span class="n">Products</span><span class="p">.</span><span class="nf">AddRange</span><span class="p">(</span>
                        <span class="k">new</span> <span class="n">Product</span>
                        <span class="p">{</span>
                            <span class="n">Name</span> <span class="p">=</span> <span class="s">"Smartphone"</span><span class="p">,</span>
                            <span class="n">Description</span> <span class="p">=</span> <span class="s">"A powerful and sleek smartphone with advanced features."</span><span class="p">,</span>
                            <span class="n">Price</span> <span class="p">=</span> <span class="m">699.99m</span><span class="p">,</span>
                            <span class="n">StockQuantity</span> <span class="p">=</span> <span class="m">50</span>
                        <span class="p">},</span>
                        <span class="k">new</span> <span class="n">Product</span>
                        <span class="p">{</span>
                            <span class="n">Name</span> <span class="p">=</span> <span class="s">"Laptop"</span><span class="p">,</span>
                            <span class="n">Description</span> <span class="p">=</span> <span class="s">"A high-performance laptop for both work and entertainment."</span><span class="p">,</span>
                            <span class="n">Price</span> <span class="p">=</span> <span class="m">1299.99m</span><span class="p">,</span>
                            <span class="n">StockQuantity</span> <span class="p">=</span> <span class="m">25</span>
                        <span class="p">},</span>
                        <span class="k">new</span> <span class="n">Product</span>
                        <span class="p">{</span>
                            <span class="n">Name</span> <span class="p">=</span> <span class="s">"Wireless Earbuds"</span><span class="p">,</span>
                            <span class="n">Description</span> <span class="p">=</span> <span class="s">"Premium wireless earbuds with noise-canceling technology."</span><span class="p">,</span>
                            <span class="n">Price</span> <span class="p">=</span> <span class="m">149.99m</span><span class="p">,</span>
                            <span class="n">StockQuantity</span> <span class="p">=</span> <span class="m">100</span>
                        <span class="p">},</span>
                        <span class="k">new</span> <span class="n">Product</span>
                        <span class="p">{</span>
                            <span class="n">Name</span> <span class="p">=</span> <span class="s">"Smart Watch"</span><span class="p">,</span>
                            <span class="n">Description</span> <span class="p">=</span> <span class="s">"A stylish smartwatch with fitness tracking and app notifications."</span><span class="p">,</span>
                            <span class="n">Price</span> <span class="p">=</span> <span class="m">199.99m</span><span class="p">,</span>
                            <span class="n">StockQuantity</span> <span class="p">=</span> <span class="m">30</span>
                        <span class="p">});</span>
                <span class="p">}</span>


                <span class="k">if</span> <span class="p">(!</span><span class="n">context</span><span class="p">.</span><span class="n">Customers</span><span class="p">.</span><span class="nf">Any</span><span class="p">())</span>
                <span class="p">{</span>
                    <span class="n">context</span><span class="p">.</span><span class="n">Customers</span><span class="p">.</span><span class="nf">AddRange</span><span class="p">(</span>
                        <span class="k">new</span> <span class="n">Customer</span>
                        <span class="p">{</span>
                            <span class="n">Id</span> <span class="p">=</span> <span class="m">1</span><span class="p">,</span>
                            <span class="n">FirstName</span> <span class="p">=</span> <span class="s">"John"</span><span class="p">,</span>
                            <span class="n">LastName</span> <span class="p">=</span> <span class="s">"Doe"</span><span class="p">,</span>
                            <span class="n">Email</span> <span class="p">=</span> <span class="s">"john@example.com"</span><span class="p">,</span>
                            <span class="n">Phone</span> <span class="p">=</span> <span class="s">"555-1234"</span><span class="p">,</span>
                            <span class="n">BirthDate</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">DateTime</span><span class="p">(</span><span class="m">1990</span><span class="p">,</span> <span class="m">5</span><span class="p">,</span> <span class="m">15</span><span class="p">)</span>
                        <span class="p">},</span>
                        <span class="k">new</span> <span class="n">Customer</span>
                        <span class="p">{</span>
                            <span class="n">Id</span> <span class="p">=</span> <span class="m">2</span><span class="p">,</span>
                            <span class="n">FirstName</span> <span class="p">=</span> <span class="s">"Jane"</span><span class="p">,</span>
                            <span class="n">LastName</span> <span class="p">=</span> <span class="s">"Smith"</span><span class="p">,</span>
                            <span class="n">Email</span> <span class="p">=</span> <span class="s">"jane@example.com"</span><span class="p">,</span>
                            <span class="n">Phone</span> <span class="p">=</span> <span class="s">"555-5678"</span><span class="p">,</span>
                            <span class="n">BirthDate</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">DateTime</span><span class="p">(</span><span class="m">1985</span><span class="p">,</span> <span class="m">8</span><span class="p">,</span> <span class="m">22</span><span class="p">)</span>
                        <span class="p">},</span>
                        <span class="k">new</span> <span class="n">Customer</span>
                        <span class="p">{</span>
                            <span class="n">Id</span> <span class="p">=</span> <span class="m">3</span><span class="p">,</span>
                            <span class="n">FirstName</span> <span class="p">=</span> <span class="s">"Michael"</span><span class="p">,</span>
                            <span class="n">LastName</span> <span class="p">=</span> <span class="s">"Johnson"</span><span class="p">,</span>
                            <span class="n">Email</span> <span class="p">=</span> <span class="s">"michael@example.com"</span><span class="p">,</span>
                            <span class="n">Phone</span> <span class="p">=</span> <span class="s">"555-9876"</span><span class="p">,</span>
                            <span class="n">BirthDate</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">DateTime</span><span class="p">(</span><span class="m">1992</span><span class="p">,</span> <span class="m">10</span><span class="p">,</span> <span class="m">10</span><span class="p">)</span>
                        <span class="p">});</span>
                <span class="p">}</span>
                    <span class="n">context</span><span class="p">.</span><span class="nf">SaveChanges</span><span class="p">();</span>

            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>


</code></pre></div></div>

<p><strong>Step 6: Configure Program class as follows.</strong></p>

<p><strong>Program.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">ECommerce.API.Db</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="n">WebApplication</span><span class="p">.</span><span class="nf">CreateBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>

<span class="c1">// Add services to the container.</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddDbContext</span><span class="p">&lt;</span><span class="n">ECommerceContext</span><span class="p">&gt;(</span><span class="n">opt</span> <span class="p">=&gt;</span> <span class="n">opt</span><span class="p">.</span><span class="nf">UseInMemoryDatabase</span><span class="p">(</span><span class="s">"ECommerceDB"</span><span class="p">));</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">();</span>
<span class="c1">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddEndpointsApiExplorer</span><span class="p">();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddSwaggerGen</span><span class="p">();</span>

<span class="kt">var</span> <span class="n">app</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

<span class="c1">//For seeding data</span>
<span class="n">SeedGenerator</span><span class="p">.</span><span class="nf">SeedData</span><span class="p">(</span><span class="n">app</span><span class="p">);</span>

<span class="c1">// Configure the HTTP request pipeline.</span>
<span class="k">if</span> <span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">Environment</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
<span class="p">{</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwagger</span><span class="p">();</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwaggerUI</span><span class="p">();</span>

    <span class="c1">// Enable CORS</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseCors</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span>
    <span class="p">.</span><span class="nf">AllowAnyMethod</span><span class="p">()</span>
    <span class="p">.</span><span class="nf">AllowAnyHeader</span><span class="p">()</span>
    <span class="p">.</span><span class="nf">SetIsOriginAllowed</span><span class="p">(</span><span class="n">origin</span> <span class="p">=&gt;</span> <span class="k">true</span><span class="p">)</span> <span class="c1">// allow any origin</span>
    <span class="p">.</span><span class="nf">AllowCredentials</span><span class="p">());</span> <span class="c1">// allow credentials</span>
<span class="p">}</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseHttpsRedirection</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseAuthorization</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">MapControllers</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>

</code></pre></div></div>

<p><strong>Step 7: Create two Controller class name ProductsController and CustomersController in Controllers folder.</strong></p>

<p><strong>ProductsController.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">ECommerce.API.Db</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">ECommerce.API.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">ECommerce.API.Controllers</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
    <span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">ProductsController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">ECommerceContext</span> <span class="n">_context</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">ProductsController</span><span class="p">(</span><span class="n">ECommerceContext</span> <span class="n">context</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_context</span> <span class="p">=</span> <span class="n">context</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/Products</span>
        <span class="p">[</span><span class="n">HttpGet</span><span class="p">]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;&gt;&gt;</span> <span class="nf">GetProducts</span><span class="p">()</span>
        <span class="p">{</span>
          <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Products</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
          <span class="p">{</span>
              <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
          <span class="p">}</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Products</span><span class="p">.</span><span class="nf">ToListAsync</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/Products/5</span>
        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;&gt;</span> <span class="nf">GetProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
          <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Products</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
          <span class="p">{</span>
              <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
          <span class="p">}</span>
            <span class="kt">var</span> <span class="n">product</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Products</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">product</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="n">product</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// PUT: api/Products/5</span>
        <span class="c1">// To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754</span>
        <span class="p">[</span><span class="nf">HttpPut</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">PutProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="n">Product</span> <span class="n">product</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">id</span> <span class="p">!=</span> <span class="n">product</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">_context</span><span class="p">.</span><span class="nf">Entry</span><span class="p">(</span><span class="n">product</span><span class="p">).</span><span class="n">State</span> <span class="p">=</span> <span class="n">EntityState</span><span class="p">.</span><span class="n">Modified</span><span class="p">;</span>

            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">DbUpdateConcurrencyException</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(!</span><span class="nf">ProductExists</span><span class="p">(</span><span class="n">id</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
                <span class="p">}</span>
                <span class="k">else</span>
                <span class="p">{</span>
                    <span class="k">throw</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// POST: api/Products</span>
        <span class="c1">// To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754</span>
        <span class="p">[</span><span class="n">HttpPost</span><span class="p">]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;&gt;</span> <span class="nf">PostProduct</span><span class="p">(</span><span class="n">Product</span> <span class="n">product</span><span class="p">)</span>
        <span class="p">{</span>
          <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Products</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
          <span class="p">{</span>
              <span class="k">return</span> <span class="nf">Problem</span><span class="p">(</span><span class="s">"Entity set 'ECommerceContext.Products'  is null."</span><span class="p">);</span>
          <span class="p">}</span>
            <span class="n">_context</span><span class="p">.</span><span class="n">Products</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">product</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>

            <span class="k">return</span> <span class="nf">CreatedAtAction</span><span class="p">(</span><span class="s">"GetProduct"</span><span class="p">,</span> <span class="k">new</span> <span class="p">{</span> <span class="n">id</span> <span class="p">=</span> <span class="n">product</span><span class="p">.</span><span class="n">Id</span> <span class="p">},</span> <span class="n">product</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">// DELETE: api/Products/5</span>
        <span class="p">[</span><span class="nf">HttpDelete</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">DeleteProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Products</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="kt">var</span> <span class="n">product</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Products</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">product</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">_context</span><span class="p">.</span><span class="n">Products</span><span class="p">.</span><span class="nf">Remove</span><span class="p">(</span><span class="n">product</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>

            <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="kt">bool</span> <span class="nf">ProductExists</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Products</span><span class="p">?.</span><span class="nf">Any</span><span class="p">(</span><span class="n">e</span> <span class="p">=&gt;</span> <span class="n">e</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">id</span><span class="p">)).</span><span class="nf">GetValueOrDefault</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>CustomersController.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">ECommerce.API.Db</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">ECommerce.API.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">ECommerce.API.Controllers</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
    <span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CustomersController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">ECommerceContext</span> <span class="n">_context</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">CustomersController</span><span class="p">(</span><span class="n">ECommerceContext</span> <span class="n">context</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_context</span> <span class="p">=</span> <span class="n">context</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/Customers</span>
        <span class="p">[</span><span class="n">HttpGet</span><span class="p">]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;&gt;&gt;</span> <span class="nf">GetCustomers</span><span class="p">()</span>
        <span class="p">{</span>
          <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Customers</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
          <span class="p">{</span>
              <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
          <span class="p">}</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Customers</span><span class="p">.</span><span class="nf">ToListAsync</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/Customers/5</span>
        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;&gt;</span> <span class="nf">GetCustomer</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
          <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Customers</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
          <span class="p">{</span>
              <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
          <span class="p">}</span>
            <span class="kt">var</span> <span class="n">customer</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Customers</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">customer</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="n">customer</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// PUT: api/Customers/5</span>
        <span class="c1">// To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754</span>
        <span class="p">[</span><span class="nf">HttpPut</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">PutCustomer</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="n">Customer</span> <span class="n">customer</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">id</span> <span class="p">!=</span> <span class="n">customer</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">_context</span><span class="p">.</span><span class="nf">Entry</span><span class="p">(</span><span class="n">customer</span><span class="p">).</span><span class="n">State</span> <span class="p">=</span> <span class="n">EntityState</span><span class="p">.</span><span class="n">Modified</span><span class="p">;</span>

            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">DbUpdateConcurrencyException</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(!</span><span class="nf">CustomerExists</span><span class="p">(</span><span class="n">id</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
                <span class="p">}</span>
                <span class="k">else</span>
                <span class="p">{</span>
                    <span class="k">throw</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// POST: api/Customers</span>
        <span class="c1">// To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754</span>
        <span class="p">[</span><span class="n">HttpPost</span><span class="p">]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;&gt;</span> <span class="nf">PostCustomer</span><span class="p">(</span><span class="n">Customer</span> <span class="n">customer</span><span class="p">)</span>
        <span class="p">{</span>
          <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Customers</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
          <span class="p">{</span>
              <span class="k">return</span> <span class="nf">Problem</span><span class="p">(</span><span class="s">"Entity set 'ECommerceContext.Customers'  is null."</span><span class="p">);</span>
          <span class="p">}</span>
            <span class="n">_context</span><span class="p">.</span><span class="n">Customers</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">customer</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>

            <span class="k">return</span> <span class="nf">CreatedAtAction</span><span class="p">(</span><span class="s">"GetCustomer"</span><span class="p">,</span> <span class="k">new</span> <span class="p">{</span> <span class="n">id</span> <span class="p">=</span> <span class="n">customer</span><span class="p">.</span><span class="n">Id</span> <span class="p">},</span> <span class="n">customer</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">// DELETE: api/Customers/5</span>
        <span class="p">[</span><span class="nf">HttpDelete</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">DeleteCustomer</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Customers</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="kt">var</span> <span class="n">customer</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Customers</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">customer</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">_context</span><span class="p">.</span><span class="n">Customers</span><span class="p">.</span><span class="nf">Remove</span><span class="p">(</span><span class="n">customer</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>

            <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"SearchCustomers"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;&gt;&gt;</span> <span class="nf">SearchCustomers</span><span class="p">(</span><span class="kt">string</span> <span class="n">name</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Customers</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="n">List</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="n">customers</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">name</span> <span class="p">!=</span> <span class="s">"all"</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">customers</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Customers</span><span class="p">.</span><span class="nf">Where</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">FirstName</span><span class="p">.</span><span class="nf">Contains</span><span class="p">(</span><span class="n">name</span><span class="p">)</span> <span class="p">||</span> <span class="n">p</span><span class="p">.</span><span class="n">LastName</span><span class="p">.</span><span class="nf">Contains</span><span class="p">(</span><span class="n">name</span><span class="p">)).</span><span class="nf">ToListAsync</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">else</span>
            <span class="p">{</span>
                <span class="n">customers</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Customers</span><span class="p">.</span><span class="nf">ToListAsync</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="n">customers</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="kt">bool</span> <span class="nf">CustomerExists</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Customers</span><span class="p">?.</span><span class="nf">Any</span><span class="p">(</span><span class="n">e</span> <span class="p">=&gt;</span> <span class="n">e</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">id</span><span class="p">)).</span><span class="nf">GetValueOrDefault</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p>Now our back-end application is ready. You can run and check the application using swagger.</p>

<p><strong>Step 8: Create a react application name - redux-app. Run the following command in your power shell terminal.</strong></p>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">npx</span> <span class="nf">create-react-app</span> <span class="nf">redux-app</span>
</code></pre></div></div>

<p><strong>Step 9: Install the following packages in the react project</strong></p>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">npm</span> <span class="nf">install</span> <span class="nf">bootstrap@4.6.0</span>
<span class="nf">npm</span> <span class="nf">install</span> <span class="nf">react-router-dom</span>
<span class="nf">npm</span> <span class="nf">install</span> <span class="nf">react-toastify</span>
<span class="nf">npm</span> <span class="nf">install</span> <span class="nf">react-redux</span> <span class="nf">@reduxjs</span><span class="nv">/toolkit</span>
<span class="nf">npm</span> <span class="nf">install</span> <span class="nf">axios</span>
</code></pre></div></div>

<p><strong>Step 10: Create Conversion.js file in src-&gt;utils folder.</strong></p>

<p><strong>Conversion.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">const</span> <span class="nx">convertDateFormat</span> <span class="o">=</span> <span class="p">(</span><span class="nx">date</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">convertedDate</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Date</span><span class="p">(</span><span class="nx">date</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">convertedDate</span><span class="p">.</span><span class="nf">toDateString</span><span class="p">();</span>
<span class="p">};</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">ConvertDateISOString</span> <span class="o">=</span> <span class="p">(</span><span class="nx">date</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="k">new</span> <span class="nc">Date</span><span class="p">(</span><span class="nx">date</span><span class="p">).</span><span class="nf">toISOString</span><span class="p">().</span><span class="nf">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
<span class="p">};</span>
</code></pre></div></div>

<p><strong>Step 11: Create ToastifyMessage.js file in src-&gt;helper folder.</strong></p>

<p><strong>ToastifyMessage.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">toast</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-toastify</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">SuccessToastify</span> <span class="o">=</span> <span class="p">(</span><span class="nx">message</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">toast</span><span class="p">.</span><span class="nf">success</span><span class="p">(</span><span class="nx">message</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">position</span><span class="p">:</span> <span class="nx">toast</span><span class="p">.</span><span class="nx">POSITION</span><span class="p">.</span><span class="nx">TOP_CENTER</span><span class="p">,</span>
    <span class="na">autoClose</span><span class="p">:</span> <span class="mi">3000</span><span class="p">,</span> <span class="c1">// auto close after 30 seconds</span>
  <span class="p">});</span>
<span class="p">};</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">WarningTostify</span> <span class="o">=</span> <span class="p">(</span><span class="nx">message</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">toast</span><span class="p">.</span><span class="nf">warning</span><span class="p">(</span><span class="nx">message</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">position</span><span class="p">:</span> <span class="nx">toast</span><span class="p">.</span><span class="nx">POSITION</span><span class="p">.</span><span class="nx">TOP_RIGHT</span><span class="p">,</span>
    <span class="na">autoClose</span><span class="p">:</span> <span class="mi">3000</span><span class="p">,</span> <span class="c1">// auto close after 30 seconds</span>
  <span class="p">});</span>
<span class="p">};</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">ErrorToastify</span> <span class="o">=</span> <span class="p">(</span><span class="nx">message</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">toast</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="nx">message</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">position</span><span class="p">:</span> <span class="nx">toast</span><span class="p">.</span><span class="nx">POSITION</span><span class="p">.</span><span class="nx">TOP_RIGHT</span><span class="p">,</span>
    <span class="na">autoClose</span><span class="p">:</span> <span class="mi">3000</span><span class="p">,</span> <span class="c1">// auto close after 30 seconds</span>
  <span class="p">});</span>
<span class="p">};</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">InfoToastify</span> <span class="o">=</span> <span class="p">(</span><span class="nx">message</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">toast</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="nx">message</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">position</span><span class="p">:</span> <span class="nx">toast</span><span class="p">.</span><span class="nx">POSITION</span><span class="p">.</span><span class="nx">TOP_RIGHT</span><span class="p">,</span>
    <span class="na">autoClose</span><span class="p">:</span> <span class="mi">3000</span><span class="p">,</span> <span class="c1">// auto close after 30 seconds</span>
  <span class="p">});</span>
<span class="p">};</span>
</code></pre></div></div>

<p><strong>Step 12: Configure Http connection using axios</strong></p>

<ul>
  <li>Create BaseURL.js in src-&gt;config folder to set the base URL for API</li>
</ul>

<p><strong>BaseURL.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">const</span> <span class="nx">Base_URL</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">https://localhost:7288/api</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>Create http-common.js in src-&gt;config folder<br />
<strong>http-common.js</strong></li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">axios</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">axios</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Base_URL</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./BaseURL</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">axios</span><span class="p">.</span><span class="nf">create</span><span class="p">({</span>
  <span class="na">baseURL</span><span class="p">:</span> <span class="nx">Base_URL</span><span class="p">,</span>
  <span class="na">headers</span><span class="p">:</span> <span class="p">{</span>
    <span class="dl">"</span><span class="s2">Content-type</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">application/json</span><span class="dl">"</span><span class="p">,</span>
  <span class="p">},</span>
<span class="p">});</span>
</code></pre></div></div>

<p><strong>Step 13: Create Service Components</strong></p>

<ul>
  <li>Create ProductService.js in src-&gt;services folder.</li>
</ul>

<p><strong>ProductService.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//ProductDataService to make asynchronous HTTP requests</span>
<span class="k">import</span> <span class="nx">http</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../config/http-common</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">getAll</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">http</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">/Products</span><span class="dl">"</span><span class="p">);</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="kd">get</span> <span class="o">=</span> <span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">http</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="s2">`/Products/</span><span class="p">${</span><span class="nx">id</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">create</span> <span class="o">=</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">http</span><span class="p">.</span><span class="nf">post</span><span class="p">(</span><span class="dl">"</span><span class="s2">/Products</span><span class="dl">"</span><span class="p">,</span> <span class="nx">data</span><span class="p">);</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">update</span> <span class="o">=</span> <span class="p">(</span><span class="nx">id</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">http</span><span class="p">.</span><span class="nf">put</span><span class="p">(</span><span class="s2">`/Products/</span><span class="p">${</span><span class="nx">id</span><span class="p">}</span><span class="s2">`</span><span class="p">,</span> <span class="nx">data</span><span class="p">);</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">remove</span> <span class="o">=</span> <span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">http</span><span class="p">.</span><span class="k">delete</span><span class="p">(</span><span class="s2">`/Products/</span><span class="p">${</span><span class="nx">id</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
<span class="p">};</span>
<span class="kd">const</span> <span class="nx">ProductDataService</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">getAll</span><span class="p">,</span>
  <span class="kd">get</span><span class="p">,</span>
  <span class="nx">create</span><span class="p">,</span>
  <span class="nx">update</span><span class="p">,</span>
  <span class="nx">remove</span><span class="p">,</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">ProductDataService</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>Create CustomerService.js in src-&gt;services folder.</li>
</ul>

<p><strong>CustomerService.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//CustomerDataService to make asynchronous HTTP requests</span>
<span class="k">import</span> <span class="nx">http</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../config/http-common</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">getAll</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">http</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">/Customers</span><span class="dl">"</span><span class="p">);</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="kd">get</span> <span class="o">=</span> <span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">http</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="s2">`/Customers/</span><span class="p">${</span><span class="nx">id</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">create</span> <span class="o">=</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">http</span><span class="p">.</span><span class="nf">post</span><span class="p">(</span><span class="dl">"</span><span class="s2">/Customers</span><span class="dl">"</span><span class="p">,</span> <span class="nx">data</span><span class="p">);</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">update</span> <span class="o">=</span> <span class="p">(</span><span class="nx">id</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">http</span><span class="p">.</span><span class="nf">put</span><span class="p">(</span><span class="s2">`/Customers/</span><span class="p">${</span><span class="nx">id</span><span class="p">}</span><span class="s2">`</span><span class="p">,</span> <span class="nx">data</span><span class="p">);</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">remove</span> <span class="o">=</span> <span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">http</span><span class="p">.</span><span class="k">delete</span><span class="p">(</span><span class="s2">`/Customers/</span><span class="p">${</span><span class="nx">id</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">findByName</span> <span class="o">=</span> <span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">http</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="s2">`/Customers/SearchCustomers?name=</span><span class="p">${</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">CustomerDataService</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">getAll</span><span class="p">,</span>
  <span class="kd">get</span><span class="p">,</span>
  <span class="nx">create</span><span class="p">,</span>
  <span class="nx">update</span><span class="p">,</span>
  <span class="nx">remove</span><span class="p">,</span>
  <span class="nx">findByName</span><span class="p">,</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">CustomerDataService</span><span class="p">;</span>
</code></pre></div></div>

<p>Step 14: Configure Redux</p>

<ul>
  <li>Create Slice, Reducer and Actions : Instead of creating many folders and files for Redux (actions, reducers, types,…), with redux-toolkit we just need all-in-one: slice.
A slice is a collection of Redux reducer logic and actions for a single feature.</li>
</ul>

<p>To create a slice, you only need to define the following:</p>

<ol>
  <li>A name to identify the slice.</li>
  <li>The initial state value.</li>
  <li>One or more reducer functions to specify how the state can be updated.</li>
</ol>

<p>Once you’ve created a slice, you can effortlessly export the generated Redux action creators and the reducer function for the entire slice.
Redux Toolkit simplifies this process with the createSlice() function, which automatically generates action types and action creators based on the reducer function names you provide.</p>

<ul>
  <li>Create slice for Product state. Create productsSlice.js in src-&gt;redux-&gt;slice folder.</li>
</ul>

<p><strong>productsSlice.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">createAsyncThunk</span><span class="p">,</span> <span class="nx">createSlice</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@reduxjs/toolkit</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">ProductDataService</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../../services/ProductService</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">initialState</span> <span class="o">=</span> <span class="p">[];</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">createProduct</span> <span class="o">=</span> <span class="nf">createAsyncThunk</span><span class="p">(</span>
  <span class="dl">"</span><span class="s2">products/create</span><span class="dl">"</span><span class="p">,</span>
  <span class="k">async </span><span class="p">(</span><span class="nx">inputData</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">res</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">ProductDataService</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="nx">inputData</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">);</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">retrieveProducts</span> <span class="o">=</span> <span class="nf">createAsyncThunk</span><span class="p">(</span>
  <span class="dl">"</span><span class="s2">products/retrieve</span><span class="dl">"</span><span class="p">,</span>
  <span class="k">async </span><span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">res</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">ProductDataService</span><span class="p">.</span><span class="nf">getAll</span><span class="p">();</span>
    <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">);</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">updateProduct</span> <span class="o">=</span> <span class="nf">createAsyncThunk</span><span class="p">(</span>
  <span class="dl">"</span><span class="s2">products/update</span><span class="dl">"</span><span class="p">,</span>
  <span class="k">async </span><span class="p">({</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">data</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">debugger</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">res</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">ProductDataService</span><span class="p">.</span><span class="nf">update</span><span class="p">(</span><span class="nx">id</span><span class="p">,</span> <span class="nx">data</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">);</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">deleteProduct</span> <span class="o">=</span> <span class="nf">createAsyncThunk</span><span class="p">(</span><span class="dl">"</span><span class="s2">products/delete</span><span class="dl">"</span><span class="p">,</span> <span class="k">async </span><span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">debugger</span><span class="p">;</span>
  <span class="k">await</span> <span class="nx">ProductDataService</span><span class="p">.</span><span class="nf">remove</span><span class="p">(</span><span class="nx">id</span><span class="p">);</span>
  <span class="k">return</span> <span class="p">{</span> <span class="nx">id</span> <span class="p">};</span>
<span class="p">});</span>

<span class="kd">const</span> <span class="nx">productSlice</span> <span class="o">=</span> <span class="nf">createSlice</span><span class="p">({</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">product</span><span class="dl">"</span><span class="p">,</span>
  <span class="nx">initialState</span><span class="p">,</span>
  <span class="na">extraReducers</span><span class="p">:</span> <span class="p">{</span>
    <span class="p">[</span><span class="nx">createProduct</span><span class="p">.</span><span class="nx">fulfilled</span><span class="p">]:</span> <span class="p">(</span><span class="nx">state</span><span class="p">,</span> <span class="nx">action</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">state</span><span class="p">.</span><span class="nf">push</span><span class="p">(</span><span class="nx">action</span><span class="p">.</span><span class="nx">payload</span><span class="p">);</span>
    <span class="p">},</span>

    <span class="p">[</span><span class="nx">retrieveProducts</span><span class="p">.</span><span class="nx">fulfilled</span><span class="p">]:</span> <span class="p">(</span><span class="nx">state</span><span class="p">,</span> <span class="nx">action</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">return</span> <span class="p">[...</span><span class="nx">action</span><span class="p">.</span><span class="nx">payload</span><span class="p">];</span>
    <span class="p">},</span>

    <span class="p">[</span><span class="nx">updateProduct</span><span class="p">.</span><span class="nx">fulfilled</span><span class="p">]:</span> <span class="p">(</span><span class="nx">state</span><span class="p">,</span> <span class="nx">action</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">index</span> <span class="o">=</span> <span class="nx">state</span><span class="p">.</span><span class="nf">findIndex</span><span class="p">(</span>
        <span class="p">(</span><span class="nx">tutorial</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">tutorial</span><span class="p">.</span><span class="nx">id</span> <span class="o">===</span> <span class="nx">action</span><span class="p">.</span><span class="nx">payload</span><span class="p">.</span><span class="nx">id</span>
      <span class="p">);</span>
      <span class="nx">state</span><span class="p">[</span><span class="nx">index</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
        <span class="p">...</span><span class="nx">state</span><span class="p">[</span><span class="nx">index</span><span class="p">],</span>
        <span class="p">...</span><span class="nx">action</span><span class="p">.</span><span class="nx">payload</span><span class="p">,</span>
      <span class="p">};</span>
    <span class="p">},</span>

    <span class="p">[</span><span class="nx">deleteProduct</span><span class="p">.</span><span class="nx">fulfilled</span><span class="p">]:</span> <span class="p">(</span><span class="nx">state</span><span class="p">,</span> <span class="nx">action</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="kd">let</span> <span class="nx">index</span> <span class="o">=</span> <span class="nx">state</span><span class="p">.</span><span class="nf">findIndex</span><span class="p">(({</span> <span class="nx">id</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="nx">id</span> <span class="o">===</span> <span class="nx">action</span><span class="p">.</span><span class="nx">payload</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span>
      <span class="nx">state</span><span class="p">.</span><span class="nf">splice</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
    <span class="p">},</span>
  <span class="p">},</span>
<span class="p">});</span>

<span class="kd">const</span> <span class="p">{</span> <span class="nx">reducer</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">productSlice</span><span class="p">;</span>
<span class="k">export</span> <span class="k">default</span> <span class="nx">reducer</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>Create slice for Customer state. Create customersSlice.js in src-&gt;redux-&gt;slice folder.</li>
</ul>

<p><strong>customersSlice.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">createAsyncThunk</span><span class="p">,</span> <span class="nx">createSlice</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@reduxjs/toolkit</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">CustomerDataService</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../../services/CustomerService</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">initialState</span> <span class="o">=</span> <span class="p">[];</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">createCustomer</span> <span class="o">=</span> <span class="nf">createAsyncThunk</span><span class="p">(</span>
  <span class="dl">"</span><span class="s2">customers/create</span><span class="dl">"</span><span class="p">,</span>
  <span class="k">async </span><span class="p">(</span><span class="nx">inputData</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">CustomerDataService</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="nx">inputData</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">response</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">);</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">retrieveCustomers</span> <span class="o">=</span> <span class="nf">createAsyncThunk</span><span class="p">(</span>
  <span class="dl">"</span><span class="s2">customers/retrieve</span><span class="dl">"</span><span class="p">,</span>
  <span class="k">async </span><span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">debugger</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">res</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">CustomerDataService</span><span class="p">.</span><span class="nf">getAll</span><span class="p">();</span>
    <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">);</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">updateCustomer</span> <span class="o">=</span> <span class="nf">createAsyncThunk</span><span class="p">(</span>
  <span class="dl">"</span><span class="s2">customers/update</span><span class="dl">"</span><span class="p">,</span>
  <span class="k">async </span><span class="p">({</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">data</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">res</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">CustomerDataService</span><span class="p">.</span><span class="nf">update</span><span class="p">(</span><span class="nx">id</span><span class="p">,</span> <span class="nx">data</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">);</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">deleteCustomer</span> <span class="o">=</span> <span class="nf">createAsyncThunk</span><span class="p">(</span>
  <span class="dl">"</span><span class="s2">customers/delete</span><span class="dl">"</span><span class="p">,</span>
  <span class="k">async </span><span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">await</span> <span class="nx">CustomerDataService</span><span class="p">.</span><span class="nf">remove</span><span class="p">(</span><span class="nx">id</span><span class="p">);</span>
    <span class="k">return</span> <span class="p">{</span> <span class="nx">id</span> <span class="p">};</span>
  <span class="p">}</span>
<span class="p">);</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">deleteAllCustomer</span> <span class="o">=</span> <span class="nf">createAsyncThunk</span><span class="p">(</span>
  <span class="dl">"</span><span class="s2">customers/deleteAll</span><span class="dl">"</span><span class="p">,</span>
  <span class="k">async </span><span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">res</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">CustomerDataService</span><span class="p">.</span><span class="nf">removeAll</span><span class="p">();</span>
    <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">);</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">findCustomerByName</span> <span class="o">=</span> <span class="nf">createAsyncThunk</span><span class="p">(</span>
  <span class="dl">"</span><span class="s2">customers/findByName</span><span class="dl">"</span><span class="p">,</span>
  <span class="k">async </span><span class="p">({</span> <span class="nx">name</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span> <span class="o">===</span> <span class="kc">null</span> <span class="o">||</span> <span class="nx">name</span> <span class="o">===</span> <span class="dl">""</span> <span class="p">?</span> <span class="dl">"</span><span class="s2">all</span><span class="dl">"</span> <span class="p">:</span> <span class="nx">name</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">res</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">CustomerDataService</span><span class="p">.</span><span class="nf">findByName</span><span class="p">(</span><span class="nx">name</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">);</span>

<span class="kd">const</span> <span class="nx">customerSlice</span> <span class="o">=</span> <span class="nf">createSlice</span><span class="p">({</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">customer</span><span class="dl">"</span><span class="p">,</span>
  <span class="nx">initialState</span><span class="p">,</span>
  <span class="na">extraReducers</span><span class="p">:</span> <span class="p">{</span>
    <span class="p">[</span><span class="nx">createCustomer</span><span class="p">.</span><span class="nx">fulfilled</span><span class="p">]:</span> <span class="p">(</span><span class="nx">state</span><span class="p">,</span> <span class="nx">action</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">state</span><span class="p">.</span><span class="nf">push</span><span class="p">(</span><span class="nx">action</span><span class="p">.</span><span class="nx">payload</span><span class="p">);</span>
    <span class="p">},</span>

    <span class="p">[</span><span class="nx">retrieveCustomers</span><span class="p">.</span><span class="nx">fulfilled</span><span class="p">]:</span> <span class="p">(</span><span class="nx">state</span><span class="p">,</span> <span class="nx">action</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">return</span> <span class="p">[...</span><span class="nx">action</span><span class="p">.</span><span class="nx">payload</span><span class="p">];</span>
    <span class="p">},</span>

    <span class="p">[</span><span class="nx">updateCustomer</span><span class="p">.</span><span class="nx">fulfilled</span><span class="p">]:</span> <span class="p">(</span><span class="nx">state</span><span class="p">,</span> <span class="nx">action</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">index</span> <span class="o">=</span> <span class="nx">state</span><span class="p">.</span><span class="nf">findIndex</span><span class="p">(</span>
        <span class="p">(</span><span class="nx">tutorial</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">tutorial</span><span class="p">.</span><span class="nx">id</span> <span class="o">===</span> <span class="nx">action</span><span class="p">.</span><span class="nx">payload</span><span class="p">.</span><span class="nx">id</span>
      <span class="p">);</span>
      <span class="nx">state</span><span class="p">[</span><span class="nx">index</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
        <span class="p">...</span><span class="nx">state</span><span class="p">[</span><span class="nx">index</span><span class="p">],</span>
        <span class="p">...</span><span class="nx">action</span><span class="p">.</span><span class="nx">payload</span><span class="p">,</span>
      <span class="p">};</span>
    <span class="p">},</span>

    <span class="p">[</span><span class="nx">deleteCustomer</span><span class="p">.</span><span class="nx">fulfilled</span><span class="p">]:</span> <span class="p">(</span><span class="nx">state</span><span class="p">,</span> <span class="nx">action</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="kd">let</span> <span class="nx">index</span> <span class="o">=</span> <span class="nx">state</span><span class="p">.</span><span class="nf">findIndex</span><span class="p">(({</span> <span class="nx">id</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="nx">id</span> <span class="o">===</span> <span class="nx">action</span><span class="p">.</span><span class="nx">payload</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span>
      <span class="nx">state</span><span class="p">.</span><span class="nf">splice</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
    <span class="p">},</span>
    <span class="p">[</span><span class="nx">deleteAllCustomer</span><span class="p">.</span><span class="nx">fulfilled</span><span class="p">]:</span> <span class="p">(</span><span class="nx">state</span><span class="p">,</span> <span class="nx">action</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">return</span> <span class="p">[];</span>
    <span class="p">},</span>
    <span class="p">[</span><span class="nx">findCustomerByName</span><span class="p">.</span><span class="nx">fulfilled</span><span class="p">]:</span> <span class="p">(</span><span class="nx">state</span><span class="p">,</span> <span class="nx">action</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">return</span> <span class="p">[...</span><span class="nx">action</span><span class="p">.</span><span class="nx">payload</span><span class="p">];</span>
    <span class="p">},</span>
  <span class="p">},</span>
<span class="p">});</span>

<span class="c1">// destructure reducer from customerSlice</span>
<span class="c1">// name mustbe reducer</span>
<span class="kd">const</span> <span class="p">{</span> <span class="nx">reducer</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">customerSlice</span><span class="p">;</span>
<span class="k">export</span> <span class="k">default</span> <span class="nx">reducer</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>Create Redux Store in src-&gt;redux folder name store.js</li>
</ul>

<p><strong>Store.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// This Store will bring Actions and Reducers together and hold the Application state.</span>

<span class="k">import</span> <span class="p">{</span> <span class="nx">configureStore</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@reduxjs/toolkit</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">productReducer</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./slices/productsSlice</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">customerReducer</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./slices/customersSlice</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">reducer</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">products</span><span class="p">:</span> <span class="nx">productReducer</span><span class="p">,</span>
  <span class="na">customers</span><span class="p">:</span> <span class="nx">customerReducer</span><span class="p">,</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">store</span> <span class="o">=</span> <span class="nf">configureStore</span><span class="p">({</span>
  <span class="na">reducer</span><span class="p">:</span> <span class="nx">reducer</span><span class="p">,</span>
  <span class="na">devTools</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
<span class="p">});</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">store</span><span class="p">;</span>
</code></pre></div></div>

<p><strong>Note:</strong><br />
The Store is the central entity that combines Actions and Reducers, responsible for managing the entire application state.</p>

<p>With the help of the <code class="language-plaintext highlighter-rouge">configureStore()</code> function from Redux Toolkit, you can enjoy the following automated benefits:</p>

<ol>
  <li>It enables the Redux DevTools Extension out of the box, providing powerful debugging capabilities.</li>
  <li>The thunk middleware is automatically set up, allowing you to start writing thunks without any additional configuration.</li>
</ol>

<p><strong>Step 15: Make state available to React components.</strong></p>

<ul>
  <li>Modify the index.js as follows. Here, we are wrapping the entire application in a <Provider> component to make store available to its child components.</Provider></li>
</ul>

<p><strong>Index.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="dl">"</span><span class="s2">react-toastify/dist/ReactToastify.css</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">ReactDOM</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-dom/client</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="dl">"</span><span class="s2">./index.css</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">App</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./App</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">reportWebVitals</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./reportWebVitals</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Provider</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-redux</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">store</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./redux/store</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">root</span> <span class="o">=</span> <span class="nx">ReactDOM</span><span class="p">.</span><span class="nf">createRoot</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">root</span><span class="dl">"</span><span class="p">));</span>
<span class="nx">root</span><span class="p">.</span><span class="nf">render</span><span class="p">(</span>
  <span class="o">&lt;</span><span class="nx">React</span><span class="p">.</span><span class="nx">StrictMode</span><span class="o">&gt;</span>
    <span class="p">{</span><span class="cm">/* Now we want our entire React App to access the store */</span><span class="p">}</span>
    <span class="o">&lt;</span><span class="nx">Provider</span> <span class="nx">store</span><span class="o">=</span><span class="p">{</span><span class="nx">store</span><span class="p">}</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">App</span> <span class="o">/&gt;</span>
    <span class="o">&lt;</span><span class="sr">/Provider</span><span class="err">&gt;
</span>  <span class="o">&lt;</span><span class="sr">/React.StrictMode</span><span class="err">&gt;
</span><span class="p">);</span>

<span class="c1">// If you want to start measuring performance in your app, pass a function</span>
<span class="c1">// to log results (for example: reportWebVitals(console.log))</span>
<span class="c1">// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals</span>
<span class="nf">reportWebVitals</span><span class="p">();</span>
</code></pre></div></div>

<p><strong>Step 16: Create a Component for Nav bar name TopNav.js in src-&gt;layout folder.</strong></p>

<p><strong>TopNav.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Link</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-router-dom</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">TopNav</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">nav</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">navbar navbar-expand navbar-dark bg-dark</span><span class="dl">"</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="dl">"</span><span class="s2">/products</span><span class="dl">"</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">navbar-brand</span><span class="dl">"</span><span class="o">&gt;</span>
        <span class="nx">Mahedee</span><span class="p">.</span><span class="nx">net</span>
      <span class="o">&lt;</span><span class="sr">/a</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">navbar-nav mr-auto</span><span class="dl">"</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">li</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">nav-item</span><span class="dl">"</span><span class="o">&gt;</span>
          <span class="o">&lt;</span><span class="nx">Link</span> <span class="nx">to</span><span class="o">=</span><span class="p">{</span><span class="dl">"</span><span class="s2">/products</span><span class="dl">"</span><span class="p">}</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">nav-link</span><span class="dl">"</span><span class="o">&gt;</span>
            <span class="nx">Products</span>
          <span class="o">&lt;</span><span class="sr">/Link</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="sr">/li</span><span class="err">&gt;
</span>
        <span class="o">&lt;</span><span class="nx">li</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">nav-item</span><span class="dl">"</span><span class="o">&gt;</span>
          <span class="o">&lt;</span><span class="nx">Link</span> <span class="nx">to</span><span class="o">=</span><span class="p">{</span><span class="dl">"</span><span class="s2">/customers</span><span class="dl">"</span><span class="p">}</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">nav-link</span><span class="dl">"</span><span class="o">&gt;</span>
            <span class="nx">Customers</span>
          <span class="o">&lt;</span><span class="sr">/Link</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="sr">/li</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/nav</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">TopNav</span><span class="p">;</span>
</code></pre></div></div>

<p><strong>Step 17: Create components for CRUD operation for Product in src-&gt;components-&gt;product.</strong></p>

<ul>
  <li>Create ProductList.js file for ProductList component.</li>
</ul>

<p><strong>ProductList.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">useCallback</span><span class="p">,</span> <span class="nx">useEffect</span><span class="p">,</span> <span class="nx">useState</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useDispatch</span><span class="p">,</span> <span class="nx">useSelector</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-redux</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Link</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-router-dom</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span>
  <span class="nx">deleteProduct</span><span class="p">,</span>
  <span class="nx">retrieveProducts</span><span class="p">,</span>
<span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../../redux/slices/productsSlice</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">WarningTostify</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../../helper/ToastifyMessage</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">ProductList</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">products</span> <span class="o">=</span> <span class="nf">useSelector</span><span class="p">((</span><span class="nx">state</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">state</span><span class="p">.</span><span class="nx">products</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">dispatch</span> <span class="o">=</span> <span class="nf">useDispatch</span><span class="p">();</span>

  <span class="kd">const</span> <span class="nx">initFetch</span> <span class="o">=</span> <span class="nf">useCallback</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nf">dispatch</span><span class="p">(</span><span class="nf">retrieveProducts</span><span class="p">());</span>
  <span class="p">},</span> <span class="p">[</span><span class="nx">dispatch</span><span class="p">]);</span>

  <span class="nf">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nf">initFetch</span><span class="p">();</span>
  <span class="p">},</span> <span class="p">[</span><span class="nx">initFetch</span><span class="p">]);</span>

  <span class="kd">function</span> <span class="nf">onDeleteProduct</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">debugger</span><span class="p">;</span>
    <span class="nf">dispatch</span><span class="p">(</span><span class="nf">deleteProduct</span><span class="p">(</span><span class="nx">id</span><span class="p">))</span>
      <span class="p">.</span><span class="nf">then</span><span class="p">((</span><span class="nx">response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nc">WarningTostify</span><span class="p">(</span><span class="s2">`Product with id: </span><span class="p">${</span><span class="nx">id</span><span class="p">}</span><span class="s2"> has been deleted.`</span><span class="p">);</span>
      <span class="p">})</span>
      <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span>
      <span class="p">});</span>
  <span class="p">}</span>

  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">card</span><span class="dl">"</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">card-body</span><span class="dl">"</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
          <span class="o">&lt;</span><span class="nx">h3</span><span class="o">&gt;</span><span class="nx">Product</span> <span class="nx">List</span><span class="o">&lt;</span><span class="sr">/h3</span><span class="err">&gt;
</span>          <span class="o">&lt;</span><span class="nx">Link</span> <span class="nx">to</span><span class="o">=</span><span class="p">{</span><span class="dl">"</span><span class="s2">/add-product/</span><span class="dl">"</span><span class="p">}</span><span class="o">&gt;</span>
            <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">btn btn-primary</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Create</span><span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>          <span class="o">&lt;</span><span class="sr">/Link</span><span class="err">&gt;
</span>
          <span class="o">&lt;</span><span class="nx">table</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">table table-stripped</span><span class="dl">"</span><span class="o">&gt;</span>
            <span class="o">&lt;</span><span class="nx">thead</span><span class="o">&gt;</span>
              <span class="o">&lt;</span><span class="nx">tr</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">th</span><span class="o">&gt;</span><span class="nx">Id</span><span class="o">&lt;</span><span class="sr">/th</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">th</span><span class="o">&gt;</span><span class="nx">Name</span><span class="o">&lt;</span><span class="sr">/th</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">th</span><span class="o">&gt;</span><span class="nx">Price</span><span class="o">&lt;</span><span class="sr">/th</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">th</span><span class="o">&gt;</span><span class="nx">Stock</span> <span class="nx">Quantity</span><span class="o">&lt;</span><span class="sr">/th</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">th</span><span class="o">&gt;</span><span class="nx">Actions</span><span class="o">&lt;</span><span class="sr">/th</span><span class="err">&gt;
</span>              <span class="o">&lt;</span><span class="sr">/tr</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="sr">/thead</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="nx">tbody</span><span class="o">&gt;</span>
              <span class="p">{</span><span class="nx">products</span> <span class="o">&amp;&amp;</span>
                <span class="nx">products</span><span class="p">.</span><span class="nf">map</span><span class="p">((</span><span class="nx">product</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span>
                  <span class="o">&lt;</span><span class="nx">tr</span> <span class="nx">key</span><span class="o">=</span><span class="p">{</span><span class="nx">product</span><span class="p">.</span><span class="nx">id</span><span class="p">}</span><span class="o">&gt;</span>
                    <span class="o">&lt;</span><span class="nx">td</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">product</span><span class="p">.</span><span class="nx">id</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/td</span><span class="err">&gt;
</span>                    <span class="o">&lt;</span><span class="nx">td</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">product</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/td</span><span class="err">&gt;
</span>                    <span class="o">&lt;</span><span class="nx">td</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">product</span><span class="p">.</span><span class="nx">price</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/td</span><span class="err">&gt;
</span>                    <span class="o">&lt;</span><span class="nx">td</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">product</span><span class="p">.</span><span class="nx">stockQuantity</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/td</span><span class="err">&gt;
</span>                    <span class="o">&lt;</span><span class="nx">td</span><span class="o">&gt;</span>
                      <span class="p">{</span><span class="dl">"</span><span class="s2"> </span><span class="dl">"</span><span class="p">}</span>
                      <span class="o">&lt;</span><span class="nx">Link</span>
                        <span class="nx">to</span><span class="o">=</span><span class="p">{</span><span class="dl">"</span><span class="s2">/edit-product/</span><span class="dl">"</span> <span class="o">+</span> <span class="nx">product</span><span class="p">.</span><span class="nx">id</span><span class="p">}</span>
                        <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">badge badge-warning</span><span class="dl">"</span>
                      <span class="o">&gt;</span>
                        <span class="nx">Edit</span>
                      <span class="o">&lt;</span><span class="sr">/Link</span><span class="err">&gt;
</span>                      <span class="o">||</span>
                      <span class="o">&lt;</span><span class="nx">Link</span>
                        <span class="nx">onClick</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="nf">onDeleteProduct</span><span class="p">(</span><span class="nx">product</span><span class="p">.</span><span class="nx">id</span><span class="p">)}</span>
                        <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">badge badge-danger</span><span class="dl">"</span>
                      <span class="o">&gt;</span>
                        <span class="nx">Delete</span>
                      <span class="o">&lt;</span><span class="sr">/Link</span><span class="err">&gt;
</span>                    <span class="o">&lt;</span><span class="sr">/td</span><span class="err">&gt;
</span>                  <span class="o">&lt;</span><span class="sr">/tr</span><span class="err">&gt;
</span>                <span class="p">))}</span>
            <span class="o">&lt;</span><span class="sr">/tbody</span><span class="err">&gt;
</span>          <span class="o">&lt;</span><span class="sr">/table</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">ProductList</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>Create AddProduct.js file for AddProduct component.</li>
</ul>

<p><strong>AddProduct.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">useState</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useDispatch</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-redux</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">createProduct</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../../redux/slices/productsSlice</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useNavigate</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-router-dom</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">SuccessToastify</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../../helper/ToastifyMessage</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">AddProduct</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">initialProductState</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">id</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span>
    <span class="na">description</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span>
    <span class="na">price</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
    <span class="na">stockQuantity</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
  <span class="p">};</span>

  <span class="kd">const</span> <span class="p">[</span><span class="nx">product</span><span class="p">,</span> <span class="nx">setProduct</span><span class="p">]</span> <span class="o">=</span> <span class="nf">useState</span><span class="p">(</span><span class="nx">initialProductState</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">navigate</span> <span class="o">=</span> <span class="nf">useNavigate</span><span class="p">();</span>

  <span class="kd">const</span> <span class="nx">dispatch</span> <span class="o">=</span> <span class="nf">useDispatch</span><span class="p">();</span>

  <span class="kd">const</span> <span class="nx">handleInputChange</span> <span class="o">=</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">value</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">;</span>

    <span class="nf">setProduct</span><span class="p">({</span> <span class="p">...</span><span class="nx">product</span><span class="p">,</span> <span class="p">[</span><span class="nx">name</span><span class="p">]:</span> <span class="nx">value</span> <span class="p">});</span>
  <span class="p">};</span>

  <span class="kd">const</span> <span class="nx">saveProduct</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nf">dispatch</span><span class="p">(</span><span class="nf">createProduct</span><span class="p">(</span><span class="nx">product</span><span class="p">))</span>
      <span class="p">.</span><span class="nf">unwrap</span><span class="p">()</span>
      <span class="p">.</span><span class="nf">then</span><span class="p">((</span><span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
        <span class="nf">setProduct</span><span class="p">({</span>
          <span class="na">id</span><span class="p">:</span> <span class="nx">data</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span>
          <span class="na">name</span><span class="p">:</span> <span class="nx">data</span><span class="p">.</span><span class="nx">title</span><span class="p">,</span>
          <span class="na">description</span><span class="p">:</span> <span class="nx">data</span><span class="p">.</span><span class="nx">description</span><span class="p">,</span>
          <span class="na">price</span><span class="p">:</span> <span class="nx">data</span><span class="p">.</span><span class="nx">price</span><span class="p">,</span>
          <span class="na">stockQuantity</span><span class="p">:</span> <span class="nx">data</span><span class="p">.</span><span class="nx">stockQuantity</span><span class="p">,</span>
        <span class="p">});</span>
        <span class="nc">SuccessToastify</span><span class="p">(</span><span class="dl">"</span><span class="s2">Product information saved successfully!!</span><span class="dl">"</span><span class="p">);</span>
        <span class="nf">navigate</span><span class="p">(</span><span class="dl">"</span><span class="s2">/products</span><span class="dl">"</span><span class="p">);</span>
      <span class="p">})</span>
      <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span>
      <span class="p">});</span>
  <span class="p">};</span>

  <span class="kd">const</span> <span class="nx">handleBackToList</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nf">navigate</span><span class="p">(</span><span class="dl">"</span><span class="s2">/products</span><span class="dl">"</span><span class="p">);</span>
  <span class="p">};</span>

  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">card</span><span class="dl">"</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">card-body</span><span class="dl">"</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">row</span><span class="dl">"</span><span class="o">&gt;</span>
          <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">col-md-3</span><span class="dl">"</span><span class="o">&gt;</span>
            <span class="o">&lt;</span><span class="nx">h3</span><span class="o">&gt;</span><span class="nx">Create</span> <span class="nx">Product</span><span class="o">&lt;</span><span class="sr">/h3</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
              <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-group</span><span class="dl">"</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">label</span> <span class="nx">htmlFor</span><span class="o">=</span><span class="dl">"</span><span class="s2">name</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Name</span><span class="o">&lt;</span><span class="sr">/label</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">input</span>
                  <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">text</span><span class="dl">"</span>
                  <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-control</span><span class="dl">"</span>
                  <span class="nx">id</span><span class="o">=</span><span class="dl">"</span><span class="s2">name</span><span class="dl">"</span>
                  <span class="nx">required</span>
                  <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nx">product</span><span class="p">.</span><span class="nx">name</span> <span class="o">||</span> <span class="dl">""</span><span class="p">}</span>
                  <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="nx">handleInputChange</span><span class="p">}</span>
                  <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">name</span><span class="dl">"</span>
                <span class="o">/&gt;</span>
              <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>              <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-group</span><span class="dl">"</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">label</span> <span class="nx">htmlFor</span><span class="o">=</span><span class="dl">"</span><span class="s2">description</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Description</span><span class="o">&lt;</span><span class="sr">/label</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">input</span>
                  <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">text</span><span class="dl">"</span>
                  <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-control</span><span class="dl">"</span>
                  <span class="nx">id</span><span class="o">=</span><span class="dl">"</span><span class="s2">description</span><span class="dl">"</span>
                  <span class="nx">required</span>
                  <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nx">product</span><span class="p">.</span><span class="nx">description</span> <span class="o">||</span> <span class="dl">""</span><span class="p">}</span>
                  <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="nx">handleInputChange</span><span class="p">}</span>
                  <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">description</span><span class="dl">"</span>
                <span class="o">/&gt;</span>
              <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>              <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-group</span><span class="dl">"</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">label</span> <span class="nx">htmlFor</span><span class="o">=</span><span class="dl">"</span><span class="s2">price</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Price</span><span class="o">&lt;</span><span class="sr">/label</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">input</span>
                  <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">text</span><span class="dl">"</span>
                  <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-control</span><span class="dl">"</span>
                  <span class="nx">id</span><span class="o">=</span><span class="dl">"</span><span class="s2">price</span><span class="dl">"</span>
                  <span class="nx">required</span>
                  <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nx">product</span><span class="p">.</span><span class="nx">price</span> <span class="o">||</span> <span class="dl">""</span><span class="p">}</span>
                  <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="nx">handleInputChange</span><span class="p">}</span>
                  <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">price</span><span class="dl">"</span>
                <span class="o">/&gt;</span>
              <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>              <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-group</span><span class="dl">"</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">label</span> <span class="nx">htmlFor</span><span class="o">=</span><span class="dl">"</span><span class="s2">stockQuantity</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Stock</span> <span class="nx">Quantity</span><span class="o">&lt;</span><span class="sr">/label</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">input</span>
                  <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">text</span><span class="dl">"</span>
                  <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-control</span><span class="dl">"</span>
                  <span class="nx">id</span><span class="o">=</span><span class="dl">"</span><span class="s2">stockQuantity</span><span class="dl">"</span>
                  <span class="nx">required</span>
                  <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nx">product</span><span class="p">.</span><span class="nx">stockQuantity</span> <span class="o">||</span> <span class="dl">""</span><span class="p">}</span>
                  <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="nx">handleInputChange</span><span class="p">}</span>
                  <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">stockQuantity</span><span class="dl">"</span>
                <span class="o">/&gt;</span>
              <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>              <span class="o">&lt;</span><span class="nx">button</span>
                <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">button</span><span class="dl">"</span>
                <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="nx">saveProduct</span><span class="p">}</span>
                <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">btn btn-success</span><span class="dl">"</span>
              <span class="o">&gt;</span>
                <span class="nx">Submit</span>
              <span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>              <span class="o">||</span>
              <span class="o">&lt;</span><span class="nx">button</span>
                <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">button</span><span class="dl">"</span>
                <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">btn btn-info</span><span class="dl">"</span>
                <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="nx">handleBackToList</span><span class="p">}</span>
              <span class="o">&gt;</span>
                <span class="nx">Back</span> <span class="nx">to</span> <span class="nx">List</span>
              <span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>          <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">AddProduct</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>Create EditProduct.js file for EditProduct component.</li>
</ul>

<p><strong>EditProduct.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">useNavigate</span><span class="p">,</span> <span class="nx">useParams</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-router-dom</span><span class="dl">"</span><span class="p">;</span>

<span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">useEffect</span><span class="p">,</span> <span class="nx">useState</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useDispatch</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-redux</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">ProductDataService</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../../services/ProductService</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">updateProduct</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../../redux/slices/productsSlice</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">SuccessToastify</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../../helper/ToastifyMessage</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">EditProduct</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">{</span> <span class="nx">id</span> <span class="p">}</span> <span class="o">=</span> <span class="nf">useParams</span><span class="p">();</span>
  <span class="kd">let</span> <span class="nx">navigate</span> <span class="o">=</span> <span class="nf">useNavigate</span><span class="p">();</span>

  <span class="kd">const</span> <span class="nx">initialProductState</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">id</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span>
    <span class="na">description</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span>
    <span class="na">price</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
    <span class="na">stockQuantity</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
  <span class="p">};</span>

  <span class="kd">const</span> <span class="p">[</span><span class="nx">productObj</span><span class="p">,</span> <span class="nx">setProductObj</span><span class="p">]</span> <span class="o">=</span> <span class="nf">useState</span><span class="p">(</span><span class="nx">initialProductState</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">dispatch</span> <span class="o">=</span> <span class="nf">useDispatch</span><span class="p">();</span>

  <span class="kd">const</span> <span class="nx">getProduct</span> <span class="o">=</span> <span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">ProductDataService</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span>
      <span class="p">.</span><span class="nf">then</span><span class="p">((</span><span class="nx">response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nf">setProductObj</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
      <span class="p">})</span>
      <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span>
      <span class="p">});</span>
  <span class="p">};</span>

  <span class="nf">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if </span><span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
      <span class="nf">getProduct</span><span class="p">(</span><span class="nx">id</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">},</span> <span class="p">[</span><span class="nx">id</span><span class="p">]);</span>

  <span class="kd">const</span> <span class="nx">handleInputChange</span> <span class="o">=</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">value</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">;</span>
    <span class="nf">setProductObj</span><span class="p">({</span> <span class="p">...</span><span class="nx">productObj</span><span class="p">,</span> <span class="p">[</span><span class="nx">name</span><span class="p">]:</span> <span class="nx">value</span> <span class="p">});</span>
  <span class="p">};</span>

  <span class="kd">const</span> <span class="nx">updateProductContent</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nf">dispatch</span><span class="p">(</span><span class="nf">updateProduct</span><span class="p">({</span> <span class="na">id</span><span class="p">:</span> <span class="nx">productObj</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="na">data</span><span class="p">:</span> <span class="nx">productObj</span> <span class="p">}))</span>
      <span class="p">.</span><span class="nf">unwrap</span><span class="p">()</span>
      <span class="p">.</span><span class="nf">then</span><span class="p">((</span><span class="nx">response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nc">SuccessToastify</span><span class="p">(</span><span class="dl">"</span><span class="s2">Product information has been updated successfully!</span><span class="dl">"</span><span class="p">);</span>
        <span class="nf">navigate</span><span class="p">(</span><span class="dl">"</span><span class="s2">/products</span><span class="dl">"</span><span class="p">);</span>
      <span class="p">})</span>
      <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span>
      <span class="p">});</span>
  <span class="p">};</span>

  <span class="kd">const</span> <span class="nx">backtoList</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nf">navigate</span><span class="p">(</span><span class="dl">"</span><span class="s2">/products</span><span class="dl">"</span><span class="p">);</span>
  <span class="p">};</span>

  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">card</span><span class="dl">"</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">card-body</span><span class="dl">"</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">row</span><span class="dl">"</span><span class="o">&gt;</span>
          <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">col-md-3</span><span class="dl">"</span><span class="o">&gt;</span>
            <span class="o">&lt;</span><span class="nx">h3</span><span class="o">&gt;</span><span class="nx">Edit</span> <span class="nx">Product</span><span class="o">&lt;</span><span class="sr">/h3</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="nx">form</span><span class="o">&gt;</span>
              <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-group</span><span class="dl">"</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">label</span> <span class="nx">htmlFor</span><span class="o">=</span><span class="dl">"</span><span class="s2">name</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Name</span><span class="o">&lt;</span><span class="sr">/label</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">input</span>
                  <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">text</span><span class="dl">"</span>
                  <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-control</span><span class="dl">"</span>
                  <span class="nx">id</span><span class="o">=</span><span class="dl">"</span><span class="s2">name</span><span class="dl">"</span>
                  <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">name</span><span class="dl">"</span>
                  <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nx">productObj</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span>
                  <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="nx">handleInputChange</span><span class="p">}</span>
                <span class="sr">/</span><span class="err">&gt;
</span>              <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>              <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-group</span><span class="dl">"</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">label</span> <span class="nx">htmlFor</span><span class="o">=</span><span class="dl">"</span><span class="s2">description</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Description</span><span class="o">&lt;</span><span class="sr">/label</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">input</span>
                  <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">text</span><span class="dl">"</span>
                  <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-control</span><span class="dl">"</span>
                  <span class="nx">id</span><span class="o">=</span><span class="dl">"</span><span class="s2">description</span><span class="dl">"</span>
                  <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">description</span><span class="dl">"</span>
                  <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nx">productObj</span><span class="p">.</span><span class="nx">description</span><span class="p">}</span>
                  <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="nx">handleInputChange</span><span class="p">}</span>
                <span class="sr">/</span><span class="err">&gt;
</span>              <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>
              <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-group</span><span class="dl">"</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">label</span> <span class="nx">htmlFor</span><span class="o">=</span><span class="dl">"</span><span class="s2">price</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Price</span><span class="o">&lt;</span><span class="sr">/label</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">input</span>
                  <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">text</span><span class="dl">"</span>
                  <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-control</span><span class="dl">"</span>
                  <span class="nx">id</span><span class="o">=</span><span class="dl">"</span><span class="s2">price</span><span class="dl">"</span>
                  <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">price</span><span class="dl">"</span>
                  <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nx">productObj</span><span class="p">.</span><span class="nx">price</span><span class="p">}</span>
                  <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="nx">handleInputChange</span><span class="p">}</span>
                <span class="sr">/</span><span class="err">&gt;
</span>              <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>
              <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-group</span><span class="dl">"</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">label</span> <span class="nx">htmlFor</span><span class="o">=</span><span class="dl">"</span><span class="s2">stockQuantity</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Stock</span> <span class="nx">Quantity</span><span class="o">&lt;</span><span class="sr">/label</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">input</span>
                  <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">text</span><span class="dl">"</span>
                  <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-control</span><span class="dl">"</span>
                  <span class="nx">id</span><span class="o">=</span><span class="dl">"</span><span class="s2">stockQuantity</span><span class="dl">"</span>
                  <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">stockQuantity</span><span class="dl">"</span>
                  <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nx">productObj</span><span class="p">.</span><span class="nx">stockQuantity</span><span class="p">}</span>
                  <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="nx">handleInputChange</span><span class="p">}</span>
                <span class="sr">/</span><span class="err">&gt;
</span>              <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="sr">/form</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-group</span><span class="dl">"</span><span class="o">&gt;</span>
              <span class="o">&lt;</span><span class="nx">input</span>
                <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">button</span><span class="dl">"</span>
                <span class="nx">value</span><span class="o">=</span><span class="dl">"</span><span class="s2">Edit</span><span class="dl">"</span>
                <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">btn btn-primary</span><span class="dl">"</span>
                <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="nx">updateProductContent</span><span class="p">}</span>
              <span class="o">&gt;&lt;</span><span class="sr">/input</span><span class="err">&gt;
</span>              <span class="o">||</span>
              <span class="o">&lt;</span><span class="nx">input</span>
                <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">button</span><span class="dl">"</span>
                <span class="nx">value</span><span class="o">=</span><span class="dl">"</span><span class="s2">Back to List</span><span class="dl">"</span>
                <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">btn btn-primary</span><span class="dl">"</span>
                <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="nx">backtoList</span><span class="p">}</span>
              <span class="o">&gt;&lt;</span><span class="sr">/input</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>          <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">EditProduct</span><span class="p">;</span>
</code></pre></div></div>

<p><strong>Step 18: Create components for CRUD operation for Customer in src-&gt;components-&gt;customer.</strong></p>

<ul>
  <li>Create CustomerList.js file for CustomerList component.</li>
</ul>

<p><strong>CustomerList.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">useCallback</span><span class="p">,</span> <span class="nx">useEffect</span><span class="p">,</span> <span class="nx">useState</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useDispatch</span><span class="p">,</span> <span class="nx">useSelector</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-redux</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Link</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-router-dom</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span>
  <span class="nx">deleteCustomer</span><span class="p">,</span>
  <span class="nx">findCustomerByName</span><span class="p">,</span>
  <span class="nx">retrieveCustomers</span><span class="p">,</span>
<span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../../redux/slices/customersSlice</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">ConvertDateISOString</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../../utils/Conversion</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">WarningTostify</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../../helper/ToastifyMessage</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">CustomerList</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">searchCustomer</span><span class="p">,</span> <span class="nx">setSearchCustomer</span><span class="p">]</span> <span class="o">=</span> <span class="nf">useState</span><span class="p">(</span><span class="dl">""</span><span class="p">);</span>

  <span class="kd">const</span> <span class="nx">customers</span> <span class="o">=</span> <span class="nf">useSelector</span><span class="p">((</span><span class="nx">state</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">state</span><span class="p">.</span><span class="nx">customers</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">dispatch</span> <span class="o">=</span> <span class="nf">useDispatch</span><span class="p">();</span>
  <span class="kd">const</span> <span class="nx">initFetch</span> <span class="o">=</span> <span class="nf">useCallback</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nf">dispatch</span><span class="p">(</span><span class="nf">retrieveCustomers</span><span class="p">());</span>
  <span class="p">},</span> <span class="p">[</span><span class="nx">dispatch</span><span class="p">]);</span>

  <span class="nf">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nf">initFetch</span><span class="p">();</span>
  <span class="p">},</span> <span class="p">[</span><span class="nx">initFetch</span><span class="p">]);</span>

  <span class="kd">function</span> <span class="nf">onDeleteCustomer</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
    <span class="nf">dispatch</span><span class="p">(</span><span class="nf">deleteCustomer</span><span class="p">(</span><span class="nx">id</span><span class="p">))</span>
      <span class="p">.</span><span class="nf">then</span><span class="p">((</span><span class="nx">response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">response</span><span class="p">);</span>
        <span class="nc">WarningTostify</span><span class="p">(</span><span class="dl">"</span><span class="s2">Customer has been deleted</span><span class="dl">"</span><span class="p">);</span>
      <span class="p">})</span>
      <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span>
      <span class="p">});</span>
  <span class="p">}</span>

  <span class="kd">const</span> <span class="nx">onChangeSearchCustomer</span> <span class="o">=</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">searchCustomer</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>

    <span class="nf">setSearchCustomer</span><span class="p">(</span><span class="nx">searchCustomer</span><span class="p">);</span>
  <span class="p">};</span>

  <span class="kd">const</span> <span class="nx">findByCustomerName</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nf">dispatch</span><span class="p">(</span><span class="nf">findCustomerByName</span><span class="p">({</span> <span class="na">name</span><span class="p">:</span> <span class="nx">searchCustomer</span> <span class="p">}));</span>
  <span class="p">};</span>

  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">card</span><span class="dl">"</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">card-body</span><span class="dl">"</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
          <span class="o">&lt;</span><span class="nx">h3</span><span class="o">&gt;</span><span class="nx">Customer</span> <span class="nx">List</span><span class="o">&lt;</span><span class="sr">/h3</span><span class="err">&gt;
</span>          <span class="o">&lt;</span><span class="nx">Link</span> <span class="nx">to</span><span class="o">=</span><span class="p">{</span><span class="dl">"</span><span class="s2">/add-customer/</span><span class="dl">"</span><span class="p">}</span><span class="o">&gt;</span>
            <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">btn btn-primary</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Create</span><span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>          <span class="o">&lt;</span><span class="sr">/Link</span><span class="err">&gt;
</span>
          <span class="o">&lt;</span><span class="nx">br</span><span class="o">&gt;&lt;</span><span class="sr">/br</span><span class="err">&gt;
</span>          <span class="o">&lt;</span><span class="nx">br</span><span class="o">&gt;&lt;</span><span class="sr">/br</span><span class="err">&gt;
</span>          <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">input-group mb-3</span><span class="dl">"</span><span class="o">&gt;</span>
            <span class="o">&lt;</span><span class="nx">input</span>
              <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">text</span><span class="dl">"</span>
              <span class="nx">placeholder</span><span class="o">=</span><span class="dl">"</span><span class="s2">Search by customer name</span><span class="dl">"</span>
              <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-control</span><span class="dl">"</span>
              <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nx">searchCustomer</span><span class="p">}</span>
              <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="nx">onChangeSearchCustomer</span><span class="p">}</span>
            <span class="sr">/</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">input-group-append</span><span class="dl">"</span><span class="o">&gt;</span>
              <span class="o">&lt;</span><span class="nx">button</span>
                <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">btn btn-info </span><span class="dl">"</span>
                <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">button</span><span class="dl">"</span>
                <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="nx">findByCustomerName</span><span class="p">}</span>
              <span class="o">&gt;</span>
                <span class="nx">Search</span>
              <span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>          <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>
          <span class="o">&lt;</span><span class="nx">table</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">table table-stripped</span><span class="dl">"</span><span class="o">&gt;</span>
            <span class="o">&lt;</span><span class="nx">thead</span><span class="o">&gt;</span>
              <span class="o">&lt;</span><span class="nx">tr</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">th</span><span class="o">&gt;</span><span class="nx">Id</span><span class="o">&lt;</span><span class="sr">/th</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">th</span><span class="o">&gt;</span><span class="nx">First</span> <span class="nx">Name</span><span class="o">&lt;</span><span class="sr">/th</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">th</span><span class="o">&gt;</span><span class="nx">Last</span> <span class="nx">Name</span><span class="o">&lt;</span><span class="sr">/th</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">th</span><span class="o">&gt;</span><span class="nx">Email</span><span class="o">&lt;</span><span class="sr">/th</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">th</span><span class="o">&gt;</span><span class="nx">Phone</span><span class="o">&lt;</span><span class="sr">/th</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">th</span><span class="o">&gt;</span><span class="nx">Birth</span> <span class="nb">Date</span><span class="o">&lt;</span><span class="sr">/th</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">th</span><span class="o">&gt;</span><span class="nx">Actions</span><span class="o">&lt;</span><span class="sr">/th</span><span class="err">&gt;
</span>              <span class="o">&lt;</span><span class="sr">/tr</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="sr">/thead</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="nx">tbody</span><span class="o">&gt;</span>
              <span class="p">{</span><span class="nx">customers</span> <span class="o">&amp;&amp;</span>
                <span class="nx">customers</span><span class="p">.</span><span class="nf">map</span><span class="p">((</span><span class="nx">customer</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span>
                  <span class="o">&lt;</span><span class="nx">tr</span> <span class="nx">key</span><span class="o">=</span><span class="p">{</span><span class="nx">customer</span><span class="p">.</span><span class="nx">id</span><span class="p">}</span><span class="o">&gt;</span>
                    <span class="o">&lt;</span><span class="nx">td</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">customer</span><span class="p">.</span><span class="nx">id</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/td</span><span class="err">&gt;
</span>                    <span class="o">&lt;</span><span class="nx">td</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">customer</span><span class="p">.</span><span class="nx">firstName</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/td</span><span class="err">&gt;
</span>                    <span class="o">&lt;</span><span class="nx">td</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">customer</span><span class="p">.</span><span class="nx">lastName</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/td</span><span class="err">&gt;
</span>                    <span class="o">&lt;</span><span class="nx">td</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">customer</span><span class="p">.</span><span class="nx">email</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/td</span><span class="err">&gt;
</span>                    <span class="o">&lt;</span><span class="nx">td</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">customer</span><span class="p">.</span><span class="nx">phone</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/td</span><span class="err">&gt;
</span>                    <span class="o">&lt;</span><span class="nx">td</span><span class="o">&gt;</span><span class="p">{</span><span class="nc">ConvertDateISOString</span><span class="p">(</span><span class="nx">customer</span><span class="p">.</span><span class="nx">birthDate</span><span class="p">)}</span><span class="o">&lt;</span><span class="sr">/td</span><span class="err">&gt;
</span>                    <span class="o">&lt;</span><span class="nx">td</span><span class="o">&gt;</span>
                      <span class="p">{</span><span class="dl">"</span><span class="s2"> </span><span class="dl">"</span><span class="p">}</span>
                      <span class="o">&lt;</span><span class="nx">Link</span>
                        <span class="nx">to</span><span class="o">=</span><span class="p">{</span><span class="dl">"</span><span class="s2">/edit-customer/</span><span class="dl">"</span> <span class="o">+</span> <span class="nx">customer</span><span class="p">.</span><span class="nx">id</span><span class="p">}</span>
                        <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">badge badge-warning</span><span class="dl">"</span>
                      <span class="o">&gt;</span>
                        <span class="nx">Edit</span>
                      <span class="o">&lt;</span><span class="sr">/Link</span><span class="err">&gt;
</span>                      <span class="o">||</span>
                      <span class="o">&lt;</span><span class="nx">Link</span>
                        <span class="nx">onClick</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="nf">onDeleteCustomer</span><span class="p">(</span><span class="nx">customer</span><span class="p">.</span><span class="nx">id</span><span class="p">)}</span>
                        <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">badge badge-danger</span><span class="dl">"</span>
                      <span class="o">&gt;</span>
                        <span class="nx">Delete</span>
                      <span class="o">&lt;</span><span class="sr">/Link</span><span class="err">&gt;
</span>                    <span class="o">&lt;</span><span class="sr">/td</span><span class="err">&gt;
</span>                  <span class="o">&lt;</span><span class="sr">/tr</span><span class="err">&gt;
</span>                <span class="p">))}</span>
            <span class="o">&lt;</span><span class="sr">/tbody</span><span class="err">&gt;
</span>          <span class="o">&lt;</span><span class="sr">/table</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">CustomerList</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>Create AddCustomer.js file for AddCustomer component.</li>
</ul>

<p><strong>AddCustomer.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">useState</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useDispatch</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-redux</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useNavigate</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-router-dom</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">createCustomer</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../../redux/slices/customersSlice</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">SuccessToastify</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../../helper/ToastifyMessage</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">AddCustomer</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">initialCustomerState</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">id</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
    <span class="na">firstName</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span>
    <span class="na">lastName</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span>
    <span class="na">email</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span>
    <span class="na">phone</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span>
    <span class="na">birthDate</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span>
  <span class="p">};</span>

  <span class="kd">const</span> <span class="p">[</span><span class="nx">customer</span><span class="p">,</span> <span class="nx">setCustomer</span><span class="p">]</span> <span class="o">=</span> <span class="nf">useState</span><span class="p">(</span><span class="nx">initialCustomerState</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">navigate</span> <span class="o">=</span> <span class="nf">useNavigate</span><span class="p">();</span>

  <span class="kd">const</span> <span class="nx">dispatch</span> <span class="o">=</span> <span class="nf">useDispatch</span><span class="p">();</span>

  <span class="kd">const</span> <span class="nx">handleInputChange</span> <span class="o">=</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">value</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">;</span>

    <span class="nf">setCustomer</span><span class="p">({</span> <span class="p">...</span><span class="nx">customer</span><span class="p">,</span> <span class="p">[</span><span class="nx">name</span><span class="p">]:</span> <span class="nx">value</span> <span class="p">});</span>
  <span class="p">};</span>

  <span class="kd">const</span> <span class="nx">saveCustomer</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nf">dispatch</span><span class="p">(</span><span class="nf">createCustomer</span><span class="p">(</span><span class="nx">customer</span><span class="p">))</span>
      <span class="p">.</span><span class="nf">unwrap</span><span class="p">()</span>
      <span class="p">.</span><span class="nf">then</span><span class="p">((</span><span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nc">SuccessToastify</span><span class="p">(</span><span class="dl">"</span><span class="s2">Customer has been created successfully!</span><span class="dl">"</span><span class="p">);</span>
        <span class="nf">setCustomer</span><span class="p">({</span>
          <span class="na">id</span><span class="p">:</span> <span class="nx">data</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span>
          <span class="na">firstName</span><span class="p">:</span> <span class="nx">data</span><span class="p">.</span><span class="nx">firstName</span><span class="p">,</span>
          <span class="na">lastName</span><span class="p">:</span> <span class="nx">data</span><span class="p">.</span><span class="nx">lastName</span><span class="p">,</span>
          <span class="na">email</span><span class="p">:</span> <span class="nx">data</span><span class="p">.</span><span class="nx">email</span><span class="p">,</span>
          <span class="na">phone</span><span class="p">:</span> <span class="nx">data</span><span class="p">.</span><span class="nx">phone</span><span class="p">,</span>
          <span class="na">birthDate</span><span class="p">:</span> <span class="nx">data</span><span class="p">.</span><span class="nx">birthDate</span><span class="p">,</span>
        <span class="p">});</span>
        <span class="nf">navigate</span><span class="p">(</span><span class="dl">"</span><span class="s2">/customers</span><span class="dl">"</span><span class="p">);</span>
      <span class="p">})</span>
      <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span>
      <span class="p">});</span>
  <span class="p">};</span>

  <span class="kd">const</span> <span class="nx">backToList</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nf">navigate</span><span class="p">(</span><span class="dl">"</span><span class="s2">/customers</span><span class="dl">"</span><span class="p">);</span>
  <span class="p">};</span>

  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">card</span><span class="dl">"</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">card-body</span><span class="dl">"</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">row</span><span class="dl">"</span><span class="o">&gt;</span>
          <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">col-md-3</span><span class="dl">"</span><span class="o">&gt;</span>
            <span class="o">&lt;</span><span class="nx">h3</span><span class="o">&gt;</span><span class="nx">Create</span> <span class="nx">Customer</span><span class="o">&lt;</span><span class="sr">/h3</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
              <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-group</span><span class="dl">"</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">label</span> <span class="nx">htmlFor</span><span class="o">=</span><span class="dl">"</span><span class="s2">firstName</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">First</span> <span class="nx">Name</span><span class="o">&lt;</span><span class="sr">/label</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">input</span>
                  <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">text</span><span class="dl">"</span>
                  <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-control</span><span class="dl">"</span>
                  <span class="nx">id</span><span class="o">=</span><span class="dl">"</span><span class="s2">firstName</span><span class="dl">"</span>
                  <span class="nx">required</span>
                  <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nx">customer</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">||</span> <span class="dl">""</span><span class="p">}</span>
                  <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="nx">handleInputChange</span><span class="p">}</span>
                  <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">firstName</span><span class="dl">"</span>
                <span class="o">/&gt;</span>
              <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>              <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-group</span><span class="dl">"</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">label</span> <span class="nx">htmlFor</span><span class="o">=</span><span class="dl">"</span><span class="s2">description</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Last</span> <span class="nx">Name</span><span class="o">&lt;</span><span class="sr">/label</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">input</span>
                  <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">text</span><span class="dl">"</span>
                  <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-control</span><span class="dl">"</span>
                  <span class="nx">id</span><span class="o">=</span><span class="dl">"</span><span class="s2">lastName</span><span class="dl">"</span>
                  <span class="nx">required</span>
                  <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nx">customer</span><span class="p">.</span><span class="nx">lastName</span> <span class="o">||</span> <span class="dl">""</span><span class="p">}</span>
                  <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="nx">handleInputChange</span><span class="p">}</span>
                  <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">lastName</span><span class="dl">"</span>
                <span class="o">/&gt;</span>
              <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>              <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-group</span><span class="dl">"</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">label</span> <span class="nx">htmlFor</span><span class="o">=</span><span class="dl">"</span><span class="s2">email</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Email</span><span class="o">&lt;</span><span class="sr">/label</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">input</span>
                  <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">text</span><span class="dl">"</span>
                  <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-control</span><span class="dl">"</span>
                  <span class="nx">id</span><span class="o">=</span><span class="dl">"</span><span class="s2">email</span><span class="dl">"</span>
                  <span class="nx">required</span>
                  <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nx">customer</span><span class="p">.</span><span class="nx">email</span> <span class="o">||</span> <span class="dl">""</span><span class="p">}</span>
                  <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="nx">handleInputChange</span><span class="p">}</span>
                  <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">email</span><span class="dl">"</span>
                <span class="o">/&gt;</span>
              <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>              <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-group</span><span class="dl">"</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">label</span> <span class="nx">htmlFor</span><span class="o">=</span><span class="dl">"</span><span class="s2">phone</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Phone</span><span class="o">&lt;</span><span class="sr">/label</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">input</span>
                  <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">text</span><span class="dl">"</span>
                  <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-control</span><span class="dl">"</span>
                  <span class="nx">id</span><span class="o">=</span><span class="dl">"</span><span class="s2">phone</span><span class="dl">"</span>
                  <span class="nx">required</span>
                  <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nx">customer</span><span class="p">.</span><span class="nx">phone</span> <span class="o">||</span> <span class="dl">""</span><span class="p">}</span>
                  <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="nx">handleInputChange</span><span class="p">}</span>
                  <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">phone</span><span class="dl">"</span>
                <span class="o">/&gt;</span>
              <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>              <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-group</span><span class="dl">"</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">label</span> <span class="nx">htmlFor</span><span class="o">=</span><span class="dl">"</span><span class="s2">birthDate</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Birth</span> <span class="nb">Date</span><span class="o">&lt;</span><span class="sr">/label</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">input</span>
                  <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">date</span><span class="dl">"</span>
                  <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-control</span><span class="dl">"</span>
                  <span class="nx">id</span><span class="o">=</span><span class="dl">"</span><span class="s2">birthDate</span><span class="dl">"</span>
                  <span class="nx">required</span>
                  <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nx">customer</span><span class="p">.</span><span class="nx">birthDate</span> <span class="o">||</span> <span class="dl">""</span><span class="p">}</span>
                  <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="nx">handleInputChange</span><span class="p">}</span>
                  <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">birthDate</span><span class="dl">"</span>
                <span class="o">/&gt;</span>
              <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>              <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="nx">saveCustomer</span><span class="p">}</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">btn btn-success</span><span class="dl">"</span><span class="o">&gt;</span>
                <span class="nx">Submit</span>
              <span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>              <span class="o">||</span>
              <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">btn btn-success</span><span class="dl">"</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="nx">backToList</span><span class="p">}</span><span class="o">&gt;</span>
                <span class="nx">Back</span> <span class="nx">to</span> <span class="nx">List</span>
              <span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>          <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">AddCustomer</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>Create EditCustomer.js file for EditCustomer component.</li>
</ul>

<p><strong>EditCustomer.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">useEffect</span><span class="p">,</span> <span class="nx">useState</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useDispatch</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-redux</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useNavigate</span><span class="p">,</span> <span class="nx">useParams</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-router-dom</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">CustomerDataService</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../../services/CustomerService</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">updateCustomer</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../../redux/slices/customersSlice</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">SuccessToastify</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../../helper/ToastifyMessage</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">ConvertDateISOString</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../../utils/Conversion</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">EditCustomer</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">{</span> <span class="nx">id</span> <span class="p">}</span> <span class="o">=</span> <span class="nf">useParams</span><span class="p">();</span>
  <span class="kd">let</span> <span class="nx">navigate</span> <span class="o">=</span> <span class="nf">useNavigate</span><span class="p">();</span>

  <span class="kd">const</span> <span class="nx">initialCustomerState</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">id</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
    <span class="na">firstName</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span>
    <span class="na">lastName</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span>
    <span class="na">email</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span>
    <span class="na">phone</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span>
    <span class="na">birthDate</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
  <span class="p">};</span>

  <span class="kd">const</span> <span class="p">[</span><span class="nx">customerObj</span><span class="p">,</span> <span class="nx">setCustomerObj</span><span class="p">]</span> <span class="o">=</span> <span class="nf">useState</span><span class="p">(</span><span class="nx">initialCustomerState</span><span class="p">);</span>

  <span class="kd">const</span> <span class="nx">dispatch</span> <span class="o">=</span> <span class="nf">useDispatch</span><span class="p">();</span>

  <span class="kd">const</span> <span class="nx">getCustomer</span> <span class="o">=</span> <span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">CustomerDataService</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span>
      <span class="p">.</span><span class="nf">then</span><span class="p">((</span><span class="nx">response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nf">setCustomerObj</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
      <span class="p">})</span>
      <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span>
      <span class="p">});</span>
  <span class="p">};</span>

  <span class="nf">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if </span><span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
      <span class="nf">getCustomer</span><span class="p">(</span><span class="nx">id</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">},</span> <span class="p">[</span><span class="nx">id</span><span class="p">]);</span>

  <span class="kd">const</span> <span class="nx">handleInputChange</span> <span class="o">=</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">value</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">;</span>
    <span class="nf">setCustomerObj</span><span class="p">({</span> <span class="p">...</span><span class="nx">customerObj</span><span class="p">,</span> <span class="p">[</span><span class="nx">name</span><span class="p">]:</span> <span class="nx">value</span> <span class="p">});</span>
  <span class="p">};</span>

  <span class="kd">const</span> <span class="nx">backtoList</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nf">navigate</span><span class="p">(</span><span class="dl">"</span><span class="s2">/customers</span><span class="dl">"</span><span class="p">);</span>
  <span class="p">};</span>

  <span class="kd">const</span> <span class="nx">onSubmit</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Clicked submit button</span><span class="dl">"</span><span class="p">);</span>

    <span class="nf">dispatch</span><span class="p">(</span><span class="nf">updateCustomer</span><span class="p">({</span> <span class="na">id</span><span class="p">:</span> <span class="nx">customerObj</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="na">data</span><span class="p">:</span> <span class="nx">customerObj</span> <span class="p">}))</span>
      <span class="p">.</span><span class="nf">unwrap</span><span class="p">()</span>
      <span class="p">.</span><span class="nf">then</span><span class="p">((</span><span class="nx">response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">response</span><span class="p">);</span>
        <span class="nc">SuccessToastify</span><span class="p">(</span><span class="dl">"</span><span class="s2">Customer has been updated successfully!</span><span class="dl">"</span><span class="p">);</span>
        <span class="nf">navigate</span><span class="p">(</span><span class="dl">"</span><span class="s2">/customers</span><span class="dl">"</span><span class="p">);</span>
      <span class="p">})</span>
      <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span>
      <span class="p">});</span>
  <span class="p">};</span>

  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">card</span><span class="dl">"</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">card-body</span><span class="dl">"</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">row</span><span class="dl">"</span><span class="o">&gt;</span>
          <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">col-md-3</span><span class="dl">"</span><span class="o">&gt;</span>
            <span class="o">&lt;</span><span class="nx">h3</span><span class="o">&gt;</span><span class="nx">Edit</span> <span class="nx">Customer</span><span class="o">&lt;</span><span class="sr">/h3</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="nx">form</span><span class="o">&gt;</span>
              <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-group</span><span class="dl">"</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">label</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">control-label</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">First</span> <span class="na">Name</span><span class="p">:</span> <span class="o">&lt;</span><span class="sr">/label</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">input</span>
                  <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-control</span><span class="dl">"</span>
                  <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">text</span><span class="dl">"</span>
                  <span class="nx">id</span><span class="o">=</span><span class="dl">"</span><span class="s2">firstName</span><span class="dl">"</span>
                  <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">firstName</span><span class="dl">"</span>
                  <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nx">customerObj</span><span class="p">.</span><span class="nx">firstName</span><span class="p">}</span>
                  <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="nx">handleInputChange</span><span class="p">}</span>
                <span class="o">&gt;&lt;</span><span class="sr">/input</span><span class="err">&gt;
</span>              <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>
              <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-group</span><span class="dl">"</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">label</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">control-label</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Last</span> <span class="na">Name</span><span class="p">:</span> <span class="o">&lt;</span><span class="sr">/label</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">input</span>
                  <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-control</span><span class="dl">"</span>
                  <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">text</span><span class="dl">"</span>
                  <span class="nx">id</span><span class="o">=</span><span class="dl">"</span><span class="s2">lastName</span><span class="dl">"</span>
                  <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">lastName</span><span class="dl">"</span>
                  <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nx">customerObj</span><span class="p">.</span><span class="nx">lastName</span><span class="p">}</span>
                  <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="nx">handleInputChange</span><span class="p">}</span>
                <span class="o">&gt;&lt;</span><span class="sr">/input</span><span class="err">&gt;
</span>              <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>
              <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-group</span><span class="dl">"</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">label</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">control-label</span><span class="dl">"</span><span class="o">&gt;</span><span class="na">Email</span><span class="p">:</span> <span class="o">&lt;</span><span class="sr">/label</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">input</span>
                  <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-control</span><span class="dl">"</span>
                  <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">text</span><span class="dl">"</span>
                  <span class="nx">id</span><span class="o">=</span><span class="dl">"</span><span class="s2">email</span><span class="dl">"</span>
                  <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">email</span><span class="dl">"</span>
                  <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nx">customerObj</span><span class="p">.</span><span class="nx">email</span><span class="p">}</span>
                  <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="nx">handleInputChange</span><span class="p">}</span>
                <span class="o">&gt;&lt;</span><span class="sr">/input</span><span class="err">&gt;
</span>              <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>
              <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-group</span><span class="dl">"</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">label</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">control-label</span><span class="dl">"</span><span class="o">&gt;</span><span class="na">Phone</span><span class="p">:</span> <span class="o">&lt;</span><span class="sr">/label</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">input</span>
                  <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-control</span><span class="dl">"</span>
                  <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">text</span><span class="dl">"</span>
                  <span class="nx">id</span><span class="o">=</span><span class="dl">"</span><span class="s2">phone</span><span class="dl">"</span>
                  <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">phone</span><span class="dl">"</span>
                  <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nx">customerObj</span><span class="p">.</span><span class="nx">phone</span><span class="p">}</span>
                  <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="nx">handleInputChange</span><span class="p">}</span>
                <span class="o">&gt;&lt;</span><span class="sr">/input</span><span class="err">&gt;
</span>              <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>
              <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-group</span><span class="dl">"</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">label</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">control-label</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Birth</span> <span class="na">Date</span><span class="p">:</span> <span class="o">&lt;</span><span class="sr">/label</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">input</span>
                  <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-control</span><span class="dl">"</span>
                  <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">date</span><span class="dl">"</span>
                  <span class="nx">id</span><span class="o">=</span><span class="dl">"</span><span class="s2">birthDate</span><span class="dl">"</span>
                  <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">birthDate</span><span class="dl">"</span>
                  <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nc">ConvertDateISOString</span><span class="p">(</span><span class="nx">customerObj</span><span class="p">.</span><span class="nx">birthDate</span><span class="p">)}</span>
                  <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="nx">handleInputChange</span><span class="p">}</span>
                <span class="o">&gt;&lt;</span><span class="sr">/input</span><span class="err">&gt;
</span>              <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="sr">/form</span><span class="err">&gt;
</span>
            <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-group</span><span class="dl">"</span><span class="o">&gt;</span>
              <span class="o">&lt;</span><span class="nx">input</span>
                <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">button</span><span class="dl">"</span>
                <span class="nx">value</span><span class="o">=</span><span class="dl">"</span><span class="s2">Edit Customer</span><span class="dl">"</span>
                <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">btn btn-primary</span><span class="dl">"</span>
                <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="nx">onSubmit</span><span class="p">}</span>
              <span class="o">&gt;&lt;</span><span class="sr">/input</span><span class="err">&gt;
</span>              <span class="o">||</span>
              <span class="o">&lt;</span><span class="nx">input</span>
                <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">button</span><span class="dl">"</span>
                <span class="nx">value</span><span class="o">=</span><span class="dl">"</span><span class="s2">Back to List</span><span class="dl">"</span>
                <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">btn btn-primary</span><span class="dl">"</span>
                <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="nx">backtoList</span><span class="p">}</span>
              <span class="o">&gt;&lt;</span><span class="sr">/input</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>          <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">EditCustomer</span><span class="p">;</span>
</code></pre></div></div>

<p><strong>Step 19: Modify App.js and configure route as follows.</strong></p>

<p><strong>App.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">logo</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./logo.svg</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="dl">"</span><span class="s2">./App.css</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">BrowserRouter</span><span class="p">,</span> <span class="nx">Route</span><span class="p">,</span> <span class="nx">Routes</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-router-dom</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="dl">"</span><span class="s2">bootstrap/dist/css/bootstrap.min.css</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">EditProduct</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./components/product/EditProduct</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">TopNav</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./layout/TopNav</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">CustomerList</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./components/customer/CustomerList</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">AddCustomer</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./components/customer/AddCustomer</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">EditCustomer</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./components/customer/EditCustomer</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">ToastContainer</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-toastify</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">ProductList</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./components/product/ProductsList</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">AddProduct</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./components/product/AddProduct</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">function</span> <span class="nf">App</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return </span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">BrowserRouter</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">TopNav</span> <span class="o">/&gt;</span>
      <span class="o">&lt;</span><span class="nx">Routes</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="dl">"</span><span class="s2">/</span><span class="dl">"</span> <span class="nx">element</span><span class="o">=</span><span class="p">{</span><span class="o">&lt;</span><span class="nx">ProductList</span> <span class="o">/&gt;</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="dl">"</span><span class="s2">/products</span><span class="dl">"</span> <span class="nx">element</span><span class="o">=</span><span class="p">{</span><span class="o">&lt;</span><span class="nx">ProductList</span> <span class="o">/&gt;</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="dl">"</span><span class="s2">/add-product</span><span class="dl">"</span> <span class="nx">element</span><span class="o">=</span><span class="p">{</span><span class="o">&lt;</span><span class="nx">AddProduct</span> <span class="o">/&gt;</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="dl">"</span><span class="s2">/edit-product/:id</span><span class="dl">"</span> <span class="nx">element</span><span class="o">=</span><span class="p">{</span><span class="o">&lt;</span><span class="nx">EditProduct</span> <span class="o">/&gt;</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="dl">"</span><span class="s2">/customers</span><span class="dl">"</span> <span class="nx">element</span><span class="o">=</span><span class="p">{</span><span class="o">&lt;</span><span class="nx">CustomerList</span> <span class="o">/&gt;</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="dl">"</span><span class="s2">/add-customer</span><span class="dl">"</span> <span class="nx">element</span><span class="o">=</span><span class="p">{</span><span class="o">&lt;</span><span class="nx">AddCustomer</span> <span class="o">/&gt;</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="dl">"</span><span class="s2">/edit-customer/:id</span><span class="dl">"</span> <span class="nx">element</span><span class="o">=</span><span class="p">{</span><span class="o">&lt;</span><span class="nx">EditCustomer</span> <span class="o">/&gt;</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="sr">/Routes</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="nx">ToastContainer</span> <span class="o">/&gt;</span>
    <span class="o">&lt;</span><span class="sr">/BrowserRouter</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">App</span><span class="p">;</span>
</code></pre></div></div>

<p><strong>Step 20: Fixed port to run front-end application.</strong></p>

<ul>
  <li>Create a file .env in root directory.</li>
  <li>Write the following code to fix the port. Now, application will run on 3002 port.</li>
</ul>

<p><strong>.env</strong></p>

<pre><code class="language-env">PORT=3002
</code></pre>

<p><strong>Step 21: Run front end application using the following command.</strong></p>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">npm</span> <span class="nf">start</span>
</code></pre></div></div>

<p>Run backend application and you will see the following screen. Now you can perform CRUD operation for both Product and Customer.</p>

<p><img src="/assets/images/posts/2023/rtk-output-01.png" alt="" /></p>

<p><strong><a href="https://github.com/mahedee/code-sample02/tree/master/react-redux-toolkit">Source code</a></strong></p>]]></content><author><name>Mahedee Hasan</name></author><category term="React" /><category term="Redux" /><category term="ASP.NET" /><category term="C#" /><category term="react" /><category term="csharp" /><category term="redux" /><category term="aspnet" /><summary type="html"><![CDATA[Redux is a popular state management library for JavaScript applications. In this article I will show you how to build a front-end application using redux toolkit with react and asp.net core.]]></summary></entry><entry><title type="html">Implementing Audit Trail in an ASP.NET Core Application with Entity Framework Plus</title><link href="https://mahedee.net//audit-trail-implementation-in-aspnet-core-app/" rel="alternate" type="text/html" title="Implementing Audit Trail in an ASP.NET Core Application with Entity Framework Plus" /><published>2023-06-19T00:00:00-03:00</published><updated>2023-06-19T00:00:00-03:00</updated><id>https://mahedee.net//audit-trail-implementation-in-aspnet-core-app</id><content type="html" xml:base="https://mahedee.net//audit-trail-implementation-in-aspnet-core-app/"><![CDATA[<p><strong>Introduction</strong></p>

<p>An audit trail is a chronological record of changes or activities performed in a system, providing a detailed history of events. In the context of software applications, including ASP.NET, an audit trail captures and logs various actions such as data modifications, user interactions, and system activities.</p>

<p><strong>Why it is important?</strong>
It helps organizations maintain a record of user activity within their systems, which can be used</p>

<ul>
  <li>To monitor user actions and detect suspicious activities</li>
  <li>To track changes and identify the root cause of issues</li>
  <li>To ensure compliance with regulatory requirements</li>
  <li>Records changes to critical data elements, ensuring accuracy and consistency</li>
  <li>Provides a detailed history of events for forensic analysis</li>
  <li>Meets legal and regulatory requirements by maintaining a detailed audit trail</li>
  <li>Offers historical data for reporting and analysis, supporting decision-making</li>
  <li>Frud detection etc.</li>
</ul>

<p>In this article, we will discuss how you can implement an audit trail feature using Entity Framework plus</p>

<p><strong>Tools and Technology Used</strong></p>

<ul>
  <li>ASP.net core Web API</li>
  <li>Visual C#</li>
  <li>Entity Framework Plus</li>
  <li>Entity Framework</li>
  <li>SQL Server</li>
</ul>

<p><strong>Step 1: Create a asp.net core web api project name AuditLog.API</strong></p>

<p><strong>Step 2: Install the following nuget packages in the project.</strong></p>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">Z.EntityFramework.Extensions.EFCore</span>
<span class="nf">Z.EntityFramework.Plus.EFCore</span>
<span class="nf">Microsoft.EntityFrameworkCore</span>
<span class="nf">Microsoft.EntityFrameworkCore.Design</span>
<span class="nf">Microsoft.EntityFrameworkCore.SqlServer</span>
<span class="nf">Microsoft.EntityFrameworkCore.Tools</span>

</code></pre></div></div>

<p><strong>Step 3: Create three Model class name Customer, CustomAuditEntry, CustomAuditEntryProperty in Models folder.</strong></p>

<ul>
  <li>Customer class to store Customer Information</li>
  <li>CustomAuditEntry class to store Audit Entry Information</li>
  <li>CustomAuditEntryProperty class to store Audit Entry Property Information - means each properties new and old values</li>
</ul>

<p><strong>Customer.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">namespace</span> <span class="nn">AuditLog.API.Models</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Customer</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span><span class="p">?</span> <span class="n">FirstName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span><span class="p">?</span> <span class="n">LastName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>CustomAuditEntry.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Z.EntityFramework.Plus</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">AuditLog.API.Models</span>
<span class="p">{</span>
    <span class="c1">// CustomAuditEntry is a custom class that inherits from AuditEntry</span>
    <span class="c1">// It is used to add additional properties to the AuditEntry class</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CustomAuditEntry</span> <span class="p">:</span> <span class="n">AuditEntry</span>
    <span class="p">{</span>
        <span class="c1">// ApplicationName is a custom property that will be added to the AuditEntry table for storing the application name</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">AppplicationName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>CustomAuditEntryProperty.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Z.EntityFramework.Plus</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">AuditLog.API.Models</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CustomAuditEntryProperty</span> <span class="p">:</span> <span class="n">AuditEntryProperty</span>
    <span class="p">{</span>
        <span class="c1">// ApplicationName is a custom property that will be added to the AuditEntryProperty table</span>
        <span class="c1">// for storing the application name</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">AppplicationName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 4: Create a Context class name AuditLogDBContext in Persistence folder.</strong></p>

<p><strong>AuditLogDBContext.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">AuditLog.API.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Z.EntityFramework.Plus</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">AuditLog.API.Persistence</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">AuditLogDBContext</span> <span class="p">:</span> <span class="n">DbContext</span>
    <span class="p">{</span>
        <span class="c1">// AuditEntries and AuditEntryProperties are the tables that will be used to store the audit logs</span>
        <span class="k">public</span> <span class="n">DbSet</span><span class="p">&lt;</span><span class="n">CustomAuditEntry</span><span class="p">&gt;</span> <span class="n">AuditEntries</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="n">DbSet</span><span class="p">&lt;</span><span class="n">CustomAuditEntryProperty</span><span class="p">&gt;</span> <span class="n">AuditEntryProperties</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">// Customers is the table that will be used to store the customer data</span>
        <span class="k">public</span> <span class="n">DbSet</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="n">Customers</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">// AuditLogDBContext is the constructor that will be used to configure the audit log tables</span>
        <span class="k">public</span> <span class="nf">AuditLogDBContext</span><span class="p">(</span><span class="n">DbContextOptions</span><span class="p">&lt;</span><span class="n">AuditLogDBContext</span><span class="p">&gt;</span> <span class="n">options</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">// AutoSavePreAction is a delegate that will be used to save the audit logs to the database</span>
            <span class="c1">// It configures a pre-action to execute before the SaveChanges method is executed</span>
            <span class="n">AuditManager</span><span class="p">.</span><span class="n">DefaultConfiguration</span><span class="p">.</span><span class="n">AutoSavePreAction</span> <span class="p">=</span> <span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">audit</span><span class="p">)</span> <span class="p">=&gt;</span>
            <span class="p">{</span>
                <span class="p">((</span><span class="n">AuditLogDBContext</span><span class="p">)</span><span class="n">context</span><span class="p">).</span><span class="n">AuditEntries</span><span class="p">.</span><span class="nf">AddRange</span><span class="p">(</span><span class="n">audit</span><span class="p">.</span><span class="n">Entries</span><span class="p">.</span><span class="n">Cast</span><span class="p">&lt;</span><span class="n">CustomAuditEntry</span><span class="p">&gt;());</span>
            <span class="p">};</span>
        <span class="p">}</span>


    <span class="p">}</span>
<span class="p">}</span>


</code></pre></div></div>

<p><strong>Step 5: Add connection string in appsettings.json file</strong></p>

<p><strong>appsettings.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"Logging"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"LogLevel"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Default"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Information"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Microsoft.AspNetCore"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Warning"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"ConnectionStrings"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"DefaultConnection"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Server=localhost;Database=AuditLogEFPlusDB;User Id=sa;Password=myPassword;TrustServerCertificate=True;"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"AllowedHosts"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>
<p><strong>Step 6: Create two Interface ICustomerRepository and IReportingRepository in Repositories/Interfaces folder</strong></p>

<p><strong>ICustomerRepository.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">AuditLog.API.Models</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">AuditLog.API.Repositories.Interfaces</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">interface</span> <span class="nc">ICustomerRepository</span>
    <span class="p">{</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;&gt;</span> <span class="nf">GetCustomers</span><span class="p">();</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="nf">GetCustomer</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="nf">AddCustomer</span><span class="p">(</span><span class="n">Customer</span> <span class="n">customer</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="nf">UpdateCustomer</span><span class="p">(</span><span class="n">Customer</span> <span class="n">customer</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="nf">DeleteCustomer</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>IReportingRepository.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">AuditLog.API.Repositories.Interfaces</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">interface</span> <span class="nc">IReportingRepositry</span>
    <span class="p">{</span>
        <span class="c1">// Get all the changes for a particular entity response using Dynamic type</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="kt">dynamic</span><span class="p">&gt;&gt;</span> <span class="nf">GetChangeLogDynamic</span><span class="p">(</span><span class="kt">string</span> <span class="n">EntityName</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 7: Create two Repository class name CustomerRepository and ReportingRepository in Repositories/Implementations folder</strong></p>

<p><strong>CustomerRepository.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">AuditLog.API.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">AuditLog.API.Persistence</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">AuditLog.API.Repositories.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Z.EntityFramework.Plus</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">AuditLog.API.Repositories.Implementations</span>
<span class="p">{</span>

    <span class="k">public</span> <span class="k">class</span> <span class="nc">CustomerRepository</span> <span class="p">:</span> <span class="n">ICustomerRepository</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">AuditLogDBContext</span> <span class="n">_context</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">CustomerRepository</span><span class="p">(</span><span class="n">AuditLogDBContext</span> <span class="n">context</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_context</span> <span class="p">=</span> <span class="n">context</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;&gt;</span> <span class="nf">GetCustomers</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Customers</span><span class="p">.</span><span class="nf">ToListAsync</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="nf">GetCustomer</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Customers</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="nf">AddCustomer</span><span class="p">(</span><span class="n">Customer</span> <span class="n">customer</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">// Used for audit log</span>
            <span class="kt">var</span> <span class="n">audit</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Z</span><span class="p">.</span><span class="n">EntityFramework</span><span class="p">.</span><span class="n">Plus</span><span class="p">.</span><span class="nf">Audit</span><span class="p">();</span>
            <span class="n">audit</span><span class="p">.</span><span class="n">CreatedBy</span> <span class="p">=</span> <span class="s">"mahedee"</span><span class="p">;</span>

            <span class="n">_context</span><span class="p">.</span><span class="n">Customers</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">customer</span><span class="p">);</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="c1">// SaveChangesAsync(audit) will commit the changes to the database and save the audit logs</span>
                <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">(</span><span class="n">audit</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">DbUpdateException</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="nf">CustomerExists</span><span class="p">(</span><span class="n">customer</span><span class="p">.</span><span class="n">Id</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="k">return</span> <span class="k">null</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="k">else</span>
                <span class="p">{</span>
                    <span class="k">throw</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="n">customer</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="nf">UpdateCustomer</span><span class="p">(</span><span class="n">Customer</span> <span class="n">customer</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">audit</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Z</span><span class="p">.</span><span class="n">EntityFramework</span><span class="p">.</span><span class="n">Plus</span><span class="p">.</span><span class="nf">Audit</span><span class="p">();</span>
            <span class="n">audit</span><span class="p">.</span><span class="n">CreatedBy</span> <span class="p">=</span> <span class="s">"mahedee"</span><span class="p">;</span>
            <span class="kt">var</span> <span class="n">customerToUpdate</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Customers</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">customer</span><span class="p">.</span><span class="n">Id</span><span class="p">);</span>
            <span class="n">_context</span><span class="p">.</span><span class="nf">Entry</span><span class="p">(</span><span class="n">customerToUpdate</span><span class="p">).</span><span class="n">CurrentValues</span><span class="p">.</span><span class="nf">SetValues</span><span class="p">(</span><span class="n">customer</span><span class="p">);</span>

            <span class="k">try</span>
            <span class="p">{</span>
                <span class="c1">// SaveChangesAsync(audit) will commit the changes to the database and save the audit logs</span>
                <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">(</span><span class="n">audit</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">DbUpdateConcurrencyException</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(!</span><span class="nf">CustomerExists</span><span class="p">(</span><span class="n">customer</span><span class="p">.</span><span class="n">Id</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="k">return</span> <span class="k">null</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="k">else</span>
                <span class="p">{</span>
                    <span class="k">throw</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="n">customer</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="nf">DeleteCustomer</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">audit</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Z</span><span class="p">.</span><span class="n">EntityFramework</span><span class="p">.</span><span class="n">Plus</span><span class="p">.</span><span class="nf">Audit</span><span class="p">();</span>
            <span class="n">audit</span><span class="p">.</span><span class="n">CreatedBy</span> <span class="p">=</span> <span class="s">"mahedee"</span><span class="p">;</span>

            <span class="kt">var</span> <span class="n">customer</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Customers</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">customer</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="k">null</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="k">try</span>
            <span class="p">{</span>
                <span class="n">_context</span><span class="p">.</span><span class="n">Customers</span><span class="p">.</span><span class="nf">Remove</span><span class="p">(</span><span class="n">customer</span><span class="p">);</span>
                <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">(</span><span class="n">audit</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="n">customer</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="kt">bool</span> <span class="nf">CustomerExists</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">_context</span><span class="p">.</span><span class="n">Customers</span><span class="p">.</span><span class="nf">Any</span><span class="p">(</span><span class="n">e</span> <span class="p">=&gt;</span> <span class="n">e</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">id</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

<span class="p">}</span>

</code></pre></div></div>

<p><strong>ReportingRepository.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">AuditLog.API.Persistence</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">AuditLog.API.Repositories.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">AuditLog.API.Repositories.Implementations</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">ReportingRepository</span> <span class="p">:</span> <span class="n">IReportingRepositry</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">AuditLogDBContext</span> <span class="n">_context</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">ReportingRepository</span><span class="p">(</span><span class="n">AuditLogDBContext</span> <span class="n">context</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_context</span> <span class="p">=</span> <span class="n">context</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="kt">dynamic</span><span class="p">&gt;&gt;</span> <span class="nf">GetChangeLogDynamic</span><span class="p">(</span><span class="kt">string</span> <span class="n">EntityName</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">String</span> <span class="n">EntityTypeName</span> <span class="p">=</span> <span class="n">EntityName</span><span class="p">;</span>

            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="n">_context</span><span class="p">.</span><span class="n">AuditEntries</span>
            <span class="p">.</span><span class="nf">Where</span><span class="p">(</span><span class="n">a</span> <span class="p">=&gt;</span> <span class="n">a</span><span class="p">.</span><span class="n">EntityTypeName</span> <span class="p">==</span> <span class="n">EntityTypeName</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">Join</span><span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">AuditEntryProperties</span><span class="p">,</span>
            <span class="n">entry</span> <span class="p">=&gt;</span> <span class="n">entry</span><span class="p">.</span><span class="n">AuditEntryID</span><span class="p">,</span>
            <span class="n">property</span> <span class="p">=&gt;</span> <span class="n">property</span><span class="p">.</span><span class="n">AuditEntryID</span><span class="p">,</span>
                <span class="p">(</span><span class="n">entry</span><span class="p">,</span> <span class="n">property</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="k">new</span>
                <span class="p">{</span>
                    <span class="n">AuditEntryId</span> <span class="p">=</span> <span class="n">entry</span><span class="p">.</span><span class="n">AuditEntryID</span><span class="p">,</span>
                    <span class="n">EntityTypeName</span> <span class="p">=</span> <span class="n">entry</span><span class="p">.</span><span class="n">EntityTypeName</span><span class="p">,</span>
                    <span class="n">State</span> <span class="p">=</span> <span class="n">entry</span><span class="p">.</span><span class="n">State</span><span class="p">,</span>
                    <span class="n">StateName</span> <span class="p">=</span> <span class="n">entry</span><span class="p">.</span><span class="n">StateName</span><span class="p">,</span>
                    <span class="n">PropertyName</span> <span class="p">=</span> <span class="n">property</span><span class="p">.</span><span class="n">PropertyName</span><span class="p">,</span>
                    <span class="n">OldValue</span> <span class="p">=</span> <span class="n">property</span><span class="p">.</span><span class="n">OldValue</span><span class="p">,</span>
                    <span class="n">NewValue</span> <span class="p">=</span> <span class="n">property</span><span class="p">.</span><span class="n">NewValue</span><span class="p">,</span>
                    <span class="n">CreatedBy</span> <span class="p">=</span> <span class="n">entry</span><span class="p">.</span><span class="n">CreatedBy</span><span class="p">,</span>
                    <span class="n">CreatedDate</span> <span class="p">=</span> <span class="n">entry</span><span class="p">.</span><span class="n">CreatedDate</span>
                <span class="p">}</span>
                                                                                       <span class="p">)</span>
            <span class="p">.</span><span class="nf">OrderBy</span><span class="p">(</span><span class="n">result</span> <span class="p">=&gt;</span> <span class="n">result</span><span class="p">.</span><span class="n">CreatedDate</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">Select</span><span class="p">(</span><span class="n">result</span> <span class="p">=&gt;</span> <span class="k">new</span>
            <span class="p">{</span>
                <span class="n">result</span><span class="p">.</span><span class="n">AuditEntryId</span><span class="p">,</span>
                <span class="n">result</span><span class="p">.</span><span class="n">EntityTypeName</span><span class="p">,</span>
                <span class="n">result</span><span class="p">.</span><span class="n">State</span><span class="p">,</span>
                <span class="n">result</span><span class="p">.</span><span class="n">StateName</span><span class="p">,</span>
                <span class="n">result</span><span class="p">.</span><span class="n">PropertyName</span><span class="p">,</span>
                <span class="n">result</span><span class="p">.</span><span class="n">OldValue</span><span class="p">,</span>
                <span class="n">result</span><span class="p">.</span><span class="n">NewValue</span><span class="p">,</span>
                <span class="n">result</span><span class="p">.</span><span class="n">CreatedBy</span><span class="p">,</span>
                <span class="n">result</span><span class="p">.</span><span class="n">CreatedDate</span>
            <span class="p">});</span>

            <span class="k">return</span> <span class="k">await</span> <span class="n">result</span><span class="p">.</span><span class="nf">ToListAsync</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 8: Create two interfaces name ICustomerService and IReportingService in Services/Interfaces folder</strong></p>

<p><strong>ICustomerService.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">AuditLog.API.Models</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">AuditLog.API.Services.Interfaces</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">interface</span> <span class="nc">ICustomerService</span>
    <span class="p">{</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;&gt;</span> <span class="nf">GetCustomers</span><span class="p">();</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="nf">GetCustomer</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="nf">AddCustomer</span><span class="p">(</span><span class="n">Customer</span> <span class="n">customer</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="nf">UpdateCustomer</span><span class="p">(</span><span class="n">Customer</span> <span class="n">customer</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="nf">DeleteCustomer</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>IReportingService.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">namespace</span> <span class="nn">AuditLog.API.Services.Interfaces</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">interface</span> <span class="nc">IReportingService</span>
    <span class="p">{</span>
        
        <span class="c1">// Get all the changes for a particular entity response using Dynamic type</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="kt">dynamic</span><span class="p">&gt;&gt;</span> <span class="nf">GetChangeLogDynamic</span><span class="p">(</span><span class="kt">string</span> <span class="n">EntityName</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 9: Create 2 service class name CustomerService and ReportingService in Services/Implementation folder</strong></p>

<p><strong>CustomerService.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">AuditLog.API.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">AuditLog.API.Repositories.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">AuditLog.API.Services.Interfaces</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">AuditLog.API.Services.Implementations</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CustomerService</span> <span class="p">:</span> <span class="n">ICustomerService</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">ICustomerRepository</span> <span class="n">_customerRepository</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">CustomerService</span><span class="p">(</span><span class="n">ICustomerRepository</span> <span class="n">customerRepository</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_customerRepository</span> <span class="p">=</span> <span class="n">customerRepository</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;&gt;</span> <span class="nf">GetCustomers</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_customerRepository</span><span class="p">.</span><span class="nf">GetCustomers</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="nf">GetCustomer</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_customerRepository</span><span class="p">.</span><span class="nf">GetCustomer</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="nf">AddCustomer</span><span class="p">(</span><span class="n">Customer</span> <span class="n">customer</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">addedCustomer</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_customerRepository</span><span class="p">.</span><span class="nf">AddCustomer</span><span class="p">(</span><span class="n">customer</span><span class="p">);</span>
            <span class="k">return</span> <span class="n">addedCustomer</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="nf">UpdateCustomer</span><span class="p">(</span><span class="n">Customer</span> <span class="n">customer</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">updatedCustomer</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_customerRepository</span><span class="p">.</span><span class="nf">UpdateCustomer</span><span class="p">(</span><span class="n">customer</span><span class="p">);</span>
            <span class="k">return</span> <span class="n">updatedCustomer</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="nf">DeleteCustomer</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">deletedCustomer</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_customerRepository</span><span class="p">.</span><span class="nf">DeleteCustomer</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
            <span class="k">return</span> <span class="n">deletedCustomer</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>ReportingService.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">AuditLog.API.Repositories.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">AuditLog.API.Services.Interfaces</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">AuditLog.API.Services.Implementations</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">ReportingService</span> <span class="p">:</span> <span class="n">IReportingService</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IReportingRepositry</span> <span class="n">_reportingRepositry</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">ReportingService</span><span class="p">(</span><span class="n">IReportingRepositry</span> <span class="n">reportingRepositry</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_reportingRepositry</span> <span class="p">=</span> <span class="n">reportingRepositry</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="kt">dynamic</span><span class="p">&gt;&gt;</span> <span class="nf">GetChangeLogDynamic</span><span class="p">(</span><span class="kt">string</span> <span class="n">EntityName</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_reportingRepositry</span><span class="p">.</span><span class="nf">GetChangeLogDynamic</span><span class="p">(</span><span class="n">EntityName</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 10: Configure Program class as follows.</strong></p>

<p><strong>Program.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">AuditLog.API.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">AuditLog.API.Persistence</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">AuditLog.API.Repositories.Implementations</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">AuditLog.API.Repositories.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">AuditLog.API.Services.Implementations</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">AuditLog.API.Services.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Z.EntityFramework.Plus</span><span class="p">;</span>

<span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="n">WebApplication</span><span class="p">.</span><span class="nf">CreateBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>

<span class="c1">// Add services to the container.</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">();</span>
<span class="c1">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddEndpointsApiExplorer</span><span class="p">();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddSwaggerGen</span><span class="p">();</span>


<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddDbContext</span><span class="p">&lt;</span><span class="n">AuditLogDBContext</span><span class="p">&gt;(</span><span class="n">options</span> <span class="p">=&gt;</span>
    <span class="n">options</span><span class="p">.</span><span class="nf">UseSqlServer</span><span class="p">(</span>
        <span class="n">builder</span><span class="p">.</span><span class="n">Configuration</span><span class="p">.</span><span class="nf">GetConnectionString</span><span class="p">(</span><span class="s">"DefaultConnection"</span><span class="p">))</span>
<span class="p">);</span>


<span class="c1">// For Audit Log</span>

<span class="n">AuditManager</span><span class="p">.</span><span class="n">DefaultConfiguration</span>
<span class="p">.</span><span class="n">AuditEntryFactory</span> <span class="p">=</span> <span class="n">args</span> <span class="p">=&gt;</span>
   <span class="k">new</span> <span class="nf">CustomAuditEntry</span><span class="p">()</span> <span class="p">{</span> <span class="n">AppplicationName</span> <span class="p">=</span> <span class="s">"AuditLogApp"</span> <span class="p">};</span>

<span class="n">AuditManager</span><span class="p">.</span><span class="n">DefaultConfiguration</span>
            <span class="p">.</span><span class="n">AuditEntryPropertyFactory</span> <span class="p">=</span> <span class="n">args</span> <span class="p">=&gt;</span>
                <span class="k">new</span> <span class="nf">CustomAuditEntryProperty</span><span class="p">()</span> <span class="p">{</span> <span class="n">AppplicationName</span> <span class="p">=</span> <span class="s">"AuditLogApp"</span> <span class="p">};</span>

<span class="n">AuditManager</span><span class="p">.</span><span class="n">DefaultConfiguration</span><span class="p">.</span><span class="n">AutoSavePreAction</span> <span class="p">=</span> <span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">audit</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="p">((</span><span class="n">AuditLogDBContext</span><span class="p">)</span><span class="n">context</span><span class="p">).</span><span class="n">AuditEntries</span><span class="p">.</span><span class="nf">AddRange</span><span class="p">(</span><span class="n">audit</span><span class="p">.</span><span class="n">Entries</span><span class="p">.</span><span class="n">Cast</span><span class="p">&lt;</span><span class="n">CustomAuditEntry</span><span class="p">&gt;());</span>
<span class="p">};</span>


<span class="kt">string</span> <span class="n">connectionString</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="n">Configuration</span><span class="p">.</span><span class="nf">GetConnectionString</span><span class="p">(</span><span class="s">"DefaultConnection"</span><span class="p">);</span>
<span class="c1">//builder.Services.AddTransient(_ =&gt; new DBConnector(connectionString));</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddTransient</span><span class="p">&lt;</span><span class="n">ICustomerRepository</span><span class="p">,</span> <span class="n">CustomerRepository</span><span class="p">&gt;();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddTransient</span><span class="p">&lt;</span><span class="n">ICustomerService</span><span class="p">,</span> <span class="n">CustomerService</span><span class="p">&gt;();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddTransient</span><span class="p">&lt;</span><span class="n">IReportingRepositry</span><span class="p">,</span> <span class="n">ReportingRepository</span><span class="p">&gt;();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddTransient</span><span class="p">&lt;</span><span class="n">IReportingService</span><span class="p">,</span> <span class="n">ReportingService</span><span class="p">&gt;();</span>


<span class="kt">var</span> <span class="n">app</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

<span class="c1">// Configure the HTTP request pipeline.</span>
<span class="k">if</span> <span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">Environment</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
<span class="p">{</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwagger</span><span class="p">();</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwaggerUI</span><span class="p">();</span>
<span class="p">}</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseHttpsRedirection</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseAuthorization</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">MapControllers</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>


</code></pre></div></div>

<p><strong>Step 11: Create two Controller class CustomersController and ReportingController in Controllers folder.</strong></p>

<p><strong>CustomersController.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">AuditLog.API.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">AuditLog.API.Services.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">AuditLog.API.Controllers</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
    <span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CustomersController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">ICustomerService</span> <span class="n">_customerService</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">CustomersController</span><span class="p">(</span><span class="n">ICustomerService</span> <span class="n">customerService</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_customerService</span> <span class="p">=</span> <span class="n">customerService</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/Customers</span>
        <span class="p">[</span><span class="n">HttpGet</span><span class="p">]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;&gt;</span> <span class="nf">GetCustomers</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_customerService</span><span class="p">.</span><span class="nf">GetCustomers</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/Customers/5</span>
        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="nf">GetCustomer</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_customerService</span><span class="p">.</span><span class="nf">GetCustomer</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">// PUT: api/Customers/5</span>
        <span class="p">[</span><span class="nf">HttpPut</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">?&gt;</span> <span class="nf">PutCustomer</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="n">Customer</span> <span class="n">customer</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">id</span> <span class="p">!=</span> <span class="n">customer</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
            <span class="p">{</span>
               <span class="k">return</span> <span class="k">null</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="k">await</span> <span class="n">_customerService</span><span class="p">.</span><span class="nf">UpdateCustomer</span><span class="p">(</span><span class="n">customer</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">DbUpdateConcurrencyException</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(!</span><span class="nf">CustomerExists</span><span class="p">(</span><span class="n">id</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="k">return</span> <span class="k">null</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="k">else</span>
                <span class="p">{</span>
                    <span class="k">throw</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="c1">// POST: api/Customers</span>
        <span class="p">[</span><span class="n">HttpPost</span><span class="p">]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;&gt;</span> <span class="nf">PostCustomer</span><span class="p">(</span><span class="n">Customer</span> <span class="n">customer</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_customerService</span><span class="p">.</span><span class="nf">AddCustomer</span><span class="p">(</span><span class="n">customer</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">// DELETE: api/Customers/5</span>
        <span class="p">[</span><span class="nf">HttpDelete</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="nf">DeleteCustomer</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_customerService</span><span class="p">.</span><span class="nf">DeleteCustomer</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="kt">bool</span> <span class="nf">CustomerExists</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">_customerService</span><span class="p">.</span><span class="nf">GetCustomer</span><span class="p">(</span><span class="n">id</span><span class="p">)</span> <span class="p">==</span> <span class="k">null</span> <span class="p">?</span> <span class="k">false</span> <span class="p">:</span> <span class="k">true</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>


</code></pre></div></div>

<p><strong>ReportingController.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">AuditLog.API.Services.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">AuditLog.API.Controllers</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
    <span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">ReportingController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IReportingService</span> <span class="n">_reportingService</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">ReportingController</span><span class="p">(</span><span class="n">IReportingService</span> <span class="n">reportingService</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_reportingService</span> <span class="p">=</span> <span class="n">reportingService</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/AuditTrailReport</span>
        <span class="p">[</span><span class="n">HttpGet</span><span class="p">]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">Index</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/AuditTrailReport/{EntityName}</span>
        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"GetChangeLog/{EntityName}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">GetChangeLog</span><span class="p">(</span><span class="kt">string</span> <span class="n">EntityName</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="k">await</span> <span class="n">_reportingService</span><span class="p">.</span><span class="nf">GetChangeLogDynamic</span><span class="p">(</span><span class="n">EntityName</span><span class="p">));</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>
<p><strong>Step 12: Create migration and update database</strong></p>
<ul>
  <li>Open Package Manager Console (PMC).</li>
  <li>Select the project name AuditLog.API</li>
  <li>Run the following command in PMC</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">Add-Migration</span> <span class="nf">InitialCreate</span>
</code></pre></div></div>
<p>This will create a new migration file named “InitialCreate” under the Migrations folder of your</p>

<ul>
  <li>Run the following command in PMC</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">Update-Database</span>
</code></pre></div></div>

<ul>
  <li>You will see three table name Customers, AuditEntry, AuditEntryProperty are created in the database</li>
</ul>

<p><strong>Step 13: Run the application and check the swagger.</strong></p>
<ul>
  <li>Now run application create, update and delete Customer entity using swagger</li>
  <li>You will see audit trail logs in AuditEntry and AuditEntryProperty table.</li>
  <li>You can also view a sample report using Reporting controller. In GetChangeLog end point use “Customer” as entity name.</li>
</ul>

<p><img src="/assets/images/posts/2023/ef-audit-log.png" alt="" />
<strong><a href="https://github.com/mahedee/code-sample02/tree/master/AuditLogEFPlus">Source code</a></strong></p>]]></content><author><name>Mahedee Hasan</name></author><category term="ASP.NET" /><category term="ASP.NET Core" /><category term="C#" /><category term="Web API" /><category term="EF" /><category term="csharp" /><category term="aspnet" /><category term="aspnetcore" /><category term="webapi" /><category term="ef" /><summary type="html"><![CDATA[Unlock the secrets of implementing a robust audit trail in your ASP.NET application with my detailed step-by-step guide. From configure to execution, discover how to seamlessly integrate an audit trail for comprehensive monitoring and enhanced data security.]]></summary></entry><entry><title type="html">Setup your own docker private registry in windows machine</title><link href="https://mahedee.net//setup-docker-private-registry/" rel="alternate" type="text/html" title="Setup your own docker private registry in windows machine" /><published>2023-05-05T00:00:00-03:00</published><updated>2023-05-05T00:00:00-03:00</updated><id>https://mahedee.net//setup-docker-private-registry</id><content type="html" xml:base="https://mahedee.net//setup-docker-private-registry/"><![CDATA[<p>A Docker private registry is a centralized repository for storing and managing Docker images in a private and secure environment. Docker images are lightweight, standalone, and executable packages that contain all the necessary components to run a software application, including the code, runtime, libraries, and system tools. Instead of relying on public Docker Hub repositories, a private registry allows organizations to host their own Docker images internally.</p>

<p>Key features and benefits of a Docker private registry include:</p>

<ol>
  <li>
    <p><strong>Security:</strong> Keep sensitive or proprietary Docker images within the organization’s network, preventing unauthorized access.</p>
  </li>
  <li>
    <p><strong>Control:</strong> Maintain control over the distribution and versioning of Docker images, ensuring consistency across development, testing, and production environments.</p>
  </li>
  <li>
    <p><strong>Performance:</strong> Reduce image pull times by hosting images locally, especially beneficial in environments with limited or intermittent internet connectivity.</p>
  </li>
  <li>
    <p><strong>Customization:</strong> Tailor the registry to specific organizational requirements, adding authentication, access controls, and other features as needed.</p>
  </li>
  <li>
    <p><strong>Compliance:</strong> Adhere to data protection and regulatory requirements by managing and securing Docker images internally.</p>
  </li>
</ol>

<p><strong>Required Tools and Technologies</strong></p>
<ul>
  <li>Docker desktop</li>
  <li><a href="https://hub.docker.com/_/registry">Docker Registry</a></li>
  <li><a href="https://hub.docker.com/r/konradkleine/docker-registry-frontend/tags">Docker Registry front end</a></li>
</ul>

<p><strong>How to setup docker private registry</strong></p>

<ol>
  <li>
    <p>Install docker desktop in your windows machine. You can download it from <a href="https://www.docker.com/products/docker-desktop">here</a></p>
  </li>
  <li>
    <p>Pull registry and, docker-registry-frontend images and then run in a container. You can pull images and run images in a container using separate command. But here I use a docker compose file to run both images in the container using a single command.</p>
  </li>
</ol>

<p>Here, registry image is used for storing and distributing of container images and artifacts and docker-registry-frontend is used as a frontend for the private registry.</p>

<p><strong>docker-compose.yaml</strong></p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Version of the Docker Compose file</span>
<span class="na">version</span><span class="pi">:</span> <span class="s2">"</span><span class="s">3.7"</span>

<span class="c1"># Definition of services in the Docker Compose file</span>
<span class="na">services</span><span class="pi">:</span>

  <span class="c1"># Service for the Docker Registry host</span>
  <span class="na">docker-registry-host</span><span class="pi">:</span>
    <span class="c1"># Docker image to be used for the service</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">registry</span>
    
    <span class="c1"># Port mapping - maps port 5000 on the host to port 5000 on the container</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">5000:5000</span>
    
    <span class="c1"># Volume mapping - mounts the local ./registry-data directory to /var/lib/registry in the container</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">./registry-data:/var/lib/registry</span>
    
    <span class="c1"># Network configuration - connects the service to the 'docker-registry' network</span>
    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">docker-registry</span>

  <span class="c1"># Service for the Docker Registry web UI</span>
  <span class="na">docker-registry-host-web-ui</span><span class="pi">:</span>
    <span class="c1"># Docker image to be used for the service</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">konradkleine/docker-registry-frontend:v2</span>
    
    <span class="c1"># Environment variables for the service</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="na">ENV_DOCKER_REGISTRY_HOST</span><span class="pi">:</span> <span class="s">docker-registry-host</span>
      <span class="na">ENV_DOCKER_REGISTRY_PORT</span><span class="pi">:</span> <span class="m">5000</span>
    
    <span class="c1"># Port mapping - maps port 8080 on the host to port 80 on the container</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">8088:80</span>
    
    <span class="c1"># Network configuration - connects the service to the 'docker-registry' network</span>
    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">docker-registry</span>

<span class="c1"># Definition of a custom network named 'docker-registry'</span>
<span class="na">networks</span><span class="pi">:</span>
  <span class="na">docker-registry</span><span class="pi">:</span>

</code></pre></div></div>

<ul>
  <li>Now open windows terminal and go the directory where <code class="language-plaintext highlighter-rouge">docker-compose.yaml</code> file resides and run the following command.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">docker-compose</span> <span class="nf">up</span>
</code></pre></div></div>

<ul>
  <li>Now you can access the docker registry frontend using the following url and you will see the following output.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">http:</span><span class="err">/</span><span class="nv">/localhost:8088/home</span>
</code></pre></div></div>

<p><img src="/assets/images/posts/2023/docker-registry01.png" alt="" /></p>

<p><strong>Create a sample ASP.NET Core application and push images to the private registry</strong></p>

<ul>
  <li>
    <p>Create a sample ASP.NET Core Web API application name - PrivateRegistryDemo</p>
  </li>
  <li>
    <p>To see swagger in the release mode just comment out the following code in Program.cs file.</p>
  </li>
</ul>

<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code>     <span class="c1">// Configure the HTTP request pipeline.</span>
     <span class="c1">//if (app.Environment.IsDevelopment())</span>
     <span class="c1">//{</span>
         <span class="n">app</span><span class="p">.</span><span class="nf">UseSwagger</span><span class="p">();</span>
         <span class="n">app</span><span class="p">.</span><span class="nf">UseSwaggerUI</span><span class="p">();</span>
     <span class="c1">//}</span>

</code></pre></div></div>

<ul>
  <li>Add a docker file in the project and add following contents</li>
</ul>

<div class="language-docker highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#See https://aka.ms/customizecontainer to learn how to customize your debug container and how Visual Studio uses this Dockerfile to build your images for faster debugging.</span>

<span class="k">FROM</span><span class="w"> </span><span class="s">mcr.microsoft.com/dotnet/aspnet:8.0</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">base</span>
<span class="k">USER</span><span class="s"> app</span>
<span class="k">WORKDIR</span><span class="s"> /app</span>
<span class="k">EXPOSE</span><span class="s"> 8080</span>
<span class="k">EXPOSE</span><span class="s"> 8081</span>

<span class="k">FROM</span><span class="w"> </span><span class="s">mcr.microsoft.com/dotnet/sdk:8.0</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">build</span>
<span class="k">ARG</span><span class="s"> BUILD_CONFIGURATION=Release</span>
<span class="k">WORKDIR</span><span class="s"> /src</span>
<span class="k">COPY</span><span class="s"> ["PrivateRegistryDemo.csproj", "./"]</span>
<span class="k">RUN </span>dotnet restore <span class="s2">"./PrivateRegistryDemo.csproj"</span>
<span class="k">COPY</span><span class="s"> . .</span>
<span class="k">WORKDIR</span><span class="s"> "/src/."</span>
<span class="k">RUN </span>dotnet build <span class="s2">"PrivateRegistryDemo.csproj"</span> <span class="nt">-c</span> <span class="nv">$BUILD_CONFIGURATION</span> <span class="nt">-o</span> /app/build

<span class="k">FROM</span><span class="w"> </span><span class="s">build</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">publish</span>
<span class="k">ARG</span><span class="s"> BUILD_CONFIGURATION=Release</span>
<span class="k">RUN </span>dotnet publish <span class="s2">"PrivateRegistryDemo.csproj"</span> <span class="nt">-c</span> <span class="nv">$BUILD_CONFIGURATION</span> <span class="nt">-o</span> /app/publish /p:UseAppHost<span class="o">=</span><span class="nb">false</span>

<span class="k">FROM</span><span class="w"> </span><span class="s">base</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">final</span>
<span class="k">WORKDIR</span><span class="s"> /app</span>
<span class="k">COPY</span><span class="s"> --from=publish /app/publish .</span>
<span class="k">ENTRYPOINT</span><span class="s"> ["dotnet", "PrivateRegistryDemo.dll"]</span>
</code></pre></div></div>

<ul>
  <li>Now open the terminal and go to the project directory and run the following command to build the docker image.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">docker</span> <span class="nf">build</span> <span class="nf">-t</span> <span class="nf">privateregistrydemo:1.0.0</span> <span class="nf">.</span>
</code></pre></div></div>

<ul>
  <li>Now run the following command to tag the image.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">docker</span> <span class="nf">tag</span> <span class="nf">privateregistrydemo:1.0.0</span> <span class="nf">localhost:5000</span><span class="nv">/privateregistrydemo</span>
</code></pre></div></div>

<ul>
  <li>Now run the following command to push the image to the private registry.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">docker</span> <span class="nf">push</span> <span class="nf">localhost:5000</span><span class="nv">/privateregistrydemo</span>
</code></pre></div></div>

<ul>
  <li>
    <p>Now you can see the pushed image in the private registry frontend.
<img src="/assets/images/posts/2023/docker-registry02.png" alt="" /></p>
  </li>
  <li>
    <p>Now you can pull the image from the private registry using the following command.</p>
  </li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">docker</span> <span class="nf">pull</span> <span class="nf">localhost:5000</span><span class="nv">/privateregistrydemo</span>
</code></pre></div></div>

<ul>
  <li>Now you can run the image in a container using the following command.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">docker</span> <span class="nb">run</span> <span class="nf">-dp</span> <span class="nf">8080:8080</span> <span class="nf">--name</span> <span class="nf">private-registry-demo</span> <span class="nf">localhost:5000</span><span class="nv">/privateregistrydemo:latest</span>
</code></pre></div></div>

<ul>
  <li>Now you can access the application using the following url.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">http:</span><span class="err">/</span><span class="nv">/localhost:8080/swagger/index.html</span>
</code></pre></div></div>
<p>or</p>
<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">http:</span><span class="err">/</span><span class="nv">/localhost:8080/WeatherForecast</span>
</code></pre></div></div>

<ul>
  <li>Alternative: You can create your own private Docker registry with Portus using Ubuntu.</li>
</ul>

<p><a href="https://github.com/mahedee/code-sample02/tree/main/PrivateRegistryDemo">Source Code</a></p>]]></content><author><name>Mahedee Hasan</name></author><category term="Docker" /><category term="DevOps" /><category term="docker" /><category term="devops" /><summary type="html"><![CDATA[Discover step-by-step instructions to set up your own Docker private registry on a Windows machine. Enhance your development workflow, improve container management, and boost security with a personalized Docker registry solution tailored to your Windows environment]]></summary></entry></feed>