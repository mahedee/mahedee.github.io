<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://mahedee.net//feed.xml" rel="self" type="application/atom+xml" /><link href="https://mahedee.net//" rel="alternate" type="text/html" /><updated>2024-11-19T14:43:06-05:00</updated><id>https://mahedee.net//feed.xml</id><title type="html">Think Simple</title><subtitle>Think Simple</subtitle><author><name>Mahedee Hasan</name></author><entry><title type="html">Step-by-Step Guide: Deploying an ASP.NET Core Application with Azure Kubernetes Services, Azure SQL Server, and Azure Container Registry</title><link href="https://mahedee.net//step-by-step-guide-deploying-aspnet-core-application-with-aks-acr-sql/" rel="alternate" type="text/html" title="Step-by-Step Guide: Deploying an ASP.NET Core Application with Azure Kubernetes Services, Azure SQL Server, and Azure Container Registry" /><published>2024-06-07T00:00:00-04:00</published><updated>2024-06-07T00:00:00-04:00</updated><id>https://mahedee.net//step-by-step-guide-deploying-aspnet-core-application-with-aks-acr-sql</id><content type="html" xml:base="https://mahedee.net//step-by-step-guide-deploying-aspnet-core-application-with-aks-acr-sql/"><![CDATA[<p><strong>What is Azure Kubernetes Services (AKS)?</strong> 
Azure Kubernetes Services (AKS) is a managed Kubernetes service provided by Microsoft Azure. It offers a simplified way to deploy, manage, and scale containerized applications using Kubernetes. AKS is a fully managed service that eliminates the complexity of managing Kubernetes clusters, allowing you to focus on building and deploying your applications.</p>

<p><strong>What is Azure SQL Server?</strong>
Azure SQL Server is a managed relational database service provided by Microsoft Azure. It offers a scalable, secure, and fully managed database service that is compatible with SQL Server. Azure SQL Server provides high availability, automatic backups, and built-in security features to protect your data.</p>

<p><strong>What is Azure Container Registry (ACR)?</strong>
Azure Container Registry (ACR) is a managed container registry provided by Microsoft Azure. It allows you to store and manage container images securely in the cloud. ACR integrates with Azure services like Azure Kubernetes Services (AKS) to simplify the deployment of containerized applications.</p>

<p>In this article, you’ll learn how to deploy an ASP.NET Core application using Azure Kubernetes Services (AKS), Azure SQL Server, and Azure Container Registry (ACR). The steps below assume you have some basic familiarity with ASP.NET Core, Azure services, and Docker.</p>

<p><strong>Prerequisites</strong>
Before you begin, ensure you have the following:</p>
<ul>
  <li>An Azure subscription (create a free account if you don’t have one)</li>
  <li>Azure CLI installed on your local machine</li>
  <li>Docker Desktop installed on your local machine</li>
  <li>Visual Studio or any other code editor</li>
  <li>Basic knowledge of ASP.NET Core, Docker, and Kubernetes</li>
  <li>Kubectl installed on your local machine</li>
</ul>

<p><strong>Step 1: Create an Azure SQL Database</strong></p>
<ul>
  <li>Open the Azure portal and sign in with your Azure account.</li>
  <li>Click on the “Create a resource” button and search for “SQL Database”.</li>
  <li>Click on the “Create” button to create a new SQL Database.</li>
  <li>Fill in the required details like server name, database name, resource group, and pricing tier.</li>
  <li>Click on the “Review + create” button to create the SQL Database.</li>
</ul>

<p>or</p>
<ul>
  <li>Login to Azure CLI</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az login
</code></pre></div></div>

<ul>
  <li>Create a resource group for the SQL Server and Database</li>
  <li>Create a SQL Server and Database using Azure CLI</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Create a resource group</span>
az group create <span class="nt">--name</span> &lt;ResourceGroupName&gt; <span class="nt">--location</span> &lt;Location&gt;

<span class="c"># Create a SQL Server</span>
az sql server create <span class="nt">--name</span> &lt;SqlServerName&gt; <span class="nt">--resource-group</span> &lt;ResourceGroupName&gt; <span class="nt">--location</span> &lt;Location&gt; <span class="nt">--admin-user</span> &lt;AdminUser&gt; <span class="nt">--admin-password</span> &lt;AdminPassword&gt;

<span class="c"># Create a SQL Database with the S0 pricing tier</span>
az sql db create <span class="nt">--resource-group</span> &lt;ResourceGroupName&gt; <span class="nt">--server</span> &lt;SqlServerName&gt; <span class="nt">--name</span> &lt;DatabaseName&gt; <span class="nt">--service-objective</span> S0
</code></pre></div></div>

<p>Example of creating a SQL Server and Database using Azure CLI:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Create a resource group named myresourcegroup in the westus location</span>
az group create <span class="nt">--name</span> myresourcegroup <span class="nt">--location</span> westus

<span class="c"># Create a SQL Server named myserver in the myresourcegroup resource group with the admin user mahedee and password mypass@123</span>
az sql server create <span class="nt">--name</span> mahedeesqlserver <span class="nt">--resource-group</span> myresourcegroup <span class="nt">--location</span> westus <span class="nt">--admin-user</span> mahedee <span class="nt">--admin-password</span> mypass@123

<span class="c"># Create a SQL Database named mydatabase in the myresourcegroup resource group with the S0 pricing tier</span>
az sql db create <span class="nt">--resource-group</span> myresourcegroup <span class="nt">--server</span> mahedeesqlserver <span class="nt">--name</span> HRMDB <span class="nt">--service-objective</span> S0
</code></pre></div></div>

<ul>
  <li>Set Up Firewall Rules Allow your local machine or AKS to access the SQL server.</li>
  <li>Try to connect to the SQL Server using SQL Server Management Studio (SSMS) or Azure Data Studio to verify the connection.</li>
  <li>You will get a message that the IP address is not allowed to access the server.</li>
  <li>It will show the IP address range that is need to be added to the firewall rules.</li>
  <li>Collect start and end IP address range from the error message and add the IP address range to the firewall rules using the Azure CLI.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Allow your local machine to access the SQL server</span>
az sql server firewall-rule create <span class="nt">--resource-group</span> myresourcegroup <span class="nt">--server</span> mahedeesqlserver <span class="nt">--name</span> AllowLocalMachine <span class="nt">--start-ip-address</span> &lt;YourIPAddress&gt; <span class="nt">--end-ip-address</span> &lt;YourIPAddress&gt;
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Example: Allow your local machine to access the SQL server</span>
az sql server firewall-rule create <span class="nt">--resource-group</span> myresourcegroup <span class="nt">--server</span> mahedeesqlserver <span class="nt">--name</span> AllowLocalMachine <span class="nt">--start-ip-address</span> 162.237.182.0 <span class="nt">--end-ip-address</span> 162.237.182.255
</code></pre></div></div>

<p><strong>Step 2: Create an ASP.NET Core Application</strong></p>

<ul>
  <li>Create a new ASP.NET Core application using Visual Studio or the .NET CLI.</li>
  <li>Install the required NuGet packages for Azure SQL Database and Entity Framework Core.</li>
  <li>Configure the connection string to your Azure SQL Database.</li>
  <li>Create the required models and DbContext for your application.</li>
  <li>Add the required services and middleware to your application.</li>
  <li>Build and run your ASP.NET Core application locally to test it.</li>
</ul>

<p>In this Article I have created an asp.net core web api application name HRM.API. Source of the application is given at the end of the article.</p>

<ul>
  <li>
    <p>Now create a Dockerfile in the root of your project to containerize your ASP.NET Core application.</p>
  </li>
  <li>
    <p>I have added lot of comments in the Dockerfile to explain each step.</p>
  </li>
</ul>

<p><strong>Dockerfile</strong></p>

<div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Define the base image</span>
<span class="c"># Use the official ASP.NET Core runtime image the alias base sets here to use it in the next stage</span>

<span class="c"># Switches the execution to a user named app. This is a security best practice to avoid running as root.</span>
<span class="c"># The app user must exist in the aspnet:8.0 image. If not, this command will fail unless the user is created beforehand.</span>

<span class="c"># Sets the working directory to /app. All subsequent commands in this stage will be relative to this directory.</span>

<span class="c"># Informs Docker that the container will listen on ports 8080 and 8081. </span>
<span class="c"># This is for documentation purposes and does not expose the ports to the host by itself; you need to publish these ports explicitly with docker run -p.</span>

<span class="k">FROM</span><span class="w"> </span><span class="s">mcr.microsoft.com/dotnet/aspnet:8.0</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">base</span>
<span class="k">USER</span><span class="s"> app</span>
<span class="k">WORKDIR</span><span class="s"> /app</span>
<span class="k">EXPOSE</span><span class="s"> 8080</span>
<span class="k">EXPOSE</span><span class="s"> 8081</span>


<span class="c"># Define the Build Stage</span>
<span class="c"># Use the official ASP.NET Core SDK image to build the application</span>
<span class="c"># Set the working directory to /src. This directory will be existing only in the build stage.</span>
<span class="c"># Copies all files from the current directory on the host machine to the /src directory in the container.</span>
<span class="c"># Restores project dependencies from the .csproj file. This ensures all necessary NuGet packages are downloaded.</span>
<span class="c"># Builds the application in Release configuration and outputs the compiled files to the /app directory inside the container.</span>
<span class="k">FROM</span><span class="w"> </span><span class="s">mcr.microsoft.com/dotnet/sdk:8.0</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">build</span>
<span class="k">WORKDIR</span><span class="s"> /src</span>
<span class="k">COPY</span><span class="s"> . .</span>
<span class="k">RUN </span>dotnet restore
<span class="k">RUN </span>dotnet publish <span class="nt">-c</span> Release <span class="nt">-o</span> /app

<span class="c"># Final State</span>
<span class="c"># Use the base image defined in the first stage.</span>
<span class="c"># Set the working directory to /app.</span>
<span class="c"># Copies the compiled application from the build stage to the /app directory in the final image.</span>
<span class="c"># Defines the command to run when the container starts. Here, it launches the application by executing the .NET runtime to run the HRM.API.dll file.</span>
<span class="k">FROM</span><span class="w"> </span><span class="s">base</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">final</span>
<span class="k">WORKDIR</span><span class="s"> /app</span>
<span class="k">COPY</span><span class="s"> --from=build /app .</span>
<span class="k">ENTRYPOINT</span><span class="s"> ["dotnet", "HRM.API.dll"]</span>

<span class="c"># You can see only the app directory in the final image because Multi-stage builds isolate the content of each stage from the other stages.</span>
<span class="c"># Docker multi-stage build process implicitly discards everything in the intermediate stages when the final stage is built.</span>
</code></pre></div></div>

<ul>
  <li>Build and Test the Docker Image Locally</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Build the Docker image using the Dockerfile</span>
docker build <span class="nt">-t</span> hrm:latest <span class="nb">.</span>

<span class="c"># Run the Docker image locally</span>
docker run <span class="nt">-p</span> 8080:8080 hrm:latest
</code></pre></div></div>

<p>Access your application at http://localhost:8080/swagger/index.html to verify it works.</p>

<p><strong>Step 3: Create an Azure Container Registry (ACR)</strong></p>
<ul>
  <li>Open the Azure portal and sign in with your Azure account.</li>
  <li>Click on “Create a resource” and search for “Container Registry”.</li>
  <li>Select “Container Registry” and click on “Create”.</li>
  <li>Fill in the required details like registry name, resource group, location, and SKU.</li>
  <li>Click on “Review + create” and then “Create” to create the ACR.</li>
</ul>

<p>or</p>
<ul>
  <li>Create an Azure Container Registry using Azure CLI</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Create a resource group for the ACR</span>
<span class="c"># Since we already have a resource group, we can skip this step</span>
az group create <span class="nt">--name</span> &lt;ResourceGroupName&gt; <span class="nt">--location</span> &lt;Location&gt;

<span class="c"># Create an ACR</span>
az acr create <span class="nt">--name</span> &lt;ACRName&gt; <span class="nt">--resource-group</span> &lt;ResourceGroupName&gt; <span class="nt">--sku</span> Basic <span class="nt">--location</span> &lt;Location&gt;
</code></pre></div></div>

<p>Example of creating an Azure Container Registry using Azure CLI:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Create a resource group named myresourcegroup in the westus location</span>
<span class="c"># Since we already have a resource group, we can skip this step</span>
az group create <span class="nt">--name</span> myresourcegroup <span class="nt">--location</span> westus

<span class="c"># Create an ACR named myacr in the myresourcegroup resource group with the Basic SKU</span>
az acr create <span class="nt">--name</span> mh17acr <span class="nt">--resource-group</span> myresourcegroup <span class="nt">--sku</span> Basic <span class="nt">--location</span> westus
</code></pre></div></div>

<p><strong>Step 4: Push the Docker Image to Azure Container Registry (ACR)</strong></p>
<ul>
  <li>Tag the Docker image with the ACR URL. Tagging the image with the ACR URL is required to push the image to the ACR.</li>
  <li>Log in to the ACR using the Azure CLI.</li>
  <li>Push the Docker image to the ACR.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Tag the Docker image with the ACR URL</span>
docker tag hrm:latest &lt;ACRName&gt;.azurecr.io/hrm:latest
<span class="c"># Login to the ACR using the Azure CLI</span>
az acr login <span class="nt">--name</span> &lt;ACRName&gt;
<span class="c"># Push the Docker image to the ACR</span>
docker push &lt;ACRName&gt;.azurecr.io/hrm:latest
</code></pre></div></div>
<p>Example of pushing a Docker image to Azure Container Registry using Azure CLI:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Tag the Docker image with the ACR URL</span>
docker tag hrm:latest mh17acr.azurecr.io/hrm:latest
<span class="c"># Login to the ACR using the Azure CLI</span>
az acr login <span class="nt">--name</span> mh17acr
<span class="c"># Push the Docker image to the ACR</span>
docker push mh17acr.azurecr.io/hrm:latest
</code></pre></div></div>
<ul>
  <li>Verify that the Docker image is successfully pushed to the ACR by checking the ACR in the Azure portal. or using Azure CLI</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># List the repositories in the ACR</span>
az acr repository list <span class="nt">--name</span> &lt;ACRName&gt; <span class="nt">--output</span> table
</code></pre></div></div>
<p>Example of listing the repositories in the ACR using Azure CLI:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c"># List the repositories in the ACR</span>
  az acr repository list <span class="nt">--name</span> mh17acr <span class="nt">--output</span> table
</code></pre></div></div>

<p><strong>Step 5: Create an Azure Kubernetes Services (AKS) Cluster</strong></p>
<ul>
  <li>Open the Azure portal and sign in with your Azure account.</li>
  <li>Click on the “Create a resource” button and search for “Kubernetes Service”.</li>
  <li>Click on “Create” to create a new AKS cluster.</li>
  <li>Fill in the required information, such as the resource group, location, and cluster name.</li>
  <li>Basics Tab:
    <ul>
      <li>Subscription: Choose your Azure subscription.</li>
      <li>Resource Group: Create a new resource group or select an existing one.</li>
      <li>Kubernetes Cluster Name: Enter a unique name for your AKS cluster.</li>
      <li>Region: Select the region for your cluster.</li>
      <li>Click “Next: Node Pools” to proceed.</li>
    </ul>
  </li>
  <li>Node Pools Tab:
    <ul>
      <li>Click “Add a node pool” to add a new node pool.</li>
      <li>Node Pool Name: Enter a name for the node pool.</li>
      <li>Virtual Machine Size: Choose the VM size for the node pool.</li>
      <li>Node Count: Enter the number of nodes in the pool.</li>
      <li>Click “Next: Authentication” to proceed.</li>
    </ul>
  </li>
  <li>Authentication Tab:
    <ul>
      <li>Leave the default settings for authentication.</li>
      <li>Click “Next: Networking” to proceed.</li>
    </ul>
  </li>
  <li>Networking Tab:
    <ul>
      <li>Leave the default settings for networking.</li>
      <li>Click “Next: Monitoring” to proceed.</li>
    </ul>
  </li>
  <li>Monitoring Tab:
    <ul>
      <li>Enable monitoring if required.</li>
      <li>Click “Next: Tags” to proceed.</li>
    </ul>
  </li>
  <li>Tags Tab:
    <ul>
      <li>Add any required tags to the cluster.</li>
      <li>Click “Next: Review + create” to proceed.</li>
    </ul>
  </li>
  <li>Review + create Tab:
    <ul>
      <li>Review the cluster configuration.</li>
      <li>Click “Create” to create the AKS cluster.</li>
    </ul>
  </li>
  <li>Click on “Review + create” and then “Create” to create the AKS cluster.</li>
  <li>Once the cluster is created, click on the “Connect” button to connect to the cluster using kubectl.</li>
</ul>

<p>or</p>
<ul>
  <li>Create an AKS cluster using Azure CLI</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Create a resource group for the AKS cluster</span>
az group create <span class="nt">--name</span> &lt;ResourceGroupName&gt; <span class="nt">--location</span> &lt;Location&gt;
<span class="c"># Create an AKS cluster</span>
az aks create <span class="nt">--resource-group</span> &lt;ResourceGroupName&gt; <span class="nt">--name</span> &lt;AKSName&gt; <span class="nt">--node-count</span> &lt;NumberOfNodes&gt; <span class="nt">--enable-addons</span> monitoring <span class="nt">--generate-ssh-keys</span>
</code></pre></div></div>
<p>Example of creating an AKS cluster using Azure CLI:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Create a resource group for the AKS cluster</span>
<span class="c"># Since we already have a resource group, we can skip this step</span>
az group create <span class="nt">--name</span> myresourcegroup <span class="nt">--location</span> westus

<span class="c"># Create an AKS cluster</span>
az aks create <span class="nt">--resource-group</span> myresourcegroup <span class="nt">--name</span> myakscluster <span class="nt">--node-count</span> 1 <span class="nt">--enable-addons</span> monitoring <span class="nt">--generate-ssh-keys</span> <span class="nt">--location</span> westus <span class="nt">--kubernetes-version</span> 1.29.9 <span class="nt">--node-vm-size</span> Standard_B2s <span class="nt">--enable-cluster-autoscaler</span> <span class="nt">--min-count</span> 1 <span class="nt">--max-count</span> 3
</code></pre></div></div>
<p>Note: Sometimes, CLI commands may not work due to the version of the CLI. In that case, you can use the Azure portal to create the AKS cluster.</p>

<ul>
  <li>Now Connect to the AKS cluster. Use the following command to connect to the AKS cluster:</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az aks get-credentials <span class="nt">--resource-group</span> &lt;ResourceGroupName&gt; <span class="nt">--name</span> &lt;AKSName&gt;
</code></pre></div></div>

<p>Example of connecting to an AKS cluster using Azure CLI:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Connect to the AKS cluster</span>
az aks get-credentials <span class="nt">--resource-group</span> myresourcegroup <span class="nt">--name</span> myakscluster

<span class="c"># Output</span>
Merged <span class="s2">"myakscluster"</span> as current context <span class="k">in</span> /Users/username/.kube/config
</code></pre></div></div>

<ul>
  <li>To get the list of contexts, run the following command:</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl config get-contexts
</code></pre></div></div>
<ul>
  <li>To switch to a different context, run the following command:</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl config use-context &lt;ContextName&gt;
</code></pre></div></div>

<p><strong>Step 6: Link ACR(Azure Container Registry) to AKS</strong>
If the Azure Kubernetes Service (AKS) cluster is not linked to your ACR, Kubernetes cannot pull the image.</p>

<p>Run the following command to allow AKS to access your ACR:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az aks update <span class="nt">-n</span> &lt;aks-cluster-name&gt; <span class="nt">-g</span> &lt;resource-group-name&gt; <span class="nt">--attach-acr</span> mh17acr
</code></pre></div></div>

<p>Example of linking an ACR to an AKS cluster using Azure CLI:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Link the ACR to the AKS cluster</span>
az aks update <span class="nt">-n</span> myakscluster <span class="nt">-g</span> myresourcegroup <span class="nt">--attach-acr</span> mh17acr 
</code></pre></div></div>

<p><strong>Step 7: Deploy the ASP.NET Core Application to AKS</strong></p>

<ul>
  <li>Connect to the AKS cluster</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az aks get-credentials <span class="nt">--resource-group</span> &lt;ResourceGroupName&gt; <span class="nt">--name</span> &lt;AKSName&gt;
</code></pre></div></div>

<p>Example of connecting to an AKS cluster using Azure CLI:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Connect to the AKS cluster</span>
az aks get-credentials <span class="nt">--resource-group</span> myresourcegroup <span class="nt">--name</span> myakscluster

<span class="c"># Output</span>
Merged <span class="s2">"myakscluster"</span> as current context <span class="k">in</span> /Users/username/.kube/config
</code></pre></div></div>

<ul>
  <li>To get the list of contexts, run the following command:</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl config get-contexts
</code></pre></div></div>
<ul>
  <li>To switch to a different context, run the following command:</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl config use-context &lt;ContextName&gt;
</code></pre></div></div>

<ul>
  <li>Create a Kubernetes Pod for the ASP.NET Core application</li>
  <li>
    <p>Here I used lots of comments to explain each section of the yaml file. You can remove the comments before using it.</p>

    <p><strong>pod_aks.yml</strong></p>
  </li>
</ul>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Pod</span> <span class="c1"># Pod is the smallest deployable unit in Kubernetes and it represents a single instance of a running process in your cluster.</span>
<span class="na">metadata</span><span class="pi">:</span> <span class="c1"># Metadata section provides information about the Pod</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">hrm-pod</span> <span class="c1"># Name of the Pod. Name must be unique within the namespace.</span>
  <span class="na">labels</span><span class="pi">:</span>       <span class="c1"># Labels are key/value pairs that are attached to objects, such as pods. Labels are intended to be used to specify identifying attributes of objects that are meaningful and relevant to users.</span>
    <span class="na">app</span><span class="pi">:</span> <span class="s">hrm-api</span>

<span class="c1"># Specification for the Pod</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">containers</span><span class="pi">:</span> <span class="c1"># List of containers within the Pod</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">hrm-ctr</span>
      <span class="na">image</span><span class="pi">:</span> <span class="s">mh17acr.azurecr.io/hrm:latest</span> 
      <span class="na">ports</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">containerPort</span><span class="pi">:</span> <span class="m">8080</span> <span class="c1"># Port that the container will expose</span>
      <span class="na">env</span><span class="pi">:</span> <span class="c1"># List of environment variables to set in the container</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">ConnectionStrings__DefaultConnection</span> <span class="c1"># Name of the environment variable. Here __ is used to represent the hierarchy of the connection string. It means ConnectionStrings:DefaultConnection</span>
          <span class="na">value</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Server=mahedeesqlserver.database.windows.net;Database=HRMDB;User</span><span class="nv"> </span><span class="s">Id=mahedee;Password=mypass@123;MultipleActiveResultSets=true"</span>
  
</code></pre></div></div>

<ul>
  <li>Create a Kubernetes Service for the ASP.NET Core application</li>
  <li>
    <p>Here I used lots of comments to explain each section of the yaml file. You can remove the comments before using it.</p>

    <p><strong>service_aks.yml</strong></p>
  </li>
</ul>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Service</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">labels</span><span class="pi">:</span>
    <span class="na">app</span><span class="pi">:</span> <span class="s">hrm-api</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">hrm-service</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">type</span><span class="pi">:</span> <span class="s">LoadBalancer</span>
  <span class="na">ports</span><span class="pi">:</span>
    <span class="c1"># First port configuration</span>
    <span class="pi">-</span> <span class="na">port</span><span class="pi">:</span> <span class="m">8011</span> <span class="c1"># Port that the service will expose</span>
      <span class="na">protocol</span><span class="pi">:</span> <span class="s">TCP</span> <span class="c1"># Protocol that the service will use</span>
      <span class="na">targetPort</span><span class="pi">:</span> <span class="m">8080</span> <span class="c1"># Port on the container where traffic will be directed</span>
      <span class="na">name</span><span class="pi">:</span> <span class="s">http</span> <span class="c1"># Name of the port (useful for service discovery)</span>
      <span class="na">nodePort</span><span class="pi">:</span> <span class="m">30376</span> <span class="c1"># Specific port on the cluster nodes to expose (used with NodePort/LoadBalancer services)</span>
    <span class="c1"># Second port configuration</span>
    <span class="pi">-</span> <span class="na">port</span><span class="pi">:</span> <span class="m">8081</span> <span class="c1"># Port that the service will expose</span>
      <span class="na">protocol</span><span class="pi">:</span> <span class="s">TCP</span> <span class="c1"># Protocol that the service will use</span>
      <span class="na">targetPort</span><span class="pi">:</span> <span class="m">8081</span> <span class="c1"># Port on the container where traffic will be directed</span>
      <span class="na">name</span><span class="pi">:</span> <span class="s">https</span> <span class="c1"># Name of the port (useful for service discovery)</span>
      <span class="na">nodePort</span><span class="pi">:</span> <span class="m">30676</span> <span class="c1"># Specific port on the cluster nodes to expose (used with NodePort/LoadBalancer services)</span>
  <span class="c1"># Selector matches Pods with the label "app: hrm-api"</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">app</span><span class="pi">:</span> <span class="s">hrm-api</span>
<span class="na">status</span><span class="pi">:</span>
  <span class="na">loadBalancer</span><span class="pi">:</span> <span class="pi">{}</span> <span class="c1"># Placeholder for LoadBalancer details (IP or DNS name) once provisioned</span>

<span class="c1"># Use spaces (2 or 4 spaces) for indentation in YAML files; tabs are not allowed.</span>
<span class="c1"># The YAML specification prohibits the use of tabs, and using spaces ensures consistency and proper parsing.</span>
  
</code></pre></div></div>

<ul>
  <li>
    <p>Deploy the ASP.NET Core application to the AKS cluster</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl apply <span class="nt">-f</span> pod_aks.yml
kubectl apply <span class="nt">-f</span> service_aks.yml
</code></pre></div>    </div>
  </li>
  <li>
    <p>Verify that the ASP.NET Core application is deployed to the AKS cluster by checking the pods and services in the Kubernetes dashboard or using the following commands:</p>
  </li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  kubectl get pods

  Output:

  NAME      READY   STATUS    RESTARTS   AGE
  hrm-pod   1/1     Running   0          16s
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  kubectl get svc

  Output:
  NAME          TYPE           CLUSTER-IP   EXTERNAL-IP      PORT<span class="o">(</span>S<span class="o">)</span>                         AGE
  hrm-service   LoadBalancer   10.0.80.25   52.137.187.193   8011:30376/TCP,8081:30676/TCP   24s
  kubernetes    ClusterIP      10.0.0.1     &lt;none&gt;           443/TCP                         21m
</code></pre></div></div>

<ul>
  <li>Access the ASP.NET Core application using the external IP address of the service.</li>
  <li>In this access the application using the following URL:</li>
</ul>

<p>http://52.137.187.193:8011/swagger/index.html</p>

<ul>
  <li>To delete the pod and service, use the following commands:</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl delete <span class="nt">-f</span> pod_aks.yml
kubectl delete <span class="nt">-f</span> service_aks.yml
</code></pre></div></div>

<ul>
  <li>Command to get log of a pod
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl logs <span class="nt">-f</span> hrm-pod
</code></pre></div>    </div>
  </li>
</ul>

<p><strong>Trouble Shooting: Application cannot connect to the Azure SQL Database</strong></p>
<ul>
  <li>Run the following command to check the logs of the pod to identify any connection issues:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl logs <span class="nt">-f</span> hrm-pod
</code></pre></div>    </div>
  </li>
  <li>You will get the error message in the logs if there is any issue connecting to the Azure SQL Database.</li>
  <li>It says AKS pod cannot connect to the Azure SQL Database. It will show source IP address is not allowed to access the server.</li>
  <li>To resolve this issue, you need to allow the AKS cluster’s IP address to access the Azure SQL Database.</li>
  <li>Run the following command to set up the firewall rule to allow the AKS cluster’s IP address to access the Azure SQL Database:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az sql server firewall-rule create <span class="nt">--resource-group</span> &lt;ResourceGroupName&gt; <span class="nt">--server</span> &lt;SqlServerName&gt; <span class="nt">--name</span> AllowAKSIP <span class="nt">--start-ip-address</span> 13.64.73.58 <span class="nt">--end-ip-address</span> 13.64.73.58
</code></pre></div>    </div>
    <p>Example:</p>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az sql server firewall-rule create <span class="nt">--resource-group</span> &lt;ResourceGroupName&gt; <span class="nt">--server</span> &lt;SqlServerName&gt; <span class="nt">--name</span> AllowAKSIP <span class="nt">--start-ip-address</span> 13.64.73.58 <span class="nt">--end-ip-address</span> 13.64.73.58
</code></pre></div>    </div>
  </li>
  <li>After setting up the firewall rule, try to access the Azure SQL Database from the AKS pod again. The connection should be successful now.</li>
  <li>Kubernetes pods ip address can be changed after restart. So, it is better to use static ip address for the AKS cluster.</li>
</ul>

<p><strong>Common Commands:</strong></p>

<ul>
  <li>To update azur CLI run the following command:</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az upgrade
</code></pre></div></div>

<ul>
  <li>To know the region of the AKS cluster, run the following command:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az aks show <span class="nt">-n</span> &lt;aks-cluster-name&gt; <span class="nt">-g</span> &lt;resource-group-name&gt; <span class="nt">--query</span> location <span class="nt">-o</span> tsv
</code></pre></div>    </div>
  </li>
  <li>To know the region of the Azure SQL Database, run the following command:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az sql server show <span class="nt">-n</span> &lt;sql-server-name&gt; <span class="nt">-g</span> &lt;resource-group-name&gt; <span class="nt">--query</span> location <span class="nt">-o</span> tsv
</code></pre></div>    </div>
  </li>
  <li>To know the ip address of the AKS cluster, run the following command:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az aks show <span class="nt">-n</span> &lt;aks-cluster-name&gt; <span class="nt">-g</span> &lt;resource-group-name&gt; <span class="nt">--query</span> outboundIpAddresses <span class="nt">-o</span> tsv
</code></pre></div>    </div>
  </li>
  <li>To get list of contexts, run the following command:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl config get-contexts
</code></pre></div>    </div>
  </li>
  <li>To switch to a different context, run the following command:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl config use-context &lt;context-name&gt;
</code></pre></div>    </div>
  </li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl get pods <span class="nt">--watch</span>  <span class="c"># Watch the pods in the current namespace</span>
</code></pre></div></div>

<ul>
  <li>To get the logs of a pod, run the following command:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl logs <span class="nt">-f</span> &lt;pod-name&gt;
</code></pre></div>    </div>
  </li>
  <li>To get the logs of a pod in a specific container, run the following command:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl logs <span class="nt">-f</span> &lt;pod-name&gt; <span class="nt">-c</span> &lt;container-name&gt;
</code></pre></div>    </div>
  </li>
  <li>Describe a pod
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl describe pod &lt;pod-name&gt;
</code></pre></div>    </div>
  </li>
  <li>To get the details of a pod, run the following command:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl get pod &lt;pod-name&gt; <span class="nt">-o</span> yaml
</code></pre></div>    </div>
  </li>
</ul>

<p><strong><a href="https://github.com/mahedee/code-sample02/tree/master/aks-hrm">Source code</a></strong></p>]]></content><author><name>Mahedee Hasan</name></author><category term="ASP.NET Core" /><category term="Kubernetes" /><category term="SQL Server" /><category term="Docker" /><category term="Azure" /><category term="DevOps" /><category term="Microservices" /><category term="aspnetcore" /><category term="kubernetes" /><category term="sqlserver" /><category term="docker" /><category term="azure" /><category term="devops" /><category term="microservices" /><summary type="html"><![CDATA[Securing RabbitMQ with SSL/TLS and enabling HTTPS access for the Management UI is essential to protect data and ensure a secure environment. This guide walks you through the steps to set up RabbitMQ with SSL/TLS on Docker Desktop and enable HTTPS for the Management UI. Follow along to configure RabbitMQ to handle encrypted AMQP connections as well as a secure Management interface.]]></summary></entry><entry><title type="html">Understanding Different Kinds of Kubernetes Resources</title><link href="https://mahedee.net//understanding-different-kinds-of-kubernetes-resources/" rel="alternate" type="text/html" title="Understanding Different Kinds of Kubernetes Resources" /><published>2024-05-08T00:00:00-04:00</published><updated>2024-05-08T00:00:00-04:00</updated><id>https://mahedee.net//understanding-different-kinds-of-kubernetes-resources</id><content type="html" xml:base="https://mahedee.net//understanding-different-kinds-of-kubernetes-resources/"><![CDATA[<p>Kubernetes, a leading container orchestration platform, is designed to simplify the deployment, scaling, and management of applications. Central to Kubernetes are its <strong>resources</strong>, each tailored for specific tasks like running applications, managing storage, or ensuring smooth communication between components. Understanding these resources is crucial for leveraging Kubernetes to its full potential.</p>

<p>Here’s a comprehensive guide to the most commonly used Kubernetes resources, their purposes, and use cases.</p>

<p><strong>1. Pod</strong>
The <strong>Pod</strong> is the smallest and most basic deployable unit in Kubernetes. A Pod encapsulates one or more tightly coupled containers that share the same network namespace and storage.</p>

<p><strong>Purpose</strong>:</p>
<ul>
  <li>To host application containers, often one per Pod.</li>
  <li>Acts as the building block for higher-level abstractions like Deployments.</li>
</ul>

<p><strong>Use Case</strong>:</p>
<ul>
  <li>Deploying simple applications or debugging purposes.</li>
</ul>

<p><strong>Example</strong>:</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Pod</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">hrm-pod</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">containers</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">hrm-container</span>
      <span class="na">image</span><span class="pi">:</span> <span class="s">mh17acr.azurecr.io/hrm:latest</span>
      <span class="na">ports</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">containerPort</span><span class="pi">:</span> <span class="m">8080</span>
</code></pre></div></div>

<p><strong>2. Deployment</strong>
A <strong>Deployment</strong> is a higher-level abstraction that manages a group of Pods. It handles updates, scaling, and fault tolerance for stateless applications.</p>

<p><strong>Purpose</strong>:</p>
<ul>
  <li>To ensure a specific number of replicas are running.</li>
  <li>Supports rolling updates and rollbacks.</li>
</ul>

<p><strong>Use Case</strong>:</p>
<ul>
  <li>Deploying scalable, stateless applications.</li>
</ul>

<p><strong>Example</strong>:</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Deployment</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">hrm-deployment</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">replicas</span><span class="pi">:</span> <span class="m">3</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">matchLabels</span><span class="pi">:</span>
      <span class="na">app</span><span class="pi">:</span> <span class="s">hrm-api</span>
  <span class="na">template</span><span class="pi">:</span>
    <span class="na">metadata</span><span class="pi">:</span>
      <span class="na">labels</span><span class="pi">:</span>
        <span class="na">app</span><span class="pi">:</span> <span class="s">hrm-api</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">containers</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">hrm-container</span>
          <span class="na">image</span><span class="pi">:</span> <span class="s">mh17acr.azurecr.io/hrm:latest</span>
          <span class="na">ports</span><span class="pi">:</span>
            <span class="pi">-</span> <span class="na">containerPort</span><span class="pi">:</span> <span class="m">8080</span>
</code></pre></div></div>

<p><strong>3. Service</strong>
A <strong>Service</strong> provides a stable network endpoint for accessing a group of Pods. It abstracts the dynamic nature of Pods and exposes them through a fixed IP or DNS.</p>

<p><strong>Purpose</strong>:</p>
<ul>
  <li>To route traffic to Pods, regardless of their lifecycle.</li>
  <li>Supports load balancing.</li>
</ul>

<p><strong>Use Case</strong>:</p>
<ul>
  <li>Connecting frontend applications to backend APIs.</li>
</ul>

<p><strong>Example</strong>:</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Service</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">hrm-service</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">app</span><span class="pi">:</span> <span class="s">hrm-api</span>
  <span class="na">ports</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">protocol</span><span class="pi">:</span> <span class="s">TCP</span>
      <span class="na">port</span><span class="pi">:</span> <span class="m">80</span>
      <span class="na">targetPort</span><span class="pi">:</span> <span class="m">8080</span>
  <span class="na">type</span><span class="pi">:</span> <span class="s">ClusterIP</span>
</code></pre></div></div>

<p><strong>4. ConfigMap</strong>
A <strong>ConfigMap</strong> is used to store non-sensitive configuration data as key-value pairs. This allows configuration changes without rebuilding container images.</p>

<p><strong>Purpose</strong>:</p>
<ul>
  <li>To decouple configuration from application logic.</li>
</ul>

<p><strong>Use Case</strong>:</p>
<ul>
  <li>Managing application settings like environment variables.</li>
</ul>

<p><strong>Example</strong>:</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">ConfigMap</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">hrm-config</span>
<span class="na">data</span><span class="pi">:</span>
  <span class="na">environment</span><span class="pi">:</span> <span class="s">production</span>
  <span class="na">log_level</span><span class="pi">:</span> <span class="s">debug</span>
</code></pre></div></div>

<p><strong>5. Secret</strong>
A <strong>Secret</strong> securely stores sensitive information, such as passwords, tokens, and keys. Unlike ConfigMaps, Secrets encode data in Base64 for security.</p>

<p><strong>Purpose</strong>:</p>
<ul>
  <li>To securely manage sensitive data.</li>
</ul>

<p><strong>Use Case</strong>:</p>
<ul>
  <li>Storing database credentials or API keys.</li>
</ul>

<p><strong>Example</strong>:</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Secret</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">hrm-secret</span>
<span class="na">type</span><span class="pi">:</span> <span class="s">Opaque</span>
<span class="na">data</span><span class="pi">:</span>
  <span class="na">password</span><span class="pi">:</span> <span class="s">bXlwYXNzd29yZA==</span> <span class="c1"># Base64 encoded "mypassword"</span>
</code></pre></div></div>

<p><strong>6. StatefulSet</strong>
A <strong>StatefulSet</strong> manages stateful applications, ensuring each Pod has a unique, stable identity and persistent storage.</p>

<p><strong>Purpose</strong>:</p>
<ul>
  <li>To deploy applications that require stable Pod identities and ordered deployment.</li>
</ul>

<p><strong>Use Case</strong>:</p>
<ul>
  <li>Databases, distributed systems, or applications requiring persistent storage.</li>
</ul>

<p><strong>Example</strong>:</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">StatefulSet</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">hrm-db</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">serviceName</span><span class="pi">:</span> <span class="s2">"</span><span class="s">hrm-db-service"</span>
  <span class="na">replicas</span><span class="pi">:</span> <span class="m">2</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">matchLabels</span><span class="pi">:</span>
      <span class="na">app</span><span class="pi">:</span> <span class="s">hrm-db</span>
  <span class="na">template</span><span class="pi">:</span>
    <span class="na">metadata</span><span class="pi">:</span>
      <span class="na">labels</span><span class="pi">:</span>
        <span class="na">app</span><span class="pi">:</span> <span class="s">hrm-db</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">containers</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">mysql-container</span>
          <span class="na">image</span><span class="pi">:</span> <span class="s">mysql:5.7</span>
          <span class="na">ports</span><span class="pi">:</span>
            <span class="pi">-</span> <span class="na">containerPort</span><span class="pi">:</span> <span class="m">3306</span>
</code></pre></div></div>

<p><strong>7. Job</strong>
A <strong>Job</strong> runs tasks to completion, such as batch processing or database migrations. It ensures the task is retried upon failure.</p>

<p><strong>Purpose</strong>:</p>
<ul>
  <li>To run one-time or short-lived tasks.</li>
</ul>

<p><strong>Use Case</strong>:</p>
<ul>
  <li>Running a data import job or executing scripts.</li>
</ul>

<p><strong>Example</strong>:</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">batch/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Job</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">hrm-job</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">template</span><span class="pi">:</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">containers</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">hrm-task</span>
          <span class="na">image</span><span class="pi">:</span> <span class="s">busybox</span>
          <span class="na">command</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">sh"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">-c"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">echo</span><span class="nv"> </span><span class="s">'Hello,</span><span class="nv"> </span><span class="s">Kubernetes!'"</span><span class="pi">]</span>
      <span class="na">restartPolicy</span><span class="pi">:</span> <span class="s">Never</span>
  <span class="na">backoffLimit</span><span class="pi">:</span> <span class="m">4</span>
</code></pre></div></div>

<p><strong>8. CronJob</strong>
A <strong>CronJob</strong> schedules Jobs at specific times, like a cron job in Linux.</p>

<p><strong>Purpose</strong>:</p>
<ul>
  <li>To run periodic tasks automatically.</li>
</ul>

<p><strong>Use Case</strong>:</p>
<ul>
  <li>Running backups, generating reports, or performing maintenance tasks.</li>
</ul>

<p><strong>Example</strong>:</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">batch/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">CronJob</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">hrm-cronjob</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">schedule</span><span class="pi">:</span> <span class="s2">"</span><span class="s">0</span><span class="nv"> </span><span class="s">3</span><span class="nv"> </span><span class="s">*</span><span class="nv"> </span><span class="s">*</span><span class="nv"> </span><span class="s">*"</span> <span class="c1"># Run daily at 3 AM</span>
  <span class="na">jobTemplate</span><span class="pi">:</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">template</span><span class="pi">:</span>
        <span class="na">spec</span><span class="pi">:</span>
          <span class="na">containers</span><span class="pi">:</span>
            <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">hrm-task</span>
              <span class="na">image</span><span class="pi">:</span> <span class="s">busybox</span>
              <span class="na">command</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">sh"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">-c"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">echo</span><span class="nv"> </span><span class="s">'Scheduled</span><span class="nv"> </span><span class="s">Task'"</span><span class="pi">]</span>
          <span class="na">restartPolicy</span><span class="pi">:</span> <span class="s">OnFailure</span>
</code></pre></div></div>

<p><strong>9. PersistentVolume (PV) and PersistentVolumeClaim (PVC)</strong>
A <strong>PersistentVolume (PV)</strong> represents physical storage in the cluster, while a <strong>PersistentVolumeClaim (PVC)</strong> requests specific storage resources from a PV.</p>

<p><strong>Purpose</strong>:</p>
<ul>
  <li>To manage persistent storage for stateful applications.</li>
</ul>

<p><strong>Use Case</strong>:</p>
<ul>
  <li>Storing database data or application logs.</li>
</ul>

<p><strong>Example</strong>:</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># PersistentVolume</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">PersistentVolume</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">hrm-pv</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">capacity</span><span class="pi">:</span>
    <span class="na">storage</span><span class="pi">:</span> <span class="s">5Gi</span>
  <span class="na">accessModes</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">ReadWriteOnce</span>
  <span class="na">hostPath</span><span class="pi">:</span>
    <span class="na">path</span><span class="pi">:</span> <span class="s">/data/hrm</span>

<span class="c1"># PersistentVolumeClaim</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">PersistentVolumeClaim</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">hrm-pvc</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">accessModes</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">ReadWriteOnce</span>
  <span class="na">resources</span><span class="pi">:</span>
    <span class="na">requests</span><span class="pi">:</span>
      <span class="na">storage</span><span class="pi">:</span> <span class="s">5Gi</span>
</code></pre></div></div>

<p><strong>Conclusion</strong>
Kubernetes resources provide powerful abstractions to deploy, manage, and scale applications in a cloud-native way. By understanding these resource types and their purposes, you can design robust, scalable, and secure architectures tailored to your application’s needs. Whether you’re deploying a stateless microservice or managing a complex stateful database, Kubernetes has the tools to make it easier.</p>]]></content><author><name>Mahedee Hasan</name></author><category term="Kubernetes" /><category term="Docker" /><category term="Microservices" /><category term="DevOps" /><category term="Azure" /><category term="kubernetes" /><category term="docker" /><category term="azure" /><category term="devops" /><category term="microservices" /><summary type="html"><![CDATA[Learn about the different types of Kubernetes resources, their purposes, and how they help manage and scale applications in a containerized environment. Perfect for beginners and experts alike!]]></summary></entry><entry><title type="html">How to Configure SSL and HTTPS for RabbitMQ in Docker</title><link href="https://mahedee.net//how-to-configure-ssl-and-https-for-rabbitmq-in-docker/" rel="alternate" type="text/html" title="How to Configure SSL and HTTPS for RabbitMQ in Docker" /><published>2024-04-02T00:00:00-04:00</published><updated>2024-04-02T00:00:00-04:00</updated><id>https://mahedee.net//how-to-configure-ssl-and-https-for-rabbitmq-in-docker</id><content type="html" xml:base="https://mahedee.net//how-to-configure-ssl-and-https-for-rabbitmq-in-docker/"><![CDATA[<p>Securing RabbitMQ with SSL/TLS and enabling HTTPS access for the Management UI is essential to protect data and ensure a secure environment. This guide walks you through the steps to set up RabbitMQ with SSL/TLS on Docker Desktop and enable HTTPS for the Management UI. Follow along to configure RabbitMQ to handle encrypted AMQP connections as well as a secure Management interface.</p>

<p><strong>Prerequisites</strong></p>

<p>To follow this guide, you’ll need:</p>
<ol>
  <li><strong>Docker Desktop</strong>: Installed and running on your machine.</li>
  <li><strong>RabbitMQ Configuration Files</strong>: Basic familiarity with RabbitMQ configurations and SSL certificates.</li>
  <li><strong>OpenSSL</strong>: To create self-signed certificates if needed.</li>
</ol>

<p><strong>Step 1: Create SSL/TLS Certificates</strong></p>

<p>To secure RabbitMQ over SSL, you’ll need three key files:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">ca_certificate.pem</code>: Certificate Authority (CA) certificate. This file is required for RabbitMQ to validate client certificates.</li>
  <li><code class="language-plaintext highlighter-rouge">server_certificate.pem</code>: Server certificate signed by the CA. This file is used by RabbitMQ to authenticate itself to clients.</li>
  <li><code class="language-plaintext highlighter-rouge">server_key.pem</code>: Private key for the server certificate. This file is used by RabbitMQ to decrypt incoming client requests.</li>
</ul>

<p><strong>Creating Self-Signed Certificates</strong></p>

<p><strong>1: Create a Certificate Authority (CA)</strong></p>

<p>First, create a CA certificate to sign the server certificate.</p>

<p>1.1 <strong>Generate a private key for the CA</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   openssl genpkey <span class="nt">-algorithm</span> RSA <span class="nt">-out</span> ca_key.pem <span class="nt">-aes256</span>
</code></pre></div></div>

<ul>
  <li>You’ll be prompted to create a passphrase for the CA key. Remember this, as it will be needed to sign certificates.</li>
</ul>

<p>1.2 <strong>Generate a CA certificate</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   openssl req <span class="nt">-x509</span> <span class="nt">-new</span> <span class="nt">-nodes</span> <span class="nt">-key</span> ca_key.pem <span class="nt">-sha256</span> <span class="nt">-days</span> 3650 <span class="nt">-out</span> ca_certificate.pem
</code></pre></div></div>

<ul>
  <li>You’ll be asked to fill out details for the CA certificate (such as country, organization, etc.). This will generate the <code class="language-plaintext highlighter-rouge">ca_certificate.pem</code> file.</li>
  <li>You can keep everything blank if you’re creating a self-signed certificate for testing purposes.</li>
</ul>

<p><strong>2: Create the Server Certificate and Key</strong></p>

<p>Next, create the server certificate that RabbitMQ will use, signed by your CA.</p>

<p>2.1. <strong>Generate a private key for the server</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   openssl genpkey <span class="nt">-algorithm</span> RSA <span class="nt">-out</span> server_key.pem
</code></pre></div></div>

<p>2.2. <strong>Create a Certificate Signing Request (CSR) for the server certificate</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   openssl req <span class="nt">-new</span> <span class="nt">-key</span> server_key.pem <span class="nt">-out</span> server_csr.pem
</code></pre></div></div>

<ul>
  <li>You’ll be prompted to enter details for the server. Be sure to set <code class="language-plaintext highlighter-rouge">Common Name (CN)</code> to the server’s hostname or IP address, as clients will check this when verifying the server’s identity.</li>
  <li>You can keep other fields blank for testing purposes.</li>
</ul>

<p>2.3. <strong>Sign the server certificate with the CA</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   openssl x509 <span class="nt">-req</span> <span class="nt">-in</span> server_csr.pem <span class="nt">-CA</span> ca_certificate.pem <span class="nt">-CAkey</span> ca_key.pem <span class="nt">-CAcreateserial</span> <span class="nt">-out</span> server_certificate.pem <span class="nt">-days</span> 3650 <span class="nt">-sha256</span>
</code></pre></div></div>

<ul>
  <li>This step signs the <code class="language-plaintext highlighter-rouge">server_certificate.pem</code> with <code class="language-plaintext highlighter-rouge">ca_certificate.pem</code>, creating a valid SSL certificate for the server. The <code class="language-plaintext highlighter-rouge">-CAcreateserial</code> flag creates a <code class="language-plaintext highlighter-rouge">ca_certificate.srl</code> file that manages the CA’s serial numbers for certificates.</li>
</ul>

<p>After completing the above steps, you should have these files:</p>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">ca_certificate.pem</code></strong>: The CA certificate file used to verify server identity.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">server_certificate.pem</code></strong>: The server’s signed certificate file.</li>
  <li><strong><code class="language-plaintext highlighter-rouge">server_key.pem</code></strong>: The server’s private key file.</li>
</ul>

<p>These files can now be used in the <code class="language-plaintext highlighter-rouge">docker-compose.yml</code> setup you configured earlier. Ensure the certificates are placed in the correct <code class="language-plaintext highlighter-rouge">certs</code> directory and that permissions are set to secure access to the private key (<code class="language-plaintext highlighter-rouge">server_key.pem</code>).</p>

<p><strong>Step 2: Set Up <code class="language-plaintext highlighter-rouge">rabbitmq.conf</code> for SSL and HTTPS</strong></p>

<p>RabbitMQ requires configurations to enable SSL for AMQP client connections (on port 5671) and HTTPS for the Management UI (on port 15671). Let’s create a <code class="language-plaintext highlighter-rouge">rabbitmq.conf</code> file with these configurations:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># SSL settings for the main AMQP listener (used for client connections over SSL/TLS)
listeners.ssl.default = 5671                     # AMQP listener over SSL/TLS on port 5671
ssl_options.cacertfile = /etc/rabbitmq/certs/ca_certificate.pem  # Path to the CA certificate to verify client certificates
ssl_options.certfile = /etc/rabbitmq/certs/server_certificate.pem # Path to the server certificate for RabbitMQ
ssl_options.keyfile = /etc/rabbitmq/certs/server_key.pem         # Path to the server private key for SSL
ssl_options.verify = verify_peer                # Requires clients to present valid certificates (mutual authentication)
ssl_options.fail_if_no_peer_cert = true         # Disconnects clients if they don't present a valid certificate

# Enable HTTPS for the management interface
management.listener.port = 15671                # Port for accessing RabbitMQ Management UI over HTTPS
management.listener.ssl = true                  # Enable SSL for the management UI listener
management.listener.ip = 0.0.0.0                # Bind to all available network interfaces to accept external connections

# SSL options for HTTPS management listener
management.listener.ssl_opts.cacertfile = /etc/rabbitmq/certs/ca_certificate.pem  # CA certificate for HTTPS verification
management.listener.ssl_opts.certfile = /etc/rabbitmq/certs/server_certificate.pem # Server certificate for HTTPS
management.listener.ssl_opts.keyfile = /etc/rabbitmq/certs/server_key.pem         # Private key for HTTPS
management.listener.ssl_opts.verify = verify_none          # Allows clients to access without presenting a client certificate
management.listener.ssl_opts.fail_if_no_peer_cert = false  # Does not require client certificates for HTTPS access

</code></pre></div></div>

<p>In this configuration:</p>
<ul>
  <li><strong>AMQP (5671)</strong>: The <code class="language-plaintext highlighter-rouge">verify_peer</code> and <code class="language-plaintext highlighter-rouge">fail_if_no_peer_cert</code> options enforce strict client certificate validation.</li>
  <li><strong>Management UI (15671)</strong>: Allows HTTPS access without requiring client certificates.</li>
</ul>

<p>Save this file as <code class="language-plaintext highlighter-rouge">rabbitmq.conf</code>.</p>

<p><strong>Step 3: Configure <code class="language-plaintext highlighter-rouge">docker-compose.yml</code> for RabbitMQ</strong></p>

<p>To set up RabbitMQ with the configurations and certificates, we need to update <code class="language-plaintext highlighter-rouge">docker-compose.yml</code>:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">3.8'</span>

<span class="na">services</span><span class="pi">:</span>
  <span class="na">rabbitmq</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">rabbitmq:3-management</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">rabbitmq</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">5671:5671"</span>         <span class="c1"># RabbitMQ SSL port</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">15671:15671"</span>       <span class="c1"># RabbitMQ management plugin port</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="na">RABBITMQ_DEFAULT_USER</span><span class="pi">:</span> <span class="s">user</span>             <span class="c1"># Default username</span>
      <span class="na">RABBITMQ_DEFAULT_PASS</span><span class="pi">:</span> <span class="s">password</span>         <span class="c1"># Default password</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">rabbitmq_data:/var/lib/rabbitmq</span>      <span class="c1"># Data persistence</span>
      <span class="pi">-</span> <span class="s">./certs:/etc/rabbitmq/certs</span>          <span class="c1"># Mount the certs directory of local machine to the container directory</span>
      <span class="pi">-</span> <span class="s">./rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf</span>  <span class="c1"># Custom RabbitMQ configuration file. This file is used to enable SSL and configure the SSL certificates. rabbitmq.conf file is mounted to the container directory /etc/rabbitmq/rabbitmq.conf</span>
    <span class="na">command</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">rabbitmq-server"</span><span class="pi">]</span>            <span class="c1"># Start the RabbitMQ server. This command is used to start the RabbitMQ server with the custom configuration file.</span>

<span class="na">volumes</span><span class="pi">:</span>
  <span class="na">rabbitmq_data</span><span class="pi">:</span>

<span class="c1">#rabbitmq_data is mounted to /var/lib/rabbitmq inside the container. RabbitMQ stores its data in /var/lib/rabbitmq by default, so mounting a persistent volume to this location ensures that data generated by RabbitMQ is saved in the rabbitmq_data volume.</span>

</code></pre></div></div>

<p><strong>Explanation of the Volume Mounts</strong></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">rabbitmq_data</code>: Ensures RabbitMQ data (queues, exchanges, etc.) persist across container restarts.</li>
  <li><code class="language-plaintext highlighter-rouge">./certs</code>: Mounts the local certificates folder to <code class="language-plaintext highlighter-rouge">/etc/rabbitmq/certs</code> inside the container, where RabbitMQ can access them.</li>
  <li><code class="language-plaintext highlighter-rouge">./rabbitmq.conf</code>: Mounts the custom configuration file into <code class="language-plaintext highlighter-rouge">/etc/rabbitmq/rabbitmq.conf</code> inside the container.</li>
</ul>

<p>The folder structure as follows:</p>
<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rabbitmq-ssl
│   docker-compose.yml
│   rabbitmq.conf
│   certs/
│       ca_certificate.pem
│       server_certificate.pem
│       server_key.pem
</code></pre></div></div>

<p><strong>Step 4: Start RabbitMQ and Verify SSL Configuration</strong></p>

<ol>
  <li>
    <p>Run the following command to start the RabbitMQ container with HTTPS and SSL enabled:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker-compose up <span class="nt">-d</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Verify that RabbitMQ is listening on the correct ports:</p>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker ps
</code></pre></div>    </div>
    <p>You should see ports 5671 (for AMQP over SSL) and 15671 (for HTTPS management) mapped.</p>
  </li>
</ol>

<p><strong>Step 5: Access the RabbitMQ Management UI over HTTPS</strong></p>

<p>Open your browser and navigate to <code class="language-plaintext highlighter-rouge">https://localhost:15671</code>. If you’re using a self-signed certificate, you’ll likely see a security warning. Proceed by accepting the certificate to access the Management UI.</p>

<p><strong>Step 6: Configure AMQP Clients for SSL Connections</strong></p>

<p>For applications or services that connect to RabbitMQ over AMQP, use the following settings:</p>
<ul>
  <li><strong>URL</strong>: <code class="language-plaintext highlighter-rouge">amqps://localhost:5671</code></li>
  <li><strong>CA Certificate</strong>: <code class="language-plaintext highlighter-rouge">ca_certificate.pem</code> (for client validation)</li>
</ul>

<p>Client applications should verify the RabbitMQ server certificate by using <code class="language-plaintext highlighter-rouge">ca_certificate.pem</code>. Depending on the client library, you may need to specify additional SSL options.</p>

<p><strong>Troubleshooting Tips</strong></p>

<ul>
  <li><strong>Permissions</strong>: Ensure that the <code class="language-plaintext highlighter-rouge">.pem</code> files are readable by the RabbitMQ process inside the container.</li>
  <li><strong>SSL/TLS Version Compatibility</strong>: Some clients may have specific SSL/TLS requirements. Ensure your configuration aligns with the client’s requirements.</li>
</ul>

<p><strong>Conclusion</strong></p>

<p>Setting up RabbitMQ with SSL/TLS and enabling HTTPS access for the Management UI greatly enhances security, especially in production environments. With these configurations, RabbitMQ can securely handle both AMQP client connections and browser-based management over HTTPS.</p>

<p>Following these steps, you’ll have a robust, secure RabbitMQ instance that protects your data in transit and allows safe administration.</p>

<p><strong>Note for docker container:</strong></p>
<ul>
  <li>docker exec -it rabbitmq bash - access the container terminal, rabbitmq is the container name</li>
  <li>docker exec -it rabbitmq ls -l /etc/rabbitmq/certs - list the certs in the container</li>
  <li>You can access container terminal from docker desktop as follows:
    <ul>
      <li>Click on the container</li>
      <li>Click on Termianl tab</li>
    </ul>
  </li>
</ul>]]></content><author><name>Mahedee Hasan</name></author><category term="RabbitMQ" /><category term="Docker" /><category term="SSL" /><category term="rabbitmq" /><category term="docker" /><category term="ssl" /><summary type="html"><![CDATA[Securing RabbitMQ with SSL/TLS and enabling HTTPS access for the Management UI is essential to protect data and ensure a secure environment. This guide walks you through the steps to set up RabbitMQ with SSL/TLS on Docker Desktop and enable HTTPS for the Management UI. Follow along to configure RabbitMQ to handle encrypted AMQP connections as well as a secure Management interface.]]></summary></entry><entry><title type="html">Utilizing Bulk Operations with Entity Framework and ASP.NET Core</title><link href="https://mahedee.net//utilizing_bulk_operations_with_entity_framework_and_aspnet_core/" rel="alternate" type="text/html" title="Utilizing Bulk Operations with Entity Framework and ASP.NET Core" /><published>2024-03-02T00:00:00-05:00</published><updated>2024-03-02T00:00:00-05:00</updated><id>https://mahedee.net//utilizing_bulk_operations_with_entity_framework_and_aspnet_core</id><content type="html" xml:base="https://mahedee.net//utilizing_bulk_operations_with_entity_framework_and_aspnet_core/"><![CDATA[<p>A bulk operation refers to the execution of a single operation that involves multiple data entries or rows in a database, typically performed in a batch. Instead of processing each entry individually, bulk operations allow for the manipulation or retrieval of data in a more efficient manner.</p>

<p>The benefits of bulk operations include:</p>

<ol>
  <li>
    <p>Improved Performance: By processing multiple data entries in a single operation, bulk operations can significantly reduce the overhead associated with multiple individual operations, resulting in improved performance and reduced latency.</p>
  </li>
  <li>
    <p>Reduced Resource Usage: Bulk operations require fewer resources compared to performing the same task iteratively on each data entry. This can lead to better utilization of system resources and improved scalability.</p>
  </li>
  <li>
    <p>Enhanced Throughput: With the ability to handle large volumes of data more efficiently, bulk operations can increase the throughput of data processing tasks, allowing applications to handle higher workloads without sacrificing performance.</p>
  </li>
  <li>
    <p>Minimized Database Overhead: Bulk operations can help minimize the overhead on the database server by reducing the number of transactions and communication overhead associated with processing individual data entries.</p>
  </li>
  <li>
    <p>Simplified Code Logic: By consolidating multiple operations into a single bulk operation, developers can write simpler and more concise code, leading to easier maintenance and reduced complexity in application logic.</p>
  </li>
</ol>

<p>To perform bulk operations in an ASP.NET Core application, we can leverage the capabilities of Entity Framework Core and the EFCore.BulkExtensions library. This article will explore the practical implementation of bulk operations using these tools, providing insights into how to optimize database operations and enhance application performance.</p>

<p><strong>EFCore BulkExtensions</strong></p>

<p>EFCore.BulkExtensions is a popular library that extends the functionality of Entity Framework Core by providing support for bulk operations such as bulk insert, update, delete, and merge. This library offers a convenient and efficient way to perform bulk operations on database entities, allowing developers to streamline data processing tasks and improve application performance.</p>

<p>In this article, we will focus on the following bulk operations using EFCore.BulkExtensions and Entity Framework Core.</p>

<p><strong>Tools and Technology Used</strong></p>

<ul>
  <li>ASP.net core Web API</li>
  <li>Visual C#</li>
  <li>Entity Framework</li>
  <li>EFCore.BulkExtensions</li>
  <li>SQL Server</li>
</ul>

<p><strong>Step 1: Create a asp.net core web api project name EFBulkBatch</strong></p>

<p><strong>Step 2: Install the following nuget packages in the project.</strong></p>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">EFCore.BulkExtensions</span>
<span class="nf">Microsoft.AspNetCore.OpenApi</span>
<span class="nf">Microsoft.EntityFrameworkCore</span>
<span class="nf">Microsoft.EntityFrameworkCore.SqlServer</span>
<span class="nf">Microsoft.EntityFrameworkCore.Tools</span>
</code></pre></div></div>

<p><strong>Step 3: Create two Model class name Customer and Employee in Models folder</strong></p>

<ul>
  <li>Customer class will be used to perform bulk operation using Entity Framework.</li>
  <li>Employee class will be used to perform bulk operation using EFCore.BulkExtensions.</li>
</ul>

<p><strong>Customer.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">namespace</span> <span class="nn">EFBulkBatch.Models</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Customer</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Email</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Phone</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Employee.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">namespace</span> <span class="nn">EFBulkBatch.Models</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Employee</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Designation</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Department</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 4: Create Db Context class name ApplicationDbContext in Db folder.</strong></p>

<p><strong>ApplicationDbContext.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">EFBulkBatch.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">EFBulkBatch.Db</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">ApplicationDbContext</span> <span class="p">:</span> <span class="n">DbContext</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">ApplicationDbContext</span><span class="p">(</span><span class="n">DbContextOptions</span><span class="p">&lt;</span><span class="n">ApplicationDbContext</span><span class="p">&gt;</span> <span class="n">options</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
        <span class="p">{</span>
            
        <span class="p">}</span>
        
        <span class="k">public</span> <span class="n">DbSet</span><span class="p">&lt;</span><span class="n">Employee</span><span class="p">&gt;</span> <span class="n">Employees</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="n">DbSet</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="n">Customers</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>


</code></pre></div></div>

<p><strong>Step 5: Create CustomerService class in Manager folder to perform bulk operation using Entity Framework.</strong></p>

<p><strong>Manager/CustomerService.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">EFBulkBatch.Db</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">EFBulkBatch.Models</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">EFBulkBatch.Managers</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CustomerService</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">ApplicationDbContext</span> <span class="n">_context</span><span class="p">;</span>
        <span class="k">private</span> <span class="n">DateTime</span> <span class="n">_startTime</span><span class="p">;</span>
        <span class="k">private</span> <span class="n">TimeSpan</span> <span class="n">_elapsedTime</span><span class="p">;</span>
        <span class="k">public</span> <span class="nf">CustomerService</span><span class="p">(</span><span class="n">ApplicationDbContext</span> <span class="n">context</span><span class="p">)</span> 
        <span class="p">{</span>
            <span class="n">_context</span> <span class="p">=</span> <span class="n">context</span><span class="p">;</span>
        <span class="p">}</span>


        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">TimeSpan</span><span class="p">&gt;</span> <span class="nf">AddBulkCustomerAsync</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="c1">// C# 9.0 feature: Target-typed new expressions</span>
            <span class="n">List</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="n">customers</span> <span class="p">=</span> <span class="k">new</span><span class="p">();</span>
            <span class="n">_startTime</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">;</span>

            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="m">100000</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span>
            <span class="p">{</span>
                <span class="n">customers</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="n">Customer</span>
                <span class="p">{</span>
                    <span class="n">Name</span> <span class="p">=</span> <span class="s">$"Customer </span><span class="p">{</span><span class="n">i</span><span class="p">}</span><span class="s">"</span><span class="p">,</span>
                    <span class="n">Email</span> <span class="p">=</span> <span class="s">$"Email </span><span class="p">{</span><span class="n">i</span><span class="p">}</span><span class="s">"</span><span class="p">,</span>
                    <span class="n">Phone</span> <span class="p">=</span> <span class="s">$"Phone </span><span class="p">{</span><span class="n">i</span><span class="p">}</span><span class="s">"</span>
                <span class="p">});</span>
            <span class="p">}</span>

            <span class="c1">// Use AddRange to add multiple entities</span>
            <span class="n">_context</span><span class="p">.</span><span class="n">Customers</span><span class="p">.</span><span class="nf">AddRange</span><span class="p">(</span><span class="n">customers</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>
            <span class="n">_elapsedTime</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span> <span class="p">-</span> <span class="n">_startTime</span><span class="p">;</span>
            <span class="k">return</span> <span class="n">_elapsedTime</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">TimeSpan</span><span class="p">&gt;</span> <span class="nf">UpdateBulkCustomerAsync</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="c1">// C# 9.0 feature: Target-typed new expressions</span>
            <span class="n">List</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="n">customers</span> <span class="p">=</span> <span class="k">new</span><span class="p">();</span>
            <span class="n">_startTime</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">;</span>
            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="m">100000</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span>
            <span class="p">{</span>
                <span class="n">customers</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="n">Customer</span>
                <span class="p">{</span>
                    <span class="n">Id</span> <span class="p">=</span> <span class="n">i</span> <span class="p">+</span> <span class="m">1</span><span class="p">,</span>
                    <span class="n">Name</span> <span class="p">=</span> <span class="s">$"Update Customer </span><span class="p">{</span><span class="n">i</span><span class="p">}</span><span class="s">"</span><span class="p">,</span>
                    <span class="n">Email</span> <span class="p">=</span> <span class="s">$"Update Email </span><span class="p">{</span><span class="n">i</span><span class="p">}</span><span class="s">"</span><span class="p">,</span>
                    <span class="n">Phone</span> <span class="p">=</span> <span class="s">$"Update Phone </span><span class="p">{</span><span class="n">i</span><span class="p">}</span><span class="s">"</span>
                <span class="p">});</span>
            <span class="p">}</span>

            <span class="c1">// Use UpdateRange to update multiple entities</span>
            <span class="n">_context</span><span class="p">.</span><span class="n">Customers</span><span class="p">.</span><span class="nf">UpdateRange</span><span class="p">(</span><span class="n">customers</span><span class="p">);</span>
 
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>

            <span class="n">_elapsedTime</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span> <span class="p">-</span> <span class="n">_startTime</span><span class="p">;</span>
            <span class="k">return</span> <span class="n">_elapsedTime</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">TimeSpan</span><span class="p">&gt;</span> <span class="nf">DeleteBulkCustomerAsync</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">List</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="n">customers</span> <span class="p">=</span> <span class="n">_context</span><span class="p">.</span><span class="n">Customers</span><span class="p">.</span><span class="nf">ToList</span><span class="p">();</span>
            <span class="n">_startTime</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">;</span>

            <span class="c1">// Use RemoveRange to delete multiple entities</span>
            <span class="n">_context</span><span class="p">.</span><span class="n">Customers</span><span class="p">.</span><span class="nf">RemoveRange</span><span class="p">(</span><span class="n">customers</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>
            <span class="n">_elapsedTime</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span> <span class="p">-</span> <span class="n">_startTime</span><span class="p">;</span>
            <span class="k">return</span> <span class="n">_elapsedTime</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>Step 6: Create EmployeeService class in Manager folder to perform bulk operation using EFCore.BulkExtensions.</strong></p>

<p><strong>Manager/EmployeeService.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">EFBulkBatch.Db</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">EFBulkBatch.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">EFCore.BulkExtensions</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">EFBulkBatch.Managers</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">EmployeeService</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">ApplicationDbContext</span> <span class="n">_dbContext</span><span class="p">;</span>
        <span class="k">private</span> <span class="n">DateTime</span> <span class="n">_startTime</span><span class="p">;</span>
        <span class="k">private</span> <span class="n">TimeSpan</span> <span class="n">_elapsedTime</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">EmployeeService</span><span class="p">(</span><span class="n">ApplicationDbContext</span> <span class="n">dbContext</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_dbContext</span> <span class="p">=</span> <span class="n">dbContext</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">TimeSpan</span><span class="p">&gt;</span> <span class="nf">AddBulkDataAsync</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="c1">// C# 9.0 feature: Target-typed new expressions</span>
            <span class="n">List</span><span class="p">&lt;</span><span class="n">Employee</span><span class="p">&gt;</span> <span class="n">employees</span> <span class="p">=</span> <span class="k">new</span><span class="p">();</span>
            <span class="n">_startTime</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">;</span>

            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="m">100000</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span>
            <span class="p">{</span>
                <span class="n">employees</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="n">Employee</span>
                <span class="p">{</span>
                    <span class="n">Name</span> <span class="p">=</span> <span class="s">$"Employee </span><span class="p">{</span><span class="n">i</span><span class="p">}</span><span class="s">"</span><span class="p">,</span>
                    <span class="n">Designation</span> <span class="p">=</span> <span class="s">$"Designation </span><span class="p">{</span><span class="n">i</span><span class="p">}</span><span class="s">"</span><span class="p">,</span>
                    <span class="n">Department</span> <span class="p">=</span> <span class="s">$"Department </span><span class="p">{</span><span class="n">i</span><span class="p">}</span><span class="s">"</span>
                <span class="p">});</span>
            <span class="p">}</span>

         
            <span class="c1">// Use BulkInsertAsync to add multiple entities</span>
            <span class="k">await</span> <span class="n">_dbContext</span><span class="p">.</span><span class="nf">BulkInsertAsync</span><span class="p">(</span><span class="n">employees</span><span class="p">);</span>
            <span class="n">_elapsedTime</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span> <span class="p">-</span> <span class="n">_startTime</span><span class="p">;</span>
            <span class="k">return</span> <span class="n">_elapsedTime</span><span class="p">;</span>
        <span class="p">}</span>


        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">TimeSpan</span><span class="p">&gt;</span> <span class="nf">UpdateBulkDataAsync</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="c1">// C# 9.0 feature: Target-typed new expressions</span>
            <span class="n">List</span><span class="p">&lt;</span><span class="n">Employee</span><span class="p">&gt;</span> <span class="n">employees</span> <span class="p">=</span> <span class="k">new</span><span class="p">();</span>
            <span class="n">_startTime</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">;</span>
            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="m">100000</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span>
            <span class="p">{</span>
                <span class="n">employees</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="n">Employee</span>
                <span class="p">{</span>
                    <span class="n">Id</span> <span class="p">=</span> <span class="n">i</span> <span class="p">+</span> <span class="m">1</span><span class="p">,</span>
                    <span class="n">Name</span> <span class="p">=</span> <span class="s">$"Update Employee </span><span class="p">{</span><span class="n">i</span><span class="p">}</span><span class="s">"</span><span class="p">,</span>
                    <span class="n">Designation</span> <span class="p">=</span> <span class="s">$"Update Designation </span><span class="p">{</span><span class="n">i</span><span class="p">}</span><span class="s">"</span><span class="p">,</span>
                    <span class="n">Department</span> <span class="p">=</span> <span class="s">$"Update Department </span><span class="p">{</span><span class="n">i</span><span class="p">}</span><span class="s">"</span>
                <span class="p">});</span>
            <span class="p">}</span>

            <span class="c1">// Use BulkUpdateAsync to update multiple entities</span>
            <span class="k">await</span> <span class="n">_dbContext</span><span class="p">.</span><span class="nf">BulkUpdateAsync</span><span class="p">(</span><span class="n">employees</span><span class="p">);</span>
            <span class="n">_elapsedTime</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span> <span class="p">-</span> <span class="n">_startTime</span><span class="p">;</span>
            <span class="k">return</span> <span class="n">_elapsedTime</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">TimeSpan</span><span class="p">&gt;</span> <span class="nf">DeleteBulkDataAsync</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="c1">// C# 9.0 feature: Target-typed new expressions</span>
            <span class="n">List</span><span class="p">&lt;</span><span class="n">Employee</span><span class="p">&gt;</span> <span class="n">employees</span> <span class="p">=</span> <span class="n">_dbContext</span><span class="p">.</span><span class="n">Employees</span><span class="p">.</span><span class="nf">ToList</span><span class="p">();</span>
            <span class="n">_startTime</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">;</span>

            <span class="c1">// Use BulkDeleteAsync to delete multiple entities</span>
            <span class="k">await</span> <span class="n">_dbContext</span><span class="p">.</span><span class="nf">BulkDeleteAsync</span><span class="p">(</span><span class="n">employees</span><span class="p">);</span>
            <span class="n">_elapsedTime</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span> <span class="p">-</span> <span class="n">_startTime</span><span class="p">;</span>
            <span class="k">return</span> <span class="n">_elapsedTime</span><span class="p">;</span>
        <span class="p">}</span>


    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 7: Add connection string in appsettings.json file</strong></p>

<p><strong>appsettings.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"Logging"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"LogLevel"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Default"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Information"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Microsoft.AspNetCore"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Warning"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"AllowedHosts"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"ConnectionStrings"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"DefaultConnection"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Server=.;Database=EFBulkBatchDB; User Id = sa; Password = YourPassword; TrustServerCertificate=True;"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<p><strong>Step 8: Configure Program class as follows.</strong></p>

<p><strong>Program.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">EFBulkBatch.Db</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">EFBulkBatch.Managers</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">EFBulkBatch</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Program</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="n">WebApplication</span><span class="p">.</span><span class="nf">CreateBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>

            <span class="c1">// Add services to the container.</span>

            <span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">();</span>

            <span class="c1">// Register the DbContext with the DI container</span>
            <span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddDbContext</span><span class="p">&lt;</span><span class="n">ApplicationDbContext</span><span class="p">&gt;(</span><span class="n">options</span> <span class="p">=&gt;</span>
                           <span class="n">options</span><span class="p">.</span><span class="nf">UseSqlServer</span><span class="p">(</span><span class="n">builder</span><span class="p">.</span><span class="n">Configuration</span><span class="p">.</span><span class="nf">GetConnectionString</span><span class="p">(</span><span class="s">"DefaultConnection"</span><span class="p">)));</span>

            <span class="c1">// Register the Services with the DI container</span>
            <span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddScoped</span><span class="p">&lt;</span><span class="n">EmployeeService</span><span class="p">&gt;();</span>
            <span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddScoped</span><span class="p">&lt;</span><span class="n">CustomerService</span><span class="p">&gt;();</span>


            <span class="c1">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>
            <span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddEndpointsApiExplorer</span><span class="p">();</span>
            <span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddSwaggerGen</span><span class="p">();</span>

            <span class="kt">var</span> <span class="n">app</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

            <span class="c1">// Configure the HTTP request pipeline.</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">Environment</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
            <span class="p">{</span>
                <span class="n">app</span><span class="p">.</span><span class="nf">UseSwagger</span><span class="p">();</span>
                <span class="n">app</span><span class="p">.</span><span class="nf">UseSwaggerUI</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">app</span><span class="p">.</span><span class="nf">UseHttpsRedirection</span><span class="p">();</span>

            <span class="n">app</span><span class="p">.</span><span class="nf">UseAuthorization</span><span class="p">();</span>


            <span class="n">app</span><span class="p">.</span><span class="nf">MapControllers</span><span class="p">();</span>

            <span class="n">app</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>Step 9: Create two Controller classes name CustomerController and EmployeeController in Controllers folder.</strong></p>

<p><strong>Controllers/CustomerController.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">EFBulkBatch.Managers</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">EFBulkBatch.Controllers</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
    <span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CustomerController</span> <span class="p">:</span> <span class="n">Controller</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">CustomerService</span> <span class="n">_customerService</span><span class="p">;</span>
        <span class="k">public</span> <span class="nf">CustomerController</span><span class="p">(</span><span class="n">CustomerService</span> <span class="n">customerService</span><span class="p">)</span> 
        <span class="p">{</span>
            <span class="n">_customerService</span> <span class="p">=</span> <span class="n">customerService</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="p">[</span><span class="n">HttpGet</span><span class="p">]</span>
        <span class="k">public</span> <span class="n">IActionResult</span> <span class="nf">Index</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="nf">View</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="p">[</span><span class="nf">HttpPost</span><span class="p">(</span><span class="s">"AddBulkData"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">AddBulkDataAsync</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">elapsedTime</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_customerService</span><span class="p">.</span><span class="nf">AddBulkCustomerAsync</span><span class="p">();</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">elapsedTime</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="p">[</span><span class="nf">HttpPut</span><span class="p">(</span><span class="s">"UpdateBulkData"</span><span class="p">)]</span> 
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">UpdateBulkDataAsync</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">elapsedTime</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_customerService</span><span class="p">.</span><span class="nf">UpdateBulkCustomerAsync</span><span class="p">();</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">elapsedTime</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="p">[</span><span class="nf">HttpDelete</span><span class="p">(</span><span class="s">"DeleteBulkData"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">DeleteBulkDataAsync</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">elapsedTime</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_customerService</span><span class="p">.</span><span class="nf">DeleteBulkCustomerAsync</span><span class="p">();</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">elapsedTime</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>Controllers/EmployeeController.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">EFBulkBatch.Managers</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">EFBulkBatch.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">EFBulkBatch.Controllers</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
    <span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">EmployeeController</span> <span class="p">:</span> <span class="n">Controller</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">EmployeeService</span> <span class="n">_employeeService</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">EmployeeController</span><span class="p">(</span><span class="n">EmployeeService</span> <span class="n">employeeService</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_employeeService</span> <span class="p">=</span> <span class="n">employeeService</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="p">[</span><span class="n">HttpGet</span><span class="p">]</span>
        <span class="k">public</span> <span class="n">IActionResult</span> <span class="nf">Index</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="nf">View</span><span class="p">();</span>
        <span class="p">}</span>


        <span class="p">[</span><span class="nf">HttpPost</span><span class="p">(</span><span class="s">"AddBulkData"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">AddBulkDataAsync</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">elapsedTime</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_employeeService</span><span class="p">.</span><span class="nf">AddBulkDataAsync</span><span class="p">();</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">elapsedTime</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="p">[</span><span class="nf">HttpPut</span><span class="p">(</span><span class="s">"UpdateBulkData"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">UpdateBulkDataAysnc</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">elapsedTime</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_employeeService</span><span class="p">.</span><span class="nf">UpdateBulkDataAsync</span><span class="p">();</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">elapsedTime</span><span class="p">);</span>

        <span class="p">}</span>

        <span class="p">[</span><span class="nf">HttpDelete</span><span class="p">(</span><span class="s">"DeleteBulkData"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">DeleteBulkDataAsync</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">elapsedTime</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_employeeService</span><span class="p">.</span><span class="nf">DeleteBulkDataAsync</span><span class="p">();</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">elapsedTime</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>Step 10: Run migration command to create database and tables.</strong></p>

<ul>
  <li>Go to tools &gt; NuGet Package Manager &gt; Package Manager Console</li>
  <li>Select EFBulkBatch from Default project dropdown</li>
  <li>Run the following command in Package Manager Console window</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">Add-Migration</span> <span class="nf">InitialCreate</span>
<span class="nf">Update-Database</span>
</code></pre></div></div>

<p><strong>Step 11: Run the application and test the API using Postman or Swagger UI.</strong></p>

<ul>
  <li>Run the application</li>
  <li>Open Postman or Swagger UI</li>
  <li>Test the API using the endpoint and perform the bulk operation for insert, update and delete.</li>
</ul>

<p><strong><a href="https://github.com/mahedee/code-sample02/tree/master/EFBulkBatch">Source code</a></strong></p>]]></content><author><name>Mahedee Hasan</name></author><category term="ASP.NET" /><category term="ASP.NET Core" /><category term="C#" /><category term="Web API" /><category term="EF" /><category term="csharp" /><category term="aspnet" /><category term="aspnetcore" /><category term="webapi" /><category term="ef" /><summary type="html"><![CDATA[Bulk operations often serve as pivotal performance enhancers within applications. This article delves into the effective utilization of bulk operations using Entity Framework Core and EFCore.BlukExtensions, offering practical insights and guidance for implementation.]]></summary></entry><entry><title type="html">Optimistic Concurrency Management in ASP.NET Core Application Using Raw SQL and ADO.NET</title><link href="https://mahedee.net//optimistic_concurrency_management_aspnet_core_using_raw_sql/" rel="alternate" type="text/html" title="Optimistic Concurrency Management in ASP.NET Core Application Using Raw SQL and ADO.NET" /><published>2024-02-08T00:00:00-05:00</published><updated>2024-02-08T00:00:00-05:00</updated><id>https://mahedee.net//optimistic_concurrency_management_aspnet_core_using_raw_sql</id><content type="html" xml:base="https://mahedee.net//optimistic_concurrency_management_aspnet_core_using_raw_sql/"><![CDATA[<p>In a previous article <a href="https://mahedee.net/concurrency_management_in_aspnet_core_applications_with_entity_framework/">here</a>, I discussed various ways to deal with concurrency. Optimistic concurrency is a common method for handling such situations. This article is designed to illustrate the practical aspects of managing optimistic concurrency in an ASP.NET Core application using raw SQL and ADO.NET.</p>

<p><strong>Tools and Technology Used</strong></p>

<ul>
  <li>ASP.net core Web API</li>
  <li>Visual C#</li>
  <li>Entity Framework</li>
  <li>SQL Server</li>
</ul>

<p><strong>Step 1: Create a database in SQL Server name - ConcurrencySQLDB</strong></p>

<p><strong>Step 2: Create a table name Product</strong></p>
<ul>
  <li>Run the following script to create the table</li>
</ul>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="p">[</span><span class="n">dbo</span><span class="p">].[</span><span class="n">Products</span><span class="p">](</span>
	<span class="p">[</span><span class="n">Id</span><span class="p">]</span> <span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="k">IDENTITY</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
	<span class="p">[</span><span class="n">Name</span><span class="p">]</span> <span class="p">[</span><span class="n">nvarchar</span><span class="p">](</span><span class="k">max</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
	<span class="p">[</span><span class="n">Price</span><span class="p">]</span> <span class="p">[</span><span class="nb">decimal</span><span class="p">](</span><span class="mi">18</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
	<span class="p">[</span><span class="n">Quantity</span><span class="p">]</span> <span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
	<span class="p">[</span><span class="n">RowVersion</span><span class="p">]</span> <span class="p">[</span><span class="n">uniqueidentifier</span><span class="p">]</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
 <span class="k">CONSTRAINT</span> <span class="p">[</span><span class="n">PK_Products</span><span class="p">]</span> <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="n">CLUSTERED</span> 
<span class="p">(</span>
	<span class="p">[</span><span class="n">Id</span><span class="p">]</span> <span class="k">ASC</span>
<span class="p">)</span><span class="k">WITH</span> <span class="p">(</span><span class="n">PAD_INDEX</span> <span class="o">=</span> <span class="k">OFF</span><span class="p">,</span> <span class="n">STATISTICS_NORECOMPUTE</span> <span class="o">=</span> <span class="k">OFF</span><span class="p">,</span> <span class="n">IGNORE_DUP_KEY</span> <span class="o">=</span> <span class="k">OFF</span><span class="p">,</span> <span class="n">ALLOW_ROW_LOCKS</span> <span class="o">=</span> <span class="k">ON</span><span class="p">,</span> <span class="n">ALLOW_PAGE_LOCKS</span> <span class="o">=</span> <span class="k">ON</span><span class="p">,</span> <span class="n">OPTIMIZE_FOR_SEQUENTIAL_KEY</span> <span class="o">=</span> <span class="k">OFF</span><span class="p">)</span> <span class="k">ON</span> <span class="p">[</span><span class="k">PRIMARY</span><span class="p">]</span>
<span class="p">)</span> <span class="k">ON</span> <span class="p">[</span><span class="k">PRIMARY</span><span class="p">]</span> <span class="n">TEXTIMAGE_ON</span> <span class="p">[</span><span class="k">PRIMARY</span><span class="p">]</span>
<span class="k">GO</span>
</code></pre></div></div>

<p><strong>Step 3: Create a asp.net core web api project name ConcurrencyHandling.API</strong></p>

<p><strong>Step 4: Install the following nuget packages in the project.</strong></p>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">System.Data.SqlClient</span>
</code></pre></div></div>

<p><strong>Step 5: Create a Model class name Product in Models folder</strong></p>

<ul>
  <li>Product class to store Product Information</li>
  <li>In the following class RowVersion property is a Guid which is used to track the updated version of the record.</li>
</ul>

<p><strong>Product.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">namespace</span> <span class="nn">Concurrency.API.Models</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Product</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span> <span class="p">=</span> <span class="n">String</span><span class="p">.</span><span class="n">Empty</span><span class="p">;</span>
        <span class="k">public</span> <span class="kt">decimal</span> <span class="n">Price</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Quantity</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
        <span class="k">public</span> <span class="n">Guid</span> <span class="n">RowVersion</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 6: Create a DBConnector class to connect with database in Persistence folder.</strong></p>

<p><strong>DBConnector.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">System.Data.SqlClient</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Concurrency.API.Persistence</span>
<span class="p">{</span>
    <span class="c1">// This class is used to create a connection to the database.</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">DBConnector</span> <span class="p">:</span> <span class="n">IDisposable</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="n">SqlConnection</span> <span class="n">connection</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">DBConnector</span><span class="p">(</span><span class="kt">string</span> <span class="n">connectionString</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">connection</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">SqlConnection</span><span class="p">(</span><span class="n">connectionString</span><span class="p">);</span>
            <span class="k">this</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">Open</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">void</span> <span class="nf">Dispose</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">connection</span><span class="p">.</span><span class="nf">Close</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>


</code></pre></div></div>

<p><strong>Step 7: Add connection string in appsettings.json file</strong></p>

<p><strong>appsettings.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"Logging"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"LogLevel"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Default"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Information"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Microsoft.AspNetCore"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Warning"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"ConnectionStrings"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"DefaultConnection"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Server=localhost;Database=ConcurrencySQLDB;User Id=sa;Password=MyPassword;TrustServerCertificate=True;"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"AllowedHosts"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*"</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<p><strong>Step 8: Create IProductRepository in Repositories/Interface folder</strong></p>

<p><strong>IProductRepository.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Concurrency.API.Models</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Concurrency.API.Repositories.Interfaces</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">interface</span> <span class="nc">IProductRepository</span>
    <span class="p">{</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;&gt;</span> <span class="nf">GetProducts</span><span class="p">();</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="nf">GetProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="nf">AddProduct</span><span class="p">(</span><span class="n">Product</span> <span class="n">product</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="nf">UpdateProduct</span><span class="p">(</span><span class="n">Product</span> <span class="n">product</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="nf">DeleteProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="n">Guid</span> <span class="n">rowVersion</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 9: Create ProductRepository in Repositories/Implementation folder</strong></p>

<p><strong>ProductRepository.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Concurrency.API.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Concurrency.API.Persistence</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Concurrency.API.Repositories.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Data</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Data.SqlClient</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Concurrency.API.Repositories.Implementations</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">ProductRepository</span> <span class="p">:</span> <span class="n">IProductRepository</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="n">DBConnector</span> <span class="n">_connector</span><span class="p">;</span>
        <span class="k">public</span> <span class="nf">ProductRepository</span><span class="p">(</span><span class="n">DBConnector</span> <span class="n">dBConnector</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_connector</span> <span class="p">=</span> <span class="n">dBConnector</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="nf">AddProduct</span><span class="p">(</span><span class="n">Product</span> <span class="n">model</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">try</span>
            <span class="p">{</span>   
                <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="n">State</span> <span class="p">==</span> <span class="n">ConnectionState</span><span class="p">.</span><span class="n">Closed</span><span class="p">)</span>
                    <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">Open</span><span class="p">();</span>
                <span class="kt">var</span> <span class="n">cmd</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">CreateCommand</span><span class="p">()</span> <span class="k">as</span> <span class="n">SqlCommand</span><span class="p">;</span>
                <span class="n">SqlTransaction</span> <span class="n">transaction</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">BeginTransaction</span><span class="p">(</span><span class="s">""</span><span class="p">);</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Transaction</span> <span class="p">=</span> <span class="n">transaction</span><span class="p">;</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">CommandText</span> <span class="p">=</span> <span class="s">@"INSERT INTO Products (Name, Price, Quantity, RowVersion) 
                OUTPUT inserted.Id                
                VALUES (@Name, @Price, @Quantity, @RowVersion); SELECT SCOPE_IDENTITY();"</span><span class="p">;</span>

                <span class="n">Guid</span> <span class="n">rowVersion</span> <span class="p">=</span> <span class="n">Guid</span><span class="p">.</span><span class="nf">NewGuid</span><span class="p">();</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@Name"</span><span class="p">,</span> <span class="n">model</span><span class="p">.</span><span class="n">Name</span><span class="p">);</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@Price"</span><span class="p">,</span> <span class="n">model</span><span class="p">.</span><span class="n">Price</span><span class="p">);</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@Quantity"</span><span class="p">,</span> <span class="n">model</span><span class="p">.</span><span class="n">Quantity</span><span class="p">);</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@RowVersion"</span><span class="p">,</span> <span class="n">rowVersion</span><span class="p">);</span>

                <span class="c1">// cmd.ExecuteScalar() returns the first column of the first row in the result</span>
                <span class="c1">// set returned by the query. Additional columns or rows are ignored.</span>
                <span class="kt">int</span> <span class="n">insertedId</span> <span class="p">=</span> <span class="n">Convert</span><span class="p">.</span><span class="nf">ToInt32</span><span class="p">(</span><span class="n">cmd</span><span class="p">.</span><span class="nf">ExecuteScalar</span><span class="p">());</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">insertedId</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="n">transaction</span><span class="p">.</span><span class="nf">Commit</span><span class="p">();</span>
                <span class="p">}</span>

                <span class="n">model</span><span class="p">.</span><span class="n">Id</span> <span class="p">=</span> <span class="n">insertedId</span><span class="p">;</span>
                <span class="n">model</span><span class="p">.</span><span class="n">RowVersion</span> <span class="p">=</span> <span class="n">rowVersion</span><span class="p">;</span>
                <span class="k">return</span> <span class="n">Task</span><span class="p">.</span><span class="nf">FromResult</span><span class="p">(</span><span class="n">model</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="n">ex</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">finally</span>
            <span class="p">{</span>
                <span class="c1">// close connection</span>
                <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="nf">Dispose</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="k">null</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="nf">GetProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">product</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Product</span><span class="p">();</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="n">State</span> <span class="p">==</span> <span class="n">ConnectionState</span><span class="p">.</span><span class="n">Closed</span><span class="p">)</span>
                    <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">Open</span><span class="p">();</span>
                <span class="kt">var</span> <span class="n">cmd</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">CreateCommand</span><span class="p">()</span> <span class="k">as</span> <span class="n">SqlCommand</span><span class="p">;</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">CommandText</span> <span class="p">=</span> <span class="s">@"SELECT Id, Name, Price, Quantity, RowVersion FROM Products WHERE Id = @Id"</span><span class="p">;</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@Id"</span><span class="p">,</span> <span class="n">id</span><span class="p">);</span>
                <span class="kt">var</span> <span class="n">reader</span> <span class="p">=</span> <span class="n">cmd</span><span class="p">.</span><span class="nf">ExecuteReader</span><span class="p">();</span>
                <span class="k">while</span> <span class="p">(</span><span class="n">reader</span><span class="p">.</span><span class="nf">Read</span><span class="p">())</span>
                <span class="p">{</span>
                    <span class="n">product</span><span class="p">.</span><span class="n">Id</span> <span class="p">=</span> <span class="n">Convert</span><span class="p">.</span><span class="nf">ToInt32</span><span class="p">(</span><span class="n">reader</span><span class="p">[</span><span class="s">"Id"</span><span class="p">]);</span>
                    <span class="n">product</span><span class="p">.</span><span class="n">Name</span> <span class="p">=</span> <span class="n">reader</span><span class="p">[</span><span class="s">"Name"</span><span class="p">]</span> <span class="p">!=</span> <span class="n">DBNull</span><span class="p">.</span><span class="n">Value</span> <span class="p">?</span> <span class="n">reader</span><span class="p">[</span><span class="s">"Name"</span><span class="p">].</span><span class="nf">ToString</span><span class="p">()</span> <span class="p">:</span> <span class="n">String</span><span class="p">.</span><span class="n">Empty</span><span class="p">;</span>
                    <span class="n">product</span><span class="p">.</span><span class="n">Price</span> <span class="p">=</span> <span class="n">reader</span><span class="p">[</span><span class="s">"Price"</span><span class="p">]</span> <span class="p">!=</span> <span class="n">DBNull</span><span class="p">.</span><span class="n">Value</span> <span class="p">?</span> <span class="n">Convert</span><span class="p">.</span><span class="nf">ToDecimal</span><span class="p">(</span><span class="n">reader</span><span class="p">[</span><span class="s">"Price"</span><span class="p">])</span> <span class="p">:</span> <span class="m">0</span><span class="p">;</span>
                    <span class="n">product</span><span class="p">.</span><span class="n">Quantity</span> <span class="p">=</span> <span class="n">reader</span><span class="p">[</span><span class="s">"Quantity"</span><span class="p">]</span> <span class="p">!=</span> <span class="n">DBNull</span><span class="p">.</span><span class="n">Value</span> <span class="p">?</span> <span class="n">Convert</span><span class="p">.</span><span class="nf">ToInt32</span><span class="p">(</span><span class="n">reader</span><span class="p">[</span><span class="s">"Quantity"</span><span class="p">])</span> <span class="p">:</span> <span class="m">0</span><span class="p">;</span>
                    <span class="n">product</span><span class="p">.</span><span class="n">RowVersion</span> <span class="p">=</span> <span class="n">reader</span><span class="p">[</span><span class="s">"RowVersion"</span><span class="p">]</span> <span class="p">!=</span> <span class="n">DBNull</span><span class="p">.</span><span class="n">Value</span> <span class="p">?</span> <span class="p">(</span><span class="n">Guid</span><span class="p">)</span><span class="n">reader</span><span class="p">[</span><span class="s">"RowVersion"</span><span class="p">]</span> <span class="p">:</span> <span class="n">Guid</span><span class="p">.</span><span class="n">Empty</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="n">ex</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">finally</span>
            <span class="p">{</span>
                <span class="c1">// close connection</span>
                <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="nf">Dispose</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="c1">// Task.FromResult is a helper method that creates a Task that's completed successfully</span>
            <span class="c1">// with the specified result.</span>
            <span class="k">return</span> <span class="n">Task</span><span class="p">.</span><span class="nf">FromResult</span><span class="p">(</span><span class="n">product</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;&gt;</span> <span class="nf">GetProducts</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">products</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;();</span>

            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="n">State</span> <span class="p">==</span> <span class="n">ConnectionState</span><span class="p">.</span><span class="n">Closed</span><span class="p">)</span>
                    <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">Open</span><span class="p">();</span>
                <span class="kt">var</span> <span class="n">cmd</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">CreateCommand</span><span class="p">()</span> <span class="k">as</span> <span class="n">SqlCommand</span><span class="p">;</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">CommandText</span> <span class="p">=</span> <span class="s">@"SELECT Id, Name, Price, Quantity, RowVersion FROM Products"</span><span class="p">;</span>
                <span class="kt">var</span> <span class="n">reader</span> <span class="p">=</span> <span class="n">cmd</span><span class="p">.</span><span class="nf">ExecuteReader</span><span class="p">();</span>
                <span class="k">while</span> <span class="p">(</span><span class="n">reader</span><span class="p">.</span><span class="nf">Read</span><span class="p">())</span>
                <span class="p">{</span>
                    <span class="kt">var</span> <span class="n">product</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Product</span><span class="p">()</span>
                    <span class="p">{</span>
                        <span class="n">Id</span> <span class="p">=</span> <span class="n">Convert</span><span class="p">.</span><span class="nf">ToInt32</span><span class="p">(</span><span class="n">reader</span><span class="p">[</span><span class="s">"Id"</span><span class="p">]),</span>
                        <span class="n">Name</span> <span class="p">=</span> <span class="n">reader</span><span class="p">[</span><span class="s">"Name"</span><span class="p">]</span> <span class="p">!=</span> <span class="n">DBNull</span><span class="p">.</span><span class="n">Value</span> <span class="p">?</span> <span class="n">reader</span><span class="p">[</span><span class="s">"Name"</span><span class="p">].</span><span class="nf">ToString</span><span class="p">()</span> <span class="p">:</span> <span class="n">String</span><span class="p">.</span><span class="n">Empty</span><span class="p">,</span>
                        <span class="n">Price</span> <span class="p">=</span> <span class="n">reader</span><span class="p">[</span><span class="s">"Price"</span><span class="p">]</span> <span class="p">!=</span> <span class="n">DBNull</span><span class="p">.</span><span class="n">Value</span> <span class="p">?</span> <span class="n">Convert</span><span class="p">.</span><span class="nf">ToDecimal</span><span class="p">(</span><span class="n">reader</span><span class="p">[</span><span class="s">"Price"</span><span class="p">])</span> <span class="p">:</span> <span class="m">0</span><span class="p">,</span>
                        <span class="n">Quantity</span> <span class="p">=</span> <span class="n">reader</span><span class="p">[</span><span class="s">"Quantity"</span><span class="p">]</span> <span class="p">!=</span> <span class="n">DBNull</span><span class="p">.</span><span class="n">Value</span> <span class="p">?</span> <span class="n">Convert</span><span class="p">.</span><span class="nf">ToInt32</span><span class="p">(</span><span class="n">reader</span><span class="p">[</span><span class="s">"Quantity"</span><span class="p">])</span> <span class="p">:</span> <span class="m">0</span><span class="p">,</span>
                        <span class="n">RowVersion</span> <span class="p">=</span> <span class="n">reader</span><span class="p">[</span><span class="s">"RowVersion"</span><span class="p">]</span> <span class="p">!=</span> <span class="n">DBNull</span><span class="p">.</span><span class="n">Value</span> <span class="p">?</span> <span class="p">(</span><span class="n">Guid</span><span class="p">)</span><span class="n">reader</span><span class="p">[</span><span class="s">"RowVersion"</span><span class="p">]</span> <span class="p">:</span> <span class="n">Guid</span><span class="p">.</span><span class="n">Empty</span>
                    <span class="p">};</span>
                    <span class="n">products</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">product</span><span class="p">);</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="n">ex</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">finally</span>
            <span class="p">{</span>
                <span class="c1">// close connection</span>
                <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="nf">Dispose</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="n">products</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="nf">UpdateProduct</span><span class="p">(</span><span class="n">Product</span> <span class="n">product</span><span class="p">)</span>
        <span class="p">{</span>

            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="n">State</span> <span class="p">==</span> <span class="n">ConnectionState</span><span class="p">.</span><span class="n">Closed</span><span class="p">)</span>
                    <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">Open</span><span class="p">();</span>
                <span class="kt">var</span> <span class="n">cmd</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">CreateCommand</span><span class="p">()</span> <span class="k">as</span> <span class="n">SqlCommand</span><span class="p">;</span>
                <span class="n">SqlTransaction</span> <span class="n">transaction</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">BeginTransaction</span><span class="p">(</span><span class="s">""</span><span class="p">);</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Transaction</span> <span class="p">=</span> <span class="n">transaction</span><span class="p">;</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">CommandText</span> <span class="p">=</span> <span class="s">@"UPDATE Products SET Name = @Name, Price = @Price, Quantity = @Quantity, RowVersion = @RowVersion
                    WHERE Id = @Id AND RowVersion = @RowVersion"</span><span class="p">;</span>

                <span class="n">Guid</span> <span class="n">rowVersion</span> <span class="p">=</span> <span class="n">Guid</span><span class="p">.</span><span class="nf">NewGuid</span><span class="p">();</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@Id"</span><span class="p">,</span> <span class="n">product</span><span class="p">.</span><span class="n">Id</span><span class="p">);</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@Name"</span><span class="p">,</span> <span class="n">product</span><span class="p">.</span><span class="n">Name</span><span class="p">);</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@Price"</span><span class="p">,</span> <span class="n">product</span><span class="p">.</span><span class="n">Price</span><span class="p">);</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@Quantity"</span><span class="p">,</span> <span class="n">product</span><span class="p">.</span><span class="n">Quantity</span><span class="p">);</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@RowVersion"</span><span class="p">,</span> <span class="n">rowVersion</span><span class="p">);</span>

                <span class="kt">int</span> <span class="n">effectedRow</span> <span class="p">=</span> <span class="n">cmd</span><span class="p">.</span><span class="nf">ExecuteNonQuery</span><span class="p">();</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">effectedRow</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="n">transaction</span><span class="p">.</span><span class="nf">Commit</span><span class="p">();</span>
                <span class="p">}</span>

                <span class="n">product</span><span class="p">.</span><span class="n">RowVersion</span> <span class="p">=</span> <span class="n">rowVersion</span><span class="p">;</span>
                <span class="k">return</span> <span class="n">Task</span><span class="p">.</span><span class="nf">FromResult</span><span class="p">(</span><span class="n">product</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="n">ex</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">finally</span>
            <span class="p">{</span>
                <span class="c1">// close connection</span>
                <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="nf">Dispose</span><span class="p">();</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="nf">DeleteProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="n">Guid</span> <span class="n">rowVersion</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="n">State</span> <span class="p">==</span> <span class="n">ConnectionState</span><span class="p">.</span><span class="n">Closed</span><span class="p">)</span>
                    <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">Open</span><span class="p">();</span>
                <span class="kt">var</span> <span class="n">cmd</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">CreateCommand</span><span class="p">()</span> <span class="k">as</span> <span class="n">SqlCommand</span><span class="p">;</span>
                <span class="n">SqlTransaction</span> <span class="n">transaction</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">BeginTransaction</span><span class="p">(</span><span class="s">""</span><span class="p">);</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Transaction</span> <span class="p">=</span> <span class="n">transaction</span><span class="p">;</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">CommandText</span> <span class="p">=</span> <span class="s">@"DELETE FROM Products WHERE Id = @Id AND RowVersion = @RowVersion"</span><span class="p">;</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@Id"</span><span class="p">,</span> <span class="n">id</span><span class="p">);</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@RowVersion"</span><span class="p">,</span> <span class="n">rowVersion</span><span class="p">);</span>

                <span class="kt">int</span> <span class="n">effectedRow</span> <span class="p">=</span> <span class="n">cmd</span><span class="p">.</span><span class="nf">ExecuteNonQuery</span><span class="p">();</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">effectedRow</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="n">transaction</span><span class="p">.</span><span class="nf">Commit</span><span class="p">();</span>
                <span class="p">}</span>
                <span class="k">return</span> <span class="n">Task</span><span class="p">.</span><span class="nf">FromResult</span><span class="p">(</span><span class="k">new</span> <span class="nf">Product</span><span class="p">());</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="n">ex</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">finally</span>
            <span class="p">{</span>
                <span class="c1">// close connection</span>
                <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="nf">Dispose</span><span class="p">();</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Look at the update and delete query. You will see, row version is checked while updating or deleting rows.</li>
</ul>

<p><strong>Step 10: Create IProductService in Services/Interfaces class</strong></p>

<p><strong>IProductService.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Concurrency.API.Models</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Concurrency.API.Services.Interfaces</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">interface</span> <span class="nc">IProductService</span>
    <span class="p">{</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;&gt;</span> <span class="nf">GetProducts</span><span class="p">();</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="nf">GetProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="nf">AddProduct</span><span class="p">(</span><span class="n">Product</span> <span class="n">product</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="nf">UpdateProduct</span><span class="p">(</span><span class="n">Product</span> <span class="n">product</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="nf">DeleteProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="n">Guid</span> <span class="n">rowVersion</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 11: Create ProductService in Services/Implementation class</strong></p>

<p><strong>ProductService.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Concurrency.API.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Concurrency.API.Repositories.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Concurrency.API.Services.Interfaces</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Concurrency.API.Services.Implementations</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">ProductService</span> <span class="p">:</span> <span class="n">IProductService</span>
    <span class="p">{</span>
        <span class="n">IProductRepository</span> <span class="n">_productRepository</span><span class="p">;</span>
        <span class="k">public</span> <span class="nf">ProductService</span><span class="p">(</span><span class="n">IProductRepository</span> <span class="n">productRepository</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_productRepository</span> <span class="p">=</span> <span class="n">productRepository</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="nf">AddProduct</span><span class="p">(</span><span class="n">Product</span> <span class="n">product</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">_productRepository</span><span class="p">.</span><span class="nf">AddProduct</span><span class="p">(</span><span class="n">product</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="nf">GetProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">_productRepository</span><span class="p">.</span><span class="nf">GetProduct</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;&gt;</span> <span class="nf">GetProducts</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">_productRepository</span><span class="p">.</span><span class="nf">GetProducts</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="nf">UpdateProduct</span><span class="p">(</span><span class="n">Product</span> <span class="n">product</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">_productRepository</span><span class="p">.</span><span class="nf">UpdateProduct</span><span class="p">(</span><span class="n">product</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="nf">DeleteProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="n">Guid</span> <span class="n">rowVersion</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">_productRepository</span><span class="p">.</span><span class="nf">DeleteProduct</span><span class="p">(</span><span class="n">id</span><span class="p">,</span> <span class="n">rowVersion</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 12: Configure Program class as follows.</strong></p>

<p><strong>Program.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Concurrency.API.Persistence</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Concurrency.API.Repositories.Implementations</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Concurrency.API.Repositories.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Concurrency.API.Services.Implementations</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Concurrency.API.Services.Interfaces</span><span class="p">;</span>

<span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="n">WebApplication</span><span class="p">.</span><span class="nf">CreateBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>

<span class="c1">// Add services to the container.</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">();</span>
<span class="c1">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddEndpointsApiExplorer</span><span class="p">();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddSwaggerGen</span><span class="p">();</span>


<span class="kt">string</span> <span class="n">connectionString</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="n">Configuration</span><span class="p">.</span><span class="nf">GetConnectionString</span><span class="p">(</span><span class="s">"DefaultConnection"</span><span class="p">);</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddTransient</span><span class="p">(</span><span class="n">_</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="nf">DBConnector</span><span class="p">(</span><span class="n">connectionString</span><span class="p">));</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddScoped</span><span class="p">&lt;</span><span class="n">IProductRepository</span><span class="p">,</span> <span class="n">ProductRepository</span><span class="p">&gt;();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddScoped</span><span class="p">&lt;</span><span class="n">IProductService</span><span class="p">,</span> <span class="n">ProductService</span><span class="p">&gt;();</span>

<span class="kt">var</span> <span class="n">app</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

<span class="c1">// Configure the HTTP request pipeline.</span>
<span class="k">if</span> <span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">Environment</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
<span class="p">{</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwagger</span><span class="p">();</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwaggerUI</span><span class="p">();</span>
<span class="p">}</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseHttpsRedirection</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseAuthorization</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">MapControllers</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>


</code></pre></div></div>

<p><strong>Step 13: Create a Controller class ProductsController in Controllers folder.</strong></p>

<p><strong>ProductsController.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Concurrency.API.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Concurrency.API.Persistence</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Concurrency.API.Services.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Concurrency.API.Controllers</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
    <span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">ProductsController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="n">DBConnector</span> <span class="n">_connector</span><span class="p">;</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IProductService</span> <span class="n">_productService</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">ProductsController</span><span class="p">(</span> <span class="n">DBConnector</span> <span class="n">connector</span><span class="p">,</span> <span class="n">IProductService</span> <span class="n">productService</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_connector</span> <span class="p">=</span> <span class="n">connector</span><span class="p">;</span>
            <span class="n">_productService</span> <span class="p">=</span> <span class="n">productService</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/Products</span>
        <span class="p">[</span><span class="n">HttpGet</span><span class="p">]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;&gt;&gt;</span> <span class="nf">GetProducts</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">products</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_productService</span><span class="p">.</span><span class="nf">GetProducts</span><span class="p">();</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">products</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">products</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/Products/5</span>
        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;&gt;</span> <span class="nf">GetProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">product</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_productService</span><span class="p">.</span><span class="nf">GetProduct</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">product</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">product</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">// PUT: api/Products/5</span>
        <span class="p">[</span><span class="nf">HttpPut</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">PutProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="n">Product</span> <span class="n">product</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">id</span> <span class="p">!=</span> <span class="n">product</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_productService</span><span class="p">.</span><span class="nf">UpdateProduct</span><span class="p">(</span><span class="n">product</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">result</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">// POST: api/Products</span>
        <span class="p">[</span><span class="n">HttpPost</span><span class="p">]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;&gt;</span> <span class="nf">PostProduct</span><span class="p">(</span><span class="n">Product</span> <span class="n">product</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_productService</span><span class="p">.</span><span class="nf">AddProduct</span><span class="p">(</span><span class="n">product</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">result</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">// DELETE: api/Products/5</span>
        <span class="p">[</span><span class="nf">HttpDelete</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">DeleteProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="n">Guid</span> <span class="n">rowVersion</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_productService</span><span class="p">.</span><span class="nf">DeleteProduct</span><span class="p">(</span><span class="n">id</span><span class="p">,</span> <span class="n">rowVersion</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">result</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>



</code></pre></div></div>

<p><strong>Step 14: Run the application and test concurrency</strong></p>

<ul>
  <li>Create a new record by Post method in swagger. Sample example for post data.</li>
</ul>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w">
  </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ASUS Laptop"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"price"</span><span class="p">:</span><span class="w"> </span><span class="mi">1200</span><span class="p">,</span><span class="w">
  </span><span class="nl">"quantity"</span><span class="p">:</span><span class="w"> </span><span class="mi">230</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<ul>
  <li>Update the record using the Put method in Swagger. A sample input is provided below. Meanwhile, open another tab and make an update to the record. Your record version will be altered. If you attempt to update the record using the previous record version, it will not updated due to concurrency. However, if no one else has updated it and you are using the correct record version, you can update the record.</li>
</ul>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="mi">5</span><span class="p">,</span><span class="w">
    </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ASUS Laptop"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"price"</span><span class="p">:</span><span class="w"> </span><span class="mi">1300</span><span class="p">,</span><span class="w">
    </span><span class="nl">"quantity"</span><span class="p">:</span><span class="w"> </span><span class="mi">230</span><span class="p">,</span><span class="w">
    </span><span class="nl">"rowVersion"</span><span class="p">:</span><span class="w"> </span><span class="s2">"04e92587-8c5d-4a27-b5d5-bbee9fc84458"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<ul>
  <li>Delete the record using the Delete method in Swagger. Meanwhile, open another tab and update the record. Your record version will be changed. If you attempt to delete the record using the previous record version, it will throw an exception due to concurrency. However, if no one else has updated it and you are using the correct record version, you can delete the record without encountering any problem.</li>
</ul>

<p><strong><a href="https://github.com/mahedee/code-sample02/tree/master/ConcurrencyRawSQL">Source code</a></strong></p>]]></content><author><name>Mahedee Hasan</name></author><category term="ASP.NET" /><category term="ASP.NET Core" /><category term="C#" /><category term="Web API" /><category term="EF" /><category term="Software Architecture" /><category term="csharp" /><category term="aspnet" /><category term="aspnetcore" /><category term="webapi" /><category term="ef" /><category term="softwarearchitecture" /><summary type="html"><![CDATA[Effectively dealing with concurrency is crucial, especially in large business applications, and it plays a significant role in financial systems. This article is designed to illustrate the practical aspects of managing concurrency in an ASP.NET Core application using raw SQL and ADO.NET.]]></summary></entry><entry><title type="html">Step-by-Step Guide to Integrating Audit Trail in ASP.NET Core Using ADO.NET and Raw SQL</title><link href="https://mahedee.net//Step-by-Step-Guide-to-Integrating-Audit-Trail-in-ASPNET-Core-Using-ADONET/" rel="alternate" type="text/html" title="Step-by-Step Guide to Integrating Audit Trail in ASP.NET Core Using ADO.NET and Raw SQL" /><published>2024-01-15T00:00:00-05:00</published><updated>2024-01-15T00:00:00-05:00</updated><id>https://mahedee.net//Step-by-Step-Guide-to-Integrating-Audit-Trail-in-ASPNET-Core-Using-ADONET</id><content type="html" xml:base="https://mahedee.net//Step-by-Step-Guide-to-Integrating-Audit-Trail-in-ASPNET-Core-Using-ADONET/"><![CDATA[<p><strong>Introduction</strong>
The Audit Trail stands out as a critical feature in enterprise applications, primarily serving essential roles in security and fraud transaction detection. An audit trail is a chronological record of changes or activities performed in a system, providing a detailed history of events. In the context of software applications, including ASP.NET, an audit trail captures and logs various actions such as data modifications, user interactions, and system activities. This article delves into a comprehensive guide on implementing Audit Trail functionality in an ASP.NET Core application using SQL Server with ADO.NET.</p>

<p><strong>Why it is important?</strong>
It helps organizations maintain a record of user activity within their systems, which can be used</p>

<ul>
  <li>To monitor user actions and detect suspicious activities</li>
  <li>To track changes and identify the root cause of issues</li>
  <li>To ensure compliance with regulatory requirements</li>
  <li>Records changes to critical data elements, ensuring accuracy and consistency</li>
  <li>Provides a detailed history of events for forensic analysis</li>
  <li>Meets legal and regulatory requirements by maintaining a detailed audit trail</li>
  <li>Offers historical data for reporting and analysis, supporting decision-making</li>
  <li>Frud detection etc.</li>
</ul>

<p>In this article, we will discuss how you can implement an audit trail feature using Entity Framework plus</p>

<p><strong>Tools and Technology Used</strong></p>
<ul>
  <li>ASP.net core Web API</li>
  <li>Visual C#</li>
  <li>ADO.NET</li>
  <li>SQL Server</li>
</ul>

<p><strong>Step 1: Create Database and related tables in MS SQL Server</strong></p>
<ul>
  <li>Create a database name <code class="language-plaintext highlighter-rouge">AuditLogDB</code></li>
  <li>Create a table name <code class="language-plaintext highlighter-rouge">Product</code> to store Product information</li>
  <li>Create a <code class="language-plaintext highlighter-rouge">AuditEntry</code> and <code class="language-plaintext highlighter-rouge">AuditEntryProperty</code> table to store audit information.</li>
</ul>

<p><strong>Product Table</strong></p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="p">[</span><span class="n">dbo</span><span class="p">].[</span><span class="n">Products</span><span class="p">](</span>
	<span class="p">[</span><span class="n">Id</span><span class="p">]</span> <span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="k">IDENTITY</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
	<span class="p">[</span><span class="n">Name</span><span class="p">]</span> <span class="p">[</span><span class="n">nvarchar</span><span class="p">](</span><span class="k">max</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
	<span class="p">[</span><span class="n">Price</span><span class="p">]</span> <span class="p">[</span><span class="nb">decimal</span><span class="p">](</span><span class="mi">18</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
	<span class="p">[</span><span class="n">Quantity</span><span class="p">]</span> <span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
 <span class="k">CONSTRAINT</span> <span class="p">[</span><span class="n">PK_Products</span><span class="p">]</span> <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="n">CLUSTERED</span> 
<span class="p">(</span>
	<span class="p">[</span><span class="n">Id</span><span class="p">]</span> <span class="k">ASC</span>
<span class="p">)</span><span class="k">WITH</span> <span class="p">(</span><span class="n">PAD_INDEX</span> <span class="o">=</span> <span class="k">OFF</span><span class="p">,</span> <span class="n">STATISTICS_NORECOMPUTE</span> <span class="o">=</span> <span class="k">OFF</span><span class="p">,</span> <span class="n">IGNORE_DUP_KEY</span> <span class="o">=</span> <span class="k">OFF</span><span class="p">,</span> <span class="n">ALLOW_ROW_LOCKS</span> <span class="o">=</span> <span class="k">ON</span><span class="p">,</span> <span class="n">ALLOW_PAGE_LOCKS</span> <span class="o">=</span> <span class="k">ON</span><span class="p">,</span> <span class="n">OPTIMIZE_FOR_SEQUENTIAL_KEY</span> <span class="o">=</span> <span class="k">OFF</span><span class="p">)</span> <span class="k">ON</span> <span class="p">[</span><span class="k">PRIMARY</span><span class="p">]</span>
<span class="p">)</span> <span class="k">ON</span> <span class="p">[</span><span class="k">PRIMARY</span><span class="p">]</span> <span class="n">TEXTIMAGE_ON</span> <span class="p">[</span><span class="k">PRIMARY</span><span class="p">]</span>
<span class="k">GO</span>
</code></pre></div></div>

<p><strong>AuditEntry Table</strong></p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">CREATE</span> <span class="k">TABLE</span> <span class="p">[</span><span class="n">dbo</span><span class="p">].[</span><span class="n">AuditEntry</span><span class="p">](</span>
	<span class="p">[</span><span class="n">AuditEntryID</span><span class="p">]</span> <span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="k">IDENTITY</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
	<span class="p">[</span><span class="n">EntitySetName</span><span class="p">]</span> <span class="p">[</span><span class="n">nvarchar</span><span class="p">](</span><span class="mi">255</span><span class="p">)</span> <span class="k">NULL</span><span class="p">,</span>
	<span class="p">[</span><span class="n">EntityTypeName</span><span class="p">]</span> <span class="p">[</span><span class="n">nvarchar</span><span class="p">](</span><span class="mi">255</span><span class="p">)</span> <span class="k">NULL</span><span class="p">,</span>
	<span class="p">[</span><span class="k">State</span><span class="p">]</span> <span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
	<span class="p">[</span><span class="n">StateName</span><span class="p">]</span> <span class="p">[</span><span class="n">nvarchar</span><span class="p">](</span><span class="mi">255</span><span class="p">)</span> <span class="k">NULL</span><span class="p">,</span>
	<span class="p">[</span><span class="n">CreatedBy</span><span class="p">]</span> <span class="p">[</span><span class="n">nvarchar</span><span class="p">](</span><span class="mi">255</span><span class="p">)</span> <span class="k">NULL</span><span class="p">,</span>
	<span class="p">[</span><span class="n">CreatedDate</span><span class="p">]</span> <span class="p">[</span><span class="n">datetime2</span><span class="p">](</span><span class="mi">7</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
	<span class="p">[</span><span class="n">Discriminator</span><span class="p">]</span> <span class="p">[</span><span class="n">nvarchar</span><span class="p">](</span><span class="k">max</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
	<span class="p">[</span><span class="n">AppplicationName</span><span class="p">]</span> <span class="p">[</span><span class="n">nvarchar</span><span class="p">](</span><span class="k">max</span><span class="p">)</span> <span class="k">NULL</span><span class="p">,</span>
 <span class="k">CONSTRAINT</span> <span class="p">[</span><span class="n">PK_AuditEntry</span><span class="p">]</span> <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="n">CLUSTERED</span> 
<span class="p">(</span>
	<span class="p">[</span><span class="n">AuditEntryID</span><span class="p">]</span> <span class="k">ASC</span>
<span class="p">)</span><span class="k">WITH</span> <span class="p">(</span><span class="n">PAD_INDEX</span> <span class="o">=</span> <span class="k">OFF</span><span class="p">,</span> <span class="n">STATISTICS_NORECOMPUTE</span> <span class="o">=</span> <span class="k">OFF</span><span class="p">,</span> <span class="n">IGNORE_DUP_KEY</span> <span class="o">=</span> <span class="k">OFF</span><span class="p">,</span> <span class="n">ALLOW_ROW_LOCKS</span> <span class="o">=</span> <span class="k">ON</span><span class="p">,</span> <span class="n">ALLOW_PAGE_LOCKS</span> <span class="o">=</span> <span class="k">ON</span><span class="p">,</span> <span class="n">OPTIMIZE_FOR_SEQUENTIAL_KEY</span> <span class="o">=</span> <span class="k">OFF</span><span class="p">)</span> <span class="k">ON</span> <span class="p">[</span><span class="k">PRIMARY</span><span class="p">]</span>
<span class="p">)</span> <span class="k">ON</span> <span class="p">[</span><span class="k">PRIMARY</span><span class="p">]</span> <span class="n">TEXTIMAGE_ON</span> <span class="p">[</span><span class="k">PRIMARY</span><span class="p">]</span>
<span class="k">GO</span>

</code></pre></div></div>

<p><strong>AuditEntryProperty Table</strong></p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="p">[</span><span class="n">dbo</span><span class="p">].[</span><span class="n">AuditEntryProperty</span><span class="p">](</span>
	<span class="p">[</span><span class="n">AuditEntryPropertyID</span><span class="p">]</span> <span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="k">IDENTITY</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
	<span class="p">[</span><span class="n">AuditEntryID</span><span class="p">]</span> <span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
	<span class="p">[</span><span class="n">RelationName</span><span class="p">]</span> <span class="p">[</span><span class="n">nvarchar</span><span class="p">](</span><span class="mi">255</span><span class="p">)</span> <span class="k">NULL</span><span class="p">,</span>
	<span class="p">[</span><span class="n">PropertyName</span><span class="p">]</span> <span class="p">[</span><span class="n">nvarchar</span><span class="p">](</span><span class="mi">255</span><span class="p">)</span> <span class="k">NULL</span><span class="p">,</span>
	<span class="p">[</span><span class="n">OldValue</span><span class="p">]</span> <span class="p">[</span><span class="n">nvarchar</span><span class="p">](</span><span class="k">max</span><span class="p">)</span> <span class="k">NULL</span><span class="p">,</span>
	<span class="p">[</span><span class="n">NewValue</span><span class="p">]</span> <span class="p">[</span><span class="n">nvarchar</span><span class="p">](</span><span class="k">max</span><span class="p">)</span> <span class="k">NULL</span><span class="p">,</span>
	<span class="p">[</span><span class="n">Discriminator</span><span class="p">]</span> <span class="p">[</span><span class="n">nvarchar</span><span class="p">](</span><span class="k">max</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
	<span class="p">[</span><span class="n">AppplicationName</span><span class="p">]</span> <span class="p">[</span><span class="n">nvarchar</span><span class="p">](</span><span class="k">max</span><span class="p">)</span> <span class="k">NULL</span><span class="p">,</span>
 <span class="k">CONSTRAINT</span> <span class="p">[</span><span class="n">PK_AuditEntryProperty</span><span class="p">]</span> <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="n">CLUSTERED</span> 
<span class="p">(</span>
	<span class="p">[</span><span class="n">AuditEntryPropertyID</span><span class="p">]</span> <span class="k">ASC</span>
<span class="p">)</span><span class="k">WITH</span> <span class="p">(</span><span class="n">PAD_INDEX</span> <span class="o">=</span> <span class="k">OFF</span><span class="p">,</span> <span class="n">STATISTICS_NORECOMPUTE</span> <span class="o">=</span> <span class="k">OFF</span><span class="p">,</span> <span class="n">IGNORE_DUP_KEY</span> <span class="o">=</span> <span class="k">OFF</span><span class="p">,</span> <span class="n">ALLOW_ROW_LOCKS</span> <span class="o">=</span> <span class="k">ON</span><span class="p">,</span> <span class="n">ALLOW_PAGE_LOCKS</span> <span class="o">=</span> <span class="k">ON</span><span class="p">,</span> <span class="n">OPTIMIZE_FOR_SEQUENTIAL_KEY</span> <span class="o">=</span> <span class="k">OFF</span><span class="p">)</span> <span class="k">ON</span> <span class="p">[</span><span class="k">PRIMARY</span><span class="p">]</span>
<span class="p">)</span> <span class="k">ON</span> <span class="p">[</span><span class="k">PRIMARY</span><span class="p">]</span> <span class="n">TEXTIMAGE_ON</span> <span class="p">[</span><span class="k">PRIMARY</span><span class="p">]</span>
<span class="k">GO</span>

<span class="k">ALTER</span> <span class="k">TABLE</span> <span class="p">[</span><span class="n">dbo</span><span class="p">].[</span><span class="n">AuditEntryProperty</span><span class="p">]</span>  <span class="k">WITH</span> <span class="k">CHECK</span> <span class="k">ADD</span>  <span class="k">CONSTRAINT</span> <span class="p">[</span><span class="n">FK_AuditEntryProperty_AuditEntry_AuditEntryID</span><span class="p">]</span> <span class="k">FOREIGN</span> <span class="k">KEY</span><span class="p">([</span><span class="n">AuditEntryID</span><span class="p">])</span>
<span class="k">REFERENCES</span> <span class="p">[</span><span class="n">dbo</span><span class="p">].[</span><span class="n">AuditEntry</span><span class="p">]</span> <span class="p">([</span><span class="n">AuditEntryID</span><span class="p">])</span>
<span class="k">ON</span> <span class="k">DELETE</span> <span class="k">CASCADE</span>
<span class="k">GO</span>

<span class="k">ALTER</span> <span class="k">TABLE</span> <span class="p">[</span><span class="n">dbo</span><span class="p">].[</span><span class="n">AuditEntryProperty</span><span class="p">]</span> <span class="k">CHECK</span> <span class="k">CONSTRAINT</span> <span class="p">[</span><span class="n">FK_AuditEntryProperty_AuditEntry_AuditEntryID</span><span class="p">]</span>
<span class="k">GO</span>

</code></pre></div></div>

<p><strong>Step 2: Create a asp.net core web api project name AuditLog.API</strong></p>

<p><strong>Step 3: Install the following nuget packages in the project.</strong></p>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">System.Data.SqlClient</span>
</code></pre></div></div>

<p><strong>Step 4: Create a Model class name Product in Models folder.</strong></p>

<ul>
  <li>Product class to store Product Information</li>
</ul>

<p><strong>Product.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">AuditLog.API.Models</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Product</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span> <span class="p">=</span> <span class="n">String</span><span class="p">.</span><span class="n">Empty</span><span class="p">;</span>
        <span class="k">public</span> <span class="kt">decimal</span> <span class="n">Price</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Quantity</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>Step 5: Create a DBConnector class in Persistence folder to create connection to the database</strong></p>

<p><strong>DBConnector.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System.Data.SqlClient</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">AuditLog.API.Persistence</span>
<span class="p">{</span>
    <span class="c1">// This class is used to create a connection to the database.</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">DBConnector</span> <span class="p">:</span> <span class="n">IDisposable</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="n">SqlConnection</span> <span class="n">connection</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">DBConnector</span><span class="p">(</span><span class="kt">string</span> <span class="n">connectionString</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">connection</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">SqlConnection</span><span class="p">(</span><span class="n">connectionString</span><span class="p">);</span>
            <span class="k">this</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">Open</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">void</span> <span class="nf">Dispose</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">connection</span><span class="p">.</span><span class="nf">Close</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 6: Add connection string in appsettings.json file</strong></p>

<p><strong>appsettings.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"Logging"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"LogLevel"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Default"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Information"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Microsoft.AspNetCore"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Warning"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"ConnectionStrings"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"DefaultConnection"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Server=localhost;Database=AuditLogDB;User Id=sa;Password=YourPassword;TrustServerCertificate=True;"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"AllowedHosts"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*"</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>
<p><strong>Step 7: Create classes and enums for Audit Trail in AuditTrail folder</strong></p>

<ul>
  <li>Create ApplicationEnum, StateName, EnumExtesions class in AuditTrail/Enums folder</li>
</ul>

<p><strong>ApplicationEnum.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System.ComponentModel</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">AuditLog.API.AuditTrail.Enums</span>
<span class="p">{</span>
    <span class="c1">// This enum is used to identify the names of applications that is being audited.</span>
    <span class="k">public</span> <span class="k">enum</span> <span class="n">ApplicationEnum</span>
    <span class="p">{</span>
        <span class="p">[</span><span class="nf">Description</span><span class="p">(</span><span class="s">"AuditLog.API"</span><span class="p">)]</span>
        <span class="n">AuditLogAPP</span><span class="p">,</span>

        <span class="p">[</span><span class="nf">Description</span><span class="p">(</span><span class="s">"ECommerce Application"</span><span class="p">)]</span>
        <span class="n">ECommerceAPP</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>StateName.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">AuditLog.API.AuditTrail.Enums</span>
<span class="p">{</span>
    <span class="c1">// State of the operation performed on the entity.</span>
    <span class="k">public</span> <span class="k">enum</span> <span class="n">StateName</span>
    <span class="p">{</span>
        <span class="n">EntityAdded</span><span class="p">,</span>
        <span class="n">EntityModified</span><span class="p">,</span>
        <span class="n">EntityDeleted</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>EnumExtensions.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">System.ComponentModel</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Reflection</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">AuditLog.API.AuditTrail.Enums</span>
<span class="p">{</span>
    <span class="c1">// This enum is used to identify the names of applications that is being audited.</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">EnumExtensions</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">static</span> <span class="kt">string</span> <span class="nf">GetApplication</span><span class="p">(</span><span class="k">this</span> <span class="n">Enum</span> <span class="k">value</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">FieldInfo</span><span class="p">?</span> <span class="n">fieldInfo</span> <span class="p">=</span> <span class="k">value</span><span class="p">.</span><span class="nf">GetType</span><span class="p">().</span><span class="nf">GetField</span><span class="p">(</span><span class="k">value</span><span class="p">.</span><span class="nf">ToString</span><span class="p">());</span>

            <span class="n">DescriptionAttribute</span><span class="p">?</span> <span class="n">attribute</span> <span class="p">=</span> <span class="n">fieldInfo</span><span class="p">?.</span><span class="n">GetCustomAttribute</span><span class="p">&lt;</span><span class="n">DescriptionAttribute</span><span class="p">&gt;();</span>

            <span class="k">return</span> <span class="n">attribute</span> <span class="p">!=</span> <span class="k">null</span> <span class="p">?</span> <span class="n">attribute</span><span class="p">.</span><span class="n">Description</span> <span class="p">:</span> <span class="k">value</span><span class="p">.</span><span class="nf">ToString</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">static</span> <span class="kt">string</span> <span class="nf">GetEntity</span><span class="p">(</span><span class="k">this</span> <span class="n">Enum</span> <span class="k">value</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">FieldInfo</span><span class="p">?</span> <span class="n">fieldInfo</span> <span class="p">=</span> <span class="k">value</span><span class="p">.</span><span class="nf">GetType</span><span class="p">().</span><span class="nf">GetField</span><span class="p">(</span><span class="k">value</span><span class="p">.</span><span class="nf">ToString</span><span class="p">());</span>

            <span class="n">DescriptionAttribute</span><span class="p">?</span> <span class="n">attribute</span> <span class="p">=</span> <span class="n">fieldInfo</span><span class="p">?.</span><span class="n">GetCustomAttribute</span><span class="p">&lt;</span><span class="n">DescriptionAttribute</span><span class="p">&gt;();</span>

            <span class="k">return</span> <span class="n">attribute</span> <span class="p">!=</span> <span class="k">null</span> <span class="p">?</span> <span class="n">attribute</span><span class="p">.</span><span class="n">Description</span> <span class="p">:</span> <span class="k">value</span><span class="p">.</span><span class="nf">ToString</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create IAuditTrail Interface in AuditTrail/Interface folder</li>
</ul>

<p><strong>IAuditTrail.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">AuditLog.API.AuditTrail.Interfaces</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">interface</span> <span class="nc">IAuditTrail</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">void</span> <span class="nf">Insert</span><span class="p">(</span><span class="n">T</span> <span class="n">entity</span><span class="p">);</span>
        <span class="k">void</span> <span class="nf">Update</span><span class="p">(</span><span class="n">T</span> <span class="n">oldEntity</span><span class="p">,</span> <span class="n">T</span> <span class="n">newEntity</span><span class="p">);</span>
        <span class="k">void</span> <span class="nf">Delete</span><span class="p">(</span><span class="n">T</span> <span class="n">oldEntity</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create AuditTrail class in AuditTrail/Implementaion folder</li>
</ul>

<p><strong>AuditTrail.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">AuditLog.API.AuditTrail.Enums</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">AuditLog.API.AuditTrail.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">AuditLog.API.Persistence</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Data</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Data.SqlClient</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Reflection</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">AuditLog.API.AuditTrail.Implementations</span>
<span class="p">{</span>
    <span class="c1">// This class is used to insert audit log into database.</span>
    <span class="c1">// This is the core class of the AuditTrail project.</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">AuditTrail</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="p">:</span> <span class="n">IAuditTrail</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="k">where</span> <span class="n">T</span> <span class="p">:</span> <span class="k">class</span>
    <span class="err">{</span>
        <span class="nc">private</span> <span class="n">DBConnector</span> <span class="n">_connector</span><span class="p">;</span>
        <span class="k">public</span> <span class="nf">AuditTrail</span><span class="p">(</span><span class="n">DBConnector</span> <span class="n">dBConnector</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_connector</span> <span class="p">=</span> <span class="n">dBConnector</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">void</span> <span class="nf">Insert</span><span class="p">(</span><span class="n">T</span> <span class="n">entity</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">entity</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span><span class="p">;</span>
            <span class="p">}</span>


            <span class="n">Type</span> <span class="n">type</span> <span class="p">=</span> <span class="k">typeof</span><span class="p">(</span><span class="n">T</span><span class="p">);</span>
            <span class="n">PropertyInfo</span><span class="p">[]</span> <span class="n">propertyInfos</span> <span class="p">=</span> <span class="n">type</span><span class="p">.</span><span class="nf">GetProperties</span><span class="p">();</span>
            <span class="kt">string</span> <span class="n">applicationName</span> <span class="p">=</span> <span class="n">ApplicationEnum</span><span class="p">.</span><span class="n">AuditLogAPP</span><span class="p">.</span><span class="nf">GetApplication</span><span class="p">();</span>

            <span class="kt">var</span> <span class="n">cmd</span> <span class="p">=</span> <span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">CreateCommand</span><span class="p">()</span> <span class="k">as</span> <span class="n">SqlCommand</span><span class="p">;</span>
            <span class="n">SqlTransaction</span> <span class="n">transaction</span> <span class="p">=</span> <span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">BeginTransaction</span><span class="p">(</span><span class="s">""</span><span class="p">);</span>
            <span class="n">cmd</span><span class="p">.</span><span class="n">Transaction</span> <span class="p">=</span> <span class="n">transaction</span><span class="p">;</span>


            <span class="k">try</span>
            <span class="p">{</span>

                <span class="c1">// Insert into AuditEntry table</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">CommandText</span> <span class="p">=</span> <span class="s">@"INSERT INTO [AuditEntry] (EntitySetName, EntityTypeName, State, StateName, CreatedBy, CreatedDate, Discriminator, AppplicationName) 
                                    OUTPUT inserted.AuditEntryID
                                    VALUES (@EntitySetName, @EntityTypeName, @State,@StateName, @CreatedBy, @CreatedDate, @Discriminator, @AppplicationName);
                                    SELECT SCOPE_IDENTITY();"</span><span class="p">;</span>

                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@EntitySetName"</span><span class="p">,</span> <span class="n">type</span><span class="p">.</span><span class="n">Name</span><span class="p">);</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@EntityTypeName"</span><span class="p">,</span> <span class="n">type</span><span class="p">.</span><span class="n">Name</span><span class="p">);</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@State"</span><span class="p">,</span> <span class="n">StateName</span><span class="p">.</span><span class="n">EntityAdded</span><span class="p">);</span> <span class="c1">// 0 for insert</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@StateName"</span><span class="p">,</span> <span class="n">StateName</span><span class="p">.</span><span class="n">EntityAdded</span><span class="p">.</span><span class="nf">ToString</span><span class="p">());</span> <span class="c1">// EntityAdded for insert</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@CreatedBy"</span><span class="p">,</span> <span class="s">"mahedee"</span><span class="p">);</span> <span class="c1">// It will come from session</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@CreatedDate"</span><span class="p">,</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">);</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@Discriminator"</span><span class="p">,</span> <span class="s">"CustomAuditEntry"</span><span class="p">);</span> <span class="c1">// CustomAuditEntry Model</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@AppplicationName"</span><span class="p">,</span> <span class="n">applicationName</span><span class="p">);</span> <span class="c1">// Name of the application</span>

                <span class="kt">int</span> <span class="n">auditEntryId</span> <span class="p">=</span> <span class="n">Convert</span><span class="p">.</span><span class="nf">ToInt32</span><span class="p">(</span><span class="n">cmd</span><span class="p">.</span><span class="nf">ExecuteScalar</span><span class="p">());</span>

                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">Clear</span><span class="p">();</span>


                <span class="c1">// Insert into AuditEntryProperty table</span>
                <span class="c1">// Values of each property</span>

                <span class="n">cmd</span><span class="p">.</span><span class="n">CommandText</span> <span class="p">=</span> <span class="s">@"INSERT INTO [AuditEntryProperty] (AuditEntryID, RelationName, PropertyName, OldValue, NewValue, Discriminator, AppplicationName) 
                                    VALUES (@AuditEntryID, @RelationName, @PropertyName, @OldValue, @NewValue, @DiscriminatorProperty, @AppplicationNameProperty);
                                    SELECT SCOPE_IDENTITY();"</span><span class="p">;</span>

                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">SqlParameter</span><span class="p">(</span><span class="s">"@AuditEntryID"</span><span class="p">,</span> <span class="n">SqlDbType</span><span class="p">.</span><span class="n">Int</span><span class="p">));</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">SqlParameter</span><span class="p">(</span><span class="s">"@RelationName"</span><span class="p">,</span> <span class="n">SqlDbType</span><span class="p">.</span><span class="n">NVarChar</span><span class="p">));</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">SqlParameter</span><span class="p">(</span><span class="s">"@PropertyName"</span><span class="p">,</span> <span class="n">SqlDbType</span><span class="p">.</span><span class="n">NVarChar</span><span class="p">));</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">SqlParameter</span><span class="p">(</span><span class="s">"@OldValue"</span><span class="p">,</span> <span class="n">SqlDbType</span><span class="p">.</span><span class="n">NVarChar</span><span class="p">));</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">SqlParameter</span><span class="p">(</span><span class="s">"@NewValue"</span><span class="p">,</span> <span class="n">SqlDbType</span><span class="p">.</span><span class="n">NVarChar</span><span class="p">));</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">SqlParameter</span><span class="p">(</span><span class="s">"@DiscriminatorProperty"</span><span class="p">,</span> <span class="n">SqlDbType</span><span class="p">.</span><span class="n">NVarChar</span><span class="p">));</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">SqlParameter</span><span class="p">(</span><span class="s">"@AppplicationNameProperty"</span><span class="p">,</span> <span class="n">SqlDbType</span><span class="p">.</span><span class="n">NVarChar</span><span class="p">));</span>


                <span class="k">foreach</span> <span class="p">(</span><span class="n">PropertyInfo</span> <span class="n">propertyInfo</span> <span class="k">in</span> <span class="n">propertyInfos</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">[</span><span class="s">"@AuditEntryID"</span><span class="p">].</span><span class="n">Value</span> <span class="p">=</span> <span class="n">auditEntryId</span><span class="p">;</span>
                    <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">[</span><span class="s">"@RelationName"</span><span class="p">].</span><span class="n">Value</span> <span class="p">=</span> <span class="n">DBNull</span><span class="p">.</span><span class="n">Value</span><span class="p">;</span>
                    <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">[</span><span class="s">"@PropertyName"</span><span class="p">].</span><span class="n">Value</span> <span class="p">=</span> <span class="n">propertyInfo</span><span class="p">.</span><span class="n">Name</span><span class="p">;</span> <span class="c1">// property name</span>
                    <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">[</span><span class="s">"@OldValue"</span><span class="p">].</span><span class="n">Value</span> <span class="p">=</span> <span class="n">DBNull</span><span class="p">.</span><span class="n">Value</span><span class="p">;</span> <span class="c1">// Null for insert</span>
                    <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">[</span><span class="s">"@NewValue"</span><span class="p">].</span><span class="n">Value</span> <span class="p">=</span> <span class="n">propertyInfo</span><span class="p">.</span><span class="nf">GetValue</span><span class="p">(</span><span class="n">entity</span><span class="p">);</span> <span class="c1">// property value</span>
                    <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">[</span><span class="s">"@DiscriminatorProperty"</span><span class="p">].</span><span class="n">Value</span> <span class="p">=</span> <span class="s">"CustomAuditEntryProperty"</span><span class="p">;</span>
                    <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">[</span><span class="s">"@AppplicationNameProperty"</span><span class="p">].</span><span class="n">Value</span> <span class="p">=</span> <span class="n">applicationName</span><span class="p">;</span>
                    <span class="n">cmd</span><span class="p">.</span><span class="nf">ExecuteScalar</span><span class="p">();</span>
                <span class="p">}</span>

                <span class="c1">// Commit transaction</span>
                <span class="n">transaction</span><span class="p">.</span><span class="nf">Commit</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">transaction</span><span class="p">.</span><span class="nf">Rollback</span><span class="p">();</span>
                <span class="k">throw</span> <span class="n">ex</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">finally</span>
            <span class="p">{</span>
                <span class="c1">// close connection</span>
                <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="nf">Dispose</span><span class="p">();</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">void</span> <span class="nf">Update</span><span class="p">(</span><span class="n">T</span> <span class="n">oldEntity</span><span class="p">,</span> <span class="n">T</span> <span class="n">newEntity</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">oldEntity</span> <span class="k">is</span> <span class="k">null</span> <span class="p">||</span> <span class="n">newEntity</span> <span class="k">is</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="c1">// Get the properties from type</span>
            <span class="n">Type</span> <span class="n">type</span> <span class="p">=</span> <span class="k">typeof</span><span class="p">(</span><span class="n">T</span><span class="p">);</span>
            <span class="n">PropertyInfo</span><span class="p">[]</span> <span class="n">propertyInfos</span> <span class="p">=</span> <span class="n">type</span><span class="p">.</span><span class="nf">GetProperties</span><span class="p">();</span>
            <span class="kt">string</span> <span class="n">applicationName</span> <span class="p">=</span> <span class="n">ApplicationEnum</span><span class="p">.</span><span class="n">AuditLogAPP</span><span class="p">.</span><span class="nf">GetApplication</span><span class="p">();</span>

            <span class="kt">var</span> <span class="n">cmd</span> <span class="p">=</span> <span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">CreateCommand</span><span class="p">()</span> <span class="k">as</span> <span class="n">SqlCommand</span><span class="p">;</span>
            <span class="n">SqlTransaction</span> <span class="n">transaction</span> <span class="p">=</span> <span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">BeginTransaction</span><span class="p">(</span><span class="s">""</span><span class="p">);</span>
            <span class="n">cmd</span><span class="p">.</span><span class="n">Transaction</span> <span class="p">=</span> <span class="n">transaction</span><span class="p">;</span>


            <span class="k">try</span>
            <span class="p">{</span>

                <span class="c1">// Insert into AuditEntry</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">CommandText</span> <span class="p">=</span> <span class="s">@"INSERT INTO [AuditEntry] (EntitySetName, EntityTypeName, State, StateName, CreatedBy, CreatedDate, Discriminator, AppplicationName) 
                                    OUTPUT inserted.AuditEntryID
                                    VALUES (@EntitySetName, @EntityTypeName, @State,@StateName, @CreatedBy, @CreatedDate, @Discriminator, @AppplicationName);
                                    SELECT SCOPE_IDENTITY();"</span><span class="p">;</span>

                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@EntitySetName"</span><span class="p">,</span> <span class="n">type</span><span class="p">.</span><span class="n">Name</span><span class="p">);</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@EntityTypeName"</span><span class="p">,</span> <span class="n">type</span><span class="p">.</span><span class="n">Name</span><span class="p">);</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@State"</span><span class="p">,</span> <span class="n">StateName</span><span class="p">.</span><span class="n">EntityModified</span><span class="p">);</span> <span class="c1">// 1 for update</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@StateName"</span><span class="p">,</span> <span class="n">StateName</span><span class="p">.</span><span class="n">EntityModified</span><span class="p">.</span><span class="nf">ToString</span><span class="p">());</span> <span class="c1">// EntityAdded for update // Come from an enum</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@CreatedBy"</span><span class="p">,</span> <span class="s">"mahedee"</span><span class="p">);</span> <span class="c1">// It will come from session</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@CreatedDate"</span><span class="p">,</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">);</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@Discriminator"</span><span class="p">,</span> <span class="s">"CustomAuditEntry"</span><span class="p">);</span> <span class="c1">// CustomAuditEntry Model</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@AppplicationName"</span><span class="p">,</span> <span class="n">applicationName</span><span class="p">);</span> <span class="c1">// Name of the application // Get from config enum</span>

                <span class="kt">int</span> <span class="n">auditEntryId</span> <span class="p">=</span> <span class="n">Convert</span><span class="p">.</span><span class="nf">ToInt32</span><span class="p">(</span><span class="n">cmd</span><span class="p">.</span><span class="nf">ExecuteScalar</span><span class="p">());</span>

                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">Clear</span><span class="p">();</span>


                <span class="c1">// Insert into AuditEntryProperty</span>
                <span class="c1">// Values of each property</span>

                <span class="n">cmd</span><span class="p">.</span><span class="n">CommandText</span> <span class="p">=</span> <span class="s">@"INSERT INTO [AuditEntryProperty] (AuditEntryID, RelationName, PropertyName, OldValue, NewValue, Discriminator, AppplicationName) 
                                    VALUES (@AuditEntryID, @RelationName, @PropertyName, @OldValue, @NewValue, @DiscriminatorProperty, @AppplicationNameProperty);
                                    SELECT SCOPE_IDENTITY();"</span><span class="p">;</span>

                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">SqlParameter</span><span class="p">(</span><span class="s">"@AuditEntryID"</span><span class="p">,</span> <span class="n">SqlDbType</span><span class="p">.</span><span class="n">Int</span><span class="p">));</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">SqlParameter</span><span class="p">(</span><span class="s">"@RelationName"</span><span class="p">,</span> <span class="n">SqlDbType</span><span class="p">.</span><span class="n">NVarChar</span><span class="p">));</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">SqlParameter</span><span class="p">(</span><span class="s">"@PropertyName"</span><span class="p">,</span> <span class="n">SqlDbType</span><span class="p">.</span><span class="n">NVarChar</span><span class="p">));</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">SqlParameter</span><span class="p">(</span><span class="s">"@OldValue"</span><span class="p">,</span> <span class="n">SqlDbType</span><span class="p">.</span><span class="n">NVarChar</span><span class="p">));</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">SqlParameter</span><span class="p">(</span><span class="s">"@NewValue"</span><span class="p">,</span> <span class="n">SqlDbType</span><span class="p">.</span><span class="n">NVarChar</span><span class="p">));</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">SqlParameter</span><span class="p">(</span><span class="s">"@DiscriminatorProperty"</span><span class="p">,</span> <span class="n">SqlDbType</span><span class="p">.</span><span class="n">NVarChar</span><span class="p">));</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">SqlParameter</span><span class="p">(</span><span class="s">"@AppplicationNameProperty"</span><span class="p">,</span> <span class="n">SqlDbType</span><span class="p">.</span><span class="n">NVarChar</span><span class="p">));</span>


                <span class="k">foreach</span> <span class="p">(</span><span class="n">PropertyInfo</span> <span class="n">propertyInfo</span> <span class="k">in</span> <span class="n">propertyInfos</span><span class="p">)</span>
                <span class="p">{</span>


                    <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">[</span><span class="m">0</span><span class="p">].</span><span class="n">Value</span> <span class="p">=</span> <span class="n">auditEntryId</span><span class="p">;</span>
                    <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">[</span><span class="m">1</span><span class="p">].</span><span class="n">Value</span> <span class="p">=</span> <span class="n">DBNull</span><span class="p">.</span><span class="n">Value</span><span class="p">;</span>
                    <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">[</span><span class="m">2</span><span class="p">].</span><span class="n">Value</span> <span class="p">=</span> <span class="n">propertyInfo</span><span class="p">.</span><span class="n">Name</span><span class="p">;</span> <span class="c1">// property name</span>
                    <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">[</span><span class="m">3</span><span class="p">].</span><span class="n">Value</span> <span class="p">=</span> <span class="n">propertyInfo</span><span class="p">.</span><span class="nf">GetValue</span><span class="p">(</span><span class="n">oldEntity</span><span class="p">);</span> <span class="c1">// old value</span>
                    <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">[</span><span class="m">4</span><span class="p">].</span><span class="n">Value</span> <span class="p">=</span> <span class="n">propertyInfo</span><span class="p">.</span><span class="nf">GetValue</span><span class="p">(</span><span class="n">newEntity</span><span class="p">);</span> <span class="c1">// new value</span>
                    <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">[</span><span class="m">5</span><span class="p">].</span><span class="n">Value</span> <span class="p">=</span> <span class="s">"CustomAuditEntryProperty"</span><span class="p">;</span>
                    <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">[</span><span class="m">6</span><span class="p">].</span><span class="n">Value</span> <span class="p">=</span> <span class="n">applicationName</span><span class="p">;</span>
                    <span class="n">cmd</span><span class="p">.</span><span class="nf">ExecuteScalar</span><span class="p">();</span>
                <span class="p">}</span>

                <span class="c1">// Commit transaction</span>
                <span class="n">transaction</span><span class="p">.</span><span class="nf">Commit</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">transaction</span><span class="p">.</span><span class="nf">Rollback</span><span class="p">();</span>
                <span class="k">throw</span> <span class="n">ex</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">void</span> <span class="nf">Delete</span><span class="p">(</span><span class="n">T</span> <span class="n">oldEntity</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">oldEntity</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span><span class="p">;</span>
            <span class="p">}</span>


            <span class="c1">// Get the properties from type</span>
            <span class="n">Type</span> <span class="n">type</span> <span class="p">=</span> <span class="k">typeof</span><span class="p">(</span><span class="n">T</span><span class="p">);</span>
            <span class="n">PropertyInfo</span><span class="p">[]</span> <span class="n">propertyInfos</span> <span class="p">=</span> <span class="n">type</span><span class="p">.</span><span class="nf">GetProperties</span><span class="p">();</span>
            <span class="kt">string</span> <span class="n">applicationName</span> <span class="p">=</span> <span class="n">ApplicationEnum</span><span class="p">.</span><span class="n">AuditLogAPP</span><span class="p">.</span><span class="nf">GetApplication</span><span class="p">();</span>

            <span class="kt">var</span> <span class="n">cmd</span> <span class="p">=</span> <span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">CreateCommand</span><span class="p">()</span> <span class="k">as</span> <span class="n">SqlCommand</span><span class="p">;</span>
            <span class="n">SqlTransaction</span> <span class="n">transaction</span> <span class="p">=</span> <span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">BeginTransaction</span><span class="p">(</span><span class="s">""</span><span class="p">);</span>
            <span class="n">cmd</span><span class="p">.</span><span class="n">Transaction</span> <span class="p">=</span> <span class="n">transaction</span><span class="p">;</span>


            <span class="k">try</span>
            <span class="p">{</span>

                <span class="c1">// Insert into AuditEntry</span>


                <span class="n">cmd</span><span class="p">.</span><span class="n">CommandText</span> <span class="p">=</span> <span class="s">@"INSERT INTO [AuditEntry] (EntitySetName, EntityTypeName, State, StateName, CreatedBy, CreatedDate, Discriminator, AppplicationName) 
                                    OUTPUT inserted.AuditEntryID
                                    VALUES (@EntitySetName, @EntityTypeName, @State,@StateName, @CreatedBy, @CreatedDate, @Discriminator, @AppplicationName);
                                    SELECT SCOPE_IDENTITY();"</span><span class="p">;</span>

                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@EntitySetName"</span><span class="p">,</span> <span class="n">type</span><span class="p">.</span><span class="n">Name</span><span class="p">);</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@EntityTypeName"</span><span class="p">,</span> <span class="n">type</span><span class="p">.</span><span class="n">Name</span><span class="p">);</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@State"</span><span class="p">,</span> <span class="n">StateName</span><span class="p">.</span><span class="n">EntityDeleted</span><span class="p">);</span> <span class="c1">// 2 for delete</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@StateName"</span><span class="p">,</span> <span class="n">StateName</span><span class="p">.</span><span class="n">EntityDeleted</span><span class="p">.</span><span class="nf">ToString</span><span class="p">());</span> <span class="c1">// EntityAdded for insert</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@CreatedBy"</span><span class="p">,</span> <span class="s">"mahedee"</span><span class="p">);</span> <span class="c1">// It will come from session</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@CreatedDate"</span><span class="p">,</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">);</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@Discriminator"</span><span class="p">,</span> <span class="s">"CustomAuditEntry"</span><span class="p">);</span> <span class="c1">// CustomAuditEntry Model</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@AppplicationName"</span><span class="p">,</span> <span class="n">applicationName</span><span class="p">);</span> <span class="c1">// Name of the application</span>

                <span class="kt">int</span> <span class="n">auditEntryId</span> <span class="p">=</span> <span class="n">Convert</span><span class="p">.</span><span class="nf">ToInt32</span><span class="p">(</span><span class="n">cmd</span><span class="p">.</span><span class="nf">ExecuteScalar</span><span class="p">());</span>

                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">Clear</span><span class="p">();</span>


                <span class="c1">// Insert into AuditEntryProperty</span>
                <span class="c1">// Values of each property</span>

                <span class="n">cmd</span><span class="p">.</span><span class="n">CommandText</span> <span class="p">=</span> <span class="s">@"INSERT INTO [AuditEntryProperty] (AuditEntryID, RelationName, PropertyName, OldValue, NewValue, Discriminator, AppplicationName) 
                                    VALUES (@AuditEntryID, @RelationName, @PropertyName, @OldValue, @NewValue, @DiscriminatorProperty, @AppplicationNameProperty);
                                    SELECT SCOPE_IDENTITY();"</span><span class="p">;</span>

                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">SqlParameter</span><span class="p">(</span><span class="s">"@AuditEntryID"</span><span class="p">,</span> <span class="n">SqlDbType</span><span class="p">.</span><span class="n">Int</span><span class="p">));</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">SqlParameter</span><span class="p">(</span><span class="s">"@RelationName"</span><span class="p">,</span> <span class="n">SqlDbType</span><span class="p">.</span><span class="n">NVarChar</span><span class="p">));</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">SqlParameter</span><span class="p">(</span><span class="s">"@PropertyName"</span><span class="p">,</span> <span class="n">SqlDbType</span><span class="p">.</span><span class="n">NVarChar</span><span class="p">));</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">SqlParameter</span><span class="p">(</span><span class="s">"@OldValue"</span><span class="p">,</span> <span class="n">SqlDbType</span><span class="p">.</span><span class="n">NVarChar</span><span class="p">));</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">SqlParameter</span><span class="p">(</span><span class="s">"@NewValue"</span><span class="p">,</span> <span class="n">SqlDbType</span><span class="p">.</span><span class="n">NVarChar</span><span class="p">));</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">SqlParameter</span><span class="p">(</span><span class="s">"@DiscriminatorProperty"</span><span class="p">,</span> <span class="n">SqlDbType</span><span class="p">.</span><span class="n">NVarChar</span><span class="p">));</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">SqlParameter</span><span class="p">(</span><span class="s">"@AppplicationNameProperty"</span><span class="p">,</span> <span class="n">SqlDbType</span><span class="p">.</span><span class="n">NVarChar</span><span class="p">));</span>


                <span class="k">foreach</span> <span class="p">(</span><span class="n">PropertyInfo</span> <span class="n">propertyInfo</span> <span class="k">in</span> <span class="n">propertyInfos</span><span class="p">)</span>
                <span class="p">{</span>

                    <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">[</span><span class="s">"@AuditEntryID"</span><span class="p">].</span><span class="n">Value</span> <span class="p">=</span> <span class="n">auditEntryId</span><span class="p">;</span>
                    <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">[</span><span class="s">"@RelationName"</span><span class="p">].</span><span class="n">Value</span> <span class="p">=</span> <span class="n">DBNull</span><span class="p">.</span><span class="n">Value</span><span class="p">;</span>
                    <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">[</span><span class="s">"@PropertyName"</span><span class="p">].</span><span class="n">Value</span> <span class="p">=</span> <span class="n">propertyInfo</span><span class="p">.</span><span class="n">Name</span><span class="p">;</span> <span class="c1">// property name</span>
                    <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">[</span><span class="s">"@OldValue"</span><span class="p">].</span><span class="n">Value</span> <span class="p">=</span> <span class="n">propertyInfo</span><span class="p">.</span><span class="nf">GetValue</span><span class="p">(</span><span class="n">oldEntity</span><span class="p">);</span> <span class="c1">// property value</span>
                    <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">[</span><span class="s">"@NewValue"</span><span class="p">].</span><span class="n">Value</span> <span class="p">=</span> <span class="n">DBNull</span><span class="p">.</span><span class="n">Value</span><span class="p">;</span> <span class="c1">// Null for delete</span>
                    <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">[</span><span class="s">"@DiscriminatorProperty"</span><span class="p">].</span><span class="n">Value</span> <span class="p">=</span> <span class="s">"CustomAuditEntryProperty"</span><span class="p">;</span>
                    <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">[</span><span class="s">"@AppplicationNameProperty"</span><span class="p">].</span><span class="n">Value</span> <span class="p">=</span> <span class="n">applicationName</span><span class="p">;</span>
                    <span class="n">cmd</span><span class="p">.</span><span class="nf">ExecuteScalar</span><span class="p">();</span>
                <span class="p">}</span>

                <span class="c1">// Commit transaction</span>
                <span class="n">transaction</span><span class="p">.</span><span class="nf">Commit</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">transaction</span><span class="p">.</span><span class="nf">Rollback</span><span class="p">();</span>
                <span class="k">throw</span> <span class="n">ex</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">finally</span>
            <span class="p">{</span>
                <span class="c1">// close connection</span>
                <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="nf">Dispose</span><span class="p">();</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 8: Create two Interface IProductRepository and IReportingRepository in Repositories/Interfaces folder</strong></p>

<p><strong>IProductRepository.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">AuditLog.API.Models</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">AuditLog.API.Repositories.Interfaces</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">interface</span> <span class="nc">IProductRepository</span>
    <span class="p">{</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;&gt;</span> <span class="nf">GetProducts</span><span class="p">();</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="nf">GetProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="nf">AddProduct</span><span class="p">(</span><span class="n">Product</span> <span class="n">product</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="nf">UpdateProduct</span><span class="p">(</span><span class="n">Product</span> <span class="n">product</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="nf">DeleteProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>


</code></pre></div></div>

<p><strong>IReportingRepository.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">AuditLog.API.Repositories.Interfaces</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">interface</span> <span class="nc">IReportingRepository</span>
    <span class="p">{</span>
        <span class="c1">// Get all the changes for a particular entity response using Dynamic type</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="kt">dynamic</span><span class="p">&gt;&gt;</span> <span class="nf">GetChangeLogDynamic</span><span class="p">(</span><span class="kt">string</span> <span class="n">EntityName</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>


</code></pre></div></div>

<p><strong>Step 9: Create two Repository class name ProductRepository and ReportingRepository in Repositories/Implementations folder</strong></p>

<p><strong>ProductRepository.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">AuditLog.API.AuditTrail.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">AuditLog.API.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">AuditLog.API.Persistence</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">AuditLog.API.Repositories.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Data</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Data.SqlClient</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">AuditLog.API.Repositories.Implementations</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">ProductRepository</span> <span class="p">:</span> <span class="n">IProductRepository</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="n">DBConnector</span> <span class="n">_connector</span><span class="p">;</span>
        <span class="k">private</span> <span class="n">IAuditTrail</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="n">_auditTrail</span><span class="p">;</span>
        <span class="k">public</span> <span class="nf">ProductRepository</span><span class="p">(</span><span class="n">DBConnector</span> <span class="n">dBConnector</span><span class="p">,</span> <span class="n">IAuditTrail</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="n">auditTrail</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_connector</span> <span class="p">=</span> <span class="n">dBConnector</span><span class="p">;</span>
            <span class="n">_auditTrail</span> <span class="p">=</span> <span class="n">auditTrail</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="nf">AddProduct</span><span class="p">(</span><span class="n">Product</span> <span class="n">model</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">try</span>
            <span class="p">{</span>   
                <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="n">State</span> <span class="p">==</span> <span class="n">ConnectionState</span><span class="p">.</span><span class="n">Closed</span><span class="p">)</span>
                    <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">Open</span><span class="p">();</span>
                <span class="kt">var</span> <span class="n">cmd</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">CreateCommand</span><span class="p">()</span> <span class="k">as</span> <span class="n">SqlCommand</span><span class="p">;</span>
                <span class="n">SqlTransaction</span> <span class="n">transaction</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">BeginTransaction</span><span class="p">(</span><span class="s">""</span><span class="p">);</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Transaction</span> <span class="p">=</span> <span class="n">transaction</span><span class="p">;</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">CommandText</span> <span class="p">=</span> <span class="s">@"INSERT INTO Products (Name, Price, Quantity) 
                OUTPUT inserted.Id                
                VALUES (@Name, @Price, @Quantity); SELECT SCOPE_IDENTITY();"</span><span class="p">;</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@Name"</span><span class="p">,</span> <span class="n">model</span><span class="p">.</span><span class="n">Name</span><span class="p">);</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@Price"</span><span class="p">,</span> <span class="n">model</span><span class="p">.</span><span class="n">Price</span><span class="p">);</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@Quantity"</span><span class="p">,</span> <span class="n">model</span><span class="p">.</span><span class="n">Quantity</span><span class="p">);</span>

                <span class="c1">// cmd.ExecuteScalar() returns the first column of the first row in the result</span>
                <span class="c1">// set returned by the query. Additional columns or rows are ignored.</span>
                <span class="kt">int</span> <span class="n">insertedId</span> <span class="p">=</span> <span class="n">Convert</span><span class="p">.</span><span class="nf">ToInt32</span><span class="p">(</span><span class="n">cmd</span><span class="p">.</span><span class="nf">ExecuteScalar</span><span class="p">());</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">insertedId</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="n">transaction</span><span class="p">.</span><span class="nf">Commit</span><span class="p">();</span>
                <span class="p">}</span>

                <span class="n">model</span><span class="p">.</span><span class="n">Id</span> <span class="p">=</span> <span class="n">insertedId</span><span class="p">;</span>

                <span class="c1">// Add audit trail</span>
                <span class="n">_auditTrail</span><span class="p">.</span><span class="nf">Insert</span><span class="p">(</span><span class="n">model</span><span class="p">);</span>
                <span class="k">return</span> <span class="n">Task</span><span class="p">.</span><span class="nf">FromResult</span><span class="p">(</span><span class="n">model</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="n">ex</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">finally</span>
            <span class="p">{</span>
                <span class="c1">// close connection</span>
                <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="nf">Dispose</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="k">null</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="nf">GetProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">product</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Product</span><span class="p">();</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="n">State</span> <span class="p">==</span> <span class="n">ConnectionState</span><span class="p">.</span><span class="n">Closed</span><span class="p">)</span>
                    <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">Open</span><span class="p">();</span>
                <span class="kt">var</span> <span class="n">cmd</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">CreateCommand</span><span class="p">()</span> <span class="k">as</span> <span class="n">SqlCommand</span><span class="p">;</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">CommandText</span> <span class="p">=</span> <span class="s">@"SELECT Id, Name, Price, Quantity FROM Products WHERE Id = @Id"</span><span class="p">;</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@Id"</span><span class="p">,</span> <span class="n">id</span><span class="p">);</span>
                <span class="kt">var</span> <span class="n">reader</span> <span class="p">=</span> <span class="n">cmd</span><span class="p">.</span><span class="nf">ExecuteReader</span><span class="p">();</span>
                <span class="k">while</span> <span class="p">(</span><span class="n">reader</span><span class="p">.</span><span class="nf">Read</span><span class="p">())</span>
                <span class="p">{</span>
                    <span class="n">product</span><span class="p">.</span><span class="n">Id</span> <span class="p">=</span> <span class="n">Convert</span><span class="p">.</span><span class="nf">ToInt32</span><span class="p">(</span><span class="n">reader</span><span class="p">[</span><span class="s">"Id"</span><span class="p">]);</span>
                    <span class="n">product</span><span class="p">.</span><span class="n">Name</span> <span class="p">=</span> <span class="n">reader</span><span class="p">[</span><span class="s">"Name"</span><span class="p">]</span> <span class="p">!=</span> <span class="n">DBNull</span><span class="p">.</span><span class="n">Value</span> <span class="p">?</span> <span class="n">reader</span><span class="p">[</span><span class="s">"Name"</span><span class="p">].</span><span class="nf">ToString</span><span class="p">()</span> <span class="p">:</span> <span class="k">null</span><span class="p">;</span>
                    <span class="n">product</span><span class="p">.</span><span class="n">Price</span> <span class="p">=</span> <span class="n">Convert</span><span class="p">.</span><span class="nf">ToDecimal</span><span class="p">(</span><span class="n">reader</span><span class="p">[</span><span class="s">"Price"</span><span class="p">]);</span>
                    <span class="n">product</span><span class="p">.</span><span class="n">Quantity</span> <span class="p">=</span> <span class="n">Convert</span><span class="p">.</span><span class="nf">ToInt32</span><span class="p">(</span><span class="n">reader</span><span class="p">[</span><span class="s">"Quantity"</span><span class="p">]);</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="n">ex</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">finally</span>
            <span class="p">{</span>
                <span class="c1">// close connection</span>
                <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="nf">Dispose</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="c1">// Task.FromResult is a helper method that creates a Task that's completed successfully</span>
            <span class="c1">// with the specified result.</span>
            <span class="k">return</span> <span class="n">Task</span><span class="p">.</span><span class="nf">FromResult</span><span class="p">(</span><span class="n">product</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;&gt;</span> <span class="nf">GetProducts</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">products</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;();</span>

            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="n">State</span> <span class="p">==</span> <span class="n">ConnectionState</span><span class="p">.</span><span class="n">Closed</span><span class="p">)</span>
                    <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">Open</span><span class="p">();</span>
                <span class="kt">var</span> <span class="n">cmd</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">CreateCommand</span><span class="p">()</span> <span class="k">as</span> <span class="n">SqlCommand</span><span class="p">;</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">CommandText</span> <span class="p">=</span> <span class="s">@"SELECT Id, Name, Price, Quantity FROM Products"</span><span class="p">;</span>
                <span class="kt">var</span> <span class="n">reader</span> <span class="p">=</span> <span class="n">cmd</span><span class="p">.</span><span class="nf">ExecuteReader</span><span class="p">();</span>
                <span class="k">while</span> <span class="p">(</span><span class="n">reader</span><span class="p">.</span><span class="nf">Read</span><span class="p">())</span>
                <span class="p">{</span>
                    <span class="kt">var</span> <span class="n">product</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Product</span><span class="p">()</span>
                    <span class="p">{</span>
                        <span class="n">Id</span> <span class="p">=</span> <span class="n">Convert</span><span class="p">.</span><span class="nf">ToInt32</span><span class="p">(</span><span class="n">reader</span><span class="p">[</span><span class="s">"Id"</span><span class="p">]),</span>
                        <span class="n">Name</span> <span class="p">=</span> <span class="n">reader</span><span class="p">[</span><span class="s">"Name"</span><span class="p">]</span> <span class="p">!=</span> <span class="n">DBNull</span><span class="p">.</span><span class="n">Value</span> <span class="p">?</span> <span class="n">reader</span><span class="p">[</span><span class="s">"Name"</span><span class="p">].</span><span class="nf">ToString</span><span class="p">()</span> <span class="p">:</span> <span class="k">null</span><span class="p">,</span>
                        <span class="n">Price</span> <span class="p">=</span> <span class="n">Convert</span><span class="p">.</span><span class="nf">ToDecimal</span><span class="p">(</span><span class="n">reader</span><span class="p">[</span><span class="s">"Price"</span><span class="p">]),</span>
                        <span class="n">Quantity</span> <span class="p">=</span> <span class="n">Convert</span><span class="p">.</span><span class="nf">ToInt32</span><span class="p">(</span><span class="n">reader</span><span class="p">[</span><span class="s">"Quantity"</span><span class="p">])</span>
                    <span class="p">};</span>
                    <span class="n">products</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">product</span><span class="p">);</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="n">ex</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">finally</span>
            <span class="p">{</span>
                <span class="c1">// close connection</span>
                <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="nf">Dispose</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="n">products</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="nf">UpdateProduct</span><span class="p">(</span><span class="n">Product</span> <span class="n">product</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Product</span> <span class="n">oldEntity</span> <span class="p">=</span> <span class="nf">GetProduct</span><span class="p">(</span><span class="n">product</span><span class="p">.</span><span class="n">Id</span><span class="p">).</span><span class="n">Result</span><span class="p">;</span>

            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="n">State</span> <span class="p">==</span> <span class="n">ConnectionState</span><span class="p">.</span><span class="n">Closed</span><span class="p">)</span>
                    <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">Open</span><span class="p">();</span>
                <span class="kt">var</span> <span class="n">cmd</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">CreateCommand</span><span class="p">()</span> <span class="k">as</span> <span class="n">SqlCommand</span><span class="p">;</span>
                <span class="n">SqlTransaction</span> <span class="n">transaction</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">BeginTransaction</span><span class="p">(</span><span class="s">""</span><span class="p">);</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Transaction</span> <span class="p">=</span> <span class="n">transaction</span><span class="p">;</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">CommandText</span> <span class="p">=</span> <span class="s">@"UPDATE Products SET Name = @Name, Price = @Price, Quantity = @Quantity WHERE Id = @Id"</span><span class="p">;</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@Id"</span><span class="p">,</span> <span class="n">product</span><span class="p">.</span><span class="n">Id</span><span class="p">);</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@Name"</span><span class="p">,</span> <span class="n">product</span><span class="p">.</span><span class="n">Name</span><span class="p">);</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@Price"</span><span class="p">,</span> <span class="n">product</span><span class="p">.</span><span class="n">Price</span><span class="p">);</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@Quantity"</span><span class="p">,</span> <span class="n">product</span><span class="p">.</span><span class="n">Quantity</span><span class="p">);</span>

                <span class="kt">int</span> <span class="n">effectedRow</span> <span class="p">=</span> <span class="n">cmd</span><span class="p">.</span><span class="nf">ExecuteNonQuery</span><span class="p">();</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">effectedRow</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="n">transaction</span><span class="p">.</span><span class="nf">Commit</span><span class="p">();</span>
                <span class="p">}</span>

                <span class="c1">// Update audit trail</span>
                <span class="n">_auditTrail</span><span class="p">.</span><span class="nf">Update</span><span class="p">(</span><span class="n">oldEntity</span><span class="p">,</span> <span class="n">product</span><span class="p">);</span>
                <span class="k">return</span> <span class="n">Task</span><span class="p">.</span><span class="nf">FromResult</span><span class="p">(</span><span class="n">product</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="n">ex</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">finally</span>
            <span class="p">{</span>
                <span class="c1">// close connection</span>
                <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="nf">Dispose</span><span class="p">();</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="nf">DeleteProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Product</span> <span class="n">oldEntity</span> <span class="p">=</span> <span class="nf">GetProduct</span><span class="p">(</span><span class="n">id</span><span class="p">).</span><span class="n">Result</span><span class="p">;</span>

            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="n">State</span> <span class="p">==</span> <span class="n">ConnectionState</span><span class="p">.</span><span class="n">Closed</span><span class="p">)</span>
                    <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">Open</span><span class="p">();</span>
                <span class="kt">var</span> <span class="n">cmd</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">CreateCommand</span><span class="p">()</span> <span class="k">as</span> <span class="n">SqlCommand</span><span class="p">;</span>
                <span class="n">SqlTransaction</span> <span class="n">transaction</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">BeginTransaction</span><span class="p">(</span><span class="s">""</span><span class="p">);</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Transaction</span> <span class="p">=</span> <span class="n">transaction</span><span class="p">;</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">CommandText</span> <span class="p">=</span> <span class="s">@"DELETE FROM Products WHERE Id = @Id"</span><span class="p">;</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@Id"</span><span class="p">,</span> <span class="n">id</span><span class="p">);</span>

                <span class="kt">int</span> <span class="n">effectedRow</span> <span class="p">=</span> <span class="n">cmd</span><span class="p">.</span><span class="nf">ExecuteNonQuery</span><span class="p">();</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">effectedRow</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="n">transaction</span><span class="p">.</span><span class="nf">Commit</span><span class="p">();</span>
                <span class="p">}</span>

                <span class="c1">// Add audit trail</span>
                <span class="n">_auditTrail</span><span class="p">.</span><span class="nf">Delete</span><span class="p">(</span><span class="n">oldEntity</span><span class="p">);</span>
                <span class="k">return</span> <span class="n">Task</span><span class="p">.</span><span class="nf">FromResult</span><span class="p">(</span><span class="n">oldEntity</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="n">ex</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">finally</span>
            <span class="p">{</span>
                <span class="c1">// close connection</span>
                <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="nf">Dispose</span><span class="p">();</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>ReportingRepository.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">AuditLog.API.AuditTrail.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">AuditLog.API.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">AuditLog.API.Persistence</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">AuditLog.API.Repositories.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Data</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Data.SqlClient</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Dynamic</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">AuditLog.API.Repositories.Implementations</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">ReportingRepository</span> <span class="p">:</span> <span class="n">IReportingRepository</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="n">DBConnector</span> <span class="n">_connector</span><span class="p">;</span>
        <span class="k">public</span> <span class="nf">ReportingRepository</span><span class="p">(</span><span class="n">DBConnector</span> <span class="n">dBConnector</span><span class="p">)</span> 
        <span class="p">{</span>
            <span class="n">_connector</span> <span class="p">=</span> <span class="n">dBConnector</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="kt">dynamic</span><span class="p">&gt;&gt;</span> <span class="nf">GetChangeLogDynamic</span><span class="p">(</span><span class="kt">string</span> <span class="n">EntityName</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="n">State</span> <span class="p">==</span> <span class="n">ConnectionState</span><span class="p">.</span><span class="n">Closed</span><span class="p">)</span>
                    <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">Open</span><span class="p">();</span>
                <span class="kt">var</span> <span class="n">cmd</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">CreateCommand</span><span class="p">()</span> <span class="k">as</span> <span class="n">SqlCommand</span><span class="p">;</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">CommandText</span> <span class="p">=</span> <span class="s">@"  SELECT ae.AuditEntryID, ae.EntityTypeName, ae.StateName, ae.CreatedDate, aep.AuditEntryPropertyID, aep.PropertyName, aep.OldValue, aep.NewValue, aep.AppplicationName
                                  FROM AuditEntry ae INNER JOIN AuditEntryProperty aep
                                  ON ae.AuditEntryID = aep.AuditEntryID
                                  WHERE ae.EntityTypeName = @EntityName
                                  ORDER by ae.CreatedDate"</span><span class="p">;</span>
                <span class="n">cmd</span><span class="p">.</span><span class="n">Parameters</span><span class="p">.</span><span class="nf">AddWithValue</span><span class="p">(</span><span class="s">"@EntityName"</span><span class="p">,</span> <span class="n">EntityName</span><span class="p">);</span>
                <span class="kt">var</span> <span class="n">reader</span> <span class="p">=</span> <span class="n">cmd</span><span class="p">.</span><span class="nf">ExecuteReader</span><span class="p">();</span>
                <span class="kt">var</span> <span class="n">dt</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">DataTable</span><span class="p">();</span>
                <span class="n">dt</span><span class="p">.</span><span class="nf">Load</span><span class="p">(</span><span class="n">reader</span><span class="p">);</span>
                <span class="kt">var</span> <span class="n">list</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">dynamic</span><span class="p">&gt;();</span>
                <span class="k">foreach</span> <span class="p">(</span><span class="n">DataRow</span> <span class="n">row</span> <span class="k">in</span> <span class="n">dt</span><span class="p">.</span><span class="n">Rows</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="kt">var</span> <span class="n">expandoObject</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">ExpandoObject</span><span class="p">()</span> <span class="k">as</span> <span class="n">IDictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">object</span><span class="p">&gt;;</span>
                    <span class="k">foreach</span> <span class="p">(</span><span class="n">DataColumn</span> <span class="n">col</span> <span class="k">in</span> <span class="n">dt</span><span class="p">.</span><span class="n">Columns</span><span class="p">)</span>
                    <span class="p">{</span>
                        <span class="n">expandoObject</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">col</span><span class="p">.</span><span class="n">ColumnName</span><span class="p">,</span> <span class="n">row</span><span class="p">[</span><span class="n">col</span><span class="p">]);</span>
                    <span class="p">}</span>
                    <span class="n">list</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">expandoObject</span><span class="p">);</span>
                <span class="p">}</span>
                <span class="k">return</span> <span class="n">Task</span><span class="p">.</span><span class="nf">FromResult</span><span class="p">(</span><span class="n">list</span><span class="p">.</span><span class="nf">AsEnumerable</span><span class="p">());</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="n">ex</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">finally</span>
            <span class="p">{</span>
                <span class="c1">// close connection</span>
                <span class="k">this</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="nf">Dispose</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="k">null</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 10: Create two interfaces name IProductService and IReportingService in Services/Interfaces folder</strong></p>

<p><strong>IProductService.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">AuditLog.API.Models</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">AuditLog.API.Services.Interfaces</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">interface</span> <span class="nc">IProductService</span>
    <span class="p">{</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;&gt;</span> <span class="nf">GetProducts</span><span class="p">();</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="nf">GetProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="nf">AddProduct</span><span class="p">(</span><span class="n">Product</span> <span class="n">product</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="nf">UpdateProduct</span><span class="p">(</span><span class="n">Product</span> <span class="n">product</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="nf">DeleteProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>IReportingService.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">namespace</span> <span class="nn">AuditLog.API.Services.Interfaces</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">interface</span> <span class="nc">IReportingService</span>
    <span class="p">{</span>
        <span class="c1">// Get all the changes for a particular entity response using Dynamic type</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="kt">dynamic</span><span class="p">&gt;&gt;</span> <span class="nf">GetChangeLogDynamic</span><span class="p">(</span><span class="kt">string</span> <span class="n">EntityName</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 11: Create two service classes name ProductService and ReportingService in Services/Implementation folder</strong></p>

<p><strong>ProductService.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">AuditLog.API.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">AuditLog.API.Repositories.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">AuditLog.API.Services.Interfaces</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">AuditLog.API.Services.Implementations</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">ProductService</span> <span class="p">:</span> <span class="n">IProductService</span>
    <span class="p">{</span>
        <span class="n">IProductRepository</span> <span class="n">_productRepository</span><span class="p">;</span>
        <span class="k">public</span> <span class="nf">ProductService</span><span class="p">(</span><span class="n">IProductRepository</span> <span class="n">productRepository</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_productRepository</span> <span class="p">=</span> <span class="n">productRepository</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="nf">AddProduct</span><span class="p">(</span><span class="n">Product</span> <span class="n">product</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">_productRepository</span><span class="p">.</span><span class="nf">AddProduct</span><span class="p">(</span><span class="n">product</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="nf">GetProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">_productRepository</span><span class="p">.</span><span class="nf">GetProduct</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;&gt;</span> <span class="nf">GetProducts</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">_productRepository</span><span class="p">.</span><span class="nf">GetProducts</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="nf">UpdateProduct</span><span class="p">(</span><span class="n">Product</span> <span class="n">product</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">_productRepository</span><span class="p">.</span><span class="nf">UpdateProduct</span><span class="p">(</span><span class="n">product</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="nf">DeleteProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">_productRepository</span><span class="p">.</span><span class="nf">DeleteProduct</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>ReportingService.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">AuditLog.API.Repositories.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">AuditLog.API.Services.Interfaces</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">AuditLog.API.Services.Implementations</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">ReportingService</span> <span class="p">:</span> <span class="n">IReportingService</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="n">IReportingRepository</span> <span class="n">_reportingRepository</span><span class="p">;</span>
        <span class="k">public</span> <span class="nf">ReportingService</span><span class="p">(</span><span class="n">IReportingRepository</span> <span class="n">reportingRepository</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_reportingRepository</span> <span class="p">=</span> <span class="n">reportingRepository</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="kt">dynamic</span><span class="p">&gt;&gt;</span> <span class="nf">GetChangeLogDynamic</span><span class="p">(</span><span class="kt">string</span> <span class="n">EntityName</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">_reportingRepository</span><span class="p">.</span><span class="nf">GetChangeLogDynamic</span><span class="p">(</span><span class="n">EntityName</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 12: Configure Program class as follows.</strong></p>

<p><strong>Program.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">AuditLog.API.AuditTrail.Implementations</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">AuditLog.API.AuditTrail.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">AuditLog.API.Persistence</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">AuditLog.API.Repositories.Implementations</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">AuditLog.API.Repositories.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">AuditLog.API.Services.Implementations</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">AuditLog.API.Services.Interfaces</span><span class="p">;</span>


<span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="n">WebApplication</span><span class="p">.</span><span class="nf">CreateBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>

<span class="c1">// Add services to the container.</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">();</span>
<span class="c1">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddEndpointsApiExplorer</span><span class="p">();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddSwaggerGen</span><span class="p">();</span>


<span class="kt">string</span> <span class="n">connectionString</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="n">Configuration</span><span class="p">.</span><span class="nf">GetConnectionString</span><span class="p">(</span><span class="s">"DefaultConnection"</span><span class="p">);</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddTransient</span><span class="p">(</span><span class="n">_</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="nf">DBConnector</span><span class="p">(</span><span class="n">connectionString</span><span class="p">));</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddScoped</span><span class="p">&lt;</span><span class="n">IProductRepository</span><span class="p">,</span> <span class="n">ProductRepository</span><span class="p">&gt;();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddScoped</span><span class="p">&lt;</span><span class="n">IProductService</span><span class="p">,</span> <span class="n">ProductService</span><span class="p">&gt;();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddScoped</span><span class="p">&lt;</span><span class="n">IReportingRepository</span><span class="p">,</span> <span class="n">ReportingRepository</span><span class="p">&gt;();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddScoped</span><span class="p">&lt;</span><span class="n">IReportingService</span><span class="p">,</span> <span class="n">ReportingService</span><span class="p">&gt;();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddScoped</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">IAuditTrail</span><span class="p">&lt;&gt;),</span> <span class="k">typeof</span><span class="p">(</span><span class="n">AuditTrail</span><span class="p">&lt;&gt;));</span>

<span class="kt">var</span> <span class="n">app</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

<span class="c1">// Configure the HTTP request pipeline.</span>
<span class="k">if</span> <span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">Environment</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
<span class="p">{</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwagger</span><span class="p">();</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwaggerUI</span><span class="p">();</span>
<span class="p">}</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseHttpsRedirection</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseAuthorization</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">MapControllers</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>



</code></pre></div></div>

<p><strong>Step 13: Create two Controller class ProductsController and ReportingController in Controllers folder.</strong></p>

<p><strong>ProductsController.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">AuditLog.API.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">AuditLog.API.Persistence</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">AuditLog.API.Services.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">AuditLog.API.Controllers</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
    <span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">ProductsController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="n">DBConnector</span> <span class="n">_connector</span><span class="p">;</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IProductService</span> <span class="n">_productService</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">ProductsController</span><span class="p">(</span> <span class="n">DBConnector</span> <span class="n">connector</span><span class="p">,</span> <span class="n">IProductService</span> <span class="n">productService</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_connector</span> <span class="p">=</span> <span class="n">connector</span><span class="p">;</span>
            <span class="n">_productService</span> <span class="p">=</span> <span class="n">productService</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/Products</span>
        <span class="p">[</span><span class="n">HttpGet</span><span class="p">]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;&gt;&gt;</span> <span class="nf">GetProducts</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">products</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_productService</span><span class="p">.</span><span class="nf">GetProducts</span><span class="p">();</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">products</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">products</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/Products/5</span>
        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;&gt;</span> <span class="nf">GetProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">product</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_productService</span><span class="p">.</span><span class="nf">GetProduct</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">product</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">product</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">// PUT: api/Products/5</span>
        <span class="p">[</span><span class="nf">HttpPut</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">PutProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="n">Product</span> <span class="n">product</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">id</span> <span class="p">!=</span> <span class="n">product</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_productService</span><span class="p">.</span><span class="nf">UpdateProduct</span><span class="p">(</span><span class="n">product</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">result</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">// POST: api/Products</span>
        <span class="p">[</span><span class="n">HttpPost</span><span class="p">]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;&gt;</span> <span class="nf">PostProduct</span><span class="p">(</span><span class="n">Product</span> <span class="n">product</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_productService</span><span class="p">.</span><span class="nf">AddProduct</span><span class="p">(</span><span class="n">product</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">result</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">// DELETE: api/Products/5</span>
        <span class="p">[</span><span class="nf">HttpDelete</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">DeleteProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_productService</span><span class="p">.</span><span class="nf">DeleteProduct</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">result</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>


</code></pre></div></div>

<p><strong>ReportingController.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">AuditLog.API.Services.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Http</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">AuditLog.API.Controllers</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
    <span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">ReportingController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="n">IReportingService</span> <span class="n">_reportingService</span><span class="p">;</span>
        <span class="k">public</span> <span class="nf">ReportingController</span><span class="p">(</span><span class="n">IReportingService</span> <span class="n">reportingService</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_reportingService</span> <span class="p">=</span> <span class="n">reportingService</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"GetChangeLogDynamic/{EntityName}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">GetChangeLogDynamic</span><span class="p">(</span><span class="kt">string</span> <span class="n">EntityName</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_reportingService</span><span class="p">.</span><span class="nf">GetChangeLogDynamic</span><span class="p">(</span><span class="n">EntityName</span><span class="p">);</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 14: Run the application and check the swagger.</strong></p>
<ul>
  <li>Now run application create, update and delete Customer entity using swagger</li>
  <li>You will see audit trail logs in AuditEntry and AuditEntryProperty table.</li>
  <li>You can also view a sample report using Reporting controller. In GetChangeLog end point use “Product” as entity name.</li>
</ul>

<p><img src="/assets/images/posts/2024/AuditEntry.png" alt="" />
<img src="/assets/images/posts/2024/AuditEntryProperty.png" alt="" />
<strong><a href="https://github.com/mahedee/code-sample02/tree/master/AuditLogRawSQL">Source code</a></strong></p>]]></content><author><name>Mahedee Hasan</name></author><category term="ASP.NET" /><category term="ASP.NET Core" /><category term="C#" /><category term="Web API" /><category term="csharp" /><category term="aspnet" /><category term="aspnetcore" /><category term="webapi" /><summary type="html"><![CDATA[The Audit Trail stands out as a critical feature in enterprise applications, primarily serving essential roles in security and fraud transaction detection. This article delves into a comprehensive guide on implementing Audit Trail functionality in an ASP.NET Core application using SQL Server with ADO.NET. Join me as I demonstrate the step-by-step process to bolster security measures and enhance transaction accountability within your application.]]></summary></entry><entry><title type="html">Optimistic Concurrency Management in ASP.NET Core Application Using Hypermedia</title><link href="https://mahedee.net//optimistic_concurrency_management_aspnet_core_using_hyper_media/" rel="alternate" type="text/html" title="Optimistic Concurrency Management in ASP.NET Core Application Using Hypermedia" /><published>2023-12-17T00:00:00-05:00</published><updated>2023-12-17T00:00:00-05:00</updated><id>https://mahedee.net//optimistic_concurrency_management_aspnet_core_using_hyper_media</id><content type="html" xml:base="https://mahedee.net//optimistic_concurrency_management_aspnet_core_using_hyper_media/"><![CDATA[<p>In the world of REST API, Hypermedia means adding links and important details directly into the API response. This helps clients use that information for more actions with the API.</p>

<p>In a previous article <a href="https://mahedee.net/concurrency_management_in_aspnet_core_applications_with_entity_framework/">here</a>, I discussed various ways to deal with concurrency. Optimistic concurrency is a common method for handling such situations. In this article, I’ll show a simple way to manage concurrency in ASP.NET using hypermedia.</p>

<p><strong>Tools and Technology Used</strong></p>

<ul>
  <li>ASP.net core Web API</li>
  <li>Visual C#</li>
  <li>Entity Framework</li>
  <li>SQL Server</li>
</ul>

<p><strong>Step 1: Create a asp.net core web api project name ConcurrencyHandling.API</strong></p>

<p><strong>Step 2: Install the following nuget packages in the project.</strong></p>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">Microsoft.EntityFrameworkCore</span>
<span class="nf">Microsoft.EntityFrameworkCore.Design</span>
<span class="nf">Microsoft.EntityFrameworkCore.SqlServer</span>
<span class="nf">Microsoft.EntityFrameworkCore.Tools</span>

</code></pre></div></div>

<p><strong>Step 3: Create a Model class name Employee in Models folder</strong></p>

<ul>
  <li>Employee class to store Employee Information</li>
  <li>In the following class RowVersion property is used to track the updated version of the record.</li>
</ul>

<p><strong>Employee.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">ConcurrencyHandling.API.Models</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Employee</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">EmployeeID</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">decimal</span> <span class="n">Salary</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="n">Guid</span> <span class="n">RowVersion</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 4: Create a Context class name ApplicationDbContext in Data folder.</strong></p>

<p><strong>ApplicationDbContext.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">ConcurrencyHandling.API.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">ConcurrencyHandling.API.Data</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">ApplicationDbContext</span> <span class="p">:</span> <span class="n">DbContext</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">ApplicationDbContext</span><span class="p">(</span><span class="n">DbContextOptions</span><span class="p">&lt;</span><span class="n">ApplicationDbContext</span><span class="p">&gt;</span> <span class="n">options</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
        <span class="p">{</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="n">DbSet</span><span class="p">&lt;</span><span class="n">Employee</span><span class="p">&gt;?</span> <span class="n">Employee</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 5: Add connection string in appsettings.json file</strong></p>

<p><strong>appsettings.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"Logging"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"LogLevel"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Default"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Information"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Microsoft.AspNetCore"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Warning"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
</span><span class="nl">"ConnectionStrings"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"DefaultConnection"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Server=localhost;Database=ConcurrencyHyperMediaDB;User Id=sa;Password=MyPassword;TrustServerCertificate=True;"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"AllowedHosts"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*"</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<p><strong>Step 6: Configure Program class as follows.</strong></p>

<p><strong>Program.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">ConcurrencyHandling.API.Data</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="n">WebApplication</span><span class="p">.</span><span class="nf">CreateBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>

<span class="c1">// Add services to the container.</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">();</span>
<span class="c1">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddEndpointsApiExplorer</span><span class="p">();</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddSwaggerGen</span><span class="p">();</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddDbContext</span><span class="p">&lt;</span><span class="n">ApplicationDbContext</span><span class="p">&gt;(</span><span class="n">options</span> <span class="p">=&gt;</span>
    <span class="n">options</span><span class="p">.</span><span class="nf">UseSqlServer</span><span class="p">(</span><span class="n">builder</span><span class="p">.</span><span class="n">Configuration</span><span class="p">.</span><span class="nf">GetConnectionString</span><span class="p">(</span><span class="s">"DefaultConnection"</span><span class="p">)));</span>

<span class="kt">var</span> <span class="n">app</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

<span class="c1">// Configure the HTTP request pipeline.</span>
<span class="k">if</span> <span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">Environment</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
<span class="p">{</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwagger</span><span class="p">();</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwaggerUI</span><span class="p">();</span>
<span class="p">}</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseHttpsRedirection</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseAuthorization</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">MapControllers</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>


</code></pre></div></div>

<p><strong>Step 7: Create a Controller class EmployeesController in Controllers folder.</strong></p>

<p><strong>EmployeesController.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">ConcurrencyHandling.API.Data</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">ConcurrencyHandling.API.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">ConcurrencyHandling.API.Controllers</span>
<span class="p">{</span>

    <span class="c1">// Concurrency check using hypermedia</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
    <span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">EmployeesController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">ApplicationDbContext</span> <span class="n">_context</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">EmployeesController</span><span class="p">(</span><span class="n">ApplicationDbContext</span> <span class="n">context</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_context</span> <span class="p">=</span> <span class="n">context</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/Employees</span>
        <span class="p">[</span><span class="n">HttpGet</span><span class="p">]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Employee</span><span class="p">&gt;&gt;&gt;</span> <span class="nf">GetEmployee</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Employee</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Employee</span><span class="p">.</span><span class="nf">ToListAsync</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/Employees/5</span>
        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">Employee</span><span class="p">&gt;&gt;</span> <span class="nf">GetEmployee</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Employee</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="kt">var</span> <span class="n">employee</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Employee</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">employee</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="k">new</span>
            <span class="p">{</span>
                <span class="n">id</span> <span class="p">=</span> <span class="n">employee</span><span class="p">.</span><span class="n">EmployeeID</span><span class="p">,</span>
                <span class="n">name</span> <span class="p">=</span> <span class="n">employee</span><span class="p">.</span><span class="n">Name</span><span class="p">,</span>
                <span class="n">salary</span> <span class="p">=</span> <span class="n">employee</span><span class="p">.</span><span class="n">Salary</span><span class="p">,</span>
                <span class="n">rowVersion</span> <span class="p">=</span> <span class="n">employee</span><span class="p">.</span><span class="n">RowVersion</span><span class="p">,</span>
                <span class="n">links</span> <span class="p">=</span> <span class="k">new</span><span class="p">[]</span>
                <span class="p">{</span>
                    <span class="k">new</span> <span class="p">{</span> <span class="n">rel</span> <span class="p">=</span> <span class="s">"edit"</span><span class="p">,</span> <span class="n">href</span> <span class="p">=</span> <span class="s">$"/employees/</span><span class="p">{</span><span class="n">id</span><span class="p">}</span><span class="s">/</span><span class="p">{</span><span class="n">employee</span><span class="p">.</span><span class="n">RowVersion</span><span class="p">}</span><span class="s">"</span><span class="p">,</span> <span class="n">method</span> <span class="p">=</span><span class="s">"PUT"</span> <span class="p">},</span>
                    <span class="k">new</span> <span class="p">{</span> <span class="n">rel</span> <span class="p">=</span> <span class="s">"delete"</span><span class="p">,</span> <span class="n">href</span> <span class="p">=</span> <span class="s">$"/employees/</span><span class="p">{</span><span class="n">id</span><span class="p">}</span><span class="s">/</span><span class="p">{</span><span class="n">employee</span><span class="p">.</span><span class="n">RowVersion</span><span class="p">}</span><span class="s">"</span><span class="p">,</span> <span class="n">method</span> <span class="p">=</span><span class="s">"DELETE"</span> <span class="p">}</span>
                <span class="p">}</span>
            <span class="p">});</span>

            <span class="c1">//employee;</span>
        <span class="p">}</span>

        <span class="c1">// PUT: api/Employees/5</span>
        <span class="c1">// To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754</span>
        <span class="p">[</span><span class="nf">HttpPut</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">PutEmployee</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="kt">string</span> <span class="n">version</span><span class="p">,</span> <span class="n">Employee</span> <span class="n">employee</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">id</span> <span class="p">!=</span> <span class="n">employee</span><span class="p">.</span><span class="n">EmployeeID</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="kt">var</span> <span class="n">existingEmployee</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Employee</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">existingEmployee</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="kt">var</span> <span class="n">currentRowVersion</span> <span class="p">=</span> <span class="n">existingEmployee</span><span class="p">.</span><span class="n">RowVersion</span><span class="p">.</span><span class="nf">ToString</span><span class="p">();</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">currentRowVersion</span> <span class="p">!=</span> <span class="n">version</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">Conflict</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">_context</span><span class="p">.</span><span class="nf">Entry</span><span class="p">(</span><span class="n">existingEmployee</span><span class="p">).</span><span class="n">CurrentValues</span><span class="p">.</span><span class="nf">SetValues</span><span class="p">(</span><span class="n">employee</span><span class="p">);</span>
            <span class="n">existingEmployee</span><span class="p">.</span><span class="n">RowVersion</span> <span class="p">=</span> <span class="n">Guid</span><span class="p">.</span><span class="nf">NewGuid</span><span class="p">();</span>
            <span class="n">_context</span><span class="p">.</span><span class="nf">Entry</span><span class="p">(</span><span class="n">existingEmployee</span><span class="p">).</span><span class="n">State</span> <span class="p">=</span> <span class="n">EntityState</span><span class="p">.</span><span class="n">Modified</span><span class="p">;</span>

            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">DbUpdateConcurrencyException</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// POST: api/Employees</span>
        <span class="c1">// To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754</span>
        <span class="p">[</span><span class="n">HttpPost</span><span class="p">]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">Employee</span><span class="p">&gt;&gt;</span> <span class="nf">PostEmployee</span><span class="p">(</span><span class="n">Employee</span> <span class="n">employee</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Employee</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">Problem</span><span class="p">(</span><span class="s">"Entity set 'ApplicationDbContext.Employee'  is null."</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="n">employee</span><span class="p">.</span><span class="n">RowVersion</span> <span class="p">=</span> <span class="n">Guid</span><span class="p">.</span><span class="nf">NewGuid</span><span class="p">();</span>
            <span class="n">_context</span><span class="p">.</span><span class="n">Employee</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">employee</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>

            <span class="k">return</span> <span class="nf">CreatedAtAction</span><span class="p">(</span><span class="s">"GetEmployee"</span><span class="p">,</span> <span class="k">new</span> <span class="p">{</span> <span class="n">id</span> <span class="p">=</span> <span class="n">employee</span><span class="p">.</span><span class="n">EmployeeID</span> <span class="p">},</span> <span class="n">employee</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">// DELETE: api/Employees/5</span>
        <span class="p">[</span><span class="nf">HttpDelete</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">DeleteEmployee</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="kt">string</span> <span class="n">version</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Employee</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="kt">var</span> <span class="n">employee</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Employee</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">employee</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">employee</span><span class="p">.</span><span class="n">RowVersion</span><span class="p">.</span><span class="nf">ToString</span><span class="p">()</span> <span class="p">!=</span> <span class="n">version</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">Conflict</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">_context</span><span class="p">.</span><span class="n">Employee</span><span class="p">.</span><span class="nf">Remove</span><span class="p">(</span><span class="n">employee</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>

            <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 8: Create migration and update database</strong></p>
<ul>
  <li>Open Package Manager Console (PMC).</li>
  <li>Select the project name ConcurrencyHandling.API</li>
  <li>Run the following command in PMC</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">Add-Migration</span> <span class="nf">InitialCreate</span>
</code></pre></div></div>
<p>This will create a new migration file named “InitialCreate” under the Migrations folder of your</p>

<ul>
  <li>Run the following command in PMC</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">Update-Database</span>
</code></pre></div></div>

<p><strong>Step 9: Run the application and test concurrency</strong></p>

<ul>
  <li>Create a new record by PostEmployee action using swagger. Sample example for post data.</li>
</ul>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"employeeID"</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w">
  </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Tahiya Hasan"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"salary"</span><span class="p">:</span><span class="w"> </span><span class="mi">1000000</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<ul>
  <li>Now, let’s retrieve the record using the GET method. You will get the following response.</li>
</ul>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
  </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Tahiya Hasan"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"salary"</span><span class="p">:</span><span class="w"> </span><span class="mi">1000000</span><span class="p">,</span><span class="w">
  </span><span class="nl">"rowVersion"</span><span class="p">:</span><span class="w"> </span><span class="s2">"8568375c-cfa5-4ec2-a2ab-b06184f424ad"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"links"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"rel"</span><span class="p">:</span><span class="w"> </span><span class="s2">"edit"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"href"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/employees/1/8568375c-cfa5-4ec2-a2ab-b06184f424ad"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"method"</span><span class="p">:</span><span class="w"> </span><span class="s2">"PUT"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"rel"</span><span class="p">:</span><span class="w"> </span><span class="s2">"delete"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"href"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/employees/1/8568375c-cfa5-4ec2-a2ab-b06184f424ad"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"method"</span><span class="p">:</span><span class="w"> </span><span class="s2">"DELETE"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<ul>
  <li>Modify or delete the record by using either the provided URL or the specified version number within the URL. In the backend, the version number from the URL will be compared with the existing version number in the action method as outlined in the controller code. The action will only be executed if the version numbers from the URL and the existing record match.</li>
</ul>

<p><strong><a href="https://github.com/mahedee/code-sample02/tree/master/ConcurrencyHyperMedia">Source code</a></strong></p>]]></content><author><name>Mahedee Hasan</name></author><category term="ASP.NET" /><category term="ASP.NET Core" /><category term="C#" /><category term="Web API" /><category term="EF" /><category term="Software Architecture" /><category term="csharp" /><category term="aspnet" /><category term="aspnetcore" /><category term="webapi" /><category term="ef" /><category term="softwarearchitecture" /><summary type="html"><![CDATA[Optimistic concurrency is a common method for handling such situations. In this article, I'll show a simple way to manage concurrency in ASP.NET using hypermedia.]]></summary></entry><entry><title type="html">Optimistic Concurrency Management in ASP.NET Core Application Using ETags and If-Match Header</title><link href="https://mahedee.net//optimistic_concurrency_management_aspnet_core_etags_if_match_header/" rel="alternate" type="text/html" title="Optimistic Concurrency Management in ASP.NET Core Application Using ETags and If-Match Header" /><published>2023-11-11T00:00:00-05:00</published><updated>2023-11-11T00:00:00-05:00</updated><id>https://mahedee.net//optimistic_concurrency_management_aspnet_core_etags_if_match_header</id><content type="html" xml:base="https://mahedee.net//optimistic_concurrency_management_aspnet_core_etags_if_match_header/"><![CDATA[<p>In my earlier article <a href="https://mahedee.net/concurrency_management_in_aspnet_core_applications_with_entity_framework/">here</a>, I talked about different ways to handle concurrency. As you know, optimistic concurrency is a common method for dealing with such situations. In this article, I’ll demonstrate a practical way to manage concurrency in ASP.NET using ETags and If-Match.</p>

<p><strong>Tools and Technology Used</strong></p>

<ul>
  <li>ASP.net core Web API</li>
  <li>Visual C#</li>
  <li>Entity Framework</li>
  <li>SQL Server</li>
</ul>

<p><strong>Step 1: Create a asp.net core web api project name ConcurrencyHandling.API</strong></p>

<p><strong>Step 2: Install the following nuget packages in the project.</strong></p>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">Microsoft.EntityFrameworkCore</span>
<span class="nf">Microsoft.EntityFrameworkCore.Design</span>
<span class="nf">Microsoft.EntityFrameworkCore.SqlServer</span>
<span class="nf">Microsoft.EntityFrameworkCore.Tools</span>

</code></pre></div></div>

<p><strong>Step 3: Create a Model class name Product in Models folder</strong></p>

<ul>
  <li>Product class to store Product Information</li>
  <li>In the following class RecordVersion property is used to track the updated version of the record.</li>
</ul>

<p><strong>Account.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">ConcurrencyHandling.API.Models</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Product</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">ProductId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span><span class="p">?</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">decimal</span> <span class="n">Price</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">StockQuantity</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">// Concurrency control properties</span>
        <span class="k">public</span> <span class="n">Guid</span> <span class="n">RecordVersion</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 4: Create a Context class name ApplicationDbContext in Data folder.</strong></p>

<p><strong>ApplicationDbContext.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">ConcurrencyHandling.API.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">ConcurrencyHandling.API.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">ConcurrencyHandling.API.Data</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">ApplicationDbContext</span> <span class="p">:</span> <span class="n">DbContext</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">ApplicationDbContext</span><span class="p">(</span><span class="n">DbContextOptions</span><span class="p">&lt;</span><span class="n">ApplicationDbContext</span><span class="p">&gt;</span> <span class="n">options</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
        <span class="p">{</span>

        <span class="p">}</span>
        <span class="k">public</span> <span class="n">DbSet</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;?</span> <span class="n">Product</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 5: Add connection string in appsettings.json file</strong></p>

<p><strong>appsettings.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"Logging"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"LogLevel"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Default"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Information"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Microsoft.AspNetCore"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Warning"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
</span><span class="nl">"ConnectionStrings"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"DefaultConnection"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Server=localhost;Database=ConcurrencyEtagsDB;User Id=sa;Password=MyPassword;TrustServerCertificate=True;"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"AllowedHosts"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*"</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<p><strong>Step 6: Configure Program class as follows.</strong></p>

<p><strong>Program.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">ConcurrencyHandling.API.Data</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="n">WebApplication</span><span class="p">.</span><span class="nf">CreateBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>

<span class="c1">// Add services to the container.</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">();</span>
<span class="c1">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddEndpointsApiExplorer</span><span class="p">();</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddSwaggerGen</span><span class="p">();</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddDbContext</span><span class="p">&lt;</span><span class="n">ApplicationDbContext</span><span class="p">&gt;(</span><span class="n">options</span> <span class="p">=&gt;</span>
    <span class="n">options</span><span class="p">.</span><span class="nf">UseSqlServer</span><span class="p">(</span><span class="n">builder</span><span class="p">.</span><span class="n">Configuration</span><span class="p">.</span><span class="nf">GetConnectionString</span><span class="p">(</span><span class="s">"DefaultConnection"</span><span class="p">)));</span>

<span class="kt">var</span> <span class="n">app</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

<span class="c1">// Configure the HTTP request pipeline.</span>
<span class="k">if</span> <span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">Environment</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
<span class="p">{</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwagger</span><span class="p">();</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwaggerUI</span><span class="p">();</span>
<span class="p">}</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseHttpsRedirection</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseAuthorization</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">MapControllers</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>

</code></pre></div></div>

<p><strong>Step 7: Create a Controller class ProductsController in Controllers folder.</strong></p>
<ul>
  <li>In GetProduct action Etag header is added with the response header like below.</li>
</ul>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Response</span><span class="p">.</span><span class="n">Headers</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">ETAG_HEADER</span><span class="p">,</span> <span class="n">product</span><span class="p">.</span><span class="n">RecordVersion</span><span class="p">.</span><span class="nf">ToString</span><span class="p">());</span>
</code></pre></div></div>

<ul>
  <li>In the PutProduct and DeleteProduct actions, if the existing record’s version matches the current Etag and the requested Etag, then the update and delete operations will occur; otherwise, they will not take place.</li>
</ul>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">PutProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="n">Product</span> <span class="n">product</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">id</span> <span class="p">!=</span> <span class="n">product</span><span class="p">.</span><span class="n">ProductId</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="kt">var</span> <span class="n">existingProduct</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Product</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">existingProduct</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="c1">// Check ETag header</span>
    <span class="kt">var</span> <span class="n">existingProductETag</span> <span class="p">=</span> <span class="n">existingProduct</span><span class="p">.</span><span class="n">RecordVersion</span><span class="p">.</span><span class="nf">ToString</span><span class="p">();</span>
    <span class="kt">var</span> <span class="n">requestProductETag</span> <span class="p">=</span> <span class="n">Request</span><span class="p">.</span><span class="n">Headers</span><span class="p">[</span><span class="n">IF_MATCH_HEADER</span><span class="p">].</span><span class="nf">FirstOrDefault</span><span class="p">();</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">existingProductETag</span> <span class="p">!=</span> <span class="n">requestProductETag</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="c1">// StatusCodes.Status412PreconditionFailed means "Precondition Failed"</span>
        <span class="c1">// meaning the ETag header value does not match the current ETag value</span>
        <span class="k">return</span> <span class="nf">StatusCode</span><span class="p">(</span><span class="n">StatusCodes</span><span class="p">.</span><span class="n">Status412PreconditionFailed</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="c1">// Update the existing product with the new values</span>
    <span class="n">_context</span><span class="p">.</span><span class="nf">Entry</span><span class="p">(</span><span class="n">existingProduct</span><span class="p">).</span><span class="n">CurrentValues</span><span class="p">.</span><span class="nf">SetValues</span><span class="p">(</span><span class="n">product</span><span class="p">);</span>
    <span class="n">existingProduct</span><span class="p">.</span><span class="n">RecordVersion</span> <span class="p">=</span> <span class="n">Guid</span><span class="p">.</span><span class="nf">NewGuid</span><span class="p">();</span>
    <span class="n">_context</span><span class="p">.</span><span class="nf">Entry</span><span class="p">(</span><span class="n">existingProduct</span><span class="p">).</span><span class="n">State</span> <span class="p">=</span> <span class="n">EntityState</span><span class="p">.</span><span class="n">Modified</span><span class="p">;</span>

    <span class="k">try</span>
    <span class="p">{</span>

        <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>
    <span class="p">}</span>
    <span class="k">catch</span> <span class="p">(</span><span class="n">DbUpdateConcurrencyException</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">throw</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>ProductsController.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">ConcurrencyHandling.API.Data</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">ConcurrencyHandling.API.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">ConcurrencyHandling.API.Controllers</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
    <span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>

    <span class="c1">// Concurrency check using ETags</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">ProductsController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">const</span> <span class="kt">string</span> <span class="n">ETAG_HEADER</span> <span class="p">=</span> <span class="s">"ETag"</span><span class="p">;</span>
        <span class="k">private</span> <span class="k">const</span> <span class="kt">string</span> <span class="n">IF_MATCH_HEADER</span> <span class="p">=</span> <span class="s">"If-Match"</span><span class="p">;</span>

        <span class="k">private</span> <span class="k">readonly</span> <span class="n">ApplicationDbContext</span> <span class="n">_context</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">ProductsController</span><span class="p">(</span><span class="n">ApplicationDbContext</span> <span class="n">context</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_context</span> <span class="p">=</span> <span class="n">context</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/Products</span>
        <span class="p">[</span><span class="n">HttpGet</span><span class="p">]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;&gt;&gt;</span> <span class="nf">GetProduct</span><span class="p">()</span>
        <span class="p">{</span>
          <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Product</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
          <span class="p">{</span>
              <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
          <span class="p">}</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Product</span><span class="p">.</span><span class="nf">ToListAsync</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/Products/5</span>
        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;&gt;</span> <span class="nf">GetProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
          <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Product</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
          <span class="p">{</span>
              <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
          <span class="p">}</span>
            <span class="kt">var</span> <span class="n">product</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Product</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">product</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="c1">// Add ETag header</span>
            <span class="n">Response</span><span class="p">.</span><span class="n">Headers</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">ETAG_HEADER</span><span class="p">,</span> <span class="n">product</span><span class="p">.</span><span class="n">RecordVersion</span><span class="p">.</span><span class="nf">ToString</span><span class="p">());</span>
            <span class="k">return</span> <span class="n">product</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// PUT: api/Products/5</span>
        <span class="c1">// To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754</span>
        <span class="p">[</span><span class="nf">HttpPut</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">PutProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="n">Product</span> <span class="n">product</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">id</span> <span class="p">!=</span> <span class="n">product</span><span class="p">.</span><span class="n">ProductId</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="kt">var</span> <span class="n">existingProduct</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Product</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">existingProduct</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="c1">// Check ETag header</span>
            <span class="kt">var</span> <span class="n">existingProductETag</span> <span class="p">=</span> <span class="n">existingProduct</span><span class="p">.</span><span class="n">RecordVersion</span><span class="p">.</span><span class="nf">ToString</span><span class="p">();</span>
            <span class="kt">var</span> <span class="n">requestProductETag</span> <span class="p">=</span> <span class="n">Request</span><span class="p">.</span><span class="n">Headers</span><span class="p">[</span><span class="n">IF_MATCH_HEADER</span><span class="p">].</span><span class="nf">FirstOrDefault</span><span class="p">();</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">existingProductETag</span> <span class="p">!=</span> <span class="n">requestProductETag</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="c1">// StatusCodes.Status412PreconditionFailed means "Precondition Failed"</span>
                <span class="c1">// meaning the ETag header value does not match the current ETag value</span>
                <span class="k">return</span> <span class="nf">StatusCode</span><span class="p">(</span><span class="n">StatusCodes</span><span class="p">.</span><span class="n">Status412PreconditionFailed</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="c1">// Update the existing product with the new values</span>
            <span class="n">_context</span><span class="p">.</span><span class="nf">Entry</span><span class="p">(</span><span class="n">existingProduct</span><span class="p">).</span><span class="n">CurrentValues</span><span class="p">.</span><span class="nf">SetValues</span><span class="p">(</span><span class="n">product</span><span class="p">);</span>
            <span class="n">existingProduct</span><span class="p">.</span><span class="n">RecordVersion</span> <span class="p">=</span> <span class="n">Guid</span><span class="p">.</span><span class="nf">NewGuid</span><span class="p">();</span>
            <span class="n">_context</span><span class="p">.</span><span class="nf">Entry</span><span class="p">(</span><span class="n">existingProduct</span><span class="p">).</span><span class="n">State</span> <span class="p">=</span> <span class="n">EntityState</span><span class="p">.</span><span class="n">Modified</span><span class="p">;</span>

            <span class="k">try</span>
            <span class="p">{</span>

                <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">DbUpdateConcurrencyException</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// POST: api/Products</span>
        <span class="c1">// To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754</span>
        <span class="p">[</span><span class="n">HttpPost</span><span class="p">]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;&gt;</span> <span class="nf">PostProduct</span><span class="p">(</span><span class="n">Product</span> <span class="n">product</span><span class="p">)</span>
        <span class="p">{</span>
          <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Product</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
          <span class="p">{</span>
              <span class="k">return</span> <span class="nf">Problem</span><span class="p">(</span><span class="s">"Entity set 'ApplicationDbContext.Product'  is null."</span><span class="p">);</span>
          <span class="p">}</span>
            <span class="n">product</span><span class="p">.</span><span class="n">RecordVersion</span> <span class="p">=</span> <span class="n">Guid</span><span class="p">.</span><span class="nf">NewGuid</span><span class="p">();</span>
            <span class="n">_context</span><span class="p">.</span><span class="n">Product</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">product</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>

            <span class="k">return</span> <span class="nf">CreatedAtAction</span><span class="p">(</span><span class="s">"GetProduct"</span><span class="p">,</span> <span class="k">new</span> <span class="p">{</span> <span class="n">id</span> <span class="p">=</span> <span class="n">product</span><span class="p">.</span><span class="n">ProductId</span> <span class="p">},</span> <span class="n">product</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">// DELETE: api/Products/5</span>
        <span class="p">[</span><span class="nf">HttpDelete</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">DeleteProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">//if (_context.Product == null)</span>
            <span class="c1">//{</span>
            <span class="c1">//    return NotFound();</span>
            <span class="c1">//}</span>
            <span class="kt">var</span> <span class="n">product</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Product</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">if</span><span class="p">(</span><span class="n">product</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="kt">var</span> <span class="n">existingProductETag</span> <span class="p">=</span> <span class="n">product</span><span class="p">.</span><span class="n">RecordVersion</span><span class="p">.</span><span class="nf">ToString</span><span class="p">();</span>
            <span class="kt">var</span> <span class="n">requestProductETag</span> <span class="p">=</span> <span class="n">Request</span><span class="p">.</span><span class="n">Headers</span><span class="p">[</span><span class="n">IF_MATCH_HEADER</span><span class="p">].</span><span class="nf">FirstOrDefault</span><span class="p">();</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">existingProductETag</span> <span class="p">!=</span> <span class="n">requestProductETag</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="c1">// StatusCodes.Status412PreconditionFailed means "Precondition Failed"</span>
                <span class="c1">// meaning the ETag header value does not match the current ETag value</span>
                <span class="k">return</span> <span class="nf">StatusCode</span><span class="p">(</span><span class="n">StatusCodes</span><span class="p">.</span><span class="n">Status412PreconditionFailed</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="n">_context</span><span class="p">.</span><span class="n">Product</span><span class="p">.</span><span class="nf">Remove</span><span class="p">(</span><span class="n">product</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>

            <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">//private bool ProductExists(int id)</span>
        <span class="c1">//{</span>
        <span class="c1">//    return (_context.Product?.Any(e =&gt; e.ProductId == id)).GetValueOrDefault();</span>
        <span class="c1">//}</span>
    <span class="p">}</span>
<span class="p">}</span>


</code></pre></div></div>

<p><strong>Step 8: Create migration and update database</strong></p>
<ul>
  <li>Open Package Manager Console (PMC).</li>
  <li>Select the project name ConcurrencyHandling.API</li>
  <li>Run the following command in PMC</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">Add-Migration</span> <span class="nf">InitialCreate</span>
</code></pre></div></div>
<p>This will create a new migration file named “InitialCreate” under the Migrations folder of your</p>

<ul>
  <li>Run the following command in PMC</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">Update-Database</span>
</code></pre></div></div>

<p><strong>Step 9: Run the application and test concurrency</strong></p>

<ul>
  <li>Create a new record by PostProduct action using swagger. Sample example for post data.</li>
</ul>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"productId"</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w">
  </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Dell Laptop"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"price"</span><span class="p">:</span><span class="w"> </span><span class="mi">1200</span><span class="p">,</span><span class="w">
  </span><span class="nl">"stockQuantity"</span><span class="p">:</span><span class="w"> </span><span class="mi">50</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<ul>
  <li>Now, let’s modify the record using the PUT method. Keep in mind to include the current ETag value in the If-Match request header.</li>
</ul>

<p><img src="/assets/images/posts/2023/etags.png" alt="" /></p>

<ul>
  <li>
    <p>Do same for the delete method.</p>
  </li>
  <li>
    <p>You can only update and delete record only when if-match header is same as row version otherwise not.</p>
  </li>
</ul>

<p><strong><a href="https://github.com/mahedee/code-sample02/tree/master/ConcurrencyEtags">Source code</a></strong></p>]]></content><author><name>Mahedee Hasan</name></author><category term="ASP.NET" /><category term="ASP.NET Core" /><category term="C#" /><category term="Web API" /><category term="EF" /><category term="Software Architecture" /><category term="csharp" /><category term="aspnet" /><category term="aspnetcore" /><category term="webapi" /><category term="ef" /><category term="softwarearchitecture" /><summary type="html"><![CDATA[Efficient concurrency management holds significant importance, especially in enterprise applications, with a heightened emphasis on financial systems. This article aims to elucidate the practical dimensions of concurrency management within an ASP.NET Core application, showcasing the effective utilization of ETags and the If-Match Header.]]></summary></entry><entry><title type="html">Enhancing ASP.NET Core Applications: Optimistic Concurrency Management with Database-Generated Tokens using Entity Framework</title><link href="https://mahedee.net//concurrency_management_in_aspnet_core_database_generated_token/" rel="alternate" type="text/html" title="Enhancing ASP.NET Core Applications: Optimistic Concurrency Management with Database-Generated Tokens using Entity Framework" /><published>2023-10-11T00:00:00-04:00</published><updated>2023-10-11T00:00:00-04:00</updated><id>https://mahedee.net//concurrency_management_in_aspnet_core_database_generated_token</id><content type="html" xml:base="https://mahedee.net//concurrency_management_in_aspnet_core_database_generated_token/"><![CDATA[<p>In a my <a href="https://mahedee.net/concurrency_management_in_aspnet_core_applications_with_entity_framework/">previous article</a>, I have discussed about verious forms of concurrency. As you’re already aware, optimistic concurrency stands out as the prevalent method for managing such scenarios. This article delves into the practical implementation of handling concurrency in ASP.NET using Entity Framework, specifically focusing on utilizing a optimistic concurrency using database-generated token.</p>

<p><strong>Tools and Technology Used</strong></p>

<ul>
  <li>ASP.net core Web API</li>
  <li>Visual C#</li>
  <li>Entity Framework</li>
  <li>SQL Server</li>
</ul>

<p><strong>Step 1: Create a asp.net core web api project name ConcurrencyHandling.API</strong></p>

<p><strong>Step 2: Install the following nuget packages in the project.</strong></p>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">Microsoft.EntityFrameworkCore</span>
<span class="nf">Microsoft.EntityFrameworkCore.Design</span>
<span class="nf">Microsoft.EntityFrameworkCore.SqlServer</span>
<span class="nf">Microsoft.EntityFrameworkCore.Tools</span>

</code></pre></div></div>

<p><strong>Step 3: Create a Model class name Account in Models folder</strong></p>

<ul>
  <li>Account class to store Account Information</li>
  <li>In the following class RowVersion property is used to track the updated version of the record.</li>
</ul>

<p><strong>Account.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Swashbuckle.AspNetCore.Annotations</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.ComponentModel.DataAnnotations</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">ConcurrencyHandling.API.Models</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Account</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">AccountID</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">decimal</span> <span class="n">Balance</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="p">[</span><span class="n">Timestamp</span><span class="p">]</span>
        <span class="k">public</span> <span class="kt">byte</span><span class="p">[]</span> <span class="n">RowVersion</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="p">[</span><span class="m">8</span><span class="p">];</span>
    <span class="p">}</span>
<span class="p">}</span>


</code></pre></div></div>

<p><strong>Step 4: Create a Context class name ApplicationDbContext in Data folder.</strong></p>
<ul>
  <li>The following code block is used in OnModelCreating method to handle concurrency.</li>
</ul>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="n">modelBuilder</span><span class="p">.</span><span class="n">Entity</span><span class="p">&lt;</span><span class="n">Account</span><span class="p">&gt;()</span>
                <span class="p">.</span><span class="nf">Property</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">RowVersion</span><span class="p">).</span><span class="nf">IsConcurrencyToken</span><span class="p">();</span>
</code></pre></div></div>

<ul>
  <li>IsConcurrencyToken() marks the property as a concurrency token. This is used by EF Core to implement optimistic concurrency. EF Core will use the value of the property in the WHERE clause of UPDATE and DELETE statements.</li>
</ul>

<p><strong>ApplicationDbContext.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">ConcurrencyHandling.API.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">ConcurrencyHandling.API.Data</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">ApplicationDbContext</span> <span class="p">:</span> <span class="n">DbContext</span>
    <span class="p">{</span>

        <span class="k">public</span> <span class="k">virtual</span> <span class="n">DbSet</span><span class="p">&lt;</span><span class="n">Account</span><span class="p">&gt;</span> <span class="n">Accounts</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>


        <span class="k">public</span> <span class="nf">ApplicationDbContext</span><span class="p">(</span><span class="n">DbContextOptions</span><span class="p">&lt;</span><span class="n">ApplicationDbContext</span><span class="p">&gt;</span> <span class="n">options</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
        <span class="p">{</span>

        <span class="p">}</span>

        <span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">OnModelCreating</span><span class="p">(</span><span class="n">ModelBuilder</span> <span class="n">modelBuilder</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">base</span><span class="p">.</span><span class="nf">OnModelCreating</span><span class="p">(</span><span class="n">modelBuilder</span><span class="p">);</span>

            <span class="c1">// IsConcurrencyToken() marks the property as a concurrency token.</span>
            <span class="c1">// This is used by EF Core to implement optimistic concurrency.</span>
            <span class="c1">// EF Core will use the value of the property in the WHERE clause of UPDATE and DELETE statements.</span>

            <span class="n">modelBuilder</span><span class="p">.</span><span class="n">Entity</span><span class="p">&lt;</span><span class="n">Account</span><span class="p">&gt;()</span>
                <span class="p">.</span><span class="nf">Property</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">RowVersion</span><span class="p">).</span><span class="nf">IsConcurrencyToken</span><span class="p">();</span>
        <span class="p">}</span>

    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 5: Add connection string in appsettings.json file</strong></p>

<p><strong>appsettings.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"Logging"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"LogLevel"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Default"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Information"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Microsoft.AspNetCore"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Warning"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"ConnectionStrings"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"DefaultConnection"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Server=localhost;Database=YourPassword;User Id=sa;Password=oLdViCtOrY2008;TrustServerCertificate=True;"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"AllowedHosts"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*"</span><span class="w">
</span><span class="p">}</span><span class="w">


</span></code></pre></div></div>

<p><strong>Step 6: Configure Program class as follows.</strong></p>

<p><strong>Program.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">ConcurrencyHandling.API.Data</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="n">WebApplication</span><span class="p">.</span><span class="nf">CreateBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>

<span class="c1">// Add services to the container.</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">();</span>
<span class="c1">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddEndpointsApiExplorer</span><span class="p">();</span>


<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddSwaggerGen</span><span class="p">();</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddDbContext</span><span class="p">&lt;</span><span class="n">ApplicationDbContext</span><span class="p">&gt;(</span><span class="n">options</span> <span class="p">=&gt;</span>
    <span class="n">options</span><span class="p">.</span><span class="nf">UseSqlServer</span><span class="p">(</span><span class="n">builder</span><span class="p">.</span><span class="n">Configuration</span><span class="p">.</span><span class="nf">GetConnectionString</span><span class="p">(</span><span class="s">"DefaultConnection"</span><span class="p">)));</span>


<span class="kt">var</span> <span class="n">app</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

<span class="c1">// Configure the HTTP request pipeline.</span>
<span class="k">if</span> <span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">Environment</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
<span class="p">{</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwagger</span><span class="p">();</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwaggerUI</span><span class="p">();</span>
<span class="p">}</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseHttpsRedirection</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseAuthorization</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">MapControllers</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>


</code></pre></div></div>

<p><strong>Step 7: Create a Controller class AccountsController in Controllers folder.</strong></p>
<ul>
  <li>In the AccountsController class that follows, the statement <code class="language-plaintext highlighter-rouge">booking.RecordVersion = Guid.NewGuid();</code> is employed within the PutBooking and PostBooking methods to update the record version. This updated version will then be utilized in subsequent requests, such as those for updating or deleting a record.</li>
</ul>

<p><strong>AccountsController.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">ConcurrencyHandling.API.Data</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">ConcurrencyHandling.API.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">ConcurrencyHandling.API.Controllers</span>
<span class="p">{</span>

    <span class="c1">// Concurrency check using database generated token</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
    <span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">AccountsController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">ApplicationDbContext</span> <span class="n">_context</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">AccountsController</span><span class="p">(</span><span class="n">ApplicationDbContext</span> <span class="n">context</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_context</span> <span class="p">=</span> <span class="n">context</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/Accounts</span>
        <span class="p">[</span><span class="n">HttpGet</span><span class="p">]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Account</span><span class="p">&gt;&gt;&gt;</span> <span class="nf">GetAccounts</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Accounts</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Accounts</span><span class="p">.</span><span class="nf">ToListAsync</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/Accounts/5</span>
        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">Account</span><span class="p">&gt;&gt;</span> <span class="nf">GetAccount</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Accounts</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="kt">var</span> <span class="n">account</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Accounts</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">account</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="n">account</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// PUT: api/Accounts/5</span>
        <span class="c1">// To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754</span>
        <span class="p">[</span><span class="nf">HttpPut</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">PutAccount</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="n">Account</span> <span class="n">account</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">id</span> <span class="p">!=</span> <span class="n">account</span><span class="p">.</span><span class="n">AccountID</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">_context</span><span class="p">.</span><span class="nf">Entry</span><span class="p">(</span><span class="n">account</span><span class="p">).</span><span class="n">State</span> <span class="p">=</span> <span class="n">EntityState</span><span class="p">.</span><span class="n">Modified</span><span class="p">;</span>

            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">DbUpdateConcurrencyException</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(!</span><span class="nf">AccountExists</span><span class="p">(</span><span class="n">id</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
                <span class="p">}</span>
                <span class="k">else</span>
                <span class="p">{</span>
                    <span class="k">throw</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// POST: api/Accounts</span>
        <span class="c1">// To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754</span>
        <span class="p">[</span><span class="n">HttpPost</span><span class="p">]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">Account</span><span class="p">&gt;&gt;</span> <span class="nf">PostAccount</span><span class="p">(</span><span class="n">Account</span> <span class="n">account</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Accounts</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">Problem</span><span class="p">(</span><span class="s">"Entity set 'ApplicationDbContext.Accounts'  is null."</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="n">_context</span><span class="p">.</span><span class="n">Accounts</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">account</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>

            <span class="k">return</span> <span class="nf">CreatedAtAction</span><span class="p">(</span><span class="s">"GetAccount"</span><span class="p">,</span> <span class="k">new</span> <span class="p">{</span> <span class="n">id</span> <span class="p">=</span> <span class="n">account</span><span class="p">.</span><span class="n">AccountID</span> <span class="p">},</span> <span class="n">account</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">// DELETE: api/Accounts/5</span>
        <span class="p">[</span><span class="nf">HttpDelete</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">DeleteAccount</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="n">Account</span> <span class="n">account</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Accounts</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="c1">//var account = await _context.Accounts.FindAsync(id);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">account</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">_context</span><span class="p">.</span><span class="n">Accounts</span><span class="p">.</span><span class="nf">Remove</span><span class="p">(</span><span class="n">account</span><span class="p">);</span>

            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">DbUpdateConcurrencyException</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(!</span><span class="nf">AccountExists</span><span class="p">(</span><span class="n">id</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
                <span class="p">}</span>
                <span class="k">else</span>
                <span class="p">{</span>
                    <span class="k">throw</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="kt">bool</span> <span class="nf">AccountExists</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Accounts</span><span class="p">?.</span><span class="nf">Any</span><span class="p">(</span><span class="n">e</span> <span class="p">=&gt;</span> <span class="n">e</span><span class="p">.</span><span class="n">AccountID</span> <span class="p">==</span> <span class="n">id</span><span class="p">)).</span><span class="nf">GetValueOrDefault</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 8: Create migration and update database</strong></p>
<ul>
  <li>Open Package Manager Console (PMC).</li>
  <li>Select the project name ConcurrencyHandling.API</li>
  <li>Run the following command in PMC</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">Add-Migration</span> <span class="nf">InitialCreate</span>
</code></pre></div></div>
<p>This will create a new migration file named “InitialCreate” under the Migrations folder of your</p>

<ul>
  <li>Run the following command in PMC</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">Update-Database</span>
</code></pre></div></div>

<p><strong>Step 9: Run the application and test concurrency</strong></p>

<ul>
  <li>Create a new record by PostAccount action using swagger. Sample example for post data.</li>
</ul>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"accountID"</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w">
  </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Mahedee Hasan"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"balance"</span><span class="p">:</span><span class="w"> </span><span class="mi">1000</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<ul>
  <li>Update the record using the PutAccount action in Swagger. A sample input is provided below. Meanwhile, open another tab and make an update to the record. Your record version will be altered. If you attempt to update the record using the previous record version, it will result in an exception due to concurrency. However, if no one else has updated it and you are using the correct record version, you can update the record without encountering any exceptions.</li>
</ul>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"accountID"</span><span class="p">:</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w">
  </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Tahiya Hasan"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"balance"</span><span class="p">:</span><span class="w"> </span><span class="mi">1000</span><span class="p">,</span><span class="w">
  </span><span class="nl">"rowVersion"</span><span class="p">:</span><span class="w"> </span><span class="s2">"AAAAAAAAB9U="</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<ul>
  <li>Delete the record using the DeleteAccount action in Swagger. A sample input is provided below. Meanwhile, open another tab and update the record. Your record version will be changed. If you attempt to delete the record using the previous record version, it will throw an exception due to concurrency. However, if no one else has updated it and you are using the correct record version, you can delete the record without encountering any exceptions.</li>
</ul>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"accountID"</span><span class="p">:</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w">
  </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Tahiya Hasan"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"balance"</span><span class="p">:</span><span class="w"> </span><span class="mi">1000</span><span class="p">,</span><span class="w">
  </span><span class="nl">"rowVersion"</span><span class="p">:</span><span class="w"> </span><span class="s2">"AAAAAAAAB9U="</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<ul>
  <li>When we execute update and delete request in the background the following query execute.</li>
</ul>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">UPDATE</span> <span class="p">[</span><span class="n">Accounts</span><span class="p">]</span> <span class="k">SET</span> <span class="p">[</span><span class="n">Balance</span><span class="p">]</span> <span class="o">=</span> <span class="o">@</span><span class="n">p0</span><span class="p">,</span> <span class="p">[</span><span class="n">Name</span><span class="p">]</span> <span class="o">=</span> <span class="o">@</span><span class="n">p1</span>
<span class="k">OUTPUT</span> <span class="n">INSERTED</span><span class="p">.[</span><span class="n">RowVersion</span><span class="p">]</span>
<span class="k">WHERE</span> <span class="p">[</span><span class="n">AccountID</span><span class="p">]</span> <span class="o">=</span> <span class="o">@</span><span class="n">p2</span> <span class="k">AND</span> <span class="p">[</span><span class="n">RowVersion</span><span class="p">]</span> <span class="o">=</span> <span class="o">@</span><span class="n">p3</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>To view the generated SQL by Entity framework. Configre SQL Log in Program class as follows and you will see the the SQL output in Visual Studio Output window.</li>
</ul>

<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddDbContext</span><span class="p">&lt;</span><span class="n">ApplicationDbContext</span><span class="p">&gt;(</span><span class="n">options</span> <span class="p">=&gt;</span>
    <span class="n">options</span><span class="p">.</span><span class="nf">UseSqlServer</span><span class="p">(</span><span class="n">builder</span><span class="p">.</span><span class="n">Configuration</span><span class="p">.</span><span class="nf">GetConnectionString</span><span class="p">(</span><span class="s">"DefaultConnection"</span><span class="p">))</span>
    <span class="p">.</span><span class="nf">LogTo</span><span class="p">(</span><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">,</span> <span class="n">LogLevel</span><span class="p">.</span><span class="n">Information</span><span class="p">));</span>
</code></pre></div></div>

<p><strong><a href="https://github.com/mahedee/code-sample02/tree/master/ConcurrencyDBToken">Source code</a></strong></p>]]></content><author><name>Mahedee Hasan</name></author><category term="ASP.NET" /><category term="ASP.NET Core" /><category term="C#" /><category term="Web API" /><category term="EF" /><category term="Software Architecture" /><category term="csharp" /><category term="aspnet" /><category term="aspnetcore" /><category term="webapi" /><category term="ef" /><category term="softwarearchitecture" /><summary type="html"><![CDATA[Effectively overseeing concurrency is paramount, particularly in enterprise applications, exerting a substantial influence on financial systems. This article seeks to illustrate the pragmatic aspects of managing concurrency in an ASP.NET Core application by employing a database-generated token through Entity Framework.]]></summary></entry><entry><title type="html">Exploring Concurrency and Concurrency Management in ASP.NET Core Applications with Entity Framework</title><link href="https://mahedee.net//concurrency_management_in_aspnet_core_applications_with_entity_framework/" rel="alternate" type="text/html" title="Exploring Concurrency and Concurrency Management in ASP.NET Core Applications with Entity Framework" /><published>2023-09-07T00:00:00-04:00</published><updated>2023-09-07T00:00:00-04:00</updated><id>https://mahedee.net//concurrency_management_in_aspnet_core_applications_with_entity_framework</id><content type="html" xml:base="https://mahedee.net//concurrency_management_in_aspnet_core_applications_with_entity_framework/"><![CDATA[<p>Concurrency refers to the simultaneous execution of multiple tasks or processes within a system. In the context of software development, it often involves managing multiple operations concurrently to improve system efficiency and responsiveness.</p>

<p>Handling concurrency in software applications is crucial to prevent conflicts and ensure data consistency when multiple users or processes attempt to access and modify shared data simultaneously. Several techniques are employed to manage concurrency effectively:</p>

<p><strong>Pessimistic Concurrency Control:</strong> Acquiring locks on data before allowing any modifications, ensuring exclusive access during the transaction.</p>

<p><strong>Optimistic Concurrency Control:</strong> Allowing multiple transactions to proceed independently but checking for conflicts at the end, typically through versioning or timestamps, and handling conflicts accordingly.</p>

<p><strong>Locking Mechanisms:</strong> Using locks to control access to shared resources and ensuring that only one process can modify data at a time.</p>

<p><strong>Transaction Isolation:</strong> Employing transactional mechanisms to encapsulate a series of operations, ensuring they either all succeed or none at all, thus maintaining data integrity.</p>

<p><strong>Conflict Resolution:</strong> Implementing strategies to resolve conflicts when they occur, such as merging changes, notifying users of conflicts, or rolling back transactions.</p>

<p>Understanding the nature of the application, the database system in use, and the specific concurrency requirements helps developers choose the most suitable approach for handling concurrency effectively. But, Optimistic Concurrency control mechanism is mostly used in the industry.</p>

<h2 id="optimistic-concurrency-handling-using-application-managed-token-using-entity-framework">Optimistic concurrency handling using application managed token using entity framework</h2>
<p>In this article, we will explore how to handle optimistic concurrency  using application managed token using entity framework. In this case, the client application will send the token to the server with the request. The server will check the token with the database. If the token is valid, then the server will update the data and send the updated token to the client. If the token is invalid, then the server will send the error message to the client. The client will show the error message to the user and refresh the data from the server. Let’s move to the demo on how to handle optimistic concurrency using an application-managed token.</p>

<p><strong>Tools and Technology Used</strong></p>

<ul>
  <li>ASP.net core Web API</li>
  <li>Visual C#</li>
  <li>Entity Framework</li>
  <li>SQL Server</li>
</ul>

<p><strong>Step 1: Create a asp.net core web api project name ConcurrencyHandling.API</strong></p>

<p><strong>Step 2: Install the following nuget packages in the project.</strong></p>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">Microsoft.EntityFrameworkCore</span>
<span class="nf">Microsoft.EntityFrameworkCore.Design</span>
<span class="nf">Microsoft.EntityFrameworkCore.SqlServer</span>
<span class="nf">Microsoft.EntityFrameworkCore.Tools</span>

</code></pre></div></div>

<p><strong>Step 3: Create a Model class name Booking</strong></p>

<ul>
  <li>Booking class to store Booking Information</li>
  <li>In the following class RecordVersion property is a Guid which is used to track the updated version of the record.</li>
  <li>ConcurrencyCheck attribute is specifies that this property participates in optimistic concurrency checking. This column is used in the WHERE clause of UPDATE and DELETE operation.</li>
</ul>

<p><strong>Booking.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System.ComponentModel.DataAnnotations</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">ConcurrencyHandling.API.Models</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Booking</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">BookingID</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">CustomerName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">RoomID</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="n">DateTime</span> <span class="n">BookingDate</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="n">DateTime</span> <span class="n">CheckInDate</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="n">DateTime</span> <span class="n">CheckOutDate</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">// ConcurrencyCheck is specifies that this property participates in optimistic concurrency checking.</span>
        <span class="p">[</span><span class="n">ConcurrencyCheck</span><span class="p">]</span>
        <span class="k">public</span> <span class="n">Guid</span> <span class="n">RecordVersion</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 4: Create a Context class name ApplicationDbContext in Data folder.</strong></p>

<p><strong>ApplicationDbContext.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">ConcurrencyHandling.API.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">ConcurrencyHandling.API.Data</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">ApplicationDbContext</span> <span class="p">:</span> <span class="n">DbContext</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="n">DbSet</span><span class="p">&lt;</span><span class="n">Booking</span><span class="p">&gt;?</span> <span class="n">Booking</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="nf">ApplicationDbContext</span><span class="p">(</span><span class="n">DbContextOptions</span><span class="p">&lt;</span><span class="n">ApplicationDbContext</span><span class="p">&gt;</span> <span class="n">options</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
        <span class="p">{</span>

        <span class="p">}</span>

    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 5: Add connection string in appsettings.json file</strong></p>

<p><strong>appsettings.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"Logging"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"LogLevel"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Default"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Information"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Microsoft.AspNetCore"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Warning"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
</span><span class="nl">"ConnectionStrings"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"DefaultConnection"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Server=localhost;Database=ConcurrencyAppTokenDB;User Id=sa;Password=YourPassword;TrustServerCertificate=True;"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"AllowedHosts"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*"</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<p><strong>Step 6: Configure Program class as follows.</strong></p>

<p><strong>Program.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">ConcurrencyHandling.API.Data</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="n">WebApplication</span><span class="p">.</span><span class="nf">CreateBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>

<span class="c1">// Add services to the container.</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">();</span>
<span class="c1">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddEndpointsApiExplorer</span><span class="p">();</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddSwaggerGen</span><span class="p">();</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddDbContext</span><span class="p">&lt;</span><span class="n">ApplicationDbContext</span><span class="p">&gt;(</span><span class="n">options</span> <span class="p">=&gt;</span>
    <span class="n">options</span><span class="p">.</span><span class="nf">UseSqlServer</span><span class="p">(</span><span class="n">builder</span><span class="p">.</span><span class="n">Configuration</span><span class="p">.</span><span class="nf">GetConnectionString</span><span class="p">(</span><span class="s">"DefaultConnection"</span><span class="p">)));</span>

<span class="kt">var</span> <span class="n">app</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

<span class="c1">// Configure the HTTP request pipeline.</span>
<span class="k">if</span> <span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">Environment</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
<span class="p">{</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwagger</span><span class="p">();</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwaggerUI</span><span class="p">();</span>
<span class="p">}</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseHttpsRedirection</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseAuthorization</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">MapControllers</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>

</code></pre></div></div>

<p><strong>Step 7: Create a Controller class BookingsController in Controllers folder.</strong></p>
<ul>
  <li>In the BookingsController class that follows, the statement <code class="language-plaintext highlighter-rouge">booking.RecordVersion = Guid.NewGuid();</code> is employed within the PutBooking and PostBooking methods to update the record version. This updated version will then be utilized in subsequent requests, such as those for updating or deleting a record.</li>
</ul>

<p><strong>BookingsController.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">ConcurrencyHandling.API.Data</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">ConcurrencyHandling.API.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">ConcurrencyHandling.API.Controllers</span>
<span class="p">{</span>
    <span class="c1">// Concurrency check using application managed token</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
    <span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">BookingsController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">ApplicationDbContext</span> <span class="n">_context</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">BookingsController</span><span class="p">(</span><span class="n">ApplicationDbContext</span> <span class="n">context</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_context</span> <span class="p">=</span> <span class="n">context</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/Bookings</span>
        <span class="p">[</span><span class="n">HttpGet</span><span class="p">]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Booking</span><span class="p">&gt;&gt;&gt;</span> <span class="nf">GetBooking</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Booking</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Booking</span><span class="p">.</span><span class="nf">ToListAsync</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/Bookings/5</span>
        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">Booking</span><span class="p">&gt;&gt;</span> <span class="nf">GetBooking</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Booking</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="kt">var</span> <span class="n">booking</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Booking</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">booking</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="n">booking</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// PUT: api/Bookings/5</span>
        <span class="c1">// To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754</span>
        <span class="p">[</span><span class="nf">HttpPut</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">PutBooking</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="n">Booking</span> <span class="n">booking</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">id</span> <span class="p">!=</span> <span class="n">booking</span><span class="p">.</span><span class="n">BookingID</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">_context</span><span class="p">.</span><span class="nf">Entry</span><span class="p">(</span><span class="n">booking</span><span class="p">).</span><span class="n">State</span> <span class="p">=</span> <span class="n">EntityState</span><span class="p">.</span><span class="n">Modified</span><span class="p">;</span>

            <span class="k">try</span>
            <span class="p">{</span>
                <span class="n">booking</span><span class="p">.</span><span class="n">RecordVersion</span> <span class="p">=</span> <span class="n">Guid</span><span class="p">.</span><span class="nf">NewGuid</span><span class="p">();</span>
                <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">DbUpdateConcurrencyException</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(!</span><span class="nf">BookingExists</span><span class="p">(</span><span class="n">id</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
                <span class="p">}</span>
                <span class="k">else</span>
                <span class="p">{</span>
                    <span class="k">throw</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// POST: api/Bookings</span>
        <span class="c1">// To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754</span>
        <span class="p">[</span><span class="n">HttpPost</span><span class="p">]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">Booking</span><span class="p">&gt;&gt;</span> <span class="nf">PostBooking</span><span class="p">(</span><span class="n">Booking</span> <span class="n">booking</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Booking</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">Problem</span><span class="p">(</span><span class="s">"Entity set 'ApplicationDbContext.Booking'  is null."</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="n">booking</span><span class="p">.</span><span class="n">RecordVersion</span> <span class="p">=</span> <span class="n">Guid</span><span class="p">.</span><span class="nf">NewGuid</span><span class="p">();</span>
            <span class="n">_context</span><span class="p">.</span><span class="n">Booking</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">booking</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>

            <span class="k">return</span> <span class="nf">CreatedAtAction</span><span class="p">(</span><span class="s">"GetBooking"</span><span class="p">,</span> <span class="k">new</span> <span class="p">{</span> <span class="n">id</span> <span class="p">=</span> <span class="n">booking</span><span class="p">.</span><span class="n">BookingID</span> <span class="p">},</span> <span class="n">booking</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">// DELETE: api/Bookings/5</span>
        <span class="p">[</span><span class="nf">HttpDelete</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">DeleteBooking</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="n">Booking</span> <span class="n">booking</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Booking</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="c1">//var booking = await _context.Booking.FindAsync(id);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">booking</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="n">_context</span><span class="p">.</span><span class="n">Booking</span><span class="p">.</span><span class="nf">Remove</span><span class="p">(</span><span class="n">booking</span><span class="p">);</span>

            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">DbUpdateConcurrencyException</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(!</span><span class="nf">BookingExists</span><span class="p">(</span><span class="n">id</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
                <span class="p">}</span>
                <span class="k">else</span>
                <span class="p">{</span>
                    <span class="k">throw</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="kt">bool</span> <span class="nf">BookingExists</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Booking</span><span class="p">?.</span><span class="nf">Any</span><span class="p">(</span><span class="n">e</span> <span class="p">=&gt;</span> <span class="n">e</span><span class="p">.</span><span class="n">BookingID</span> <span class="p">==</span> <span class="n">id</span><span class="p">)).</span><span class="nf">GetValueOrDefault</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>


</code></pre></div></div>

<p><strong>Step 8: Create migration and update database</strong></p>
<ul>
  <li>Open Package Manager Console (PMC).</li>
  <li>Select the project name ConcurrencyHandling.API</li>
  <li>Run the following command in PMC</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">Add-Migration</span> <span class="nf">InitialCreate</span>
</code></pre></div></div>
<p>This will create a new migration file named “InitialCreate” under the Migrations folder of your</p>

<ul>
  <li>Run the following command in PMC</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">Update-Database</span>
</code></pre></div></div>

<p><strong>Step 9: Run the application and test concurrency</strong></p>

<ul>
  <li>Create a new record by PostBooking action using swagger. Sample example for post data.</li>
</ul>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"bookingID"</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w">
  </span><span class="nl">"customerName"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Mahedee Hasan"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"roomID"</span><span class="p">:</span><span class="w"> </span><span class="mi">10</span><span class="p">,</span><span class="w">
  </span><span class="nl">"bookingDate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2024-01-18T16:30:41.650Z"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"checkInDate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2024-01-18T16:30:41.650Z"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"checkOutDate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2024-01-18T16:30:41.650Z"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<ul>
  <li>Update the record using the PutBooking action in Swagger. A sample input is provided below. Meanwhile, open another tab and make an update to the record. Your record version will be altered. If you attempt to update the record using the previous record version, it will result in an exception due to concurrency. However, if no one else has updated it and you are using the correct record version, you can update the record without encountering any exceptions.</li>
</ul>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"bookingID"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
  </span><span class="nl">"customerName"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Humaira Hasan"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"roomID"</span><span class="p">:</span><span class="w"> </span><span class="mi">10</span><span class="p">,</span><span class="w">
  </span><span class="nl">"bookingDate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2024-01-18T16:30:41.650Z"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"checkInDate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2024-01-18T16:30:41.650Z"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"checkOutDate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2024-01-18T16:30:41.650Z"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"recordVersion"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ed585f2c-720d-4bbb-a361-b059509d7f61"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<ul>
  <li>Delete the record using the DeleteBooking action in Swagger. A sample input is provided below. Meanwhile, open another tab and update the record. Your record version will be changed. If you attempt to delete the record using the previous record version, it will throw an exception due to concurrency. However, if no one else has updated it and you are using the correct record version, you can delete the record without encountering any exceptions.</li>
</ul>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"bookingID"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
  </span><span class="nl">"customerName"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Humaira Hasan"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"roomID"</span><span class="p">:</span><span class="w"> </span><span class="mi">10</span><span class="p">,</span><span class="w">
  </span><span class="nl">"bookingDate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2024-01-18T16:30:41.650Z"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"checkInDate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2024-01-18T16:30:41.650Z"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"checkOutDate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2024-01-18T16:30:41.650Z"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"recordVersion"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ed585f2c-720d-4bbb-a361-b059509d7f61"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<ul>
  <li>When we execute update and delete request in the background the following query execute.</li>
</ul>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">UPDATE</span> <span class="p">[</span><span class="n">Booking</span><span class="p">]</span> <span class="k">SET</span> <span class="p">[</span><span class="n">BookingDate</span><span class="p">]</span> <span class="o">=</span> <span class="o">@</span><span class="n">p0</span><span class="p">,</span> <span class="p">[</span><span class="n">CheckInDate</span><span class="p">]</span> <span class="o">=</span> <span class="o">@</span><span class="n">p1</span><span class="p">,</span> <span class="p">[</span><span class="n">CheckOutDate</span><span class="p">]</span> <span class="o">=</span> <span class="o">@</span><span class="n">p2</span><span class="p">,</span> <span class="p">[</span><span class="n">CustomerName</span><span class="p">]</span> <span class="o">=</span> <span class="o">@</span><span class="n">p3</span><span class="p">,</span> <span class="p">[</span><span class="n">RecordVersion</span><span class="p">]</span> <span class="o">=</span> <span class="o">@</span><span class="n">p4</span><span class="p">,</span> <span class="p">[</span><span class="n">RoomID</span><span class="p">]</span> <span class="o">=</span> <span class="o">@</span><span class="n">p5</span>
<span class="k">OUTPUT</span> <span class="mi">1</span>
<span class="k">WHERE</span> <span class="p">[</span><span class="n">BookingID</span><span class="p">]</span> <span class="o">=</span> <span class="o">@</span><span class="n">p6</span> <span class="k">AND</span> <span class="p">[</span><span class="n">RecordVersion</span><span class="p">]</span> <span class="o">=</span> <span class="o">@</span><span class="n">p7</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>To view the generated SQL by Entity framework. Configre SQL Log in Program class as follows and you will see the the SQL output in Visual Studio Output window as like below.</li>
</ul>

<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddDbContext</span><span class="p">&lt;</span><span class="n">ApplicationDbContext</span><span class="p">&gt;(</span><span class="n">options</span> <span class="p">=&gt;</span>
    <span class="n">options</span><span class="p">.</span><span class="nf">UseSqlServer</span><span class="p">(</span><span class="n">builder</span><span class="p">.</span><span class="n">Configuration</span><span class="p">.</span><span class="nf">GetConnectionString</span><span class="p">(</span><span class="s">"DefaultConnection"</span><span class="p">))</span>
    <span class="p">.</span><span class="nf">LogTo</span><span class="p">(</span><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">,</span> <span class="n">LogLevel</span><span class="p">.</span><span class="n">Information</span><span class="p">));</span>
</code></pre></div></div>

<p><img src="/assets/images/posts/2023/sqloutput.png" alt="" /></p>

<p><strong><a href="https://github.com/mahedee/code-sample02/tree/master/ConcurrencyAppToken">Source code</a></strong></p>]]></content><author><name>Mahedee Hasan</name></author><category term="ASP.NET" /><category term="ASP.NET Core" /><category term="C#" /><category term="Web API" /><category term="EF" /><category term="Software Architecture" /><category term="csharp" /><category term="aspnet" /><category term="aspnetcore" /><category term="webapi" /><category term="ef" /><category term="softwarearchitecture" /><summary type="html"><![CDATA[Effectively managing concurrency is a critical concern, especially in enterprise applications, with a significant impact on financial systems. This article aims to demonstrate the practical aspects of handling concurrency in an ASP.NET Core application using both Entity Framework and SQL Server.]]></summary></entry></feed>