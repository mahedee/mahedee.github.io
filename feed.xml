<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://mahedee.net//feed.xml" rel="self" type="application/atom+xml" /><link href="https://mahedee.net//" rel="alternate" type="text/html" /><updated>2022-08-27T11:08:27+00:00</updated><id>https://mahedee.net//feed.xml</id><title type="html">Think Simple</title><subtitle>hi</subtitle><author><name>Mahedee Hasan</name></author><entry><title type="html">Tips and tricks for docker</title><link href="https://mahedee.net//docker-tips-and-tricks/" rel="alternate" type="text/html" title="Tips and tricks for docker" /><published>2022-05-06T00:00:00+00:00</published><updated>2022-05-06T00:00:00+00:00</updated><id>https://mahedee.net//docker-tips-and-tricks</id><content type="html" xml:base="https://mahedee.net//docker-tips-and-tricks/"><![CDATA[<h2 id="most-used-docker-commands-for-everyday">Most used docker commands for everyday</h2>

<ul>
  <li><strong>Docker help</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">$</span> <span class="nf">docker</span> <span class="nf">-h</span>
</code></pre></div></div>

<ul>
  <li><strong>To check docker version</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">$</span> <span class="nf">docker</span> <span class="nf">--version</span>
</code></pre></div></div>

<ul>
  <li><strong>Login to docker</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">$</span> <span class="nf">docker</span> <span class="nf">login</span> 
</code></pre></div></div>

<ul>
  <li><strong>To see list of images</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">$</span> <span class="nf">docker</span> <span class="nf">image</span> <span class="nf">ls</span>
</code></pre></div></div>

<ul>
  <li><strong>List of Containers</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">$</span> <span class="nf">docker</span> <span class="nf">container</span> <span class="nf">ls</span>
</code></pre></div></div>

<ul>
  <li><strong>See list of running containers</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">docker</span> <span class="nf">ps</span>
</code></pre></div></div>

<ul>
  <li><strong>Restart a container</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">docker</span> <span class="nf">restart</span> <span class="p">&lt;</span><span class="nf">container</span> <span class="nf">name</span><span class="p">&gt;</span>
</code></pre></div></div>

<ul>
  <li><strong>To stop docker container</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">$</span> <span class="nf">docker</span> <span class="nf">stop</span> <span class="p">&lt;</span><span class="nf">container</span> <span class="nf">id</span><span class="p">&gt;</span>
</code></pre></div></div>

<ul>
  <li><strong>Remove all docker images</strong>
    <div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">docker</span> <span class="nf">rmi</span> <span class="nf">$</span><span class="s">(docker images -q)</span>
</code></pre></div>    </div>
  </li>
  <li><strong>Stop all docker containers</strong></li>
</ul>

<pre><code class="language-cmd">docker stop $(docker ps -a -q)
</code></pre>
<p><strong>Remove all docker containers</strong></p>
<pre><code class="language-cmd">docker rm $(docker ps -a -q)
</code></pre>

<p><strong>Deleting no longer needed containers (stopped)</strong></p>
<pre><code class="language-cmd">docker container prune
</code></pre>

<p><strong>Deleting no longer needed images</strong></p>
<pre><code class="language-cmd">docker image prune
</code></pre>

<p><strong>Delete all volumes, which are not used by any existing container</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker volume prune
</code></pre></div></div>
<p><strong>Same for unused networks</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker network prune
</code></pre></div></div>

<ul>
  <li><strong>To run docker composer</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">$</span> <span class="nf">docker-compose</span> <span class="nf">up</span>
</code></pre></div></div>

<ul>
  <li><strong>Build a docker image</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">Syntax:</span>
<span class="nf">$</span> <span class="nf">docker</span> <span class="nf">build</span> <span class="nf">-t</span> <span class="p">&lt;</span><span class="nf">any</span> <span class="nf">tag</span> <span class="nf">name</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nf">directory</span> <span class="nf">of</span> <span class="nf">the</span> <span class="nf">docker</span> <span class="nf">file</span><span class="p">&gt;</span>
<span class="nf">Example:</span>
<span class="nf">$</span> <span class="nf">docker</span> <span class="nf">build</span> <span class="nf">-t</span> <span class="nf">aspnetcore</span><span class="nv">/generator</span> <span class="nf">.</span>   
<span class="nf">Explanation:</span> 
<span class="nf">Here</span> <span class="nf">aspnetcore</span><span class="nv">/generator</span> <span class="nf">is</span> <span class="nf">tag</span> <span class="nf">name</span> <span class="kr">and</span> <span class="nf">'.'</span> <span class="nf">means</span> <span class="nf">current</span> <span class="nf">directory</span>
</code></pre></div></div>

<ul>
  <li><strong>To run a docker image</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">docker</span> <span class="nb">run</span> <span class="nf">--rm</span> <span class="nf">-it</span> <span class="nf">-p</span> <span class="nf">8000:80</span> <span class="nf">mcr.microsoft.com</span><span class="nv">/dotnet/core/samples:aspnetapp</span>
</code></pre></div></div>

<p>The sample asp.net core application will run on http://localhost:8000. Here, 8000 is host machine port and 80 is container port.</p>

<ul>
  <li><strong>SSH into container</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">docker</span> <span class="nb">exec</span> <span class="nf">-it</span> <span class="p">&lt;</span><span class="nf">container-id</span><span class="p">&gt;</span> <span class="nf">sh</span>
<span class="p">&gt;&gt;</span><span class="nf">ls</span> <span class="s">(Type ls to see all files and directory)</span>
<span class="p">&gt;&gt;</span><span class="nb">exit</span> <span class="s">(type exit to return from the container)</span>
</code></pre></div></div>

<ul>
  <li><strong>View information about your container using command</strong>
    <div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">PS</span> <span class="nf">C:\Users\mahedee</span><span class="p">&gt;</span> <span class="nf">docker</span> <span class="nb">exec</span> <span class="nf">-it</span> <span class="nf">b73cb9467f5a</span> <span class="nf">sh</span>
<span class="nf">#</span> <span class="nf">cd</span> <span class="nf">..</span>
<span class="nf">#</span> <span class="nf">ls</span>
<span class="nf">app</span>  <span class="nf">bin</span>  <span class="nf">boot</span>  <span class="nf">dev</span>  <span class="nf">etc</span>  <span class="nf">home</span>  <span class="nf">lib</span>  <span class="nf">lib64</span>  <span class="nf">media</span>  <span class="nf">mnt</span>  <span class="nf">opt</span>  <span class="nf">proc</span>  <span class="nf">remote_debugger</span>  <span class="nf">root</span>  <span class="nb">run</span>  <span class="nf">sbin</span>  <span class="nf">src</span>  <span class="nf">srv</span>  <span class="nf">sys</span>  <span class="nf">tmp</span>  <span class="nf">usr</span>  <span class="nf">var</span>
<span class="nf">#</span> <span class="nf">cd</span> <span class="nf">app</span>
<span class="nf">#</span> <span class="nf">ls</span>
<span class="nf">Controllers</span>  <span class="nf">Dockerfile</span>  <span class="nf">HRM.API.csproj</span>  <span class="nf">HRM.API.csproj.user</span>  <span class="nf">Program.cs</span>  <span class="nf">Properties</span>  <span class="nf">WeatherForecast.cs</span>  <span class="nf">appsettings.Development.json</span>  <span class="nf">appsettings.json</span>  <span class="nf">bin</span>  <span class="nf">obj</span>
<span class="nf">#</span> <span class="nf">cd</span> <span class="nf">..</span>
<span class="nf">#</span> <span class="nf">ls</span>
<span class="nf">app</span>  <span class="nf">bin</span>  <span class="nf">boot</span>  <span class="nf">dev</span>  <span class="nf">etc</span>  <span class="nf">home</span>  <span class="nf">lib</span>  <span class="nf">lib64</span>  <span class="nf">media</span>  <span class="nf">mnt</span>  <span class="nf">opt</span>  <span class="nf">proc</span>  <span class="nf">remote_debugger</span>  <span class="nf">root</span>  <span class="nb">run</span>  <span class="nf">sbin</span>  <span class="nf">src</span>  <span class="nf">srv</span>  <span class="nf">sys</span>  <span class="nf">tmp</span>  <span class="nf">usr</span>  <span class="nf">var</span>
<span class="nf">#</span> <span class="nf">cd</span> <span class="nf">src</span>
<span class="nf">#</span> <span class="nf">ls</span>
<span class="nf">HRM.API</span>  <span class="nf">HRM.API.sln</span>  <span class="nf">bin</span>  <span class="nf">docker-compose.dcproj</span>  <span class="nf">docker-compose.override.yml</span>  <span class="nf">docker-compose.yml</span>  <span class="nf">obj</span>
<span class="nf">#</span> <span class="nf">cd</span> <span class="nf">bin</span>
<span class="nf">#</span> <span class="nf">ls</span>
<span class="nf">Debug</span>
<span class="nf">#</span> <span class="nf">cd</span> <span class="nf">debug</span>
<span class="nf">#</span> <span class="nf">ls</span>
<span class="nf">HRM.API.deps.json</span>  <span class="nf">HRM.API.exe</span>  <span class="nf">HRM.API.runtimeconfig.json</span>  <span class="nf">Swashbuckle.AspNetCore.Swagger.dll</span>     <span class="nf">Swashbuckle.AspNetCore.SwaggerUI.dll</span>  <span class="nf">appsettings.json</span>
<span class="nf">HRM.API.dll</span>        <span class="nf">HRM.API.pdb</span>  <span class="nf">Microsoft.OpenApi.dll</span>       <span class="nf">Swashbuckle.AspNetCore.SwaggerGen.dll</span>  <span class="nf">appsettings.Development.json</span>
<span class="nf">#</span>
</code></pre></div>    </div>
  </li>
  <li><strong>Run a command in a running container</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">docker</span> <span class="nb">exec</span> <span class="p">[</span><span class="nf">OPTIONS</span><span class="p">]</span> <span class="nf">CONTAINER</span> <span class="nf">COMMAND</span> <span class="p">[</span><span class="nf">ARG...</span><span class="p">]</span>

<span class="nf">Example</span>
<span class="nf">$</span> <span class="nf">docker</span> <span class="nb">exec</span> <span class="nf">-ti</span> <span class="mf">34717</span> <span class="nf">sh</span> <span class="nf">-c</span> <span class="nf">"echo</span> <span class="nf">a</span> <span class="nf">&amp;&amp;</span> <span class="nf">echo</span> <span class="nf">b"</span>
<span class="kr">or</span>
<span class="nf">$</span> <span class="nf">docker</span> <span class="nb">exec</span> <span class="nf">-ti</span> <span class="nf">my_container</span> <span class="nf">sh</span> <span class="nf">-c</span> <span class="nf">"echo</span> <span class="nf">a</span> <span class="nf">&amp;&amp;</span> <span class="nf">echo</span> <span class="nf">b"</span>
<span class="kr">or</span> 
<span class="nf">$</span> <span class="nf">docker</span> <span class="nb">exec</span> <span class="nf">-ti</span> <span class="nf">my_container</span> <span class="nf">sh</span> <span class="nf">-c</span> <span class="nf">"dir"</span>
</code></pre></div></div>

<ul>
  <li><strong>To run bash in a container</strong></li>
</ul>

<p>Syntax:</p>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">$</span> <span class="nf">docker</span> <span class="nb">exec</span> <span class="nf">-it</span> <span class="p">&lt;</span><span class="nf">container</span> <span class="nf">id</span><span class="p">&gt;</span> <span class="nf">bas</span>
<span class="nf">Example:</span>
<span class="nf">$</span> <span class="nf">docker</span> <span class="nb">exec</span> <span class="nf">-it</span> <span class="nf">2f7</span> <span class="nf">bash</span>
</code></pre></div></div>

<p><strong>View information about your container user Visual Studio</strong></p>

<ul>
  <li>Use Ctrl+Q to activate Visual Studio Search Box, and type containers.</li>
  <li>Or, Go to View &gt; Other Windows &gt; Containers.</li>
</ul>

<p><img src="/assets/images/posts/2022/vs-container.PNG" alt="" /></p>

<p>For more information see <a href="https://docs.microsoft.com/en-us/visualstudio/containers/view-and-diagnose-containers?view=vs-2022">Use the Containers window</a></p>

<ul>
  <li><strong>Mounting a folder name ‘api’ into the container</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">$</span> <span class="nf">docker</span> <span class="nb">run</span> <span class="nf">--rm</span> <span class="nf">-it</span> <span class="nf">-v</span> <span class="nf">$</span><span class="p">{</span><span class="nf">PWD</span><span class="p">}</span><span class="nf">:C:\api</span> <span class="nf">mcr.microsoft.com</span><span class="nv">/dotnet/core/runtime:3.1</span>
</code></pre></div></div>
<p>Here ${PWD} means current directory of host machine map to the directory C:\api into the container</p>

<ul>
  <li><strong>To inspect network and other information of a container</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">$</span> <span class="nf">docker</span> <span class="nf">inspect</span> <span class="p">&lt;</span><span class="nf">container</span> <span class="nf">id</span><span class="p">&gt;</span>
</code></pre></div></div>

<ul>
  <li><strong>Run a docker image</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">Syntax:</span>
<span class="nf">$</span> <span class="nf">docker</span> <span class="nb">run</span> <span class="nf">--rm</span> <span class="nf">-it</span> <span class="nf">-p</span> <span class="p">&lt;</span><span class="nf">host</span> <span class="nf">port</span><span class="p">&gt;</span><span class="nf">:</span><span class="p">&lt;</span><span class="nf">image</span> <span class="nf">port</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nf">any</span> <span class="nf">tag</span> <span class="nf">name</span><span class="p">&gt;</span>
<span class="nf">Example:</span>
<span class="nf">$</span> <span class="nf">docker</span> <span class="nb">run</span> <span class="nf">--rm</span> <span class="nf">-it</span> <span class="nf">-p</span> <span class="nf">8777:80</span> <span class="nf">test2</span>  
<span class="nf">Explanation:</span> 
<span class="nf">Here</span> <span class="nf">test2</span> <span class="nf">is</span> <span class="nf">tag</span> <span class="nf">name</span> <span class="nf">of</span> <span class="nf">the</span> <span class="nf">image</span> <span class="nf">which</span> <span class="nf">already</span> <span class="nf">running</span>
</code></pre></div></div>

<ul>
  <li><strong>Login to docker and push an image</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">$</span> <span class="nf">docker</span> <span class="nf">login</span> 
<span class="nf">$</span> <span class="nf">docker</span> <span class="nf">push</span> <span class="nf">mahedee</span><span class="nv">/simpleapi</span>  
<span class="nf">Explanation:</span> 
<span class="nf">Here</span> <span class="nf">mahedee</span><span class="nv">/simpleapi</span> <span class="nf">is</span> <span class="nf">the</span> <span class="nf">tag</span> <span class="nf">name</span> <span class="nf">of</span> <span class="nf">the</span> <span class="nf">image</span>
</code></pre></div></div>

<ul>
  <li><strong>Setting the API Port with an Environment Variable inside a container</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">$</span> <span class="nf">export</span> <span class="nf">ASPNETCORE_URLS=http:</span><span class="err">/</span><span class="nv">/+:80</span>
</code></pre></div></div>

<ul>
  <li><strong>To see docker event in json format</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">$</span> <span class="nf">docker</span> <span class="nf">events</span> <span class="nf">--format</span> <span class="nf">''</span>

<span class="nf">Tips:</span>
<span class="nf">Run</span> <span class="nf">this</span> <span class="nf">command</span> <span class="nf">in</span> <span class="nf">another</span> <span class="nf">windows</span>
</code></pre></div></div>

<ul>
  <li><strong>To detach docker compose file</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">$</span> <span class="nf">docker-compose</span> <span class="nf">up</span> <span class="nf">-d</span>
</code></pre></div></div>
<ul>
  <li><strong>To see the log while running docker compose file</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">$</span> <span class="nf">docker-compose</span> <span class="nf">logs</span> <span class="nf">-f</span>
</code></pre></div></div>

<ul>
  <li><strong>Stop and remove containers, networks, images, and volumes</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">$</span> <span class="nf">docker-compose</span> <span class="nf">down</span>
</code></pre></div></div>

<ul>
  <li><strong>Remove one or more images</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">$</span> <span class="nf">docker</span> <span class="nf">image</span> <span class="nf">rm</span> <span class="p">&lt;</span><span class="nf">repository</span><span class="p">&gt;</span><span class="nf">:</span><span class="p">&lt;</span><span class="nf">tag</span><span class="p">&gt;</span>
<span class="nf">Example:</span>
<span class="nf">$</span> <span class="nf">docker</span> <span class="nf">image</span> <span class="nf">rm</span> <span class="nf">mahedee</span><span class="nv">/webapi:build</span>
</code></pre></div></div>

<!-- References
https://docs.microsoft.com/en-us/visualstudio/containers/view-and-diagnose-containers?view=vs-2022 

https://docs.microsoft.com/en-us/dotnet/core/docker/build-container?tabs=windows


-->

<p>__</p>]]></content><author><name>Mahedee Hasan</name></author><category term="Docker" /><category term="Commands" /><category term="commands" /><category term="docker" /><summary type="html"><![CDATA[Some tips and tricks for docker may improve your work's quality. Here, I have tried to include some commands, tricks and tips which we use everyday]]></summary></entry><entry><title type="html">How to create SSH fingerprint for Azure DevOps</title><link href="https://mahedee.net//how-to-create-ssh-fingerprint-for-azure-devops/" rel="alternate" type="text/html" title="How to create SSH fingerprint for Azure DevOps" /><published>2022-04-10T00:00:00+00:00</published><updated>2022-04-10T00:00:00+00:00</updated><id>https://mahedee.net//how-to-create-ssh-fingerprint-for-azure-devops</id><content type="html" xml:base="https://mahedee.net//how-to-create-ssh-fingerprint-for-azure-devops/"><![CDATA[<p>It seems easy to create SSH fingerprint and connect Azure DevOps or Github. But, sometimes, we face some problem which is hectic. In this step by step article, I am going to show you how to create SSH fingerprint for Azure DevOps and clone a repository.</p>

<p><strong>Step 1:Create SSH Keys</strong></p>

<ul>
  <li>Create a folder if not exists - name .ssh in the following directory.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>C:\Users\mahedee
</code></pre></div></div>

<ul>
  <li>
    <p>Go to run and type: <code class="language-plaintext highlighter-rouge">%userprofile%\.ssh</code></p>
  </li>
  <li>
    <p>Run the powershell command in the following directory.</p>
  </li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>C:\Users\mahedee\.ssh
</code></pre></div></div>

<ul>
  <li>Run the follwing command on powershell.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">ssh-keygen</span> <span class="nf">-C</span> <span class="nf">"test-git-dev-azure.com"</span>
</code></pre></div></div>

<p><img src="/assets/images/posts/2022/ssh-01.PNG" alt="" /></p>

<p><strong>Step 2: Add the public key to Azure DevOps</strong></p>

<ul>
  <li>Now go to the Azure DevOps web portal. Go to the avatar on the upper right corner. Select SSH public keys.</li>
</ul>

<p><img src="/assets/images/posts/2022/ssh-02.PNG" alt="" /></p>

<ul>
  <li>Select + New Key button on the upper right corner.</li>
</ul>

<p><img src="/assets/images/posts/2022/ssh-03.PNG" alt="" /></p>

<ul>
  <li>Copy the key from <code class="language-plaintext highlighter-rouge">C:\Users\mahedee\.ssh\id_rsa.pub</code> . The content of the id_rsa.pub file that you have already generated and pest the content on Public Key Data text box as belows.</li>
</ul>

<p><img src="/assets/images/posts/2022/ssh-04.PNG" alt="" /></p>

<ul>
  <li>Now click add button.</li>
</ul>

<p><strong>Step 3: Clone your repository</strong></p>

<ul>
  <li>Now run powershell command and clone a repository using SSH as bellows.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">git</span> <span class="nf">clone</span> <span class="nf">git@ssh.dev.azure.com:v3</span><span class="nv">/yourorganization/yourrepository</span>
</code></pre></div></div>

<p><strong>Troubleshooting</strong></p>

<p><strong>Problem</strong></p>

<p>After configuring SSH, I got the following error while tried to clone repository.</p>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">git</span> <span class="nf">clone</span> <span class="nf">git@ssh.dev.azure.com:v3</span><span class="nv">/yourorganization/yourrepository</span>
</code></pre></div></div>

<p>I was getting the following message:</p>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">git@ssh.dev.azure.com's</span> <span class="nf">password:</span>
</code></pre></div></div>

<p>I have tried all using all sorts of password but failed.</p>

<p><strong>Solution</strong></p>

<ol>
  <li>OpenSSH Authentication Agent was disabled on my PC. I started the service.</li>
</ol>

<p><img src="/assets/images/posts/2022/ssh-05.PNG" alt="" /></p>

<ol>
  <li>SSH.exe was not added on environment varaible. I have added it on environment variable.</li>
</ol>

<p><img src="/assets/images/posts/2022/ssh-06.PNG" alt="" /></p>

<p>Then I tried to clone the repository and It was working fine.</p>]]></content><author><name>Mahedee Hasan</name></author><category term="Command" /><category term="Source Control" /><category term="command" /><category term="sourcecontrol" /><summary type="html"><![CDATA[It seems easy to create SSH fingerprint and connect Azure DevOps or Github. But, sometimes, we face some problem which is hectic. In this step by step article, I am going to show you how to create SSH fingerprint for Azure DevOps and clone a repository.]]></summary></entry><entry><title type="html">Dot net command at a glance</title><link href="https://mahedee.net//dotnet-command-at-a-glance/" rel="alternate" type="text/html" title="Dot net command at a glance" /><published>2022-04-05T00:00:00+00:00</published><updated>2022-04-05T00:00:00+00:00</updated><id>https://mahedee.net//dotnet-command-at-a-glance</id><content type="html" xml:base="https://mahedee.net//dotnet-command-at-a-glance/"><![CDATA[<ul>
  <li><strong>Verify the dotnet version</strong></li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dotnet --version
</code></pre></div></div>

<ul>
  <li><strong>You can see all the SDKs and runtimes installed by entering</strong></li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dotnet --info
</code></pre></div></div>

<ul>
  <li><strong>To see a list of project templates currently available</strong></li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dotnet new --list
</code></pre></div></div>

<ul>
  <li><strong>Create a console application hame helloworld</strong></li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mkdir helloworld
cd helloworld
dotnet new console
</code></pre></div></div>
<p>or</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dotnet new console --name myhelloworld
</code></pre></div></div>

<ul>
  <li><strong>Create a web application hame myhelloweb</strong></li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mkdir helloweb
cd helloweb
dotnet new mvc --name myhelloweb
</code></pre></div></div>

<ul>
  <li><strong>To restore dot net dependencies</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">dotnet</span> <span class="nb">restore</span>
</code></pre></div></div>

<ul>
  <li><strong>To build dot net application</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">dotnet</span> <span class="nf">build</span>
</code></pre></div></div>

<ul>
  <li><strong>Run the application, go to the project directory</strong></li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dotnet run
</code></pre></div></div>

<ul>
  <li><strong>To publish the application, go to the project directory</strong></li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dotnet publish
</code></pre></div></div>

<ul>
  <li><strong>To install dotnet package</strong></li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">Syntax:</span>
<span class="nf">$</span> <span class="nf">dotnet</span> <span class="nb">add</span> <span class="nf">package</span> <span class="p">&lt;</span><span class="nf">PackageName</span><span class="p">&gt;</span> 
<span class="nf">Example:</span>
<span class="nf">$</span> <span class="nf">dotnet</span> <span class="nb">add</span> <span class="nf">package</span> <span class="nf">MailKit</span> 
</code></pre></div></div>

<ul>
  <li><strong>Create a new webapi project</strong></li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dotnet new webapi --name mywebapi
dotnet run
</code></pre></div></div>

<ul>
  <li><strong>Create dotnet Razor Page Project</strong></li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dotnet new razor
</code></pre></div></div>

<ul>
  <li><strong>Create Razor Page. Go into the Pages folder and create anew folder name Employees and enter the following command</strong></li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dotnet new page -n Index
</code></pre></div></div>]]></content><author><name>Mahedee Hasan</name></author><category term="Commands" /><category term=".NET" /><category term="dotnet" /><category term="commands" /><category term="vscode" /><summary type="html"><![CDATA[Sometime we need to use dotnet command to create, build and run an application. Here, I have shared some common used dotnet commands]]></summary></entry><entry><title type="html">Configure CI/CD pipeline with Jenkins and Github using an asp.net core application</title><link href="https://mahedee.net//configure-ci-cd-pipeline-with-jenkins-github-and-asp.net-core/" rel="alternate" type="text/html" title="Configure CI/CD pipeline with Jenkins and Github using an asp.net core application" /><published>2022-03-25T00:00:00+00:00</published><updated>2022-03-25T00:00:00+00:00</updated><id>https://mahedee.net//configure-ci-cd-pipeline-with-jenkins-github-and-asp.net-core</id><content type="html" xml:base="https://mahedee.net//configure-ci-cd-pipeline-with-jenkins-github-and-asp.net-core/"><![CDATA[<p><strong>Overview</strong></p>

<p>Jenkins is an open source automation server to facilitate CI/CD. It helps to automate software development jobs like building, testing, and deploying. In this article we are going to show you how to configure CI/CD pipeline with Jenkins and Github for an ASP.NET Core Web API application.</p>

<p><strong>Tools and Technology used</strong><br />
The following tools and technologies are used to configure CI/CD</p>

<ul>
  <li>Visual Studio 2022</li>
  <li>Visual C#</li>
  <li>ASP.NET Core Web API</li>
  <li>Jenkins</li>
  <li>Github</li>
  <li>IIS</li>
</ul>

<p>Let’s configure Jenkins for an asp.net core web api applications.</p>

<p><strong>Step 1: Download and install Java</strong></p>

<p>Jenkin is developed by Java. So it needs Java runtime to run. Download and install latest version of Java SDK from <a href="https://www.java.com/en/">here</a></p>

<p><strong>Step 2: Download Jenkins</strong></p>

<ul>
  <li>Download Jenkins from <a href="https://jenkins.io/">here</a></li>
  <li>Click Download -&gt; Download Jenkins 2.332.1 LTS for: -&gt; Windows</li>
</ul>

<p><strong>Step 3: Install Jenkins on Windows</strong></p>

<ul>
  <li>Double click on Jenkins.msi file and Click Next</li>
  <li>Choose Logon Type (I have choosen Run Service as LocalSystem) and clik next.</li>
  <li>Type a port number or keep default 8080 (I have choosen 8080). Click Test port and Next.</li>
  <li>Once the installation is done. Navigate to the URL http://localhost:8080/ . You will get an screen mentioned Unlock Jenkins.</li>
  <li>Go to the file mentioned in the screen and copy and pest the password on Andminstrator Password text box and click continue.</li>
  <li>Now you will get the following screen and click on Install suggested plugins.</li>
</ul>

<p><img src="/assets/images/posts/2022/jenkins-1.PNG" alt="" /></p>

<ul>
  <li>Wait untill all plugins are installed. If any plugins installation is failed, try again. Once installation is done, you will see the following screen.</li>
</ul>

<p><img src="/assets/images/posts/2022/jenkins-2.PNG" alt="" /></p>

<ul>
  <li>Fill up the form, type user name and passwrod, and click Save &amp; Continue.</li>
  <li>You will get the another screen, clik Save &amp; Finish.</li>
  <li>Now our jenkins is ready. Click Start using Jenkins.</li>
</ul>

<p><strong>Step 4: To avoid a login each time do the following</strong></p>

<ul>
  <li>Navigate Manage Jenkins -&gt; Configure Global Security</li>
  <li>Mark “Allow anonymous read access” as below</li>
</ul>

<p><img src="/assets/images/posts/2022/global-security.PNG" alt="" /></p>

<p><strong>Step 5: Install some custom plugins</strong></p>

<ul>
  <li>Navigate to “Manage Jenkins” -&gt; “Manage Plugins”</li>
  <li>Click “Available” tab</li>
  <li>Install MSBuild, MSTest, MSTestRunner, PowerShell, VSTestRunner and Git plugin if those are not already installed.</li>
  <li>You can use search field to find out the plugins.</li>
  <li>Now click Install without restart.</li>
</ul>

<p><strong>Step 6: Create an asp.net core web api project</strong></p>

<p><strong>Step 6.1: Create an Web api project</strong></p>

<ul>
  <li>Create a ASP.NET Core Web API Project Name HRM.API. Keep Solution name as HRM.</li>
</ul>

<p><strong>Step 6.2: Install the nuget packages</strong></p>

<ul>
  <li>Install the following nuget packages on HRM.API project.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore</span> <span class="nf">6.0.3</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore.InMemory</span> <span class="nf">6.0.3</span>
</code></pre></div></div>

<p><strong>Step 6.3: Create model class</strong></p>

<ul>
  <li>Create a model class name - Employee in Models folder.</li>
</ul>

<p><strong>Employee.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">HRM.API.Models</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Employee</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Designation</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">FathersName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">MothersName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="n">DateTime</span> <span class="n">DateOfBirth</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 6.4: Create Context and Seed data generator class in Db folder</strong></p>

<p><strong>HRMContext.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">HRM.API.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">HRM.API.Db</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">HRMContext</span> <span class="p">:</span> <span class="n">DbContext</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">HRMContext</span><span class="p">(</span><span class="n">DbContextOptions</span><span class="p">&lt;</span><span class="n">HRMContext</span><span class="p">&gt;</span> <span class="n">options</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
        <span class="p">{</span>

        <span class="p">}</span>
        <span class="k">public</span> <span class="n">DbSet</span><span class="p">&lt;</span><span class="n">Employee</span><span class="p">&gt;</span> <span class="n">Employees</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>SeedDataGenerator.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">HRM.API.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">HRM.API.Db</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">SeedDataGenerator</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Initialize</span><span class="p">(</span><span class="n">IServiceProvider</span> <span class="n">serviceProvider</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">context</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">HRMContext</span><span class="p">(</span>
                <span class="n">serviceProvider</span><span class="p">.</span><span class="n">GetRequiredService</span><span class="p">&lt;</span><span class="n">DbContextOptions</span><span class="p">&lt;</span><span class="n">HRMContext</span><span class="p">&gt;&gt;()))</span>
            <span class="p">{</span>
                <span class="c1">// Check any employee exists </span>
                <span class="k">if</span> <span class="p">(</span><span class="n">context</span><span class="p">.</span><span class="n">Employees</span><span class="p">.</span><span class="nf">Any</span><span class="p">())</span>
                <span class="p">{</span>
                    <span class="k">return</span><span class="p">;</span> <span class="c1">// Data already exists no need to generate</span>
                <span class="p">}</span>

                <span class="n">context</span><span class="p">.</span><span class="n">Employees</span><span class="p">.</span><span class="nf">AddRange</span><span class="p">(</span>
                    <span class="k">new</span> <span class="n">Employee</span>
                    <span class="p">{</span>
                        <span class="n">Name</span> <span class="p">=</span> <span class="s">"Md. Mahedee Hasan"</span><span class="p">,</span>
                        <span class="n">Designation</span> <span class="p">=</span> <span class="s">"Head of Software Development"</span><span class="p">,</span>
                        <span class="n">FathersName</span> <span class="p">=</span> <span class="s">"Yeasin Bhuiyan"</span><span class="p">,</span>
                        <span class="n">MothersName</span> <span class="p">=</span> <span class="s">"Moriom Begum"</span><span class="p">,</span>
                        <span class="n">DateOfBirth</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">DateTime</span><span class="p">(</span><span class="m">1984</span><span class="p">,</span> <span class="m">12</span><span class="p">,</span> <span class="m">19</span><span class="p">,</span> <span class="m">00</span><span class="p">,</span> <span class="m">00</span><span class="p">,</span> <span class="m">00</span><span class="p">)</span>
                    <span class="p">},</span>

                    <span class="k">new</span> <span class="n">Employee</span>
                    <span class="p">{</span>
                        <span class="n">Name</span> <span class="p">=</span> <span class="s">"Khaleda Islam"</span><span class="p">,</span>
                        <span class="n">Designation</span> <span class="p">=</span> <span class="s">"Software Engineer"</span><span class="p">,</span>
                        <span class="n">FathersName</span> <span class="p">=</span> <span class="s">"Shahidul Islam"</span><span class="p">,</span>
                        <span class="n">MothersName</span> <span class="p">=</span> <span class="s">"Momtaz Begum"</span><span class="p">,</span>
                        <span class="n">DateOfBirth</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">DateTime</span><span class="p">(</span><span class="m">1990</span><span class="p">,</span> <span class="m">10</span><span class="p">,</span> <span class="m">29</span><span class="p">,</span> <span class="m">00</span><span class="p">,</span> <span class="m">00</span><span class="p">,</span> <span class="m">00</span><span class="p">)</span>
                    <span class="p">},</span>

                    <span class="k">new</span> <span class="n">Employee</span>
                    <span class="p">{</span>
                        <span class="n">Name</span> <span class="p">=</span> <span class="s">"Tahiya Hasan Arisha"</span><span class="p">,</span>
                        <span class="n">Designation</span> <span class="p">=</span> <span class="s">"Jr. Software Engineer"</span><span class="p">,</span>
                        <span class="n">FathersName</span> <span class="p">=</span> <span class="s">"Md. Mahedee Hasan"</span><span class="p">,</span>
                        <span class="n">MothersName</span> <span class="p">=</span> <span class="s">"Khaleda Islam"</span><span class="p">,</span>
                        <span class="n">DateOfBirth</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">DateTime</span><span class="p">(</span><span class="m">2017</span><span class="p">,</span> <span class="m">09</span><span class="p">,</span> <span class="m">17</span><span class="p">,</span> <span class="m">00</span><span class="p">,</span> <span class="m">00</span><span class="p">,</span> <span class="m">00</span><span class="p">)</span>
                    <span class="p">},</span>

                    <span class="k">new</span> <span class="n">Employee</span>
                    <span class="p">{</span>
                        <span class="n">Name</span> <span class="p">=</span> <span class="s">"Humaira Hasan"</span><span class="p">,</span>
                        <span class="n">Designation</span> <span class="p">=</span> <span class="s">"Jr. Software Engineer"</span><span class="p">,</span>
                        <span class="n">FathersName</span> <span class="p">=</span> <span class="s">"Md. Mahedee Hasan"</span><span class="p">,</span>
                        <span class="n">MothersName</span> <span class="p">=</span> <span class="s">"Khaleda Islam"</span><span class="p">,</span>
                        <span class="n">DateOfBirth</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">DateTime</span><span class="p">(</span><span class="m">2021</span><span class="p">,</span> <span class="m">03</span><span class="p">,</span> <span class="m">17</span><span class="p">,</span> <span class="m">00</span><span class="p">,</span> <span class="m">00</span><span class="p">,</span> <span class="m">00</span><span class="p">)</span>
                    <span class="p">}</span>
                <span class="p">);</span>
                <span class="n">context</span><span class="p">.</span><span class="nf">SaveChanges</span><span class="p">();</span>

            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>
<p><strong>Step 6.5:Create Repository and It’s Interface in Repository folder</strong></p>

<p><strong>IEmployeeRepository.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">HRM.API.Models</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">HRM.API.Repository</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">interface</span> <span class="nc">IEmployeeRepository</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Employee</span><span class="p">&gt;&gt;</span> <span class="nf">SelectAllEmployees</span><span class="p">();</span>
        <span class="k">public</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Employee</span><span class="p">&gt;</span> <span class="nf">SelectEmployee</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">);</span>
        <span class="k">public</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="nf">UpdateEmployee</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="n">Employee</span> <span class="n">employee</span><span class="p">);</span>
        <span class="k">public</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="nf">SaveEmployee</span><span class="p">(</span><span class="n">Employee</span> <span class="n">employee</span><span class="p">);</span>
        <span class="k">public</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="nf">DeleteEmployee</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>EmployeeRepository.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">HRM.API.Db</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">HRM.API.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">HRM.API.Repository</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">EmployeeRepository</span> <span class="p">:</span> <span class="n">IEmployeeRepository</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">HRMContext</span> <span class="n">_context</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">EmployeeRepository</span><span class="p">(</span><span class="n">HRMContext</span> <span class="n">context</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_context</span> <span class="p">=</span> <span class="n">context</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Employee</span><span class="p">&gt;&gt;</span> <span class="nf">SelectAllEmployees</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="kt">var</span> <span class="n">allemployess</span> <span class="p">=</span> <span class="n">_context</span><span class="p">.</span><span class="n">Employees</span><span class="p">.</span><span class="nf">ToListAsync</span><span class="p">();</span>
                <span class="k">return</span> <span class="k">await</span> <span class="n">allemployess</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exp</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="p">(</span><span class="n">exp</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Employee</span><span class="p">&gt;</span> <span class="nf">SelectEmployee</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="kt">var</span> <span class="n">employee</span> <span class="p">=</span> <span class="n">_context</span><span class="p">.</span><span class="n">Employees</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
                <span class="k">return</span> <span class="k">await</span> <span class="n">employee</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exp</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="p">(</span><span class="n">exp</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="nf">UpdateEmployee</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="n">Employee</span> <span class="n">employee</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">id</span> <span class="p">!=</span> <span class="n">employee</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="s">"Cannot be updated!"</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="n">_context</span><span class="p">.</span><span class="nf">Entry</span><span class="p">(</span><span class="n">employee</span><span class="p">).</span><span class="n">State</span> <span class="p">=</span> <span class="n">EntityState</span><span class="p">.</span><span class="n">Modified</span><span class="p">;</span>

            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>
                <span class="k">return</span> <span class="s">"Data updated successfully!"</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">DbUpdateConcurrencyException</span> <span class="n">exp</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(!</span><span class="nf">EmployeeExists</span><span class="p">(</span><span class="n">id</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="k">return</span> <span class="s">"Data not found!"</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="k">else</span>
                <span class="p">{</span>
                    <span class="k">throw</span> <span class="p">(</span><span class="n">exp</span><span class="p">);</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="nf">SaveEmployee</span><span class="p">(</span><span class="n">Employee</span> <span class="n">employee</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_context</span><span class="p">.</span><span class="n">Employees</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">employee</span><span class="p">);</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>
                <span class="k">return</span> <span class="s">"Data saved successfully!"</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exp</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="p">(</span><span class="n">exp</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="nf">DeleteEmployee</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">employee</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Employees</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">employee</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="s">"Data not found!"</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="n">_context</span><span class="p">.</span><span class="n">Employees</span><span class="p">.</span><span class="nf">Remove</span><span class="p">(</span><span class="n">employee</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>

            <span class="k">return</span> <span class="s">"Data deleted successfully!"</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="kt">bool</span> <span class="nf">EmployeeExists</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">_context</span><span class="p">.</span><span class="n">Employees</span><span class="p">.</span><span class="nf">Any</span><span class="p">(</span><span class="n">e</span> <span class="p">=&gt;</span> <span class="n">e</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">id</span><span class="p">);</span>
        <span class="p">}</span>

    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 6.6: Create Employee Service class and it’s interface in Services folder</strong></p>

<p><strong>IEmployeeService</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">HRM.API.Models</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">HRM.API.Services</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">interface</span> <span class="nc">IEmployeeService</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Employee</span><span class="p">&gt;&gt;</span> <span class="nf">GetEmployees</span><span class="p">();</span>
        <span class="k">public</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Employee</span><span class="p">&gt;</span> <span class="nf">GetEmployee</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">);</span>
        <span class="k">public</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="nf">EditEmployee</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="n">Employee</span> <span class="n">employee</span><span class="p">);</span>
        <span class="k">public</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="nf">AddEmployee</span><span class="p">(</span><span class="n">Employee</span> <span class="n">employee</span><span class="p">);</span>
        <span class="k">public</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="nf">RemoveEmployee</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>EmployeeService.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">HRM.API.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">HRM.API.Repository</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">HRM.API.Services</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">EmployeeService</span> <span class="p">:</span> <span class="n">IEmployeeService</span>
    <span class="p">{</span>
        <span class="n">IEmployeeRepository</span> <span class="n">_employeeRepository</span><span class="p">;</span>
        <span class="k">public</span> <span class="nf">EmployeeService</span><span class="p">(</span><span class="n">IEmployeeRepository</span> <span class="n">repository</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_employeeRepository</span> <span class="p">=</span> <span class="n">repository</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Employee</span><span class="p">&gt;&gt;</span> <span class="nf">GetEmployees</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="k">await</span> <span class="n">_employeeRepository</span><span class="p">.</span><span class="nf">SelectAllEmployees</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exp</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="p">(</span><span class="n">exp</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Employee</span><span class="p">&gt;</span> <span class="nf">GetEmployee</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="k">await</span> <span class="n">_employeeRepository</span><span class="p">.</span><span class="nf">SelectEmployee</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exp</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="p">(</span><span class="n">exp</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="nf">EditEmployee</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="n">Employee</span> <span class="n">employee</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="k">await</span> <span class="n">_employeeRepository</span><span class="p">.</span><span class="nf">UpdateEmployee</span><span class="p">(</span><span class="n">id</span><span class="p">,</span> <span class="n">employee</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exp</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="p">(</span><span class="n">exp</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="nf">AddEmployee</span><span class="p">(</span><span class="n">Employee</span> <span class="n">employee</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="k">await</span> <span class="n">_employeeRepository</span><span class="p">.</span><span class="nf">SaveEmployee</span><span class="p">(</span><span class="n">employee</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exp</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="p">(</span><span class="n">exp</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="nf">RemoveEmployee</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="k">await</span> <span class="n">_employeeRepository</span><span class="p">.</span><span class="nf">DeleteEmployee</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exp</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="p">(</span><span class="n">exp</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>

    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 6.7: Modify Program.cs file</strong></p>

<ul>
  <li>Modify Program.cs file for InMemory database and Enable Swagger for both dev and release.</li>
</ul>

<p><strong>Program.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">HRM.API.Db</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">HRM.API.Repository</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">HRM.API.Services</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="n">WebApplication</span><span class="p">.</span><span class="nf">CreateBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>

<span class="c1">// Add services to the container.</span>

<span class="c1">// Configure in memory database</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddDbContext</span><span class="p">&lt;</span><span class="n">HRMContext</span><span class="p">&gt;(</span><span class="n">opt</span> <span class="p">=&gt;</span> <span class="n">opt</span><span class="p">.</span><span class="nf">UseInMemoryDatabase</span><span class="p">(</span><span class="s">"HRMDB"</span><span class="p">));</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">();</span>
<span class="c1">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddEndpointsApiExplorer</span><span class="p">();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddSwaggerGen</span><span class="p">();</span>


<span class="c1">//Register DI</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddScoped</span><span class="p">&lt;</span><span class="n">IEmployeeRepository</span><span class="p">,</span> <span class="n">EmployeeRepository</span><span class="p">&gt;();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddScoped</span><span class="p">&lt;</span><span class="n">IEmployeeService</span><span class="p">,</span> <span class="n">EmployeeService</span><span class="p">&gt;();</span>


<span class="kt">var</span> <span class="n">app</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>


<span class="c1">// 2. Find the service within the scope to use</span>
<span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">scope</span> <span class="p">=</span> <span class="n">app</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">CreateScope</span><span class="p">())</span>
<span class="p">{</span>
    <span class="c1">// 3. Get the instance of HRMContext in our service layer</span>
    <span class="kt">var</span> <span class="n">services</span> <span class="p">=</span> <span class="n">scope</span><span class="p">.</span><span class="n">ServiceProvider</span><span class="p">;</span>
    <span class="kt">var</span> <span class="n">context</span> <span class="p">=</span> <span class="n">services</span><span class="p">.</span><span class="n">GetRequiredService</span><span class="p">&lt;</span><span class="n">HRMContext</span><span class="p">&gt;();</span>

    <span class="c1">// 4. Call the SeedDataGenerator to generate seed data</span>
    <span class="n">SeedDataGenerator</span><span class="p">.</span><span class="nf">Initialize</span><span class="p">(</span><span class="n">services</span><span class="p">);</span>
<span class="p">}</span>



<span class="c1">// Configure the HTTP request pipeline.</span>
<span class="k">if</span> <span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">Environment</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
<span class="p">{</span>
    <span class="c1">//app.UseSwagger();</span>
    <span class="c1">//app.UseSwaggerUI();</span>
<span class="p">}</span>

<span class="c1">// To show both development and deployment</span>
<span class="n">app</span><span class="p">.</span><span class="nf">UseSwagger</span><span class="p">();</span>
<span class="n">app</span><span class="p">.</span><span class="nf">UseSwaggerUI</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseHttpsRedirection</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseAuthorization</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">MapControllers</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>

</code></pre></div></div>

<p><strong>Step 7: Create a publish profile on our application</strong></p>

<ul>
  <li>Click right button on the HRM.API Project -&gt; Click Publish.</li>
  <li>Click ‘+’ sign to create a profile.</li>
  <li>Select Folder and click Next.</li>
  <li>Release location is like - bin\Release\net6.0\publish\</li>
  <li>Click Finish</li>
  <li>From “more action” rename the profile as - JenkinsProfile</li>
  <li>
    <p>You will see two folders are created in Properties -&gt; PublishProfiles folder. Their name is - JenkinsProfile.pubxml and JenkinsProfile.pubxml.user</p>
  </li>
  <li>Modify the pubxml file in Properties/PublishProfiles/JnekinsProfile.pubxml</li>
  <li>Change WebPublishMethod to Package from FileSystem as like below.</li>
</ul>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span>
<span class="c">&lt;!--
https://go.microsoft.com/fwlink/?LinkID=208121. 
--&gt;</span>
<span class="nt">&lt;Project</span> <span class="na">ToolsVersion=</span><span class="s">"4.0"</span> <span class="na">xmlns=</span><span class="s">"http://schemas.microsoft.com/developer/msbuild/2003"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;PropertyGroup&gt;</span>
    <span class="nt">&lt;DeleteExistingFiles&gt;</span>False<span class="nt">&lt;/DeleteExistingFiles&gt;</span>
    <span class="nt">&lt;ExcludeApp_Data&gt;</span>False<span class="nt">&lt;/ExcludeApp_Data&gt;</span>
    <span class="nt">&lt;LaunchSiteAfterPublish&gt;</span>True<span class="nt">&lt;/LaunchSiteAfterPublish&gt;</span>
    <span class="nt">&lt;LastUsedBuildConfiguration&gt;</span>Release<span class="nt">&lt;/LastUsedBuildConfiguration&gt;</span>
    <span class="nt">&lt;LastUsedPlatform&gt;</span>Any CPU<span class="nt">&lt;/LastUsedPlatform&gt;</span>
    <span class="nt">&lt;PublishProvider&gt;</span>FileSystem<span class="nt">&lt;/PublishProvider&gt;</span>
    <span class="nt">&lt;PublishUrl&gt;</span>bin\Release\net6.0\publish\<span class="nt">&lt;/PublishUrl&gt;</span>
    <span class="nt">&lt;WebPublishMethod&gt;</span>Package<span class="nt">&lt;/WebPublishMethod&gt;</span>
  <span class="nt">&lt;/PropertyGroup&gt;</span>
<span class="nt">&lt;/Project&gt;</span>
</code></pre></div></div>

<ul>
  <li>Commit and push this changes on the github.</li>
</ul>

<p><strong>Step 8: Create a test project name HRM.Test on the same solution</strong></p>

<ul>
  <li>Add necessary test cases for HRM.API</li>
</ul>

<p><strong>Step 9: Build and Run Unit Test cases localy</strong></p>

<ul>
  <li>To build the application locally. Go to the directory of the HRM.API applycation where solution file exists.</li>
  <li>Run the following command on terminal to build the application.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">PS</span> <span class="nf">D:\Projects\Github\code-sample02\jenkins-demo\HRM</span><span class="p">&gt;</span> <span class="nf">dotnet</span> <span class="nf">build</span> <span class="nf">.\HRM.sln</span>
</code></pre></div></div>

<ul>
  <li>To Run unit test locally go the directory where test project file exists and run the following command.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">PS</span> <span class="nf">D:\Projects\Github\code-sample02\jenkins-demo\HRM\HRM.Test</span><span class="p">&gt;</span> <span class="nf">dotnet</span> <span class="nf">test</span> <span class="nf">.\HRM.Test.csproj</span>
</code></pre></div></div>

<p><strong>Step 10: Install Microsoft Web Deploy</strong></p>

<ul>
  <li>Download and install latest version of Microsoft web deploy, if it is not already installed. In my case, it is already installed with visual studio 2022.</li>
</ul>

<p><strong>Step 11: Create Credentials Id</strong></p>

<ul>
  <li>Navigate to “Manage Jenkins” -&gt; Manage Credentials -&gt; Click Jenkins -&gt; Click Global Credentials (Unrestricted) -&gt; Click Adding some credentials.</li>
</ul>

<p><img src="/assets/images/posts/2022/jenkins-6.PNG" alt="" /></p>

<ul>
  <li>In this case, I have given my Github user name and password.</li>
  <li>Fill the form and click OK</li>
  <li>Id will be generated automatically.</li>
  <li>Back to Global credentials (unrestricted) and click Update. You will get ID here.</li>
</ul>

<p><strong>Step 12: Create Pipeline using Jenkins</strong></p>

<ul>
  <li>Click “Create a job” on the Jenkins home page.</li>
</ul>

<p><img src="/assets/images/posts/2022/jenkins-3.PNG" alt="" /></p>

<ul>
  <li>Select Pipeline of the next screen, give a name of the pipeline, I am giving the name of pipeline is “HRMPipelines” and Click Ok.</li>
</ul>

<p><img src="/assets/images/posts/2022/jenkins-4.PNG" alt="" /></p>

<ul>
  <li>Now add follwoing script on Pipleline section as mentioned below.</li>
</ul>

<p><img src="/assets/images/posts/2022/jenkins-5.PNG" alt="" /></p>

<pre><code class="language-Groovy">pipeline {  
 agent any  
 environment {  
  dotnet = 'C:\\Program Files\\dotnet\\dotnet.exe'  
 }  
 stages {  
  stage('Checkout') {  
   steps {
       git credentialsId: 'aee7d65a-33a7-4616-ab5e-4a1598289b1b', url: 'https://github.com/mahedee/code-sample02.git', branch: 'main'
   }  
  }  
 stage('Build') {  
   steps {  
    bat 'dotnet build %WORKSPACE%\\jenkins-demo\\HRM\\HRM.sln --configuration Release' 
    //bat 'dotnet build C:\\ProgramData\\Jenkins\\.jenkins\\workspace\\HRMPipelines\\jenkins-demo\\HRM\\HRM.sln --configuration Release'  
   }  
  }  
  stage('Test') {  
   steps {  
    bat 'dotnet test %WORKSPACE%\\jenkins-demo\\HRM\\HRM.Test\\HRM.Test.csproj --logger:trx'  
   }  
  }
  
  stage("Release"){
      steps {
      bat 'dotnet build  %WORKSPACE%\\jenkins-demo\\HRM\\HRM.sln /p:PublishProfile=" %WORKSPACE%\\jenkins-demo\\HRM\\HRM.API\\Properties\\PublishProfiles\\JenkinsProfile.pubxml" /p:Platform="Any CPU" /p:DeployOnBuild=true /m'
    }
  }
  
  stage('Deploy') {
    steps {
    // Stop IIS
    bat 'net stop "w3svc"'
    
    // Deploy package to IIS
    bat '"C:\\Program Files (x86)\\IIS\\Microsoft Web Deploy V3\\msdeploy.exe" -verb:sync -source:package="%WORKSPACE%\\jenkins-demo\\HRM\\HRM.API\\bin\\Debug\\net6.0\\HRM.API.zip" -dest:auto -setParam:"IIS Web Application Name"="HRM.Web" -skip:objectName=filePath,absolutePath=".\\\\PackageTmp\\\\Web.config$" -enableRule:DoNotDelete -allowUntrusted=true'
    
    // Start IIS again
    bat 'net start "w3svc"'
    }
 }

 }  
} 
</code></pre>

<p>This is the sequential script for the pipeline to execute the stages one by one. Here we used 5 steps - Checkout, Build, Test, Release, Deploy</p>

<p>Stage 1 - Checkout: In this stage, we provide the URL and Git repository, branch as main and git credentials id. Which I have created on step 10. I pull the source code to workspace. Default workspace is - C:\ProgramData\Jenkins.jenkins\workspace</p>

<p>Stage 2 - Build: In this stage, I have build the specific project. Here HRM.API. Keep in mind you have to direct the location where sln file exists.</p>

<p>Stage 3 - Test : In this stage, I have run test project providing test project link.</p>

<p>Stage 4 - Release: In this stage, A release package HRM.zip is created in the mentioned location which is provided on JenkinsProfile.pubxml. You may check each steps output using console after executing pipeline.</p>

<p>Stage 5 - Deploy: In this tage, first stop IIS. Then deploy package to IIS and then Start IIS again. So, I have used three bat command here.</p>

<p><strong>Step 13: Configure Build Triggers</strong></p>

<ul>
  <li>Navigate to HRMPipelines -&gt; Build Triggers</li>
  <li>Mark GitHub hook trigger for GITScm polling and Pool SCM</li>
  <li>Type schedule as * * * * *  which means, keep checking the Git repository and as soon as commit/check-in is done, trigger the build process. Note: there is a space after each star.</li>
</ul>

<p><img src="/assets/images/posts/2022/jenkins-7.PNG" alt="" /></p>

<ul>
  <li>
    <p>You can use  */15 * * * * if you want to run pipeline after 15 minutes of push on main.</p>
  </li>
  <li>
    <p>Click Save</p>
  </li>
</ul>

<p><strong>Step 14: Run pipeline manually</strong></p>

<ul>
  <li>Go to the dashboard</li>
  <li>Click HRMPipelines</li>
  <li>Click Build Now and you will see the following screen. It means, build and deployment completed sucessfully.</li>
</ul>

<p><img src="/assets/images/posts/2022/jenkins-8.PNG" alt="" /></p>

<p><strong>Step 15: Change application and see output</strong></p>

<ul>
  <li>Change a little bit on your application</li>
  <li>Commit and push it to the Github</li>
  <li>Wait a bit and you will see the build and deployed successfully.</li>
</ul>

<p>Now test your application using the following URL:</p>

<p>http://localhost:8012/swagger/index.html</p>

<ul>
  <li>Here I have hosted the application on 8012 port on IIS.</li>
</ul>

<p><strong><a href="https://github.com/mahedee/code-sample02/tree/main/jenkins-demo">Source Code</a></strong></p>]]></content><author><name>Mahedee Hasan</name></author><category term="ASP.NET" /><category term="ASP.NET Core" /><category term="Web API" /><category term="CI/CD" /><category term="Jenkins" /><category term="Github" /><category term="IIS" /><category term="aspnet" /><category term="csharp" /><summary type="html"><![CDATA[Jenkins is an open source automation server to facilitate CI/CD. It helps to automate software development jobs like building, testing, and deploying. In this article we are going to show you how to configure CI/CD pipeline with Jenkins and Github for an ASP.NET Core Web API application.]]></summary></entry><entry><title type="html">Configure Swagger on api gateway using ocelot in asp.net core application</title><link href="https://mahedee.net//configure-swagger-on-api-gateway-using-ocelot-in-asp.net-core-application/" rel="alternate" type="text/html" title="Configure Swagger on api gateway using ocelot in asp.net core application" /><published>2022-03-18T00:00:00+00:00</published><updated>2022-03-18T00:00:00+00:00</updated><id>https://mahedee.net//configure-swagger-on-api-gateway-using-ocelot-in-asp.net-core-application</id><content type="html" xml:base="https://mahedee.net//configure-swagger-on-api-gateway-using-ocelot-in-asp.net-core-application/"><![CDATA[<!-- ## Playing with Clean Architecture and CQRS pattern using asp.net core EF and Dapper -->

<p><strong>Introduction</strong></p>

<p>Swagger configuration on API gateway is not as simple as you are configure normal application. You have to configure it in different way. In this article I will create an API gateway using ocelot and asp.net core application and show you how to configure swagger on API gateway.</p>

<p><strong>Tools and technologies used</strong></p>
<ul>
  <li>Visual Studio 2022</li>
  <li>.NET 6.0</li>
  <li>In Memory Database</li>
  <li>Entity Framework</li>
  <li>ASP.NET Core Web API</li>
  <li>C#</li>
  <li>Ocelot and</li>
  <li>MMLib.SwaggerForOcelot</li>
</ul>

<p><strong>Implementation</strong></p>

<p><strong>Step 1: Create solution and projects.</strong></p>

<ul>
  <li>Create a solution name APIGateway</li>
  <li>Add 4 new web api project, name - Catalog.API, Location.API, Ordering.API and BFF.Web in the solution.</li>
</ul>

<p>Here, BFF.Web project will act as API Gateway.</p>

<p><strong>Step 2: Install nuget packages.</strong></p>

<ul>
  <li>Install following nuget package in Catalog.API Project</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore.InMemory</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore.SqlServer</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore.Tools</span>
</code></pre></div></div>

<ul>
  <li>Install following nuget package in Ordering.API Project</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore.InMemory</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore.SqlServer</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore.Tools</span>
</code></pre></div></div>

<ul>
  <li>Install following nuget packages in BFF.Web Project</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Ocelot</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Ocelot.Provider.Polly</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Ocelot.Cache.CacheManager</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">MMLib.SwaggerForOcelot</span>
</code></pre></div></div>

<p><strong>Step 3: Organize Catalog.API Project</strong></p>

<ul>
  <li>Create a Product model class in Catalog.API/Model folder</li>
</ul>

<p><strong>Product.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">System.ComponentModel.DataAnnotations</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.ComponentModel.DataAnnotations.Schema</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Catalog.API.Model</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Product</span>
    <span class="p">{</span>
        <span class="p">[</span><span class="n">Key</span><span class="p">]</span>
        <span class="p">[</span><span class="nf">DatabaseGenerated</span><span class="p">(</span><span class="n">DatabaseGeneratedOption</span><span class="p">.</span><span class="n">Identity</span><span class="p">)]</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">string</span> <span class="n">Description</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">decimal</span> <span class="n">Price</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">int</span> <span class="n">AvailableStock</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">int</span> <span class="n">RestockThreshold</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create a CatalogContext class in Catalog.API/Db folder</li>
</ul>

<p><strong>CatalogContext.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Catalog.API.Model</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Catalog.API.Db</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CatalogContext</span> <span class="p">:</span> <span class="n">DbContext</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">CatalogContext</span><span class="p">(</span><span class="n">DbContextOptions</span><span class="p">&lt;</span><span class="n">CatalogContext</span><span class="p">&gt;</span> <span class="n">options</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
        <span class="p">{</span>

        <span class="p">}</span>

        <span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">OnModelCreating</span><span class="p">(</span><span class="n">ModelBuilder</span> <span class="n">modelBuilder</span><span class="p">)</span>
        <span class="p">{</span>

        <span class="p">}</span>

        <span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">OnConfiguring</span><span class="p">(</span><span class="n">DbContextOptionsBuilder</span> <span class="n">optionsBuilder</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">base</span><span class="p">.</span><span class="nf">OnConfiguring</span><span class="p">(</span><span class="n">optionsBuilder</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">DbSet</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="n">Products</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Modify Program.cs file as follows</li>
</ul>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Catalog.API.Db</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="n">WebApplication</span><span class="p">.</span><span class="nf">CreateBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>

<span class="c1">// Add services to the container.</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">();</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddDbContext</span><span class="p">&lt;</span><span class="n">CatalogContext</span><span class="p">&gt;(</span><span class="n">opt</span> <span class="p">=&gt;</span> <span class="n">opt</span><span class="p">.</span><span class="nf">UseInMemoryDatabase</span><span class="p">(</span><span class="s">"CatalogDB"</span><span class="p">));</span>

<span class="c1">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddEndpointsApiExplorer</span><span class="p">();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddSwaggerGen</span><span class="p">();</span>

<span class="kt">var</span> <span class="n">app</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

<span class="c1">// Configure the HTTP request pipeline.</span>
<span class="k">if</span> <span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">Environment</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
<span class="p">{</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwagger</span><span class="p">();</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwaggerUI</span><span class="p">();</span>
<span class="p">}</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseHttpsRedirection</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseAuthorization</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">MapControllers</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>

</code></pre></div></div>

<ul>
  <li>Create a conroller class name ProductsController in Catalog.API/Controllers folder</li>
</ul>

<p><strong>CatalogController.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">#</span><span class="n">nullable</span> <span class="n">disable</span>
<span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Linq</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Threading.Tasks</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Http</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Catalog.API.Db</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Catalog.API.Model</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Catalog.API.Controllers</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
    <span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">ProductsController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">CatalogContext</span> <span class="n">_context</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">ProductsController</span><span class="p">(</span><span class="n">CatalogContext</span> <span class="n">context</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_context</span> <span class="p">=</span> <span class="n">context</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/Products</span>
        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"GetAll"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;&gt;&gt;</span> <span class="nf">GetProducts</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Products</span><span class="p">.</span><span class="nf">ToListAsync</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/Products/5</span>
        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;&gt;</span> <span class="nf">GetProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">product</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Products</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">product</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="n">product</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// PUT: api/Products/5</span>
        <span class="c1">// To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754</span>
        <span class="p">[</span><span class="nf">HttpPut</span><span class="p">(</span><span class="s">"Edit/{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">PutProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="n">Product</span> <span class="n">product</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">id</span> <span class="p">!=</span> <span class="n">product</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">_context</span><span class="p">.</span><span class="nf">Entry</span><span class="p">(</span><span class="n">product</span><span class="p">).</span><span class="n">State</span> <span class="p">=</span> <span class="n">EntityState</span><span class="p">.</span><span class="n">Modified</span><span class="p">;</span>

            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">DbUpdateConcurrencyException</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(!</span><span class="nf">ProductExists</span><span class="p">(</span><span class="n">id</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
                <span class="p">}</span>
                <span class="k">else</span>
                <span class="p">{</span>
                    <span class="k">throw</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// POST: api/Products</span>
        <span class="c1">// To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754</span>
        <span class="p">[</span><span class="nf">HttpPost</span><span class="p">(</span><span class="s">"Add"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;&gt;</span> <span class="nf">PostProduct</span><span class="p">(</span><span class="n">Product</span> <span class="n">product</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_context</span><span class="p">.</span><span class="n">Products</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">product</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>

            <span class="k">return</span> <span class="nf">CreatedAtAction</span><span class="p">(</span><span class="s">"GetProduct"</span><span class="p">,</span> <span class="k">new</span> <span class="p">{</span> <span class="n">id</span> <span class="p">=</span> <span class="n">product</span><span class="p">.</span><span class="n">Id</span> <span class="p">},</span> <span class="n">product</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">// DELETE: api/Products/5</span>
        <span class="p">[</span><span class="nf">HttpDelete</span><span class="p">(</span><span class="s">"Delete/{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">DeleteProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">product</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Products</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">product</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">_context</span><span class="p">.</span><span class="n">Products</span><span class="p">.</span><span class="nf">Remove</span><span class="p">(</span><span class="n">product</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>

            <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="kt">bool</span> <span class="nf">ProductExists</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">_context</span><span class="p">.</span><span class="n">Products</span><span class="p">.</span><span class="nf">Any</span><span class="p">(</span><span class="n">e</span> <span class="p">=&gt;</span> <span class="n">e</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">id</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 4: Organize Ordering.API Project</strong></p>

<ul>
  <li>Create a Order model class in Ordering.API/Model folder</li>
</ul>

<p><strong>Order.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">namespace</span> <span class="nn">Ordering.API.Models</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Order</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Address</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="n">DateTime</span> <span class="n">OrderDate</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">string</span> <span class="n">Comments</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>


</code></pre></div></div>

<ul>
  <li>Create a OrderingContext class in Ordering.API/Db folder</li>
</ul>

<p><strong>OrderingContext.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.API.Models</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.API.Db</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">OrderingContext</span> <span class="p">:</span> <span class="n">DbContext</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">OrderingContext</span><span class="p">(</span><span class="n">DbContextOptions</span><span class="p">&lt;</span><span class="n">OrderingContext</span><span class="p">&gt;</span> <span class="n">options</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
        <span class="p">{</span>

        <span class="p">}</span>
        <span class="k">public</span> <span class="n">DbSet</span><span class="p">&lt;</span><span class="n">Ordering</span><span class="p">.</span><span class="n">API</span><span class="p">.</span><span class="n">Models</span><span class="p">.</span><span class="n">Order</span><span class="p">&gt;</span> <span class="n">Order</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>


</code></pre></div></div>

<ul>
  <li>Modify Program.cs file as follows</li>
</ul>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.API.Db</span><span class="p">;</span>

<span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="n">WebApplication</span><span class="p">.</span><span class="nf">CreateBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>

<span class="c1">// Add services to the container.</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">();</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddDbContext</span><span class="p">&lt;</span><span class="n">OrderingContext</span><span class="p">&gt;(</span><span class="n">opt</span> <span class="p">=&gt;</span> <span class="n">opt</span><span class="p">.</span><span class="nf">UseInMemoryDatabase</span><span class="p">(</span><span class="s">"CatalogDB"</span><span class="p">));</span>

<span class="c1">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddEndpointsApiExplorer</span><span class="p">();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddSwaggerGen</span><span class="p">();</span>

<span class="kt">var</span> <span class="n">app</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

<span class="c1">// Configure the HTTP request pipeline.</span>
<span class="k">if</span> <span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">Environment</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
<span class="p">{</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwagger</span><span class="p">();</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwaggerUI</span><span class="p">();</span>
<span class="p">}</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseHttpsRedirection</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseAuthorization</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">MapControllers</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>

</code></pre></div></div>

<ul>
  <li>Create a conroller class name OrdersController in Ordering.API/Controllers folder</li>
</ul>

<p><strong>OrdersController.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">#</span><span class="n">nullable</span> <span class="n">disable</span>
<span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Linq</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Threading.Tasks</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Http</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.API.Db</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.API.Models</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.API.Controllers</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
    <span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">OrdersController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">OrderingContext</span> <span class="n">_context</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">OrdersController</span><span class="p">(</span><span class="n">OrderingContext</span> <span class="n">context</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_context</span> <span class="p">=</span> <span class="n">context</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/Orders</span>
        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"GetAll"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Order</span><span class="p">&gt;&gt;&gt;</span> <span class="nf">GetOrder</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Order</span><span class="p">.</span><span class="nf">ToListAsync</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/Orders/5</span>
        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">Order</span><span class="p">&gt;&gt;</span> <span class="nf">GetOrder</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">order</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Order</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">order</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="n">order</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// PUT: api/Orders/5</span>
        <span class="c1">// To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754</span>
        <span class="p">[</span><span class="nf">HttpPut</span><span class="p">(</span><span class="s">"Edit/{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">PutOrder</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="n">Order</span> <span class="n">order</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">id</span> <span class="p">!=</span> <span class="n">order</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">_context</span><span class="p">.</span><span class="nf">Entry</span><span class="p">(</span><span class="n">order</span><span class="p">).</span><span class="n">State</span> <span class="p">=</span> <span class="n">EntityState</span><span class="p">.</span><span class="n">Modified</span><span class="p">;</span>

            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">DbUpdateConcurrencyException</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(!</span><span class="nf">OrderExists</span><span class="p">(</span><span class="n">id</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
                <span class="p">}</span>
                <span class="k">else</span>
                <span class="p">{</span>
                    <span class="k">throw</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// POST: api/Orders</span>
        <span class="c1">// To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754</span>
        <span class="p">[</span><span class="nf">HttpPost</span><span class="p">(</span><span class="s">"Add"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">Order</span><span class="p">&gt;&gt;</span> <span class="nf">PostOrder</span><span class="p">(</span><span class="n">Order</span> <span class="n">order</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_context</span><span class="p">.</span><span class="n">Order</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">order</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>

            <span class="k">return</span> <span class="nf">CreatedAtAction</span><span class="p">(</span><span class="s">"GetOrder"</span><span class="p">,</span> <span class="k">new</span> <span class="p">{</span> <span class="n">id</span> <span class="p">=</span> <span class="n">order</span><span class="p">.</span><span class="n">Id</span> <span class="p">},</span> <span class="n">order</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">// DELETE: api/Orders/5</span>
        <span class="p">[</span><span class="nf">HttpDelete</span><span class="p">(</span><span class="s">"Delete/{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">DeleteOrder</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">order</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Order</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">order</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">_context</span><span class="p">.</span><span class="n">Order</span><span class="p">.</span><span class="nf">Remove</span><span class="p">(</span><span class="n">order</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>

            <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="kt">bool</span> <span class="nf">OrderExists</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">_context</span><span class="p">.</span><span class="n">Order</span><span class="p">.</span><span class="nf">Any</span><span class="p">(</span><span class="n">e</span> <span class="p">=&gt;</span> <span class="n">e</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">id</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 5: Organize Location.API Project</strong></p>

<ul>
  <li>Create CountriesController in Location.API/Controllers folder</li>
</ul>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Location.API.Controllers</span>
<span class="p">{</span>
    <span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CountriesController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
    <span class="p">{</span>
      <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"GetAll"</span><span class="p">)]</span>
      <span class="k">public</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="nf">Get</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="kt">string</span><span class="p">[]</span> <span class="p">{</span><span class="s">"America"</span><span class="p">,</span><span class="s">"Bangladesh"</span><span class="p">,</span> <span class="s">"Canada"</span> <span class="p">};</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 6: Organize BFF.Web (API Gateway)  Project</strong></p>

<ul>
  <li>Create a folder name Routes and add the following files in that folder</li>
</ul>

<p><strong>ocelot.catalog.api.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">
</span><span class="p">{</span><span class="w">
  </span><span class="nl">"Routes"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"DownstreamPathTemplate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/{everything}"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"DownstreamScheme"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"SwaggerKey"</span><span class="p">:</span><span class="w"> </span><span class="s2">"catalog"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"DownstreamHostAndPorts"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"Host"</span><span class="p">:</span><span class="w"> </span><span class="s2">"localhost"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Port"</span><span class="p">:</span><span class="w"> </span><span class="s2">"7282"</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"UpstreamPathTemplate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/catalog/{everything}"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"UpstreamHttpMethod"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"GET"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"POST"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"PUT"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"DELETE"</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<p><strong>ocelot.location.api.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"Routes"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"DownstreamPathTemplate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/{everything}"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"DownstreamScheme"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"SwaggerKey"</span><span class="p">:</span><span class="w"> </span><span class="s2">"location"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"DownstreamHostAndPorts"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"Host"</span><span class="p">:</span><span class="w"> </span><span class="s2">"localhost"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Port"</span><span class="p">:</span><span class="w"> </span><span class="s2">"7003"</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"UpstreamPathTemplate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/location/{everything}"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"UpstreamHttpMethod"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"GET"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"POST"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"PUT"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"DELETE"</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<p><strong>ocelot.ordering.api.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"Routes"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"DownstreamPathTemplate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/{everything}"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"DownstreamScheme"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"SwaggerKey"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ordering"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"DownstreamHostAndPorts"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"Host"</span><span class="p">:</span><span class="w"> </span><span class="s2">"localhost"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Port"</span><span class="p">:</span><span class="w"> </span><span class="s2">"7126"</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"UpstreamPathTemplate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/ordering/{everything}"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"UpstreamHttpMethod"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"GET"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"POST"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"PUT"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"DELETE"</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<p><strong>ocelot.global.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"GlobalConfiguration"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"BaseUrl"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://localhost:5205"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p><strong>ocelot.SwaggerEndPoints.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"SwaggerEndPoints"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"bffweb"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"TransformByOcelotConfig"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Config"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"Name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"BFF.Web"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1.0"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://localhost:5205/swagger/v1/swagger.json"</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"location"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"TransformByOcelotConfig"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Config"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"Name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Location.API"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1.0"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://localhost:5205/location/swagger/v1/swagger.json"</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"catalog"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"TransformByOcelotConfig"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Config"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"Name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Catalog.API"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1.0"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://localhost:5205/catalog/swagger/v1/swagger.json"</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ordering"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"TransformByOcelotConfig"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Config"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"Name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Ordering.API"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1.0"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://localhost:5205/catalog/swagger/v1/swagger.json"</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<ul>
  <li>Add AlterUpstream Class in Config Folder</li>
</ul>

<p><strong>AlterUpstream.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Newtonsoft.Json</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Newtonsoft.Json.Linq</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">BFF.Web.Config</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">AlterUpstream</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">static</span> <span class="kt">string</span> <span class="nf">AlterUpstreamSwaggerJson</span><span class="p">(</span><span class="n">HttpContext</span> <span class="n">context</span><span class="p">,</span> <span class="kt">string</span> <span class="n">swaggerJson</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">swagger</span> <span class="p">=</span> <span class="n">JObject</span><span class="p">.</span><span class="nf">Parse</span><span class="p">(</span><span class="n">swaggerJson</span><span class="p">);</span>
            <span class="c1">// ... alter upstream json</span>
            <span class="k">return</span> <span class="n">swagger</span><span class="p">.</span><span class="nf">ToString</span><span class="p">(</span><span class="n">Formatting</span><span class="p">.</span><span class="n">Indented</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>Modify Program.cs file as follows</li>
</ul>

<p><strong>Program.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">BFF.Web.Config</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">MMLib.SwaggerForOcelot.DependencyInjection</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ocelot.DependencyInjection</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ocelot.Middleware</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ocelot.Provider.Polly</span><span class="p">;</span>

<span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="n">WebApplication</span><span class="p">.</span><span class="nf">CreateBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>

<span class="kt">var</span> <span class="n">routes</span> <span class="p">=</span> <span class="s">"Routes"</span><span class="p">;</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Configuration</span><span class="p">.</span><span class="nf">AddOcelotWithSwaggerSupport</span><span class="p">(</span><span class="n">options</span> <span class="p">=&gt;</span>
<span class="p">{</span>
    <span class="n">options</span><span class="p">.</span><span class="n">Folder</span> <span class="p">=</span> <span class="n">routes</span><span class="p">;</span>
<span class="p">});</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddOcelot</span><span class="p">(</span><span class="n">builder</span><span class="p">.</span><span class="n">Configuration</span><span class="p">).</span><span class="nf">AddPolly</span><span class="p">();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddSwaggerForOcelot</span><span class="p">(</span><span class="n">builder</span><span class="p">.</span><span class="n">Configuration</span><span class="p">);</span>

<span class="kt">var</span> <span class="n">environment</span> <span class="p">=</span> <span class="n">Environment</span><span class="p">.</span><span class="nf">GetEnvironmentVariable</span><span class="p">(</span><span class="s">"ASPNETCORE_ENVIRONMENT"</span><span class="p">);</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Configuration</span><span class="p">.</span><span class="nf">SetBasePath</span><span class="p">(</span><span class="n">Directory</span><span class="p">.</span><span class="nf">GetCurrentDirectory</span><span class="p">())</span>
    <span class="p">.</span><span class="nf">AddOcelot</span><span class="p">(</span><span class="n">routes</span><span class="p">,</span> <span class="n">builder</span><span class="p">.</span><span class="n">Environment</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">AddEnvironmentVariables</span><span class="p">();</span>


<span class="c1">// Add services to the container.</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">();</span>
<span class="c1">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddEndpointsApiExplorer</span><span class="p">();</span>

<span class="c1">// Swagger for ocelot</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddSwaggerGen</span><span class="p">();</span>

<span class="kt">var</span> <span class="n">app</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

<span class="c1">// Configure the HTTP request pipeline.</span>
<span class="k">if</span> <span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">Environment</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
<span class="p">{</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwagger</span><span class="p">();</span>
<span class="p">}</span>


<span class="n">app</span><span class="p">.</span><span class="nf">UseHttpsRedirection</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseAuthorization</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseSwaggerForOcelotUI</span><span class="p">(</span><span class="n">options</span> <span class="p">=&gt;</span>
<span class="p">{</span>
    <span class="n">options</span><span class="p">.</span><span class="n">PathToSwaggerGenerator</span> <span class="p">=</span> <span class="s">"/swagger/docs"</span><span class="p">;</span>
    <span class="n">options</span><span class="p">.</span><span class="n">ReConfigureUpstreamSwaggerJson</span> <span class="p">=</span> <span class="n">AlterUpstream</span><span class="p">.</span><span class="n">AlterUpstreamSwaggerJson</span><span class="p">;</span>

<span class="p">}).</span><span class="nf">UseOcelot</span><span class="p">().</span><span class="nf">Wait</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">MapControllers</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>

</code></pre></div></div>

<p><strong>Step 7: Run and Test application</strong></p>

<ul>
  <li>Now run multiple (all) projects and test application using postman.</li>
  <li>Check all end point using api gateway and swagger using the following URL</li>
</ul>

<p>https://localhost:7205/swagger/index.html</p>

<ul>
  <li>Select Swagger definition from top right corner of BFF</li>
</ul>

<p><strong><a href="https://github.com/mahedee/code-sample02/tree/main/ocelot-swagger">Source code</a></strong></p>]]></content><author><name>Mahedee Hasan</name></author><category term="Web API" /><category term="ASP.NET Core" /><category term="C#" /><category term="Ocelot" /><category term="webapi" /><category term="aspnetcore" /><category term="csharp" /><category term="ocelot" /><summary type="html"><![CDATA[Swagger configuration on API gateway is not as simple as you are configure normal application. You have to configure it in different way. In this article I will create an API gateway using ocelot and asp.net core application and show you how to configure swagger on API gateway.]]></summary></entry><entry><title type="html">Configure service mesh using Istio with asp.net core applications on Kubernetes</title><link href="https://mahedee.net//configure-service-mesh-using-istio-with-asp.net-core-and-kubernetes/" rel="alternate" type="text/html" title="Configure service mesh using Istio with asp.net core applications on Kubernetes" /><published>2022-03-01T00:00:00+00:00</published><updated>2022-03-01T00:00:00+00:00</updated><id>https://mahedee.net//configure-service-mesh-using-istio-with-asp.net-core-and-kubernetes</id><content type="html" xml:base="https://mahedee.net//configure-service-mesh-using-istio-with-asp.net-core-and-kubernetes/"><![CDATA[<p><strong>Overview</strong></p>

<p>A service mesh is a configurable infrustructure layer. It have capabilities to handle service-to-service communication, resilency, and many cross-cutting concerns. Proxy is a key component of service mesh. Sidecar proxy is injected in each services in this concept. Here I will show you service mesh communication using Istio with asp.net core applications on Kubernetes environment.</p>

<p>Istio is an open platform for providing a uniform way to integrate microservices, manage traffic flow accross microservices, enforce policies and aggregate telemetry data. Istio uses following tools -</p>

<ul>
  <li>Prometheus: It monitors everything in the cluster.</li>
  <li>Grafana: Data visualization tools.</li>
  <li>Jaeger: It’s used for distributed tracing.</li>
</ul>

<p><strong>Tools and Technology used</strong><br />
The following tools and technologies used to configure Istio</p>
<ul>
  <li>Visual Studio 2022</li>
  <li>Visual C#</li>
  <li>ASP.NET Core Web API</li>
  <li>Ocelot</li>
  <li>Docker desktop</li>
  <li>Kubernetes</li>
  <li>Istio</li>
</ul>

<p>Let’s configure Istio on asp.net core web api applications.</p>

<p><strong>Step 1: Download Istio</strong></p>
<ul>
  <li>Go to the link below and download “istio-1.12.2-win.zip”<br />
https://github.com/istio/istio/releases/tag/1.12.2</li>
</ul>

<p>or download and extract the latest release automatically (Linux or macOS):
curl -L https://istio.io/downloadIstio | sh -</p>

<ul>
  <li>
    <p>Extract zip file and move to the Istio Package directory. For example, istio-1.12.2.</p>
  </li>
  <li>
    <p>Then installation directory contains:</p>
    <ul>
      <li>Sample applications in sample/directory</li>
      <li>The istioctl client binary in the bin/directory</li>
    </ul>
  </li>
</ul>

<p><strong>Step 2: Add istioctl client to your path</strong></p>

<ul>
  <li>Use the following command in git bash to add istioctl client to your path.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">export</span> <span class="nf">PATH=$PWD</span><span class="nv">/bin:$PATH</span>
</code></pre></div></div>

<p>Note: The above command doesn’t run on powershell. So, use git bash. If you close the git bash, istioctl doesn’t work. You have to run the above command again.</p>

<ul>
  <li>To check istioctl client use the following command in git bash.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">istioctl</span>
</code></pre></div></div>

<p><strong>Step 3: Install Istio</strong></p>

<ul>
  <li>For installation, we use the demo configuration profile. It’s selected to have a good set of defaults for testing, but there are other profiles for production or performance testing. Use below command to install Istio.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">istioctl</span> <span class="nf">install</span> <span class="nf">--set</span> <span class="nf">profile=demo</span> <span class="nf">-y</span>
</code></pre></div></div>
<ul>
  <li>Use the following command to verify Istio.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">kubectl</span> <span class="nb">get</span> <span class="nf">all</span> <span class="nf">-n</span> <span class="nf">istio-system</span>
</code></pre></div></div>

<p>Output:</p>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">NAME</span>                                        <span class="nf">READY</span>   <span class="nf">STATUS</span>    <span class="nf">RESTARTS</span>   <span class="nf">AGE</span>
<span class="nf">pod</span><span class="nv">/istio-egressgateway-c9cbbd99f-wk265</span>     <span class="mf">1</span><span class="nv">/1</span>     <span class="nf">Running</span>   <span class="mf">0</span>          <span class="nf">87s</span>
<span class="nf">pod</span><span class="nv">/istio-ingressgateway-7c8bc47b49-xpvvc</span>   <span class="mf">1</span><span class="nv">/1</span>     <span class="nf">Running</span>   <span class="mf">0</span>          <span class="nf">86s</span>
<span class="nf">pod</span><span class="nv">/istiod-765596f7ff-2p72v</span>                 <span class="mf">1</span><span class="nv">/1</span>     <span class="nf">Running</span>   <span class="mf">0</span>          <span class="nf">3m13s</span>

<span class="nf">NAME</span>                           <span class="nf">TYPE</span>           <span class="nf">CLUSTER-IP</span>       <span class="nf">EXTERNAL-IP</span>   <span class="nf">PORT</span><span class="s">(S)</span>                                                                      <span class="nf">AGE</span>
<span class="nf">service</span><span class="nv">/istio-egressgateway</span>    <span class="nf">ClusterIP</span>      <span class="nf">10.101.157.106</span>   <span class="p">&lt;</span><span class="nf">none</span><span class="p">&gt;</span>        <span class="mf">80</span><span class="nv">/TCP,443/TCP</span>                                                               <span class="nf">85s</span>
<span class="nf">service</span><span class="nv">/istio-ingressgateway</span>   <span class="nf">LoadBalancer</span>   <span class="nf">10.109.205.109</span>   <span class="nf">localhost</span>     <span class="nf">15021:32149</span><span class="nv">/TCP,80:30563/TCP,443:30960/TCP,31400:32369/TCP,15443:32309/TCP</span>   <span class="nf">85s</span>
<span class="nf">service</span><span class="nv">/istiod</span>                 <span class="nf">ClusterIP</span>      <span class="nf">10.109.211.149</span>   <span class="p">&lt;</span><span class="nf">none</span><span class="p">&gt;</span>        <span class="mf">15010</span><span class="nv">/TCP,15012/TCP,443/TCP,15014/TCP</span>                                        <span class="nf">3m12s</span>

<span class="nf">NAME</span>                                   <span class="nf">READY</span>   <span class="nf">UP-TO-DATE</span>   <span class="nf">AVAILABLE</span>   <span class="nf">AGE</span>
<span class="nf">deployment.apps</span><span class="nv">/istio-egressgateway</span>    <span class="mf">1</span><span class="nv">/1</span>     <span class="mf">1</span>            <span class="mf">1</span>           <span class="nf">87s</span>
<span class="nf">deployment.apps</span><span class="nv">/istio-ingressgateway</span>   <span class="mf">1</span><span class="nv">/1</span>     <span class="mf">1</span>            <span class="mf">1</span>           <span class="nf">86s</span>
<span class="nf">deployment.apps</span><span class="nv">/istiod</span>                 <span class="mf">1</span><span class="nv">/1</span>     <span class="mf">1</span>            <span class="mf">1</span>           <span class="nf">3m13s</span>

<span class="nf">NAME</span>                                              <span class="nf">DESIRED</span>   <span class="nf">CURRENT</span>   <span class="nf">READY</span>   <span class="nf">AGE</span>
<span class="nf">replicaset.apps</span><span class="nv">/istio-egressgateway-c9cbbd99f</span>     <span class="mf">1</span>         <span class="mf">1</span>         <span class="mf">1</span>       <span class="nf">87s</span>
<span class="nf">replicaset.apps</span><span class="nv">/istio-ingressgateway-7c8bc47b49</span>   <span class="mf">1</span>         <span class="mf">1</span>         <span class="mf">1</span>       <span class="nf">86s</span>
<span class="nf">replicaset.apps</span><span class="nv">/istiod-765596f7ff</span>                 <span class="mf">1</span>         <span class="mf">1</span>         <span class="mf">1</span>       <span class="nf">3m13s</span>
</code></pre></div></div>

<p><strong>Step 4: Configure for auto proxy injection</strong></p>

<ul>
  <li>Add a namespace label to instruct Istio to automatically inject Envoy sidecar proxies when you deploy your application later. Use below command to configure default namespance with Istio sidecar proxy.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">kubectl</span> <span class="nf">label</span> <span class="nf">namespace</span> <span class="nf">default</span> <span class="nf">istio-injection=enabled</span>
</code></pre></div></div>

<ul>
  <li>Check label by using below command</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">kubectl</span> <span class="nf">describe</span> <span class="nf">namespace</span> <span class="nf">default</span>
</code></pre></div></div>

<p><strong>Step 5: Create asp.net core applications</strong></p>

<ul>
  <li>Create 4 asp.net core web api projects.</li>
  <li>Projects names are Catalog.API, Location.API, Ordering.API and BFF.Web.</li>
</ul>

<p><strong>Step 6: Organize Catalog.API Project</strong></p>

<ul>
  <li>Add the following nuget packages in the project.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore.InMemory</span>
<span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore.SqlServer</span>
<span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore.Tools</span>
</code></pre></div></div>

<ul>
  <li>Add a model class name Product in the model folder.</li>
</ul>

<p><strong>Product.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System.ComponentModel.DataAnnotations</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.ComponentModel.DataAnnotations.Schema</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Catalog.API.Model</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Product</span>
    <span class="p">{</span>
        <span class="p">[</span><span class="n">Key</span><span class="p">]</span>
        <span class="p">[</span><span class="nf">DatabaseGenerated</span><span class="p">(</span><span class="n">DatabaseGeneratedOption</span><span class="p">.</span><span class="n">Identity</span><span class="p">)]</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">string</span> <span class="n">Description</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">decimal</span> <span class="n">Price</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">int</span> <span class="n">AvailableStock</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">int</span> <span class="n">RestockThreshold</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Add CatalogContext class in Db folder.</li>
</ul>

<p><strong>CatalogContext.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Catalog.API.Model</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Catalog.API.Db</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CatalogContext</span> <span class="p">:</span> <span class="n">DbContext</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">CatalogContext</span><span class="p">(</span><span class="n">DbContextOptions</span><span class="p">&lt;</span><span class="n">CatalogContext</span><span class="p">&gt;</span> <span class="n">options</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
        <span class="p">{</span>

        <span class="p">}</span>
        <span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">OnConfiguring</span><span class="p">(</span><span class="n">DbContextOptionsBuilder</span> <span class="n">optionsBuilder</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">base</span><span class="p">.</span><span class="nf">OnConfiguring</span><span class="p">(</span><span class="n">optionsBuilder</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">DbSet</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="n">Products</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Configure InMemory database and modify Program class as follows.</li>
</ul>

<p><strong>Program.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Catalog.API.Db</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="n">WebApplication</span><span class="p">.</span><span class="nf">CreateBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>

<span class="c1">// Add services to the container.</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">();</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddDbContext</span><span class="p">&lt;</span><span class="n">CatalogContext</span><span class="p">&gt;(</span><span class="n">opt</span> <span class="p">=&gt;</span> <span class="n">opt</span><span class="p">.</span><span class="nf">UseInMemoryDatabase</span><span class="p">(</span><span class="s">"CatalogDB"</span><span class="p">));</span>

<span class="c1">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddEndpointsApiExplorer</span><span class="p">();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddSwaggerGen</span><span class="p">();</span>

<span class="kt">var</span> <span class="n">app</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

<span class="c1">// Configure the HTTP request pipeline.</span>
<span class="k">if</span> <span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">Environment</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
<span class="p">{</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwagger</span><span class="p">();</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwaggerUI</span><span class="p">();</span>
<span class="p">}</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseHttpsRedirection</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseAuthorization</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">MapControllers</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>

</code></pre></div></div>

<ul>
  <li>Create ProductsController in Controllers folder</li>
</ul>

<p><strong>ProductsController.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">#</span><span class="n">nullable</span> <span class="n">disable</span>
<span class="k">using</span> <span class="nn">Catalog.API.Db</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Catalog.API.Model</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Catalog.API.Controllers</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
    <span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">ProductsController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">CatalogContext</span> <span class="n">_context</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">ProductsController</span><span class="p">(</span><span class="n">CatalogContext</span> <span class="n">context</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_context</span> <span class="p">=</span> <span class="n">context</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/Products</span>
        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"GetAll"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;&gt;&gt;</span> <span class="nf">GetProducts</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Products</span><span class="p">.</span><span class="nf">ToListAsync</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/Products/5</span>
        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;&gt;</span> <span class="nf">GetProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">product</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Products</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">product</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="n">product</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// PUT: api/Products/5</span>
        <span class="c1">// To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754</span>
        <span class="p">[</span><span class="nf">HttpPut</span><span class="p">(</span><span class="s">"Edit/{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">PutProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="n">Product</span> <span class="n">product</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">id</span> <span class="p">!=</span> <span class="n">product</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">_context</span><span class="p">.</span><span class="nf">Entry</span><span class="p">(</span><span class="n">product</span><span class="p">).</span><span class="n">State</span> <span class="p">=</span> <span class="n">EntityState</span><span class="p">.</span><span class="n">Modified</span><span class="p">;</span>

            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">DbUpdateConcurrencyException</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(!</span><span class="nf">ProductExists</span><span class="p">(</span><span class="n">id</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
                <span class="p">}</span>
                <span class="k">else</span>
                <span class="p">{</span>
                    <span class="k">throw</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// POST: api/Products</span>
        <span class="c1">// To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754</span>
        <span class="p">[</span><span class="nf">HttpPost</span><span class="p">(</span><span class="s">"Add"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;&gt;</span> <span class="nf">PostProduct</span><span class="p">(</span><span class="n">Product</span> <span class="n">product</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_context</span><span class="p">.</span><span class="n">Products</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">product</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>

            <span class="k">return</span> <span class="nf">CreatedAtAction</span><span class="p">(</span><span class="s">"GetProduct"</span><span class="p">,</span> <span class="k">new</span> <span class="p">{</span> <span class="n">id</span> <span class="p">=</span> <span class="n">product</span><span class="p">.</span><span class="n">Id</span> <span class="p">},</span> <span class="n">product</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">// DELETE: api/Products/5</span>
        <span class="p">[</span><span class="nf">HttpDelete</span><span class="p">(</span><span class="s">"Delete/{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">DeleteProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">product</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Products</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">product</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">_context</span><span class="p">.</span><span class="n">Products</span><span class="p">.</span><span class="nf">Remove</span><span class="p">(</span><span class="n">product</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>

            <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="kt">bool</span> <span class="nf">ProductExists</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">_context</span><span class="p">.</span><span class="n">Products</span><span class="p">.</span><span class="nf">Any</span><span class="p">(</span><span class="n">e</span> <span class="p">=&gt;</span> <span class="n">e</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">id</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Add Dockerfile in the Catalog.API Project</li>
</ul>

<p><strong>Dockerfile</strong></p>

<div class="language-Dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">FROM</span><span class="w"> </span><span class="s">mcr.microsoft.com/dotnet/aspnet:6.0</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">base</span>
<span class="k">WORKDIR</span><span class="s"> /app</span>
<span class="k">EXPOSE</span><span class="s"> 80</span>
<span class="k">EXPOSE</span><span class="s"> 443</span>

<span class="k">FROM</span><span class="w"> </span><span class="s">mcr.microsoft.com/dotnet/sdk:6.0</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">build</span>
<span class="k">WORKDIR</span><span class="s"> /src</span>
<span class="k">COPY</span><span class="s"> ["/Catalog.API.csproj", "Catalog.API/"]</span>
<span class="k">RUN </span>dotnet restore <span class="s2">"Catalog.API/Catalog.API.csproj"</span>
<span class="k">WORKDIR</span><span class="s"> "/src/Catalog.API"</span>
<span class="k">COPY</span><span class="s"> . .</span>
<span class="k">WORKDIR</span><span class="s"> "/src/Catalog.API"</span>
<span class="k">RUN </span>dotnet build <span class="s2">"Catalog.API.csproj"</span> <span class="nt">-c</span> Release <span class="nt">-o</span> /app/build

<span class="k">FROM</span><span class="w"> </span><span class="s">build</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">publish</span>
<span class="k">RUN </span>dotnet publish <span class="s2">"Catalog.API.csproj"</span> <span class="nt">-c</span> Release <span class="nt">-o</span> /app/publish

<span class="k">FROM</span><span class="w"> </span><span class="s">base</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">final</span>
<span class="k">WORKDIR</span><span class="s"> /app</span>
<span class="k">COPY</span><span class="s"> --from=publish /app/publish .</span>
<span class="k">ENTRYPOINT</span><span class="s"> ["dotnet", "Catalog.API.dll"]</span>

</code></pre></div></div>

<ul>
  <li>Go to director where dockerfile reside and run the following command to build docker image.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">docker</span> <span class="nf">image</span> <span class="nf">build</span> <span class="nf">-t</span> <span class="nf">mahedee</span><span class="nv">/catalog:1.0.1</span> <span class="nf">.</span>
</code></pre></div></div>

<p>Note: Don’t forgot to add . at the end of the command.</p>

<ul>
  <li>To configure pod add the following to file with code in Deploy/k8s folder</li>
</ul>

<p><strong>deployment.yml</strong></p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="c1"># Configure Deployment</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Deployment</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">catalogapi-deployment</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">matchLabels</span><span class="pi">:</span>
      <span class="na">app</span><span class="pi">:</span> <span class="s">catalogapi-pod</span>
  <span class="na">template</span><span class="pi">:</span>
    <span class="na">metadata</span><span class="pi">:</span>
      <span class="na">labels</span><span class="pi">:</span>
        <span class="na">app</span><span class="pi">:</span> <span class="s">catalogapi-pod</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">containers</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">catalogapi-container</span>
        <span class="na">image</span><span class="pi">:</span> <span class="s">mahedee/catalog:1.0.1</span>
        <span class="na">resources</span><span class="pi">:</span>
          <span class="na">limits</span><span class="pi">:</span>
            <span class="na">memory</span><span class="pi">:</span> <span class="s2">"</span><span class="s">128Mi"</span> <span class="c1"># 128 mili bytes</span>
            <span class="na">cpu</span><span class="pi">:</span> <span class="s2">"</span><span class="s">500m"</span>     <span class="c1"># 500 mili cpu</span>
        <span class="na">ports</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">containerPort</span><span class="pi">:</span> <span class="m">80</span>



</code></pre></div></div>
<p><strong>service.yml</strong></p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="c1"># Configure service</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Service</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">catalogapi-service</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">app</span><span class="pi">:</span> <span class="s">catalogapi-pod</span>
  <span class="na">ports</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">port</span><span class="pi">:</span> <span class="m">8001</span>
    <span class="na">targetPort</span><span class="pi">:</span> <span class="m">80</span>
  <span class="na">type</span><span class="pi">:</span> <span class="s">LoadBalancer</span> <span class="c1"># use LoadBalancer if you want to accesss out side of pod</span>

</code></pre></div></div>

<ul>
  <li>Go to the Deploy/k8s directory and run the following commands.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">kubectl</span> <span class="nf">apply</span> <span class="nf">-f</span> <span class="nf">.\deployment.yml</span>

<span class="nf">kubectl</span> <span class="nf">apply</span> <span class="nf">-f</span> <span class="nf">.\service.yml</span>
</code></pre></div></div>

<p><strong>Step 7: Check pods have proxy auto-injected</strong></p>

<ul>
  <li>By default istio will be injected automatically under this namespace.</li>
  <li>Use the following command to check pods have proxy auto-injected.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">kubectl</span> <span class="nb">get</span> <span class="nf">pods</span>   <span class="err">//</span> <span class="nf">To</span> <span class="nf">check</span> <span class="nf">pods</span>
</code></pre></div></div>
<p>Output:</p>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">NAME</span>                                      <span class="nf">READY</span>   <span class="nf">STATUS</span>    <span class="nf">RESTARTS</span>   <span class="nf">AGE</span>
<span class="nf">catalogapi-deployment-68d56ccddd-sqfnj</span>    <span class="mf">2</span><span class="nv">/2</span>     <span class="nf">Running</span>   <span class="mf">0</span>          <span class="nf">14m</span>
</code></pre></div></div>

<ul>
  <li>Show the catalogapi proxy setup using the following command</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">kubectl</span> <span class="nf">describe</span> <span class="nf">pods</span> <span class="nf">catalogapi-deployment-68d56ccddd-sqfnj</span> 
</code></pre></div></div>

<ul>
  <li>Find all proxy container using the following command</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">docker</span> <span class="nf">container</span> <span class="nf">ls</span> <span class="nf">--filter</span> <span class="nf">name=istio-proxy_*</span>
</code></pre></div></div>

<ul>
  <li>Check proxy processes for the catalogapi</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">docker</span> <span class="nf">container</span> <span class="nf">ls</span> <span class="nf">--filter</span> <span class="nf">name=istio-proxy_catalogapi-deployment*</span> <span class="nf">-q</span>
</code></pre></div></div>

<p><strong>Step 8: Organize Location.API</strong></p>

<ul>
  <li>Create a Controller name CountriesController in the Controllers folder as follows.</li>
</ul>

<p><strong>CountriesController.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Location.API.Controllers</span>
<span class="p">{</span>
    <span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CountriesController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
    <span class="p">{</span>
      <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"GetAll"</span><span class="p">)]</span>
      <span class="k">public</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="nf">Get</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="kt">string</span><span class="p">[]</span> <span class="p">{</span><span class="s">"America"</span><span class="p">,</span><span class="s">"Bangladesh"</span><span class="p">,</span> <span class="s">"Canada"</span> <span class="p">};</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Add docker file in the project root directory as follows.</li>
</ul>

<p><strong>Dockerfile</strong></p>

<div class="language-Dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">FROM</span><span class="w"> </span><span class="s">mcr.microsoft.com/dotnet/aspnet:6.0</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">base</span>
<span class="k">WORKDIR</span><span class="s"> /app</span>
<span class="k">EXPOSE</span><span class="s"> 80</span>
<span class="k">EXPOSE</span><span class="s"> 443</span>

<span class="k">ENV</span><span class="s"> ASPNETCORE_URLS=http://*:80;</span>
<span class="k">ENV</span><span class="s"> ASPNETCORE_ENVIRONMENT=Development</span>

<span class="k">FROM</span><span class="w"> </span><span class="s">mcr.microsoft.com/dotnet/sdk:6.0</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">build</span>
<span class="k">WORKDIR</span><span class="s"> /src</span>

<span class="k">COPY</span><span class="s"> ["/Location.API.csproj", "Location.API/"]</span>
<span class="k">RUN </span>dotnet restore <span class="s2">"Location.API/Location.API.csproj"</span>

<span class="k">WORKDIR</span><span class="s"> "/src/Location.API"</span>
<span class="k">COPY</span><span class="s"> . .</span>
<span class="k">WORKDIR</span><span class="s"> "/src/Location.API"</span>
<span class="k">RUN </span>dotnet build <span class="s2">"Location.API.csproj"</span> <span class="nt">-c</span> Release <span class="nt">-o</span> /app/build

<span class="k">FROM</span><span class="w"> </span><span class="s">build</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">publish</span>
<span class="k">RUN </span>dotnet publish <span class="s2">"Location.API.csproj"</span> <span class="nt">-c</span> Release <span class="nt">-o</span> /app/publish

<span class="k">FROM</span><span class="w"> </span><span class="s">base</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">final</span>
<span class="k">WORKDIR</span><span class="s"> /app</span>
<span class="k">COPY</span><span class="s"> --from=publish /app/publish .</span>
<span class="k">ENTRYPOINT</span><span class="s"> ["dotnet", "Location.API.dll"]</span>
</code></pre></div></div>

<ul>
  <li>Go to the root directory where Dockerfile reside and run the following command to build docker image.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">docker</span> <span class="nf">image</span> <span class="nf">build</span> <span class="nf">-t</span> <span class="nf">mahedee</span><span class="nv">/location:1.0.1</span> <span class="nf">.</span>
</code></pre></div></div>

<ul>
  <li>To configure pod add the following to file with code in Deploy/k8s folder</li>
</ul>

<p><strong>deployment.yml</strong></p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Deployment</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">locationapi-deployment</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">matchLabels</span><span class="pi">:</span>
      <span class="na">app</span><span class="pi">:</span> <span class="s">locationapi-pod</span>
  <span class="na">template</span><span class="pi">:</span>
    <span class="na">metadata</span><span class="pi">:</span>
      <span class="na">labels</span><span class="pi">:</span>
        <span class="na">app</span><span class="pi">:</span> <span class="s">locationapi-pod</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">containers</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">locationapi-container</span>
        <span class="na">image</span><span class="pi">:</span> <span class="s">mahedee/location:1.0.1</span>
        <span class="na">resources</span><span class="pi">:</span>
          <span class="na">limits</span><span class="pi">:</span>
            <span class="na">memory</span><span class="pi">:</span> <span class="s2">"</span><span class="s">128Mi"</span> <span class="c1"># 128 mili bytes</span>
            <span class="na">cpu</span><span class="pi">:</span> <span class="s2">"</span><span class="s">500m"</span>     <span class="c1"># 500 mili cpu</span>
        <span class="na">ports</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">containerPort</span><span class="pi">:</span> <span class="m">80</span>

</code></pre></div></div>

<p><strong>service.yml</strong></p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Service</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">locationapi-service</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">app</span><span class="pi">:</span> <span class="s">locationapi-pod</span>
  <span class="na">ports</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">port</span><span class="pi">:</span> <span class="m">8002</span>
    <span class="na">targetPort</span><span class="pi">:</span> <span class="m">80</span>
  <span class="c1">#type: LoadBalancer</span>
</code></pre></div></div>

<ul>
  <li>Go to the Deploy/k8s directory and run the following commands.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">kubectl</span> <span class="nf">apply</span> <span class="nf">-f</span> <span class="nf">.\deployment.yml</span>

<span class="nf">kubectl</span> <span class="nf">apply</span> <span class="nf">-f</span> <span class="nf">.\service.yml</span>
</code></pre></div></div>

<p><strong>Step 9: Organize Ordering.API</strong></p>

<ul>
  <li>Add the following nuget packages in the project.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore.InMemory</span>
<span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore.SqlServer</span>
<span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore.Tools</span>
</code></pre></div></div>

<ul>
  <li>Create Order class in Models folders as follows.</li>
</ul>

<p><strong>Order.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">Ordering.API.Models</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Order</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Address</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="n">DateTime</span> <span class="n">OrderDate</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">string</span> <span class="n">Comments</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create Ordering OrderingContext class in Db folder.</li>
</ul>

<p><strong>OrderingContext.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.API.Models</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.API.Db</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">OrderingContext</span> <span class="p">:</span> <span class="n">DbContext</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">OrderingContext</span><span class="p">(</span><span class="n">DbContextOptions</span><span class="p">&lt;</span><span class="n">OrderingContext</span><span class="p">&gt;</span> <span class="n">options</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
        <span class="p">{</span>

        <span class="p">}</span>
        <span class="k">public</span> <span class="n">DbSet</span><span class="p">&lt;</span><span class="n">Ordering</span><span class="p">.</span><span class="n">API</span><span class="p">.</span><span class="n">Models</span><span class="p">.</span><span class="n">Order</span><span class="p">&gt;</span> <span class="n">Order</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Modify Program.cs to add dbcontext.</li>
</ul>

<p><strong>Program.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.API.Db</span><span class="p">;</span>

<span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="n">WebApplication</span><span class="p">.</span><span class="nf">CreateBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>

<span class="c1">// Add services to the container.</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">();</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddDbContext</span><span class="p">&lt;</span><span class="n">OrderingContext</span><span class="p">&gt;(</span><span class="n">opt</span> <span class="p">=&gt;</span> <span class="n">opt</span><span class="p">.</span><span class="nf">UseInMemoryDatabase</span><span class="p">(</span><span class="s">"CatalogDB"</span><span class="p">));</span>

<span class="c1">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddEndpointsApiExplorer</span><span class="p">();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddSwaggerGen</span><span class="p">();</span>

<span class="kt">var</span> <span class="n">app</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

<span class="c1">// Configure the HTTP request pipeline.</span>
<span class="k">if</span> <span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">Environment</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
<span class="p">{</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwagger</span><span class="p">();</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwaggerUI</span><span class="p">();</span>
<span class="p">}</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseHttpsRedirection</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseAuthorization</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">MapControllers</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>

</code></pre></div></div>

<ul>
  <li>Create OrdersController in Controllers folder as follows.</li>
</ul>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">#</span><span class="n">nullable</span> <span class="n">disable</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.API.Db</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.API.Models</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.API.Controllers</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
    <span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">OrdersController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">OrderingContext</span> <span class="n">_context</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">OrdersController</span><span class="p">(</span><span class="n">OrderingContext</span> <span class="n">context</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_context</span> <span class="p">=</span> <span class="n">context</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/Orders</span>
        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"GetAll"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Order</span><span class="p">&gt;&gt;&gt;</span> <span class="nf">GetOrder</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Order</span><span class="p">.</span><span class="nf">ToListAsync</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/Orders/5</span>
        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">Order</span><span class="p">&gt;&gt;</span> <span class="nf">GetOrder</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">order</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Order</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">order</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="n">order</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// PUT: api/Orders/5</span>
        <span class="c1">// To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754</span>
        <span class="p">[</span><span class="nf">HttpPut</span><span class="p">(</span><span class="s">"Edit/{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">PutOrder</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="n">Order</span> <span class="n">order</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">id</span> <span class="p">!=</span> <span class="n">order</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">_context</span><span class="p">.</span><span class="nf">Entry</span><span class="p">(</span><span class="n">order</span><span class="p">).</span><span class="n">State</span> <span class="p">=</span> <span class="n">EntityState</span><span class="p">.</span><span class="n">Modified</span><span class="p">;</span>

            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">DbUpdateConcurrencyException</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(!</span><span class="nf">OrderExists</span><span class="p">(</span><span class="n">id</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
                <span class="p">}</span>
                <span class="k">else</span>
                <span class="p">{</span>
                    <span class="k">throw</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// POST: api/Orders</span>
        <span class="c1">// To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754</span>
        <span class="p">[</span><span class="nf">HttpPost</span><span class="p">(</span><span class="s">"Add"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">Order</span><span class="p">&gt;&gt;</span> <span class="nf">PostOrder</span><span class="p">(</span><span class="n">Order</span> <span class="n">order</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_context</span><span class="p">.</span><span class="n">Order</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">order</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>

            <span class="k">return</span> <span class="nf">CreatedAtAction</span><span class="p">(</span><span class="s">"GetOrder"</span><span class="p">,</span> <span class="k">new</span> <span class="p">{</span> <span class="n">id</span> <span class="p">=</span> <span class="n">order</span><span class="p">.</span><span class="n">Id</span> <span class="p">},</span> <span class="n">order</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">// DELETE: api/Orders/5</span>
        <span class="p">[</span><span class="nf">HttpDelete</span><span class="p">(</span><span class="s">"Delete/{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">DeleteOrder</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">order</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Order</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">order</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">_context</span><span class="p">.</span><span class="n">Order</span><span class="p">.</span><span class="nf">Remove</span><span class="p">(</span><span class="n">order</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>

            <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="kt">bool</span> <span class="nf">OrderExists</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">_context</span><span class="p">.</span><span class="n">Order</span><span class="p">.</span><span class="nf">Any</span><span class="p">(</span><span class="n">e</span> <span class="p">=&gt;</span> <span class="n">e</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">id</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create Docker file in the root directory</li>
</ul>

<p><strong>Dockerfile</strong></p>

<div class="language-Dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">FROM</span><span class="w"> </span><span class="s">mcr.microsoft.com/dotnet/aspnet:6.0</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">base</span>
<span class="k">WORKDIR</span><span class="s"> /app</span>
<span class="k">EXPOSE</span><span class="s"> 80</span>
<span class="k">EXPOSE</span><span class="s"> 443</span>

<span class="k">ENV</span><span class="s"> ASPNETCORE_URLS=http://*:80;</span>
<span class="k">ENV</span><span class="s"> ASPNETCORE_ENVIRONMENT=Development</span>

<span class="k">FROM</span><span class="w"> </span><span class="s">mcr.microsoft.com/dotnet/sdk:6.0</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">build</span>
<span class="k">WORKDIR</span><span class="s"> /src</span>
<span class="k">COPY</span><span class="s"> ["/Ordering.API.csproj", "Ordering.API/"]</span>
<span class="k">RUN </span>dotnet restore <span class="s2">"Ordering.API/Ordering.API.csproj"</span>
<span class="k">WORKDIR</span><span class="s"> "/src/Ordering.API"</span>
<span class="k">COPY</span><span class="s"> . .</span>
<span class="k">WORKDIR</span><span class="s"> "/src/Ordering.API"</span>
<span class="k">RUN </span>dotnet build <span class="s2">"Ordering.API.csproj"</span> <span class="nt">-c</span> Release <span class="nt">-o</span> /app/build

<span class="k">FROM</span><span class="w"> </span><span class="s">build</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">publish</span>
<span class="k">RUN </span>dotnet publish <span class="s2">"Ordering.API.csproj"</span> <span class="nt">-c</span> Release <span class="nt">-o</span> /app/publish

<span class="k">FROM</span><span class="w"> </span><span class="s">base</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">final</span>
<span class="k">WORKDIR</span><span class="s"> /app</span>
<span class="k">COPY</span><span class="s"> --from=publish /app/publish .</span>
<span class="k">ENTRYPOINT</span><span class="s"> ["dotnet", "Ordering.API.dll"]</span>
</code></pre></div></div>

<ul>
  <li>Go to the directory where docker file exists and run the following command to build docker image.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">docker</span> <span class="nf">image</span> <span class="nf">build</span> <span class="nf">-t</span> <span class="nf">mahedee</span><span class="nv">/ordering:1.0.1</span> <span class="nf">.</span>
</code></pre></div></div>

<ul>
  <li>To configure pod add the following to file with code in Deploy/k8s folder</li>
</ul>

<p><strong>deployment.yml</strong></p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Deployment</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">locationapi-deployment</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">matchLabels</span><span class="pi">:</span>
      <span class="na">app</span><span class="pi">:</span> <span class="s">locationapi-pod</span>
  <span class="na">template</span><span class="pi">:</span>
    <span class="na">metadata</span><span class="pi">:</span>
      <span class="na">labels</span><span class="pi">:</span>
        <span class="na">app</span><span class="pi">:</span> <span class="s">locationapi-pod</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">containers</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">locationapi-container</span>
        <span class="na">image</span><span class="pi">:</span> <span class="s">mahedee/location:1.0.1</span>
        <span class="na">resources</span><span class="pi">:</span>
          <span class="na">limits</span><span class="pi">:</span>
            <span class="na">memory</span><span class="pi">:</span> <span class="s2">"</span><span class="s">128Mi"</span> <span class="c1"># 128 mili bytes</span>
            <span class="na">cpu</span><span class="pi">:</span> <span class="s2">"</span><span class="s">500m"</span>     <span class="c1"># 500 mili cpu</span>
        <span class="na">ports</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">containerPort</span><span class="pi">:</span> <span class="m">80</span>

</code></pre></div></div>

<p><strong>service.yml</strong></p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Service</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">orderingapi-service</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">app</span><span class="pi">:</span> <span class="s">orderingapi-pod</span>
  <span class="na">ports</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">port</span><span class="pi">:</span> <span class="m">8003</span>
    <span class="na">targetPort</span><span class="pi">:</span> <span class="m">80</span>
  <span class="na">type</span><span class="pi">:</span> <span class="s">LoadBalancer</span>
</code></pre></div></div>

<ul>
  <li>Go to the Deploy/k8s directory and run the following commands.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">kubectl</span> <span class="nf">apply</span> <span class="nf">-f</span> <span class="nf">.\deployment.yml</span>

<span class="nf">kubectl</span> <span class="nf">apply</span> <span class="nf">-f</span> <span class="nf">.\service.yml</span>
</code></pre></div></div>

<p><strong>Step 10: Organize API Gateway BFF.Web</strong></p>

<ul>
  <li>Install the following nuget packages in the project.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">Install-Package</span> <span class="nf">Ocelot</span>
<span class="nf">Install-Package</span> <span class="nf">Ocelot.Cache.CacheManager</span>
<span class="nf">Install-Package</span> <span class="nf">MMLib.SwaggerForOcelot</span>
<span class="nf">Install-Package</span> <span class="nf">Ocelot.Provider.Polly</span>
</code></pre></div></div>

<ul>
  <li>Create a folder name Routes/Routes.dev and add the following files in that folder</li>
</ul>

<p><strong>ocelot.catalog.api.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"Routes"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"DownstreamPathTemplate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/{everything}"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"DownstreamScheme"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"SwaggerKey"</span><span class="p">:</span><span class="w"> </span><span class="s2">"catalog"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"DownstreamHostAndPorts"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"Host"</span><span class="p">:</span><span class="w"> </span><span class="s2">"localhost"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Port"</span><span class="p">:</span><span class="w"> </span><span class="s2">"7282"</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"UpstreamPathTemplate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/catalog/{everything}"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"UpstreamHttpMethod"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"GET"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"POST"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"PUT"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"DELETE"</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<p><strong>ocelot.location.api.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"Routes"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"DownstreamPathTemplate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/{everything}"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"DownstreamScheme"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"SwaggerKey"</span><span class="p">:</span><span class="w"> </span><span class="s2">"location"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"DownstreamHostAndPorts"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"Host"</span><span class="p">:</span><span class="w"> </span><span class="s2">"localhost"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Port"</span><span class="p">:</span><span class="w"> </span><span class="s2">"7003"</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"UpstreamPathTemplate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/location/{everything}"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"UpstreamHttpMethod"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"GET"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"POST"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"PUT"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"DELETE"</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p><strong>ocelot.ordering.api.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"Routes"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"DownstreamPathTemplate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/{everything}"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"DownstreamScheme"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"SwaggerKey"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ordering"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"DownstreamHostAndPorts"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"Host"</span><span class="p">:</span><span class="w"> </span><span class="s2">"localhost"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Port"</span><span class="p">:</span><span class="w"> </span><span class="s2">"7126"</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"UpstreamPathTemplate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/ordering/{everything}"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"UpstreamHttpMethod"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"GET"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"POST"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"PUT"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"DELETE"</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<p><strong>ocelot.global.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"GlobalConfiguration"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"BaseUrl"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://localhost:5205"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p><strong>ocelot.SwaggerEndPoints.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"SwaggerEndPoints"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"bffweb"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"TransformByOcelotConfig"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Config"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"Name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"BFF.Web"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1.0"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://localhost:5205/swagger/v1/swagger.json"</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"location"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"TransformByOcelotConfig"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Config"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"Name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Location.API"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1.0"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://localhost:5205/location/swagger/v1/swagger.json"</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"catalog"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"TransformByOcelotConfig"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Config"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"Name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Catalog.API"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1.0"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://localhost:5205/catalog/swagger/v1/swagger.json"</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ordering"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"TransformByOcelotConfig"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Config"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"Name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Ordering.API"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1.0"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://localhost:5205/ordering/swagger/v1/swagger.json"</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<ul>
  <li>Create a folder name Routes/Routes.prod and add the following files in that folder</li>
</ul>

<p><strong>ocelot.catalog.api.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"Routes"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"DownstreamPathTemplate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/{everything}"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"DownstreamScheme"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"SwaggerKey"</span><span class="p">:</span><span class="w"> </span><span class="s2">"catalog"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"DownstreamHostAndPorts"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"Host"</span><span class="p">:</span><span class="w"> </span><span class="s2">"catalogapi-service"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Port"</span><span class="p">:</span><span class="w"> </span><span class="s2">"8001"</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"UpstreamPathTemplate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/catalog/{everything}"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"UpstreamHttpMethod"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"GET"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"POST"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"PUT"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"DELETE"</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">


</span></code></pre></div></div>

<p><strong>ocelot.location.api.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"Routes"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"DownstreamPathTemplate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/{everything}"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"DownstreamScheme"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"SwaggerKey"</span><span class="p">:</span><span class="w"> </span><span class="s2">"location"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"DownstreamHostAndPorts"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"Host"</span><span class="p">:</span><span class="w"> </span><span class="s2">"locationapi-service"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Port"</span><span class="p">:</span><span class="w"> </span><span class="s2">"8002"</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"UpstreamPathTemplate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/location/{everything}"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"UpstreamHttpMethod"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"GET"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"POST"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"PUT"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"DELETE"</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<p><strong>ocelot.ordering.api.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"Routes"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"DownstreamPathTemplate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/{everything}"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"DownstreamScheme"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"SwaggerKey"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ordering"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"DownstreamHostAndPorts"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"Host"</span><span class="p">:</span><span class="w"> </span><span class="s2">"orderingapi-service"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Port"</span><span class="p">:</span><span class="w"> </span><span class="s2">"8003"</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"UpstreamPathTemplate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/ordering/{everything}"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"UpstreamHttpMethod"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"GET"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"POST"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"PUT"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"DELETE"</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">


</span></code></pre></div></div>

<p><strong>ocelot.global.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"GlobalConfiguration"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"BaseUrl"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://bffweb-service:8011"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<p><strong>ocelot.SwaggerEndPoints.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"SwaggerEndPoints"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"bffweb"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"TransformByOcelotConfig"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Config"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"Name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"BFF.Web"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1.0"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://bffweb-service:8011/swagger/v1/swagger.json"</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"location"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"TransformByOcelotConfig"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Config"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"Name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Location.API"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1.0"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://bffweb-service:8011/location/swagger/v1/swagger.json"</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"catalog"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"TransformByOcelotConfig"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Config"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"Name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Catalog.API"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1.0"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://bffweb-service:8011/catalog/swagger/v1/swagger.json"</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ordering"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"TransformByOcelotConfig"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Config"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"Name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Ordering.API"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1.0"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://bffweb-service:8011/catalog/swagger/v1/swagger.json"</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<ul>
  <li>Add AlterUpstream Class in Config Folder</li>
</ul>

<p><strong>AlterUpstream.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Newtonsoft.Json</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Newtonsoft.Json.Linq</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">BFF.Web.Config</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">AlterUpstream</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">static</span> <span class="kt">string</span> <span class="nf">AlterUpstreamSwaggerJson</span><span class="p">(</span><span class="n">HttpContext</span> <span class="n">context</span><span class="p">,</span> <span class="kt">string</span> <span class="n">swaggerJson</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">swagger</span> <span class="p">=</span> <span class="n">JObject</span><span class="p">.</span><span class="nf">Parse</span><span class="p">(</span><span class="n">swaggerJson</span><span class="p">);</span>
            <span class="c1">// ... alter upstream json</span>
            <span class="k">return</span> <span class="n">swagger</span><span class="p">.</span><span class="nf">ToString</span><span class="p">(</span><span class="n">Formatting</span><span class="p">.</span><span class="n">Indented</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>
<ul>
  <li>Modify Program.cs to configure ocelot</li>
</ul>

<p><strong>Program.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Catalog.API.Db</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="n">WebApplication</span><span class="p">.</span><span class="nf">CreateBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>

<span class="c1">// Add services to the container.</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">();</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddDbContext</span><span class="p">&lt;</span><span class="n">CatalogContext</span><span class="p">&gt;(</span><span class="n">opt</span> <span class="p">=&gt;</span> <span class="n">opt</span><span class="p">.</span><span class="nf">UseInMemoryDatabase</span><span class="p">(</span><span class="s">"CatalogDB"</span><span class="p">));</span>

<span class="c1">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddEndpointsApiExplorer</span><span class="p">();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddSwaggerGen</span><span class="p">();</span>

<span class="kt">var</span> <span class="n">app</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

<span class="c1">// Configure the HTTP request pipeline.</span>
<span class="k">if</span> <span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">Environment</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
<span class="p">{</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwagger</span><span class="p">();</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwaggerUI</span><span class="p">();</span>
<span class="p">}</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseHttpsRedirection</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseAuthorization</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">MapControllers</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>

</code></pre></div></div>

<ul>
  <li>Add docker file in the root directory.</li>
</ul>

<p><strong>Dockerfile</strong></p>

<div class="language-Dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#See https://aka.ms/containerfastmode to understand how Visual Studio uses this Dockerfile to build your images for faster debugging.</span>

<span class="k">FROM</span><span class="w"> </span><span class="s">mcr.microsoft.com/dotnet/aspnet:6.0</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">base</span>
<span class="k">WORKDIR</span><span class="s"> /app</span>
<span class="k">EXPOSE</span><span class="s"> 80</span>
<span class="k">EXPOSE</span><span class="s"> 443</span>

<span class="k">ENV</span><span class="s"> ASPNETCORE_URLS=http://*:80;</span>
<span class="k">ENV</span><span class="s"> ASPNETCORE_ENVIRONMENT=Development</span>

<span class="k">FROM</span><span class="w"> </span><span class="s">mcr.microsoft.com/dotnet/sdk:6.0</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">build</span>
<span class="k">WORKDIR</span><span class="s"> /src</span>
<span class="k">COPY</span><span class="s"> ["/BFF.Web.csproj", "BFF.Web/"]</span>
<span class="k">RUN </span>dotnet restore <span class="s2">"BFF.Web/BFF.Web.csproj"</span>

<span class="k">WORKDIR</span><span class="s"> "/src/BFF.Web"</span>
<span class="k">COPY</span><span class="s"> . .</span>
<span class="k">WORKDIR</span><span class="s"> "/src/BFF.Web"</span>
<span class="k">RUN </span>dotnet build <span class="s2">"BFF.Web.csproj"</span> <span class="nt">-c</span> Release <span class="nt">-o</span> /app/build

<span class="k">FROM</span><span class="w"> </span><span class="s">build</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">publish</span>
<span class="k">RUN </span>dotnet publish <span class="s2">"BFF.Web.csproj"</span> <span class="nt">-c</span> Release <span class="nt">-o</span> /app/publish

<span class="k">FROM</span><span class="w"> </span><span class="s">base</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">final</span>
<span class="k">WORKDIR</span><span class="s"> /app</span>
<span class="k">COPY</span><span class="s"> --from=publish /app/publish .</span>
<span class="k">ENTRYPOINT</span><span class="s"> ["dotnet", "BFF.Web.dll"]</span>
</code></pre></div></div>

<ul>
  <li>Go to director where dockerfile reside and run the following command to build docker image.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">docker</span> <span class="nf">image</span> <span class="nf">build</span> <span class="nf">-t</span> <span class="nf">mahedee</span><span class="nv">/bff.web:1.0.1</span> <span class="nf">.</span>
</code></pre></div></div>

<ul>
  <li>To configure pod and service add the following yml file with code in Deploy/k8s folder</li>
</ul>

<p><strong>deployment.yml</strong></p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Deployment</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">bffweb-deployment</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">matchLabels</span><span class="pi">:</span>
      <span class="na">app</span><span class="pi">:</span> <span class="s">bffweb-pod</span>
  <span class="na">template</span><span class="pi">:</span>
    <span class="na">metadata</span><span class="pi">:</span>
      <span class="na">labels</span><span class="pi">:</span>
        <span class="na">app</span><span class="pi">:</span> <span class="s">bffweb-pod</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">containers</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">bffweb-container</span>
        <span class="na">image</span><span class="pi">:</span> <span class="s">mahedee/bff.web:1.0.1</span>
        <span class="na">resources</span><span class="pi">:</span>
          <span class="na">limits</span><span class="pi">:</span>
            <span class="na">memory</span><span class="pi">:</span> <span class="s2">"</span><span class="s">128Mi"</span>
            <span class="na">cpu</span><span class="pi">:</span> <span class="s2">"</span><span class="s">500m"</span>
        <span class="na">ports</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">containerPort</span><span class="pi">:</span> <span class="m">80</span>

<span class="nn">---</span>

<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Service</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">bffweb-service</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">app</span><span class="pi">:</span> <span class="s">bffweb-pod</span>
  <span class="na">ports</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">port</span><span class="pi">:</span> <span class="m">8011</span>
    <span class="na">targetPort</span><span class="pi">:</span> <span class="m">80</span>
  <span class="na">type</span><span class="pi">:</span> <span class="s">LoadBalancer</span>


</code></pre></div></div>

<ul>
  <li>Go to the Deploy/k8s directory and run the following commands.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">kubectl</span> <span class="nf">apply</span> <span class="nf">-f</span> <span class="nf">.\deployment.yml</span>
</code></pre></div></div>

<ul>
  <li>Now you can running services using in the kubernetes using the following command</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">kubectl</span> <span class="nb">get</span> <span class="nf">svc</span>
</code></pre></div></div>

<p>Output:</p>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nf">NAME</span>                  <span class="nf">TYPE</span>           <span class="nf">CLUSTER-IP</span>       <span class="nf">EXTERNAL-IP</span>   <span class="nf">PORT</span><span class="s">(S)</span>          <span class="nf">AGE</span>
<span class="nf">bffweb-service</span>        <span class="nf">LoadBalancer</span>   <span class="nf">10.111.186.235</span>   <span class="nf">localhost</span>     <span class="nf">8011:31690</span><span class="nv">/TCP</span>   <span class="nf">10m</span>
<span class="nf">catalogapi-service</span>    <span class="nf">LoadBalancer</span>   <span class="nf">10.101.130.94</span>    <span class="nf">localhost</span>     <span class="nf">8001:30710</span><span class="nv">/TCP</span>   <span class="nf">138m</span>
<span class="nf">kubernetes</span>            <span class="nf">ClusterIP</span>      <span class="nf">10.96.0.1</span>        <span class="p">&lt;</span><span class="nf">none</span><span class="p">&gt;</span>        <span class="mf">443</span><span class="nv">/TCP</span>          <span class="nf">3d20h</span>
<span class="nf">locationapi-service</span>   <span class="nf">ClusterIP</span>      <span class="nf">10.100.204.33</span>    <span class="p">&lt;</span><span class="nf">none</span><span class="p">&gt;</span>        <span class="mf">8002</span><span class="nv">/TCP</span>         <span class="nf">7m57s</span>
<span class="nf">orderingapi-service</span>   <span class="nf">LoadBalancer</span>   <span class="nf">10.96.12.11</span>      <span class="nf">localhost</span>     <span class="nf">8003:31264</span><span class="nv">/TCP</span>   <span class="nf">15m</span>

</code></pre></div></div>

<ul>
  <li>
    <p>You can now access catalog api, location api and ordering api using bffweb’s swagger defination</p>
  </li>
  <li>
    <p>Check all end point using api gateway and swagger using the following URL</p>
  </li>
</ul>

<p>http://localhost:8011/swagger/index.html</p>

<p>Select Swagger definition from top right corner of BFF</p>

<p><strong>Visualizing Service Mesh</strong></p>

<p><strong>Step 11: Install Kiali dashboard</strong></p>

<ul>
  <li>Go to the Istio’s directory. Install Kiali and other addons and wait for them to be deployed. Execute below command inside Istio folder. Use Git bash instead of powershell.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">kubectl</span> <span class="nf">apply</span> <span class="nf">-f</span> <span class="nf">samples</span><span class="nv">/addons</span>
</code></pre></div></div>

<ul>
  <li>Execute below command and wait till get success roll out message.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">kubectl</span> <span class="nf">rollout</span> <span class="nf">status</span> <span class="nf">deployment</span><span class="nv">/kiali</span> <span class="nf">-n</span> <span class="nf">istio-system</span>
</code></pre></div></div>

<p>Note: If there are errors trying to install the addons, try running the command again. There may be some timing issues which will be resolved when the command is run again.</p>

<ul>
  <li>Verify the deployment with below command.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">kubectl</span> <span class="nb">get</span> <span class="nf">po</span> <span class="nf">-n</span> <span class="nf">istio-system</span>
</code></pre></div></div>

<p>Output:</p>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">NAME</span>                                    <span class="nf">READY</span>   <span class="nf">STATUS</span>    <span class="nf">RESTARTS</span>   <span class="nf">AGE</span>
<span class="nf">grafana-6ccd56f4b6-sc894</span>                <span class="mf">1</span><span class="nv">/1</span>     <span class="nf">Running</span>   <span class="mf">0</span>          <span class="nf">13m</span>
<span class="nf">istio-egressgateway-c9cbbd99f-wk265</span>     <span class="mf">1</span><span class="nv">/1</span>     <span class="nf">Running</span>   <span class="mf">0</span>          <span class="nf">87m</span>
<span class="nf">istio-ingressgateway-7c8bc47b49-xpvvc</span>   <span class="mf">1</span><span class="nv">/1</span>     <span class="nf">Running</span>   <span class="mf">0</span>          <span class="nf">87m</span>
<span class="nf">istiod-765596f7ff-2p72v</span>                 <span class="mf">1</span><span class="nv">/1</span>     <span class="nf">Running</span>   <span class="mf">0</span>          <span class="nf">89m</span>
<span class="nf">jaeger-5d44bc5c5d-g2wcl</span>                 <span class="mf">1</span><span class="nv">/1</span>     <span class="nf">Running</span>   <span class="mf">0</span>          <span class="nf">13m</span>
<span class="nf">kiali-79b86ff5bc-cqwrp</span>                  <span class="mf">1</span><span class="nv">/1</span>     <span class="nf">Running</span>   <span class="mf">0</span>          <span class="nf">13m</span>
<span class="nf">prometheus-64fd8ccd65-lglld</span>             <span class="mf">2</span><span class="nv">/2</span>     <span class="nf">Running</span>   <span class="mf">0</span>          <span class="nf">13m</span>
</code></pre></div></div>

<ul>
  <li>Now run the Kiali dashboard using the below command</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">istioctl</span> <span class="nf">dashboard</span> <span class="nf">kiali</span>
</code></pre></div></div>
<p>Kiali dashboard will be open.</p>

<p>Hit the gateway URL. Use the following URL and hit several times and you will get the reflect in kiali dashbaord as below.</p>

<p>http://localhost:8011/swagger/index.html</p>

<p>Select Swagger definition from top right corner of BFF</p>

<p><img src="/assets/images/posts/2022/Kiali.PNG" alt="" /></p>

<p><strong>Step 12: Monitoring with Prometheus &amp; Grafana</strong></p>

<ul>
  <li>Check Prometheus and Grafana is running using the following command.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">kubectl</span> <span class="nb">get</span> <span class="nf">po</span> <span class="nf">-n</span> <span class="nf">istio-system</span>
</code></pre></div></div>

<ul>
  <li>Run Prometheus dashboard using the following command</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">istioctl</span> <span class="nf">dashboard</span> <span class="nf">prometheus</span>
</code></pre></div></div>

<p>View graph in diffrent ways like -</p>

<ul>
  <li>Select istio_requests_total.</li>
  <li>Switch to Graph.</li>
  <li>Check Status/Targets - Kubernetes service discovery.</li>
</ul>

<p><img src="/assets/images/posts/2022/Prometheus.PNG" alt="" /></p>

<ul>
  <li>Run Grafana dashboard using the following command</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">istioctl</span> <span class="nf">dashboard</span> <span class="nf">grafana</span>
</code></pre></div></div>
<ul>
  <li>Go to Dashboar-&gt;Manage-&gt;Istio and see the dashboar as below.</li>
</ul>

<p><img src="/assets/images/posts/2022/Grafana.PNG" alt="" /></p>

<p><strong>Step 13: Distributed Tracing using Jaegar UI</strong></p>

<ul>
  <li>Run Jaeger UI using the following command</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">istioctl</span> <span class="nf">dashboard</span> <span class="nf">jaeger</span>
</code></pre></div></div>

<p><img src="/assets/images/posts/2022/jaeger.PNG" alt="" /></p>

<p><strong>Step 14: Logging from Istio and Envoy</strong></p>

<ul>
  <li>Create a YAML file and name the file elasticsearch.yaml  and write below code.</li>
</ul>

<p><strong>elasticsearch.yaml</strong></p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Logging Namespace. All below are a part of this namespace.</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Namespace</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">logging</span>
<span class="nn">---</span>
<span class="c1"># Elasticsearch Service</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Service</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">elasticsearch</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">logging</span>
  <span class="na">labels</span><span class="pi">:</span>
    <span class="na">app</span><span class="pi">:</span> <span class="s">elasticsearch</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">ports</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">port</span><span class="pi">:</span> <span class="m">9200</span>
    <span class="na">protocol</span><span class="pi">:</span> <span class="s">TCP</span>
    <span class="na">targetPort</span><span class="pi">:</span> <span class="s">db</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">app</span><span class="pi">:</span> <span class="s">elasticsearch</span>
<span class="nn">---</span>
<span class="c1"># Elasticsearch Deployment</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Deployment</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">elasticsearch</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">logging</span>
  <span class="na">labels</span><span class="pi">:</span>
    <span class="na">app</span><span class="pi">:</span> <span class="s">elasticsearch</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">replicas</span><span class="pi">:</span> <span class="m">1</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">matchLabels</span><span class="pi">:</span>
      <span class="na">app</span><span class="pi">:</span> <span class="s">elasticsearch</span>
  <span class="na">template</span><span class="pi">:</span>
    <span class="na">metadata</span><span class="pi">:</span>
      <span class="na">labels</span><span class="pi">:</span>
        <span class="na">app</span><span class="pi">:</span> <span class="s">elasticsearch</span>
      <span class="na">annotations</span><span class="pi">:</span>
        <span class="na">sidecar.istio.io/inject</span><span class="pi">:</span> <span class="s2">"</span><span class="s">false"</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">containers</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">image</span><span class="pi">:</span> <span class="s">docker.elastic.co/elasticsearch/elasticsearch-oss:6.1.1</span>
        <span class="na">name</span><span class="pi">:</span> <span class="s">elasticsearch</span>
        <span class="na">resources</span><span class="pi">:</span>
          <span class="c1"># need more cpu upon initialization, therefore burstable class</span>
          <span class="na">limits</span><span class="pi">:</span>
            <span class="na">cpu</span><span class="pi">:</span> <span class="s">1000m</span>
          <span class="na">requests</span><span class="pi">:</span>
            <span class="na">cpu</span><span class="pi">:</span> <span class="s">100m</span>
        <span class="na">env</span><span class="pi">:</span>
          <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">discovery.type</span>
            <span class="na">value</span><span class="pi">:</span> <span class="s">single-node</span>
        <span class="na">ports</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">containerPort</span><span class="pi">:</span> <span class="m">9200</span>
          <span class="na">name</span><span class="pi">:</span> <span class="s">db</span>
          <span class="na">protocol</span><span class="pi">:</span> <span class="s">TCP</span>
        <span class="pi">-</span> <span class="na">containerPort</span><span class="pi">:</span> <span class="m">9300</span>
          <span class="na">name</span><span class="pi">:</span> <span class="s">transport</span>
          <span class="na">protocol</span><span class="pi">:</span> <span class="s">TCP</span>
        <span class="na">volumeMounts</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">elasticsearch</span>
          <span class="na">mountPath</span><span class="pi">:</span> <span class="s">/data</span>
      <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">elasticsearch</span>
        <span class="na">emptyDir</span><span class="pi">:</span> <span class="pi">{}</span>

</code></pre></div></div>
<ul>
  <li>Create a YAML file and name the file kibana.yaml  and write below code.</li>
</ul>

<p><strong>kibana.yaml</strong></p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Kibana Service</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Service</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">kibana</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">logging</span>
  <span class="na">labels</span><span class="pi">:</span>
    <span class="na">app</span><span class="pi">:</span> <span class="s">kibana</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">ports</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">port</span><span class="pi">:</span> <span class="m">5601</span>
    <span class="na">protocol</span><span class="pi">:</span> <span class="s">TCP</span>
    <span class="na">targetPort</span><span class="pi">:</span> <span class="s">ui</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">app</span><span class="pi">:</span> <span class="s">kibana</span>
<span class="nn">---</span>
<span class="c1"># Kibana Deployment</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Deployment</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">kibana</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">logging</span>
  <span class="na">labels</span><span class="pi">:</span>
    <span class="na">app</span><span class="pi">:</span> <span class="s">kibana</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">replicas</span><span class="pi">:</span> <span class="m">1</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">matchLabels</span><span class="pi">:</span>
      <span class="na">app</span><span class="pi">:</span> <span class="s">kibana</span>
  <span class="na">template</span><span class="pi">:</span>
    <span class="na">metadata</span><span class="pi">:</span>
      <span class="na">labels</span><span class="pi">:</span>
        <span class="na">app</span><span class="pi">:</span> <span class="s">kibana</span>
      <span class="na">annotations</span><span class="pi">:</span>
        <span class="na">sidecar.istio.io/inject</span><span class="pi">:</span> <span class="s2">"</span><span class="s">false"</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">containers</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">kibana</span>
        <span class="na">image</span><span class="pi">:</span> <span class="s">docker.elastic.co/kibana/kibana-oss:6.1.1</span>
        <span class="na">resources</span><span class="pi">:</span>
          <span class="c1"># need more cpu upon initialization, therefore burstable class</span>
          <span class="na">limits</span><span class="pi">:</span>
            <span class="na">cpu</span><span class="pi">:</span> <span class="s">1000m</span>
          <span class="na">requests</span><span class="pi">:</span>
            <span class="na">cpu</span><span class="pi">:</span> <span class="s">100m</span>
        <span class="na">env</span><span class="pi">:</span>
          <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">ELASTICSEARCH_URL</span>
            <span class="na">value</span><span class="pi">:</span> <span class="s">http://elasticsearch:9200</span>
        <span class="na">ports</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">containerPort</span><span class="pi">:</span> <span class="m">5601</span>
          <span class="na">name</span><span class="pi">:</span> <span class="s">ui</span>
          <span class="na">protocol</span><span class="pi">:</span> <span class="s">TCP</span>
<span class="nn">---</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">networking.istio.io/v1alpha3</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Gateway</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">kibana-gateway</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">logging</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">istio</span><span class="pi">:</span> <span class="s">ingressgateway</span>
  <span class="na">servers</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">port</span><span class="pi">:</span>
      <span class="na">number</span><span class="pi">:</span> <span class="m">15033</span>
      <span class="na">name</span><span class="pi">:</span> <span class="s">http-kibana</span>
      <span class="na">protocol</span><span class="pi">:</span> <span class="s">HTTP</span>
    <span class="na">hosts</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s2">"</span><span class="s">*"</span>
<span class="nn">---</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">networking.istio.io/v1alpha3</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">VirtualService</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">kibana-vs</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">logging</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">hosts</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s2">"</span><span class="s">*"</span>
  <span class="na">gateways</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">kibana-gateway</span>
  <span class="na">http</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">match</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">port</span><span class="pi">:</span> <span class="m">15033</span>
    <span class="na">route</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">destination</span><span class="pi">:</span>
        <span class="na">host</span><span class="pi">:</span> <span class="s">kibana</span>
        <span class="na">port</span><span class="pi">:</span>
          <span class="na">number</span><span class="pi">:</span> <span class="m">5601</span>

</code></pre></div></div>

<ul>
  <li>Create a YAML file and name the file fluentd.yaml  and write below code.</li>
</ul>

<p><strong>fluentd.yaml</strong></p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">ServiceAccount</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">fluentd</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">kube-system</span>
<span class="nn">---</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">rbac.authorization.k8s.io/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">ClusterRole</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">fluentd</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">kube-system</span>
<span class="na">rules</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">apiGroups</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">"</span>
    <span class="na">resources</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">pods</span>
      <span class="pi">-</span> <span class="s">namespaces</span>
    <span class="na">verbs</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">get</span>
      <span class="pi">-</span> <span class="s">list</span>
      <span class="pi">-</span> <span class="s">watch</span>
<span class="nn">---</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">ClusterRoleBinding</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">rbac.authorization.k8s.io/v1</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">fluentd</span>
<span class="na">roleRef</span><span class="pi">:</span>
  <span class="na">kind</span><span class="pi">:</span> <span class="s">ClusterRole</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">fluentd</span>
  <span class="na">apiGroup</span><span class="pi">:</span> <span class="s">rbac.authorization.k8s.io</span>
<span class="na">subjects</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">kind</span><span class="pi">:</span> <span class="s">ServiceAccount</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">fluentd</span>
    <span class="na">namespace</span><span class="pi">:</span> <span class="s">kube-system</span>
<span class="nn">---</span>
<span class="c1"># Fluentd Service</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Service</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">fluentd-es</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">kube-system</span>
  <span class="na">labels</span><span class="pi">:</span>
    <span class="na">app</span><span class="pi">:</span> <span class="s">fluentd-es</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">ports</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">fluentd-tcp</span>
      <span class="na">port</span><span class="pi">:</span> <span class="m">24224</span>
      <span class="na">protocol</span><span class="pi">:</span> <span class="s">TCP</span>
      <span class="na">targetPort</span><span class="pi">:</span> <span class="m">24224</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">fluentd-udp</span>
      <span class="na">port</span><span class="pi">:</span> <span class="m">24224</span>
      <span class="na">protocol</span><span class="pi">:</span> <span class="s">UDP</span>
      <span class="na">targetPort</span><span class="pi">:</span> <span class="m">24224</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">k8s-app</span><span class="pi">:</span> <span class="s">fluentd-logging</span>
<span class="nn">---</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">DaemonSet</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">fluentd</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">kube-system</span>
  <span class="na">labels</span><span class="pi">:</span>
    <span class="na">k8s-app</span><span class="pi">:</span> <span class="s">fluentd-logging</span>
    <span class="na">version</span><span class="pi">:</span> <span class="s">v1</span>
    <span class="na">kubernetes.io/cluster-service</span><span class="pi">:</span> <span class="s2">"</span><span class="s">true"</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">matchLabels</span><span class="pi">:</span>
      <span class="na">k8s-app</span><span class="pi">:</span> <span class="s">fluentd-logging</span>
  <span class="na">template</span><span class="pi">:</span>
    <span class="na">metadata</span><span class="pi">:</span>
      <span class="na">labels</span><span class="pi">:</span>
        <span class="na">k8s-app</span><span class="pi">:</span> <span class="s">fluentd-logging</span>
        <span class="na">version</span><span class="pi">:</span> <span class="s">v1</span>
        <span class="na">kubernetes.io/cluster-service</span><span class="pi">:</span> <span class="s2">"</span><span class="s">true"</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">serviceAccount</span><span class="pi">:</span> <span class="s">fluentd</span>
      <span class="na">serviceAccountName</span><span class="pi">:</span> <span class="s">fluentd</span>
      <span class="na">tolerations</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">key</span><span class="pi">:</span> <span class="s">node-role.kubernetes.io/master</span>
          <span class="na">effect</span><span class="pi">:</span> <span class="s">NoSchedule</span>
      <span class="na">containers</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">fluentd</span>
          <span class="na">image</span><span class="pi">:</span> <span class="s">fluent/fluentd-kubernetes-daemonset:v1.3-debian-elasticsearch</span>
          <span class="na">env</span><span class="pi">:</span>
            <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">FLUENT_ELASTICSEARCH_HOST</span>
              <span class="na">value</span><span class="pi">:</span> <span class="s2">"</span><span class="s">elasticsearch.logging"</span>
            <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">FLUENT_ELASTICSEARCH_PORT</span>
              <span class="na">value</span><span class="pi">:</span> <span class="s2">"</span><span class="s">9200"</span>
            <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">FLUENT_ELASTICSEARCH_SCHEME</span>
              <span class="na">value</span><span class="pi">:</span> <span class="s2">"</span><span class="s">http"</span>
            <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">FLUENT_UID</span>
              <span class="na">value</span><span class="pi">:</span> <span class="s2">"</span><span class="s">0"</span>
          <span class="na">resources</span><span class="pi">:</span>
            <span class="na">limits</span><span class="pi">:</span>
              <span class="na">memory</span><span class="pi">:</span> <span class="s">200Mi</span>
            <span class="na">requests</span><span class="pi">:</span>
              <span class="na">cpu</span><span class="pi">:</span> <span class="s">100m</span>
              <span class="na">memory</span><span class="pi">:</span> <span class="s">200Mi</span>
          <span class="na">volumeMounts</span><span class="pi">:</span>
            <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">varlog</span>
              <span class="na">mountPath</span><span class="pi">:</span> <span class="s">/var/log</span>
            <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">varlibdockercontainers</span>
              <span class="na">mountPath</span><span class="pi">:</span> <span class="s">/var/lib/docker/containers</span>
              <span class="na">readOnly</span><span class="pi">:</span> <span class="no">true</span>
      <span class="na">terminationGracePeriodSeconds</span><span class="pi">:</span> <span class="m">30</span>
      <span class="na">volumes</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">varlog</span>
          <span class="na">hostPath</span><span class="pi">:</span>
            <span class="na">path</span><span class="pi">:</span> <span class="s">/var/log</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">varlibdockercontainers</span>
          <span class="na">hostPath</span><span class="pi">:</span>
            <span class="na">path</span><span class="pi">:</span> <span class="s">/var/lib/docker/containers</span>


</code></pre></div></div>

<ul>
  <li>Now execute all above file with below commands.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">kubectl</span> <span class="nf">apply</span> <span class="nf">-f</span> <span class="nf">elasticsearch.yaml</span>

<span class="nf">kubectl</span> <span class="nf">apply</span> <span class="nf">-f</span> <span class="nf">kibana.yaml</span>

<span class="nf">kubectl</span> <span class="nf">apply</span> <span class="nf">-f</span> <span class="nf">fluentd.yaml</span>

<span class="nf">kubectl</span> <span class="nb">get</span> <span class="nf">pods</span> <span class="nf">-n</span> <span class="nf">logging</span>

</code></pre></div></div>

<ul>
  <li>If you are using docker desktop you can use below command to port forward.</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">kubectl</span> <span class="nf">port-forward</span> <span class="nf">svc</span><span class="nv">/kibana</span> <span class="nf">8099:5601</span> <span class="nf">-n</span> <span class="nf">logging</span>
</code></pre></div></div>

<ul>
  <li>Now browse kibana using http://localhost:8099/</li>
</ul>

<p><img src="/assets/images/posts/2022/kibana.PNG" alt="" /></p>

<p><strong>Step 15: Configure Istio to Log to Fluentd</strong></p>

<p>Now we are going to configure Istio to use the same FluentD instance, and send proxy logs through FluentD into Elasticsearch.
It will be actual adapter configuration that I mentioned earler.</p>

<ul>
  <li>Create a YAMl file and name the file fluentd-istio.yaml and write below code.</li>
</ul>

<p><strong>fluentd-istio.yaml</strong></p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Configuration for logentry instances</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">config.istio.io/v1alpha2</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">instance</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">newlog</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">istio-system</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">compiledTemplate</span><span class="pi">:</span> <span class="s">logentry</span>
  <span class="na">params</span><span class="pi">:</span>
    <span class="na">severity</span><span class="pi">:</span> <span class="s1">'</span><span class="s">"info"'</span>
    <span class="na">timestamp</span><span class="pi">:</span> <span class="s">request.time</span>
    <span class="na">variables</span><span class="pi">:</span>
      <span class="na">source</span><span class="pi">:</span> <span class="s">source.labels["app"] | source.workload.name | "unknown"</span>
      <span class="na">user</span><span class="pi">:</span> <span class="s">source.user | "unknown"</span>
      <span class="na">destination</span><span class="pi">:</span> <span class="s">destination.labels["app"] | destination.workload.name | "unknown"</span>
      <span class="na">responseCode</span><span class="pi">:</span> <span class="s">response.code | </span><span class="m">0</span>
      <span class="na">responseSize</span><span class="pi">:</span> <span class="s">response.size | </span><span class="m">0</span>
      <span class="na">latency</span><span class="pi">:</span> <span class="s">response.duration | "0ms"</span>
    <span class="na">monitored_resource_type</span><span class="pi">:</span> <span class="s1">'</span><span class="s">"UNSPECIFIED"'</span>
<span class="nn">---</span>
<span class="c1"># Configuration for a Fluentd handler</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">config.istio.io/v1alpha2</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">handler</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">handler</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">istio-system</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">compiledAdapter</span><span class="pi">:</span> <span class="s">fluentd</span>
  <span class="na">params</span><span class="pi">:</span>
    <span class="na">address</span><span class="pi">:</span> <span class="s2">"</span><span class="s">fluentd-es.kube-system:24224"</span>
<span class="nn">---</span>
<span class="c1"># Rule to send logentry instances to the Fluentd handler</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">config.istio.io/v1alpha2</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">rule</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">newlogtofluentd</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">istio-system</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">match</span><span class="pi">:</span> <span class="s2">"</span><span class="s">true"</span> <span class="c1"># match for all requests</span>
  <span class="na">actions</span><span class="pi">:</span>
   <span class="pi">-</span> <span class="na">handler</span><span class="pi">:</span> <span class="s">handler</span>
     <span class="na">instances</span><span class="pi">:</span>
     <span class="pi">-</span> <span class="s">newlog</span>
<span class="nn">---</span>

</code></pre></div></div>

<ul>
  <li>Apply the below command</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">kubectl</span> <span class="nf">apply</span> <span class="nf">-f</span> <span class="nf">fluentd-istio.yaml</span>
</code></pre></div></div>

<ul>
  <li>Filter on search with kubernetes.container.name is istio-proxy  and we will see logs fron istio proxy.</li>
</ul>

<p><strong>Some commands you may need</strong></p>

<p><strong>Kubectl Commands</strong></p>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">kubectl</span> <span class="nb">get</span> <span class="nf">ns</span>                   <span class="err">//</span> <span class="nf">Get</span> <span class="nf">all</span> <span class="nf">namesapces</span>

<span class="nf">kubectl</span> <span class="nb">get</span> <span class="nf">svc</span> <span class="nf">-n</span> <span class="nf">istio-system</span>   <span class="err">//</span> <span class="nf">Get</span> <span class="nf">services</span> <span class="nf">under</span> <span class="nf">istio-system</span> <span class="nf">name</span> <span class="nf">space</span>

<span class="nf">kubectl</span> <span class="nb">get</span> <span class="nf">all</span> <span class="nf">-n</span> <span class="nf">istio-system</span>   <span class="err">//</span> <span class="nf">Get</span> <span class="nf">all</span> <span class="nf">under</span> <span class="nf">istio-system</span> <span class="nf">name</span> <span class="nf">space</span>

<span class="nf">kubectl</span> <span class="nf">delete</span> <span class="nf">ns</span> <span class="nf">istio-system</span>    <span class="err">//</span> <span class="nf">Delete</span> <span class="nf">namespace</span> <span class="nf">name</span> <span class="nf">istio-system</span>

<span class="nf">kubectl</span> <span class="nb">get</span> <span class="nf">all</span>                   <span class="err">//</span> <span class="nf">Get</span> <span class="nf">everything</span> <span class="nf">in</span> <span class="nf">the</span> <span class="nf">kubernetes</span>

<span class="nf">kubectl</span> <span class="nf">delete</span> <span class="nf">--all</span> <span class="nf">pods</span>         <span class="err">//</span> <span class="nf">Delete</span> <span class="nf">all</span> <span class="nf">pods</span>

<span class="nf">kubectl</span> <span class="nf">delete</span> <span class="nf">--all</span> <span class="nf">pods</span> <span class="nf">--namespace=foo</span>  <span class="err">//</span> <span class="nf">Delete</span> <span class="nf">all</span> <span class="nf">pods</span> <span class="nf">under</span> <span class="nf">the</span> <span class="nf">namespace</span> <span class="nf">foo</span>

<span class="nf">kubectl</span> <span class="nf">delete</span> <span class="nf">--all</span> <span class="nf">deployments</span> <span class="nf">--namespace=foo</span> <span class="err">//</span> <span class="nf">Delete</span> <span class="nf">all</span> <span class="nf">deployments</span> <span class="nf">under</span> <span class="nf">the</span> <span class="nf">namespace</span> <span class="nf">foo</span>

<span class="nf">kubectl</span> <span class="nf">delete</span> <span class="nf">--all</span> <span class="nf">namespaces</span>  <span class="err">//</span> <span class="nf">Delete</span> <span class="nf">all</span> <span class="nf">name</span> <span class="nf">spaces</span>

<span class="nf">kubectl</span> <span class="nf">delete</span> <span class="nf">--all</span> <span class="nf">svc</span>           <span class="err">//</span> <span class="nf">Delete</span> <span class="nf">all</span> <span class="nf">services</span>

<span class="nf">kubectl</span> <span class="nf">delete</span> <span class="nf">--all</span> <span class="nf">deployments</span>    <span class="err">//</span> <span class="nf">Delete</span> <span class="nf">all</span> <span class="nf">deployments</span>

</code></pre></div></div>

<p><strong>Docker Commands</strong></p>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">docker</span> <span class="nf">rm</span> <span class="nf">-vf</span> <span class="nf">$</span><span class="s">(docker ps -aq)</span>     <span class="err">//</span> <span class="nf">To</span> <span class="nf">delete</span> <span class="nf">all</span> <span class="nf">containers</span> <span class="nf">including</span> <span class="nf">its</span> <span class="nf">volumes</span> <span class="nf">use</span>

<span class="nf">docker</span> <span class="nf">rmi</span> <span class="nf">-f</span> <span class="nf">$</span><span class="s">(docker images -aq)</span>  <span class="err">//</span> <span class="nf">To</span> <span class="nf">delete</span> <span class="nf">all</span> <span class="nf">the</span> <span class="nf">images</span>

<span class="nf">docker</span> <span class="nf">images</span>                       <span class="err">//</span> <span class="nf">To</span> <span class="nf">check</span> <span class="nf">docker</span> <span class="nf">images</span>

<span class="nf">docker</span> <span class="nf">image</span> <span class="nf">build</span> <span class="nf">-t</span> <span class="nf">mahedee</span><span class="nv">/location:1.0.1</span> <span class="nf">.</span>  <span class="err">//</span> <span class="nf">create</span> <span class="nf">a</span> <span class="nf">docker</span> <span class="nf">image</span> <span class="nf">name</span> <span class="nf">mahedee</span><span class="nv">/location:1.0.1</span>


</code></pre></div></div>

<p><strong><a href="https://github.com/mahedee/code-sample02/tree/main/service-mesh">Source Code</a></strong></p>]]></content><author><name>Mahedee Hasan</name></author><category term="ASP.NET" /><category term="ASP.NET Core" /><category term="Web API" /><category term="Docker" /><category term="Istio" /><category term="Kubernetes" /><category term="Microservices" /><category term="aspnet" /><category term="csharp" /><summary type="html"><![CDATA[A service mesh is a configurable infrustructure layer. It have capabilities to handle service-to-service communication, resilency, and many cross-cutting concerns. Proxy is a key component of service mesh. Sidecar proxy is injected in each services in this concept. Here I will show you service mesh communication using Istio with asp.net core applications on Kubernetes environment.]]></summary></entry><entry><title type="html">API gateway using ocelot in asp.net core application</title><link href="https://mahedee.net//API-gateway-using-ocelot-in-asp.net-core-application/" rel="alternate" type="text/html" title="API gateway using ocelot in asp.net core application" /><published>2022-02-10T00:00:00+00:00</published><updated>2022-02-10T00:00:00+00:00</updated><id>https://mahedee.net//API-gateway-using-ocelot-in-asp.net-core-application</id><content type="html" xml:base="https://mahedee.net//API-gateway-using-ocelot-in-asp.net-core-application/"><![CDATA[<!-- ## Playing with Clean Architecture and CQRS pattern using asp.net core EF and Dapper -->

<p><strong>Introduction</strong></p>

<p>API Gateway is an API management tools that sits between a client application and backend application. It agregates different services, maintain load balancing and work as reverse proxy. Ocelot is an api managment tool which is very powerful and best fit for .net application.</p>

<p><strong>Tools and technologies used</strong></p>
<ul>
  <li>Visual Studio 2022</li>
  <li>.NET 6.0</li>
  <li>In Memory Database</li>
  <li>Entity Framework</li>
  <li>ASP.NET Core Web API</li>
  <li>C#</li>
  <li>Ocelot</li>
</ul>

<p><strong>Implementation</strong></p>

<p><strong>Step 1: Create solution and projects.</strong></p>

<ul>
  <li>Create a solution name APIGateway</li>
  <li>Add 4 new web api project, name - Catalog.API, Location.API, Ordering.API and BFF.Web in the solution.</li>
</ul>

<p>Here, BFF.Web project will act as API Gateway.</p>

<p><strong>Step 2: Install nuget packages.</strong></p>

<ul>
  <li>Install following nuget package in Catalog.API Project</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore.InMemory</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore.SqlServer</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore.Tools</span>
</code></pre></div></div>

<ul>
  <li>Install following nuget package in Ordering.API Project</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore.InMemory</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore.SqlServer</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore.Tools</span>
</code></pre></div></div>

<ul>
  <li>Install following nuget packages in BFF.Web Project</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Ocelot</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Ocelot.Cache.CacheManager</span>
</code></pre></div></div>

<p><strong>Step 3: Organize Catalog.API Project</strong></p>

<ul>
  <li>Create a Product model class in Catalog.API/Model folder</li>
</ul>

<p><strong>Product.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">System.ComponentModel.DataAnnotations</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.ComponentModel.DataAnnotations.Schema</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Catalog.API.Model</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Product</span>
    <span class="p">{</span>
        <span class="p">[</span><span class="n">Key</span><span class="p">]</span>
        <span class="p">[</span><span class="nf">DatabaseGenerated</span><span class="p">(</span><span class="n">DatabaseGeneratedOption</span><span class="p">.</span><span class="n">Identity</span><span class="p">)]</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">string</span> <span class="n">Description</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">decimal</span> <span class="n">Price</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">int</span> <span class="n">AvailableStock</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">int</span> <span class="n">RestockThreshold</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create a CatalogContext class in Catalog.API/Db folder</li>
</ul>

<p><strong>CatalogContext.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Catalog.API.Model</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Catalog.API.Db</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CatalogContext</span> <span class="p">:</span> <span class="n">DbContext</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">CatalogContext</span><span class="p">(</span><span class="n">DbContextOptions</span><span class="p">&lt;</span><span class="n">CatalogContext</span><span class="p">&gt;</span> <span class="n">options</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
        <span class="p">{</span>

        <span class="p">}</span>

        <span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">OnModelCreating</span><span class="p">(</span><span class="n">ModelBuilder</span> <span class="n">modelBuilder</span><span class="p">)</span>
        <span class="p">{</span>

        <span class="p">}</span>

        <span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">OnConfiguring</span><span class="p">(</span><span class="n">DbContextOptionsBuilder</span> <span class="n">optionsBuilder</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">base</span><span class="p">.</span><span class="nf">OnConfiguring</span><span class="p">(</span><span class="n">optionsBuilder</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">DbSet</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="n">Products</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Modify Program.cs file as follows</li>
</ul>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Catalog.API.Db</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="n">WebApplication</span><span class="p">.</span><span class="nf">CreateBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>

<span class="c1">// Add services to the container.</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">();</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddDbContext</span><span class="p">&lt;</span><span class="n">CatalogContext</span><span class="p">&gt;(</span><span class="n">opt</span> <span class="p">=&gt;</span> <span class="n">opt</span><span class="p">.</span><span class="nf">UseInMemoryDatabase</span><span class="p">(</span><span class="s">"CatalogDB"</span><span class="p">));</span>

<span class="c1">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddEndpointsApiExplorer</span><span class="p">();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddSwaggerGen</span><span class="p">();</span>

<span class="kt">var</span> <span class="n">app</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

<span class="c1">// Configure the HTTP request pipeline.</span>
<span class="k">if</span> <span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">Environment</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
<span class="p">{</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwagger</span><span class="p">();</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwaggerUI</span><span class="p">();</span>
<span class="p">}</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseHttpsRedirection</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseAuthorization</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">MapControllers</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>

</code></pre></div></div>

<ul>
  <li>Create a conroller class name ProductsController in Catalog.API/Controllers folder</li>
</ul>

<p><strong>CatalogContoller.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">#</span><span class="n">nullable</span> <span class="n">disable</span>
<span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Linq</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Threading.Tasks</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Http</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Catalog.API.Db</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Catalog.API.Model</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Catalog.API.Controllers</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
    <span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">ProductsController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">CatalogContext</span> <span class="n">_context</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">ProductsController</span><span class="p">(</span><span class="n">CatalogContext</span> <span class="n">context</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_context</span> <span class="p">=</span> <span class="n">context</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/Products</span>
        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"GetAll"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;&gt;&gt;</span> <span class="nf">GetProducts</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Products</span><span class="p">.</span><span class="nf">ToListAsync</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/Products/5</span>
        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;&gt;</span> <span class="nf">GetProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">product</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Products</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">product</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="n">product</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// PUT: api/Products/5</span>
        <span class="c1">// To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754</span>
        <span class="p">[</span><span class="nf">HttpPut</span><span class="p">(</span><span class="s">"Edit/{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">PutProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="n">Product</span> <span class="n">product</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">id</span> <span class="p">!=</span> <span class="n">product</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">_context</span><span class="p">.</span><span class="nf">Entry</span><span class="p">(</span><span class="n">product</span><span class="p">).</span><span class="n">State</span> <span class="p">=</span> <span class="n">EntityState</span><span class="p">.</span><span class="n">Modified</span><span class="p">;</span>

            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">DbUpdateConcurrencyException</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(!</span><span class="nf">ProductExists</span><span class="p">(</span><span class="n">id</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
                <span class="p">}</span>
                <span class="k">else</span>
                <span class="p">{</span>
                    <span class="k">throw</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// POST: api/Products</span>
        <span class="c1">// To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754</span>
        <span class="p">[</span><span class="nf">HttpPost</span><span class="p">(</span><span class="s">"Add"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;&gt;</span> <span class="nf">PostProduct</span><span class="p">(</span><span class="n">Product</span> <span class="n">product</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_context</span><span class="p">.</span><span class="n">Products</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">product</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>

            <span class="k">return</span> <span class="nf">CreatedAtAction</span><span class="p">(</span><span class="s">"GetProduct"</span><span class="p">,</span> <span class="k">new</span> <span class="p">{</span> <span class="n">id</span> <span class="p">=</span> <span class="n">product</span><span class="p">.</span><span class="n">Id</span> <span class="p">},</span> <span class="n">product</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">// DELETE: api/Products/5</span>
        <span class="p">[</span><span class="nf">HttpDelete</span><span class="p">(</span><span class="s">"Delete/{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">DeleteProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">product</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Products</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">product</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">_context</span><span class="p">.</span><span class="n">Products</span><span class="p">.</span><span class="nf">Remove</span><span class="p">(</span><span class="n">product</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>

            <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="kt">bool</span> <span class="nf">ProductExists</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">_context</span><span class="p">.</span><span class="n">Products</span><span class="p">.</span><span class="nf">Any</span><span class="p">(</span><span class="n">e</span> <span class="p">=&gt;</span> <span class="n">e</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">id</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 4: Organize Ordering.API Project</strong></p>

<ul>
  <li>Create a Order model class in Ordering.API/Model folder</li>
</ul>

<p><strong>Order.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">namespace</span> <span class="nn">Ordering.API.Models</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Order</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Address</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="n">DateTime</span> <span class="n">OrderDate</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">string</span> <span class="n">Comments</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>


</code></pre></div></div>

<ul>
  <li>Create a OrderingContext class in Ordering.API/Db folder</li>
</ul>

<p><strong>OrderingContext.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.API.Models</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.API.Db</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">OrderingContext</span> <span class="p">:</span> <span class="n">DbContext</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">OrderingContext</span><span class="p">(</span><span class="n">DbContextOptions</span><span class="p">&lt;</span><span class="n">OrderingContext</span><span class="p">&gt;</span> <span class="n">options</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
        <span class="p">{</span>

        <span class="p">}</span>
        <span class="k">public</span> <span class="n">DbSet</span><span class="p">&lt;</span><span class="n">Ordering</span><span class="p">.</span><span class="n">API</span><span class="p">.</span><span class="n">Models</span><span class="p">.</span><span class="n">Order</span><span class="p">&gt;</span> <span class="n">Order</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>


</code></pre></div></div>

<ul>
  <li>Modify Program.cs file as follows</li>
</ul>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.API.Db</span><span class="p">;</span>

<span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="n">WebApplication</span><span class="p">.</span><span class="nf">CreateBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>

<span class="c1">// Add services to the container.</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">();</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddDbContext</span><span class="p">&lt;</span><span class="n">OrderingContext</span><span class="p">&gt;(</span><span class="n">opt</span> <span class="p">=&gt;</span> <span class="n">opt</span><span class="p">.</span><span class="nf">UseInMemoryDatabase</span><span class="p">(</span><span class="s">"CatalogDB"</span><span class="p">));</span>

<span class="c1">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddEndpointsApiExplorer</span><span class="p">();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddSwaggerGen</span><span class="p">();</span>

<span class="kt">var</span> <span class="n">app</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

<span class="c1">// Configure the HTTP request pipeline.</span>
<span class="k">if</span> <span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">Environment</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
<span class="p">{</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwagger</span><span class="p">();</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwaggerUI</span><span class="p">();</span>
<span class="p">}</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseHttpsRedirection</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseAuthorization</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">MapControllers</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>

</code></pre></div></div>

<ul>
  <li>Create a conroller class name OrdersController in Ordering.API/Controllers folder</li>
</ul>

<p><strong>OrdersController.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">#</span><span class="n">nullable</span> <span class="n">disable</span>
<span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Linq</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Threading.Tasks</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Http</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.API.Db</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.API.Models</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.API.Controllers</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
    <span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">OrdersController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">OrderingContext</span> <span class="n">_context</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">OrdersController</span><span class="p">(</span><span class="n">OrderingContext</span> <span class="n">context</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_context</span> <span class="p">=</span> <span class="n">context</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/Orders</span>
        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"GetAll"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Order</span><span class="p">&gt;&gt;&gt;</span> <span class="nf">GetOrder</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Order</span><span class="p">.</span><span class="nf">ToListAsync</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/Orders/5</span>
        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">Order</span><span class="p">&gt;&gt;</span> <span class="nf">GetOrder</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">order</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Order</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">order</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="n">order</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// PUT: api/Orders/5</span>
        <span class="c1">// To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754</span>
        <span class="p">[</span><span class="nf">HttpPut</span><span class="p">(</span><span class="s">"Edit/{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">PutOrder</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="n">Order</span> <span class="n">order</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">id</span> <span class="p">!=</span> <span class="n">order</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">_context</span><span class="p">.</span><span class="nf">Entry</span><span class="p">(</span><span class="n">order</span><span class="p">).</span><span class="n">State</span> <span class="p">=</span> <span class="n">EntityState</span><span class="p">.</span><span class="n">Modified</span><span class="p">;</span>

            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">DbUpdateConcurrencyException</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(!</span><span class="nf">OrderExists</span><span class="p">(</span><span class="n">id</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
                <span class="p">}</span>
                <span class="k">else</span>
                <span class="p">{</span>
                    <span class="k">throw</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// POST: api/Orders</span>
        <span class="c1">// To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754</span>
        <span class="p">[</span><span class="nf">HttpPost</span><span class="p">(</span><span class="s">"Add"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">Order</span><span class="p">&gt;&gt;</span> <span class="nf">PostOrder</span><span class="p">(</span><span class="n">Order</span> <span class="n">order</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_context</span><span class="p">.</span><span class="n">Order</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">order</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>

            <span class="k">return</span> <span class="nf">CreatedAtAction</span><span class="p">(</span><span class="s">"GetOrder"</span><span class="p">,</span> <span class="k">new</span> <span class="p">{</span> <span class="n">id</span> <span class="p">=</span> <span class="n">order</span><span class="p">.</span><span class="n">Id</span> <span class="p">},</span> <span class="n">order</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">// DELETE: api/Orders/5</span>
        <span class="p">[</span><span class="nf">HttpDelete</span><span class="p">(</span><span class="s">"Delete/{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">DeleteOrder</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">order</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Order</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">order</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="n">_context</span><span class="p">.</span><span class="n">Order</span><span class="p">.</span><span class="nf">Remove</span><span class="p">(</span><span class="n">order</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>

            <span class="k">return</span> <span class="nf">NoContent</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="kt">bool</span> <span class="nf">OrderExists</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">_context</span><span class="p">.</span><span class="n">Order</span><span class="p">.</span><span class="nf">Any</span><span class="p">(</span><span class="n">e</span> <span class="p">=&gt;</span> <span class="n">e</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">id</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 5: Organize Location.API Project</strong></p>

<ul>
  <li>Create CountriesController in Location.API/Controllers folder</li>
</ul>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Location.API.Controllers</span>
<span class="p">{</span>
    <span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CountriesController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
    <span class="p">{</span>
      <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"GetAll"</span><span class="p">)]</span>
      <span class="k">public</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="nf">Get</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="kt">string</span><span class="p">[]</span> <span class="p">{</span><span class="s">"America"</span><span class="p">,</span><span class="s">"Bangladesh"</span><span class="p">,</span> <span class="s">"Canada"</span> <span class="p">};</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 6: Organize BFF.Web (API Gateway)  Project</strong></p>

<ul>
  <li>Add a configuraton file for api gateway. I keep this file name - ocelot.json. Add this file in the root directory.</li>
</ul>

<p><strong>ocelot.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="err">//---Location</span><span class="w"> </span><span class="err">Service:</span><span class="w"> </span><span class="err">Start</span><span class="w"> </span><span class="err">----------//</span><span class="w">
  </span><span class="nl">"Routes"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"DownstreamPathTemplate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/api/Countries/GetAll"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"DownstreamScheme"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"DownstreamHostAndPorts"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"Host"</span><span class="p">:</span><span class="w"> </span><span class="s2">"localhost"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Port"</span><span class="p">:</span><span class="w"> </span><span class="mi">7003</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">],</span><span class="w">

      </span><span class="err">//</span><span class="w"> </span><span class="err">Configure</span><span class="w"> </span><span class="err">caching</span><span class="w">
      </span><span class="err">//</span><span class="w"> </span><span class="err">the</span><span class="w"> </span><span class="err">cache</span><span class="w"> </span><span class="err">will</span><span class="w"> </span><span class="err">expire</span><span class="w"> </span><span class="err">after</span><span class="w"> </span><span class="mi">30</span><span class="w"> </span><span class="err">seconds.</span><span class="w">
      </span><span class="nl">"FileCacheOptions"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"TtlSeconds"</span><span class="p">:</span><span class="w"> </span><span class="mi">30</span><span class="p">,</span><span class="w">
        </span><span class="nl">"Region"</span><span class="p">:</span><span class="w"> </span><span class="s2">"countriescaching"</span><span class="w">
      </span><span class="p">},</span><span class="w">

      </span><span class="nl">"UpstreamPathTemplate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/Countries/GetAll"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"UpstreamHttpMethod"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="s2">"Get"</span><span class="w"> </span><span class="p">],</span><span class="w">

      </span><span class="err">//</span><span class="w"> </span><span class="err">Enable</span><span class="w"> </span><span class="err">case</span><span class="w"> </span><span class="err">sensative</span><span class="w"> </span><span class="err">Routing/URL</span><span class="w">
      </span><span class="nl">"RouteIsCaseSensitive"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
    </span><span class="p">},</span><span class="w">

    </span><span class="err">//---Location</span><span class="w"> </span><span class="err">Service:</span><span class="w"> </span><span class="err">End</span><span class="w"> </span><span class="err">----------//</span><span class="w">

    </span><span class="err">//</span><span class="w"> </span><span class="err">Catalog</span><span class="w"> </span><span class="err">Services</span><span class="w">
    </span><span class="err">//------------------//</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"DownstreamPathTemplate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/api/Products/GetAll"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"DownstreamScheme"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"DownstreamHostAndPorts"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"Host"</span><span class="p">:</span><span class="w"> </span><span class="s2">"localhost"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Port"</span><span class="p">:</span><span class="w"> </span><span class="mi">7282</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">],</span><span class="w">

      </span><span class="err">//</span><span class="w"> </span><span class="err">Implement</span><span class="w"> </span><span class="err">rate</span><span class="w"> </span><span class="err">limiting</span><span class="w">
      </span><span class="err">//</span><span class="w"> </span><span class="err">maximum</span><span class="w"> </span><span class="err">admitted</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="err">per</span><span class="w"> </span><span class="mi">5</span><span class="err">s.</span><span class="w">
      </span><span class="nl">"RateLimitOptions"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"ClientWhitelist"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
          </span><span class="err">//</span><span class="w"> </span><span class="err">This</span><span class="w"> </span><span class="err">is</span><span class="w"> </span><span class="err">an</span><span class="w"> </span><span class="err">array</span><span class="w"> </span><span class="err">used</span><span class="w"> </span><span class="err">to</span><span class="w"> </span><span class="err">specify</span><span class="w"> </span><span class="err">the</span><span class="w"> </span><span class="err">clients</span><span class="w"> </span><span class="err">that</span><span class="w"> </span><span class="err">should</span><span class="w"> </span><span class="err">not</span><span class="w"> </span><span class="err">be</span><span class="w"> </span><span class="err">affected</span><span class="w"> </span><span class="err">by</span><span class="w"> </span><span class="err">the</span><span class="w"> </span><span class="err">rate-limiting</span><span class="w">
        </span><span class="p">],</span><span class="w">
        </span><span class="nl">"EnableRateLimiting"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
        </span><span class="nl">"Period"</span><span class="p">:</span><span class="w"> </span><span class="s2">"5s"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"PeriodTimespan"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
        </span><span class="nl">"Limit"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="w">
      </span><span class="p">},</span><span class="w">

      </span><span class="nl">"UpstreamPathTemplate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/Products/GetAll"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"UpstreamHttpMethod"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="s2">"Get"</span><span class="w"> </span><span class="p">]</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"DownstreamPathTemplate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/api/Products/Add"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"DownstreamScheme"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"DownstreamHostAndPorts"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"Host"</span><span class="p">:</span><span class="w"> </span><span class="s2">"localhost"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Port"</span><span class="p">:</span><span class="w"> </span><span class="mi">7282</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">],</span><span class="w">

      </span><span class="nl">"UpstreamPathTemplate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/Products/Add"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"UpstreamHttpMethod"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="s2">"Post"</span><span class="w"> </span><span class="p">]</span><span class="w">
    </span><span class="p">},</span><span class="w">

    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"DownstreamPathTemplate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/api/Products/{id}"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"DownstreamScheme"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"DownstreamHostAndPorts"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"Host"</span><span class="p">:</span><span class="w"> </span><span class="s2">"localhost"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Port"</span><span class="p">:</span><span class="w"> </span><span class="mi">7282</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">],</span><span class="w">

      </span><span class="nl">"UpstreamPathTemplate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/Products/{id}"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"UpstreamHttpMethod"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="s2">"Get"</span><span class="w"> </span><span class="p">]</span><span class="w">
    </span><span class="p">},</span><span class="w">

    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"DownstreamPathTemplate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/api/Products/Edit/{id}"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"DownstreamScheme"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"DownstreamHostAndPorts"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"Host"</span><span class="p">:</span><span class="w"> </span><span class="s2">"localhost"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Port"</span><span class="p">:</span><span class="w"> </span><span class="mi">7282</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">],</span><span class="w">

      </span><span class="nl">"UpstreamPathTemplate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/Products/Edit/{id}"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"UpstreamHttpMethod"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="s2">"Put"</span><span class="w"> </span><span class="p">]</span><span class="w">
    </span><span class="p">},</span><span class="w">

    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"DownstreamPathTemplate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/api/Products/Delete/{id}"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"DownstreamScheme"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"DownstreamHostAndPorts"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"Host"</span><span class="p">:</span><span class="w"> </span><span class="s2">"localhost"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Port"</span><span class="p">:</span><span class="w"> </span><span class="mi">7282</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">],</span><span class="w">

      </span><span class="nl">"UpstreamPathTemplate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/Products/Delete/{id}"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"UpstreamHttpMethod"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="s2">"Delete"</span><span class="w"> </span><span class="p">]</span><span class="w">
    </span><span class="p">},</span><span class="w">

    </span><span class="err">//---Catalog</span><span class="w"> </span><span class="err">service</span><span class="w"> </span><span class="err">:</span><span class="w"> </span><span class="err">End</span><span class="w"> </span><span class="err">------------//</span><span class="w">

    </span><span class="err">//---Ordering</span><span class="w"> </span><span class="err">Service:</span><span class="w"> </span><span class="err">Start</span><span class="w"> </span><span class="err">----------//</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">Catch</span><span class="w"> </span><span class="err">All</span><span class="w"> </span><span class="err">Routing</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"DownstreamPathTemplate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/{url}"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"DownstreamScheme"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"DownstreamHostAndPorts"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"Host"</span><span class="p">:</span><span class="w"> </span><span class="s2">"localhost"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Port"</span><span class="p">:</span><span class="w"> </span><span class="mi">7126</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">],</span><span class="w">

      </span><span class="nl">"UpstreamPathTemplate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/{url}"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"UpstreamHttpMethod"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="s2">"Get"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Post"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Put"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Delete"</span><span class="w"> </span><span class="p">]</span><span class="w">
    </span><span class="p">}</span><span class="w">

  </span><span class="p">],</span><span class="w">

  </span><span class="err">//---Ordering</span><span class="w"> </span><span class="err">Service:</span><span class="w"> </span><span class="err">End</span><span class="w"> </span><span class="err">----------//</span><span class="w">

  </span><span class="err">//https://localhost:</span><span class="mi">7282</span><span class="err">/api/Products/GetAll</span><span class="w">

  </span><span class="nl">"GlobalConfiguration"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">enable</span><span class="w"> </span><span class="err">request</span><span class="w"> </span><span class="err">correleation</span><span class="w"> </span><span class="err">id</span><span class="w"> </span><span class="err">to</span><span class="w"> </span><span class="err">capture</span><span class="w"> </span><span class="err">request</span><span class="w"> </span><span class="err">information</span><span class="w">
    </span><span class="nl">"RequestIdKey"</span><span class="p">:</span><span class="w"> </span><span class="s2">"X-Correlation-Id"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"BaseUrl"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https://localhost:7205/"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<ul>
  <li>Modify Program.cs file as follows</li>
</ul>

<p><strong>Program.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Ocelot.DependencyInjection</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ocelot.Middleware</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ocelot.Cache.CacheManager</span><span class="p">;</span>


<span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="n">WebApplication</span><span class="p">.</span><span class="nf">CreateBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>


<span class="kt">var</span> <span class="n">environment</span> <span class="p">=</span> <span class="n">Environment</span><span class="p">.</span><span class="nf">GetEnvironmentVariable</span><span class="p">(</span><span class="s">"ASPNETCORE_ENVIRONMENT"</span><span class="p">);</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Configuration</span><span class="p">.</span><span class="nf">SetBasePath</span><span class="p">(</span><span class="n">Directory</span><span class="p">.</span><span class="nf">GetCurrentDirectory</span><span class="p">())</span>
    <span class="p">.</span><span class="nf">AddJsonFile</span><span class="p">(</span><span class="s">"ocelot.json"</span><span class="p">,</span> <span class="n">optional</span><span class="p">:</span> <span class="k">false</span><span class="p">,</span> <span class="n">reloadOnChange</span><span class="p">:</span> <span class="k">true</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">AddEnvironmentVariables</span><span class="p">();</span>


<span class="c1">// Add services to the container.</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">();</span>
<span class="c1">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddEndpointsApiExplorer</span><span class="p">();</span>

<span class="c1">// Swagger for ocelot</span>
<span class="c1">//builder.Services.AddSwaggerForOcelot(builder.Configuration);</span>
<span class="c1">//builder.Services.AddSwaggerForOcelot();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddSwaggerGen</span><span class="p">();</span>

<span class="c1">//For ocelot</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddOcelot</span><span class="p">()</span>
    
    <span class="c1">// Added for caching</span>
    <span class="p">.</span><span class="nf">AddCacheManager</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="p">{</span>
        <span class="n">x</span><span class="p">.</span><span class="nf">WithDictionaryHandle</span><span class="p">();</span>
    <span class="p">});</span>

<span class="kt">var</span> <span class="n">app</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

<span class="c1">// Configure the HTTP request pipeline.</span>
<span class="k">if</span> <span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">Environment</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
<span class="p">{</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwagger</span><span class="p">();</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwaggerUI</span><span class="p">();</span>
    <span class="c1">//app.UseSwaggerForOcelotUI();</span>
<span class="p">}</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseOcelot</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseHttpsRedirection</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseAuthorization</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">MapControllers</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>

</code></pre></div></div>

<p><strong>Step 7: Run and Test application</strong></p>

<ul>
  <li>Now run multiple (all) projects and test application using postman.</li>
  <li>You have to check application using api gateway.</li>
  <li>For Location service, test using https://localhost:7205/Countries/GetAll</li>
  <li>For Catalog service, test using https://localhost:7205/Products/{endpoints}</li>
  <li>For Ordering service, test using https://localhost:7205/api/Orders/{endpoints}</li>
</ul>

<p><strong>Note:</strong></p>

<p><strong>Configure caching in api gateway</strong></p>

<ul>
  <li>Added the following section in ocelot.json file.</li>
</ul>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">
</span><span class="nl">"FileCacheOptions"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="nl">"TtlSeconds"</span><span class="p">:</span><span class="w"> </span><span class="mi">30</span><span class="p">,</span><span class="w">
</span><span class="nl">"Region"</span><span class="p">:</span><span class="w"> </span><span class="s2">"countriescaching"</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<ul>
  <li>Added the following code block in the  the Program.cs file as follows</li>
</ul>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//For ocelot</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddOcelot</span><span class="p">()</span>
    
    <span class="c1">// Added for caching</span>
    <span class="p">.</span><span class="nf">AddCacheManager</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="p">{</span>
        <span class="n">x</span><span class="p">.</span><span class="nf">WithDictionaryHandle</span><span class="p">();</span>
    <span class="p">});</span>

</code></pre></div></div>

<p><strong>Enable case sensative URL</strong></p>

<ul>
  <li>Add following blocks in ocelot.json for case sensative URL</li>
</ul>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">      </span><span class="err">//</span><span class="w"> </span><span class="err">Enable</span><span class="w"> </span><span class="err">case</span><span class="w"> </span><span class="err">sensative</span><span class="w"> </span><span class="err">Routing/URL</span><span class="w">
      </span><span class="nl">"RouteIsCaseSensitive"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></code></pre></div></div>

<p><strong>Implement rate limiting</strong></p>

<ul>
  <li>Add following blocks in ocelot.json for rate limiting</li>
</ul>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">
</span><span class="err">//</span><span class="w"> </span><span class="err">Implement</span><span class="w"> </span><span class="err">rate</span><span class="w"> </span><span class="err">limiting</span><span class="w">
</span><span class="err">//</span><span class="w"> </span><span class="err">maximum</span><span class="w"> </span><span class="err">admitted</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="err">per</span><span class="w"> </span><span class="mi">5</span><span class="err">s.</span><span class="w">
</span><span class="nl">"RateLimitOptions"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="nl">"ClientWhitelist"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">This</span><span class="w"> </span><span class="err">is</span><span class="w"> </span><span class="err">an</span><span class="w"> </span><span class="err">array</span><span class="w"> </span><span class="err">used</span><span class="w"> </span><span class="err">to</span><span class="w"> </span><span class="err">specify</span><span class="w"> </span><span class="err">the</span><span class="w"> </span><span class="err">clients</span><span class="w"> </span><span class="err">that</span><span class="w"> </span><span class="err">should</span><span class="w"> </span><span class="err">not</span><span class="w"> </span><span class="err">be</span><span class="w"> </span><span class="err">affected</span><span class="w"> </span><span class="err">by</span><span class="w"> </span><span class="err">the</span><span class="w"> </span><span class="err">rate-limiting</span><span class="w">
</span><span class="p">],</span><span class="w">
</span><span class="nl">"EnableRateLimiting"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
</span><span class="nl">"Period"</span><span class="p">:</span><span class="w"> </span><span class="s2">"5s"</span><span class="p">,</span><span class="w">
</span><span class="nl">"PeriodTimespan"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
</span><span class="nl">"Limit"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<p><strong>Catch all routing</strong></p>

<ul>
  <li>Add following blocks in ocelot.json for catch all routing</li>
</ul>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">
</span><span class="p">{</span><span class="w">
    </span><span class="nl">"DownstreamPathTemplate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/{url}"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"DownstreamScheme"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"DownstreamHostAndPorts"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"Host"</span><span class="p">:</span><span class="w"> </span><span class="s2">"localhost"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"Port"</span><span class="p">:</span><span class="w"> </span><span class="mi">7126</span><span class="w">
    </span><span class="p">}</span><span class="w">
    </span><span class="p">],</span><span class="w">

    </span><span class="nl">"UpstreamPathTemplate"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/{url}"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"UpstreamHttpMethod"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="s2">"Get"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Post"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Put"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Delete"</span><span class="w"> </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<p><strong><a href="https://github.com/mahedee/code-sample02/tree/main/api-gateway-ocelot">Source code</a></strong></p>]]></content><author><name>Mahedee Hasan</name></author><category term="Web API" /><category term="ASP.NET Core" /><category term="C#" /><category term="webapi" /><category term="aspnetcore" /><category term="csharp" /><summary type="html"><![CDATA[API Gateway is an API management tools that sits between a client application and backend application. It agregates different services, maintain load balancing and work as reverse proxy. Ocelot is an api managment tool which is very powerful and best fit for .net application.]]></summary></entry><entry><title type="html">Application health monitoring using asp.net core</title><link href="https://mahedee.net//Application-health-monitoring-using-asp.net-core/" rel="alternate" type="text/html" title="Application health monitoring using asp.net core" /><published>2022-02-03T00:00:00+00:00</published><updated>2022-02-03T00:00:00+00:00</updated><id>https://mahedee.net//Application-health-monitoring-using-asp.net-core</id><content type="html" xml:base="https://mahedee.net//Application-health-monitoring-using-asp.net-core/"><![CDATA[<!-- ## Playing with Clean Architecture and CQRS pattern using asp.net core EF and Dapper -->

<p><strong>Introduction</strong></p>

<p>Health monitoring provides real-time information about the state of the application. It’s a very crucial part for large distributed application. Especially, microservies based application. In this article, I will show you how to monitor application’s health in different ways.</p>

<p><strong>Tools and technologies used</strong></p>
<ul>
  <li>Visual Studio 2022</li>
  <li>.NET 6.0</li>
  <li>SQL Server</li>
  <li>Entity Framework</li>
  <li>ASP.NET Core Web API</li>
  <li>C#</li>
</ul>

<p><strong>Implementation</strong></p>

<p><strong>Step 1: Create solution and projects.</strong></p>

<ul>
  <li>Create a solution name HealthCheck</li>
  <li>Add 4 new web api project, name - Admin.API, Customer.API, Location.API and WebStatus in the solution.</li>
</ul>

<p>Here WebStatus project will monitor health of Admin.API, Customer.API and Location.API project and display result on watchdog.</p>

<p><strong>Step 2: Install nuget packages.</strong></p>

<ul>
  <li>Install following nuget package in Admin.API Project</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">AspNetCore.HealthChecks.UI.Client</span>
</code></pre></div></div>

<ul>
  <li>Install following nuget packages in Customer.API Project</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">AspNetCore.HealthChecks.SqlServer</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">AspNetCore.HealthChecks.UI.Client</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore.SqlServer</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Newtonsoft.Json</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.Extensions.Diagnostics.HealthChecks.EntityFrameworkCore</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">System.Data.SqlClient</span>

</code></pre></div></div>

<ul>
  <li>Install following nuget packages in Location.API Project</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">AspNetCore.HealthChecks.UI.Client</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore.SqlServer</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.Extensions.Diagnostics.HealthChecks.EntityFrameworkCore</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">AspNetCore.HealthChecks.SqlServer</span>

</code></pre></div></div>

<ul>
  <li>Install following nuget packages in WebStatus Project</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">AspNetCore.HealthChecks.UI</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">AspNetCore.HealthChecks.UI.InMemory.Storage</span>
</code></pre></div></div>

<p><strong>Step 3: Configure Admin.API project for health check</strong></p>

<ul>
  <li>Modify Program.cs file is as follows</li>
</ul>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">HealthChecks.UI.Client</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Diagnostics.HealthChecks</span><span class="p">;</span>

<span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="n">WebApplication</span><span class="p">.</span><span class="nf">CreateBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>

<span class="c1">// Add services to the container.</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">();</span>

<span class="c1">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddEndpointsApiExplorer</span><span class="p">();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddSwaggerGen</span><span class="p">();</span>

<span class="c1">// Register required services for health checks</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddHealthChecks</span><span class="p">();</span>


<span class="kt">var</span> <span class="n">app</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

<span class="c1">// Configure the HTTP request pipeline.</span>
<span class="k">if</span> <span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">Environment</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
<span class="p">{</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwagger</span><span class="p">();</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwaggerUI</span><span class="p">();</span>
<span class="p">}</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseHttpsRedirection</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseAuthorization</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">MapControllers</span><span class="p">();</span>

<span class="c1">// Cofigure for health check</span>
<span class="n">app</span><span class="p">.</span><span class="nf">MapHealthChecks</span><span class="p">(</span><span class="s">"/hc"</span><span class="p">,</span> <span class="k">new</span> <span class="nf">HealthCheckOptions</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">Predicate</span> <span class="p">=</span> <span class="n">_</span> <span class="p">=&gt;</span> <span class="k">true</span><span class="p">,</span>
    <span class="n">ResponseWriter</span> <span class="p">=</span> <span class="n">UIResponseWriter</span><span class="p">.</span><span class="n">WriteHealthCheckUIResponse</span><span class="p">,</span>
<span class="p">});</span>

<span class="c1">//a basic health probe configuration that reports the app's availability to process requests (liveness) is sufficient to discover the status of the app.</span>
<span class="n">app</span><span class="p">.</span><span class="nf">MapHealthChecks</span><span class="p">(</span><span class="s">"/liveness"</span><span class="p">,</span> <span class="k">new</span> <span class="nf">HealthCheckOptions</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">Predicate</span> <span class="p">=</span> <span class="n">r</span> <span class="p">=&gt;</span> <span class="n">r</span><span class="p">.</span><span class="n">Name</span><span class="p">.</span><span class="nf">Contains</span><span class="p">(</span><span class="s">"self"</span><span class="p">),</span>
<span class="p">});</span>

<span class="n">app</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>

</code></pre></div></div>

<ul>
  <li>Here, Registered healthcheck service using</li>
</ul>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddHealthChecks</span><span class="p">();</span>
</code></pre></div></div>

<ul>
  <li>Added healthcheck end point using following code</li>
</ul>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>

<span class="c1">// Cofigure for health check</span>
<span class="n">app</span><span class="p">.</span><span class="nf">MapHealthChecks</span><span class="p">(</span><span class="s">"/hc"</span><span class="p">,</span> <span class="k">new</span> <span class="nf">HealthCheckOptions</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">Predicate</span> <span class="p">=</span> <span class="n">_</span> <span class="p">=&gt;</span> <span class="k">true</span><span class="p">,</span>
    <span class="n">ResponseWriter</span> <span class="p">=</span> <span class="n">UIResponseWriter</span><span class="p">.</span><span class="n">WriteHealthCheckUIResponse</span><span class="p">,</span>
<span class="p">});</span>

<span class="c1">//a basic health probe configuration that reports the app's availability to process requests (liveness) is sufficient to discover the status of the app.</span>
<span class="n">app</span><span class="p">.</span><span class="nf">MapHealthChecks</span><span class="p">(</span><span class="s">"/liveness"</span><span class="p">,</span> <span class="k">new</span> <span class="nf">HealthCheckOptions</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">Predicate</span> <span class="p">=</span> <span class="n">r</span> <span class="p">=&gt;</span> <span class="n">r</span><span class="p">.</span><span class="n">Name</span><span class="p">.</span><span class="nf">Contains</span><span class="p">(</span><span class="s">"self"</span><span class="p">),</span>
<span class="p">});</span>


</code></pre></div></div>

<ul>
  <li>
    <p>Now you can run and check the application health using the following URL</p>

    <p>https://localhost:7147/hc</p>

    <p>https://localhost:7147/liveness</p>
  </li>
</ul>

<p><strong>Step 4: Configure Customer.API project for health check</strong></p>

<ul>
  <li>Add ConnectionString in appsettings.json file as follows</li>
</ul>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"Logging"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"LogLevel"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Default"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Information"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Microsoft.AspNetCore"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Warning"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"ConnectionStrings"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"CustomerDBConnection"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Server=localhost;Database=Demo.CustomerDB;User Id=sa;Password=secret@pass;"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"AllowedHosts"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*"</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<ul>
  <li>Add CustomerDbContext class in Customer.API/Db folder
<strong>CustomerDbContext.cs</strong></li>
</ul>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Customer.API.Db</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CustomerDbContext</span> <span class="p">:</span> <span class="n">DbContext</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">CustomerDbContext</span><span class="p">(</span><span class="n">DbContextOptions</span><span class="p">&lt;</span><span class="n">CustomerDbContext</span><span class="p">&gt;</span> <span class="n">options</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
        <span class="p">{</span>

        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>


</code></pre></div></div>

<ul>
  <li>Add DatabaseHealthCheck and HealthCheckResponse class in Customer.API/Utility folder</li>
</ul>

<p><strong>DatabaseHealthCheck.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Microsoft.Extensions.Diagnostics.HealthChecks</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Data.SqlClient</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Customer.API.Utility</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">DatabaseHealthCheck</span> <span class="p">:</span> <span class="n">IHealthCheck</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="n">IConfiguration</span> <span class="n">_configuration</span><span class="p">;</span>
        <span class="k">public</span> <span class="nf">DatabaseHealthCheck</span><span class="p">(</span><span class="n">IConfiguration</span> <span class="n">configuration</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_configuration</span> <span class="p">=</span> <span class="n">configuration</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">HealthCheckResult</span><span class="p">&gt;</span> <span class="nf">CheckHealthAsync</span><span class="p">(</span><span class="n">HealthCheckContext</span> <span class="n">context</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span> <span class="p">=</span> <span class="k">default</span><span class="p">)</span>
        <span class="p">{</span>
            
            <span class="kt">string</span> <span class="n">_connectionString</span> <span class="p">=</span> <span class="n">_configuration</span><span class="p">.</span><span class="nf">GetConnectionString</span><span class="p">(</span><span class="s">"CustomerDBConnection"</span><span class="p">);</span>

            <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">connection</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">SqlConnection</span><span class="p">(</span><span class="n">_connectionString</span><span class="p">))</span>
            <span class="p">{</span>
                <span class="k">try</span>
                <span class="p">{</span>
                    <span class="n">connection</span><span class="p">.</span><span class="nf">Open</span><span class="p">();</span>
                <span class="p">}</span>
                <span class="k">catch</span> <span class="p">(</span><span class="n">SqlException</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="c1">// return HealthCheckResult.Healthy();</span>
                    <span class="k">return</span> <span class="k">await</span> <span class="n">Task</span><span class="p">.</span><span class="nf">FromResult</span><span class="p">(</span><span class="k">new</span> <span class="nf">HealthCheckResult</span><span class="p">(</span><span class="n">context</span><span class="p">.</span><span class="n">Registration</span><span class="p">.</span><span class="n">FailureStatus</span><span class="p">,</span> <span class="s">"Cannot connect to Demo.CustomerDB"</span><span class="p">));</span>
                <span class="p">}</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="n">HealthCheckResult</span><span class="p">.</span><span class="nf">Healthy</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>


</code></pre></div></div>
<p><strong>HealthCheckResponse.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">HealthChecks.UI.Client</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Extensions.Diagnostics.HealthChecks</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Newtonsoft.Json</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Customer.API.Utility</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">HealthCheckResponse</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">static</span> <span class="n">Task</span> <span class="nf">CustomResponseWriter</span><span class="p">(</span><span class="n">HttpContext</span> <span class="n">context</span><span class="p">,</span> <span class="n">HealthReport</span> <span class="n">healthReport</span><span class="p">)</span>
        <span class="p">{</span>

            <span class="n">context</span><span class="p">.</span><span class="n">Response</span><span class="p">.</span><span class="n">ContentType</span> <span class="p">=</span> <span class="s">"application/json"</span><span class="p">;</span>

            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="n">JsonConvert</span><span class="p">.</span><span class="nf">SerializeObject</span><span class="p">(</span><span class="k">new</span>
            <span class="p">{</span>
                <span class="n">status</span> <span class="p">=</span> <span class="n">healthReport</span><span class="p">.</span><span class="n">Status</span><span class="p">.</span><span class="nf">ToString</span><span class="p">(),</span>
                <span class="n">errors</span> <span class="p">=</span> <span class="n">healthReport</span><span class="p">.</span><span class="n">Entries</span><span class="p">.</span><span class="nf">Select</span><span class="p">(</span><span class="n">e</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="p">{</span>
                    <span class="n">key</span> <span class="p">=</span> <span class="n">e</span><span class="p">.</span><span class="n">Key</span><span class="p">,</span>
                    <span class="k">value</span> <span class="p">=</span> <span class="n">e</span><span class="p">.</span><span class="n">Value</span><span class="p">.</span><span class="n">Status</span><span class="p">.</span><span class="nf">ToString</span><span class="p">()</span>
                <span class="p">})</span>
            <span class="p">});</span>

            <span class="k">return</span> <span class="n">UIResponseWriter</span><span class="p">.</span><span class="nf">WriteHealthCheckUIResponse</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">healthReport</span><span class="p">);</span>
            <span class="c1">//return context.Response.WriteAsync(result);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Modify Program.cs file is as follows</li>
</ul>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Customer.API.Db</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Customer.API.Utility</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">HealthChecks.UI.Client</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Diagnostics.HealthChecks</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Extensions.Diagnostics.HealthChecks</span><span class="p">;</span>

<span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="n">WebApplication</span><span class="p">.</span><span class="nf">CreateBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>


<span class="c1">// Add services to the container.</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">();</span>

<span class="c1">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddEndpointsApiExplorer</span><span class="p">();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddSwaggerGen</span><span class="p">();</span>

<span class="c1">// Sql server health check with name "customersql" with custom healtcheck</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddHealthChecks</span><span class="p">()</span>
    <span class="p">.</span><span class="n">AddCheck</span><span class="p">&lt;</span><span class="n">DatabaseHealthCheck</span><span class="p">&gt;(</span><span class="s">"customersql"</span><span class="p">);</span>


<span class="c1">// Create DbContext</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddDbContext</span><span class="p">&lt;</span><span class="n">CustomerDbContext</span><span class="p">&gt;(</span><span class="n">options</span> <span class="p">=&gt;</span>
       <span class="n">options</span><span class="p">.</span><span class="nf">UseSqlServer</span><span class="p">(</span>
           <span class="n">builder</span><span class="p">.</span><span class="n">Configuration</span><span class="p">.</span><span class="nf">GetConnectionString</span><span class="p">(</span><span class="s">"CustomerDBConnection"</span><span class="p">))</span>
    <span class="p">);</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddHealthChecks</span><span class="p">()</span>
    <span class="p">.</span><span class="n">AddDbContextCheck</span><span class="p">&lt;</span><span class="n">CustomerDbContext</span><span class="p">&gt;(</span><span class="s">"customerdbcontext"</span><span class="p">);</span>

<span class="kt">var</span> <span class="n">app</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

<span class="c1">// Configure the HTTP request pipeline.</span>
<span class="k">if</span> <span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">Environment</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
<span class="p">{</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwagger</span><span class="p">();</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwaggerUI</span><span class="p">();</span>
<span class="p">}</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseHttpsRedirection</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseAuthorization</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">MapControllers</span><span class="p">();</span>

<span class="kt">var</span> <span class="n">options</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">HealthCheckOptions</span><span class="p">();</span>
<span class="n">options</span><span class="p">.</span><span class="n">ResultStatusCodes</span><span class="p">[</span><span class="n">HealthStatus</span><span class="p">.</span><span class="n">Healthy</span><span class="p">]</span> <span class="p">=</span> <span class="n">StatusCodes</span><span class="p">.</span><span class="n">Status200OK</span><span class="p">;</span>
<span class="n">options</span><span class="p">.</span><span class="n">ResultStatusCodes</span><span class="p">[</span><span class="n">HealthStatus</span><span class="p">.</span><span class="n">Degraded</span><span class="p">]</span> <span class="p">=</span> <span class="n">StatusCodes</span><span class="p">.</span><span class="n">Status200OK</span><span class="p">;</span>
<span class="n">options</span><span class="p">.</span><span class="n">ResultStatusCodes</span><span class="p">[</span><span class="n">HealthStatus</span><span class="p">.</span><span class="n">Unhealthy</span><span class="p">]</span> <span class="p">=</span> <span class="n">StatusCodes</span><span class="p">.</span><span class="n">Status503ServiceUnavailable</span><span class="p">;</span>
<span class="n">options</span><span class="p">.</span><span class="n">ResponseWriter</span> <span class="p">=</span> <span class="n">HealthCheckResponse</span><span class="p">.</span><span class="n">CustomResponseWriter</span><span class="p">;</span>
<span class="n">options</span><span class="p">.</span><span class="n">Predicate</span> <span class="p">=</span> <span class="n">healthcheck</span> <span class="p">=&gt;</span> <span class="n">healthcheck</span><span class="p">.</span><span class="n">Name</span> <span class="p">==</span> <span class="s">"customersql"</span><span class="p">;</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseHealthChecks</span><span class="p">(</span><span class="s">"/customersql"</span><span class="p">,</span> <span class="n">options</span><span class="p">);</span>
<span class="c1">//.RequireAuthorization();</span>


<span class="n">app</span><span class="p">.</span><span class="nf">UseHealthChecks</span><span class="p">(</span><span class="s">"/customerdbcontext"</span><span class="p">,</span> <span class="k">new</span> <span class="nf">HealthCheckOptions</span><span class="p">()</span>
<span class="p">{</span>
    <span class="c1">// Supress cache headers</span>
    <span class="n">AllowCachingResponses</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span>

    <span class="c1">// Customize the HTTP Status code</span>
    <span class="n">ResultStatusCodes</span> <span class="p">=</span>
    <span class="p">{</span>
        <span class="p">[</span><span class="n">HealthStatus</span><span class="p">.</span><span class="n">Healthy</span><span class="p">]</span> <span class="p">=</span> <span class="n">StatusCodes</span><span class="p">.</span><span class="n">Status200OK</span><span class="p">,</span>
        <span class="p">[</span><span class="n">HealthStatus</span><span class="p">.</span><span class="n">Degraded</span><span class="p">]</span> <span class="p">=</span> <span class="n">StatusCodes</span><span class="p">.</span><span class="n">Status200OK</span><span class="p">,</span>
        <span class="p">[</span><span class="n">HealthStatus</span><span class="p">.</span><span class="n">Unhealthy</span><span class="p">]=</span> <span class="n">StatusCodes</span><span class="p">.</span><span class="n">Status503ServiceUnavailable</span>
    <span class="p">},</span>

    <span class="c1">// filters the health checks so that only those tagged with sql</span>
    <span class="n">Predicate</span> <span class="p">=</span> <span class="n">healthCheck</span> <span class="p">=&gt;</span> <span class="n">healthCheck</span><span class="p">.</span><span class="n">Name</span> <span class="p">==</span> <span class="s">"customerdbcontext"</span><span class="p">,</span>

    <span class="n">ResponseWriter</span> <span class="p">=</span> <span class="n">UIResponseWriter</span><span class="p">.</span><span class="n">WriteHealthCheckUIResponse</span><span class="p">,</span>
<span class="p">});</span>


<span class="c1">// Cofigure for health check</span>
<span class="n">app</span><span class="p">.</span><span class="nf">MapHealthChecks</span><span class="p">(</span><span class="s">"/hc"</span><span class="p">,</span> <span class="k">new</span> <span class="nf">HealthCheckOptions</span><span class="p">()</span>
<span class="p">{</span>
    <span class="c1">//Predicate = _ =&gt; true,</span>
    <span class="n">Predicate</span> <span class="p">=</span> <span class="n">r</span> <span class="p">=&gt;</span> <span class="n">r</span><span class="p">.</span><span class="n">Name</span><span class="p">.</span><span class="nf">Contains</span><span class="p">(</span><span class="s">"self"</span><span class="p">),</span>
    <span class="n">ResponseWriter</span> <span class="p">=</span> <span class="n">UIResponseWriter</span><span class="p">.</span><span class="n">WriteHealthCheckUIResponse</span><span class="p">,</span>
<span class="p">});</span>

<span class="c1">//a basic health probe configuration that reports the app's availability</span>
<span class="c1">//to process requests (liveness) is sufficient to discover the status of the app.</span>
<span class="n">app</span><span class="p">.</span><span class="nf">MapHealthChecks</span><span class="p">(</span><span class="s">"/liveness"</span><span class="p">,</span> <span class="k">new</span> <span class="nf">HealthCheckOptions</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">Predicate</span> <span class="p">=</span> <span class="n">r</span> <span class="p">=&gt;</span> <span class="n">r</span><span class="p">.</span><span class="n">Name</span><span class="p">.</span><span class="nf">Contains</span><span class="p">(</span><span class="s">"self"</span><span class="p">),</span>
<span class="p">});</span>

<span class="n">app</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>

</code></pre></div></div>

<ul>
  <li>Here, Checking sql server’s health with a name customersql using following code</li>
</ul>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddHealthChecks</span><span class="p">()</span>
    <span class="p">.</span><span class="n">AddCheck</span><span class="p">&lt;</span><span class="n">DatabaseHealthCheck</span><span class="p">&gt;(</span><span class="s">"customersql"</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li>Here, Checking sql server’s health using dbcontext of EF using following code</li>
</ul>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddDbContext</span><span class="p">&lt;</span><span class="n">CustomerDbContext</span><span class="p">&gt;(</span><span class="n">options</span> <span class="p">=&gt;</span>
       <span class="n">options</span><span class="p">.</span><span class="nf">UseSqlServer</span><span class="p">(</span>
           <span class="n">builder</span><span class="p">.</span><span class="n">Configuration</span><span class="p">.</span><span class="nf">GetConnectionString</span><span class="p">(</span><span class="s">"CustomerDBConnection"</span><span class="p">))</span>
    <span class="p">);</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddHealthChecks</span><span class="p">()</span>
    <span class="p">.</span><span class="n">AddDbContextCheck</span><span class="p">&lt;</span><span class="n">CustomerDbContext</span><span class="p">&gt;(</span><span class="s">"customerdbcontext"</span><span class="p">);</span>

</code></pre></div></div>

<ul>
  <li>Added healthcheck end point for different services seperatedly using the following code</li>
</ul>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kt">var</span> <span class="n">options</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">HealthCheckOptions</span><span class="p">();</span>
<span class="n">options</span><span class="p">.</span><span class="n">ResultStatusCodes</span><span class="p">[</span><span class="n">HealthStatus</span><span class="p">.</span><span class="n">Healthy</span><span class="p">]</span> <span class="p">=</span> <span class="n">StatusCodes</span><span class="p">.</span><span class="n">Status200OK</span><span class="p">;</span>
<span class="n">options</span><span class="p">.</span><span class="n">ResultStatusCodes</span><span class="p">[</span><span class="n">HealthStatus</span><span class="p">.</span><span class="n">Degraded</span><span class="p">]</span> <span class="p">=</span> <span class="n">StatusCodes</span><span class="p">.</span><span class="n">Status200OK</span><span class="p">;</span>
<span class="n">options</span><span class="p">.</span><span class="n">ResultStatusCodes</span><span class="p">[</span><span class="n">HealthStatus</span><span class="p">.</span><span class="n">Unhealthy</span><span class="p">]</span> <span class="p">=</span> <span class="n">StatusCodes</span><span class="p">.</span><span class="n">Status503ServiceUnavailable</span><span class="p">;</span>
<span class="n">options</span><span class="p">.</span><span class="n">ResponseWriter</span> <span class="p">=</span> <span class="n">HealthCheckResponse</span><span class="p">.</span><span class="n">CustomResponseWriter</span><span class="p">;</span>
<span class="n">options</span><span class="p">.</span><span class="n">Predicate</span> <span class="p">=</span> <span class="n">healthcheck</span> <span class="p">=&gt;</span> <span class="n">healthcheck</span><span class="p">.</span><span class="n">Name</span> <span class="p">==</span> <span class="s">"customersql"</span><span class="p">;</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseHealthChecks</span><span class="p">(</span><span class="s">"/customersql"</span><span class="p">,</span> <span class="n">options</span><span class="p">);</span>
<span class="c1">//.RequireAuthorization();</span>


<span class="n">app</span><span class="p">.</span><span class="nf">UseHealthChecks</span><span class="p">(</span><span class="s">"/customerdbcontext"</span><span class="p">,</span> <span class="k">new</span> <span class="nf">HealthCheckOptions</span><span class="p">()</span>
<span class="p">{</span>
    <span class="c1">// Supress cache headers</span>
    <span class="n">AllowCachingResponses</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span>

    <span class="c1">// Customize the HTTP Status code</span>
    <span class="n">ResultStatusCodes</span> <span class="p">=</span>
    <span class="p">{</span>
        <span class="p">[</span><span class="n">HealthStatus</span><span class="p">.</span><span class="n">Healthy</span><span class="p">]</span> <span class="p">=</span> <span class="n">StatusCodes</span><span class="p">.</span><span class="n">Status200OK</span><span class="p">,</span>
        <span class="p">[</span><span class="n">HealthStatus</span><span class="p">.</span><span class="n">Degraded</span><span class="p">]</span> <span class="p">=</span> <span class="n">StatusCodes</span><span class="p">.</span><span class="n">Status200OK</span><span class="p">,</span>
        <span class="p">[</span><span class="n">HealthStatus</span><span class="p">.</span><span class="n">Unhealthy</span><span class="p">]=</span> <span class="n">StatusCodes</span><span class="p">.</span><span class="n">Status503ServiceUnavailable</span>
    <span class="p">},</span>

    <span class="c1">// filters the health checks so that only those tagged with sql</span>
    <span class="n">Predicate</span> <span class="p">=</span> <span class="n">healthCheck</span> <span class="p">=&gt;</span> <span class="n">healthCheck</span><span class="p">.</span><span class="n">Name</span> <span class="p">==</span> <span class="s">"customerdbcontext"</span><span class="p">,</span>

    <span class="n">ResponseWriter</span> <span class="p">=</span> <span class="n">UIResponseWriter</span><span class="p">.</span><span class="n">WriteHealthCheckUIResponse</span><span class="p">,</span>
<span class="p">});</span>


<span class="c1">// Cofigure for health check</span>
<span class="n">app</span><span class="p">.</span><span class="nf">MapHealthChecks</span><span class="p">(</span><span class="s">"/hc"</span><span class="p">,</span> <span class="k">new</span> <span class="nf">HealthCheckOptions</span><span class="p">()</span>
<span class="p">{</span>
    <span class="c1">//Predicate = _ =&gt; true,</span>
    <span class="n">Predicate</span> <span class="p">=</span> <span class="n">r</span> <span class="p">=&gt;</span> <span class="n">r</span><span class="p">.</span><span class="n">Name</span><span class="p">.</span><span class="nf">Contains</span><span class="p">(</span><span class="s">"self"</span><span class="p">),</span>
    <span class="n">ResponseWriter</span> <span class="p">=</span> <span class="n">UIResponseWriter</span><span class="p">.</span><span class="n">WriteHealthCheckUIResponse</span><span class="p">,</span>
<span class="p">});</span>

<span class="c1">//a basic health probe configuration that reports the app's availability</span>
<span class="c1">//to process requests (liveness) is sufficient to discover the status of the app.</span>
<span class="n">app</span><span class="p">.</span><span class="nf">MapHealthChecks</span><span class="p">(</span><span class="s">"/liveness"</span><span class="p">,</span> <span class="k">new</span> <span class="nf">HealthCheckOptions</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">Predicate</span> <span class="p">=</span> <span class="n">r</span> <span class="p">=&gt;</span> <span class="n">r</span><span class="p">.</span><span class="n">Name</span><span class="p">.</span><span class="nf">Contains</span><span class="p">(</span><span class="s">"self"</span><span class="p">),</span>
<span class="p">});</span>

</code></pre></div></div>

<ul>
  <li>
    <p>Now you can run and check the application health using the following URL</p>

    <p>https://localhost:7145/hc</p>

    <p>https://localhost:7145/customersql</p>

    <p>https://localhost:7145/customerdbcontext</p>

    <p>https://localhost:7145/liveness</p>
  </li>
</ul>

<p><strong>Step 5: Configure Location.API project for health check</strong></p>

<ul>
  <li>Add ConnectionString in appsettings.json file as follows</li>
</ul>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"Logging"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"LogLevel"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Default"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Information"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Microsoft.AspNetCore"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Warning"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"ConnectionStrings"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"CustomerDBConnection"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Server=localhost;Database=Demo.LocationDB;User Id=sa;Password=secret@pass;"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"AllowedHosts"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*"</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<ul>
  <li>Add CustomerDbContext class in Customer.API/Persistence folder</li>
</ul>

<p><strong>LocationDbContext.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>


<span class="k">namespace</span> <span class="nn">Location.API.Persistence</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">LocationDbContext</span> <span class="p">:</span> <span class="n">DbContext</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">LocationDbContext</span><span class="p">(</span><span class="n">DbContextOptions</span><span class="p">&lt;</span><span class="n">LocationDbContext</span><span class="p">&gt;</span> <span class="n">options</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
        <span class="p">{</span>

        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>



</code></pre></div></div>

<ul>
  <li>Modify Program.cs file is as follows</li>
</ul>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">HealthChecks.UI.Client</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Location.API.Persistence</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Diagnostics.HealthChecks</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="n">WebApplication</span><span class="p">.</span><span class="nf">CreateBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>

<span class="c1">// Add services to the container.</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">();</span>
<span class="c1">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddEndpointsApiExplorer</span><span class="p">();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddSwaggerGen</span><span class="p">();</span>


<span class="c1">// Sql server health check </span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddHealthChecks</span><span class="p">()</span>
    <span class="p">.</span><span class="nf">AddSqlServer</span><span class="p">(</span>
        <span class="n">builder</span><span class="p">.</span><span class="n">Configuration</span><span class="p">.</span><span class="nf">GetConnectionString</span><span class="p">(</span><span class="s">"LocationDBConnection"</span><span class="p">));</span>

<span class="c1">// Create DbContext</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddDbContext</span><span class="p">&lt;</span><span class="n">LocationDbContext</span><span class="p">&gt;(</span><span class="n">options</span> <span class="p">=&gt;</span>
       <span class="n">options</span><span class="p">.</span><span class="nf">UseSqlServer</span><span class="p">(</span>
           <span class="n">builder</span><span class="p">.</span><span class="n">Configuration</span><span class="p">.</span><span class="nf">GetConnectionString</span><span class="p">(</span><span class="s">"LocationDBConnection"</span><span class="p">))</span>
    <span class="p">);</span>

<span class="c1">// DbContext health check for EF core</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddHealthChecks</span><span class="p">()</span>
    <span class="p">.</span><span class="n">AddDbContextCheck</span><span class="p">&lt;</span><span class="n">LocationDbContext</span><span class="p">&gt;(</span><span class="s">"locationdbcontext"</span><span class="p">);</span>

<span class="kt">var</span> <span class="n">app</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

<span class="c1">// Configure the HTTP request pipeline.</span>
<span class="k">if</span> <span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">Environment</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
<span class="p">{</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwagger</span><span class="p">();</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwaggerUI</span><span class="p">();</span>
<span class="p">}</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseHttpsRedirection</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseAuthorization</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">MapControllers</span><span class="p">();</span>

<span class="c1">// Cofigure for health check</span>
<span class="n">app</span><span class="p">.</span><span class="nf">MapHealthChecks</span><span class="p">(</span><span class="s">"/hc"</span><span class="p">,</span> <span class="k">new</span> <span class="nf">HealthCheckOptions</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">Predicate</span> <span class="p">=</span> <span class="n">_</span> <span class="p">=&gt;</span> <span class="k">true</span><span class="p">,</span>
    <span class="n">ResponseWriter</span> <span class="p">=</span> <span class="n">UIResponseWriter</span><span class="p">.</span><span class="n">WriteHealthCheckUIResponse</span><span class="p">,</span>
<span class="p">});</span>

<span class="c1">//a basic health probe configuration that reports the app's availability to process requests (liveness) is sufficient to discover the status of the app.</span>
<span class="n">app</span><span class="p">.</span><span class="nf">MapHealthChecks</span><span class="p">(</span><span class="s">"/liveness"</span><span class="p">,</span> <span class="k">new</span> <span class="nf">HealthCheckOptions</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">Predicate</span> <span class="p">=</span> <span class="n">r</span> <span class="p">=&gt;</span> <span class="n">r</span><span class="p">.</span><span class="n">Name</span><span class="p">.</span><span class="nf">Contains</span><span class="p">(</span><span class="s">"self"</span><span class="p">),</span>
<span class="p">});</span>

<span class="n">app</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>

</code></pre></div></div>

<ul>
  <li>Here, Checking sql server’s health using following code</li>
</ul>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddHealthChecks</span><span class="p">()</span>
    <span class="p">.</span><span class="nf">AddSqlServer</span><span class="p">(</span>
        <span class="n">builder</span><span class="p">.</span><span class="n">Configuration</span><span class="p">.</span><span class="nf">GetConnectionString</span><span class="p">(</span><span class="s">"LocationDBConnection"</span><span class="p">));</span>

</code></pre></div></div>

<ul>
  <li>Here, Checking sql server’s health using dbcontext of EF using following code</li>
</ul>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddDbContext</span><span class="p">&lt;</span><span class="n">LocationDbContext</span><span class="p">&gt;(</span><span class="n">options</span> <span class="p">=&gt;</span>
       <span class="n">options</span><span class="p">.</span><span class="nf">UseSqlServer</span><span class="p">(</span>
           <span class="n">builder</span><span class="p">.</span><span class="n">Configuration</span><span class="p">.</span><span class="nf">GetConnectionString</span><span class="p">(</span><span class="s">"LocationDBConnection"</span><span class="p">))</span>
    <span class="p">);</span>

<span class="c1">// DbContext health check for EF core</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddHealthChecks</span><span class="p">()</span>
    <span class="p">.</span><span class="n">AddDbContextCheck</span><span class="p">&lt;</span><span class="n">LocationDbContext</span><span class="p">&gt;(</span><span class="s">"locationdbcontext"</span><span class="p">);</span>


</code></pre></div></div>

<ul>
  <li>Added healthcheck end point to check the application health</li>
  <li>Here application will be healthy when both sql server and application is up and running. Otherwise, it will be un healthy.</li>
</ul>

<p><strong>Program.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">HealthChecks.UI.Client</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Location.API.Persistence</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Diagnostics.HealthChecks</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="n">WebApplication</span><span class="p">.</span><span class="nf">CreateBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>

<span class="c1">// Add services to the container.</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">();</span>
<span class="c1">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddEndpointsApiExplorer</span><span class="p">();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddSwaggerGen</span><span class="p">();</span>


<span class="c1">// Sql server health check </span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddHealthChecks</span><span class="p">()</span>
    <span class="p">.</span><span class="nf">AddSqlServer</span><span class="p">(</span>
        <span class="n">builder</span><span class="p">.</span><span class="n">Configuration</span><span class="p">.</span><span class="nf">GetConnectionString</span><span class="p">(</span><span class="s">"LocationDBConnection"</span><span class="p">));</span>

<span class="c1">// Create DbContext</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddDbContext</span><span class="p">&lt;</span><span class="n">LocationDbContext</span><span class="p">&gt;(</span><span class="n">options</span> <span class="p">=&gt;</span>
       <span class="n">options</span><span class="p">.</span><span class="nf">UseSqlServer</span><span class="p">(</span>
           <span class="n">builder</span><span class="p">.</span><span class="n">Configuration</span><span class="p">.</span><span class="nf">GetConnectionString</span><span class="p">(</span><span class="s">"LocationDBConnection"</span><span class="p">))</span>
    <span class="p">);</span>

<span class="c1">// DbContext health check for EF core</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddHealthChecks</span><span class="p">()</span>
    <span class="p">.</span><span class="n">AddDbContextCheck</span><span class="p">&lt;</span><span class="n">LocationDbContext</span><span class="p">&gt;(</span><span class="s">"locationdbcontext"</span><span class="p">);</span>

<span class="kt">var</span> <span class="n">app</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

<span class="c1">// Configure the HTTP request pipeline.</span>
<span class="k">if</span> <span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">Environment</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
<span class="p">{</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwagger</span><span class="p">();</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwaggerUI</span><span class="p">();</span>
<span class="p">}</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseHttpsRedirection</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseAuthorization</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">MapControllers</span><span class="p">();</span>

<span class="c1">// Cofigure for health check</span>
<span class="n">app</span><span class="p">.</span><span class="nf">MapHealthChecks</span><span class="p">(</span><span class="s">"/hc"</span><span class="p">,</span> <span class="k">new</span> <span class="nf">HealthCheckOptions</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">Predicate</span> <span class="p">=</span> <span class="n">_</span> <span class="p">=&gt;</span> <span class="k">true</span><span class="p">,</span>
    <span class="n">ResponseWriter</span> <span class="p">=</span> <span class="n">UIResponseWriter</span><span class="p">.</span><span class="n">WriteHealthCheckUIResponse</span><span class="p">,</span>
<span class="p">});</span>

<span class="c1">//a basic health probe configuration that reports the app's availability to process requests (liveness) is sufficient to discover the status of the app.</span>
<span class="n">app</span><span class="p">.</span><span class="nf">MapHealthChecks</span><span class="p">(</span><span class="s">"/liveness"</span><span class="p">,</span> <span class="k">new</span> <span class="nf">HealthCheckOptions</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">Predicate</span> <span class="p">=</span> <span class="n">r</span> <span class="p">=&gt;</span> <span class="n">r</span><span class="p">.</span><span class="n">Name</span><span class="p">.</span><span class="nf">Contains</span><span class="p">(</span><span class="s">"self"</span><span class="p">),</span>
<span class="p">});</span>

<span class="n">app</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>


</code></pre></div></div>

<ul>
  <li>
    <p>Now you can run and check the application health using the following URL</p>

    <p>https://localhost:7232/hc</p>

    <p>https://localhost:7232/liveness</p>
  </li>
</ul>

<p><strong>Step 6: Configure WebStatus project for to monitors others 3 application’s health</strong></p>

<ul>
  <li>Configure HealthCheckUI in appsettings.json file as follows</li>
</ul>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"HealthChecksUI"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"HealthChecks"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
      </span><span class="p">{</span><span class="w">
        </span><span class="nl">"Name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Admin.API"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"Uri"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https://localhost:7147/hc"</span><span class="w">
      </span><span class="p">},</span><span class="w">
      </span><span class="p">{</span><span class="w">
        </span><span class="nl">"Name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Customer.API"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"Uri"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https://localhost:7145/hc"</span><span class="w">
      </span><span class="p">},</span><span class="w">
      </span><span class="p">{</span><span class="w">
        </span><span class="nl">"Name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Customer.API -&gt; CustomerDB"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"Uri"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https://localhost:7145/customersql"</span><span class="w">
      </span><span class="p">},</span><span class="w">
      </span><span class="p">{</span><span class="w">
        </span><span class="nl">"Name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Customer.API -&gt; CustomerDbContext"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"Uri"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https://localhost:7145/customerdbcontext"</span><span class="w">
      </span><span class="p">},</span><span class="w">

      </span><span class="err">//Location</span><span class="w"> </span><span class="err">service</span><span class="w">
      </span><span class="p">{</span><span class="w">
        </span><span class="nl">"Name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Location.API"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"Uri"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https://localhost:7232/hc"</span><span class="w">
      </span><span class="p">}</span><span class="w">
    </span><span class="p">],</span><span class="w">

    </span><span class="nl">"EvaluationTimeInSeconds"</span><span class="p">:</span><span class="w"> </span><span class="mi">10</span><span class="p">,</span><span class="w">
    </span><span class="nl">"MinimumSecondsBetweenFailureNotifications"</span><span class="p">:</span><span class="w"> </span><span class="mi">60</span><span class="w">
  </span><span class="p">},</span><span class="w">

  </span><span class="nl">"Logging"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"LogLevel"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Default"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Information"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Microsoft.AspNetCore"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Warning"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"AllowedHosts"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*"</span><span class="w">
</span><span class="p">}</span><span class="w">


</span></code></pre></div></div>

<ul>
  <li>Modify Program.cs file is as follows</li>
</ul>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="n">WebApplication</span><span class="p">.</span><span class="nf">CreateBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>

<span class="c1">// Add services to the container.</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">();</span>
<span class="c1">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddEndpointsApiExplorer</span><span class="p">();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddSwaggerGen</span><span class="p">();</span>

<span class="c1">// Configure service for healthcheck</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddHealthChecksUI</span><span class="p">().</span><span class="nf">AddInMemoryStorage</span><span class="p">();</span>

<span class="kt">var</span> <span class="n">app</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

<span class="c1">// Configure the HTTP request pipeline.</span>
<span class="k">if</span> <span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">Environment</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
<span class="p">{</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwagger</span><span class="p">();</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwaggerUI</span><span class="p">();</span>
<span class="p">}</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseHttpsRedirection</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseAuthorization</span><span class="p">();</span>

<span class="c1">// Cofigure methods for healthcheck</span>
<span class="n">app</span><span class="p">.</span><span class="nf">MapHealthChecksUI</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">MapControllers</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>


</code></pre></div></div>

<ul>
  <li>Here, Added HealthCheckUI using the following code</li>
</ul>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Configure service for healthcheck</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddHealthChecksUI</span><span class="p">().</span><span class="nf">AddInMemoryStorage</span><span class="p">();</span>
<span class="p">.</span>
<span class="p">.</span>
<span class="p">.</span>
<span class="p">.</span>
<span class="c1">// Cofigure methods for healthcheck</span>
<span class="n">app</span><span class="p">.</span><span class="nf">MapHealthChecksUI</span><span class="p">();</span>

</code></pre></div></div>

<ul>
  <li>
    <p>Now now all(multiple) projects at a time and monitor all application’s</p>

    <p>https://localhost:7188/healthchecks-ui#/healthchecks</p>
  </li>
</ul>

<p><strong><a href="https://github.com/mahedee/code-sample02/tree/main/health-check/HealthCheck">Source code</a></strong></p>]]></content><author><name>Mahedee Hasan</name></author><category term="Web API" /><category term="ASP.NET Core" /><category term="C#" /><category term="webapi" /><category term="aspnetcore" /><category term="csharp" /><summary type="html"><![CDATA[Health monitoring provides real-time information about the state of the application. It's a very crucial part for large distributed application. Especially, microservies based application. In this article, I will show you how to monitor application's health in different ways.]]></summary></entry><entry><title type="html">Authentication and authorization using react.js and asp.net core</title><link href="https://mahedee.net//authentication-and-authorization-using-react.js-and-asp.net-core/" rel="alternate" type="text/html" title="Authentication and authorization using react.js and asp.net core" /><published>2022-01-07T00:00:00+00:00</published><updated>2022-01-07T00:00:00+00:00</updated><id>https://mahedee.net//authentication-and-authorization-using-react.js-and-asp.net-core</id><content type="html" xml:base="https://mahedee.net//authentication-and-authorization-using-react.js-and-asp.net-core/"><![CDATA[<!-- ## Building a web application using React and asp.net core(Part 01)-->

<p><a href="https://mahedee.net/authentication-and-authorization-using-JWT-in-asp.net-core-application/">In the previous article</a>, I have shown you how to create a back end application for authentication and authorization using JWT and .net core. In this article, I will design UI using react.js. I will also show you how to maintain authentication and authorization from front end.</p>

<p><strong>Step 1: Create a sample react application</strong></p>
<ul>
  <li>Create a react app name - ecommerce.client using the following command.
    <div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">npx</span> <span class="nf">create-react-app</span> <span class="nf">my-app</span>
</code></pre></div>    </div>
  </li>
  <li>Apply required bootstrap theme on it.</li>
</ul>

<p><strong>Step 2: Create config.js in public/assets folder</strong></p>

<p><strong>config.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">baseURL</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">https://localhost:7142/</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div>

<p><strong>Step 3: Include config.js in public/index.html file</strong></p>

<p><strong>index.html</strong></p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"utf-8"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"icon"</span> <span class="na">href=</span><span class="s">"%PUBLIC_URL%/favicon.ico"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"viewport"</span> <span class="na">content=</span><span class="s">"width=device-width, initial-scale=1"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"theme-color"</span> <span class="na">content=</span><span class="s">"#000000"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;meta</span>
      <span class="na">name=</span><span class="s">"description"</span>
      <span class="na">content=</span><span class="s">"Web site created using create-react-app"</span>
    <span class="nt">/&gt;</span>
    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"apple-touch-icon"</span> <span class="na">href=</span><span class="s">"%PUBLIC_URL%/logo192.png"</span> <span class="nt">/&gt;</span>
    <span class="c">&lt;!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    --&gt;</span>
    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"manifest"</span> <span class="na">href=</span><span class="s">"%PUBLIC_URL%/manifest.json"</span> <span class="nt">/&gt;</span>
    <span class="c">&lt;!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    --&gt;</span>
    <span class="nt">&lt;title&gt;</span>React::Auth<span class="nt">&lt;/title&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;noscript&gt;</span>You need to enable JavaScript to run this app.<span class="nt">&lt;/noscript&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"root"</span><span class="nt">&gt;&lt;/div&gt;</span>
    <span class="c">&lt;!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the &lt;body&gt; tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    --&gt;</span>

    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"%PUBLIC_URL%/assets/config.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>

</code></pre></div></div>

<p><strong>Step 4: Create components in src folder</strong></p>

<ul>
  <li>Create AccessAPI and Settings Components in src-&gt;components-&gt;services folder</li>
</ul>

<p><strong>Settings.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">const</span> <span class="nx">BASE_URL</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">baseURL</span><span class="p">;</span>

</code></pre></div></div>

<p><strong>AccessAPI.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">import</span> <span class="nx">SessionManager</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../Auth/SessionManager</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">BASE_URL</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./Settings</span><span class="dl">"</span><span class="p">;</span>


<span class="k">export</span> <span class="kd">function</span> <span class="nx">getData</span><span class="p">(</span><span class="nx">endPoint</span><span class="p">)</span> <span class="p">{</span>

    <span class="kd">let</span> <span class="nx">token</span><span class="o">=</span><span class="nx">SessionManager</span><span class="p">.</span><span class="nx">getToken</span><span class="p">();</span>

    <span class="kd">let</span> <span class="nx">payload</span> <span class="o">=</span> <span class="p">{</span>
        <span class="na">method</span><span class="p">:</span> <span class="dl">'</span><span class="s1">GET</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">headers</span><span class="p">:</span> <span class="p">{</span>   
            <span class="dl">"</span><span class="s2">access-control-allow-origin</span><span class="dl">"</span> <span class="p">:</span> <span class="dl">"</span><span class="s2">*</span><span class="dl">"</span><span class="p">,</span> 
            <span class="dl">'</span><span class="s1">Accept</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">application/json</span><span class="dl">'</span><span class="p">,</span>
            <span class="dl">'</span><span class="s1">Content-Type</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">application/json</span><span class="dl">'</span><span class="p">,</span>
            <span class="dl">'</span><span class="s1">Authorization</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Bearer </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">token</span>
         <span class="p">},</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">fetch</span><span class="p">(</span><span class="nx">BASE_URL</span> <span class="o">+</span> <span class="nx">endPoint</span><span class="p">,</span> <span class="nx">payload</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">response</span><span class="p">.</span><span class="nx">ok</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">statusText</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">();</span>
    <span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">result</span><span class="p">;</span>
    <span class="p">}).</span><span class="k">catch</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
    <span class="p">});</span>
<span class="p">}</span>

<span class="k">export</span> <span class="kd">function</span> <span class="nx">postDataForLogin</span><span class="p">(</span><span class="nx">type</span><span class="p">,</span> <span class="nx">userData</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">//let BaseURL = "https://localhost:7142/";</span>
    <span class="kd">let</span> <span class="nx">payload</span> <span class="o">=</span> <span class="p">{</span>
        <span class="na">method</span><span class="p">:</span> <span class="dl">'</span><span class="s1">POST</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">headers</span><span class="p">:</span> <span class="p">{</span>   
            <span class="dl">"</span><span class="s2">access-control-allow-origin</span><span class="dl">"</span> <span class="p">:</span> <span class="dl">"</span><span class="s2">*</span><span class="dl">"</span><span class="p">,</span>
            <span class="dl">'</span><span class="s1">Content-Type</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">application/json</span><span class="dl">'</span> 
        <span class="p">},</span>
        <span class="na">body</span><span class="p">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">userData</span><span class="p">)</span>

    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">fetch</span><span class="p">(</span><span class="nx">BASE_URL</span> <span class="o">+</span> <span class="nx">type</span><span class="p">,</span> <span class="nx">payload</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">();</span>
    <span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">result</span><span class="p">;</span>
    <span class="p">}).</span><span class="k">catch</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
    <span class="p">});</span>
<span class="p">}</span>

<span class="k">export</span> <span class="kd">function</span> <span class="nx">postData</span><span class="p">(</span><span class="nx">endPoint</span><span class="p">,</span> <span class="nx">inputObj</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">token</span><span class="o">=</span><span class="nx">SessionManager</span><span class="p">.</span><span class="nx">getToken</span><span class="p">();</span>
    <span class="kd">let</span> <span class="nx">payload</span> <span class="o">=</span> <span class="p">{</span>
        <span class="na">method</span><span class="p">:</span> <span class="dl">'</span><span class="s1">POST</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">headers</span><span class="p">:</span> <span class="p">{</span>   
            <span class="dl">"</span><span class="s2">access-control-allow-origin</span><span class="dl">"</span> <span class="p">:</span> <span class="dl">"</span><span class="s2">*</span><span class="dl">"</span><span class="p">,</span> 
            <span class="dl">'</span><span class="s1">Accept</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">application/json</span><span class="dl">'</span><span class="p">,</span>
            <span class="dl">'</span><span class="s1">Content-Type</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">application/json</span><span class="dl">'</span><span class="p">,</span>
            <span class="dl">'</span><span class="s1">Authorization</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Bearer </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">token</span>
        <span class="p">},</span>
        <span class="na">body</span><span class="p">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">inputObj</span><span class="p">)</span>

    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">fetch</span><span class="p">(</span><span class="nx">BASE_URL</span> <span class="o">+</span> <span class="nx">endPoint</span><span class="p">,</span> <span class="nx">payload</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">();</span>
    <span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">result</span><span class="p">;</span>
    <span class="p">}).</span><span class="k">catch</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
    <span class="p">});</span>
<span class="p">}</span>

<span class="k">export</span> <span class="kd">function</span> <span class="nx">deleteData</span><span class="p">(</span><span class="nx">endPoint</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">token</span><span class="o">=</span><span class="nx">SessionManager</span><span class="p">.</span><span class="nx">getToken</span><span class="p">();</span>
    <span class="kd">let</span> <span class="nx">payload</span> <span class="o">=</span> <span class="p">{</span>
        <span class="na">method</span><span class="p">:</span> <span class="dl">'</span><span class="s1">DELETE</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">headers</span><span class="p">:</span> <span class="p">{</span>   
            <span class="dl">"</span><span class="s2">access-control-allow-origin</span><span class="dl">"</span> <span class="p">:</span> <span class="dl">"</span><span class="s2">*</span><span class="dl">"</span><span class="p">,</span> 
            <span class="dl">'</span><span class="s1">Accept</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">application/json</span><span class="dl">'</span><span class="p">,</span>
            <span class="dl">'</span><span class="s1">Content-Type</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">application/json</span><span class="dl">'</span><span class="p">,</span>
            <span class="dl">'</span><span class="s1">Authorization</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Bearer </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">token</span>
         <span class="p">},</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">fetch</span><span class="p">(</span><span class="nx">BASE_URL</span> <span class="o">+</span> <span class="nx">endPoint</span><span class="p">,</span> <span class="nx">payload</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">response</span><span class="p">.</span><span class="nx">ok</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">statusText</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">();</span>
    <span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">result</span><span class="p">;</span>
    <span class="p">}).</span><span class="k">catch</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
    <span class="p">});</span>
<span class="p">}</span>

<span class="k">export</span> <span class="kd">function</span> <span class="nx">putData</span><span class="p">(</span><span class="nx">endPoint</span><span class="p">,</span> <span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">token</span><span class="o">=</span><span class="nx">SessionManager</span><span class="p">.</span><span class="nx">getToken</span><span class="p">();</span>
    <span class="kd">let</span> <span class="nx">payload</span> <span class="o">=</span> <span class="p">{</span>
        <span class="na">method</span><span class="p">:</span> <span class="dl">'</span><span class="s1">PUT</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">headers</span><span class="p">:</span> <span class="p">{</span>   
            <span class="dl">"</span><span class="s2">access-control-allow-origin</span><span class="dl">"</span> <span class="p">:</span> <span class="dl">"</span><span class="s2">*</span><span class="dl">"</span><span class="p">,</span> 
            <span class="dl">'</span><span class="s1">Accept</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">application/json</span><span class="dl">'</span><span class="p">,</span>
            <span class="dl">'</span><span class="s1">Content-Type</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">application/json</span><span class="dl">'</span><span class="p">,</span>
            <span class="dl">'</span><span class="s1">Authorization</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Bearer </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">token</span>
        <span class="p">},</span>
        <span class="na">body</span><span class="p">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>

    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">fetch</span><span class="p">(</span><span class="nx">BASE_URL</span> <span class="o">+</span> <span class="nx">endPoint</span><span class="p">,</span> <span class="nx">payload</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">();</span>
    <span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">result</span><span class="p">;</span>
    <span class="p">}).</span><span class="k">catch</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
    <span class="p">});</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>Create Login, Logout and SessionManager component in src-&gt;components-&gt;Auth folder</li>
</ul>

<p><strong>Login.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Component</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">toast</span><span class="p">,</span> <span class="nx">ToastContainer</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-toastify</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="dl">'</span><span class="s1">react-toastify/dist/ReactToastify.css</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Container</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">reactstrap</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">LoginMenu</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../LoginMenu</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">postDataForLogin</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../services/AccessAPI</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">SessionManager</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./SessionManager</span><span class="dl">"</span><span class="p">;</span>


<span class="k">export</span> <span class="k">default</span> <span class="kd">class</span> <span class="nx">Login</span> <span class="kd">extends</span> <span class="nx">Component</span> <span class="p">{</span>
    <span class="kd">constructor</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="p">();</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
            <span class="na">userName</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span>
            <span class="na">password</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span>
            <span class="na">loading</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
            <span class="na">failed</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
            <span class="na">error</span><span class="p">:</span> <span class="dl">''</span>
        <span class="p">};</span>

        <span class="k">this</span><span class="p">.</span><span class="nx">login</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">login</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">onChange</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">onChange</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
    <span class="p">}</span>


    <span class="nx">onChange</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span> <span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">name</span><span class="p">]:</span> <span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span> <span class="p">});</span>
    <span class="p">}</span>

    <span class="nx">onKeyDown</span> <span class="o">=</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">key</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">Enter</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">login</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="nx">login</span><span class="p">()</span> <span class="p">{</span>
        <span class="kd">let</span> <span class="nx">userInfo</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span>
            <span class="na">loading</span><span class="p">:</span> <span class="kc">true</span>
        <span class="p">});</span>

        <span class="c1">//console.log("login info: " + userInfo.password);</span>
        <span class="nx">postDataForLogin</span><span class="p">(</span><span class="dl">'</span><span class="s1">api/Auth/Login</span><span class="dl">'</span><span class="p">,</span> <span class="nx">userInfo</span><span class="p">).</span><span class="nx">then</span><span class="p">((</span><span class="nx">result</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">result</span><span class="p">?.</span><span class="nx">token</span><span class="p">)</span> <span class="p">{</span>

                <span class="nx">SessionManager</span><span class="p">.</span><span class="nx">setUserSession</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">userName</span><span class="p">,</span> <span class="nx">result</span><span class="p">.</span><span class="nx">token</span><span class="p">,</span> <span class="nx">result</span><span class="p">.</span><span class="nx">userId</span><span class="p">,</span> <span class="nx">result</span><span class="p">.</span><span class="nx">usersRole</span><span class="p">)</span>

                <span class="k">if</span> <span class="p">(</span><span class="nx">SessionManager</span><span class="p">.</span><span class="nx">getToken</span><span class="p">())</span> <span class="p">{</span>
                    <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span>
                        <span class="na">loading</span><span class="p">:</span> <span class="kc">false</span>
                    <span class="p">});</span>

                    <span class="c1">// &lt;LoginMenu menuText = 'Logout' menuURL = '/logout' /&gt;</span>

                    <span class="c1">// If login successful and get token</span>
                    <span class="c1">// redirect to dashboard</span>
                    <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">/home</span><span class="dl">"</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>

            <span class="k">else</span> <span class="p">{</span>
                <span class="kd">let</span> <span class="nx">errors</span> <span class="o">=</span> <span class="dl">''</span><span class="p">;</span>
                <span class="k">for</span> <span class="p">(</span><span class="kd">const</span> <span class="nx">key</span> <span class="k">in</span> <span class="nx">result</span><span class="p">?.</span><span class="nx">errors</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">if</span> <span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">errors</span><span class="p">,</span> <span class="nx">key</span><span class="p">))</span> <span class="p">{</span>
                        <span class="nx">errors</span> <span class="o">+=</span> <span class="nx">result</span><span class="p">.</span><span class="nx">errors</span><span class="p">[</span><span class="nx">key</span><span class="p">];</span>

                    <span class="p">}</span>
                <span class="p">}</span>
                <span class="nx">errors</span> <span class="o">=</span> <span class="nx">errors</span> <span class="o">===</span> <span class="dl">''</span> <span class="p">?</span> <span class="dl">'</span><span class="s1">Login is unsuccessfull!</span><span class="dl">'</span> <span class="p">:</span> <span class="nx">errors</span><span class="p">;</span>
                <span class="nx">toast</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">errors</span><span class="p">,</span> <span class="p">{</span>
                    <span class="na">position</span><span class="p">:</span> <span class="dl">"</span><span class="s2">top-right</span><span class="dl">"</span><span class="p">,</span>
                    <span class="na">autoClose</span><span class="p">:</span> <span class="mi">5000</span><span class="p">,</span>
                    <span class="na">hideProgressBar</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
                    <span class="na">closeOnClick</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
                    <span class="na">pauseOnHover</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
                    <span class="na">draggable</span><span class="p">:</span> <span class="kc">true</span>
                <span class="p">});</span>

                <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span>
                    <span class="na">errors</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Login failed!</span><span class="dl">"</span><span class="p">,</span>
                    <span class="na">loading</span><span class="p">:</span> <span class="kc">false</span>
                <span class="p">});</span>
            <span class="p">}</span>

        <span class="p">});</span>
    <span class="p">}</span>

    <span class="nx">registration</span><span class="p">(){</span>
        <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">/admin/user/register</span><span class="dl">"</span><span class="p">;</span>

    <span class="p">}</span>

    <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
        <span class="kd">let</span> <span class="nx">content</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">loading</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">content</span> <span class="o">=</span> <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="nx">Loading</span><span class="p">...</span><span class="o">&lt;</span><span class="sr">/div&gt;</span><span class="err">;
</span>        <span class="p">}</span>

        <span class="k">return</span> <span class="p">(</span>
            <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">row</span><span class="dl">"</span> <span class="nx">style</span><span class="o">=&gt;</span>
            <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">login-box col-md-4</span><span class="dl">"</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">login-logo</span><span class="dl">"</span><span class="o">&gt;</span>
                    <span class="o">&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="dl">"</span><span class="s2">/</span><span class="dl">"</span><span class="o">&gt;&lt;</span><span class="nx">b</span><span class="o">&gt;</span><span class="nx">ECommerce</span><span class="o">&lt;</span><span class="sr">/b&gt;&lt;/</span><span class="nx">a</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">login-box-body</span><span class="dl">"</span><span class="o">&gt;</span>
                    <span class="o">&lt;</span><span class="nx">p</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">login-box-msg</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Sign</span> <span class="k">in</span> <span class="nx">to</span> <span class="nx">access</span> <span class="nx">the</span> <span class="nx">application</span><span class="o">&lt;</span><span class="sr">/p</span><span class="err">&gt;
</span>
                    <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-group has-feedback</span><span class="dl">"</span><span class="o">&gt;</span>
                        <span class="o">&lt;</span><span class="nx">input</span>
                            <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">text</span><span class="dl">"</span>
                            <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-control</span><span class="dl">"</span>
                            <span class="nx">placeholder</span><span class="o">=</span><span class="dl">"</span><span class="s2">Please Enter Username</span><span class="dl">"</span>
                            <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">userName</span><span class="dl">"</span>
                            <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">onChange</span><span class="p">}</span>
                            <span class="nx">onKeyDown</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">onKeyDown</span><span class="p">}</span>
                        <span class="sr">/</span><span class="err">&gt;
</span>                        <span class="o">&lt;</span><span class="nx">span</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">glyphicon glyphicon-user form-control-feedback</span><span class="dl">"</span> <span class="o">/&gt;</span>
                    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>                    <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-group has-feedback</span><span class="dl">"</span><span class="o">&gt;</span>
                        <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">password</span><span class="dl">"</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-control</span><span class="dl">"</span> <span class="nx">placeholder</span><span class="o">=</span><span class="dl">"</span><span class="s2">Please Enter Password</span><span class="dl">"</span> <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">password</span><span class="dl">"</span>
                            <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">onChange</span><span class="p">}</span> <span class="nx">onKeyDown</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">onKeyDown</span><span class="p">}</span>
                        <span class="sr">/</span><span class="err">&gt;
</span>                        <span class="o">&lt;</span><span class="nx">span</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">glyphicon glyphicon-lock form-control-feedback</span><span class="dl">"</span> <span class="o">/&gt;</span>
                    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>                    <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">row</span><span class="dl">"</span><span class="o">&gt;</span>
                        <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">col-md-4</span><span class="dl">"</span><span class="o">&gt;</span>
                            <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">btn btn-primary btn-block</span><span class="dl">"</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">login</span><span class="p">}</span><span class="o">&gt;</span>
                                <span class="nx">Sign</span> <span class="nx">In</span>
                            <span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>                        <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>                        <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">col-md-6</span><span class="dl">"</span><span class="o">&gt;</span>
                            <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">btn btn-primary btn-block</span><span class="dl">"</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">registration</span><span class="p">}</span><span class="o">&gt;</span>
                                <span class="nx">Create</span> <span class="nx">an</span> <span class="nx">account</span>
                            <span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>                        <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>                        <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">col-md-2</span><span class="dl">"</span><span class="o">&gt;</span>
                            <span class="p">{</span><span class="nx">content</span><span class="p">}</span>
                        <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>                    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>                    <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">row</span><span class="dl">"</span><span class="o">&gt;</span>
                        <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">col-md-8</span><span class="dl">"</span> <span class="nx">style</span><span class="o">=&gt;</span>
                            <span class="o">&lt;</span><span class="nx">strong</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">has-error</span><span class="dl">"</span> <span class="nx">style</span><span class="o">=&gt;</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">errorMsg</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/strong</span><span class="err">&gt;
</span>                        <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>                        <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">col-md-4</span><span class="dl">"</span><span class="o">&gt;</span>
                            <span class="o">&lt;</span><span class="nx">ToastContainer</span><span class="o">&gt;&lt;</span><span class="sr">/ToastContainer</span><span class="err">&gt;
</span>                        <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>                    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>
            <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>        <span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>Logout.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Component</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">SessionManager</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./SessionManager</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">class</span> <span class="nx">Logout</span> <span class="kd">extends</span> <span class="nx">Component</span><span class="p">{</span>
    <span class="kd">constructor</span><span class="p">(){</span>
        <span class="k">super</span><span class="p">();</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>

        <span class="p">}</span>
    <span class="p">}</span>

    <span class="nx">componentDidMount</span><span class="p">(){</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">component did mount for logout</span><span class="dl">"</span><span class="p">);</span>
        <span class="nx">SessionManager</span><span class="p">.</span><span class="nx">removeUserSession</span><span class="p">();</span>
        <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">/login</span><span class="dl">"</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="nx">render</span><span class="p">(){</span>
        <span class="k">return</span><span class="p">(</span>
            <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>        <span class="p">);</span>
    <span class="p">}</span>

<span class="p">}</span>

</code></pre></div></div>

<p><strong>SessionManager.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">const</span> <span class="nx">SessionManager</span> <span class="o">=</span> <span class="p">{</span>

    <span class="nx">getToken</span><span class="p">()</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">token</span> <span class="o">=</span> <span class="nx">sessionStorage</span><span class="p">.</span><span class="nx">getItem</span><span class="p">(</span><span class="dl">'</span><span class="s1">token</span><span class="dl">'</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">token</span><span class="p">)</span> <span class="k">return</span> <span class="nx">token</span><span class="p">;</span>
        <span class="k">else</span> <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>
    <span class="p">},</span>

    <span class="nx">setUserSession</span><span class="p">(</span><span class="nx">userName</span><span class="p">,</span> <span class="nx">token</span><span class="p">,</span> <span class="nx">userId</span><span class="p">,</span> <span class="nx">usersRole</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">sessionStorage</span><span class="p">.</span><span class="nx">setItem</span><span class="p">(</span><span class="dl">'</span><span class="s1">userName</span><span class="dl">'</span><span class="p">,</span> <span class="nx">userName</span><span class="p">);</span>
        <span class="nx">sessionStorage</span><span class="p">.</span><span class="nx">setItem</span><span class="p">(</span><span class="dl">'</span><span class="s1">token</span><span class="dl">'</span><span class="p">,</span> <span class="nx">token</span><span class="p">);</span>
        <span class="nx">sessionStorage</span><span class="p">.</span><span class="nx">setItem</span><span class="p">(</span><span class="dl">'</span><span class="s1">userId</span><span class="dl">'</span><span class="p">,</span> <span class="nx">userId</span><span class="p">);</span>
        <span class="nx">sessionStorage</span><span class="p">.</span><span class="nx">setItem</span><span class="p">(</span><span class="dl">'</span><span class="s1">usersRole</span><span class="dl">'</span><span class="p">,</span> <span class="nx">usersRole</span><span class="p">);</span>
    <span class="p">},</span>

    <span class="nx">removeUserSession</span><span class="p">(){</span>
        <span class="nx">sessionStorage</span><span class="p">.</span><span class="nx">removeItem</span><span class="p">(</span><span class="dl">'</span><span class="s1">userName</span><span class="dl">'</span><span class="p">);</span>
        <span class="nx">sessionStorage</span><span class="p">.</span><span class="nx">removeItem</span><span class="p">(</span><span class="dl">'</span><span class="s1">token</span><span class="dl">'</span><span class="p">);</span>
        <span class="nx">sessionStorage</span><span class="p">.</span><span class="nx">removeItem</span><span class="p">(</span><span class="dl">'</span><span class="s1">userId</span><span class="dl">'</span><span class="p">);</span>
        <span class="nx">sessionStorage</span><span class="p">.</span><span class="nx">removeItem</span><span class="p">(</span><span class="dl">'</span><span class="s1">usersRole</span><span class="dl">'</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">SessionManager</span><span class="p">;</span>

</code></pre></div></div>

<ul>
  <li>Create customers components in src-&gt;components-&gt;Customer folder</li>
</ul>

<p><strong>Create.jsx</strong></p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">Component</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">postData</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../services/AccessAPI</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">class</span> <span class="nx">Create</span> <span class="kd">extends</span> <span class="nx">Component</span> <span class="p">{</span>

    <span class="kd">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">super</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
            <span class="na">firstName</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span>
            <span class="na">lastName</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span>
            <span class="na">email</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span>
            <span class="na">contactNumber</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span>
            <span class="na">address</span><span class="p">:</span> <span class="dl">''</span>
        <span class="p">}</span>

        <span class="k">this</span><span class="p">.</span><span class="nx">onChange</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">onChange</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">onSubmit</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">onSubmit</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nx">onChange</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span> <span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">name</span><span class="p">]:</span> <span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span> <span class="p">});</span>
    <span class="p">}</span>


    <span class="nx">onSubmit</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">e</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
        <span class="kd">const</span> <span class="p">{</span> <span class="nx">history</span> <span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">;</span>

        <span class="kd">let</span> <span class="nx">customerObj</span> <span class="o">=</span> <span class="p">{</span>
            <span class="na">firstName</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">firstName</span><span class="p">,</span>
            <span class="na">lastName</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">lastName</span><span class="p">,</span>
            <span class="na">email</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">email</span><span class="p">,</span>
            <span class="na">contactNumber</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">contactNumber</span><span class="p">,</span>
            <span class="na">address</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">address</span>
        <span class="p">}</span>


        <span class="nx">postData</span><span class="p">(</span><span class="dl">'</span><span class="s1">api/Customer/Create</span><span class="dl">'</span><span class="p">,</span> <span class="nx">customerObj</span><span class="p">).</span><span class="nx">then</span><span class="p">((</span><span class="nx">result</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="kd">let</span> <span class="nx">responseJson</span> <span class="o">=</span> <span class="nx">result</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">responseJson</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">history</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="dl">'</span><span class="s1">/banking/customers</span><span class="dl">'</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">});</span>
    <span class="p">}</span>

    <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">(</span>
            <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="s">"row"</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="s">"col-md-4"</span><span class="p">&gt;</span>
                    <span class="p">&lt;</span><span class="nt">h3</span><span class="p">&gt;</span>Add new customer<span class="p">&lt;/</span><span class="nt">h3</span><span class="p">&gt;</span>
                    <span class="p">&lt;</span><span class="nt">form</span> <span class="na">onSubmit</span><span class="p">=</span><span class="si">{</span><span class="k">this</span><span class="p">.</span><span class="nx">onSubmit</span><span class="si">}</span><span class="p">&gt;</span>
                        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="s">"form-group"</span><span class="p">&gt;</span>
                            <span class="p">&lt;</span><span class="nt">label</span> <span class="na">className</span><span class="p">=</span><span class="s">"control-label"</span><span class="p">&gt;</span>First Name: <span class="p">&lt;/</span><span class="nt">label</span><span class="p">&gt;</span>
                            <span class="p">&lt;</span><span class="nt">input</span> <span class="na">className</span><span class="p">=</span><span class="s">"form-control"</span> <span class="na">type</span><span class="p">=</span><span class="s">"text"</span> <span class="na">name</span><span class="p">=</span><span class="s">"firstName"</span> <span class="na">value</span><span class="p">=</span><span class="si">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">firstName</span><span class="si">}</span> <span class="na">onChange</span><span class="p">=</span><span class="si">{</span><span class="k">this</span><span class="p">.</span><span class="nx">onChange</span><span class="si">}</span><span class="p">&gt;&lt;/</span><span class="nt">input</span><span class="p">&gt;</span>
                        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>

                        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="s">"form-group"</span><span class="p">&gt;</span>
                            <span class="p">&lt;</span><span class="nt">label</span> <span class="na">className</span><span class="p">=</span><span class="s">"control-label"</span><span class="p">&gt;</span>Last Name: <span class="p">&lt;/</span><span class="nt">label</span><span class="p">&gt;</span>
                            <span class="p">&lt;</span><span class="nt">input</span> <span class="na">className</span><span class="p">=</span><span class="s">"form-control"</span> <span class="na">type</span><span class="p">=</span><span class="s">"text"</span> <span class="na">name</span><span class="p">=</span><span class="s">"lastName"</span> <span class="na">value</span><span class="p">=</span><span class="si">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">lastName</span><span class="si">}</span> <span class="na">onChange</span><span class="p">=</span><span class="si">{</span><span class="k">this</span><span class="p">.</span><span class="nx">onChange</span><span class="si">}</span><span class="p">&gt;&lt;/</span><span class="nt">input</span><span class="p">&gt;</span>
                        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>

                        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="s">"form-group"</span><span class="p">&gt;</span>
                            <span class="p">&lt;</span><span class="nt">label</span> <span class="na">className</span><span class="p">=</span><span class="s">"control-label"</span><span class="p">&gt;</span>Email: <span class="p">&lt;/</span><span class="nt">label</span><span class="p">&gt;</span>
                            <span class="p">&lt;</span><span class="nt">input</span> <span class="na">className</span><span class="p">=</span><span class="s">"form-control"</span> <span class="na">type</span><span class="p">=</span><span class="s">"text"</span> <span class="na">name</span><span class="p">=</span><span class="s">"email"</span> <span class="na">value</span><span class="p">=</span><span class="si">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">email</span><span class="si">}</span> <span class="na">onChange</span><span class="p">=</span><span class="si">{</span><span class="k">this</span><span class="p">.</span><span class="nx">onChange</span><span class="si">}</span><span class="p">&gt;&lt;/</span><span class="nt">input</span><span class="p">&gt;</span>
                        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>

                        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="s">"form-group"</span><span class="p">&gt;</span>
                            <span class="p">&lt;</span><span class="nt">label</span> <span class="na">className</span><span class="p">=</span><span class="s">"control-label"</span><span class="p">&gt;</span>Contact Number: <span class="p">&lt;/</span><span class="nt">label</span><span class="p">&gt;</span>
                            <span class="p">&lt;</span><span class="nt">input</span> <span class="na">className</span><span class="p">=</span><span class="s">"form-control"</span> <span class="na">type</span><span class="p">=</span><span class="s">"text"</span> <span class="na">name</span><span class="p">=</span><span class="s">"contactNumber"</span> <span class="na">value</span><span class="p">=</span><span class="si">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">contactNumber</span><span class="si">}</span> <span class="na">onChange</span><span class="p">=</span><span class="si">{</span><span class="k">this</span><span class="p">.</span><span class="nx">onChange</span><span class="si">}</span><span class="p">&gt;&lt;/</span><span class="nt">input</span><span class="p">&gt;</span>
                        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>

                        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="s">"form-group"</span><span class="p">&gt;</span>
                            <span class="p">&lt;</span><span class="nt">label</span> <span class="na">className</span><span class="p">=</span><span class="s">"control-label"</span><span class="p">&gt;</span>Address:  <span class="p">&lt;/</span><span class="nt">label</span><span class="p">&gt;</span>
                            <span class="p">&lt;</span><span class="nt">input</span> <span class="na">className</span><span class="p">=</span><span class="s">"form-control"</span> <span class="na">type</span><span class="p">=</span><span class="s">"text"</span> <span class="na">name</span><span class="p">=</span><span class="s">"address"</span> <span class="na">value</span><span class="p">=</span><span class="si">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">address</span><span class="si">}</span> <span class="na">onChange</span><span class="p">=</span><span class="si">{</span><span class="k">this</span><span class="p">.</span><span class="nx">onChange</span><span class="si">}</span><span class="p">&gt;&lt;/</span><span class="nt">input</span><span class="p">&gt;</span>
                        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>

                        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="s">"form-group"</span><span class="p">&gt;</span>
                            <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="p">=</span><span class="s">"submit"</span> <span class="na">value</span><span class="p">=</span><span class="s">"Add Customer"</span> <span class="na">className</span><span class="p">=</span><span class="s">"btn btn-primary"</span><span class="p">&gt;&lt;/</span><span class="nt">input</span><span class="p">&gt;</span>
                        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>

                    <span class="p">&lt;/</span><span class="nt">form</span><span class="p">&gt;</span>

                <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
            <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="p">)</span>
    <span class="p">}</span>

<span class="p">}</span>

</code></pre></div></div>

<p><strong>Customers.jsx</strong></p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">Component</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">getData</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">../services/AccessAPI</span><span class="dl">'</span><span class="p">;</span>

<span class="c1">// export keyword is a new feature in ES6 let export your functions , </span>
<span class="c1">// variables so you can get access to them in other js files</span>

<span class="k">export</span> <span class="kd">class</span> <span class="nx">Customers</span> <span class="kd">extends</span> <span class="nx">Component</span> <span class="p">{</span>
    <span class="c1">//“Props” is a special keyword in React, which stands for properties and is being used for passing data from one component to another.</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>

        <span class="c1">//If you do not call super(props) method, this. props will be undefined </span>
        <span class="k">super</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span>

        <span class="k">this</span><span class="p">.</span><span class="nx">OncustomerEdit</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">OncustomerEdit</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">OncustomerDelete</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">OncustomerDelete</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">onCustomerCreate</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">onCustomerCreate</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>

        <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
            <span class="na">customers</span><span class="p">:</span> <span class="p">[],</span>
            <span class="na">loading</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
            <span class="na">failed</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
            <span class="na">error</span><span class="p">:</span> <span class="dl">''</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="cm">/*Lifecycle Method: The componentDidMount() method runs after 
    the component output has been rendered to the DOM.*/</span>

    <span class="nx">componentDidMount</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">populateCustomersData</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="c1">// Event handler for create button</span>
    <span class="nx">onCustomerCreate</span><span class="p">()</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="p">{</span> <span class="nx">history</span> <span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">;</span>
        <span class="nx">history</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="dl">'</span><span class="s1">/banking/customer/create</span><span class="dl">'</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="c1">// Event handler for edit button</span>
    <span class="nx">OncustomerEdit</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="p">{</span> <span class="nx">history</span> <span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">;</span>
        <span class="nx">history</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="dl">'</span><span class="s1">/banking/customer/edit/</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">id</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="c1">// Event handler for delete button</span>
    <span class="nx">OncustomerDelete</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="p">{</span> <span class="nx">history</span> <span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">;</span>
        <span class="nx">history</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="dl">'</span><span class="s1">/banking/customer/delete/</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">id</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nx">populateCustomersData</span><span class="p">()</span> <span class="p">{</span>

        <span class="nx">getData</span><span class="p">(</span><span class="s2">`api/Customer/getall`</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span>
            <span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="kd">let</span> <span class="nx">responseJson</span> <span class="o">=</span> <span class="nx">result</span><span class="p">;</span>
                <span class="k">if</span> <span class="p">(</span><span class="nx">responseJson</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span>
                        <span class="na">customers</span><span class="p">:</span> <span class="nx">responseJson</span><span class="p">,</span>
                        <span class="na">loading</span><span class="p">:</span> <span class="kc">false</span>
                    <span class="p">});</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">);</span>
    <span class="p">}</span>

    <span class="nx">renderAllCustomersTable</span><span class="p">(</span><span class="nx">customers</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">(</span>
            <span class="p">&lt;</span><span class="nt">table</span> <span class="na">className</span><span class="p">=</span><span class="s">"table table-striped"</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nt">thead</span><span class="p">&gt;</span>
                    <span class="p">&lt;</span><span class="nt">tr</span><span class="p">&gt;</span>
                        <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>First Name<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
                        <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>Last Name<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
                        <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>Email<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
                        <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>Contact Number<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
                        <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>Address<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
                        <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>Actions<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
                    <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
                <span class="p">&lt;/</span><span class="nt">thead</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nt">tbody</span><span class="p">&gt;</span>
                    <span class="si">{</span>
                        <span class="nx">customers</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">customer</span> <span class="o">=&gt;</span> <span class="p">(</span>
                            <span class="p">&lt;</span><span class="nt">tr</span> <span class="na">key</span><span class="p">=</span><span class="si">{</span><span class="nx">customer</span><span class="p">.</span><span class="nx">id</span><span class="si">}</span><span class="p">&gt;</span>
                                <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">customer</span><span class="p">.</span><span class="nx">firstName</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
                                <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">customer</span><span class="p">.</span><span class="nx">lastName</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
                                <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">customer</span><span class="p">.</span><span class="nx">email</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
                                <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">customer</span><span class="p">.</span><span class="nx">contactNumber</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
                                <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">customer</span><span class="p">.</span><span class="nx">address</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
                                <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;&lt;</span><span class="nt">button</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="p">()</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">OncustomerEdit</span><span class="p">(</span><span class="nx">customer</span><span class="p">.</span><span class="nx">id</span><span class="p">)</span><span class="si">}</span> <span class="na">className</span><span class="p">=</span><span class="s">"btn btn-success"</span><span class="p">&gt;</span>Edit<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span> ||
                                    <span class="p">&lt;</span><span class="nt">button</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="p">()</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">OncustomerDelete</span><span class="p">(</span><span class="nx">customer</span><span class="p">.</span><span class="nx">id</span><span class="p">)</span><span class="si">}</span> <span class="na">className</span><span class="p">=</span><span class="s">"btn btn-danger"</span><span class="p">&gt;</span>Delete<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
                            <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
                        <span class="p">))</span>
                    <span class="si">}</span>
                <span class="p">&lt;/</span><span class="nt">tbody</span><span class="p">&gt;</span>
            <span class="p">&lt;/</span><span class="nt">table</span><span class="p">&gt;</span>
        <span class="p">);</span>
    <span class="p">}</span>

    <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>

        <span class="kd">let</span> <span class="nx">content</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">loading</span> <span class="p">?</span> <span class="p">(</span>
            <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nt">em</span><span class="p">&gt;</span>Loading...<span class="p">&lt;/</span><span class="nt">em</span><span class="p">&gt;</span>
            <span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
        <span class="p">)</span> <span class="p">:</span> <span class="p">(</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">renderAllCustomersTable</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">customers</span><span class="p">)</span>
        <span class="p">)</span>

        <span class="k">return</span> <span class="p">(</span>
            <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>Customer<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nt">button</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="p">()</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">onCustomerCreate</span><span class="p">()</span><span class="si">}</span> <span class="na">className</span><span class="p">=</span><span class="s">"btn btn-primary"</span><span class="p">&gt;</span>Create<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
                <span class="si">{</span><span class="nx">content</span><span class="si">}</span>
            <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="p">);</span>
    <span class="p">}</span>

<span class="p">}</span>

</code></pre></div></div>

<p><strong>_Edit.jsx</strong></p>
<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">Component</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">getData</span><span class="p">,</span> <span class="nx">putData</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../services/AccessAPI</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">class</span> <span class="nx">Edit</span> <span class="kd">extends</span> <span class="nx">Component</span> <span class="p">{</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">super</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span>

        <span class="k">this</span><span class="p">.</span><span class="nx">onChangeFirstName</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">onChangeFirstName</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">onChangeLastName</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">onChangeLastName</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">onChangeEmail</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">onChangeEmail</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">onChangeContactNumber</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">onChangeContactNumber</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">onChangeAddress</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">onChangeAddress</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">onSubmit</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">onSubmit</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>

        <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
            <span class="na">id</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span>
            <span class="na">firstName</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span>
            <span class="na">lastName</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span>
            <span class="na">email</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span>
            <span class="na">contactNumber</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span>
            <span class="na">address</span><span class="p">:</span> <span class="dl">''</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="nx">componentDidMount</span><span class="p">()</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="p">{</span> <span class="nx">id</span> <span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">match</span><span class="p">.</span><span class="nx">params</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">getCustomer</span><span class="p">(</span><span class="nx">id</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nx">getCustomer</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">getData</span><span class="p">(</span><span class="dl">'</span><span class="s1">api/Customer/</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">id</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span>
            <span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span>
                        <span class="na">id</span><span class="p">:</span> <span class="nx">result</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span>
                        <span class="na">firstName</span><span class="p">:</span> <span class="nx">result</span><span class="p">.</span><span class="nx">firstName</span><span class="p">,</span>
                        <span class="na">lastName</span><span class="p">:</span> <span class="nx">result</span><span class="p">.</span><span class="nx">lastName</span><span class="p">,</span>
                        <span class="na">email</span><span class="p">:</span> <span class="nx">result</span><span class="p">.</span><span class="nx">email</span><span class="p">,</span>
                        <span class="na">contactNumber</span><span class="p">:</span> <span class="nx">result</span><span class="p">.</span><span class="nx">contactNumber</span><span class="p">,</span>
                        <span class="na">address</span><span class="p">:</span> <span class="nx">result</span><span class="p">.</span><span class="nx">address</span>
                        <span class="c1">//loading: false</span>
                    <span class="p">});</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">);</span>
    <span class="p">}</span>

    <span class="nx">onChangeFirstName</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span>
            <span class="na">firstName</span><span class="p">:</span> <span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span>
        <span class="p">});</span>
    <span class="p">}</span>

    <span class="nx">onChangeLastName</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span>
            <span class="na">lastName</span><span class="p">:</span> <span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span>
        <span class="p">});</span>
    <span class="p">}</span>

    <span class="nx">onChangeEmail</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span>
            <span class="na">email</span><span class="p">:</span> <span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span>
        <span class="p">});</span>
    <span class="p">}</span>

    <span class="nx">onChangeContactNumber</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span>
            <span class="na">contactNumber</span><span class="p">:</span> <span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span>
        <span class="p">});</span>

    <span class="p">}</span>

    <span class="nx">onChangeAddress</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span>
            <span class="na">address</span><span class="p">:</span> <span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span>
        <span class="p">});</span>
    <span class="p">}</span>


    <span class="nx">onUpdateCancel</span><span class="p">()</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="p">{</span> <span class="nx">history</span> <span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">;</span>
        <span class="nx">history</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="dl">'</span><span class="s1">/banking/customers</span><span class="dl">'</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nx">onSubmit</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>

        <span class="nx">e</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
        <span class="kd">const</span> <span class="p">{</span> <span class="nx">history</span> <span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">;</span>
        <span class="kd">const</span> <span class="p">{</span> <span class="nx">id</span> <span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">match</span><span class="p">.</span><span class="nx">params</span><span class="p">;</span>
        <span class="kd">let</span> <span class="nx">customerObj</span> <span class="o">=</span> <span class="p">{</span>
            <span class="na">id</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span>
            <span class="na">firstName</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">firstName</span><span class="p">,</span>
            <span class="na">lastName</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">lastName</span><span class="p">,</span>
            <span class="na">contactNumber</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">contactNumber</span><span class="p">,</span>
            <span class="na">email</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">email</span><span class="p">,</span>
            <span class="na">address</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">address</span>
        <span class="p">}</span>

        <span class="nx">putData</span><span class="p">(</span><span class="dl">'</span><span class="s1">api/Customer/Edit/</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">customerObj</span><span class="p">).</span><span class="nx">then</span><span class="p">((</span><span class="nx">result</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="kd">let</span> <span class="nx">responseJson</span> <span class="o">=</span> <span class="nx">result</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">responseJson</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">responseJson</span><span class="p">);</span>
                <span class="nx">history</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="dl">'</span><span class="s1">/banking/customers</span><span class="dl">'</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="p">);</span>
    <span class="p">}</span>

    <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">(</span>
            <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="s">"row"</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="s">"col-md-4"</span><span class="p">&gt;</span>
                    <span class="p">&lt;</span><span class="nt">h3</span><span class="p">&gt;</span>Edit Customer<span class="p">&lt;/</span><span class="nt">h3</span><span class="p">&gt;</span>
                    <span class="p">&lt;</span><span class="nt">form</span> <span class="na">onSubmit</span><span class="p">=</span><span class="si">{</span><span class="k">this</span><span class="p">.</span><span class="nx">onSubmit</span><span class="si">}</span><span class="p">&gt;</span>
                        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="s">"form-group"</span><span class="p">&gt;</span>
                            <span class="p">&lt;</span><span class="nt">label</span> <span class="na">className</span><span class="p">=</span><span class="s">"control-label"</span><span class="p">&gt;</span>First Name: <span class="p">&lt;/</span><span class="nt">label</span><span class="p">&gt;</span>
                            <span class="p">&lt;</span><span class="nt">input</span> <span class="na">className</span><span class="p">=</span><span class="s">"form-control"</span> <span class="na">type</span><span class="p">=</span><span class="s">"text"</span> <span class="na">value</span><span class="p">=</span><span class="si">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">firstName</span><span class="si">}</span> <span class="na">onChange</span><span class="p">=</span><span class="si">{</span><span class="k">this</span><span class="p">.</span><span class="nx">onChangeFirstName</span><span class="si">}</span><span class="p">&gt;&lt;/</span><span class="nt">input</span><span class="p">&gt;</span>
                        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>

                        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="s">"form-group"</span><span class="p">&gt;</span>
                            <span class="p">&lt;</span><span class="nt">label</span> <span class="na">className</span><span class="p">=</span><span class="s">"control-label"</span><span class="p">&gt;</span>Last Name: <span class="p">&lt;/</span><span class="nt">label</span><span class="p">&gt;</span>
                            <span class="p">&lt;</span><span class="nt">input</span> <span class="na">className</span><span class="p">=</span><span class="s">"form-control"</span> <span class="na">type</span><span class="p">=</span><span class="s">"text"</span> <span class="na">value</span><span class="p">=</span><span class="si">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">lastName</span><span class="si">}</span> <span class="na">onChange</span><span class="p">=</span><span class="si">{</span><span class="k">this</span><span class="p">.</span><span class="nx">onChangeLastName</span><span class="si">}</span><span class="p">&gt;&lt;/</span><span class="nt">input</span><span class="p">&gt;</span>
                        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>

                        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="s">"form-group"</span><span class="p">&gt;</span>
                            <span class="p">&lt;</span><span class="nt">label</span> <span class="na">className</span><span class="p">=</span><span class="s">"control-label"</span><span class="p">&gt;</span>Email: <span class="p">&lt;/</span><span class="nt">label</span><span class="p">&gt;</span>
                            <span class="p">&lt;</span><span class="nt">input</span> <span class="na">className</span><span class="p">=</span><span class="s">"form-control"</span> <span class="na">type</span><span class="p">=</span><span class="s">"text"</span> <span class="na">value</span><span class="p">=</span><span class="si">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">email</span><span class="si">}</span> <span class="na">onChange</span><span class="p">=</span><span class="si">{</span><span class="k">this</span><span class="p">.</span><span class="nx">onChangeEmail</span><span class="si">}</span><span class="p">&gt;&lt;/</span><span class="nt">input</span><span class="p">&gt;</span>
                        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>

                        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="s">"form-group"</span><span class="p">&gt;</span>
                            <span class="p">&lt;</span><span class="nt">label</span> <span class="na">className</span><span class="p">=</span><span class="s">"control-label"</span><span class="p">&gt;</span>Contact Number: <span class="p">&lt;/</span><span class="nt">label</span><span class="p">&gt;</span>
                            <span class="p">&lt;</span><span class="nt">input</span> <span class="na">className</span><span class="p">=</span><span class="s">"form-control"</span> <span class="na">type</span><span class="p">=</span><span class="s">"text"</span> <span class="na">value</span><span class="p">=</span><span class="si">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">contactNumber</span><span class="si">}</span> <span class="na">onChange</span><span class="p">=</span><span class="si">{</span><span class="k">this</span><span class="p">.</span><span class="nx">onChangeContactNumber</span><span class="si">}</span><span class="p">&gt;&lt;/</span><span class="nt">input</span><span class="p">&gt;</span>
                        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>

                        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="s">"form-group"</span><span class="p">&gt;</span>
                            <span class="p">&lt;</span><span class="nt">label</span> <span class="na">className</span><span class="p">=</span><span class="s">"control-label"</span><span class="p">&gt;</span>Address: <span class="p">&lt;/</span><span class="nt">label</span><span class="p">&gt;</span>
                            <span class="p">&lt;</span><span class="nt">input</span> <span class="na">className</span><span class="p">=</span><span class="s">"form-control"</span> <span class="na">type</span><span class="p">=</span><span class="s">"text"</span> <span class="na">value</span><span class="p">=</span><span class="si">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">address</span><span class="si">}</span> <span class="na">onChange</span><span class="p">=</span><span class="si">{</span><span class="k">this</span><span class="p">.</span><span class="nx">onChangeAddress</span><span class="si">}</span><span class="p">&gt;&lt;/</span><span class="nt">input</span><span class="p">&gt;</span>
                        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>

                        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="s">"form-group"</span><span class="p">&gt;</span>
                            <span class="p">&lt;</span><span class="nt">button</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="k">this</span><span class="p">.</span><span class="nx">onUpdateCancel</span><span class="si">}</span> <span class="na">className</span><span class="p">=</span><span class="s">"btn btn-default"</span><span class="p">&gt;</span>Cancel<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
                            <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="p">=</span><span class="s">"submit"</span> <span class="na">value</span><span class="p">=</span><span class="s">"Edit"</span> <span class="na">className</span><span class="p">=</span><span class="s">"btn btn-primary"</span><span class="p">&gt;&lt;/</span><span class="nt">input</span><span class="p">&gt;</span>
                        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>

                    <span class="p">&lt;/</span><span class="nt">form</span><span class="p">&gt;</span>

                <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
            <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Delete.jsx</strong></p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">Component</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">deleteData</span><span class="p">,</span> <span class="nx">getData</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../services/AccessAPI</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">class</span> <span class="nx">Delete</span> <span class="kd">extends</span> <span class="nx">Component</span> <span class="p">{</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">super</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span>

        <span class="k">this</span><span class="p">.</span><span class="nx">onCancel</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">onCancel</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">onConfirmation</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">onConfirmation</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>

        <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
            <span class="na">firstName</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span>
            <span class="na">lastName</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span>
            <span class="na">email</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span>
            <span class="na">contactNumber</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span>
            <span class="na">address</span><span class="p">:</span> <span class="dl">''</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="nx">componentDidMount</span><span class="p">()</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="p">{</span> <span class="nx">id</span> <span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">match</span><span class="p">.</span><span class="nx">params</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">getCustomer</span><span class="p">(</span><span class="nx">id</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nx">getCustomer</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">getData</span><span class="p">(</span><span class="dl">'</span><span class="s1">api/Customer/</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">id</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span>
            <span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span>
                        <span class="na">id</span><span class="p">:</span> <span class="nx">result</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span>
                        <span class="na">firstName</span><span class="p">:</span> <span class="nx">result</span><span class="p">.</span><span class="nx">firstName</span><span class="p">,</span>
                        <span class="na">lastName</span><span class="p">:</span> <span class="nx">result</span><span class="p">.</span><span class="nx">lastName</span><span class="p">,</span>
                        <span class="na">email</span><span class="p">:</span> <span class="nx">result</span><span class="p">.</span><span class="nx">email</span><span class="p">,</span>
                        <span class="na">contactNumber</span><span class="p">:</span> <span class="nx">result</span><span class="p">.</span><span class="nx">contactNumber</span><span class="p">,</span>
                        <span class="na">address</span><span class="p">:</span> <span class="nx">result</span><span class="p">.</span><span class="nx">address</span>
                        <span class="c1">//loading: false</span>
                    <span class="p">});</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">);</span>
    <span class="p">}</span>

    <span class="nx">onCancel</span><span class="p">()</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="p">{</span> <span class="nx">history</span> <span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">;</span>
        <span class="nx">history</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="dl">'</span><span class="s1">/banking/customers</span><span class="dl">'</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nx">onConfirmation</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">e</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>

        <span class="kd">const</span> <span class="p">{</span> <span class="nx">id</span> <span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">match</span><span class="p">.</span><span class="nx">params</span><span class="p">;</span>
        <span class="kd">const</span> <span class="p">{</span> <span class="nx">history</span> <span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">;</span>

        <span class="nx">deleteData</span><span class="p">(</span><span class="dl">'</span><span class="s1">api/Customer/Delete/</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">id</span><span class="p">).</span><span class="nx">then</span><span class="p">((</span><span class="nx">result</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="kd">let</span> <span class="nx">responseJson</span> <span class="o">=</span> <span class="nx">result</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">responseJson</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">history</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="dl">'</span><span class="s1">/banking/customers</span><span class="dl">'</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="p">);</span>
    <span class="p">}</span>


    <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">(</span>
            <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>Delete<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nt">h3</span><span class="p">&gt;</span>Are you sure you want to delete this?<span class="p">&lt;/</span><span class="nt">h3</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
                    <span class="p">&lt;</span><span class="nt">h4</span><span class="p">&gt;</span>Customer<span class="p">&lt;/</span><span class="nt">h4</span><span class="p">&gt;</span>
                    <span class="p">&lt;</span><span class="nt">dl</span> <span class="na">class</span><span class="p">=</span><span class="s">"row"</span><span class="p">&gt;</span>
                        <span class="p">&lt;</span><span class="nt">dt</span> <span class="na">class</span><span class="p">=</span><span class="s">"col-sm-2"</span><span class="p">&gt;</span>
                            First Name:
                        <span class="p">&lt;/</span><span class="nt">dt</span><span class="p">&gt;</span>
                        <span class="p">&lt;</span><span class="nt">dd</span> <span class="na">class</span><span class="p">=</span><span class="s">"col-sm-10"</span><span class="p">&gt;</span>
                            <span class="si">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">firstName</span><span class="si">}</span>
                        <span class="p">&lt;/</span><span class="nt">dd</span><span class="p">&gt;</span>
                        <span class="p">&lt;</span><span class="nt">dt</span> <span class="na">class</span><span class="p">=</span><span class="s">"col-sm-2"</span><span class="p">&gt;</span>
                            Last Name:
                        <span class="p">&lt;/</span><span class="nt">dt</span><span class="p">&gt;</span>
                        <span class="p">&lt;</span><span class="nt">dd</span> <span class="na">class</span><span class="p">=</span><span class="s">"col-sm-10"</span><span class="p">&gt;</span>
                            <span class="si">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">lastName</span><span class="si">}</span>
                        <span class="p">&lt;/</span><span class="nt">dd</span><span class="p">&gt;</span>
                        <span class="p">&lt;</span><span class="nt">dt</span> <span class="na">class</span><span class="p">=</span><span class="s">"col-sm-2"</span><span class="p">&gt;</span>
                            Email:
                        <span class="p">&lt;/</span><span class="nt">dt</span><span class="p">&gt;</span>
                        <span class="p">&lt;</span><span class="nt">dd</span> <span class="na">class</span><span class="p">=</span><span class="s">"col-sm-10"</span><span class="p">&gt;</span>
                            <span class="si">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">email</span><span class="si">}</span>
                        <span class="p">&lt;/</span><span class="nt">dd</span><span class="p">&gt;</span>
                        <span class="p">&lt;</span><span class="nt">dt</span> <span class="na">class</span><span class="p">=</span><span class="s">"col-sm-2"</span><span class="p">&gt;</span>
                            Contact Number:
                        <span class="p">&lt;/</span><span class="nt">dt</span><span class="p">&gt;</span>
                        <span class="p">&lt;</span><span class="nt">dd</span> <span class="na">class</span><span class="p">=</span><span class="s">"col-sm-10"</span><span class="p">&gt;</span>
                            <span class="si">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">contactNumber</span><span class="si">}</span>
                        <span class="p">&lt;/</span><span class="nt">dd</span><span class="p">&gt;</span>

                        <span class="p">&lt;</span><span class="nt">dt</span> <span class="na">class</span><span class="p">=</span><span class="s">"col-sm-2"</span><span class="p">&gt;</span>
                            Address:
                        <span class="p">&lt;/</span><span class="nt">dt</span><span class="p">&gt;</span>
                        <span class="p">&lt;</span><span class="nt">dd</span> <span class="na">class</span><span class="p">=</span><span class="s">"col-sm-10"</span><span class="p">&gt;</span>
                            <span class="si">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">address</span><span class="si">}</span>
                        <span class="p">&lt;/</span><span class="nt">dd</span><span class="p">&gt;</span>

                    <span class="p">&lt;/</span><span class="nt">dl</span><span class="p">&gt;</span>

                    <span class="p">&lt;</span><span class="nt">form</span> <span class="na">onSubmit</span><span class="p">=</span><span class="si">{</span><span class="k">this</span><span class="p">.</span><span class="nx">onConfirmation</span><span class="si">}</span><span class="p">&gt;</span>
                        <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="p">=</span><span class="s">"hidden"</span> <span class="na">asp-for</span><span class="p">=</span><span class="s">"Id"</span> <span class="p">/&gt;</span>
                        <span class="p">&lt;</span><span class="nt">button</span> <span class="na">type</span><span class="p">=</span><span class="s">"submit"</span> <span class="na">class</span><span class="p">=</span><span class="s">"btn btn-danger"</span><span class="p">&gt;</span>Delete<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span> |
                        <span class="p">&lt;</span><span class="nt">button</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="k">this</span><span class="p">.</span><span class="nx">onCancel</span><span class="si">}</span> <span class="na">className</span><span class="p">=</span><span class="s">"btn btn-primary"</span><span class="p">&gt;</span>Back to List<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
                    <span class="p">&lt;/</span><span class="nt">form</span><span class="p">&gt;</span>
                <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
            <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create roles components in src-&gt;components-&gt;Role folder</li>
</ul>

<p><strong>CreateRole.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Component</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">postData</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../services/AccessAPI</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">class</span> <span class="nx">CreateRole</span> <span class="kd">extends</span> <span class="nx">Component</span><span class="p">{</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">){</span>
        <span class="k">super</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
            <span class="na">roleName</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span>
            <span class="na">loading</span><span class="p">:</span> <span class="kc">true</span>
        <span class="p">};</span>

        <span class="k">this</span><span class="p">.</span><span class="nx">onSubmit</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">onSubmit</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">onChange</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">onChange</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>

    <span class="p">}</span>

    <span class="nx">onSubmit</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span>
        <span class="nx">e</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
        <span class="kd">const</span><span class="p">{</span><span class="nx">history</span><span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">;</span>

        <span class="kd">let</span> <span class="nx">roleObj</span> <span class="o">=</span> <span class="p">{</span>
            <span class="na">roleName</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">roleName</span>
        <span class="p">}</span>

        <span class="nx">postData</span><span class="p">(</span><span class="dl">'</span><span class="s1">api/Role/Create</span><span class="dl">'</span><span class="p">,</span> <span class="nx">roleObj</span><span class="p">).</span><span class="nx">then</span><span class="p">((</span><span class="nx">result</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="kd">let</span> <span class="nx">responseJson</span> <span class="o">=</span> <span class="nx">result</span><span class="p">;</span>

            <span class="k">if</span><span class="p">(</span><span class="nx">responseJson</span><span class="p">){</span>
                <span class="nx">history</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="dl">'</span><span class="s1">/admin/roles</span><span class="dl">'</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">});</span>
    <span class="p">}</span>

    <span class="nx">onChange</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({[</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">name</span><span class="p">]:</span> <span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">});</span>
    <span class="p">}</span>

    <span class="nx">render</span><span class="p">(){</span>
        <span class="k">return</span><span class="p">(</span>
            <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">row</span><span class="dl">"</span><span class="o">&gt;</span>
            <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">col-md-4</span><span class="dl">"</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">h3</span><span class="o">&gt;</span><span class="nx">Create</span> <span class="k">new</span> <span class="nx">role</span><span class="o">&lt;</span><span class="sr">/h3</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">form</span> <span class="nx">onSubmit</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">onSubmit</span><span class="p">}</span><span class="o">&gt;</span>
                    <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-group</span><span class="dl">"</span><span class="o">&gt;</span>
                        <span class="o">&lt;</span><span class="nx">label</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">control-label</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Role</span> <span class="nx">Name</span><span class="p">:</span> <span class="o">&lt;</span><span class="sr">/label</span><span class="err">&gt;
</span>                        <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-control</span><span class="dl">"</span> <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">text</span><span class="dl">"</span> <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">roleName</span><span class="dl">"</span> <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">roleName</span><span class="p">}</span> <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">onChange</span><span class="p">}</span><span class="o">&gt;&lt;</span><span class="sr">/input</span><span class="err">&gt;
</span>                    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>                    <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-group</span><span class="dl">"</span><span class="o">&gt;</span>
                        <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">submit</span><span class="dl">"</span> <span class="nx">value</span><span class="o">=</span><span class="dl">"</span><span class="s2">Add Role</span><span class="dl">"</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">btn btn-primary</span><span class="dl">"</span><span class="o">&gt;&lt;</span><span class="sr">/input</span><span class="err">&gt;
</span>                    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>
                <span class="o">&lt;</span><span class="sr">/form</span><span class="err">&gt;
</span>
            <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>        <span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>DeleteRole.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">Component</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">deleteData</span><span class="p">,</span> <span class="nx">getData</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../services/AccessAPI</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">class</span> <span class="nx">DeleteRole</span> <span class="kd">extends</span> <span class="nx">Component</span> <span class="p">{</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">super</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span>

        <span class="k">this</span><span class="p">.</span><span class="nx">onCancel</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">onCancel</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">onConfirmation</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">onConfirmation</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>

        <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
            <span class="na">roleName</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span>
            <span class="na">loading</span><span class="p">:</span> <span class="kc">true</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="nx">componentDidMount</span><span class="p">()</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="p">{</span> <span class="nx">id</span> <span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">match</span><span class="p">.</span><span class="nx">params</span><span class="p">;</span>

        <span class="nx">getData</span><span class="p">(</span><span class="dl">'</span><span class="s1">api/Role/</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">id</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span>
            <span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Role for edit: </span><span class="dl">"</span><span class="p">);</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
                <span class="k">if</span> <span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span>
                        <span class="na">id</span><span class="p">:</span> <span class="nx">result</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span>
                        <span class="na">roleName</span><span class="p">:</span> <span class="nx">result</span><span class="p">.</span><span class="nx">roleName</span><span class="p">,</span>
                        <span class="na">loading</span><span class="p">:</span> <span class="kc">false</span>
                    <span class="p">});</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">);</span>
    <span class="p">}</span>

    <span class="nx">onCancel</span><span class="p">()</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="p">{</span> <span class="nx">history</span> <span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">;</span>
        <span class="nx">history</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="dl">'</span><span class="s1">/admin/roles</span><span class="dl">'</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nx">onConfirmation</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">e</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>

        <span class="kd">const</span> <span class="p">{</span> <span class="nx">id</span> <span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">match</span><span class="p">.</span><span class="nx">params</span><span class="p">;</span>
        <span class="kd">const</span> <span class="p">{</span> <span class="nx">history</span> <span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">;</span>

        <span class="nx">deleteData</span><span class="p">(</span><span class="dl">'</span><span class="s1">api/Role/Delete/</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">id</span><span class="p">).</span><span class="nx">then</span><span class="p">((</span><span class="nx">result</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="kd">let</span> <span class="nx">responseJson</span> <span class="o">=</span> <span class="nx">result</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">responseJson</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">responseJson</span><span class="p">);</span>
                <span class="nx">history</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="dl">'</span><span class="s1">/admin/roles</span><span class="dl">'</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="p">);</span>

    <span class="p">}</span>


    <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">(</span>
            <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">h2</span><span class="o">&gt;</span><span class="p">::</span><span class="nx">Delete</span> <span class="nx">role</span><span class="p">::</span><span class="o">&lt;</span><span class="sr">/h2</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">h3</span><span class="o">&gt;</span><span class="nx">Are</span> <span class="nx">you</span> <span class="nx">sure</span> <span class="nx">you</span> <span class="nx">want</span> <span class="nx">to</span> <span class="k">delete</span> <span class="k">this</span><span class="p">?</span><span class="o">&lt;</span><span class="sr">/h3</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
                    <span class="o">&lt;</span><span class="nx">h4</span><span class="o">&gt;</span><span class="nx">Role</span> <span class="nx">Information</span><span class="o">&lt;</span><span class="sr">/h4</span><span class="err">&gt;
</span>                    <span class="o">&lt;</span><span class="nx">dl</span> <span class="kd">class</span><span class="o">=</span><span class="dl">"</span><span class="s2">row</span><span class="dl">"</span><span class="o">&gt;</span>
                        <span class="o">&lt;</span><span class="nx">dt</span> <span class="kd">class</span><span class="o">=</span><span class="dl">"</span><span class="s2">col-sm-2</span><span class="dl">"</span><span class="o">&gt;</span>
                            <span class="nx">Role</span> <span class="nx">Name</span><span class="p">:</span>
                        <span class="o">&lt;</span><span class="sr">/dt</span><span class="err">&gt;
</span>                        <span class="o">&lt;</span><span class="nx">dd</span> <span class="kd">class</span><span class="o">=</span><span class="dl">"</span><span class="s2">col-sm-10</span><span class="dl">"</span><span class="o">&gt;</span>
                            <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">roleName</span><span class="p">}</span>
                        <span class="o">&lt;</span><span class="sr">/dd</span><span class="err">&gt;
</span>                    <span class="o">&lt;</span><span class="sr">/dl</span><span class="err">&gt;
</span>
                    <span class="o">&lt;</span><span class="nx">form</span> <span class="nx">onSubmit</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">onConfirmation</span><span class="p">}</span><span class="o">&gt;</span>
                        <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">hidden</span><span class="dl">"</span> <span class="nx">asp</span><span class="o">-</span><span class="k">for</span><span class="o">=</span><span class="dl">"</span><span class="s2">Id</span><span class="dl">"</span> <span class="o">/&gt;</span>
                        <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">submit</span><span class="dl">"</span> <span class="kd">class</span><span class="o">=</span><span class="dl">"</span><span class="s2">btn btn-danger</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Delete</span><span class="o">&lt;</span><span class="sr">/button&gt; </span><span class="err">|
</span>                        <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">onCancel</span><span class="p">}</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">btn btn-primary</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Back</span> <span class="nx">to</span> <span class="nx">List</span><span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>                    <span class="o">&lt;</span><span class="sr">/form</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>        <span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>EditRole.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Component</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">getData</span><span class="p">,</span> <span class="nx">putData</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../services/AccessAPI</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">class</span> <span class="nx">EditRole</span> <span class="kd">extends</span> <span class="nx">Component</span> <span class="p">{</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">super</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
            <span class="na">id</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span>
            <span class="na">roleName</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span>
        <span class="p">};</span>

        <span class="k">this</span><span class="p">.</span><span class="nx">onChange</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">onChange</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">onSubmit</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">onSubmit</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>

    <span class="p">}</span>

    <span class="nx">onChange</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span> <span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">name</span><span class="p">]:</span> <span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span> <span class="p">});</span>
    <span class="p">}</span>

 
    <span class="nx">componentDidMount</span><span class="p">()</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="p">{</span> <span class="nx">id</span> <span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">match</span><span class="p">.</span><span class="nx">params</span><span class="p">;</span>
        <span class="nx">getData</span><span class="p">(</span><span class="dl">'</span><span class="s1">api/Role/</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">id</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span>
            <span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span>
                        <span class="na">id</span><span class="p">:</span> <span class="nx">result</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span>
                        <span class="na">roleName</span><span class="p">:</span> <span class="nx">result</span><span class="p">.</span><span class="nx">roleName</span><span class="p">,</span>
                        <span class="na">loading</span><span class="p">:</span> <span class="kc">false</span>
                    <span class="p">});</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">);</span>
    <span class="p">}</span>

    <span class="nx">onSubmit</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">e</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
        <span class="kd">const</span> <span class="p">{</span> <span class="nx">history</span> <span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">;</span>
        <span class="kd">const</span> <span class="p">{</span> <span class="nx">id</span> <span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">match</span><span class="p">.</span><span class="nx">params</span><span class="p">;</span>

        <span class="kd">let</span> <span class="nx">roleObj</span> <span class="o">=</span> <span class="p">{</span>
            <span class="na">id</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span>
            <span class="na">roleName</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">roleName</span>
        <span class="p">}</span>

        <span class="nx">putData</span><span class="p">(</span><span class="dl">'</span><span class="s1">api/Role/Edit/</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">roleObj</span><span class="p">).</span><span class="nx">then</span><span class="p">((</span><span class="nx">result</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="kd">let</span> <span class="nx">responseJson</span> <span class="o">=</span> <span class="nx">result</span><span class="p">;</span>
            <span class="c1">//console.log("update response: ");</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">responseJson</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">responseJson</span><span class="p">);</span>
                <span class="nx">history</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="dl">'</span><span class="s1">/admin/roles</span><span class="dl">'</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="p">);</span>
    <span class="p">}</span>

    <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">(</span>
            <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">row</span><span class="dl">"</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">col-md-4</span><span class="dl">"</span><span class="o">&gt;</span>
                    <span class="o">&lt;</span><span class="nx">h3</span><span class="o">&gt;</span><span class="nx">Edit</span> <span class="nx">Role</span><span class="o">&lt;</span><span class="sr">/h3</span><span class="err">&gt;
</span>                    <span class="o">&lt;</span><span class="nx">form</span> <span class="nx">onSubmit</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">onSubmit</span><span class="p">}</span><span class="o">&gt;</span>
                        <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-group</span><span class="dl">"</span><span class="o">&gt;</span>
                            <span class="o">&lt;</span><span class="nx">label</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">control-label</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Role</span> <span class="nx">Name</span><span class="p">:</span> <span class="o">&lt;</span><span class="sr">/label</span><span class="err">&gt;
</span>                            <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-control</span><span class="dl">"</span> <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">text</span><span class="dl">"</span> <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">roleName</span><span class="p">}</span> <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">onChange</span><span class="p">}</span> <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">roleName</span><span class="dl">"</span>
                                <span class="nx">onKeyDown</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">onKeyDown</span><span class="p">}</span> <span class="o">&gt;&lt;</span><span class="sr">/input</span><span class="err">&gt;
</span>                        <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>
                        <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-group</span><span class="dl">"</span><span class="o">&gt;</span>
                            <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">onUpdateCancel</span><span class="p">}</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">btn btn-default</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Cancel</span><span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>                            <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">submit</span><span class="dl">"</span> <span class="nx">value</span><span class="o">=</span><span class="dl">"</span><span class="s2">Edit</span><span class="dl">"</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">btn btn-primary</span><span class="dl">"</span><span class="o">&gt;&lt;</span><span class="sr">/input</span><span class="err">&gt;
</span>                        <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>
                    <span class="o">&lt;</span><span class="sr">/form</span><span class="err">&gt;
</span>
                <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>        <span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>Roles.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Component</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">getData</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../services/AccessAPI</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">class</span> <span class="nx">Roles</span> <span class="kd">extends</span> <span class="nx">Component</span> <span class="p">{</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">super</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
            <span class="na">roles</span><span class="p">:</span> <span class="p">[],</span>
            <span class="na">loading</span><span class="p">:</span> <span class="kc">true</span>
        <span class="p">};</span>

        <span class="k">this</span><span class="p">.</span><span class="nx">onRoleCreate</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">onRoleCreate</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">onRoleEdit</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">onRoleEdit</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">onRoleDelete</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">onRoleDelete</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>

    <span class="p">}</span>

    <span class="nx">onRoleCreate</span><span class="p">(){</span>
        <span class="kd">const</span> <span class="p">{</span> <span class="nx">history</span> <span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">;</span>
        <span class="nx">history</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="dl">'</span><span class="s1">/admin/role/create</span><span class="dl">'</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nx">onRoleEdit</span><span class="p">(</span><span class="nx">id</span><span class="p">){</span>
        <span class="kd">const</span> <span class="p">{</span><span class="nx">history</span><span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">;</span>
        <span class="nx">history</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="dl">'</span><span class="s1">/admin/role/edit/</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">id</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nx">onRoleDelete</span><span class="p">(</span><span class="nx">id</span><span class="p">){</span>
        <span class="kd">const</span><span class="p">{</span><span class="nx">history</span><span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">;</span>
        <span class="nx">history</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="dl">'</span><span class="s1">/admin/role/delete/</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">id</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nx">componentDidMount</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">getAllRoles</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="nx">getAllRoles</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">getData</span><span class="p">(</span><span class="dl">'</span><span class="s1">api/Role/GetAll</span><span class="dl">'</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span>
            <span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span>
                        <span class="na">roles</span><span class="p">:</span> <span class="nx">result</span><span class="p">,</span>
                        <span class="na">loading</span><span class="p">:</span> <span class="kc">false</span>
                    <span class="p">});</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">);</span>
    <span class="p">}</span>

    <span class="nx">populateRolesTable</span><span class="p">(</span><span class="nx">roles</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">(</span>
            <span class="o">&lt;</span><span class="nx">table</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">table table-striped</span><span class="dl">"</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">thead</span><span class="o">&gt;</span>
                    <span class="o">&lt;</span><span class="nx">tr</span><span class="o">&gt;</span>
                        <span class="o">&lt;</span><span class="nx">th</span><span class="o">&gt;</span><span class="nx">Roles</span><span class="o">&lt;</span><span class="sr">/th</span><span class="err">&gt;
</span>                        <span class="o">&lt;</span><span class="nx">th</span><span class="o">&gt;</span><span class="nx">Actions</span><span class="o">&lt;</span><span class="sr">/th</span><span class="err">&gt;
</span>                    <span class="o">&lt;</span><span class="sr">/tr</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="sr">/thead</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">tbody</span><span class="o">&gt;</span>
                    <span class="p">{</span>
                        <span class="nx">roles</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">role</span> <span class="o">=&gt;</span> <span class="p">(</span>
                            <span class="o">&lt;</span><span class="nx">tr</span> <span class="nx">key</span><span class="o">=</span><span class="p">{</span><span class="nx">role</span><span class="p">.</span><span class="nx">id</span><span class="p">}</span><span class="o">&gt;</span>
                                <span class="o">&lt;</span><span class="nx">td</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">role</span><span class="p">.</span><span class="nx">roleName</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/td</span><span class="err">&gt;
</span>                                <span class="o">&lt;</span><span class="nx">td</span><span class="o">&gt;&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">onRoleEdit</span><span class="p">(</span><span class="nx">role</span><span class="p">.</span><span class="nx">id</span><span class="p">)}</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">btn btn-success</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Edit</span><span class="o">&lt;</span><span class="sr">/button&gt; |</span><span class="err">|
</span>                                    <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">onRoleDelete</span><span class="p">(</span><span class="nx">role</span><span class="p">.</span><span class="nx">id</span><span class="p">)}</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">btn btn-danger</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Delete</span><span class="o">&lt;</span><span class="sr">/button&gt;&lt;/</span><span class="nx">td</span><span class="o">&gt;</span>
                            <span class="o">&lt;</span><span class="sr">/tr</span><span class="err">&gt;
</span>                        <span class="p">))</span>
                    <span class="p">}</span>
                <span class="o">&lt;</span><span class="sr">/tbody</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="sr">/table</span><span class="err">&gt;
</span>        <span class="p">);</span>
    <span class="p">}</span>

    <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
        <span class="kd">let</span> <span class="nx">contnet</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">loading</span> <span class="p">?</span> <span class="p">(</span>
            <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">em</span><span class="o">&gt;</span><span class="nx">Loading</span> <span class="p">...</span> <span class="o">&lt;</span><span class="sr">/em</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="sr">/p</span><span class="err">&gt;
</span>
        <span class="p">)</span> <span class="p">:</span> <span class="p">(</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">populateRolesTable</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">roles</span><span class="p">)</span>
        <span class="p">)</span>
        <span class="k">return</span> <span class="p">(</span>
            <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">h4</span><span class="o">&gt;</span><span class="nx">List</span> <span class="k">of</span> <span class="nx">roles</span><span class="o">&lt;</span><span class="sr">/h4</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">onRoleCreate</span><span class="p">()}</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">btn btn-primary</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Create</span> <span class="k">new</span> <span class="nx">role</span><span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>                <span class="p">{</span><span class="nx">contnet</span><span class="p">}</span>
            <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>        <span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create User’s components in src-&gt;components-&gt;User</li>
</ul>

<p><strong>CreateUser.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Component</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">SessionManager</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../Auth/SessionManager</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">postData</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../services/AccessAPI</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">class</span> <span class="nx">CreateUser</span> <span class="kd">extends</span> <span class="nx">Component</span> <span class="p">{</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">super</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
            <span class="na">fullName</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span>
            <span class="na">email</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span>
            <span class="na">userName</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span>
            <span class="na">password</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span>
            <span class="na">confirmationPassword</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span>
            <span class="na">roles</span><span class="p">:</span> <span class="p">[],</span>
            <span class="na">loading</span><span class="p">:</span> <span class="kc">true</span>
        <span class="p">};</span>

        <span class="k">this</span><span class="p">.</span><span class="nx">onSubmit</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">onSubmit</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">onChange</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">onChange</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">onClickBack</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">onClickBack</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>

    <span class="p">}</span>

    <span class="nx">onSubmit</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">e</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
        <span class="kd">const</span> <span class="p">{</span> <span class="nx">history</span> <span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">;</span>

        <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">password</span> <span class="o">!==</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">confirmationPassword</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">alert</span><span class="p">(</span><span class="dl">"</span><span class="s2">Password and confirm password are not same</span><span class="dl">"</span><span class="p">);</span>
            <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="kd">let</span> <span class="nx">userObj</span> <span class="o">=</span> <span class="p">{</span>
            <span class="na">fullName</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">userName</span><span class="p">,</span>
            <span class="na">email</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">email</span><span class="p">,</span>
            <span class="na">userName</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">userName</span><span class="p">,</span>
            <span class="na">password</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">password</span><span class="p">,</span>
            <span class="na">confirmationPassword</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">confirmationPassword</span><span class="p">,</span>
            <span class="na">roles</span><span class="p">:</span> <span class="p">[]</span>
        <span class="p">}</span>

        <span class="nx">postData</span><span class="p">(</span><span class="dl">'</span><span class="s1">api/User/Create</span><span class="dl">'</span><span class="p">,</span> <span class="nx">userObj</span><span class="p">).</span><span class="nx">then</span><span class="p">((</span><span class="nx">result</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="kd">let</span> <span class="nx">responseJson</span> <span class="o">=</span> <span class="nx">result</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">responseJson</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">history</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="dl">'</span><span class="s1">/admin/users</span><span class="dl">'</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">});</span>
    <span class="p">}</span>

    <span class="nx">onClickBack</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span>
        <span class="nx">e</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
        <span class="kd">const</span> <span class="p">{</span> <span class="nx">history</span> <span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">;</span>

        <span class="k">if</span><span class="p">(</span><span class="nx">SessionManager</span><span class="p">.</span><span class="nx">getToken</span><span class="p">()){</span>
            <span class="nx">history</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="dl">'</span><span class="s1">/admin/users</span><span class="dl">'</span><span class="p">);</span>
        <span class="p">}</span><span class="k">else</span><span class="p">{</span>
            <span class="nx">history</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="dl">'</span><span class="s1">/login</span><span class="dl">'</span><span class="p">);</span>
        <span class="p">}</span>   
    <span class="p">}</span>

    <span class="nx">onChange</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span> <span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">name</span><span class="p">]:</span> <span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span> <span class="p">});</span>
    <span class="p">}</span>

    <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">(</span>
            <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">row</span><span class="dl">"</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">col-md-4</span><span class="dl">"</span><span class="o">&gt;</span>
                    <span class="o">&lt;</span><span class="nx">h3</span><span class="o">&gt;</span><span class="nx">Create</span> <span class="k">new</span> <span class="nx">user</span><span class="o">&lt;</span><span class="sr">/h3</span><span class="err">&gt;
</span>                    <span class="o">&lt;</span><span class="nx">form</span> <span class="nx">onSubmit</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">onSubmit</span><span class="p">}</span><span class="o">&gt;</span>
                        <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-group</span><span class="dl">"</span><span class="o">&gt;</span>
                            <span class="o">&lt;</span><span class="nx">label</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">control-label</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Full</span> <span class="nx">Name</span><span class="p">:</span> <span class="o">&lt;</span><span class="sr">/label</span><span class="err">&gt;
</span>                            <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-control</span><span class="dl">"</span> <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">text</span><span class="dl">"</span> <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">fullName</span><span class="dl">"</span> <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">fullName</span><span class="p">}</span> <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">onChange</span><span class="p">}</span><span class="o">&gt;&lt;</span><span class="sr">/input</span><span class="err">&gt;
</span>                        <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>
                        <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-group</span><span class="dl">"</span><span class="o">&gt;</span>
                            <span class="o">&lt;</span><span class="nx">label</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">control-label</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Email</span><span class="p">:</span> <span class="o">&lt;</span><span class="sr">/label</span><span class="err">&gt;
</span>                            <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-control</span><span class="dl">"</span> <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">text</span><span class="dl">"</span> <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">email</span><span class="dl">"</span> <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">email</span><span class="p">}</span> <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">onChange</span><span class="p">}</span><span class="o">&gt;&lt;</span><span class="sr">/input</span><span class="err">&gt;
</span>                        <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>
                        <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-group</span><span class="dl">"</span><span class="o">&gt;</span>
                            <span class="o">&lt;</span><span class="nx">label</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">control-label</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">User</span> <span class="nx">Name</span><span class="p">:</span> <span class="o">&lt;</span><span class="sr">/label</span><span class="err">&gt;
</span>                            <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-control</span><span class="dl">"</span> <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">text</span><span class="dl">"</span> <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">userName</span><span class="dl">"</span> <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">userName</span><span class="p">}</span> <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">onChange</span><span class="p">}</span><span class="o">&gt;&lt;</span><span class="sr">/input</span><span class="err">&gt;
</span>                        <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>
                        <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-group</span><span class="dl">"</span><span class="o">&gt;</span>
                            <span class="o">&lt;</span><span class="nx">label</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">control-label</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Password</span><span class="p">:</span> <span class="o">&lt;</span><span class="sr">/label</span><span class="err">&gt;
</span>                            <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-control</span><span class="dl">"</span> <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">password</span><span class="dl">"</span> <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">password</span><span class="dl">"</span> <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">password</span><span class="p">}</span> <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">onChange</span><span class="p">}</span><span class="o">&gt;&lt;</span><span class="sr">/input</span><span class="err">&gt;
</span>                        <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>
                        <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-group</span><span class="dl">"</span><span class="o">&gt;</span>
                            <span class="o">&lt;</span><span class="nx">label</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">control-label</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Confirm</span> <span class="nx">Password</span><span class="p">:</span> <span class="o">&lt;</span><span class="sr">/label</span><span class="err">&gt;
</span>                            <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-control</span><span class="dl">"</span> <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">password</span><span class="dl">"</span> <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">confirmationPassword</span><span class="dl">"</span> <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">confirmationPassword</span><span class="p">}</span> <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">onChange</span><span class="p">}</span><span class="o">&gt;&lt;</span><span class="sr">/input</span><span class="err">&gt;
</span>                        <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>

                        <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-group</span><span class="dl">"</span><span class="o">&gt;</span>
                            <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">submit</span><span class="dl">"</span> <span class="nx">value</span><span class="o">=</span><span class="dl">"</span><span class="s2">Create User</span><span class="dl">"</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">btn btn-primary</span><span class="dl">"</span><span class="o">&gt;&lt;</span><span class="sr">/input&gt; &amp;nbsp; &amp;nbsp;</span><span class="err"> 
</span>                            <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">button</span><span class="dl">"</span> <span class="nx">value</span><span class="o">=</span><span class="dl">"</span><span class="s2">Back</span><span class="dl">"</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">onClickBack</span><span class="p">}</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">btn btn-primary</span><span class="dl">"</span><span class="o">&gt;&lt;</span><span class="sr">/input</span><span class="err">&gt;
</span>                        <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>
                    <span class="o">&lt;</span><span class="sr">/form</span><span class="err">&gt;
</span>
                <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>        <span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>
<p><strong>DeleteUser.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">Component</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">deleteData</span><span class="p">,</span> <span class="nx">getData</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../services/AccessAPI</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">class</span> <span class="nx">DeleteUser</span> <span class="kd">extends</span> <span class="nx">Component</span> <span class="p">{</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">super</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span>

        <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
            <span class="na">fullName</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span>
            <span class="na">userName</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span>
            <span class="na">email</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span>
            <span class="na">roles</span><span class="p">:</span> <span class="p">[],</span>
            <span class="na">loading</span><span class="p">:</span> <span class="kc">true</span>
        <span class="p">}</span>

        <span class="k">this</span><span class="p">.</span><span class="nx">onCancel</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">onCancel</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">onConfirmation</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">onConfirmation</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nx">componentDidMount</span><span class="p">()</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="p">{</span> <span class="nx">id</span> <span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">match</span><span class="p">.</span><span class="nx">params</span><span class="p">;</span>

        <span class="nx">getData</span><span class="p">(</span><span class="dl">'</span><span class="s1">api/User/GetUserDetails/</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">id</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span>
            <span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Role for edit: </span><span class="dl">"</span><span class="p">);</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
                <span class="k">if</span> <span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span>
                        <span class="na">fullName</span><span class="p">:</span> <span class="nx">result</span><span class="p">.</span><span class="nx">fullName</span><span class="p">,</span>
                        <span class="na">userName</span><span class="p">:</span> <span class="nx">result</span><span class="p">.</span><span class="nx">userName</span><span class="p">,</span>
                        <span class="na">email</span><span class="p">:</span> <span class="nx">result</span><span class="p">.</span><span class="nx">email</span><span class="p">,</span>
                        <span class="na">roles</span><span class="p">:</span> <span class="nx">result</span><span class="p">.</span><span class="nx">roles</span><span class="p">,</span>
                        <span class="na">loading</span><span class="p">:</span> <span class="kc">false</span>
                    <span class="p">});</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">);</span>
    <span class="p">}</span>

    <span class="nx">onCancel</span><span class="p">()</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="p">{</span> <span class="nx">history</span> <span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">;</span>
        <span class="nx">history</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="dl">'</span><span class="s1">/admin/users</span><span class="dl">'</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nx">onConfirmation</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">e</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>

        <span class="kd">const</span> <span class="p">{</span> <span class="nx">id</span> <span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">match</span><span class="p">.</span><span class="nx">params</span><span class="p">;</span>
        <span class="kd">const</span> <span class="p">{</span> <span class="nx">history</span> <span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">;</span>

        <span class="nx">deleteData</span><span class="p">(</span><span class="dl">'</span><span class="s1">api/User/Delete/</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">id</span><span class="p">).</span><span class="nx">then</span><span class="p">((</span><span class="nx">result</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="kd">let</span> <span class="nx">responseJson</span> <span class="o">=</span> <span class="nx">result</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">responseJson</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">history</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="dl">'</span><span class="s1">/admin/users</span><span class="dl">'</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="p">);</span>

    <span class="p">}</span>


    <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">(</span>
            <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">h2</span><span class="o">&gt;</span><span class="p">::</span><span class="nx">Delete</span> <span class="nx">user</span><span class="p">::</span><span class="o">&lt;</span><span class="sr">/h2</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">h3</span><span class="o">&gt;</span><span class="nx">Are</span> <span class="nx">you</span> <span class="nx">sure</span> <span class="nx">you</span> <span class="nx">want</span> <span class="nx">to</span> <span class="k">delete</span> <span class="k">this</span><span class="p">?</span><span class="o">&lt;</span><span class="sr">/h3</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
                    <span class="o">&lt;</span><span class="nx">h4</span><span class="o">&gt;</span><span class="nx">User</span> <span class="nx">Information</span><span class="o">&lt;</span><span class="sr">/h4</span><span class="err">&gt;
</span>                    <span class="o">&lt;</span><span class="nx">dl</span> <span class="kd">class</span><span class="o">=</span><span class="dl">"</span><span class="s2">row</span><span class="dl">"</span><span class="o">&gt;</span>
                        <span class="o">&lt;</span><span class="nx">dt</span> <span class="kd">class</span><span class="o">=</span><span class="dl">"</span><span class="s2">col-sm-2</span><span class="dl">"</span><span class="o">&gt;</span>
                            <span class="nx">Full</span> <span class="nx">Name</span><span class="p">:</span>
                        <span class="o">&lt;</span><span class="sr">/dt</span><span class="err">&gt;
</span>                        <span class="o">&lt;</span><span class="nx">dd</span> <span class="kd">class</span><span class="o">=</span><span class="dl">"</span><span class="s2">col-sm-10</span><span class="dl">"</span><span class="o">&gt;</span>
                            <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">fullName</span><span class="p">}</span>
                        <span class="o">&lt;</span><span class="sr">/dd</span><span class="err">&gt;
</span>                    <span class="o">&lt;</span><span class="sr">/dl</span><span class="err">&gt;
</span>
                    <span class="o">&lt;</span><span class="nx">dl</span> <span class="kd">class</span><span class="o">=</span><span class="dl">"</span><span class="s2">row</span><span class="dl">"</span><span class="o">&gt;</span>
                        <span class="o">&lt;</span><span class="nx">dt</span> <span class="kd">class</span><span class="o">=</span><span class="dl">"</span><span class="s2">col-sm-2</span><span class="dl">"</span><span class="o">&gt;</span>
                            <span class="nx">User</span> <span class="nx">Name</span><span class="p">:</span>
                        <span class="o">&lt;</span><span class="sr">/dt</span><span class="err">&gt;
</span>                        <span class="o">&lt;</span><span class="nx">dd</span> <span class="kd">class</span><span class="o">=</span><span class="dl">"</span><span class="s2">col-sm-10</span><span class="dl">"</span><span class="o">&gt;</span>
                            <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">userName</span><span class="p">}</span>
                        <span class="o">&lt;</span><span class="sr">/dd</span><span class="err">&gt;
</span>                    <span class="o">&lt;</span><span class="sr">/dl</span><span class="err">&gt;
</span>
                    <span class="o">&lt;</span><span class="nx">dl</span> <span class="kd">class</span><span class="o">=</span><span class="dl">"</span><span class="s2">row</span><span class="dl">"</span><span class="o">&gt;</span>
                        <span class="o">&lt;</span><span class="nx">dt</span> <span class="kd">class</span><span class="o">=</span><span class="dl">"</span><span class="s2">col-sm-2</span><span class="dl">"</span><span class="o">&gt;</span>
                            <span class="nx">Email</span><span class="p">:</span>
                        <span class="o">&lt;</span><span class="sr">/dt</span><span class="err">&gt;
</span>                        <span class="o">&lt;</span><span class="nx">dd</span> <span class="kd">class</span><span class="o">=</span><span class="dl">"</span><span class="s2">col-sm-10</span><span class="dl">"</span><span class="o">&gt;</span>
                            <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">email</span><span class="p">}</span>
                        <span class="o">&lt;</span><span class="sr">/dd</span><span class="err">&gt;
</span>                    <span class="o">&lt;</span><span class="sr">/dl</span><span class="err">&gt;
</span>
                    <span class="o">&lt;</span><span class="nx">form</span> <span class="nx">onSubmit</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">onConfirmation</span><span class="p">}</span><span class="o">&gt;</span>
                        <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">hidden</span><span class="dl">"</span> <span class="nx">asp</span><span class="o">-</span><span class="k">for</span><span class="o">=</span><span class="dl">"</span><span class="s2">Id</span><span class="dl">"</span> <span class="o">/&gt;</span>
                        <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">submit</span><span class="dl">"</span> <span class="kd">class</span><span class="o">=</span><span class="dl">"</span><span class="s2">btn btn-danger</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Delete</span><span class="o">&lt;</span><span class="sr">/button&gt; </span><span class="err">|
</span>                        <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">onCancel</span><span class="p">}</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">btn btn-primary</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Back</span> <span class="nx">to</span> <span class="nx">List</span><span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>                    <span class="o">&lt;</span><span class="sr">/form</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>        <span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p><strong>UpdateUser.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Component</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">getData</span><span class="p">,</span> <span class="nx">putData</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../services/AccessAPI</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">class</span> <span class="nx">UpdateUser</span> <span class="kd">extends</span> <span class="nx">Component</span><span class="p">{</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">){</span>
        <span class="k">super</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
            <span class="na">id</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span>
            <span class="na">fullName</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span>
            <span class="na">userName</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span>
            <span class="na">email</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span>
            <span class="na">roles</span><span class="p">:</span> <span class="p">[]</span>
        <span class="p">};</span>

        <span class="k">this</span><span class="p">.</span><span class="nx">onChange</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">onChange</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">onSubmit</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">onSubmit</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>

    <span class="p">}</span>

    <span class="nx">onChange</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span> <span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">name</span><span class="p">]:</span> <span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span> <span class="p">});</span>
    <span class="p">}</span>

    <span class="nx">onKeyDown</span> <span class="o">=</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">key</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">Enter</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">update</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>


    <span class="nx">componentDidMount</span><span class="p">(){</span>
        <span class="kd">const</span> <span class="p">{</span><span class="nx">id</span><span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">match</span><span class="p">.</span><span class="nx">params</span><span class="p">;</span>
        <span class="nx">getData</span><span class="p">(</span><span class="dl">'</span><span class="s1">api/User/GetUserDetails/</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">id</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span>
            <span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="c1">//let responseJson = result;</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">user for edit: </span><span class="dl">"</span><span class="p">);</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
                <span class="k">if</span> <span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span>
                        <span class="c1">//users: result,</span>
                        <span class="na">id</span><span class="p">:</span> <span class="nx">result</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span>
                        <span class="na">fullName</span><span class="p">:</span> <span class="nx">result</span><span class="p">.</span><span class="nx">fullName</span><span class="p">,</span>
                        <span class="na">userName</span><span class="p">:</span> <span class="nx">result</span><span class="p">.</span><span class="nx">userName</span><span class="p">,</span>
                        <span class="na">email</span><span class="p">:</span> <span class="nx">result</span><span class="p">.</span><span class="nx">email</span><span class="p">,</span>
                        <span class="na">loading</span><span class="p">:</span> <span class="kc">false</span>
                    <span class="p">});</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">);</span>
    <span class="p">}</span>

    <span class="nx">onSubmit</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span>
        <span class="nx">e</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
        <span class="kd">const</span> <span class="p">{</span><span class="nx">history</span><span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">;</span>
        <span class="kd">const</span> <span class="p">{</span><span class="nx">id</span><span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">match</span><span class="p">.</span><span class="nx">params</span><span class="p">;</span>

        <span class="kd">let</span> <span class="nx">userProfile</span> <span class="o">=</span> <span class="p">{</span>
            <span class="na">id</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span>
            <span class="na">fullName</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">fullName</span><span class="p">,</span>
            <span class="na">email</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">email</span><span class="p">,</span>
            <span class="na">roles</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">roles</span>
        <span class="p">}</span>

        <span class="nx">putData</span><span class="p">(</span><span class="dl">'</span><span class="s1">api/User/EditUserProfile/</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">userProfile</span><span class="p">).</span><span class="nx">then</span><span class="p">((</span><span class="nx">result</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="kd">let</span> <span class="nx">responseJson</span> <span class="o">=</span> <span class="nx">result</span><span class="p">;</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">update response: </span><span class="dl">"</span><span class="p">);</span>
            
            <span class="k">if</span><span class="p">(</span><span class="nx">responseJson</span><span class="p">){</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">responseJson</span><span class="p">);</span>
                <span class="nx">history</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="dl">'</span><span class="s1">/admin/users</span><span class="dl">'</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="p">);</span>
    <span class="p">}</span>

    <span class="nx">render</span><span class="p">(){</span>
        <span class="k">return</span><span class="p">(</span>
            <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">row</span><span class="dl">"</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">col-md-4</span><span class="dl">"</span><span class="o">&gt;</span>
                    <span class="o">&lt;</span><span class="nx">h3</span><span class="o">&gt;</span><span class="nx">Edit</span> <span class="nx">User</span><span class="o">&lt;</span><span class="sr">/h3</span><span class="err">&gt;
</span>                    <span class="o">&lt;</span><span class="nx">form</span> <span class="nx">onSubmit</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">onSubmit</span><span class="p">}</span><span class="o">&gt;</span>
                        <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-group</span><span class="dl">"</span><span class="o">&gt;</span>
                            <span class="o">&lt;</span><span class="nx">label</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">control-label</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Full</span> <span class="nx">Name</span><span class="p">:</span> <span class="o">&lt;</span><span class="sr">/label</span><span class="err">&gt;
</span>                            <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-control</span><span class="dl">"</span> <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">text</span><span class="dl">"</span> <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">fullName</span><span class="p">}</span> <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">onChange</span><span class="p">}</span> <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">fullName</span><span class="dl">"</span>
                            <span class="nx">onKeyDown</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">onKeyDown</span><span class="p">}</span> <span class="o">&gt;&lt;</span><span class="sr">/input</span><span class="err">&gt;
</span>                        <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>
                        <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-group</span><span class="dl">"</span><span class="o">&gt;</span>
                            <span class="o">&lt;</span><span class="nx">label</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">control-label</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">User</span> <span class="nx">Name</span><span class="p">:</span> <span class="o">&lt;</span><span class="sr">/label</span><span class="err">&gt;
</span>                            <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-control</span><span class="dl">"</span> <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">text</span><span class="dl">"</span> <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">userName</span><span class="p">}</span> <span class="nx">disabled</span> <span class="o">=</span> <span class="p">{</span><span class="kc">true</span><span class="p">}</span> <span class="nx">readOnly</span> <span class="o">=</span> <span class="p">{</span><span class="kc">true</span><span class="p">}</span><span class="o">&gt;&lt;</span><span class="sr">/input</span><span class="err">&gt;
</span>                        <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>
                        <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-group</span><span class="dl">"</span><span class="o">&gt;</span>
                            <span class="o">&lt;</span><span class="nx">label</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">control-label</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Email</span><span class="p">:</span> <span class="o">&lt;</span><span class="sr">/label</span><span class="err">&gt;
</span>                            <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-control</span><span class="dl">"</span> <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">text</span><span class="dl">"</span> <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">email</span><span class="p">}</span> <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">onChange</span><span class="p">}</span> <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">email</span><span class="dl">"</span>
                            <span class="nx">onKeyDown</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">onKeyDown</span><span class="p">}</span><span class="o">&gt;&lt;</span><span class="sr">/input</span><span class="err">&gt;
</span>                        <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>
                        <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-group</span><span class="dl">"</span><span class="o">&gt;</span>
                            <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">onUpdateCancel</span><span class="p">}</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">btn btn-default</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Cancel</span><span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>                            <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">submit</span><span class="dl">"</span> <span class="nx">value</span><span class="o">=</span><span class="dl">"</span><span class="s2">Edit</span><span class="dl">"</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">btn btn-primary</span><span class="dl">"</span><span class="o">&gt;&lt;</span><span class="sr">/input</span><span class="err">&gt;
</span>                        <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>
                    <span class="o">&lt;</span><span class="sr">/form</span><span class="err">&gt;
</span>
                <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>        <span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>
<p><strong>Users.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Component</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">getData</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../services/AccessAPI</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">class</span> <span class="nx">Users</span> <span class="kd">extends</span> <span class="nx">Component</span> <span class="p">{</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">super</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
            <span class="na">users</span><span class="p">:</span> <span class="p">[],</span>
            <span class="na">loading</span><span class="p">:</span> <span class="kc">true</span>
        <span class="p">};</span>

        <span class="k">this</span><span class="p">.</span><span class="nx">onUserCreate</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">onUserCreate</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">onUserDelete</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">onUserDelete</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
    <span class="p">}</span>


    <span class="nx">componentDidMount</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">getAllUsersData</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="nx">onUserCreate</span><span class="p">(){</span>
        <span class="kd">const</span><span class="p">{</span><span class="nx">history</span><span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">;</span>
        <span class="nx">history</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="dl">'</span><span class="s1">/admin/user/create</span><span class="dl">'</span><span class="p">);</span>
    <span class="p">}</span>


    <span class="nx">onUserEdit</span><span class="p">(</span><span class="nx">id</span><span class="p">){</span>
        <span class="kd">const</span> <span class="p">{</span> <span class="nx">history</span> <span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">;</span>
        <span class="nx">history</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="dl">'</span><span class="s1">/admin/user/edit/</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">id</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nx">onUserDelete</span><span class="p">(</span><span class="nx">id</span><span class="p">){</span>
        <span class="kd">const</span> <span class="p">{</span><span class="nx">history</span><span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">;</span>
        <span class="nx">history</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="dl">'</span><span class="s1">/admin/user/delete/</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">id</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nx">getAllUsersData</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">getData</span><span class="p">(</span><span class="dl">'</span><span class="s1">api/User/GetAll</span><span class="dl">'</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span>
            <span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span>
                        <span class="na">users</span><span class="p">:</span> <span class="nx">result</span><span class="p">,</span>
                        <span class="na">loading</span><span class="p">:</span> <span class="kc">false</span>
                    <span class="p">});</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">);</span>

    <span class="p">}</span>

    <span class="nx">renderAllUsersTable</span><span class="p">(</span><span class="nx">users</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">(</span>
            <span class="o">&lt;</span><span class="nx">table</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">table table-striped</span><span class="dl">"</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">thead</span><span class="o">&gt;</span>
                    <span class="o">&lt;</span><span class="nx">tr</span><span class="o">&gt;</span>
                        <span class="o">&lt;</span><span class="nx">th</span><span class="o">&gt;</span><span class="nx">Full</span> <span class="nx">Name</span><span class="o">&lt;</span><span class="sr">/th</span><span class="err">&gt;
</span>                        <span class="o">&lt;</span><span class="nx">th</span><span class="o">&gt;</span><span class="nx">User</span> <span class="nx">Name</span><span class="o">&lt;</span><span class="sr">/th</span><span class="err">&gt;
</span>                        <span class="o">&lt;</span><span class="nx">th</span><span class="o">&gt;</span><span class="nx">Email</span><span class="o">&lt;</span><span class="sr">/th</span><span class="err">&gt;
</span>                        <span class="o">&lt;</span><span class="nx">th</span><span class="o">&gt;</span><span class="nx">Actions</span><span class="o">&lt;</span><span class="sr">/th</span><span class="err">&gt;
</span>                    <span class="o">&lt;</span><span class="sr">/tr</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="sr">/thead</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">tbody</span><span class="o">&gt;</span>
                    <span class="p">{</span>
                        <span class="nx">users</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">user</span> <span class="o">=&gt;</span> <span class="p">(</span>
                            <span class="o">&lt;</span><span class="nx">tr</span> <span class="nx">key</span><span class="o">=</span><span class="p">{</span><span class="nx">user</span><span class="p">.</span><span class="nx">id</span><span class="p">}</span><span class="o">&gt;</span>
                                <span class="o">&lt;</span><span class="nx">td</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">user</span><span class="p">.</span><span class="nx">fullName</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/td</span><span class="err">&gt;
</span>                                <span class="o">&lt;</span><span class="nx">td</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">user</span><span class="p">.</span><span class="nx">userName</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/td</span><span class="err">&gt;
</span>                                <span class="o">&lt;</span><span class="nx">td</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">user</span><span class="p">.</span><span class="nx">email</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/td</span><span class="err">&gt;
</span>                                <span class="o">&lt;</span><span class="nx">td</span><span class="o">&gt;&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">onUserEdit</span><span class="p">(</span><span class="nx">user</span><span class="p">.</span><span class="nx">id</span><span class="p">)}</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">btn btn-success</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Edit</span><span class="o">&lt;</span><span class="sr">/button&gt; |</span><span class="err">|
</span>                                    <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">onUserDelete</span><span class="p">(</span><span class="nx">user</span><span class="p">.</span><span class="nx">id</span><span class="p">)}</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">btn btn-danger</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Delete</span><span class="o">&lt;</span><span class="sr">/button&gt;&lt;/</span><span class="nx">td</span><span class="o">&gt;</span>
                            <span class="o">&lt;</span><span class="sr">/tr</span><span class="err">&gt;
</span>                        <span class="p">))</span>
                    <span class="p">}</span>
                <span class="o">&lt;</span><span class="sr">/tbody</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="sr">/table</span><span class="err">&gt;
</span>        <span class="p">);</span>
    <span class="p">}</span>

    <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
        <span class="kd">let</span> <span class="nx">content</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">loading</span> <span class="p">?</span> <span class="p">(</span>
            <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">em</span><span class="o">&gt;</span><span class="nx">Loading</span><span class="p">...</span><span class="o">&lt;</span><span class="sr">/em</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="sr">/p</span><span class="err">&gt;
</span>        <span class="p">)</span> <span class="p">:</span> <span class="p">(</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">renderAllUsersTable</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">users</span><span class="p">)</span>
        <span class="p">)</span>

        <span class="k">return</span> <span class="p">(</span>
            <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">h3</span><span class="o">&gt;</span><span class="nx">List</span> <span class="k">of</span> <span class="nx">Users</span><span class="o">&lt;</span><span class="sr">/h3</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">onUserCreate</span><span class="p">()}</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">btn btn-primary</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Create</span> <span class="k">new</span> <span class="nx">user</span><span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>                <span class="p">{</span><span class="nx">content</span><span class="p">}</span>
            <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>        <span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>
<ul>
  <li>Create UsersRole components in src-&gt;components-&gt;UsersRoles folder</li>
</ul>

<p><strong>RoleList.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">RoleList</span> <span class="o">=</span> <span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>

    <span class="c1">//debugger;</span>
    <span class="kd">const</span> <span class="nx">roles</span> <span class="o">=</span> <span class="nx">props</span><span class="p">.</span><span class="nx">roles</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">userRoles</span> <span class="o">=</span> <span class="nx">props</span><span class="p">.</span><span class="nx">userRoles</span><span class="p">;</span>


    <span class="kd">function</span> <span class="nx">isExists</span><span class="p">(</span><span class="nx">roleName</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">userRoles</span><span class="p">.</span><span class="nx">length</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
        <span class="k">return</span> <span class="nx">userRoles</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="nx">roleName</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="kd">const</span> <span class="nx">roleList</span> <span class="o">=</span> <span class="p">(</span>
        <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
            <span class="o">&lt;</span><span class="nx">ul</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">checkBoxList</span><span class="dl">"</span><span class="o">&gt;</span>
                <span class="p">{</span>
                    <span class="nx">roles</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">role</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span>

                        <span class="o">&lt;</span><span class="nx">li</span> <span class="nx">key</span><span class="o">=</span><span class="p">{</span><span class="nx">index</span><span class="p">}</span><span class="o">&gt;</span>
                            <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">checkbox</span><span class="dl">"</span> <span class="nx">checked</span><span class="o">=</span><span class="p">{</span><span class="nx">isExists</span><span class="p">(</span><span class="nx">role</span><span class="p">.</span><span class="nx">roleName</span><span class="p">)}</span> <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nx">role</span><span class="p">.</span><span class="nx">roleName</span><span class="p">}</span> <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="nx">props</span><span class="p">.</span><span class="nx">onChange</span><span class="p">}</span> <span class="o">&gt;&lt;</span><span class="sr">/input</span><span class="err">&gt;
</span>                            <span class="o">&lt;</span><span class="nx">span</span> <span class="kd">class</span><span class="o">=</span><span class="dl">"</span><span class="s2">input-group-addon</span><span class="dl">"</span><span class="o">&gt;&amp;</span><span class="nx">nbsp</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/span</span><span class="err">&gt;
</span>                            <span class="o">&lt;</span><span class="nx">label</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">role</span><span class="p">.</span><span class="nx">roleName</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/label</span><span class="err">&gt;
</span>                        <span class="o">&lt;</span><span class="sr">/li</span><span class="err">&gt;
</span>                    <span class="p">)</span>
                    <span class="p">)</span>
                <span class="p">}</span>
            <span class="o">&lt;</span><span class="sr">/ul</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>    <span class="p">);</span>

    <span class="k">return</span> <span class="nx">roleList</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">RoleList</span><span class="p">;</span>
</code></pre></div></div>

<p><strong>UsersRoles.js</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Component</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">getData</span><span class="p">,</span> <span class="nx">putData</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../services/AccessAPI</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">RoleList</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./RoleList</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">class</span> <span class="nx">UsersRole</span> <span class="kd">extends</span> <span class="nx">Component</span> <span class="p">{</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">super</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
            <span class="na">userId</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span>
            <span class="na">fullName</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span>
            <span class="na">userName</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span>
            <span class="na">userRoles</span><span class="p">:</span> <span class="p">[],</span>
            <span class="na">roles</span><span class="p">:</span> <span class="p">[],</span>
            <span class="na">msg</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span>
            <span class="na">loading</span><span class="p">:</span> <span class="kc">true</span>
        <span class="p">};</span>

        <span class="k">this</span><span class="p">.</span><span class="nx">onSearch</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">onSearch</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">onChange</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">onChange</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">onSubmit</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">onSubmit</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">handleCheckboxChange</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">handleCheckboxChange</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nx">onSubmit</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">e</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
        <span class="kd">let</span> <span class="nx">userRoles</span> <span class="o">=</span> <span class="p">{</span>
            <span class="na">userName</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">userName</span><span class="p">,</span>
            <span class="na">roles</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">userRoles</span>
        <span class="p">}</span>
        <span class="nx">putData</span><span class="p">(</span><span class="dl">'</span><span class="s1">api/User/EditUserRoles</span><span class="dl">'</span><span class="p">,</span> <span class="nx">userRoles</span><span class="p">).</span><span class="nx">then</span><span class="p">((</span><span class="nx">result</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="kd">let</span> <span class="nx">responseJson</span> <span class="o">=</span> <span class="nx">result</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">responseJson</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span> <span class="na">msg</span><span class="p">:</span> <span class="dl">"</span><span class="s2">User's roles updated successfully!</span><span class="dl">"</span> <span class="p">});</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="p">);</span>
    <span class="p">}</span>

    <span class="nx">handleCheckboxChange</span> <span class="o">=</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>

        <span class="k">if</span> <span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">checked</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">userRoles</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">))</span> <span class="p">{</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">(</span><span class="nx">prevState</span> <span class="o">=&gt;</span> <span class="p">({</span> <span class="na">userRoles</span><span class="p">:</span> <span class="p">[...</span><span class="nx">prevState</span><span class="p">.</span><span class="nx">userRoles</span><span class="p">,</span> <span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">]</span> <span class="p">}));</span>
            <span class="p">}</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">(</span><span class="nx">prevState</span> <span class="o">=&gt;</span> <span class="p">({</span> <span class="na">userRoles</span><span class="p">:</span> <span class="nx">prevState</span><span class="p">.</span><span class="nx">userRoles</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">roleName</span> <span class="o">=&gt;</span> <span class="nx">roleName</span> <span class="o">!==</span> <span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span> <span class="p">}));</span>
        <span class="p">}</span>

    <span class="p">}</span>

    <span class="nx">onChange</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span> <span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">name</span><span class="p">]:</span> <span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span> <span class="p">});</span>
    <span class="p">}</span>


    <span class="nx">componentDidMount</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">getAllRoles</span><span class="p">();</span>
    <span class="p">}</span>


    <span class="nx">onSearch</span><span class="p">(</span><span class="nx">userName</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">getData</span><span class="p">(</span><span class="dl">'</span><span class="s1">api/User/GetUserDetailsByUserName/</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">userName</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span>
            <span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span>
                        <span class="na">userRoles</span><span class="p">:</span> <span class="nx">result</span><span class="p">.</span><span class="nx">roles</span><span class="p">,</span>
                        <span class="na">fullName</span><span class="p">:</span> <span class="nx">result</span><span class="p">.</span><span class="nx">fullName</span><span class="p">,</span>
                        <span class="na">userName</span><span class="p">:</span> <span class="nx">result</span><span class="p">.</span><span class="nx">userName</span><span class="p">,</span>
                        <span class="na">loading</span><span class="p">:</span> <span class="kc">false</span>
                    <span class="p">});</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">);</span>
    <span class="p">}</span>

    <span class="nx">getAllRoles</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">//debugger;</span>
        <span class="nx">getData</span><span class="p">(</span><span class="dl">'</span><span class="s1">api/Role/GetAll</span><span class="dl">'</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span>
            <span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span>
                        <span class="na">roles</span><span class="p">:</span> <span class="nx">result</span><span class="p">,</span>
                        <span class="na">loading</span><span class="p">:</span> <span class="kc">false</span>
                    <span class="p">});</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">);</span>
    <span class="p">}</span>


    <span class="nx">renderRoleList</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">(</span>
            <span class="o">&lt;</span><span class="nx">RoleList</span> <span class="nx">roles</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">roles</span><span class="p">}</span> <span class="nx">userRoles</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">userRoles</span><span class="p">}</span> <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleCheckboxChange</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>        <span class="p">);</span>
    <span class="p">};</span>


    <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>

        <span class="kd">let</span> <span class="nx">renderCheckbox</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">renderRoleList</span><span class="p">();</span>


        <span class="k">return</span> <span class="p">(</span>
            <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">h3</span><span class="o">&gt;</span><span class="nx">Users</span> <span class="nx">Role</span><span class="o">&lt;</span><span class="sr">/h3</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">input-group</span><span class="dl">"</span><span class="o">&gt;</span>
                    <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">col-md-3</span><span class="dl">"</span> <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">text</span><span class="dl">"</span> <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">userName</span><span class="dl">"</span> <span class="nx">placeholder</span><span class="o">=</span><span class="dl">"</span><span class="s2">Enter user name</span><span class="dl">"</span> <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">userName</span><span class="p">}</span> <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">onChange</span><span class="p">}</span><span class="o">&gt;&lt;</span><span class="sr">/input</span><span class="err">&gt;
</span>                    <span class="o">&lt;</span><span class="nx">span</span> <span class="kd">class</span><span class="o">=</span><span class="dl">"</span><span class="s2">input-group-addon</span><span class="dl">"</span><span class="o">&gt;&amp;</span><span class="nx">nbsp</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/span</span><span class="err">&gt;
</span>                    <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">btn btn-primary</span><span class="dl">"</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">onSearch</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">userName</span><span class="p">)}</span><span class="o">&gt;</span>
                        <span class="nx">Search</span>
                    <span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">label</span><span class="o">&gt;</span><span class="nx">Full</span> <span class="nx">Name</span><span class="p">:</span> <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">fullName</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/label</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">label</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">col-md-4</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">User</span> <span class="nx">Name</span><span class="p">:</span> <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">userName</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/label</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">hr</span><span class="o">&gt;&lt;</span><span class="sr">/hr</span><span class="err">&gt;
</span>


                <span class="o">&lt;</span><span class="nx">form</span> <span class="nx">onSubmit</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">onSubmit</span><span class="p">}</span><span class="o">&gt;</span>
                    <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-group</span><span class="dl">"</span><span class="o">&gt;</span>
                        <span class="p">{</span><span class="nx">renderCheckbox</span><span class="p">}</span>
                    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>                    <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-group</span><span class="dl">"</span><span class="o">&gt;</span>
                        <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">submit</span><span class="dl">"</span> <span class="nx">value</span><span class="o">=</span><span class="dl">"</span><span class="s2">Save</span><span class="dl">"</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">btn btn-primary</span><span class="dl">"</span><span class="o">&gt;&lt;</span><span class="sr">/input</span><span class="err">&gt;
</span>                    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="sr">/form</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">label</span><span class="o">&gt;</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">msg</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/label</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>        <span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 5: Add Route in App.js</strong></p>
<ul>
  <li>Modify App.js as follows</li>
  <li>Here I have define route for employees, create, edit, delete</li>
</ul>

<p><strong>App.js</strong></p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">Component</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Route</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-router</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Layout</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./components/Layout</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Home</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./components/Home</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">FetchData</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./components/FetchData</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Counter</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./components/Counter</span><span class="dl">'</span><span class="p">;</span>

<span class="k">import</span> <span class="dl">'</span><span class="s1">./custom.css</span><span class="dl">'</span>


<span class="k">import</span> <span class="p">{</span> <span class="nx">Customers</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./components/Customer/Customers</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Create</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./components/Customer/Create</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Edit</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./components/Customer/Edit</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Delete</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./components/Customer/Delete</span><span class="dl">'</span><span class="p">;</span>

<span class="k">import</span> <span class="nx">Login</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./components/Auth/Login</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">Logout</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./components/Auth/Logout</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">Registration</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./components/Auth/Registration</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">Users</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./components/User/Users</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">UpdateUser</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./components/User/UpdateUser</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">Roles</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./components/Role/Roles</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">CreateRole</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./components/Role/CreateRole</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">EditRole</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./components/Role/EditRole</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">DeleteRole</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./components/Role/DeleteRole</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">CreateUser</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./components/User/CreateUser</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">DeleteUser</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./components/User/DeleteUser</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">UsersRole</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./components/UsersRoles/UsersRoles</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">SessionManager</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./components/Auth/SessionManager</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">class</span> <span class="nx">App</span> <span class="kd">extends</span> <span class="nx">Component</span> <span class="p">{</span>
  <span class="kd">static</span> <span class="nx">displayName</span> <span class="o">=</span> <span class="nx">App</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>


  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">(</span>
      <span class="c1">//if(SessionManager.getToken())</span>
      <span class="nx">SessionManager</span><span class="p">.</span><span class="nx">getToken</span><span class="p">()</span> <span class="p">?</span> <span class="p">(</span>
        <span class="p">&lt;</span><span class="nc">Layout</span><span class="p">&gt;</span>
          <span class="p">&lt;</span><span class="nc">Route</span> <span class="na">exact</span> <span class="na">path</span><span class="p">=</span><span class="s">'/home'</span> <span class="na">component</span><span class="p">=</span><span class="si">{</span><span class="nx">Home</span><span class="si">}</span> <span class="p">/&gt;</span>

          <span class="p">&lt;</span><span class="nc">Route</span> <span class="na">path</span><span class="p">=</span><span class="s">'/logout'</span> <span class="na">component</span><span class="p">=</span><span class="si">{</span><span class="nx">Logout</span><span class="si">}</span> <span class="p">/&gt;</span>
          <span class="p">&lt;</span><span class="nc">Route</span> <span class="na">path</span><span class="p">=</span><span class="s">'/registration'</span> <span class="na">component</span><span class="p">=</span><span class="si">{</span><span class="nx">Registration</span><span class="si">}</span> <span class="p">/&gt;</span>


          <span class="p">&lt;</span><span class="nc">Route</span> <span class="na">path</span><span class="p">=</span><span class="s">'/banking/customers'</span> <span class="na">component</span><span class="p">=</span><span class="si">{</span><span class="nx">Customers</span><span class="si">}</span> <span class="p">/&gt;</span>
          <span class="p">&lt;</span><span class="nc">Route</span> <span class="na">path</span><span class="p">=</span><span class="s">'/banking/customer/create'</span> <span class="na">component</span><span class="p">=</span><span class="si">{</span><span class="nx">Create</span><span class="si">}</span> <span class="p">/&gt;</span>
          <span class="p">&lt;</span><span class="nc">Route</span> <span class="na">path</span><span class="p">=</span><span class="s">'/banking/customer/edit/:id'</span> <span class="na">component</span><span class="p">=</span><span class="si">{</span><span class="nx">Edit</span><span class="si">}</span><span class="p">&gt;&lt;/</span><span class="nc">Route</span><span class="p">&gt;</span>
          <span class="p">&lt;</span><span class="nc">Route</span> <span class="na">path</span><span class="p">=</span><span class="s">'/banking/customer/delete/:id'</span> <span class="na">component</span><span class="p">=</span><span class="si">{</span><span class="nx">Delete</span><span class="si">}</span><span class="p">&gt;&lt;/</span><span class="nc">Route</span><span class="p">&gt;</span>



          <span class="p">&lt;</span><span class="nc">Route</span> <span class="na">path</span><span class="p">=</span><span class="s">'/counter'</span> <span class="na">component</span><span class="p">=</span><span class="si">{</span><span class="nx">Counter</span><span class="si">}</span> <span class="p">/&gt;</span>
          <span class="p">&lt;</span><span class="nc">Route</span> <span class="na">path</span><span class="p">=</span><span class="s">'/fetch-data'</span> <span class="na">component</span><span class="p">=</span><span class="si">{</span><span class="nx">FetchData</span><span class="si">}</span> <span class="p">/&gt;</span>

          <span class="p">&lt;</span><span class="nc">Route</span> <span class="na">path</span><span class="p">=</span><span class="s">'/admin/users'</span> <span class="na">component</span><span class="p">=</span><span class="si">{</span><span class="nx">Users</span><span class="si">}</span><span class="p">&gt;&lt;/</span><span class="nc">Route</span><span class="p">&gt;</span>
          <span class="p">&lt;</span><span class="nc">Route</span> <span class="na">path</span><span class="p">=</span><span class="s">'/admin/user/edit/:id'</span> <span class="na">component</span><span class="p">=</span><span class="si">{</span><span class="nx">UpdateUser</span><span class="si">}</span><span class="p">&gt;&lt;/</span><span class="nc">Route</span><span class="p">&gt;</span>
          <span class="p">&lt;</span><span class="nc">Route</span> <span class="na">path</span><span class="p">=</span><span class="s">'/admin/user/delete/:id'</span> <span class="na">component</span><span class="p">=</span><span class="si">{</span><span class="nx">DeleteUser</span><span class="si">}</span><span class="p">&gt;&lt;/</span><span class="nc">Route</span><span class="p">&gt;</span>

          <span class="p">&lt;</span><span class="nc">Route</span> <span class="na">path</span><span class="p">=</span><span class="s">'/admin/roles'</span> <span class="na">component</span><span class="p">=</span><span class="si">{</span><span class="nx">Roles</span><span class="si">}</span><span class="p">&gt;&lt;/</span><span class="nc">Route</span><span class="p">&gt;</span>
          <span class="p">&lt;</span><span class="nc">Route</span> <span class="na">path</span><span class="p">=</span><span class="s">'/admin/role/create'</span> <span class="na">component</span><span class="p">=</span><span class="si">{</span><span class="nx">CreateRole</span><span class="si">}</span><span class="p">&gt;&lt;/</span><span class="nc">Route</span><span class="p">&gt;</span>
          <span class="p">&lt;</span><span class="nc">Route</span> <span class="na">path</span><span class="p">=</span><span class="s">'/admin/role/edit/:id'</span> <span class="na">component</span><span class="p">=</span><span class="si">{</span><span class="nx">EditRole</span><span class="si">}</span><span class="p">&gt;&lt;/</span><span class="nc">Route</span><span class="p">&gt;</span>
          <span class="p">&lt;</span><span class="nc">Route</span> <span class="na">path</span><span class="p">=</span><span class="s">'/admin/role/delete/:id'</span> <span class="na">component</span><span class="p">=</span><span class="si">{</span><span class="nx">DeleteRole</span><span class="si">}</span><span class="p">&gt;&lt;/</span><span class="nc">Route</span><span class="p">&gt;</span>

          <span class="p">&lt;</span><span class="nc">Route</span> <span class="na">path</span><span class="p">=</span><span class="s">'/admin/usersroles'</span> <span class="na">component</span><span class="p">=</span><span class="si">{</span><span class="nx">UsersRole</span><span class="si">}</span><span class="p">&gt;&lt;/</span><span class="nc">Route</span><span class="p">&gt;</span>
          <span class="p">&lt;</span><span class="nc">Route</span> <span class="na">path</span><span class="p">=</span><span class="s">'/admin/user/create'</span> <span class="na">component</span><span class="p">=</span><span class="si">{</span><span class="nx">CreateUser</span><span class="si">}</span><span class="p">&gt;&lt;/</span><span class="nc">Route</span><span class="p">&gt;</span>

        <span class="p">&lt;/</span><span class="nc">Layout</span><span class="p">&gt;</span>

      <span class="p">)</span> <span class="p">:</span> <span class="p">(</span>

        <span class="p">&lt;&gt;</span>
          <span class="p">&lt;</span><span class="nc">Layout</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">Route</span> <span class="na">path</span><span class="p">=</span><span class="si">{</span><span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">,</span> <span class="dl">"</span><span class="s2">/login</span><span class="dl">"</span><span class="si">}</span> <span class="na">component</span><span class="p">=</span><span class="si">{</span><span class="nx">Login</span><span class="si">}</span> <span class="p">/&gt;</span>
            <span class="p">&lt;</span><span class="nc">Route</span> <span class="na">path</span><span class="p">=</span><span class="s">'/admin/user/register'</span> <span class="na">component</span><span class="p">=</span><span class="si">{</span><span class="nx">CreateUser</span><span class="si">}</span><span class="p">&gt;&lt;/</span><span class="nc">Route</span><span class="p">&gt;</span>
          <span class="p">&lt;/</span><span class="nc">Layout</span><span class="p">&gt;</span>
        <span class="p">&lt;/&gt;</span>

      <span class="p">)</span>

    <span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>
<p><strong>Step 6: Add required menu</strong></p>
<ul>
  <li>Change NavMenu.js as follows in src-&gt;components</li>
</ul>

<p><strong>NavMenu.js</strong></p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">Component</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span>
    <span class="nx">Collapse</span><span class="p">,</span> <span class="nx">Container</span><span class="p">,</span> <span class="nx">Navbar</span><span class="p">,</span> <span class="nx">NavbarBrand</span><span class="p">,</span> <span class="nx">NavbarToggler</span><span class="p">,</span> <span class="nx">NavItem</span><span class="p">,</span> <span class="nx">NavLink</span><span class="p">,</span> <span class="nx">UncontrolledDropdown</span><span class="p">,</span>
    <span class="nx">DropdownToggle</span><span class="p">,</span>
    <span class="nx">DropdownMenu</span><span class="p">,</span>
    <span class="nx">DropdownItem</span><span class="p">,</span>
<span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">reactstrap</span><span class="dl">'</span><span class="p">;</span>

<span class="k">import</span> <span class="p">{</span> <span class="nx">Link</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-router-dom</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="dl">'</span><span class="s1">./NavMenu.css</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">LoginMenu</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./LoginMenu</span><span class="dl">'</span><span class="p">;</span>
<span class="c1">//import { TempDropdown } from './TempDropdown';</span>


<span class="k">export</span> <span class="kd">class</span> <span class="nx">NavMenu</span> <span class="kd">extends</span> <span class="nx">Component</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="nx">displayName</span> <span class="o">=</span> <span class="nx">NavMenu</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>

    <span class="kd">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">super</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span>

        <span class="k">this</span><span class="p">.</span><span class="nx">toggleNavbar</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">toggleNavbar</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
            <span class="na">collapsed</span><span class="p">:</span> <span class="kc">true</span>
        <span class="p">};</span>
    <span class="p">}</span>

    <span class="nx">toggleNavbar</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span>
            <span class="na">collapsed</span><span class="p">:</span> <span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">collapsed</span>
        <span class="p">});</span>
    <span class="p">}</span>

    <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">(</span>
            <span class="p">&lt;</span><span class="nt">header</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nc">Navbar</span> <span class="na">className</span><span class="p">=</span><span class="s">"navbar-expand-sm navbar-toggleable-sm ng-white border-bottom box-shadow mb-3"</span> <span class="na">light</span><span class="p">&gt;</span>
                    <span class="p">&lt;</span><span class="nc">Container</span><span class="p">&gt;</span>
                        <span class="p">&lt;</span><span class="nc">NavbarBrand</span> <span class="na">tag</span><span class="p">=</span><span class="si">{</span><span class="nx">Link</span><span class="si">}</span> <span class="na">to</span><span class="p">=</span><span class="s">"/"</span><span class="p">&gt;</span>Auth<span class="p">&lt;/</span><span class="nc">NavbarBrand</span><span class="p">&gt;</span>
                        <span class="p">&lt;</span><span class="nc">NavbarToggler</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="k">this</span><span class="p">.</span><span class="nx">toggleNavbar</span><span class="si">}</span> <span class="na">className</span><span class="p">=</span><span class="s">"mr-2"</span> <span class="p">/&gt;</span>
                        <span class="p">&lt;</span><span class="nc">Collapse</span> <span class="na">className</span><span class="p">=</span><span class="s">"d-sm-inline-flex flex-sm-row-reverse"</span> <span class="na">isOpen</span><span class="p">=</span><span class="si">{</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">collapsed</span><span class="si">}</span> <span class="na">navbar</span><span class="p">&gt;</span>
                            <span class="p">&lt;</span><span class="nt">ul</span> <span class="na">className</span><span class="p">=</span><span class="s">"navbar-nav flex-grow"</span><span class="p">&gt;</span>
                                <span class="p">&lt;</span><span class="nc">NavItem</span><span class="p">&gt;</span>
                                    <span class="p">&lt;</span><span class="nc">NavLink</span> <span class="na">tag</span><span class="p">=</span><span class="si">{</span><span class="nx">Link</span><span class="si">}</span> <span class="na">className</span><span class="p">=</span><span class="s">"text-dark"</span> <span class="na">to</span><span class="p">=</span><span class="s">"/home"</span><span class="p">&gt;</span>Home<span class="p">&lt;/</span><span class="nc">NavLink</span><span class="p">&gt;</span>
                                <span class="p">&lt;/</span><span class="nc">NavItem</span><span class="p">&gt;</span>

                                <span class="p">&lt;</span><span class="nc">UncontrolledDropdown</span> <span class="na">nav</span> <span class="na">inNavbar</span><span class="p">&gt;</span>
                                    <span class="p">&lt;</span><span class="nc">DropdownToggle</span> <span class="na">nav</span> <span class="na">caret</span><span class="p">&gt;</span>
                                        Banking
                                    <span class="p">&lt;/</span><span class="nc">DropdownToggle</span><span class="p">&gt;</span>
                                    <span class="p">&lt;</span><span class="nc">DropdownMenu</span> <span class="na">right</span><span class="p">&gt;</span>
                                        <span class="p">&lt;</span><span class="nc">DropdownItem</span><span class="p">&gt;</span>
                                            <span class="p">&lt;</span><span class="nc">NavLink</span> <span class="na">tag</span><span class="p">=</span><span class="si">{</span><span class="nx">Link</span><span class="si">}</span> <span class="na">className</span><span class="p">=</span><span class="s">"text-dark"</span> <span class="na">to</span><span class="p">=</span><span class="s">"/banking/customers"</span><span class="p">&gt;</span>Customer<span class="p">&lt;/</span><span class="nc">NavLink</span><span class="p">&gt;</span>
                                        <span class="p">&lt;/</span><span class="nc">DropdownItem</span><span class="p">&gt;</span>
                                    <span class="p">&lt;/</span><span class="nc">DropdownMenu</span><span class="p">&gt;</span>
                                <span class="p">&lt;/</span><span class="nc">UncontrolledDropdown</span><span class="p">&gt;</span>

                                <span class="p">&lt;</span><span class="nc">UncontrolledDropdown</span> <span class="na">nav</span> <span class="na">inNavbar</span><span class="p">&gt;</span>
                                    <span class="p">&lt;</span><span class="nc">DropdownToggle</span> <span class="na">nav</span> <span class="na">caret</span><span class="p">&gt;</span>
                                        Admin
                                    <span class="p">&lt;/</span><span class="nc">DropdownToggle</span><span class="p">&gt;</span>
                                    <span class="p">&lt;</span><span class="nc">DropdownMenu</span> <span class="na">right</span><span class="p">&gt;</span>
                                        <span class="p">&lt;</span><span class="nc">DropdownItem</span><span class="p">&gt;</span>
                                            <span class="p">&lt;</span><span class="nc">NavLink</span> <span class="na">tag</span><span class="p">=</span><span class="si">{</span><span class="nx">Link</span><span class="si">}</span> <span class="na">className</span><span class="p">=</span><span class="s">"text-dark"</span> <span class="na">to</span><span class="p">=</span><span class="s">"/admin/users"</span><span class="p">&gt;</span>Users<span class="p">&lt;/</span><span class="nc">NavLink</span><span class="p">&gt;</span>
                                        <span class="p">&lt;/</span><span class="nc">DropdownItem</span><span class="p">&gt;</span>
                                        <span class="p">&lt;</span><span class="nc">DropdownItem</span> <span class="na">divider</span> <span class="p">/&gt;</span>
                                        <span class="p">&lt;</span><span class="nc">DropdownItem</span><span class="p">&gt;</span>
                                            <span class="p">&lt;</span><span class="nc">NavLink</span> <span class="na">tag</span><span class="p">=</span><span class="si">{</span><span class="nx">Link</span><span class="si">}</span> <span class="na">className</span><span class="p">=</span><span class="s">"text-dark"</span> <span class="na">to</span><span class="p">=</span><span class="s">"/admin/roles"</span><span class="p">&gt;</span>Roles<span class="p">&lt;/</span><span class="nc">NavLink</span><span class="p">&gt;</span>
                                        <span class="p">&lt;/</span><span class="nc">DropdownItem</span><span class="p">&gt;</span>

                                        <span class="p">&lt;</span><span class="nc">DropdownItem</span><span class="p">&gt;</span>
                                            <span class="p">&lt;</span><span class="nc">NavLink</span> <span class="na">tag</span><span class="p">=</span><span class="si">{</span><span class="nx">Link</span><span class="si">}</span> <span class="na">className</span><span class="p">=</span><span class="s">"text-dark"</span> <span class="na">to</span><span class="p">=</span><span class="s">"/admin/usersroles"</span><span class="p">&gt;</span>Users Roles<span class="p">&lt;/</span><span class="nc">NavLink</span><span class="p">&gt;</span>
                                        <span class="p">&lt;/</span><span class="nc">DropdownItem</span><span class="p">&gt;</span>


                                    <span class="p">&lt;/</span><span class="nc">DropdownMenu</span><span class="p">&gt;</span>
                                <span class="p">&lt;/</span><span class="nc">UncontrolledDropdown</span><span class="p">&gt;</span>

                                <span class="si">{</span><span class="cm">/* &lt;NavItem&gt;
                                    &lt;NavLink tag={Link} className='text-dark' to="/login"&gt;Login&lt;/NavLink&gt;
                                &lt;/NavItem&gt; */</span><span class="si">}</span>

                                <span class="p">&lt;</span><span class="nc">NavItem</span><span class="p">&gt;</span>
                                    <span class="p">&lt;</span><span class="nc">NavLink</span> <span class="na">tag</span><span class="p">=</span><span class="si">{</span><span class="nx">Link</span><span class="si">}</span> <span class="na">className</span><span class="p">=</span><span class="s">'text-dark'</span> <span class="na">to</span><span class="p">=</span><span class="s">"/logout"</span><span class="p">&gt;</span>Logout<span class="p">&lt;/</span><span class="nc">NavLink</span><span class="p">&gt;</span>
                                <span class="p">&lt;/</span><span class="nc">NavItem</span><span class="p">&gt;</span>


                            <span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
                        <span class="p">&lt;/</span><span class="nc">Collapse</span><span class="p">&gt;</span>
                    <span class="p">&lt;/</span><span class="nc">Container</span><span class="p">&gt;</span>
                <span class="p">&lt;/</span><span class="nc">Navbar</span><span class="p">&gt;</span>
            <span class="p">&lt;/</span><span class="nt">header</span><span class="p">&gt;</span>
        <span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 7: Run and test the application</strong></p>
<ul>
  <li>Run backend asp.net core application using visual studio</li>
  <li>Go to the root directory of react application and run client application using the following command</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">npm</span> <span class="nf">start</span> <span class="nf">-o</span>
</code></pre></div></div>

<ul>
  <li>Register user first then login and try to get customers list</li>
</ul>

<p><a href="https://github.com/mahedee/code-sample02/tree/main/token-based-auth-core-react">Download Source Code</a></p>]]></content><author><name>Mahedee Hasan</name></author><category term="ASP.NET" /><category term="ASP.NET Core" /><category term="C#" /><category term="React" /><category term="Auth" /><category term="csharp" /><category term="aspnet" /><category term="react" /><category term="auth" /><summary type="html"><![CDATA[In the previous article, I have shown you how to create a back end application for authentication and authorization using JWT and .net core. In this article, I will design UI using react.js. I will also show you how to maintain authentication and authorization from front end.]]></summary></entry><entry><title type="html">Authentication and authorization using JWT in asp.net core application</title><link href="https://mahedee.net//authentication-and-authorization-using-JWT-in-asp.net-core-application/" rel="alternate" type="text/html" title="Authentication and authorization using JWT in asp.net core application" /><published>2022-01-04T00:00:00+00:00</published><updated>2022-01-04T00:00:00+00:00</updated><id>https://mahedee.net//authentication-and-authorization-using-JWT-in-asp.net-core-application</id><content type="html" xml:base="https://mahedee.net//authentication-and-authorization-using-JWT-in-asp.net-core-application/"><![CDATA[<!-- ## Playing with Clean Architecture and CQRS pattern using asp.net core EF and Dapper -->

<p><strong>Introduction</strong></p>

<p>Authentication and authorization is a key part of an application. Sometimes we struggle to implement authentication and authorization in a web api application. In this article I will show you, how to implement authentication and authorization using JWT in an asp.net core web application.</p>

<p><strong>Tools and technologies used</strong></p>
<ul>
  <li>Clean Architecture</li>
  <li>CQRS Pattern</li>
  <li>Visual Studio 2022</li>
  <li>.NET 6.0</li>
  <li>SQLite</li>
  <li>Dapper</li>
  <li>Entity Framework</li>
  <li>AutoMapper</li>
  <li>MediatR</li>
  <li>ASP.NET Core Web API</li>
  <li>C#</li>
</ul>

<p><strong>Implementation</strong></p>

<p><strong>Step 1: Create solution and projects.</strong></p>

<ul>
  <li>Create a solution name Ecommerce</li>
  <li>Add a new web api project, name - Ordering.API in the solution.</li>
  <li>Add 3 class library project, name - Ordering.Application, Odering.Core and Ordering.Infrastructure in the solution.</li>
</ul>

<p><strong>Step 2: Install nuget packages.</strong></p>

<ul>
  <li>Install following nuget packages in Ordering.Infrastructure Project</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Dapper</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.Data.Sqlite.Core</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore.Design</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore.Relational</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore.Tools</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.Extensions.Configuration.Abstractions</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.AspNetCore.Identity</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.AspNetCore.Identity.EntityFrameworkCore</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore.Sqlite</span>

</code></pre></div></div>

<ul>
  <li>Install following nuget packages in Ordering.Application Project</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">AutoMapper</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">MediatR</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">FluentValidation</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">FluentValidation.DependencyInjectionExtensions</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.Extensions.DependencyInjection.Abstractions</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.Extensions.Identity.Core</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.IdentityModel.Tokens</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">System.IdentityModel.Tokens.Jwt</span>
</code></pre></div></div>

<ul>
  <li>Install following nuget packages in Ordering.API Project</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">AutoMapper.Extensions.Microsoft.DependencyInjection</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">MediatR</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">MediatR.Extensions.Microsoft.DependencyInjection</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore.Design</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore.Sqlite</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore.Tools</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.AspNetCore.Authentication.JwtBearer</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">System.Configuration.ConfigurationManager</span>
</code></pre></div></div>

<p><strong>Step 3: Create Entity class  in Ordering.Core project</strong></p>

<ul>
  <li>Create BaseEntity in Ordering.Core/Entities/Base folder</li>
  <li>Create Customer in Ordering.Core/Entities folder</li>
</ul>

<p><strong>BaseEntity.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.ComponentModel.DataAnnotations</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.ComponentModel.DataAnnotations.Schema</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Core.Entities.Base</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">BaseEntity</span>
    <span class="p">{</span>
        <span class="p">[</span><span class="n">Key</span><span class="p">]</span>
        <span class="p">[</span><span class="nf">DatabaseGenerated</span><span class="p">(</span><span class="n">DatabaseGeneratedOption</span><span class="p">.</span><span class="n">Identity</span><span class="p">)]</span>
        <span class="k">public</span> <span class="n">Int64</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="n">DateTime</span> <span class="n">CreatedDate</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="n">DateTime</span> <span class="n">ModifiedDate</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="nf">BaseEntity</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="n">ModifiedDate</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>Customer.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Ordering.Core.Entities.Base</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Core.Entities</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Customer</span> <span class="p">:</span> <span class="n">BaseEntity</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">FirstName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">LastName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Email</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">ContactNumber</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Address</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 4: Create Command and Query Interface in Ordering.Core project</strong></p>

<ul>
  <li>Create ICommandRepository in Ordering.Core/Repositories/Command/Base folder</li>
  <li>Create ICommandCustomerRepository in Ordering.Core/Repositories/Command folder</li>
  <li>Create IQueryRepository in Ordering.Core/Repositories/Query/Base folder</li>
  <li>Create ICustomerQueryRepository in Ordering.Core/Repositories/Query folder</li>
</ul>

<p><strong>ICommandRepository.cs</strong></p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System.Threading.Tasks</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Core.Repositories.Command.Base</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">interface</span> <span class="nc">ICommandRepository</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="k">where</span> <span class="n">T</span> <span class="p">:</span> <span class="k">class</span>
    <span class="err">{</span>
        <span class="nc">Task</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="nf">AddAsync</span><span class="p">(</span><span class="n">T</span> <span class="n">entity</span><span class="p">);</span>
        <span class="n">Task</span> <span class="nf">UpdateAsync</span><span class="p">(</span><span class="n">T</span> <span class="n">entity</span><span class="p">);</span>
        <span class="n">Task</span> <span class="nf">DeleteAsync</span><span class="p">(</span><span class="n">T</span> <span class="n">entity</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>ICustomerCommandRepository.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Ordering.Core.Entities</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Repositories.Command.Base</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Core.Repositories.Command</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">interface</span> <span class="nc">ICustomerCommandRepository</span> <span class="p">:</span> <span class="n">ICommandRepository</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span>
    <span class="p">{</span>

    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p><strong>IQueryRepository.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">Ordering.Core.Repositories.Query.Base</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">interface</span> <span class="nc">IQueryRepository</span> <span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="k">where</span> <span class="n">T</span> <span class="p">:</span> <span class="k">class</span>
    <span class="err">{</span>
        <span class="c1">// Generic repository for all if any</span>
    <span class="err">}</span>
<span class="err">}</span>
</code></pre></div></div>

<p><strong>ICustomerQueryRepository.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Ordering.Core.Entities</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Repositories.Query.Base</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Threading.Tasks</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Core.Repositories.Query</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">interface</span> <span class="nc">ICustomerQueryRepository</span> <span class="p">:</span> <span class="n">IQueryRepository</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="c1">//Custom operation which is not generic</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">IReadOnlyList</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;&gt;</span> <span class="nf">GetAllAsync</span><span class="p">();</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="nf">GetByIdAsync</span><span class="p">(</span><span class="n">Int64</span> <span class="n">id</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="nf">GetCustomerByEmail</span><span class="p">(</span><span class="kt">string</span> <span class="n">email</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 5: Create DbConnector and OrderingContext in Ordering.Infrastructure project</strong></p>

<ul>
  <li>Create DbConnector class in Ordering.Infrastructure/Data folder for SQLite connection for query.</li>
</ul>

<p><strong>DbConnector.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Microsoft.Data.Sqlite</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Extensions.Configuration</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Data</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Infrastructure.Data</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">DbConnector</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IConfiguration</span> <span class="n">_configuration</span><span class="p">;</span>

        <span class="k">protected</span> <span class="nf">DbConnector</span><span class="p">(</span><span class="n">IConfiguration</span> <span class="n">configuration</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_configuration</span> <span class="p">=</span> <span class="n">configuration</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">IDbConnection</span> <span class="nf">CreateConnection</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="kt">string</span> <span class="n">_connectionString</span> <span class="p">=</span> <span class="n">_configuration</span><span class="p">.</span><span class="nf">GetConnectionString</span><span class="p">(</span><span class="s">"DefaultConnection"</span><span class="p">);</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">SqliteConnection</span><span class="p">(</span><span class="n">_connectionString</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>Create OrderingContext class in Ordering.Infrastructure/Data folder for command.</li>
</ul>

<p><strong>OrderingContext.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Entities</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Infrastructure.Data</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">OrderingContext</span> <span class="p">:</span> <span class="n">DbContext</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">OrderingContext</span><span class="p">(</span><span class="n">DbContextOptions</span><span class="p">&lt;</span><span class="n">OrderingContext</span><span class="p">&gt;</span> <span class="n">options</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span> <span class="p">(</span><span class="n">options</span><span class="p">)</span>
        <span class="p">{</span>

        <span class="p">}</span>

        <span class="k">public</span> <span class="n">DbSet</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="n">Customers</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 6: Create Command and Query Repository in Ordering.Infrastructure project</strong></p>

<ul>
  <li>Create CommandRepository in Ordering.Infrastructure/Repositories/Command/Base folder</li>
</ul>

<p><strong>CommandRepository.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Repositories.Command.Base</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Infrastructure.Data</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Threading.Tasks</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Infrastructure.Repository.Command.Base</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CommandRepository</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="p">:</span> <span class="n">ICommandRepository</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="k">where</span> <span class="n">T</span> <span class="p">:</span> <span class="k">class</span>
    <span class="err">{</span>
        <span class="nc">protected</span> <span class="k">readonly</span> <span class="n">OrderingContext</span> <span class="n">_context</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">CommandRepository</span><span class="p">(</span><span class="n">OrderingContext</span> <span class="n">context</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_context</span> <span class="p">=</span> <span class="n">context</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="nf">AddAsync</span><span class="p">(</span><span class="n">T</span> <span class="n">entity</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Set</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;().</span><span class="nf">AddAsync</span><span class="p">(</span><span class="n">entity</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>
            <span class="k">return</span> <span class="n">entity</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span> <span class="nf">UpdateAsync</span><span class="p">(</span><span class="n">T</span> <span class="n">entity</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_context</span><span class="p">.</span><span class="nf">Entry</span><span class="p">(</span><span class="n">entity</span><span class="p">).</span><span class="n">State</span> <span class="p">=</span> <span class="n">EntityState</span><span class="p">.</span><span class="n">Modified</span><span class="p">;</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span> <span class="nf">DeleteAsync</span><span class="p">(</span><span class="n">T</span> <span class="n">entity</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_context</span><span class="p">.</span><span class="n">Set</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;().</span><span class="nf">Remove</span><span class="p">(</span><span class="n">entity</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create CommandCustomerRepository in Ordering.Infrastructure/Repositories/Command folder</li>
</ul>

<p><strong>CustomerCommandRepository.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Ordering.Core.Entities</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Repositories.Command</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Infrastructure.Data</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Infrastructure.Repository.Command.Base</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Infrastructure.Repository.Command</span>
<span class="p">{</span>

    <span class="k">public</span> <span class="k">class</span> <span class="nc">CustomerCommandRepository</span> <span class="p">:</span> <span class="n">CommandRepository</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;,</span> <span class="n">ICustomerCommandRepository</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">CustomerCommandRepository</span><span class="p">(</span><span class="n">OrderingContext</span> <span class="n">context</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">context</span><span class="p">)</span>
        <span class="p">{</span>

        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>Create QueryRepository in Ordering.Infrastructure/Repositories/Query/Base folder</li>
</ul>

<p><strong>QueryRepository.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Microsoft.Extensions.Configuration</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Repositories.Query.Base</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Infrastructure.Data</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Infrastructure.Repository.Query.Base</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">QueryRepository</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="p">:</span> <span class="n">DbConnector</span><span class="p">,</span>  <span class="n">IQueryRepository</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="k">where</span> <span class="n">T</span> <span class="p">:</span> <span class="k">class</span>
    <span class="err">{</span>
        <span class="nc">public</span> <span class="nf">QueryRepository</span><span class="p">(</span><span class="n">IConfiguration</span> <span class="n">configuration</span><span class="p">)</span>
            <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">configuration</span><span class="p">)</span>
        <span class="p">{</span>

        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>Create CustomerQueryRepository in Ordering.Infrastructure/Repositories/Query folder</li>
</ul>

<p><strong>CustomerQueryRepository.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Dapper</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Extensions.Configuration</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Entities</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Repositories.Query</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Infrastructure.Repository.Query.Base</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Data</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Linq</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Threading.Tasks</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Infrastructure.Repository.Query</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CustomerQueryRepository</span> <span class="p">:</span> <span class="n">QueryRepository</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;,</span> <span class="n">ICustomerQueryRepository</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">CustomerQueryRepository</span><span class="p">(</span><span class="n">IConfiguration</span> <span class="n">configuration</span><span class="p">)</span> 
            <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">configuration</span><span class="p">)</span>
        <span class="p">{</span>

        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IReadOnlyList</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;&gt;</span> <span class="nf">GetAllAsync</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="kt">var</span> <span class="n">query</span> <span class="p">=</span> <span class="s">"SELECT * FROM CUSTOMERS"</span><span class="p">;</span>

                <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">connection</span> <span class="p">=</span> <span class="nf">CreateConnection</span><span class="p">())</span>
                <span class="p">{</span>
                    <span class="k">return</span> <span class="p">(</span><span class="k">await</span> <span class="n">connection</span><span class="p">.</span><span class="n">QueryAsync</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;(</span><span class="n">query</span><span class="p">)).</span><span class="nf">ToList</span><span class="p">();</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exp</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">(</span><span class="n">exp</span><span class="p">.</span><span class="n">Message</span><span class="p">,</span> <span class="n">exp</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="nf">GetByIdAsync</span><span class="p">(</span><span class="kt">long</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="kt">var</span> <span class="n">query</span> <span class="p">=</span> <span class="s">"SELECT * FROM CUSTOMERS WHERE Id = @Id"</span><span class="p">;</span>
                <span class="kt">var</span> <span class="n">parameters</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">DynamicParameters</span><span class="p">();</span>
                <span class="n">parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"Id"</span><span class="p">,</span> <span class="n">id</span><span class="p">,</span> <span class="n">DbType</span><span class="p">.</span><span class="n">Int64</span><span class="p">);</span>

                <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">connection</span> <span class="p">=</span> <span class="nf">CreateConnection</span><span class="p">())</span>
                <span class="p">{</span>
                    <span class="k">return</span> <span class="p">(</span><span class="k">await</span> <span class="n">connection</span><span class="p">.</span><span class="n">QueryFirstOrDefaultAsync</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;(</span><span class="n">query</span><span class="p">,</span> <span class="n">parameters</span><span class="p">));</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exp</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">(</span><span class="n">exp</span><span class="p">.</span><span class="n">Message</span><span class="p">,</span> <span class="n">exp</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="nf">GetCustomerByEmail</span><span class="p">(</span><span class="kt">string</span> <span class="n">email</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="kt">var</span> <span class="n">query</span> <span class="p">=</span> <span class="s">"SELECT * FROM CUSTOMERS WHERE Email = @email"</span><span class="p">;</span>
                <span class="kt">var</span> <span class="n">parameters</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">DynamicParameters</span><span class="p">();</span>
                <span class="n">parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"Email"</span><span class="p">,</span> <span class="n">email</span><span class="p">,</span> <span class="n">DbType</span><span class="p">.</span><span class="n">String</span><span class="p">);</span>

                <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">connection</span> <span class="p">=</span> <span class="nf">CreateConnection</span><span class="p">())</span>
                <span class="p">{</span>
                    <span class="k">return</span> <span class="p">(</span><span class="k">await</span> <span class="n">connection</span><span class="p">.</span><span class="n">QueryFirstOrDefaultAsync</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;(</span><span class="n">query</span><span class="p">,</span> <span class="n">parameters</span><span class="p">));</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exp</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">(</span><span class="n">exp</span><span class="p">.</span><span class="n">Message</span><span class="p">,</span> <span class="n">exp</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Add a property in ApplicationUser class in Ordering.Infrastructure/Identity/</li>
</ul>

<p><strong>ApplicationUser.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Identity</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Infrastructure.Identity</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">ApplicationUser</span> <span class="p">:</span> <span class="n">IdentityUser</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">string</span><span class="p">?</span> <span class="n">FullName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Add IdentityService and TokenGenerator class in Ordering.Infrastructure/Services/</li>
</ul>

<p><strong>IdentityService.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Identity</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Common.Exceptions</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Common.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Infrastructure.Identity</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Infrastructure.Services</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">IdentityService</span> <span class="p">:</span> <span class="n">IIdentityService</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">UserManager</span><span class="p">&lt;</span><span class="n">ApplicationUser</span><span class="p">&gt;</span> <span class="n">_userManager</span><span class="p">;</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">SignInManager</span><span class="p">&lt;</span><span class="n">ApplicationUser</span><span class="p">&gt;</span> <span class="n">_signInManager</span><span class="p">;</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">RoleManager</span><span class="p">&lt;</span><span class="n">IdentityRole</span><span class="p">&gt;</span> <span class="n">_roleManager</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">IdentityService</span><span class="p">(</span><span class="n">UserManager</span><span class="p">&lt;</span><span class="n">ApplicationUser</span><span class="p">&gt;</span> <span class="n">userManager</span><span class="p">,</span> <span class="n">SignInManager</span><span class="p">&lt;</span><span class="n">ApplicationUser</span><span class="p">&gt;</span> <span class="n">signInManager</span><span class="p">,</span> <span class="n">RoleManager</span><span class="p">&lt;</span><span class="n">IdentityRole</span><span class="p">&gt;</span> <span class="n">roleManager</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_userManager</span> <span class="p">=</span> <span class="n">userManager</span><span class="p">;</span>
            <span class="n">_signInManager</span> <span class="p">=</span> <span class="n">signInManager</span><span class="p">;</span>
            <span class="n">_roleManager</span> <span class="p">=</span> <span class="n">roleManager</span><span class="p">;</span>
            <span class="n">_roleManager</span> <span class="p">=</span> <span class="n">roleManager</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">bool</span><span class="p">&gt;</span> <span class="nf">AssignUserToRole</span><span class="p">(</span><span class="kt">string</span> <span class="n">userName</span><span class="p">,</span> <span class="n">IList</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">roles</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">user</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_userManager</span><span class="p">.</span><span class="n">Users</span><span class="p">.</span><span class="nf">FirstOrDefaultAsync</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">UserName</span> <span class="p">==</span> <span class="n">userName</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">user</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">NotFoundException</span><span class="p">(</span><span class="s">"User not found"</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_userManager</span><span class="p">.</span><span class="nf">AddToRolesAsync</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="n">roles</span><span class="p">);</span>
            <span class="k">return</span> <span class="n">result</span><span class="p">.</span><span class="n">Succeeded</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">bool</span><span class="p">&gt;</span> <span class="nf">CreateRoleAsync</span><span class="p">(</span><span class="kt">string</span> <span class="n">roleName</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_roleManager</span><span class="p">.</span><span class="nf">CreateAsync</span><span class="p">(</span><span class="k">new</span> <span class="nf">IdentityRole</span><span class="p">(</span><span class="n">roleName</span><span class="p">));</span>
            <span class="k">if</span><span class="p">(!</span><span class="n">result</span><span class="p">.</span><span class="n">Succeeded</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">ValidationException</span><span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="n">Errors</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="n">result</span><span class="p">.</span><span class="n">Succeeded</span><span class="p">;</span>
        <span class="p">}</span>


        <span class="c1">// Return multiple value</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;(</span><span class="kt">bool</span> <span class="n">isSucceed</span><span class="p">,</span> <span class="kt">string</span> <span class="n">userId</span><span class="p">)&gt;</span> <span class="nf">CreateUserAsync</span><span class="p">(</span><span class="kt">string</span> <span class="n">userName</span><span class="p">,</span> <span class="kt">string</span> <span class="n">password</span><span class="p">,</span> <span class="kt">string</span> <span class="n">email</span><span class="p">,</span> <span class="kt">string</span> <span class="n">fullName</span><span class="p">,</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">roles</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">user</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">ApplicationUser</span><span class="p">()</span>
            <span class="p">{</span>
                <span class="n">FullName</span> <span class="p">=</span> <span class="n">fullName</span><span class="p">,</span>
                <span class="n">UserName</span> <span class="p">=</span> <span class="n">userName</span><span class="p">,</span>
                <span class="n">Email</span> <span class="p">=</span> <span class="n">email</span>
            <span class="p">};</span>

            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_userManager</span><span class="p">.</span><span class="nf">CreateAsync</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="n">password</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(!</span><span class="n">result</span><span class="p">.</span><span class="n">Succeeded</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">ValidationException</span><span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="n">Errors</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="kt">var</span> <span class="n">addUserRole</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_userManager</span><span class="p">.</span><span class="nf">AddToRolesAsync</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="n">roles</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(!</span><span class="n">addUserRole</span><span class="p">.</span><span class="n">Succeeded</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">ValidationException</span><span class="p">(</span><span class="n">addUserRole</span><span class="p">.</span><span class="n">Errors</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="n">Succeeded</span><span class="p">,</span> <span class="n">user</span><span class="p">.</span><span class="n">Id</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">bool</span><span class="p">&gt;</span> <span class="nf">DeleteRoleAsync</span><span class="p">(</span><span class="kt">string</span> <span class="n">roleId</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">roleDetails</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_roleManager</span><span class="p">.</span><span class="nf">FindByIdAsync</span><span class="p">(</span><span class="n">roleId</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">roleDetails</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">NotFoundException</span><span class="p">(</span><span class="s">"Role not found"</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">roleDetails</span><span class="p">.</span><span class="n">Name</span> <span class="p">==</span> <span class="s">"Administrator"</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">BadRequestException</span><span class="p">(</span><span class="s">"You can not delete Administrator Role"</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_roleManager</span><span class="p">.</span><span class="nf">DeleteAsync</span><span class="p">(</span><span class="n">roleDetails</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(!</span><span class="n">result</span><span class="p">.</span><span class="n">Succeeded</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">ValidationException</span><span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="n">Errors</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="n">result</span><span class="p">.</span><span class="n">Succeeded</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">bool</span><span class="p">&gt;</span> <span class="nf">DeleteUserAsync</span><span class="p">(</span><span class="kt">string</span> <span class="n">userId</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">user</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_userManager</span><span class="p">.</span><span class="n">Users</span><span class="p">.</span><span class="nf">FirstOrDefaultAsync</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">userId</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">user</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">NotFoundException</span><span class="p">(</span><span class="s">"User not found"</span><span class="p">);</span>
                <span class="c1">//throw new Exception("User not found");</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">user</span><span class="p">.</span><span class="n">UserName</span> <span class="p">==</span> <span class="s">"system"</span> <span class="p">||</span> <span class="n">user</span><span class="p">.</span><span class="n">UserName</span> <span class="p">==</span> <span class="s">"admin"</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">(</span><span class="s">"You can not delete system or admin user"</span><span class="p">);</span>
                <span class="c1">//throw new BadRequestException("You can not delete system or admin user");</span>
            <span class="p">}</span>
            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_userManager</span><span class="p">.</span><span class="nf">DeleteAsync</span><span class="p">(</span><span class="n">user</span><span class="p">);</span>
            <span class="k">return</span> <span class="n">result</span><span class="p">.</span><span class="n">Succeeded</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;(</span><span class="kt">string</span> <span class="n">id</span><span class="p">,</span> <span class="kt">string</span> <span class="n">fullName</span><span class="p">,</span> <span class="kt">string</span> <span class="n">userName</span><span class="p">,</span> <span class="kt">string</span> <span class="n">email</span><span class="p">)&gt;&gt;</span> <span class="nf">GetAllUsersAsync</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">users</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_userManager</span><span class="p">.</span><span class="n">Users</span><span class="p">.</span><span class="nf">Select</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="k">new</span>
            <span class="p">{</span>
                <span class="n">x</span><span class="p">.</span><span class="n">Id</span><span class="p">,</span>
                <span class="n">x</span><span class="p">.</span><span class="n">FullName</span><span class="p">,</span>
                <span class="n">x</span><span class="p">.</span><span class="n">UserName</span><span class="p">,</span>
                <span class="n">x</span><span class="p">.</span><span class="n">Email</span>
            <span class="p">}).</span><span class="nf">ToListAsync</span><span class="p">();</span>

            <span class="k">return</span> <span class="n">users</span><span class="p">.</span><span class="nf">Select</span><span class="p">(</span><span class="n">user</span> <span class="p">=&gt;</span> <span class="p">(</span><span class="n">user</span><span class="p">.</span><span class="n">Id</span><span class="p">,</span> <span class="n">user</span><span class="p">.</span><span class="n">FullName</span><span class="p">,</span> <span class="n">user</span><span class="p">.</span><span class="n">UserName</span><span class="p">,</span> <span class="n">user</span><span class="p">.</span><span class="n">Email</span><span class="p">)).</span><span class="nf">ToList</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;(</span><span class="kt">string</span> <span class="n">id</span><span class="p">,</span> <span class="kt">string</span> <span class="n">userName</span><span class="p">,</span> <span class="kt">string</span> <span class="n">email</span><span class="p">,</span> <span class="n">IList</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">roles</span><span class="p">)&gt;&gt;</span> <span class="nf">GetAllUsersDetailsAsync</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">NotImplementedException</span><span class="p">();</span>

            <span class="c1">//var roles = await _userManager.GetRolesAsync(user);</span>
            <span class="c1">//return (user.Id, user.UserName, user.Email, roles);</span>

            <span class="c1">//var users = _userManager.Users.ToListAsync();</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;(</span><span class="kt">string</span> <span class="n">id</span><span class="p">,</span> <span class="kt">string</span> <span class="n">roleName</span><span class="p">)&gt;&gt;</span> <span class="nf">GetRolesAsync</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">roles</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_roleManager</span><span class="p">.</span><span class="n">Roles</span><span class="p">.</span><span class="nf">Select</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="k">new</span>
            <span class="p">{</span>
                <span class="n">x</span><span class="p">.</span><span class="n">Id</span><span class="p">,</span>
                <span class="n">x</span><span class="p">.</span><span class="n">Name</span>
            <span class="p">}).</span><span class="nf">ToListAsync</span><span class="p">();</span>

            <span class="k">return</span> <span class="n">roles</span><span class="p">.</span><span class="nf">Select</span><span class="p">(</span><span class="n">role</span> <span class="p">=&gt;</span> <span class="p">(</span><span class="n">role</span><span class="p">.</span><span class="n">Id</span><span class="p">,</span> <span class="n">role</span><span class="p">.</span><span class="n">Name</span><span class="p">)).</span><span class="nf">ToList</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;(</span><span class="kt">string</span> <span class="n">userId</span><span class="p">,</span> <span class="kt">string</span> <span class="n">fullName</span><span class="p">,</span> <span class="kt">string</span> <span class="n">UserName</span><span class="p">,</span> <span class="kt">string</span> <span class="n">email</span><span class="p">,</span> <span class="n">IList</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">roles</span><span class="p">)&gt;</span> <span class="nf">GetUserDetailsAsync</span><span class="p">(</span><span class="kt">string</span> <span class="n">userId</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">user</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_userManager</span><span class="p">.</span><span class="n">Users</span><span class="p">.</span><span class="nf">FirstOrDefaultAsync</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">userId</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">user</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">NotFoundException</span><span class="p">(</span><span class="s">"User not found"</span><span class="p">);</span>             
            <span class="p">}</span>
            <span class="kt">var</span> <span class="n">roles</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_userManager</span><span class="p">.</span><span class="nf">GetRolesAsync</span><span class="p">(</span><span class="n">user</span><span class="p">);</span>
            <span class="k">return</span> <span class="p">(</span><span class="n">user</span><span class="p">.</span><span class="n">Id</span><span class="p">,</span> <span class="n">user</span><span class="p">.</span><span class="n">FullName</span><span class="p">,</span> <span class="n">user</span><span class="p">.</span><span class="n">UserName</span><span class="p">,</span> <span class="n">user</span><span class="p">.</span><span class="n">Email</span><span class="p">,</span> <span class="n">roles</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;(</span><span class="kt">string</span> <span class="n">userId</span><span class="p">,</span> <span class="kt">string</span> <span class="n">fullName</span><span class="p">,</span> <span class="kt">string</span> <span class="n">UserName</span><span class="p">,</span> <span class="kt">string</span> <span class="n">email</span><span class="p">,</span> <span class="n">IList</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">roles</span><span class="p">)&gt;</span> <span class="nf">GetUserDetailsByUserNameAsync</span><span class="p">(</span><span class="kt">string</span> <span class="n">userName</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">user</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_userManager</span><span class="p">.</span><span class="n">Users</span><span class="p">.</span><span class="nf">FirstOrDefaultAsync</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">UserName</span> <span class="p">==</span> <span class="n">userName</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">user</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">NotFoundException</span><span class="p">(</span><span class="s">"User not found"</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="kt">var</span> <span class="n">roles</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_userManager</span><span class="p">.</span><span class="nf">GetRolesAsync</span><span class="p">(</span><span class="n">user</span><span class="p">);</span>
            <span class="k">return</span> <span class="p">(</span><span class="n">user</span><span class="p">.</span><span class="n">Id</span><span class="p">,</span> <span class="n">user</span><span class="p">.</span><span class="n">FullName</span><span class="p">,</span> <span class="n">user</span><span class="p">.</span><span class="n">UserName</span><span class="p">,</span> <span class="n">user</span><span class="p">.</span><span class="n">Email</span><span class="p">,</span> <span class="n">roles</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="nf">GetUserIdAsync</span><span class="p">(</span><span class="kt">string</span> <span class="n">userName</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">user</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_userManager</span><span class="p">.</span><span class="n">Users</span><span class="p">.</span><span class="nf">FirstOrDefaultAsync</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">UserName</span> <span class="p">==</span> <span class="n">userName</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">user</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">NotFoundException</span><span class="p">(</span><span class="s">"User not found"</span><span class="p">);</span>
                <span class="c1">//throw new Exception("User not found");</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_userManager</span><span class="p">.</span><span class="nf">GetUserIdAsync</span><span class="p">(</span><span class="n">user</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="nf">GetUserNameAsync</span><span class="p">(</span><span class="kt">string</span> <span class="n">userId</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">user</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_userManager</span><span class="p">.</span><span class="n">Users</span><span class="p">.</span><span class="nf">FirstOrDefaultAsync</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">userId</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">user</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">NotFoundException</span><span class="p">(</span><span class="s">"User not found"</span><span class="p">);</span>
                <span class="c1">//throw new Exception("User not found");</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_userManager</span><span class="p">.</span><span class="nf">GetUserNameAsync</span><span class="p">(</span><span class="n">user</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;&gt;</span> <span class="nf">GetUserRolesAsync</span><span class="p">(</span><span class="kt">string</span> <span class="n">userId</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">user</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_userManager</span><span class="p">.</span><span class="n">Users</span><span class="p">.</span><span class="nf">FirstOrDefaultAsync</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">userId</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">user</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">NotFoundException</span><span class="p">(</span><span class="s">"User not found"</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="kt">var</span> <span class="n">roles</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_userManager</span><span class="p">.</span><span class="nf">GetRolesAsync</span><span class="p">(</span><span class="n">user</span><span class="p">);</span>
            <span class="k">return</span> <span class="n">roles</span><span class="p">.</span><span class="nf">ToList</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">bool</span><span class="p">&gt;</span> <span class="nf">IsInRoleAsync</span><span class="p">(</span><span class="kt">string</span> <span class="n">userId</span><span class="p">,</span> <span class="kt">string</span> <span class="n">role</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">user</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_userManager</span><span class="p">.</span><span class="n">Users</span><span class="p">.</span><span class="nf">FirstOrDefaultAsync</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">userId</span><span class="p">);</span>

            <span class="k">if</span><span class="p">(</span><span class="n">user</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">NotFoundException</span><span class="p">(</span><span class="s">"User not found"</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_userManager</span><span class="p">.</span><span class="nf">IsInRoleAsync</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="n">role</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">bool</span><span class="p">&gt;</span> <span class="nf">IsUniqueUserName</span><span class="p">(</span><span class="kt">string</span> <span class="n">userName</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_userManager</span><span class="p">.</span><span class="nf">FindByNameAsync</span><span class="p">(</span><span class="n">userName</span><span class="p">)</span> <span class="p">==</span> <span class="k">null</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">bool</span><span class="p">&gt;</span> <span class="nf">SigninUserAsync</span><span class="p">(</span><span class="kt">string</span> <span class="n">userName</span><span class="p">,</span> <span class="kt">string</span> <span class="n">password</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_signInManager</span><span class="p">.</span><span class="nf">PasswordSignInAsync</span><span class="p">(</span><span class="n">userName</span><span class="p">,</span> <span class="n">password</span><span class="p">,</span> <span class="k">true</span><span class="p">,</span> <span class="k">false</span><span class="p">);</span>
            <span class="k">return</span> <span class="n">result</span><span class="p">.</span><span class="n">Succeeded</span><span class="p">;</span>


        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">bool</span><span class="p">&gt;</span> <span class="nf">UpdateUserProfile</span><span class="p">(</span><span class="kt">string</span> <span class="n">id</span><span class="p">,</span> <span class="kt">string</span> <span class="n">fullName</span><span class="p">,</span> <span class="kt">string</span> <span class="n">email</span><span class="p">,</span> <span class="n">IList</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">roles</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">user</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_userManager</span><span class="p">.</span><span class="nf">FindByIdAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
            <span class="n">user</span><span class="p">.</span><span class="n">FullName</span> <span class="p">=</span> <span class="n">fullName</span><span class="p">;</span>
            <span class="n">user</span><span class="p">.</span><span class="n">Email</span> <span class="p">=</span> <span class="n">email</span><span class="p">;</span>
            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_userManager</span><span class="p">.</span><span class="nf">UpdateAsync</span><span class="p">(</span><span class="n">user</span><span class="p">);</span>

            <span class="k">return</span> <span class="n">result</span><span class="p">.</span><span class="n">Succeeded</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;(</span><span class="kt">string</span> <span class="n">id</span><span class="p">,</span> <span class="kt">string</span> <span class="n">roleName</span><span class="p">)&gt;</span> <span class="nf">GetRoleByIdAsync</span><span class="p">(</span><span class="kt">string</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">role</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_roleManager</span><span class="p">.</span><span class="nf">FindByIdAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
            <span class="k">return</span> <span class="p">(</span><span class="n">role</span><span class="p">.</span><span class="n">Id</span><span class="p">,</span> <span class="n">role</span><span class="p">.</span><span class="n">Name</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">bool</span><span class="p">&gt;</span> <span class="nf">UpdateRole</span><span class="p">(</span><span class="kt">string</span> <span class="n">id</span><span class="p">,</span> <span class="kt">string</span> <span class="n">roleName</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">roleName</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="kt">var</span> <span class="n">role</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_roleManager</span><span class="p">.</span><span class="nf">FindByIdAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
                <span class="n">role</span><span class="p">.</span><span class="n">Name</span> <span class="p">=</span> <span class="n">roleName</span><span class="p">;</span>
                <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_roleManager</span><span class="p">.</span><span class="nf">UpdateAsync</span><span class="p">(</span><span class="n">role</span><span class="p">);</span>
                <span class="k">return</span> <span class="n">result</span><span class="p">.</span><span class="n">Succeeded</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">bool</span><span class="p">&gt;</span> <span class="nf">UpdateUsersRole</span><span class="p">(</span><span class="kt">string</span> <span class="n">userName</span><span class="p">,</span> <span class="n">IList</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">usersRole</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">user</span> <span class="p">=</span>  <span class="k">await</span> <span class="n">_userManager</span><span class="p">.</span><span class="nf">FindByNameAsync</span><span class="p">(</span><span class="n">userName</span><span class="p">);</span>
            <span class="kt">var</span> <span class="n">existingRoles</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_userManager</span><span class="p">.</span><span class="nf">GetRolesAsync</span><span class="p">(</span><span class="n">user</span><span class="p">);</span>
            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_userManager</span><span class="p">.</span><span class="nf">RemoveFromRolesAsync</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="n">existingRoles</span><span class="p">);</span>
            <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_userManager</span><span class="p">.</span><span class="nf">AddToRolesAsync</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="n">usersRole</span><span class="p">);</span>

            <span class="k">return</span> <span class="n">result</span><span class="p">.</span><span class="n">Succeeded</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>TokenGenerator.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Microsoft.IdentityModel.Tokens</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Common.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.IdentityModel.Tokens.Jwt</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Security.Claims</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Text</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Infrastructure.Services</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">TokenGenerator</span> <span class="p">:</span> <span class="n">ITokenGenerator</span>
    <span class="p">{</span>

        <span class="k">private</span> <span class="k">readonly</span> <span class="kt">string</span> <span class="n">_key</span><span class="p">;</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="kt">string</span> <span class="n">_issuer</span><span class="p">;</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="kt">string</span> <span class="n">_audience</span><span class="p">;</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="kt">string</span> <span class="n">_expiryMinutes</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">TokenGenerator</span><span class="p">(</span><span class="kt">string</span> <span class="n">key</span><span class="p">,</span> <span class="kt">string</span> <span class="n">issueer</span><span class="p">,</span> <span class="kt">string</span> <span class="n">audience</span><span class="p">,</span> <span class="kt">string</span> <span class="n">expiryMinutes</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_key</span> <span class="p">=</span> <span class="n">key</span><span class="p">;</span>
            <span class="n">_issuer</span> <span class="p">=</span> <span class="n">issueer</span><span class="p">;</span>
            <span class="n">_audience</span> <span class="p">=</span> <span class="n">audience</span><span class="p">;</span>
            <span class="n">_expiryMinutes</span> <span class="p">=</span> <span class="n">expiryMinutes</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="kt">string</span> <span class="nf">GenerateJWTToken</span><span class="p">((</span><span class="kt">string</span> <span class="n">userId</span><span class="p">,</span> <span class="kt">string</span> <span class="n">userName</span><span class="p">,</span> <span class="n">IList</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">roles</span><span class="p">)</span> <span class="n">userDetails</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">securityKey</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">SymmetricSecurityKey</span><span class="p">(</span><span class="n">Encoding</span><span class="p">.</span><span class="n">UTF8</span><span class="p">.</span><span class="nf">GetBytes</span><span class="p">(</span><span class="n">_key</span><span class="p">));</span>
            <span class="kt">var</span> <span class="n">signingCredentials</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">SigningCredentials</span><span class="p">(</span><span class="n">securityKey</span><span class="p">,</span> <span class="n">SecurityAlgorithms</span><span class="p">.</span><span class="n">HmacSha256</span><span class="p">);</span>

            <span class="kt">var</span> <span class="p">(</span><span class="n">userId</span><span class="p">,</span> <span class="n">userName</span><span class="p">,</span> <span class="n">roles</span><span class="p">)</span> <span class="p">=</span> <span class="n">userDetails</span><span class="p">;</span>

            <span class="kt">var</span> <span class="n">claims</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Claim</span><span class="p">&gt;()</span>
            <span class="p">{</span>
                <span class="k">new</span> <span class="nf">Claim</span><span class="p">(</span><span class="n">JwtRegisteredClaimNames</span><span class="p">.</span><span class="n">Sub</span><span class="p">,</span> <span class="n">userName</span><span class="p">),</span>
                <span class="k">new</span> <span class="nf">Claim</span><span class="p">(</span><span class="n">JwtRegisteredClaimNames</span><span class="p">.</span><span class="n">Jti</span><span class="p">,</span> <span class="n">userId</span><span class="p">),</span>
                <span class="k">new</span> <span class="nf">Claim</span><span class="p">(</span><span class="n">ClaimTypes</span><span class="p">.</span><span class="n">Name</span><span class="p">,</span> <span class="n">userName</span><span class="p">),</span>
                <span class="k">new</span> <span class="nf">Claim</span><span class="p">(</span><span class="s">"UserId"</span><span class="p">,</span> <span class="n">userId</span><span class="p">)</span>
            <span class="p">};</span>
            <span class="n">claims</span><span class="p">.</span><span class="nf">AddRange</span><span class="p">(</span><span class="n">roles</span><span class="p">.</span><span class="nf">Select</span><span class="p">(</span><span class="n">role</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="nf">Claim</span><span class="p">(</span><span class="n">ClaimTypes</span><span class="p">.</span><span class="n">Role</span><span class="p">,</span> <span class="n">role</span><span class="p">)));</span>


            <span class="kt">var</span> <span class="n">token</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">JwtSecurityToken</span><span class="p">(</span>
                <span class="n">issuer</span><span class="p">:</span> <span class="n">_issuer</span><span class="p">,</span>
                <span class="n">audience</span><span class="p">:</span> <span class="n">_audience</span><span class="p">,</span>
                <span class="n">claims</span><span class="p">:</span> <span class="n">claims</span><span class="p">,</span>
                <span class="n">expires</span><span class="p">:</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">.</span><span class="nf">AddMinutes</span><span class="p">(</span><span class="n">Convert</span><span class="p">.</span><span class="nf">ToDouble</span><span class="p">(</span><span class="n">_expiryMinutes</span><span class="p">)),</span>
                <span class="n">signingCredentials</span><span class="p">:</span> <span class="n">signingCredentials</span>
           <span class="p">);</span>

            <span class="kt">var</span> <span class="n">encodedToken</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">JwtSecurityTokenHandler</span><span class="p">().</span><span class="nf">WriteToken</span><span class="p">(</span><span class="n">token</span><span class="p">);</span>
            <span class="k">return</span> <span class="n">encodedToken</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create DependencyInjection class in Ordering.Application root folder</li>
</ul>

<p><strong>DependencyInjection.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Identity</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Extensions.Configuration</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Extensions.DependencyInjection</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Common.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Repositories.Command</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Repositories.Command.Base</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Repositories.Query</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Repositories.Query.Base</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Infrastructure.Data</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Infrastructure.Identity</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Infrastructure.Repository.Command</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Infrastructure.Repository.Command.Base</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Infrastructure.Repository.Query</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Infrastructure.Repository.Query.Base</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Infrastructure.Services</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Infrastructure</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">DependencyInjection</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">static</span> <span class="n">IServiceCollection</span> <span class="nf">AddInfrastructure</span><span class="p">(</span><span class="k">this</span> <span class="n">IServiceCollection</span> <span class="n">services</span><span class="p">,</span>
            <span class="n">IConfiguration</span> <span class="n">configuration</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">services</span><span class="p">.</span><span class="n">AddDbContext</span><span class="p">&lt;</span><span class="n">OrderingContext</span><span class="p">&gt;(</span><span class="n">options</span> <span class="p">=&gt;</span> <span class="n">options</span><span class="p">.</span><span class="nf">UseSqlite</span><span class="p">(</span><span class="n">configuration</span><span class="p">.</span><span class="nf">GetConnectionString</span><span class="p">(</span><span class="s">"DefaultConnection"</span><span class="p">),</span>
                <span class="n">b</span> <span class="p">=&gt;</span> <span class="n">b</span><span class="p">.</span><span class="nf">MigrationsAssembly</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">OrderingContext</span><span class="p">).</span><span class="n">Assembly</span><span class="p">.</span><span class="n">FullName</span><span class="p">)</span>
                <span class="p">));</span>

            <span class="n">services</span><span class="p">.</span><span class="n">AddIdentity</span><span class="p">&lt;</span><span class="n">ApplicationUser</span><span class="p">,</span> <span class="n">IdentityRole</span><span class="p">&gt;()</span>
            <span class="p">.</span><span class="n">AddEntityFrameworkStores</span><span class="p">&lt;</span><span class="n">OrderingContext</span><span class="p">&gt;()</span>
            <span class="p">.</span><span class="nf">AddDefaultTokenProviders</span><span class="p">();</span>

            <span class="n">services</span><span class="p">.</span><span class="n">Configure</span><span class="p">&lt;</span><span class="n">IdentityOptions</span><span class="p">&gt;(</span><span class="n">options</span> <span class="p">=&gt;</span>
            <span class="p">{</span>
                <span class="c1">// Default Lockout settings.</span>
                <span class="n">options</span><span class="p">.</span><span class="n">Lockout</span><span class="p">.</span><span class="n">DefaultLockoutTimeSpan</span> <span class="p">=</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="nf">FromMinutes</span><span class="p">(</span><span class="m">5</span><span class="p">);</span>
                <span class="n">options</span><span class="p">.</span><span class="n">Lockout</span><span class="p">.</span><span class="n">MaxFailedAccessAttempts</span> <span class="p">=</span> <span class="m">5</span><span class="p">;</span>
                <span class="n">options</span><span class="p">.</span><span class="n">Lockout</span><span class="p">.</span><span class="n">AllowedForNewUsers</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
                <span class="c1">// Default Password settings.</span>
                <span class="n">options</span><span class="p">.</span><span class="n">Password</span><span class="p">.</span><span class="n">RequireDigit</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
                <span class="n">options</span><span class="p">.</span><span class="n">Password</span><span class="p">.</span><span class="n">RequireLowercase</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
                <span class="n">options</span><span class="p">.</span><span class="n">Password</span><span class="p">.</span><span class="n">RequireNonAlphanumeric</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span> <span class="c1">// For special character</span>
                <span class="n">options</span><span class="p">.</span><span class="n">Password</span><span class="p">.</span><span class="n">RequireUppercase</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
                <span class="n">options</span><span class="p">.</span><span class="n">Password</span><span class="p">.</span><span class="n">RequiredLength</span> <span class="p">=</span> <span class="m">6</span><span class="p">;</span>
                <span class="n">options</span><span class="p">.</span><span class="n">Password</span><span class="p">.</span><span class="n">RequiredUniqueChars</span> <span class="p">=</span> <span class="m">1</span><span class="p">;</span>
                <span class="c1">// Default SignIn settings.</span>
                <span class="n">options</span><span class="p">.</span><span class="n">SignIn</span><span class="p">.</span><span class="n">RequireConfirmedEmail</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
                <span class="n">options</span><span class="p">.</span><span class="n">SignIn</span><span class="p">.</span><span class="n">RequireConfirmedPhoneNumber</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
                <span class="n">options</span><span class="p">.</span><span class="n">User</span><span class="p">.</span><span class="n">RequireUniqueEmail</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
            <span class="p">});</span>


            <span class="n">services</span><span class="p">.</span><span class="n">AddScoped</span><span class="p">&lt;</span><span class="n">IIdentityService</span><span class="p">,</span> <span class="n">IdentityService</span><span class="p">&gt;();</span>

            <span class="n">services</span><span class="p">.</span><span class="nf">AddScoped</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">IQueryRepository</span><span class="p">&lt;&gt;),</span> <span class="k">typeof</span><span class="p">(</span><span class="n">QueryRepository</span><span class="p">&lt;&gt;));</span>
            <span class="n">services</span><span class="p">.</span><span class="n">AddTransient</span><span class="p">&lt;</span><span class="n">ICustomerQueryRepository</span><span class="p">,</span> <span class="n">CustomerQueryRepository</span><span class="p">&gt;();</span>
            <span class="n">services</span><span class="p">.</span><span class="nf">AddScoped</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">ICommandRepository</span><span class="p">&lt;&gt;),</span> <span class="k">typeof</span><span class="p">(</span><span class="n">CommandRepository</span><span class="p">&lt;&gt;));</span>
            <span class="n">services</span><span class="p">.</span><span class="n">AddTransient</span><span class="p">&lt;</span><span class="n">ICustomerCommandRepository</span><span class="p">,</span> <span class="n">CustomerCommandRepository</span><span class="p">&gt;();</span>


            <span class="k">return</span> <span class="n">services</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 7: Now organize Ordering.Application layer</strong></p>

<ul>
  <li>Create DTO classes in Ordering.Application/DTOs folder</li>
</ul>

<p><strong>AuthResponseDTO.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">Ordering.Application.DTOs</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">AuthResponseDTO</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">UserId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Token</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>CustomerResponse.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">Ordering.Application.DTOs</span>
<span class="p">{</span>
    <span class="c1">// Customer response or DTO class</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CustomerResponse</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="n">Int64</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">FirstName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">LastName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Email</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">ContactNumber</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Address</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>RoleResponseDTO.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">Ordering.Application.DTOs</span>
<span class="p">{</span>
    <span class="c1">// Customer response or DTO class</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CustomerResponse</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="n">Int64</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">FirstName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">LastName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Email</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">ContactNumber</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Address</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>UserDetailsResponseDTO.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">Ordering.Application.DTOs</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">UserDetailsResponseDTO</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">FullName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">UserName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Email</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="n">IList</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">Roles</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>UserResponseDTO.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">Ordering.Application.DTOs</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">UserResponseDTO</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">FullName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">UserName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Email</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create Custom Exceptions classes in Ordering.Application/Common/Exceptions folder</li>
</ul>

<p><strong>BadRequestException.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">Ordering.Application.Common.Exceptions</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">BadRequestException</span> <span class="p">:</span> <span class="n">Exception</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">BadRequestException</span><span class="p">()</span> <span class="p">:</span> <span class="k">base</span><span class="p">()</span>
        <span class="p">{</span>

        <span class="p">}</span>

        <span class="k">public</span> <span class="nf">BadRequestException</span><span class="p">(</span><span class="kt">string</span> <span class="n">message</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
        <span class="p">{</span>

        <span class="p">}</span>

        <span class="k">public</span> <span class="nf">BadRequestException</span><span class="p">(</span><span class="kt">string</span> <span class="n">message</span><span class="p">,</span> <span class="n">Exception</span> <span class="n">exp</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="n">exp</span><span class="p">)</span>
        <span class="p">{</span>

        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>ForbiddenAccessException.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">Ordering.Application.Common.Exceptions</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">ForbiddenAccessException</span> <span class="p">:</span> <span class="n">Exception</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">ForbiddenAccessException</span><span class="p">()</span> <span class="p">:</span> <span class="k">base</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>NotFoundException.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">Ordering.Application.Common.Exceptions</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">NotFoundException</span> <span class="p">:</span> <span class="n">Exception</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">NotFoundException</span><span class="p">()</span> <span class="p">:</span> <span class="k">base</span><span class="p">()</span>
        <span class="p">{</span>

        <span class="p">}</span>

        <span class="k">public</span> <span class="nf">NotFoundException</span><span class="p">(</span><span class="kt">string</span> <span class="n">message</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
        <span class="p">{</span>

        <span class="p">}</span>

        <span class="k">public</span> <span class="nf">NotFoundException</span><span class="p">(</span><span class="kt">string</span> <span class="n">message</span><span class="p">,</span> <span class="n">Exception</span> <span class="n">exp</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="n">exp</span><span class="p">)</span>
        <span class="p">{</span>

        <span class="p">}</span>

        <span class="k">public</span> <span class="nf">NotFoundException</span><span class="p">(</span><span class="kt">string</span> <span class="n">name</span><span class="p">,</span> <span class="kt">object</span> <span class="n">key</span><span class="p">)</span>
            <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="s">$"Entity \"</span><span class="p">{</span><span class="n">name</span><span class="p">}</span><span class="s">\" (</span><span class="p">{</span><span class="n">key</span><span class="p">}</span><span class="s">) was not found."</span><span class="p">)</span>
        <span class="p">{</span>

        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>ValidationException.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">FluentValidation.Results</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Identity</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Application.Common.Exceptions</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">ValidationException</span> <span class="p">:</span> <span class="n">Exception</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">ValidationException</span><span class="p">()</span>
            <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="s">"One or more validation failures have occurred."</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Errors</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">string</span><span class="p">[</span><span class="k">]&gt;</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="nf">ValidationException</span><span class="p">(</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">ValidationFailure</span><span class="p">&gt;</span> <span class="n">failures</span><span class="p">)</span>
            <span class="p">:</span> <span class="k">this</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">Errors</span> <span class="p">=</span> <span class="n">failures</span>
                <span class="p">.</span><span class="nf">GroupBy</span><span class="p">(</span><span class="n">e</span> <span class="p">=&gt;</span> <span class="n">e</span><span class="p">.</span><span class="n">PropertyName</span><span class="p">,</span> <span class="n">e</span> <span class="p">=&gt;</span> <span class="n">e</span><span class="p">.</span><span class="n">ErrorMessage</span><span class="p">)</span>
                <span class="p">.</span><span class="nf">ToDictionary</span><span class="p">(</span><span class="n">failureGroup</span> <span class="p">=&gt;</span> <span class="n">failureGroup</span><span class="p">.</span><span class="n">Key</span><span class="p">,</span> <span class="n">failureGroup</span> <span class="p">=&gt;</span> <span class="n">failureGroup</span><span class="p">.</span><span class="nf">ToArray</span><span class="p">());</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="nf">ValidationException</span><span class="p">(</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">IdentityError</span><span class="p">&gt;</span> <span class="n">errors</span><span class="p">)</span> <span class="p">:</span> <span class="k">this</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">Errors</span> <span class="p">=</span> <span class="n">errors</span>
                <span class="p">.</span><span class="nf">GroupBy</span><span class="p">(</span><span class="n">e</span> <span class="p">=&gt;</span> <span class="n">e</span><span class="p">.</span><span class="n">Code</span><span class="p">,</span> <span class="n">e</span> <span class="p">=&gt;</span> <span class="n">e</span><span class="p">.</span><span class="n">Description</span><span class="p">)</span>
                <span class="p">.</span><span class="nf">ToDictionary</span><span class="p">(</span><span class="n">failureGroup</span> <span class="p">=&gt;</span> <span class="n">failureGroup</span><span class="p">.</span><span class="n">Key</span><span class="p">,</span> <span class="n">failureGroup</span> <span class="p">=&gt;</span> <span class="n">failureGroup</span><span class="p">.</span><span class="nf">ToArray</span><span class="p">());</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">IDictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">string</span><span class="p">[</span><span class="k">]&gt;</span> <span class="n">Errors</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create some interface in Ordering.Application/Common/Interfaces</li>
</ul>

<p><strong>IIdentityService.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">Ordering.Application.Common.Interfaces</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">interface</span> <span class="nc">IIdentityService</span>
    <span class="p">{</span>
        <span class="c1">// User section</span>
        <span class="n">Task</span><span class="p">&lt;(</span><span class="kt">bool</span> <span class="n">isSucceed</span><span class="p">,</span> <span class="kt">string</span> <span class="n">userId</span><span class="p">)&gt;</span> <span class="nf">CreateUserAsync</span><span class="p">(</span><span class="kt">string</span> <span class="n">userName</span><span class="p">,</span> <span class="kt">string</span> <span class="n">password</span><span class="p">,</span> <span class="kt">string</span> <span class="n">email</span><span class="p">,</span> <span class="kt">string</span> <span class="n">fullName</span><span class="p">,</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">roles</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="kt">bool</span><span class="p">&gt;</span> <span class="nf">SigninUserAsync</span><span class="p">(</span><span class="kt">string</span> <span class="n">userName</span><span class="p">,</span> <span class="kt">string</span> <span class="n">password</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="nf">GetUserIdAsync</span><span class="p">(</span><span class="kt">string</span> <span class="n">userName</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;(</span><span class="kt">string</span> <span class="n">userId</span><span class="p">,</span> <span class="kt">string</span> <span class="n">fullName</span><span class="p">,</span> <span class="kt">string</span> <span class="n">UserName</span><span class="p">,</span> <span class="kt">string</span> <span class="n">email</span><span class="p">,</span> <span class="n">IList</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">roles</span><span class="p">)&gt;</span> <span class="nf">GetUserDetailsAsync</span><span class="p">(</span><span class="kt">string</span> <span class="n">userId</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;(</span><span class="kt">string</span> <span class="n">userId</span><span class="p">,</span> <span class="kt">string</span> <span class="n">fullName</span><span class="p">,</span> <span class="kt">string</span> <span class="n">UserName</span><span class="p">,</span> <span class="kt">string</span> <span class="n">email</span><span class="p">,</span> <span class="n">IList</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">roles</span><span class="p">)&gt;</span> <span class="nf">GetUserDetailsByUserNameAsync</span><span class="p">(</span><span class="kt">string</span> <span class="n">userName</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="nf">GetUserNameAsync</span><span class="p">(</span><span class="kt">string</span> <span class="n">userId</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="kt">bool</span><span class="p">&gt;</span> <span class="nf">DeleteUserAsync</span><span class="p">(</span><span class="kt">string</span> <span class="n">userId</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="kt">bool</span><span class="p">&gt;</span> <span class="nf">IsUniqueUserName</span><span class="p">(</span><span class="kt">string</span> <span class="n">userName</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;(</span><span class="kt">string</span> <span class="n">id</span><span class="p">,</span> <span class="kt">string</span> <span class="n">fullName</span><span class="p">,</span> <span class="kt">string</span> <span class="n">userName</span><span class="p">,</span> <span class="kt">string</span> <span class="n">email</span><span class="p">)&gt;&gt;</span> <span class="nf">GetAllUsersAsync</span><span class="p">();</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;(</span><span class="kt">string</span> <span class="n">id</span><span class="p">,</span> <span class="kt">string</span> <span class="n">userName</span><span class="p">,</span> <span class="kt">string</span> <span class="n">email</span><span class="p">,</span> <span class="n">IList</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">roles</span><span class="p">)&gt;&gt;</span> <span class="nf">GetAllUsersDetailsAsync</span><span class="p">();</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="kt">bool</span><span class="p">&gt;</span> <span class="nf">UpdateUserProfile</span><span class="p">(</span><span class="kt">string</span> <span class="n">id</span><span class="p">,</span> <span class="kt">string</span> <span class="n">fullName</span><span class="p">,</span> <span class="kt">string</span> <span class="n">email</span><span class="p">,</span> <span class="n">IList</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">roles</span><span class="p">);</span>

        <span class="c1">// Role Section</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="kt">bool</span><span class="p">&gt;</span> <span class="nf">CreateRoleAsync</span><span class="p">(</span><span class="kt">string</span> <span class="n">roleName</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="kt">bool</span><span class="p">&gt;</span> <span class="nf">DeleteRoleAsync</span><span class="p">(</span><span class="kt">string</span> <span class="n">roleId</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;(</span><span class="kt">string</span> <span class="n">id</span><span class="p">,</span> <span class="kt">string</span> <span class="n">roleName</span><span class="p">)&gt;&gt;</span> <span class="nf">GetRolesAsync</span><span class="p">();</span>
        <span class="n">Task</span><span class="p">&lt;(</span><span class="kt">string</span> <span class="n">id</span><span class="p">,</span> <span class="kt">string</span> <span class="n">roleName</span><span class="p">)&gt;</span> <span class="nf">GetRoleByIdAsync</span><span class="p">(</span><span class="kt">string</span> <span class="n">id</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="kt">bool</span><span class="p">&gt;</span> <span class="nf">UpdateRole</span><span class="p">(</span><span class="kt">string</span> <span class="n">id</span><span class="p">,</span> <span class="kt">string</span> <span class="n">roleName</span><span class="p">);</span>

        <span class="c1">// User's Role section</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="kt">bool</span><span class="p">&gt;</span> <span class="nf">IsInRoleAsync</span><span class="p">(</span><span class="kt">string</span> <span class="n">userId</span><span class="p">,</span> <span class="kt">string</span> <span class="n">role</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;&gt;</span> <span class="nf">GetUserRolesAsync</span><span class="p">(</span><span class="kt">string</span> <span class="n">userId</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="kt">bool</span><span class="p">&gt;</span> <span class="nf">AssignUserToRole</span><span class="p">(</span><span class="kt">string</span> <span class="n">userName</span><span class="p">,</span> <span class="n">IList</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">roles</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="kt">bool</span><span class="p">&gt;</span> <span class="nf">UpdateUsersRole</span><span class="p">(</span><span class="kt">string</span> <span class="n">userName</span><span class="p">,</span> <span class="n">IList</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">usersRole</span><span class="p">);</span>


    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>ITokenGenerator.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">Ordering.Application.Common.Interfaces</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">interface</span> <span class="nc">ITokenGenerator</span>
    <span class="p">{</span>
        <span class="c1">//public string GenerateToken(string userName, string password);</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="nf">GenerateJWTToken</span><span class="p">((</span><span class="kt">string</span> <span class="n">userId</span><span class="p">,</span> <span class="kt">string</span> <span class="n">userName</span><span class="p">,</span> <span class="n">IList</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">roles</span><span class="p">)</span> <span class="n">userDetails</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create Auth Command and Command Handler in Ordering.Application/Commands/Auth folder</li>
</ul>

<p><strong>AuthCommand.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Common.Exceptions</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Common.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.DTOs</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Application.Commands.Auth</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">AuthCommand</span> <span class="p">:</span> <span class="n">IRequest</span><span class="p">&lt;</span><span class="n">AuthResponseDTO</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">UserName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Password</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">class</span> <span class="nc">AuthCommandHandler</span> <span class="p">:</span> <span class="n">IRequestHandler</span><span class="p">&lt;</span><span class="n">AuthCommand</span><span class="p">,</span> <span class="n">AuthResponseDTO</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">ITokenGenerator</span> <span class="n">_tokenGenerator</span><span class="p">;</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IIdentityService</span> <span class="n">_identityService</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">AuthCommandHandler</span><span class="p">(</span><span class="n">IIdentityService</span> <span class="n">identityService</span><span class="p">,</span> <span class="n">ITokenGenerator</span> <span class="n">tokenGenerator</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_identityService</span> <span class="p">=</span> <span class="n">identityService</span><span class="p">;</span>
            <span class="n">_tokenGenerator</span> <span class="p">=</span> <span class="n">tokenGenerator</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">AuthResponseDTO</span><span class="p">&gt;</span> <span class="nf">Handle</span><span class="p">(</span><span class="n">AuthCommand</span> <span class="n">request</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_identityService</span><span class="p">.</span><span class="nf">SigninUserAsync</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">UserName</span><span class="p">,</span> <span class="n">request</span><span class="p">.</span><span class="n">Password</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(!</span><span class="n">result</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">BadRequestException</span><span class="p">(</span><span class="s">"Invalid username or password"</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="kt">var</span> <span class="p">(</span><span class="n">userId</span><span class="p">,</span> <span class="n">fullName</span><span class="p">,</span> <span class="n">userName</span><span class="p">,</span> <span class="n">email</span><span class="p">,</span> <span class="n">roles</span><span class="p">)</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_identityService</span><span class="p">.</span><span class="nf">GetUserDetailsAsync</span><span class="p">(</span><span class="k">await</span> <span class="n">_identityService</span><span class="p">.</span><span class="nf">GetUserIdAsync</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">UserName</span><span class="p">));</span>

            <span class="kt">string</span> <span class="n">token</span> <span class="p">=</span> <span class="n">_tokenGenerator</span><span class="p">.</span><span class="nf">GenerateJWTToken</span><span class="p">((</span><span class="n">userId</span><span class="p">:</span> <span class="n">userId</span><span class="p">,</span> <span class="n">userName</span><span class="p">:</span> <span class="n">userName</span><span class="p">,</span> <span class="n">roles</span><span class="p">:</span> <span class="n">roles</span><span class="p">));</span>

            <span class="k">return</span> <span class="k">new</span> <span class="nf">AuthResponseDTO</span><span class="p">()</span>
            <span class="p">{</span>
                <span class="n">UserId</span> <span class="p">=</span> <span class="n">userId</span><span class="p">,</span>
                <span class="n">Name</span> <span class="p">=</span> <span class="n">userName</span><span class="p">,</span>
                <span class="n">Token</span> <span class="p">=</span> <span class="n">token</span>
            <span class="p">};</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>


</code></pre></div></div>

<ul>
  <li>Create CreateCustomerCommand and Handler in Ordering.Application/Commands/Customers/Create folder</li>
</ul>

<p><strong>CreateCustomerCommand.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.DTOs</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Mapper</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Entities</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Repositories.Command</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Application.Commands.Customers.Create</span>
<span class="p">{</span>
    <span class="c1">// Customer create command with CustomerResponse</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CreateCustomerCommand</span> <span class="p">:</span> <span class="n">IRequest</span><span class="p">&lt;</span><span class="n">CustomerResponse</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">FirstName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">LastName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Email</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">ContactNumber</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Address</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="n">DateTime</span> <span class="n">CreatedDate</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="nf">CreateCustomerCommand</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="n">CreatedDate</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">class</span> <span class="nc">CreateCustomerCommandHandler</span> <span class="p">:</span> <span class="n">IRequestHandler</span><span class="p">&lt;</span><span class="n">CreateCustomerCommand</span><span class="p">,</span> <span class="n">CustomerResponse</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">ICustomerCommandRepository</span> <span class="n">_customerCommandRepository</span><span class="p">;</span>
        <span class="k">public</span> <span class="nf">CreateCustomerCommandHandler</span><span class="p">(</span><span class="n">ICustomerCommandRepository</span> <span class="n">customerCommandRepository</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_customerCommandRepository</span> <span class="p">=</span> <span class="n">customerCommandRepository</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">CustomerResponse</span><span class="p">&gt;</span> <span class="nf">Handle</span><span class="p">(</span><span class="n">CreateCustomerCommand</span> <span class="n">request</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">customerEntity</span> <span class="p">=</span> <span class="n">CustomerMapper</span><span class="p">.</span><span class="n">Mapper</span><span class="p">.</span><span class="n">Map</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;(</span><span class="n">request</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">customerEntity</span> <span class="k">is</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">ApplicationException</span><span class="p">(</span><span class="s">"There is a problem in mapper"</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="kt">var</span> <span class="n">newCustomer</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_customerCommandRepository</span><span class="p">.</span><span class="nf">AddAsync</span><span class="p">(</span><span class="n">customerEntity</span><span class="p">);</span>
            <span class="kt">var</span> <span class="n">customerResponse</span> <span class="p">=</span> <span class="n">CustomerMapper</span><span class="p">.</span><span class="n">Mapper</span><span class="p">.</span><span class="n">Map</span><span class="p">&lt;</span><span class="n">CustomerResponse</span><span class="p">&gt;(</span><span class="n">newCustomer</span><span class="p">);</span>
            <span class="k">return</span> <span class="n">customerResponse</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create EditCustomerCommand and Handler in Ordering.Application/Commands/Customers/Update folder</li>
</ul>

<p><strong>EditCustomerCommand.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.DTOs</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Mapper</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Entities</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Repositories.Command</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Repositories.Query</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Application.Commands.Customers.Update</span>
<span class="p">{</span>
    <span class="c1">// Customer create command with CustomerResponse</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">EditCustomerCommand</span> <span class="p">:</span> <span class="n">IRequest</span><span class="p">&lt;</span><span class="n">CustomerResponse</span><span class="p">&gt;</span>
    <span class="p">{</span>

        <span class="k">public</span> <span class="n">Int64</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">FirstName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">LastName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Email</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">ContactNumber</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Address</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">class</span> <span class="nc">EditCustomerCommandHandler</span> <span class="p">:</span> <span class="n">IRequestHandler</span><span class="p">&lt;</span><span class="n">EditCustomerCommand</span><span class="p">,</span> <span class="n">CustomerResponse</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">ICustomerCommandRepository</span> <span class="n">_customerCommandRepository</span><span class="p">;</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">ICustomerQueryRepository</span> <span class="n">_customerQueryRepository</span><span class="p">;</span>
        <span class="k">public</span> <span class="nf">EditCustomerCommandHandler</span><span class="p">(</span><span class="n">ICustomerCommandRepository</span> <span class="n">customerRepository</span><span class="p">,</span> <span class="n">ICustomerQueryRepository</span> <span class="n">customerQueryRepository</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_customerCommandRepository</span> <span class="p">=</span> <span class="n">customerRepository</span><span class="p">;</span>
            <span class="n">_customerQueryRepository</span> <span class="p">=</span> <span class="n">customerQueryRepository</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">CustomerResponse</span><span class="p">&gt;</span> <span class="nf">Handle</span><span class="p">(</span><span class="n">EditCustomerCommand</span> <span class="n">request</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">customerEntity</span> <span class="p">=</span> <span class="n">CustomerMapper</span><span class="p">.</span><span class="n">Mapper</span><span class="p">.</span><span class="n">Map</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;(</span><span class="n">request</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">customerEntity</span> <span class="k">is</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">ApplicationException</span><span class="p">(</span><span class="s">"There is a problem in mapper"</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">await</span> <span class="n">_customerCommandRepository</span><span class="p">.</span><span class="nf">UpdateAsync</span><span class="p">(</span><span class="n">customerEntity</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exp</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">ApplicationException</span><span class="p">(</span><span class="n">exp</span><span class="p">.</span><span class="n">Message</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="kt">var</span> <span class="n">modifiedCustomer</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_customerQueryRepository</span><span class="p">.</span><span class="nf">GetByIdAsync</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">Id</span><span class="p">);</span>
            <span class="kt">var</span> <span class="n">customerResponse</span> <span class="p">=</span> <span class="n">CustomerMapper</span><span class="p">.</span><span class="n">Mapper</span><span class="p">.</span><span class="n">Map</span><span class="p">&lt;</span><span class="n">CustomerResponse</span><span class="p">&gt;(</span><span class="n">modifiedCustomer</span><span class="p">);</span>

            <span class="k">return</span> <span class="n">customerResponse</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create DeleteCustomerCommand and Handler in Ordering.Application/Commands/Customers/Delete folder</li>
</ul>

<p><strong>DeleteCustomerCommand.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Repositories.Command</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Repositories.Query</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Application.Commands.Customers.Delete</span>
<span class="p">{</span>
    <span class="c1">// Customer create command with string response</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">DeleteCustomerCommand</span> <span class="p">:</span> <span class="n">IRequest</span><span class="p">&lt;</span><span class="n">String</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="n">Int64</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="nf">DeleteCustomerCommand</span><span class="p">(</span><span class="n">Int64</span> <span class="n">Id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="n">Id</span> <span class="p">=</span> <span class="n">Id</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// Customer delete command handler with string response as output</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">DeleteCustomerCommmandHandler</span> <span class="p">:</span> <span class="n">IRequestHandler</span><span class="p">&lt;</span><span class="n">DeleteCustomerCommand</span><span class="p">,</span> <span class="n">String</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">ICustomerCommandRepository</span> <span class="n">_customerCommandRepository</span><span class="p">;</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">ICustomerQueryRepository</span> <span class="n">_customerQueryRepository</span><span class="p">;</span>
        <span class="k">public</span> <span class="nf">DeleteCustomerCommmandHandler</span><span class="p">(</span><span class="n">ICustomerCommandRepository</span> <span class="n">customerRepository</span><span class="p">,</span> <span class="n">ICustomerQueryRepository</span> <span class="n">customerQueryRepository</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_customerCommandRepository</span> <span class="p">=</span> <span class="n">customerRepository</span><span class="p">;</span>
            <span class="n">_customerQueryRepository</span> <span class="p">=</span> <span class="n">customerQueryRepository</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="nf">Handle</span><span class="p">(</span><span class="n">DeleteCustomerCommand</span> <span class="n">request</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="kt">var</span> <span class="n">customerEntity</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_customerQueryRepository</span><span class="p">.</span><span class="nf">GetByIdAsync</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">Id</span><span class="p">);</span>

                <span class="k">await</span> <span class="n">_customerCommandRepository</span><span class="p">.</span><span class="nf">DeleteAsync</span><span class="p">(</span><span class="n">customerEntity</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exp</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="p">(</span><span class="k">new</span> <span class="nf">ApplicationException</span><span class="p">(</span><span class="n">exp</span><span class="p">.</span><span class="n">Message</span><span class="p">));</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="s">"Customer information has been deleted!"</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create RoleCreateCommand and Handler in Ordering.Application/Commands/Role/Create folder</li>
</ul>

<p><strong>RoleCreateCommand.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Common.Interfaces</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Application.Commands.Role.Create</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">RoleCreateCommand</span> <span class="p">:</span> <span class="n">IRequest</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">RoleName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">class</span> <span class="nc">RoleCreateCommandHandler</span> <span class="p">:</span> <span class="n">IRequestHandler</span><span class="p">&lt;</span><span class="n">RoleCreateCommand</span><span class="p">,</span> <span class="kt">int</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IIdentityService</span> <span class="n">_identityService</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">RoleCreateCommandHandler</span><span class="p">(</span><span class="n">IIdentityService</span> <span class="n">identityService</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_identityService</span> <span class="p">=</span> <span class="n">identityService</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="nf">Handle</span><span class="p">(</span><span class="n">RoleCreateCommand</span> <span class="n">request</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_identityService</span><span class="p">.</span><span class="nf">CreateRoleAsync</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">RoleName</span><span class="p">);</span>
            <span class="k">return</span> <span class="n">result</span> <span class="p">?</span> <span class="m">1</span> <span class="p">:</span> <span class="m">0</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create DeleteRoleCommand and Handler in Ordering.Application/Commands/Role/Delete folder</li>
</ul>

<p><strong>DeleteRoleCommand.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Common.Interfaces</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Application.Commands.Role.Delete</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">DeleteRoleCommand</span> <span class="p">:</span> <span class="n">IRequest</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">RoleId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">class</span> <span class="nc">DeleteRoleCommandHandler</span> <span class="p">:</span> <span class="n">IRequestHandler</span><span class="p">&lt;</span><span class="n">DeleteRoleCommand</span><span class="p">,</span> <span class="kt">int</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IIdentityService</span> <span class="n">_identityService</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">DeleteRoleCommandHandler</span><span class="p">(</span><span class="n">IIdentityService</span> <span class="n">identityService</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_identityService</span> <span class="p">=</span> <span class="n">identityService</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="nf">Handle</span><span class="p">(</span><span class="n">DeleteRoleCommand</span> <span class="n">request</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_identityService</span><span class="p">.</span><span class="nf">DeleteRoleAsync</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">RoleId</span><span class="p">);</span>
            <span class="k">return</span> <span class="n">result</span> <span class="p">?</span> <span class="m">1</span> <span class="p">:</span> <span class="m">0</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>


</code></pre></div></div>

<ul>
  <li>Create UpdateRoleCommand and Handler in Ordering.Application/Commands/Role/Update folder</li>
</ul>

<p><strong>UpdateRoleCommand.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Common.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Linq</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Text</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Threading.Tasks</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Application.Commands.Role.Update</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">UpdateRoleCommand</span> <span class="p">:</span> <span class="n">IRequest</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">RoleName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">class</span> <span class="nc">UpdateRoleCommandHandler</span> <span class="p">:</span> <span class="n">IRequestHandler</span><span class="p">&lt;</span><span class="n">UpdateRoleCommand</span><span class="p">,</span> <span class="kt">int</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IIdentityService</span> <span class="n">_identityService</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">UpdateRoleCommandHandler</span><span class="p">(</span><span class="n">IIdentityService</span> <span class="n">identityService</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_identityService</span> <span class="p">=</span> <span class="n">identityService</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="nf">Handle</span><span class="p">(</span><span class="n">UpdateRoleCommand</span> <span class="n">request</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_identityService</span><span class="p">.</span><span class="nf">UpdateRole</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">Id</span><span class="p">,</span> <span class="n">request</span><span class="p">.</span><span class="n">RoleName</span><span class="p">);</span>
            <span class="k">return</span> <span class="n">result</span> <span class="p">?</span> <span class="m">1</span> <span class="p">:</span> <span class="m">0</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create CreateUserCommand and Handler in Ordering.Application/Commands/User/Create folder</li>
</ul>

<p><strong>CreateUserCommand.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Common.Interfaces</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Application.Commands.User.Create</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CreateUserCommand</span> <span class="p">:</span> <span class="n">IRequest</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">FullName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">UserName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Email</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Password</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">ConfirmationPassword</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">Roles</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">class</span> <span class="nc">CreateUserCommandHandler</span> <span class="p">:</span> <span class="n">IRequestHandler</span><span class="p">&lt;</span><span class="n">CreateUserCommand</span><span class="p">,</span> <span class="kt">int</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IIdentityService</span> <span class="n">_identityService</span><span class="p">;</span>
        <span class="k">public</span> <span class="nf">CreateUserCommandHandler</span><span class="p">(</span><span class="n">IIdentityService</span> <span class="n">identityService</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_identityService</span> <span class="p">=</span> <span class="n">identityService</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="nf">Handle</span><span class="p">(</span><span class="n">CreateUserCommand</span> <span class="n">request</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_identityService</span><span class="p">.</span><span class="nf">CreateUserAsync</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">UserName</span><span class="p">,</span> <span class="n">request</span><span class="p">.</span><span class="n">Password</span><span class="p">,</span> <span class="n">request</span><span class="p">.</span><span class="n">Email</span><span class="p">,</span> <span class="n">request</span><span class="p">.</span><span class="n">FullName</span><span class="p">,</span> <span class="n">request</span><span class="p">.</span><span class="n">Roles</span><span class="p">);</span>
            <span class="k">return</span> <span class="n">result</span><span class="p">.</span><span class="n">isSucceed</span> <span class="p">?</span> <span class="m">1</span> <span class="p">:</span> <span class="m">0</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create DeleteUserCommandd and Handler in Ordering.Application/Commands/User/Delete folder</li>
</ul>

<p><strong>DeleteUserCommand.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Common.Interfaces</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Application.Commands.User.Delete</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">DeleteUserCommand</span> <span class="p">:</span> <span class="n">IRequest</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">class</span> <span class="nc">DeleteUserCommandHandler</span> <span class="p">:</span> <span class="n">IRequestHandler</span><span class="p">&lt;</span><span class="n">DeleteUserCommand</span><span class="p">,</span> <span class="kt">int</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IIdentityService</span> <span class="n">_identityService</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">DeleteUserCommandHandler</span><span class="p">(</span><span class="n">IIdentityService</span> <span class="n">identityService</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_identityService</span> <span class="p">=</span> <span class="n">identityService</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="nf">Handle</span><span class="p">(</span><span class="n">DeleteUserCommand</span> <span class="n">request</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_identityService</span><span class="p">.</span><span class="nf">DeleteUserAsync</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">Id</span><span class="p">);</span>

            <span class="k">return</span> <span class="n">result</span> <span class="p">?</span> <span class="m">1</span> <span class="p">:</span> <span class="m">0</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create AssignUsersRoleCommand, EditUserProfileCommand, UpdateUserRolesCommand and Handler in Ordering.Application/Commands/User/Update folder</li>
</ul>

<p><strong>AssignUsersRoleCommand.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Common.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Linq</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Text</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Threading.Tasks</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Application.Commands.User.Update</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">AssignUsersRoleCommand</span> <span class="p">:</span> <span class="n">IRequest</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">UserName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="n">IList</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">Roles</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;}</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">class</span> <span class="nc">AssignUsersRoleCommandHandler</span> <span class="p">:</span> <span class="n">IRequestHandler</span><span class="p">&lt;</span><span class="n">AssignUsersRoleCommand</span><span class="p">,</span> <span class="kt">int</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IIdentityService</span> <span class="n">_identityService</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">AssignUsersRoleCommandHandler</span><span class="p">(</span><span class="n">IIdentityService</span> <span class="n">identityService</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_identityService</span> <span class="p">=</span> <span class="n">identityService</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="nf">Handle</span><span class="p">(</span><span class="n">AssignUsersRoleCommand</span> <span class="n">request</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_identityService</span><span class="p">.</span><span class="nf">AssignUserToRole</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">UserName</span><span class="p">,</span> <span class="n">request</span><span class="p">.</span><span class="n">Roles</span><span class="p">);</span>
            <span class="k">return</span> <span class="n">result</span> <span class="p">?</span> <span class="m">1</span> <span class="p">:</span> <span class="m">0</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>
<p><strong>EditUserProfileCommand.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Common.Interfaces</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Application.Commands.User.Update</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">EditUserProfileCommand</span> <span class="p">:</span> <span class="n">IRequest</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">FullName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Email</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">Roles</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">class</span> <span class="nc">EditUserProfileCommandHandler</span> <span class="p">:</span> <span class="n">IRequestHandler</span><span class="p">&lt;</span><span class="n">EditUserProfileCommand</span><span class="p">,</span> <span class="kt">int</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IIdentityService</span> <span class="n">_identityService</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">EditUserProfileCommandHandler</span><span class="p">(</span><span class="n">IIdentityService</span> <span class="n">identityService</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_identityService</span> <span class="p">=</span> <span class="n">identityService</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="nf">Handle</span><span class="p">(</span><span class="n">EditUserProfileCommand</span> <span class="n">request</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_identityService</span><span class="p">.</span><span class="nf">UpdateUserProfile</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">Id</span><span class="p">,</span> <span class="n">request</span><span class="p">.</span><span class="n">FullName</span><span class="p">,</span> <span class="n">request</span><span class="p">.</span><span class="n">Email</span><span class="p">,</span> <span class="n">request</span><span class="p">.</span><span class="n">Roles</span><span class="p">);</span>
            <span class="k">return</span> <span class="n">result</span> <span class="p">?</span> <span class="m">1</span> <span class="p">:</span> <span class="m">0</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>
<p><strong>UpdateUserRolesCommand.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Common.Interfaces</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Application.Commands.User.Update</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">UpdateUserRolesCommand</span> <span class="p">:</span> <span class="n">IRequest</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">userName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="n">IList</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">Roles</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;}</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">class</span> <span class="nc">UpdateUserRolesCommandHandler</span> <span class="p">:</span> <span class="n">IRequestHandler</span><span class="p">&lt;</span><span class="n">UpdateUserRolesCommand</span><span class="p">,</span> <span class="kt">int</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IIdentityService</span> <span class="n">_identityService</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">UpdateUserRolesCommandHandler</span><span class="p">(</span><span class="n">IIdentityService</span> <span class="n">identityService</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_identityService</span> <span class="p">=</span> <span class="n">identityService</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="nf">Handle</span><span class="p">(</span><span class="n">UpdateUserRolesCommand</span> <span class="n">request</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_identityService</span><span class="p">.</span><span class="nf">UpdateUsersRole</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">userName</span><span class="p">,</span> <span class="n">request</span><span class="p">.</span><span class="n">Roles</span><span class="p">);</span>
            <span class="k">return</span> <span class="n">result</span> <span class="p">?</span> <span class="m">1</span> <span class="p">:</span> <span class="m">0</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create Customers Query classes and Handlers in Ordering.Application/Queries/Customers folder</li>
</ul>

<p><strong>GetAllCustomerQuery.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Entities</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Repositories.Query</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Application.Queries.Customers</span>
<span class="p">{</span>
    <span class="c1">// Customer query with List&lt;Customer&gt; response</span>
    <span class="k">public</span> <span class="n">record</span> <span class="n">GetAllCustomerQuery</span> <span class="p">:</span> <span class="n">IRequest</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;&gt;</span>
    <span class="p">{</span>

    <span class="p">}</span>

    <span class="k">public</span> <span class="k">class</span> <span class="nc">GetAllCustomerHandler</span> <span class="p">:</span> <span class="n">IRequestHandler</span><span class="p">&lt;</span><span class="n">GetAllCustomerQuery</span><span class="p">,</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;&gt;</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">ICustomerQueryRepository</span> <span class="n">_customerQueryRepository</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">GetAllCustomerHandler</span><span class="p">(</span><span class="n">ICustomerQueryRepository</span> <span class="n">customerQueryRepository</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_customerQueryRepository</span> <span class="p">=</span> <span class="n">customerQueryRepository</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;&gt;</span> <span class="nf">Handle</span><span class="p">(</span><span class="n">GetAllCustomerQuery</span> <span class="n">request</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="p">(</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;)</span><span class="k">await</span> <span class="n">_customerQueryRepository</span><span class="p">.</span><span class="nf">GetAllAsync</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>


</code></pre></div></div>

<p><strong>GetCustomerByEmailQuery.cs</strong></p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Entities</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Application.Queries.Customers</span>
<span class="p">{</span>
    <span class="c1">// Customer GetCustomerByEmailQuery with Customer response</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">GetCustomerByEmailQuery</span><span class="p">:</span> <span class="n">IRequest</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Email</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        
        <span class="k">public</span> <span class="nf">GetCustomerByEmailQuery</span><span class="p">(</span><span class="kt">string</span> <span class="n">email</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="n">Email</span> <span class="p">=</span> <span class="n">email</span><span class="p">;</span>
        <span class="p">}</span>

    <span class="p">}</span>

    <span class="k">public</span> <span class="k">class</span> <span class="nc">GetCustomerByEmailHandler</span> <span class="p">:</span> <span class="n">IRequestHandler</span><span class="p">&lt;</span><span class="n">GetCustomerByEmailQuery</span><span class="p">,</span> <span class="n">Customer</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IMediator</span> <span class="n">_mediator</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">GetCustomerByEmailHandler</span><span class="p">(</span><span class="n">IMediator</span> <span class="n">mediator</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_mediator</span> <span class="p">=</span> <span class="n">mediator</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="nf">Handle</span><span class="p">(</span><span class="n">GetCustomerByEmailQuery</span> <span class="n">request</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">customers</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_mediator</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="k">new</span> <span class="nf">GetAllCustomerQuery</span><span class="p">());</span>
            <span class="kt">var</span> <span class="n">selectedCustomer</span> <span class="p">=</span> <span class="n">customers</span><span class="p">.</span><span class="nf">FirstOrDefault</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Email</span><span class="p">.</span><span class="nf">ToLower</span><span class="p">().</span><span class="nf">Contains</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">Email</span><span class="p">.</span><span class="nf">ToLower</span><span class="p">()));</span>
            <span class="k">return</span> <span class="n">selectedCustomer</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>GetCustomerByIdQuery.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Entities</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Application.Queries.Customers</span>
<span class="p">{</span>
    <span class="c1">// Customer GetCustomerByIdQuery with Customer response</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">GetCustomerByIdQuery</span><span class="p">:</span> <span class="n">IRequest</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="n">Int64</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        
        <span class="k">public</span> <span class="nf">GetCustomerByIdQuery</span><span class="p">(</span><span class="n">Int64</span> <span class="n">Id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="n">Id</span> <span class="p">=</span> <span class="n">Id</span><span class="p">;</span>
        <span class="p">}</span>

    <span class="p">}</span>

    <span class="k">public</span> <span class="k">class</span> <span class="nc">GetCustomerByIdHandler</span> <span class="p">:</span> <span class="n">IRequestHandler</span><span class="p">&lt;</span><span class="n">GetCustomerByIdQuery</span><span class="p">,</span> <span class="n">Customer</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IMediator</span> <span class="n">_mediator</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">GetCustomerByIdHandler</span><span class="p">(</span><span class="n">IMediator</span> <span class="n">mediator</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_mediator</span> <span class="p">=</span> <span class="n">mediator</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="nf">Handle</span><span class="p">(</span><span class="n">GetCustomerByIdQuery</span> <span class="n">request</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">customers</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_mediator</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="k">new</span> <span class="nf">GetAllCustomerQuery</span><span class="p">());</span>
            <span class="kt">var</span> <span class="n">selectedCustomer</span> <span class="p">=</span> <span class="n">customers</span><span class="p">.</span><span class="nf">FirstOrDefault</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">request</span><span class="p">.</span><span class="n">Id</span><span class="p">);</span>
            <span class="k">return</span> <span class="n">selectedCustomer</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>


</code></pre></div></div>

<ul>
  <li>Create Role Query classes and Handlers in Ordering.Application/Queries/Role folder</li>
</ul>

<p><strong>GetRoleByIdQuery.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Common.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.DTOs</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Application.Queries.Role</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">GetRoleByIdQuery</span> <span class="p">:</span> <span class="n">IRequest</span><span class="p">&lt;</span><span class="n">RoleResponseDTO</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">RoleId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">class</span> <span class="nc">GetRoleQueryByIdHandler</span> <span class="p">:</span> <span class="n">IRequestHandler</span><span class="p">&lt;</span><span class="n">GetRoleByIdQuery</span><span class="p">,</span> <span class="n">RoleResponseDTO</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IIdentityService</span> <span class="n">_identityService</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">GetRoleQueryByIdHandler</span><span class="p">(</span><span class="n">IIdentityService</span> <span class="n">identityService</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_identityService</span> <span class="p">=</span> <span class="n">identityService</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">RoleResponseDTO</span><span class="p">&gt;</span> <span class="nf">Handle</span><span class="p">(</span><span class="n">GetRoleByIdQuery</span> <span class="n">request</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">role</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_identityService</span><span class="p">.</span><span class="nf">GetRoleByIdAsync</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">RoleId</span><span class="p">);</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">RoleResponseDTO</span><span class="p">()</span> <span class="p">{</span> <span class="n">Id</span> <span class="p">=</span> <span class="n">role</span><span class="p">.</span><span class="n">id</span><span class="p">,</span> <span class="n">RoleName</span> <span class="p">=</span> <span class="n">role</span><span class="p">.</span><span class="n">roleName</span><span class="p">};</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>GetRoleQuery.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Common.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.DTOs</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Application.Queries.Role</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">GetRoleQuery</span> <span class="p">:</span> <span class="n">IRequest</span><span class="p">&lt;</span><span class="n">IList</span><span class="p">&lt;</span><span class="n">RoleResponseDTO</span><span class="p">&gt;&gt;</span>
    <span class="p">{</span>

    <span class="p">}</span>

    <span class="k">public</span> <span class="k">class</span> <span class="nc">GetRoleQueryHandler</span> <span class="p">:</span> <span class="n">IRequestHandler</span><span class="p">&lt;</span><span class="n">GetRoleQuery</span><span class="p">,</span> <span class="n">IList</span><span class="p">&lt;</span><span class="n">RoleResponseDTO</span><span class="p">&gt;&gt;</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IIdentityService</span> <span class="n">_identityService</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">GetRoleQueryHandler</span><span class="p">(</span><span class="n">IIdentityService</span> <span class="n">identityService</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_identityService</span> <span class="p">=</span> <span class="n">identityService</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IList</span><span class="p">&lt;</span><span class="n">RoleResponseDTO</span><span class="p">&gt;&gt;</span> <span class="nf">Handle</span><span class="p">(</span><span class="n">GetRoleQuery</span> <span class="n">request</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">roles</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_identityService</span><span class="p">.</span><span class="nf">GetRolesAsync</span><span class="p">();</span>
            <span class="k">return</span> <span class="n">roles</span><span class="p">.</span><span class="nf">Select</span><span class="p">(</span><span class="n">role</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="nf">RoleResponseDTO</span><span class="p">()</span> <span class="p">{</span> <span class="n">Id</span> <span class="p">=</span> <span class="n">role</span><span class="p">.</span><span class="n">id</span><span class="p">,</span> <span class="n">RoleName</span> <span class="p">=</span> <span class="n">role</span><span class="p">.</span><span class="n">roleName</span><span class="p">}).</span><span class="nf">ToList</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create Users Query classes and Handlers in Ordering.Application/Queries/User folder</li>
</ul>

<p><strong>GetAllUsersDetailsQuery.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Common.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.DTOs</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Application.Queries.User</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">GetAllUsersDetailsQuery</span> <span class="p">:</span> <span class="n">IRequest</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">UserDetailsResponseDTO</span><span class="p">&gt;&gt;</span>
    <span class="p">{</span>
        <span class="c1">//public string UserId { get; set; }</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">class</span> <span class="nc">GetAllUsersDetailsQueryHandler</span> <span class="p">:</span> <span class="n">IRequestHandler</span><span class="p">&lt;</span><span class="n">GetAllUsersDetailsQuery</span><span class="p">,</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">UserDetailsResponseDTO</span><span class="p">&gt;&gt;</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IIdentityService</span> <span class="n">_identityService</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">GetAllUsersDetailsQueryHandler</span><span class="p">(</span><span class="n">IIdentityService</span> <span class="n">identityService</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_identityService</span> <span class="p">=</span> <span class="n">identityService</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">UserDetailsResponseDTO</span><span class="p">&gt;&gt;</span> <span class="nf">Handle</span><span class="p">(</span><span class="n">GetAllUsersDetailsQuery</span> <span class="n">request</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
        <span class="p">{</span>
            

            <span class="kt">var</span> <span class="n">users</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_identityService</span><span class="p">.</span><span class="nf">GetAllUsersAsync</span><span class="p">();</span>
            <span class="kt">var</span> <span class="n">userDetails</span> <span class="p">=</span> <span class="n">users</span><span class="p">.</span><span class="nf">Select</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="nf">UserDetailsResponseDTO</span><span class="p">()</span>
            <span class="p">{</span>
                <span class="n">Id</span> <span class="p">=</span> <span class="n">x</span><span class="p">.</span><span class="n">id</span><span class="p">,</span>
                <span class="n">Email</span> <span class="p">=</span> <span class="n">x</span><span class="p">.</span><span class="n">email</span><span class="p">,</span>
                <span class="n">UserName</span> <span class="p">=</span> <span class="n">x</span><span class="p">.</span><span class="n">userName</span>
                <span class="c1">//Roles = (IList&lt;string&gt;)_identityService.GetUserRolesAsync(x.id) // Converstion problem</span>
            <span class="p">}).</span><span class="nf">ToList</span><span class="p">();</span>

            <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">user</span> <span class="k">in</span> <span class="n">userDetails</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">user</span><span class="p">.</span><span class="n">Roles</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_identityService</span><span class="p">.</span><span class="nf">GetUserRolesAsync</span><span class="p">(</span><span class="n">user</span><span class="p">.</span><span class="n">Id</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="n">userDetails</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>
<p><strong>GetUserDetailsByUserNameQuery.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Common.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.DTOs</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Application.Queries.User</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">GetUserDetailsByUserNameQuery</span> <span class="p">:</span> <span class="n">IRequest</span><span class="p">&lt;</span><span class="n">UserDetailsResponseDTO</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">UserName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">class</span> <span class="nc">GetUserDetailsByUserNameQueryHandler</span> <span class="p">:</span> <span class="n">IRequestHandler</span><span class="p">&lt;</span><span class="n">GetUserDetailsByUserNameQuery</span><span class="p">,</span> <span class="n">UserDetailsResponseDTO</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IIdentityService</span> <span class="n">_identityService</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">GetUserDetailsByUserNameQueryHandler</span><span class="p">(</span><span class="n">IIdentityService</span> <span class="n">identityService</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_identityService</span> <span class="p">=</span> <span class="n">identityService</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">UserDetailsResponseDTO</span><span class="p">&gt;</span> <span class="nf">Handle</span><span class="p">(</span><span class="n">GetUserDetailsByUserNameQuery</span> <span class="n">request</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="p">(</span><span class="n">userId</span><span class="p">,</span> <span class="n">fullName</span><span class="p">,</span> <span class="n">userName</span><span class="p">,</span> <span class="n">email</span><span class="p">,</span> <span class="n">roles</span> <span class="p">)</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_identityService</span><span class="p">.</span><span class="nf">GetUserDetailsByUserNameAsync</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">UserName</span><span class="p">);</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">UserDetailsResponseDTO</span><span class="p">()</span> <span class="p">{</span> <span class="n">Id</span> <span class="p">=</span> <span class="n">userId</span><span class="p">,</span> <span class="n">FullName</span> <span class="p">=</span> <span class="n">fullName</span><span class="p">,</span> <span class="n">UserName</span> <span class="p">=</span> <span class="n">userName</span><span class="p">,</span> <span class="n">Email</span> <span class="p">=</span> <span class="n">email</span><span class="p">,</span> <span class="n">Roles</span> <span class="p">=</span> <span class="n">roles</span> <span class="p">};</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>GetUserDetailsQuery.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Common.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.DTOs</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Application.Queries.User</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">GetUserDetailsQuery</span> <span class="p">:</span> <span class="n">IRequest</span><span class="p">&lt;</span><span class="n">UserDetailsResponseDTO</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">UserId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">class</span> <span class="nc">GetUserDetailsQueryHandler</span> <span class="p">:</span> <span class="n">IRequestHandler</span><span class="p">&lt;</span><span class="n">GetUserDetailsQuery</span><span class="p">,</span> <span class="n">UserDetailsResponseDTO</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IIdentityService</span> <span class="n">_identityService</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">GetUserDetailsQueryHandler</span><span class="p">(</span><span class="n">IIdentityService</span> <span class="n">identityService</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_identityService</span> <span class="p">=</span> <span class="n">identityService</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">UserDetailsResponseDTO</span><span class="p">&gt;</span> <span class="nf">Handle</span><span class="p">(</span><span class="n">GetUserDetailsQuery</span> <span class="n">request</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="p">(</span><span class="n">userId</span><span class="p">,</span> <span class="n">fullName</span><span class="p">,</span> <span class="n">userName</span><span class="p">,</span> <span class="n">email</span><span class="p">,</span> <span class="n">roles</span> <span class="p">)</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_identityService</span><span class="p">.</span><span class="nf">GetUserDetailsAsync</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">UserId</span><span class="p">);</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">UserDetailsResponseDTO</span><span class="p">()</span> <span class="p">{</span> <span class="n">Id</span> <span class="p">=</span> <span class="n">userId</span><span class="p">,</span> <span class="n">FullName</span> <span class="p">=</span> <span class="n">fullName</span><span class="p">,</span> <span class="n">UserName</span> <span class="p">=</span> <span class="n">userName</span><span class="p">,</span> <span class="n">Email</span> <span class="p">=</span> <span class="n">email</span><span class="p">,</span> <span class="n">Roles</span> <span class="p">=</span> <span class="n">roles</span> <span class="p">};</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>
<p><strong>GetUserQuery.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Common.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.DTOs</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Application.Queries.User</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">GetUserQuery</span> <span class="p">:</span> <span class="n">IRequest</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">UserResponseDTO</span><span class="p">&gt;&gt;</span>
    <span class="p">{</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">class</span> <span class="nc">GetUserQueryHandler</span> <span class="p">:</span> <span class="n">IRequestHandler</span><span class="p">&lt;</span><span class="n">GetUserQuery</span><span class="p">,</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">UserResponseDTO</span><span class="p">&gt;&gt;</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IIdentityService</span> <span class="n">_identityService</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">GetUserQueryHandler</span><span class="p">(</span><span class="n">IIdentityService</span> <span class="n">identityService</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_identityService</span> <span class="p">=</span> <span class="n">identityService</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">UserResponseDTO</span><span class="p">&gt;&gt;</span> <span class="nf">Handle</span><span class="p">(</span><span class="n">GetUserQuery</span> <span class="n">request</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">users</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_identityService</span><span class="p">.</span><span class="nf">GetAllUsersAsync</span><span class="p">();</span>
            <span class="k">return</span> <span class="n">users</span><span class="p">.</span><span class="nf">Select</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="nf">UserResponseDTO</span><span class="p">()</span>
            <span class="p">{</span>
                <span class="n">Id</span> <span class="p">=</span> <span class="n">x</span><span class="p">.</span><span class="n">id</span><span class="p">,</span>
                <span class="n">FullName</span> <span class="p">=</span> <span class="n">x</span><span class="p">.</span><span class="n">fullName</span><span class="p">,</span>
                <span class="n">UserName</span> <span class="p">=</span> <span class="n">x</span><span class="p">.</span><span class="n">userName</span><span class="p">,</span>
                <span class="n">Email</span> <span class="p">=</span> <span class="n">x</span><span class="p">.</span><span class="n">email</span>
            <span class="p">}).</span><span class="nf">ToList</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create CustomerMapper and OrderingMappingProfile class in Ordering.Application/Mapper folder</li>
</ul>

<p><strong>CustomerMapper.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">AutoMapper</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Application.Mapper</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CustomerMapper</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">static</span> <span class="k">readonly</span> <span class="n">Lazy</span><span class="p">&lt;</span><span class="n">IMapper</span><span class="p">&gt;</span> <span class="n">Lazy</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Lazy</span><span class="p">&lt;</span><span class="n">IMapper</span><span class="p">&gt;(()=&gt;</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">config</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">MapperConfiguration</span><span class="p">(</span><span class="n">cfg</span> <span class="p">=&gt;</span>
            <span class="p">{</span>
                <span class="n">cfg</span><span class="p">.</span><span class="n">ShouldMapProperty</span> <span class="p">=</span> <span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">GetMethod</span><span class="p">.</span><span class="n">IsPublic</span> <span class="p">||</span> <span class="n">p</span><span class="p">.</span><span class="n">GetMethod</span><span class="p">.</span><span class="n">IsAssembly</span><span class="p">;</span>
                <span class="n">cfg</span><span class="p">.</span><span class="n">AddProfile</span><span class="p">&lt;</span><span class="n">OrderingMappingProfile</span><span class="p">&gt;();</span>
            <span class="p">});</span>

            <span class="kt">var</span> <span class="n">mapper</span> <span class="p">=</span> <span class="n">config</span><span class="p">.</span><span class="nf">CreateMapper</span><span class="p">();</span>
            <span class="k">return</span> <span class="n">mapper</span><span class="p">;</span>
        <span class="p">});</span>

        <span class="k">public</span> <span class="k">static</span> <span class="n">IMapper</span> <span class="n">Mapper</span> <span class="p">=&gt;</span> <span class="n">Lazy</span><span class="p">.</span><span class="n">Value</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p><strong>OrderingMappingProfile.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">AutoMapper</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Commands</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Response</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Entities</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Application.Mapper</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">OrderingMappingProfile</span> <span class="p">:</span> <span class="n">Profile</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">OrderingMappingProfile</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">CreateMap</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">,</span> <span class="n">CustomerResponse</span><span class="p">&gt;().</span><span class="nf">ReverseMap</span><span class="p">();</span>
            <span class="n">CreateMap</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">,</span> <span class="n">CreateCustomerCommand</span><span class="p">&gt;().</span><span class="nf">ReverseMap</span><span class="p">();</span>
            <span class="n">CreateMap</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">,</span> <span class="n">EditCustomerCommand</span><span class="p">&gt;().</span><span class="nf">ReverseMap</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 8: Orgnaize Ordering.API project. This is an web api project.</strong></p>

<ul>
  <li>Create AuthController in Ordering.API/Controllers folder</li>
</ul>

<p><strong>AuthController.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Commands.Auth</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.DTOs</span><span class="p">;</span>


<span class="k">namespace</span> <span class="nn">Ordering.API.Controllers</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
    <span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">AuthController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IMediator</span> <span class="n">_mediator</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">AuthController</span><span class="p">(</span><span class="n">IMediator</span> <span class="n">mediator</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_mediator</span> <span class="p">=</span> <span class="n">mediator</span><span class="p">;</span>
        <span class="p">}</span>


        <span class="p">[</span><span class="nf">HttpPost</span><span class="p">(</span><span class="s">"Login"</span><span class="p">)]</span>
        <span class="p">[</span><span class="nf">ProducesDefaultResponseType</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">AuthResponseDTO</span><span class="p">))]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">Login</span><span class="p">([</span><span class="n">FromBody</span><span class="p">]</span> <span class="n">AuthCommand</span> <span class="n">command</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="k">await</span> <span class="n">_mediator</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="n">command</span><span class="p">));</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create CustomerController in Ordering.API/Controllers folder</li>
</ul>

<p><strong>CustomerController.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Authentication.JwtBearer</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Authorization</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Cors</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Commands.Customers.Create</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Commands.Customers.Delete</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Commands.Customers.Update</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.DTOs</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Queries.Customers</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Entities</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.API.Controllers</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nf">EnableCors</span><span class="p">(</span><span class="s">"CorsPolicy"</span><span class="p">)]</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
    <span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
    <span class="c1">//[Authorize(Roles = "Admin,Member")]</span>
    <span class="c1">//[Authorize]</span>
    <span class="c1">//[Authorize(AuthenticationSchemes = Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerDefaults.AuthenticationScheme, Roles = "Admin,Member")]</span>

    <span class="c1">// Authorize with a specific scheme</span>
    <span class="c1">//[Authorize(AuthenticationSchemes = JwtBearerDefaults.AuthenticationScheme, Roles = "Admin,Member,User")]</span>
    <span class="p">[</span><span class="nf">Authorize</span><span class="p">(</span><span class="n">AuthenticationSchemes</span> <span class="p">=</span> <span class="n">JwtBearerDefaults</span><span class="p">.</span><span class="n">AuthenticationScheme</span><span class="p">)]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CustomerController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IMediator</span> <span class="n">_mediator</span><span class="p">;</span>
        <span class="k">public</span> <span class="nf">CustomerController</span><span class="p">(</span><span class="n">IMediator</span> <span class="n">mediator</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_mediator</span> <span class="p">=</span> <span class="n">mediator</span><span class="p">;</span>
        <span class="p">}</span>


        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"GetAll"</span><span class="p">)]</span>
        <span class="p">[</span><span class="nf">ProducesResponseType</span><span class="p">(</span><span class="n">StatusCodes</span><span class="p">.</span><span class="n">Status200OK</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;&gt;</span> <span class="nf">Get</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_mediator</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="k">new</span> <span class="nf">GetAllCustomerQuery</span><span class="p">());</span>
        <span class="p">}</span>

        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="p">[</span><span class="nf">ProducesResponseType</span><span class="p">(</span><span class="n">StatusCodes</span><span class="p">.</span><span class="n">Status200OK</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="nf">Get</span><span class="p">(</span><span class="n">Int64</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_mediator</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="k">new</span> <span class="nf">GetCustomerByIdQuery</span><span class="p">(</span><span class="n">id</span><span class="p">));</span>
        <span class="p">}</span>

        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"email"</span><span class="p">)]</span>
        <span class="p">[</span><span class="nf">ProducesResponseType</span><span class="p">(</span><span class="n">StatusCodes</span><span class="p">.</span><span class="n">Status200OK</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="nf">GetByEmail</span><span class="p">(</span><span class="kt">string</span> <span class="n">email</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_mediator</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="k">new</span> <span class="nf">GetCustomerByEmailQuery</span><span class="p">(</span><span class="n">email</span><span class="p">));</span>
        <span class="p">}</span>

        <span class="p">[</span><span class="nf">HttpPost</span><span class="p">(</span><span class="s">"Create"</span><span class="p">)]</span>
        <span class="p">[</span><span class="nf">ProducesResponseType</span><span class="p">(</span><span class="n">StatusCodes</span><span class="p">.</span><span class="n">Status200OK</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">CustomerResponse</span><span class="p">&gt;&gt;</span> <span class="nf">CreateCustomer</span><span class="p">([</span><span class="n">FromBody</span><span class="p">]</span> <span class="n">CreateCustomerCommand</span> <span class="n">command</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_mediator</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="n">command</span><span class="p">);</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
        <span class="p">}</span>


        <span class="p">[</span><span class="nf">HttpPut</span><span class="p">(</span><span class="s">"Edit/{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&gt;</span> <span class="nf">Edit</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="p">[</span><span class="n">FromBody</span><span class="p">]</span> <span class="n">EditCustomerCommand</span> <span class="n">command</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">command</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">id</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_mediator</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="n">command</span><span class="p">);</span>
                    <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
                <span class="p">}</span>
                <span class="k">else</span>
                <span class="p">{</span>
                    <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exp</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">(</span><span class="n">exp</span><span class="p">.</span><span class="n">Message</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>


        <span class="p">[</span><span class="nf">Authorize</span><span class="p">(</span><span class="n">Roles</span> <span class="p">=</span> <span class="s">"Admin, Management"</span><span class="p">)]</span>
        <span class="p">[</span><span class="nf">HttpDelete</span><span class="p">(</span><span class="s">"Delete/{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&gt;</span> <span class="nf">DeleteCustomer</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="kt">string</span> <span class="n">result</span> <span class="p">=</span> <span class="kt">string</span><span class="p">.</span><span class="n">Empty</span><span class="p">;</span>
                <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_mediator</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="k">new</span> <span class="nf">DeleteCustomerCommand</span><span class="p">(</span><span class="n">id</span><span class="p">));</span>
                <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exp</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">(</span><span class="n">exp</span><span class="p">.</span><span class="n">Message</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>

    <span class="p">}</span>
<span class="p">}</span>


</code></pre></div></div>

<ul>
  <li>Create RoleController in Ordering.API/Controllers folder</li>
</ul>

<p><strong>RoleController.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Authentication.JwtBearer</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Authorization</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Commands.Role.Create</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Commands.Role.Delete</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Commands.Role.Update</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.DTOs</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Queries.Role</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.API.Controllers</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
    <span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
    <span class="p">[</span><span class="nf">Authorize</span><span class="p">(</span><span class="n">AuthenticationSchemes</span> <span class="p">=</span> <span class="n">JwtBearerDefaults</span><span class="p">.</span><span class="n">AuthenticationScheme</span><span class="p">)]</span>
    <span class="p">[</span><span class="nf">Authorize</span><span class="p">(</span><span class="n">Roles</span> <span class="p">=</span> <span class="s">"Admin, Management"</span><span class="p">)]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">RoleController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">readonly</span> <span class="n">IMediator</span> <span class="n">_mediator</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">RoleController</span><span class="p">(</span><span class="n">IMediator</span> <span class="n">mediator</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_mediator</span> <span class="p">=</span> <span class="n">mediator</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="p">[</span><span class="nf">HttpPost</span><span class="p">(</span><span class="s">"Create"</span><span class="p">)]</span>
        <span class="p">[</span><span class="nf">ProducesDefaultResponseType</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="kt">int</span><span class="p">))]</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&gt;</span> <span class="nf">CreateRoleAsync</span><span class="p">(</span><span class="n">RoleCreateCommand</span> <span class="n">command</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="k">await</span> <span class="n">_mediator</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="n">command</span><span class="p">));</span>
        <span class="p">}</span>

        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"GetAll"</span><span class="p">)]</span>
        <span class="p">[</span><span class="nf">ProducesDefaultResponseType</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">List</span><span class="p">&lt;</span><span class="n">RoleResponseDTO</span><span class="p">&gt;))]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">GetRoleAsync</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="k">await</span> <span class="n">_mediator</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="k">new</span> <span class="nf">GetRoleQuery</span><span class="p">()));</span>
        <span class="p">}</span>


        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="p">[</span><span class="nf">ProducesDefaultResponseType</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">RoleResponseDTO</span><span class="p">))]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">GetRoleByIdAsync</span><span class="p">(</span><span class="kt">string</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="k">await</span> <span class="n">_mediator</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="k">new</span> <span class="nf">GetRoleByIdQuery</span><span class="p">()</span> <span class="p">{</span> <span class="n">RoleId</span> <span class="p">=</span> <span class="n">id</span> <span class="p">}));</span>
        <span class="p">}</span>

        <span class="p">[</span><span class="nf">HttpDelete</span><span class="p">(</span><span class="s">"Delete/{id}"</span><span class="p">)]</span>
        <span class="p">[</span><span class="nf">ProducesDefaultResponseType</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="kt">int</span><span class="p">))]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">DeleteRoleAsync</span><span class="p">(</span><span class="kt">string</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="k">await</span> <span class="n">_mediator</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="k">new</span> <span class="nf">DeleteRoleCommand</span><span class="p">()</span>
            <span class="p">{</span>
                <span class="n">RoleId</span> <span class="p">=</span> <span class="n">id</span>
            <span class="p">}));</span>
        <span class="p">}</span>

        <span class="p">[</span><span class="nf">HttpPut</span><span class="p">(</span><span class="s">"Edit/{id}"</span><span class="p">)]</span>
        <span class="p">[</span><span class="nf">ProducesDefaultResponseType</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="kt">int</span><span class="p">))]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&gt;</span> <span class="nf">EditRole</span><span class="p">(</span><span class="kt">string</span> <span class="n">id</span><span class="p">,</span> <span class="p">[</span><span class="n">FromBody</span><span class="p">]</span> <span class="n">UpdateRoleCommand</span> <span class="n">command</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">id</span> <span class="p">==</span> <span class="n">command</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_mediator</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="n">command</span><span class="p">);</span>
                <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">else</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
            <span class="p">}</span>
        <span class="p">}</span>

    <span class="p">}</span>
<span class="p">}</span>


</code></pre></div></div>

<ul>
  <li>Create UserController in Ordering.API/Controllers folder</li>
</ul>

<p><strong>UserController.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Authentication.JwtBearer</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Authorization</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Commands.User.Create</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Commands.User.Delete</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Commands.User.Update</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.DTOs</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Queries.User</span><span class="p">;</span>

<span class="c1">// For more information on enabling Web API for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860</span>

<span class="k">namespace</span> <span class="nn">Ordering.API.Controllers</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
    <span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>

    <span class="p">[</span><span class="nf">Authorize</span><span class="p">(</span><span class="n">AuthenticationSchemes</span> <span class="p">=</span> <span class="n">JwtBearerDefaults</span><span class="p">.</span><span class="n">AuthenticationScheme</span><span class="p">)]</span>
    <span class="p">[</span><span class="nf">Authorize</span><span class="p">(</span><span class="n">Roles</span> <span class="p">=</span> <span class="s">"Admin, Management"</span><span class="p">)]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">UserController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IMediator</span> <span class="n">_mediator</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">UserController</span><span class="p">(</span><span class="n">IMediator</span> <span class="n">mediator</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_mediator</span> <span class="p">=</span> <span class="n">mediator</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="p">[</span><span class="nf">HttpPost</span><span class="p">(</span><span class="s">"Create"</span><span class="p">)]</span>
        <span class="p">[</span><span class="nf">ProducesDefaultResponseType</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="kt">int</span><span class="p">))]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&gt;</span> <span class="nf">CreateUser</span><span class="p">(</span><span class="n">CreateUserCommand</span> <span class="n">command</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="k">await</span> <span class="n">_mediator</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="n">command</span><span class="p">));</span>
        <span class="p">}</span>

        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"GetAll"</span><span class="p">)]</span>
        <span class="p">[</span><span class="nf">ProducesDefaultResponseType</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">List</span><span class="p">&lt;</span><span class="n">UserResponseDTO</span><span class="p">&gt;))]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">GetAllUserAsync</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="k">await</span> <span class="n">_mediator</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="k">new</span> <span class="nf">GetUserQuery</span><span class="p">()));</span>
        <span class="p">}</span>

        <span class="p">[</span><span class="nf">HttpDelete</span><span class="p">(</span><span class="s">"Delete/{userId}"</span><span class="p">)]</span>
        <span class="p">[</span><span class="nf">ProducesDefaultResponseType</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="kt">int</span><span class="p">))]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">DeleteUser</span><span class="p">(</span><span class="kt">string</span> <span class="n">userId</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_mediator</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="k">new</span> <span class="nf">DeleteUserCommand</span><span class="p">()</span> <span class="p">{</span> <span class="n">Id</span> <span class="p">=</span> <span class="n">userId</span><span class="p">});</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"GetUserDetails/{userId}"</span><span class="p">)]</span>
        <span class="p">[</span><span class="nf">ProducesDefaultResponseType</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">UserDetailsResponseDTO</span><span class="p">))]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">GetUserDetails</span><span class="p">(</span><span class="kt">string</span> <span class="n">userId</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_mediator</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="k">new</span> <span class="nf">GetUserDetailsQuery</span><span class="p">()</span> <span class="p">{</span> <span class="n">UserId</span> <span class="p">=</span> <span class="n">userId</span> <span class="p">});</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"GetUserDetailsByUserName/{userName}"</span><span class="p">)]</span>
        <span class="p">[</span><span class="nf">ProducesDefaultResponseType</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">UserDetailsResponseDTO</span><span class="p">))]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">GetUserDetailsByUserName</span><span class="p">(</span><span class="kt">string</span> <span class="n">userName</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_mediator</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="k">new</span> <span class="nf">GetUserDetailsByUserNameQuery</span><span class="p">()</span> <span class="p">{</span> <span class="n">UserName</span> <span class="p">=</span> <span class="n">userName</span> <span class="p">});</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="p">[</span><span class="nf">HttpPost</span><span class="p">(</span><span class="s">"AssignRoles"</span><span class="p">)]</span>
        <span class="p">[</span><span class="nf">ProducesDefaultResponseType</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="kt">int</span><span class="p">))]</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&gt;</span> <span class="nf">AssignRoles</span><span class="p">(</span><span class="n">AssignUsersRoleCommand</span> <span class="n">command</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_mediator</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="n">command</span><span class="p">);</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="p">[</span><span class="nf">HttpPut</span><span class="p">(</span><span class="s">"EditUserRoles"</span><span class="p">)]</span>
        <span class="p">[</span><span class="nf">ProducesDefaultResponseType</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="kt">int</span><span class="p">))]</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&gt;</span> <span class="nf">EditUserRoles</span><span class="p">(</span><span class="n">UpdateUserRolesCommand</span> <span class="n">command</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_mediator</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="n">command</span><span class="p">);</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"GetAllUserDetails"</span><span class="p">)]</span>
        <span class="p">[</span><span class="nf">ProducesDefaultResponseType</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">UserDetailsResponseDTO</span><span class="p">))]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">GetAllUserDetails</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_mediator</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="k">new</span> <span class="nf">GetAllUsersDetailsQuery</span><span class="p">());</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
        <span class="p">}</span>


        <span class="p">[</span><span class="nf">HttpPut</span><span class="p">(</span><span class="s">"EditUserProfile/{id}"</span><span class="p">)]</span>
        <span class="p">[</span><span class="nf">ProducesDefaultResponseType</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="kt">int</span><span class="p">))]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&gt;</span> <span class="nf">EditUserProfile</span><span class="p">(</span><span class="kt">string</span> <span class="n">id</span><span class="p">,</span> <span class="p">[</span><span class="n">FromBody</span><span class="p">]</span><span class="n">EditUserProfileCommand</span> <span class="n">command</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">id</span> <span class="p">==</span> <span class="n">command</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_mediator</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="n">command</span><span class="p">);</span>
                <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">else</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
            <span class="p">}</span>
        <span class="p">}</span>

    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Set connection string in appsettings.json file. I have used here SQLite database for simplicity.</li>
</ul>

<p><strong>appsettings.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"Logging"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"LogLevel"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Default"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Information"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Microsoft.AspNetCore"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Warning"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"ConnectionStrings"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"DefaultConnection"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Data Source=db/ordering.db"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"Jwt"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"Key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"$ecret@Key$shouldbeEncrypted!"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Issuer"</span><span class="p">:</span><span class="w"> </span><span class="s2">"jwt"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Audience"</span><span class="p">:</span><span class="w"> </span><span class="s2">"jwt"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"ExpiryMinutes"</span><span class="p">:</span><span class="w"> </span><span class="mi">120</span><span class="w">
  </span><span class="p">},</span><span class="w">

  </span><span class="nl">"AllowedHosts"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*"</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<ul>
  <li>Modify the Program Class as follows</li>
</ul>

<p><strong>Program.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Authentication.JwtBearer</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.IdentityModel.Tokens</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.OpenApi.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Commands.Customers.Create</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Commands.User.Create</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Common.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Infrastructure</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Infrastructure.Services</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Reflection</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Text</span><span class="p">;</span>


<span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="n">WebApplication</span><span class="p">.</span><span class="nf">CreateBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>



<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">();</span>

<span class="c1">// For authentication</span>
<span class="kt">var</span> <span class="n">_key</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="n">Configuration</span><span class="p">[</span><span class="s">"Jwt:Key"</span><span class="p">];</span>
<span class="kt">var</span> <span class="n">_issuer</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="n">Configuration</span><span class="p">[</span><span class="s">"Jwt:Issuer"</span><span class="p">];</span>
<span class="kt">var</span> <span class="n">_audience</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="n">Configuration</span><span class="p">[</span><span class="s">"Jwt:Audience"</span><span class="p">];</span>
<span class="kt">var</span> <span class="n">_expirtyMinutes</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="n">Configuration</span><span class="p">[</span><span class="s">"Jwt:ExpiryMinutes"</span><span class="p">];</span>


<span class="c1">// Configuration for token</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddAuthentication</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span>
<span class="p">{</span>
    <span class="n">x</span><span class="p">.</span><span class="n">DefaultAuthenticateScheme</span> <span class="p">=</span> <span class="n">JwtBearerDefaults</span><span class="p">.</span><span class="n">AuthenticationScheme</span><span class="p">;</span>
    <span class="n">x</span><span class="p">.</span><span class="n">DefaultChallengeScheme</span> <span class="p">=</span> <span class="n">JwtBearerDefaults</span><span class="p">.</span><span class="n">AuthenticationScheme</span><span class="p">;</span>
    <span class="n">x</span><span class="p">.</span><span class="n">DefaultScheme</span> <span class="p">=</span> <span class="n">JwtBearerDefaults</span><span class="p">.</span><span class="n">AuthenticationScheme</span><span class="p">;</span>
<span class="p">}).</span><span class="nf">AddJwtBearer</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span>
<span class="p">{</span>
    <span class="n">x</span><span class="p">.</span><span class="n">RequireHttpsMetadata</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
    <span class="n">x</span><span class="p">.</span><span class="n">SaveToken</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
    <span class="n">x</span><span class="p">.</span><span class="n">TokenValidationParameters</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">TokenValidationParameters</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">ValidateIssuer</span> <span class="p">=</span> <span class="k">true</span><span class="p">,</span>
        <span class="n">ValidateAudience</span> <span class="p">=</span> <span class="k">true</span><span class="p">,</span>
        <span class="n">ValidateLifetime</span> <span class="p">=</span> <span class="k">true</span><span class="p">,</span>
        <span class="n">ValidateIssuerSigningKey</span> <span class="p">=</span> <span class="k">true</span><span class="p">,</span>
        <span class="n">ValidAudience</span> <span class="p">=</span> <span class="n">_audience</span><span class="p">,</span>
        <span class="n">ValidIssuer</span> <span class="p">=</span> <span class="n">_issuer</span><span class="p">,</span>
        <span class="n">IssuerSigningKey</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">SymmetricSecurityKey</span><span class="p">(</span><span class="n">Encoding</span><span class="p">.</span><span class="n">UTF8</span><span class="p">.</span><span class="nf">GetBytes</span><span class="p">(</span><span class="n">_key</span><span class="p">)),</span>
        <span class="n">ClockSkew</span> <span class="p">=</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="nf">FromMinutes</span><span class="p">(</span><span class="n">Convert</span><span class="p">.</span><span class="nf">ToDouble</span><span class="p">(</span><span class="n">_expirtyMinutes</span><span class="p">))</span>

    <span class="p">};</span>
<span class="p">});</span>


<span class="c1">// Dependency injection with key</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddSingleton</span><span class="p">&lt;</span><span class="n">ITokenGenerator</span><span class="p">&gt;(</span><span class="k">new</span> <span class="nf">TokenGenerator</span><span class="p">(</span><span class="n">_key</span><span class="p">,</span> <span class="n">_issuer</span><span class="p">,</span> <span class="n">_audience</span><span class="p">,</span> <span class="n">_expirtyMinutes</span><span class="p">));</span>


<span class="c1">// Include Infrastructur Dependency</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddInfrastructure</span><span class="p">(</span><span class="n">builder</span><span class="p">.</span><span class="n">Configuration</span><span class="p">);</span>



<span class="c1">// Configuration for Sqlite</span>
<span class="c1">//builder.Services.AddDbContext&lt;OrderingContext&gt;(options =&gt; options.UseSqlite(builder.Configuration.GetConnectionString("DefaultConnection")));</span>

<span class="c1">// Register dependencies</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddMediatR</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">CreateCustomerCommandHandler</span><span class="p">).</span><span class="nf">GetTypeInfo</span><span class="p">().</span><span class="n">Assembly</span><span class="p">);</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddMediatR</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">CreateUserCommandHandler</span><span class="p">).</span><span class="nf">GetTypeInfo</span><span class="p">().</span><span class="n">Assembly</span><span class="p">);</span>



<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddCors</span><span class="p">(</span><span class="n">c</span> <span class="p">=&gt;</span>
<span class="p">{</span>
    <span class="n">c</span><span class="p">.</span><span class="nf">AddPolicy</span><span class="p">(</span><span class="s">"CorsPolicy"</span><span class="p">,</span> <span class="n">options</span> <span class="p">=&gt;</span> <span class="n">options</span><span class="p">.</span><span class="nf">AllowAnyOrigin</span><span class="p">().</span><span class="nf">AllowAnyMethod</span><span class="p">().</span><span class="nf">AllowAnyHeader</span><span class="p">());</span>
<span class="p">});</span>



<span class="c1">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddEndpointsApiExplorer</span><span class="p">();</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddSwaggerGen</span><span class="p">(</span><span class="n">c</span> <span class="p">=&gt;</span>
<span class="p">{</span>

    <span class="c1">// To enable authorization using swagger (Jwt)</span>
    <span class="n">c</span><span class="p">.</span><span class="nf">AddSecurityDefinition</span><span class="p">(</span><span class="s">"Bearer"</span><span class="p">,</span> <span class="k">new</span> <span class="nf">OpenApiSecurityScheme</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">Name</span> <span class="p">=</span> <span class="s">"Authorization"</span><span class="p">,</span>
        <span class="n">Type</span> <span class="p">=</span> <span class="n">SecuritySchemeType</span><span class="p">.</span><span class="n">ApiKey</span><span class="p">,</span>
        <span class="n">Scheme</span> <span class="p">=</span> <span class="s">"Bearer"</span><span class="p">,</span>
        <span class="n">BearerFormat</span> <span class="p">=</span> <span class="s">"JWT"</span><span class="p">,</span>
        <span class="n">In</span> <span class="p">=</span> <span class="n">ParameterLocation</span><span class="p">.</span><span class="n">Header</span><span class="p">,</span>
        <span class="n">Description</span> <span class="p">=</span> <span class="s">"JWT Authorization header using the Bearer scheme. \r\n\r\n Enter 'Bearer' [space] and then your token in the text input below.\r\n\r\nExample: \"Bearer {token}\""</span><span class="p">,</span>
    <span class="p">});</span>

    <span class="n">c</span><span class="p">.</span><span class="nf">AddSecurityRequirement</span><span class="p">(</span><span class="k">new</span> <span class="n">OpenApiSecurityRequirement</span>
    <span class="p">{</span>
        <span class="p">{</span>
            <span class="k">new</span> <span class="n">OpenApiSecurityScheme</span>
                <span class="p">{</span>
                            <span class="n">Reference</span> <span class="p">=</span> <span class="k">new</span> <span class="n">OpenApiReference</span>
                            <span class="p">{</span>
                                <span class="n">Type</span> <span class="p">=</span> <span class="n">ReferenceType</span><span class="p">.</span><span class="n">SecurityScheme</span><span class="p">,</span>
                                <span class="n">Id</span> <span class="p">=</span> <span class="s">"Bearer"</span>
                            <span class="p">}</span>
                        <span class="p">},</span>
                        <span class="k">new</span> <span class="kt">string</span><span class="p">[]</span> <span class="p">{}</span>

                    <span class="p">}</span>
                <span class="p">});</span>

<span class="p">});</span>

<span class="kt">var</span> <span class="n">app</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

<span class="c1">// Configure the HTTP request pipeline.</span>
<span class="k">if</span> <span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">Environment</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
<span class="p">{</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwagger</span><span class="p">();</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwaggerUI</span><span class="p">();</span>
<span class="p">}</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseHttpsRedirection</span><span class="p">();</span>

<span class="c1">// Must be betwwen app.UseRouting() and app.UseEndPoints()</span>
<span class="c1">// maintain middleware order</span>
<span class="n">app</span><span class="p">.</span><span class="nf">UseCors</span><span class="p">(</span><span class="s">"CorsPolicy"</span><span class="p">);</span>

<span class="c1">// Added for authentication</span>
<span class="c1">// Maintain middleware order</span>
<span class="n">app</span><span class="p">.</span><span class="nf">UseAuthentication</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseAuthorization</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">MapControllers</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>

</code></pre></div></div>

<p><strong>Step 9: Run migration command on package manager console</strong></p>

<ul>
  <li>In package manager console select Oredering.Infrastructure as defult project.</li>
  <li>Run the following command</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Add-Migration</span> <span class="nf">initialsqlmig</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Update-Database</span> <span class="nf">-Verbose</span>
</code></pre></div></div>

<p><strong>Step 10: Now run your application and test using swagger.</strong></p>

<p><strong><a href="https://github.com/mahedee/code-sample02/tree/main/token-based-auth-core/ECommerce">Source code</a></strong></p>]]></content><author><name>Mahedee Hasan</name></author><category term="Web API" /><category term="ASP.NET Core" /><category term="C#" /><category term="Dapper" /><category term="EF" /><category term="JWT" /><category term="Auth" /><category term="webapi" /><category term="aspnetcore" /><category term="csharp" /><category term="ef" /><category term="dapper" /><category term="jwt" /><category term="auth" /><summary type="html"><![CDATA[Authentication and authorization is a key part of an application. Sometimes we struggle to implement authentication and authorization in a web api application. In this article I will show you, how to implement authentication and authorization using JWT in an asp.net core web application.]]></summary></entry></feed>