var store = [{
        "title": "জীবনের মানে কি?",
        "excerpt":"        বয়স যখন ৪০ পার হয়- তখন উচ্চ শিক্ষিত আর নিম্ন শিক্ষিত সবাই সমান…            বয়স যখন ৫০ পার হয়- তখন কালো ফর্সা সবই সমান। কার চেহারা দেখতে কতটুকু সুন্দর, দেখতে কে স্মার্ট, এটা নিয়ে আর কেউ ভাবেনা…            বয়স যখন ৬০ পার হয়- তখন উচ্চ পজিশনে চাকুরী আর নিম্ন পজিশনে চাকুরী এটা আর কোন ব্যাপার নয়। এমনকি একজন পিয়নও অবসরে যাওয়া বসের দিকে তাকায় না…            বয়স যখন ৭০- তখন আপনার বড় ফ্ল্যাট, বড় বাসা কোন গর্বের বিষয় নয়। বরং বাসা বড় হলে সেটা মেইনটেইন করাই কঠিন, ছোট একটি রুম হলেই আপনার চলে…            বয়স যখন ৮০- তখন আপনার টাকা থাকলে যা, না থাকলেও তা। আপনার টাকা খরচ করার ইচ্ছা হলে সেটা খরচ করার জায়গাও খুঁজে পাবেন না…            বয়স যখন ৯০- আপনার ঘুমানো আর জেগে থাকা একই। আপনি জেগে ওঠার পর কী করবেন, আপনি নিজেও জানেন না…            বয়স যখন ১০০- তখন আপনার বেঁচে থাকা আর বেঁচে না থাকা এতে কিছুই আসে যায় না। পৃথিবীবাসী আপনাকে নিয়ে আর ভাবে না…       জীবনের মানে তো এটুকুই… এর বেশি কিছুই না… এতো চাপ নিয়ে, লোভ করে, মানুষের ক্ষতি করে লাভ কী?   সংগৃহিত  ","categories": ["Bangla","Lesson Learned","Story","Collected"],
        "tags": ["Bangla","lessonlearned","story","collected"],
        "url": "http://localhost:4000/jiboner-mane-ki/",
        "teaser":null},{
        "title": "Uses of Once as Conjunction",
        "excerpt":"When used as a conjunction, “once” is used to express the idea of “as soon as” or “after”. It is often used to indicate a condition or action that must be completed before another action can take place. The basic sentence structure is:   Once + [condition or action] + [resulting action]   Here are some examples based on different tenses:   Present tense:     Once + [simple present tense], [simple present tense]   Once he finishes his work, he goes to the gym.   Once she finishes her homework, she can go outside and play.   Once he gets his driver’s license, he will be able to drive to school.   Past tense:     Once + [simple past tense], [simple past tense]   Once she finished her dinner, she went to bed.   Once we arrived at the airport, we checked in our luggage.   Once they finished their meal, they paid the bill and left the restaurant.   Future tense:     Once + [simple present tense], [simple future tense]   Once they understand the rules, they will play the game.   Once I graduate from college, I plan to travel for a year.   Once they save enough money, they will buy a house.   In each of these examples, “once” is used to introduce a condition or action that must occur before the resulting action can take place. The use of “once” implies that the condition or action is expected to happen relatively soon or in the near future. The resulting action is usually expressed in the simple present, simple past, or future tense, depending on the context.   Here are some examples of using “once” as a conjunction in the passive voice:   Present tense:     Once the work is finished, the report will be reviewed by the manager.   Once the package is delivered, a confirmation email will be sent.   Past tense:     Once the project was completed, a presentation was given to the stakeholders.   Once the document was signed, it was filed in the cabinet.   Future tense:     Once the tickets are bought, the seats will be assigned by the airline.   Once the task is done, the progress will be updated by the team leader.   In each of these examples, the passive voice is used to emphasize the object of the sentence rather than the subject. The use of “once” as a conjunction indicates that the action is conditional and that the resulting action will happen after the condition has been met. The use of the passive voice adds a sense of formality or objectivity to the sentence.  ","categories": ["Grammar","English"],
        "tags": ["english","grammar"],
        "url": "http://localhost:4000/uses-of-once-as-conjunction/",
        "teaser":null},{
        "title": "Learn About Microsoft SQL Server Disaster Recovery Best Practices",
        "excerpt":"Disaster Recovery is one of the burning issues in today’s tech world. While data has become the most important component of business, the rate of data loss, data deletion, and data corruption is increasing. You never know when a disaster might occur and attack our database. Therefore, you have to prepare ourselves to deal with any disaster. Precautions about disaster in equally important for SQL Server user. SQL Database is often vulnerable to different natural and man-created disasters. To safeguard the data, it is necessary to have complete knowledge about Microsoft SQL Server disaster recovery best practices. In this post, we will share with you some of Disaster Recovery practices that are considered as the best.   Best Practices Of SQL Server Disaster Recovery   The most effective practices of SQL Disaster Recovery involve looking into the database architecture and create solutions for every possible situation. The solutions can involve backup and other measures of data protection. Let us learn about all the best Disaster Recovery practices.      Design a Solution that Properly Addresses the Problem   While creating a solution for any problem, you have to make sure that it does not end up creating more problems. Though no design can be called perfect, you must focus on developing the best design that is capable of solving the problem and provide enhanced opportunity. While doing this, always note down why you picked up this particular design over others and how can this meet your goal of solving the problem. At times, when improvement in the solution is expected, design must be compatible with the current SQL Server version. Also, consider the impacts of changes on all the dependent materials, if you are planning to make any changes.      Find out Possible Weakness of the Solution   No solution design is completely flawless and that is why it is crucial to accept the limitations. This acknowledgment will help you to prepare for the disaster in a better way. There is no shame in having solutions with limited capabilities because of restricted resources and changing circumstances. But the main issue lies in accepting it and find about about automated solutions that can fulfill the limitations of the design. The same policy should be followed in other cases like active-active replication, availability group, etc.           Consider All other Possible Situations  Usually, the solution design and its limitations are evaluated based on our knowledge. But what if something else happens that you are not even considering at this point? Your knowledge (or the lack of it) can be your weak point. To counter these issues, you can consider hiring a consultant/ expert to check the design and find out its limitations.            Create the Solution  After you find out about all the possible flaws of your design, you need to create the solution as soon as possible. The solution can be anything: backup restoration or Server addition. But, it should be created without wasting any time as you do not know when the disaster might happen. The more you wait, the more risk you put your data into.            Drill, Drill, and Drill  The most important thing after setting up the Disaster Recovery Solution is to practice/ drill it. Without drilling, the complete Disaster Recovery project remains incomplete. For drilling, you can re-create the situation in a test environment and then run the solution. Do not forget to have a backup of the solution. Saving the solution script in the test environment without backup can put you in danger if the Server fails.            Train Junior DBAs  Drilling for Disaster Recovery is the best time to train the database admins who are new in this profession. Through simulation, they can be prepared for the worst situations that may occur to cover by themselves. Through practices, junior DBAs become comfortable with the “state of panic” and learn how to handle the situation.            Coordination between All the teams  In case of large-sized environments, the entire disaster recovery procedure should be done by coordinating with multiple teams like DB Admin team, System team and Developer team. In organizations that do not have this type of team division, coordination must involve everyone who might become affected by the disaster.            Appreciation and Incentive  Do not forget to appreciate yourself and everyone else involved in creating the solution and drilling it. Acknowledgment of all the good work done will function as the incentive for future.            SQL Recovery Tool As The Last Resort For Data Recovery  These are some of the best practices that can be done to protect SQL Server database during any disaster. However, these cannot assure the foolproof safety of your database items. If you have lost data from your database due to any disaster, you can take the help of SQL Recovery Tool. This application can retrieve all the deleted data from your database regardless of the cause of data loss. This application is suitable for all the latest versions of SQL Server including SQL 2017.       Conclusion  In this post, we have depicted Microsoft SQL Server Disaster Recovery best practices. Reading this, users will become aware of the practices that should be performed to ensure maximum protection against the disasters. If you still lose some data, use SQL Recovery to get back lost data of your database.   Author: Andrew Jackson  ","categories": ["SQL Server","Database"],
        "tags": ["sqlserver","database"],
        "url": "http://localhost:4000/sample-post/",
        "teaser":null},{
        "title": "Configure service mesh using Istio with an asp.net core applications on Kubernetes",
        "excerpt":"Overview   A service mesh is a configurable infrustructure layer. It have capabilities to handle service-to-service communication, resilency, and many cross-cutting concerns. Proxy is a key component of service mesh. Sidecar proxy is injected in each services in this concept. Here I will show you service mesh communication using Istio with asp.net core applications on Kubernetes environment.   Istio is an open platform for providing a uniform way to integrate microservices, manage traffic flow accross microservices, enforce policies and aggregate telemetry data. Istio uses following tools -      Prometheus: It monitors everything in the cluster.   Grafana: Data visualization tools.   Jaeger: It’s used for distributed tracing.   Tools and Technology used  The following tools and technologies used to configure Istio     Visual Studio 2022   Visual C#   ASP.NET Core Web API   Ocelot   Docker desktop   Kubernetes   Istio   Let’s configure Istio on asp.net core web api applications.   Step 1: Download Istio     Go to the link below and download “istio-1.12.2-win.zip”  https://github.com/istio/istio/releases/tag/1.12.2   or download and extract the latest release automatically (Linux or macOS): curl -L https://istio.io/downloadIstio | sh -           Extract zip file and move to the Istio Package directory. For example, istio-1.12.2.            Then installation directory contains:             Sample applications in sample/directory       The istioctl client binary in the bin/directory           Step 2: Add istioctl client to your path      Use the following command in git bash to add istioctl client to your path.   export PATH=$PWD/bin:$PATH   Note: The above command doesn’t run on powershell. So, use git bash. If you close the git bash, istioctl doesn’t work. You have to run the above command again.      To check istioctl client use the following command in git bash.   istioctl   Step 3: Install Istio      For installation, we use the demo configuration profile. It’s selected to have a good set of defaults for testing, but there are other profiles for production or performance testing. Use below command to install Istio.   istioctl install --set profile=demo -y     Use the following command to verify Istio.   kubectl get all -n istio-system   Output:   NAME                                        READY   STATUS    RESTARTS   AGE pod/istio-egressgateway-c9cbbd99f-wk265     1/1     Running   0          87s pod/istio-ingressgateway-7c8bc47b49-xpvvc   1/1     Running   0          86s pod/istiod-765596f7ff-2p72v                 1/1     Running   0          3m13s  NAME                           TYPE           CLUSTER-IP       EXTERNAL-IP   PORT(S)                                                                      AGE service/istio-egressgateway    ClusterIP      10.101.157.106   &lt;none&gt;        80/TCP,443/TCP                                                               85s service/istio-ingressgateway   LoadBalancer   10.109.205.109   localhost     15021:32149/TCP,80:30563/TCP,443:30960/TCP,31400:32369/TCP,15443:32309/TCP   85s service/istiod                 ClusterIP      10.109.211.149   &lt;none&gt;        15010/TCP,15012/TCP,443/TCP,15014/TCP                                        3m12s  NAME                                   READY   UP-TO-DATE   AVAILABLE   AGE deployment.apps/istio-egressgateway    1/1     1            1           87s deployment.apps/istio-ingressgateway   1/1     1            1           86s deployment.apps/istiod                 1/1     1            1           3m13s  NAME                                              DESIRED   CURRENT   READY   AGE replicaset.apps/istio-egressgateway-c9cbbd99f     1         1         1       87s replicaset.apps/istio-ingressgateway-7c8bc47b49   1         1         1       86s replicaset.apps/istiod-765596f7ff                 1         1         1       3m13s   Step 4: Configure for auto proxy injection      Add a namespace label to instruct Istio to automatically inject Envoy sidecar proxies when you deploy your application later. Use below command to configure default namespance with Istio sidecar proxy.   kubectl label namespace default istio-injection=enabled      Check label by using below command   kubectl describe namespace default   Step 5: Create asp.net core applications      Create 4 asp.net core web api projects.   Projects names are Catalog.API, Location.API, Ordering.API and BFF.Web.   Step 6: Organize Catalog.API Project      Add the following nuget packages in the project.   Install-Package Microsoft.EntityFrameworkCore.InMemory Install-Package Microsoft.EntityFrameworkCore.SqlServer Install-Package Microsoft.EntityFrameworkCore.Tools      Add a model class name Product in the model folder.   Product.cs   using System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema;  namespace Catalog.API.Model {     public class Product     {         [Key]         [DatabaseGenerated(DatabaseGeneratedOption.Identity)]         public int Id { get; set; }         public string Name { get; set; }          public string Description { get; set; }          public decimal Price { get; set; }          public int AvailableStock { get; set; }          public int RestockThreshold { get; set; }     } }       Add CatalogContext class in Db folder.   CatalogContext.cs   using Catalog.API.Model; using Microsoft.EntityFrameworkCore;  namespace Catalog.API.Db {     public class CatalogContext : DbContext     {         public CatalogContext(DbContextOptions&lt;CatalogContext&gt; options) : base(options)         {          }         protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)         {             base.OnConfiguring(optionsBuilder);         }          public DbSet&lt;Product&gt; Products { get; set; }     } }       Configure InMemory database and modify Program class as follows.   Program.cs   using Catalog.API.Db; using Microsoft.EntityFrameworkCore;  var builder = WebApplication.CreateBuilder(args);  // Add services to the container.  builder.Services.AddControllers();  builder.Services.AddDbContext&lt;CatalogContext&gt;(opt =&gt; opt.UseInMemoryDatabase(\"CatalogDB\"));  // Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle builder.Services.AddEndpointsApiExplorer(); builder.Services.AddSwaggerGen();  var app = builder.Build();  // Configure the HTTP request pipeline. if (app.Environment.IsDevelopment()) {     app.UseSwagger();     app.UseSwaggerUI(); }  app.UseHttpsRedirection();  app.UseAuthorization();  app.MapControllers();  app.Run();       Create ProductsController in Controllers folder   ProductsController.cs   #nullable disable using Catalog.API.Db; using Catalog.API.Model; using Microsoft.AspNetCore.Mvc; using Microsoft.EntityFrameworkCore;  namespace Catalog.API.Controllers {     [Route(\"api/[controller]\")]     [ApiController]     public class ProductsController : ControllerBase     {         private readonly CatalogContext _context;          public ProductsController(CatalogContext context)         {             _context = context;         }          // GET: api/Products         [HttpGet(\"GetAll\")]         public async Task&lt;ActionResult&lt;IEnumerable&lt;Product&gt;&gt;&gt; GetProducts()         {             return await _context.Products.ToListAsync();         }          // GET: api/Products/5         [HttpGet(\"{id}\")]         public async Task&lt;ActionResult&lt;Product&gt;&gt; GetProduct(int id)         {             var product = await _context.Products.FindAsync(id);              if (product == null)             {                 return NotFound();             }              return product;         }          // PUT: api/Products/5         // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754         [HttpPut(\"Edit/{id}\")]         public async Task&lt;IActionResult&gt; PutProduct(int id, Product product)         {             if (id != product.Id)             {                 return BadRequest();             }              _context.Entry(product).State = EntityState.Modified;              try             {                 await _context.SaveChangesAsync();             }             catch (DbUpdateConcurrencyException)             {                 if (!ProductExists(id))                 {                     return NotFound();                 }                 else                 {                     throw;                 }             }              return NoContent();         }          // POST: api/Products         // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754         [HttpPost(\"Add\")]         public async Task&lt;ActionResult&lt;Product&gt;&gt; PostProduct(Product product)         {             _context.Products.Add(product);             await _context.SaveChangesAsync();              return CreatedAtAction(\"GetProduct\", new { id = product.Id }, product);         }          // DELETE: api/Products/5         [HttpDelete(\"Delete/{id}\")]         public async Task&lt;IActionResult&gt; DeleteProduct(int id)         {             var product = await _context.Products.FindAsync(id);             if (product == null)             {                 return NotFound();             }              _context.Products.Remove(product);             await _context.SaveChangesAsync();              return NoContent();         }          private bool ProductExists(int id)         {             return _context.Products.Any(e =&gt; e.Id == id);         }     } }       Add Dockerfile in the Catalog.API Project   Dockerfile    FROM mcr.microsoft.com/dotnet/aspnet:6.0 AS base WORKDIR /app EXPOSE 80 EXPOSE 443  FROM mcr.microsoft.com/dotnet/sdk:6.0 AS build WORKDIR /src COPY [\"/Catalog.API.csproj\", \"Catalog.API/\"] RUN dotnet restore \"Catalog.API/Catalog.API.csproj\" WORKDIR \"/src/Catalog.API\" COPY . . WORKDIR \"/src/Catalog.API\" RUN dotnet build \"Catalog.API.csproj\" -c Release -o /app/build  FROM build AS publish RUN dotnet publish \"Catalog.API.csproj\" -c Release -o /app/publish  FROM base AS final WORKDIR /app COPY --from=publish /app/publish . ENTRYPOINT [\"dotnet\", \"Catalog.API.dll\"]       Go to director where dockerfile reside and run the following command to build docker image.   docker image build -t mahedee/catalog:1.0.1 .   Note: Don’t forgot to add . at the end of the command.      To configure pod add the following to file with code in Deploy/k8s folder   deployment.yml    # Configure Deployment apiVersion: apps/v1 kind: Deployment metadata:   name: catalogapi-deployment spec:   selector:     matchLabels:       app: catalogapi-pod   template:     metadata:       labels:         app: catalogapi-pod     spec:       containers:       - name: catalogapi-container         image: mahedee/catalog:1.0.1         resources:           limits:             memory: \"128Mi\" # 128 mili bytes             cpu: \"500m\"     # 500 mili cpu         ports:         - containerPort: 80     service.yml    # Configure service apiVersion: v1 kind: Service metadata:   name: catalogapi-service spec:   selector:     app: catalogapi-pod   ports:   - port: 8001     targetPort: 80   type: LoadBalancer # use LoadBalancer if you want to accesss out side of pod       Go to the Deploy/k8s directory and run the following commands.   kubectl apply -f .\\deployment.yml  kubectl apply -f .\\service.yml   Step 7: Check pods have proxy auto-injected      By default istio will be injected automatically under this namespace.   Use the following command to check pods have proxy auto-injected.   kubectl get pods   // To check pods  Output:   NAME                                      READY   STATUS    RESTARTS   AGE catalogapi-deployment-68d56ccddd-sqfnj    2/2     Running   0          14m      Show the catalogapi proxy setup using the following command   kubectl describe pods catalogapi-deployment-68d56ccddd-sqfnj       Find all proxy container using the following command   docker container ls --filter name=istio-proxy_*      Check proxy processes for the locationapi   docker container ls --filter name=istio-proxy_catalogapi-deployment* -q   Step 8: Organize Location.API      Create a Controller name CountriesController in the Controllers folder as follows.   CountriesController.cs   using Microsoft.AspNetCore.Mvc;  namespace Location.API.Controllers {     [ApiController]     [Route(\"api/[controller]\")]     public class CountriesController : ControllerBase     {       [HttpGet(\"GetAll\")]       public IEnumerable&lt;string&gt; Get()         {             return new string[] {\"America\",\"Bangladesh\", \"Canada\" };         }     } }       Add docker file in the project root directory as follows.   Dockerfile    FROM mcr.microsoft.com/dotnet/aspnet:6.0 AS base WORKDIR /app EXPOSE 80 EXPOSE 443  ENV ASPNETCORE_URLS=http://*:80; ENV ASPNETCORE_ENVIRONMENT=Development  FROM mcr.microsoft.com/dotnet/sdk:6.0 AS build WORKDIR /src  COPY [\"/Location.API.csproj\", \"Location.API/\"] RUN dotnet restore \"Location.API/Location.API.csproj\"  WORKDIR \"/src/Location.API\" COPY . . WORKDIR \"/src/Location.API\" RUN dotnet build \"Location.API.csproj\" -c Release -o /app/build  FROM build AS publish RUN dotnet publish \"Location.API.csproj\" -c Release -o /app/publish  FROM base AS final WORKDIR /app COPY --from=publish /app/publish . ENTRYPOINT [\"dotnet\", \"Location.API.dll\"]      Go to the root directory where Dockerfile reside and run the following command to build docker image.   docker image build -t mahedee/location:1.0.1 .      To configure pod add the following to file with code in Deploy/k8s folder   deployment.yml   apiVersion: apps/v1 kind: Deployment metadata:   name: locationapi-deployment spec:   selector:     matchLabels:       app: locationapi-pod   template:     metadata:       labels:         app: locationapi-pod     spec:       containers:       - name: locationapi-container         image: mahedee/location:1.0.1         resources:           limits:             memory: \"128Mi\" # 128 mili bytes             cpu: \"500m\"     # 500 mili cpu         ports:         - containerPort: 80    service.yml   apiVersion: v1 kind: Service metadata:   name: locationapi-service spec:   selector:     app: locationapi-pod   ports:   - port: 8002     targetPort: 80   #type: LoadBalancer      Go to the Deploy/k8s directory and run the following commands.   kubectl apply -f .\\deployment.yml  kubectl apply -f .\\service.yml   Step 9: Organize Ordering.API      Add the following nuget packages in the project.   Install-Package Microsoft.EntityFrameworkCore.InMemory Install-Package Microsoft.EntityFrameworkCore.SqlServer Install-Package Microsoft.EntityFrameworkCore.Tools      Create Order class in Models folders as follows.   Order.cs   namespace Ordering.API.Models {     public class Order     {         public int Id { get; set; }         public string Address { get; set; }          public DateTime OrderDate { get; set; }          public string Comments { get; set; }     } }       Create Ordering OrderingContext class in Db folder.   OrderingContext.cs   using Microsoft.EntityFrameworkCore; using Ordering.API.Models;  namespace Ordering.API.Db {     public class OrderingContext : DbContext     {         public OrderingContext(DbContextOptions&lt;OrderingContext&gt; options) : base(options)         {          }         public DbSet&lt;Ordering.API.Models.Order&gt; Order { get; set; }     } }       Modify Program.cs to add dbcontext.   Program.cs   using Microsoft.EntityFrameworkCore; using Ordering.API.Db;  var builder = WebApplication.CreateBuilder(args);  // Add services to the container.  builder.Services.AddControllers();  builder.Services.AddDbContext&lt;OrderingContext&gt;(opt =&gt; opt.UseInMemoryDatabase(\"CatalogDB\"));  // Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle builder.Services.AddEndpointsApiExplorer(); builder.Services.AddSwaggerGen();  var app = builder.Build();  // Configure the HTTP request pipeline. if (app.Environment.IsDevelopment()) {     app.UseSwagger();     app.UseSwaggerUI(); }  app.UseHttpsRedirection();  app.UseAuthorization();  app.MapControllers();  app.Run();       Create OrdersController in Controllers folder as follows.   #nullable disable using Microsoft.AspNetCore.Mvc; using Microsoft.EntityFrameworkCore; using Ordering.API.Db; using Ordering.API.Models;  namespace Ordering.API.Controllers {     [Route(\"api/[controller]\")]     [ApiController]     public class OrdersController : ControllerBase     {         private readonly OrderingContext _context;          public OrdersController(OrderingContext context)         {             _context = context;         }          // GET: api/Orders         [HttpGet(\"GetAll\")]         public async Task&lt;ActionResult&lt;IEnumerable&lt;Order&gt;&gt;&gt; GetOrder()         {             return await _context.Order.ToListAsync();         }          // GET: api/Orders/5         [HttpGet(\"{id}\")]         public async Task&lt;ActionResult&lt;Order&gt;&gt; GetOrder(int id)         {             var order = await _context.Order.FindAsync(id);              if (order == null)             {                 return NotFound();             }              return order;         }          // PUT: api/Orders/5         // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754         [HttpPut(\"Edit/{id}\")]         public async Task&lt;IActionResult&gt; PutOrder(int id, Order order)         {             if (id != order.Id)             {                 return BadRequest();             }              _context.Entry(order).State = EntityState.Modified;              try             {                 await _context.SaveChangesAsync();             }             catch (DbUpdateConcurrencyException)             {                 if (!OrderExists(id))                 {                     return NotFound();                 }                 else                 {                     throw;                 }             }              return NoContent();         }          // POST: api/Orders         // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754         [HttpPost(\"Add\")]         public async Task&lt;ActionResult&lt;Order&gt;&gt; PostOrder(Order order)         {             _context.Order.Add(order);             await _context.SaveChangesAsync();              return CreatedAtAction(\"GetOrder\", new { id = order.Id }, order);         }          // DELETE: api/Orders/5         [HttpDelete(\"Delete/{id}\")]         public async Task&lt;IActionResult&gt; DeleteOrder(int id)         {             var order = await _context.Order.FindAsync(id);             if (order == null)             {                 return NotFound();             }              _context.Order.Remove(order);             await _context.SaveChangesAsync();              return NoContent();         }          private bool OrderExists(int id)         {             return _context.Order.Any(e =&gt; e.Id == id);         }     } }       Create Docker file in the root directory   Dockerfile   FROM mcr.microsoft.com/dotnet/aspnet:6.0 AS base WORKDIR /app EXPOSE 80 EXPOSE 443  ENV ASPNETCORE_URLS=http://*:80; ENV ASPNETCORE_ENVIRONMENT=Development  FROM mcr.microsoft.com/dotnet/sdk:6.0 AS build WORKDIR /src COPY [\"/Ordering.API.csproj\", \"Ordering.API/\"] RUN dotnet restore \"Ordering.API/Ordering.API.csproj\" WORKDIR \"/src/Ordering.API\" COPY . . WORKDIR \"/src/Ordering.API\" RUN dotnet build \"Ordering.API.csproj\" -c Release -o /app/build  FROM build AS publish RUN dotnet publish \"Ordering.API.csproj\" -c Release -o /app/publish  FROM base AS final WORKDIR /app COPY --from=publish /app/publish . ENTRYPOINT [\"dotnet\", \"Ordering.API.dll\"]      Go to the directory where docker file exists and run the following command to build docker image.   docker image build -t mahedee/ordering:1.0.1 .      To configure pod add the following to file with code in Deploy/k8s folder   deployment.yml   apiVersion: apps/v1 kind: Deployment metadata:   name: locationapi-deployment spec:   selector:     matchLabels:       app: locationapi-pod   template:     metadata:       labels:         app: locationapi-pod     spec:       containers:       - name: locationapi-container         image: mahedee/location:1.0.1         resources:           limits:             memory: \"128Mi\" # 128 mili bytes             cpu: \"500m\"     # 500 mili cpu         ports:         - containerPort: 80    service.yml   apiVersion: v1 kind: Service metadata:   name: orderingapi-service spec:   selector:     app: orderingapi-pod   ports:   - port: 8003     targetPort: 80   type: LoadBalancer      Go to the Deploy/k8s directory and run the following commands.   kubectl apply -f .\\deployment.yml  kubectl apply -f .\\service.yml   Step 10: Organize API Gateway BFF.Web      Install the following nuget packages in the project.   Install-Package Ocelot Install-Package Ocelot.Cache.CacheManager      Add ocelot.json file to configure gateway   ocelot.json   {   \"Routes\": [      //---Catalog service : Start ------------//     {       \"DownstreamPathTemplate\": \"/{url}\",       \"DownstreamScheme\": \"http\",       \"DownstreamHostAndPorts\": [         {           \"Host\": \"catalogapi-service\",           \"Port\": 8001         }       ],        \"UpstreamPathTemplate\": \"/Catalog/{url}\",       \"UpstreamHttpMethod\": [ \"Get\", \"Post\", \"Put\", \"Delete\" ]     },      //---Catalog service : End ------------//      //---Location Service: Start ----------//     {       \"DownstreamPathTemplate\": \"/{url}\",       \"DownstreamScheme\": \"http\",       \"DownstreamHostAndPorts\": [         {           \"Host\": \"locationapi-service\",           \"Port\": 8002         }       ],        \"UpstreamPathTemplate\": \"/Location/{url}\",       \"UpstreamHttpMethod\": [ \"Get\", \"Post\", \"Put\", \"Delete\" ]     },      //---Location Service: End ----------//       //---Ordering Service: Start ----------//     // Catch All Routing     {       \"DownstreamPathTemplate\": \"/{url}\",       \"DownstreamScheme\": \"http\",       \"DownstreamHostAndPorts\": [         {           \"Host\": \"orderingapi-service\",           \"Port\": 8003         }       ],        \"UpstreamPathTemplate\": \"/Ordering/{url}\",       \"UpstreamHttpMethod\": [ \"Get\", \"Post\", \"Put\", \"Delete\" ]     }    ],    //---Ordering Service: End ----------//    //https://localhost:7282/api/Products/GetAll    \"GlobalConfiguration\": {     // enable request correleation id to capture request information     \"RequestIdKey\": \"X-Correlation-Id\",     \"BaseUrl\": \"https://localhost:7205/\"   } }       Modify Program.cs to configure ocelot   Program.cs   using Ocelot.DependencyInjection; using Ocelot.Middleware; using Ocelot.Cache.CacheManager;   var builder = WebApplication.CreateBuilder(args);   var environment = Environment.GetEnvironmentVariable(\"ASPNETCORE_ENVIRONMENT\"); builder.Configuration.SetBasePath(Directory.GetCurrentDirectory())     .AddJsonFile(\"ocelot.json\", optional: false, reloadOnChange: true)     .AddEnvironmentVariables();   // Add services to the container.  builder.Services.AddControllers(); // Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle builder.Services.AddEndpointsApiExplorer();  // Swagger for ocelot //builder.Services.AddSwaggerForOcelot(builder.Configuration); //builder.Services.AddSwaggerForOcelot(); builder.Services.AddSwaggerGen();  //For ocelot builder.Services.AddOcelot()          // Added for caching     .AddCacheManager(x =&gt; {         x.WithDictionaryHandle();     });  var app = builder.Build();  // Configure the HTTP request pipeline. if (app.Environment.IsDevelopment()) {     app.UseSwagger();     app.UseSwaggerUI();     //app.UseSwaggerForOcelotUI(); }  app.UseOcelot();  app.UseHttpsRedirection();  app.UseAuthorization();  app.MapControllers();  app.Run();       Add docker file in the root directory.   Dockerfile   #See https://aka.ms/containerfastmode to understand how Visual Studio uses this Dockerfile to build your images for faster debugging.  FROM mcr.microsoft.com/dotnet/aspnet:6.0 AS base WORKDIR /app EXPOSE 80 EXPOSE 443  ENV ASPNETCORE_URLS=http://*:80; ENV ASPNETCORE_ENVIRONMENT=Development  FROM mcr.microsoft.com/dotnet/sdk:6.0 AS build WORKDIR /src COPY [\"/BFF.Web.csproj\", \"BFF.Web/\"] RUN dotnet restore \"BFF.Web/BFF.Web.csproj\"  WORKDIR \"/src/BFF.Web\" COPY . . WORKDIR \"/src/BFF.Web\" RUN dotnet build \"BFF.Web.csproj\" -c Release -o /app/build  FROM build AS publish RUN dotnet publish \"BFF.Web.csproj\" -c Release -o /app/publish  FROM base AS final WORKDIR /app COPY --from=publish /app/publish . ENTRYPOINT [\"dotnet\", \"BFF.Web.dll\"]      Go to director where dockerfile reside and run the following command to build docker image.   docker image build -t mahedee/bff.web:1.0.1 .      To configure pod and service add the following yml file with code in Deploy/k8s folder   deployment.yml    apiVersion: apps/v1 kind: Deployment metadata:   name: bffweb-deployment spec:   selector:     matchLabels:       app: bffweb-pod   template:     metadata:       labels:         app: bffweb-pod     spec:       containers:       - name: bffweb-container         image: mahedee/bff.web:1.0.1         resources:           limits:             memory: \"128Mi\"             cpu: \"500m\"         ports:         - containerPort: 80  ---  apiVersion: v1 kind: Service metadata:   name: bffweb-service spec:   selector:     app: bffweb-pod   ports:   - port: 8011     targetPort: 80   type: LoadBalancer        Go to the Deploy/k8s directory and run the following commands.   kubectl apply -f .\\deployment.yml      Now you can running services using in the kubernetes using the following command   kubectl get svc   Output:    NAME                  TYPE           CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGE bffweb-service        LoadBalancer   10.111.186.235   localhost     8011:31690/TCP   10m catalogapi-service    LoadBalancer   10.101.130.94    localhost     8001:30710/TCP   138m kubernetes            ClusterIP      10.96.0.1        &lt;none&gt;        443/TCP          3d20h locationapi-service   ClusterIP      10.100.204.33    &lt;none&gt;        8002/TCP         7m57s orderingapi-service   LoadBalancer   10.96.12.11      localhost     8003:31264/TCP   15m       You can now access catalog api, location api and ordering api using bffweb using the following URL        You can use postman for CRUD Operation       http://localhost:8011/Catalog/api/Products/GetAll       http://localhost:8011/Location/api/Countries/GetAll       http://localhost:8011/Ordering/api/Orders/GetAll       Visualizing Service Mesh   Step 11: Install Kiali dashboard      Go to the Istio’s directory. Install Kiali and other addons and wait for them to be deployed. Execute below command inside Istio folder. Use Git bash instead of powershell.   kubectl apply -f samples/addons      Execute below command and wait till get success roll out message.   kubectl rollout status deployment/kiali -n istio-system   Note: If there are errors trying to install the addons, try running the command again. There may be some timing issues which will be resolved when the command is run again.      Verify the deployment with below command.   kubectl get po -n istio-system   Output:   NAME                                    READY   STATUS    RESTARTS   AGE grafana-6ccd56f4b6-sc894                1/1     Running   0          13m istio-egressgateway-c9cbbd99f-wk265     1/1     Running   0          87m istio-ingressgateway-7c8bc47b49-xpvvc   1/1     Running   0          87m istiod-765596f7ff-2p72v                 1/1     Running   0          89m jaeger-5d44bc5c5d-g2wcl                 1/1     Running   0          13m kiali-79b86ff5bc-cqwrp                  1/1     Running   0          13m prometheus-64fd8ccd65-lglld             2/2     Running   0          13m      Now run the Kiali dashboard using the below command   istioctl dashboard kiali  Kiali dashboard will be open.  Hit the gateway URL. Use the following URL and hit several times and you will get the reflect in kiali dashbaord as below.   http://localhost:8011/Catalog/api/Products/GetAll   http://localhost:8011/Location/api/Countries/GetAll   http://localhost:8011/Ordering/api/Orders/GetAll      Step 12: Monitoring with Prometheus &amp; Grafana      Check Prometheus and Grafana is running using the following command.   kubectl get po -n istio-system      Run Prometheus dashboard using the following command   istioctl dashboard prometheus   View graph in diffrent ways like -      Select istio_requests_total.   Switch to Graph.   Check Status/Targets - Kubernetes service discovery.         Run Grafana dashboard using the following command   istioctl dashboard grafana     Go to Dashboar-&gt;Manage-&gt;Istio and see the dashboar as below.      Step 13: Distributed Tracing using Jaegar UI      Run Jaeger UI using the following command   istioctl dashboard jaeger      Step 14: Logging from Istio and Envoy      Create a YAML file and name the file elasticsearch.yaml  and write below code.   elasticsearch.yaml   # Logging Namespace. All below are a part of this namespace. apiVersion: v1 kind: Namespace metadata:   name: logging --- # Elasticsearch Service apiVersion: v1 kind: Service metadata:   name: elasticsearch   namespace: logging   labels:     app: elasticsearch spec:   ports:   - port: 9200     protocol: TCP     targetPort: db   selector:     app: elasticsearch --- # Elasticsearch Deployment apiVersion: apps/v1 kind: Deployment metadata:   name: elasticsearch   namespace: logging   labels:     app: elasticsearch spec:   replicas: 1   selector:     matchLabels:       app: elasticsearch   template:     metadata:       labels:         app: elasticsearch       annotations:         sidecar.istio.io/inject: \"false\"     spec:       containers:       - image: docker.elastic.co/elasticsearch/elasticsearch-oss:6.1.1         name: elasticsearch         resources:           # need more cpu upon initialization, therefore burstable class           limits:             cpu: 1000m           requests:             cpu: 100m         env:           - name: discovery.type             value: single-node         ports:         - containerPort: 9200           name: db           protocol: TCP         - containerPort: 9300           name: transport           protocol: TCP         volumeMounts:         - name: elasticsearch           mountPath: /data       volumes:       - name: elasticsearch         emptyDir: {}      Create a YAML file and name the file kibana.yaml  and write below code.   kibana.yaml   # Kibana Service apiVersion: v1 kind: Service metadata:   name: kibana   namespace: logging   labels:     app: kibana spec:   ports:   - port: 5601     protocol: TCP     targetPort: ui   selector:     app: kibana --- # Kibana Deployment apiVersion: apps/v1 kind: Deployment metadata:   name: kibana   namespace: logging   labels:     app: kibana spec:   replicas: 1   selector:     matchLabels:       app: kibana   template:     metadata:       labels:         app: kibana       annotations:         sidecar.istio.io/inject: \"false\"     spec:       containers:       - name: kibana         image: docker.elastic.co/kibana/kibana-oss:6.1.1         resources:           # need more cpu upon initialization, therefore burstable class           limits:             cpu: 1000m           requests:             cpu: 100m         env:           - name: ELASTICSEARCH_URL             value: http://elasticsearch:9200         ports:         - containerPort: 5601           name: ui           protocol: TCP --- apiVersion: networking.istio.io/v1alpha3 kind: Gateway metadata:   name: kibana-gateway   namespace: logging spec:   selector:     istio: ingressgateway   servers:   - port:       number: 15033       name: http-kibana       protocol: HTTP     hosts:     - \"*\" --- apiVersion: networking.istio.io/v1alpha3 kind: VirtualService metadata:   name: kibana-vs   namespace: logging spec:   hosts:   - \"*\"   gateways:   - kibana-gateway   http:   - match:     - port: 15033     route:     - destination:         host: kibana         port:           number: 5601       Create a YAML file and name the file fluentd.yaml  and write below code.   fluentd.yaml    apiVersion: v1 kind: ServiceAccount metadata:   name: fluentd   namespace: kube-system --- apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRole metadata:   name: fluentd   namespace: kube-system rules:   - apiGroups:       - \"\"     resources:       - pods       - namespaces     verbs:       - get       - list       - watch --- kind: ClusterRoleBinding apiVersion: rbac.authorization.k8s.io/v1 metadata:   name: fluentd roleRef:   kind: ClusterRole   name: fluentd   apiGroup: rbac.authorization.k8s.io subjects:   - kind: ServiceAccount     name: fluentd     namespace: kube-system --- # Fluentd Service apiVersion: v1 kind: Service metadata:   name: fluentd-es   namespace: kube-system   labels:     app: fluentd-es spec:   ports:     - name: fluentd-tcp       port: 24224       protocol: TCP       targetPort: 24224     - name: fluentd-udp       port: 24224       protocol: UDP       targetPort: 24224   selector:     k8s-app: fluentd-logging --- apiVersion: apps/v1 kind: DaemonSet metadata:   name: fluentd   namespace: kube-system   labels:     k8s-app: fluentd-logging     version: v1     kubernetes.io/cluster-service: \"true\" spec:   selector:     matchLabels:       k8s-app: fluentd-logging   template:     metadata:       labels:         k8s-app: fluentd-logging         version: v1         kubernetes.io/cluster-service: \"true\"     spec:       serviceAccount: fluentd       serviceAccountName: fluentd       tolerations:         - key: node-role.kubernetes.io/master           effect: NoSchedule       containers:         - name: fluentd           image: fluent/fluentd-kubernetes-daemonset:v1.3-debian-elasticsearch           env:             - name: FLUENT_ELASTICSEARCH_HOST               value: \"elasticsearch.logging\"             - name: FLUENT_ELASTICSEARCH_PORT               value: \"9200\"             - name: FLUENT_ELASTICSEARCH_SCHEME               value: \"http\"             - name: FLUENT_UID               value: \"0\"           resources:             limits:               memory: 200Mi             requests:               cpu: 100m               memory: 200Mi           volumeMounts:             - name: varlog               mountPath: /var/log             - name: varlibdockercontainers               mountPath: /var/lib/docker/containers               readOnly: true       terminationGracePeriodSeconds: 30       volumes:         - name: varlog           hostPath:             path: /var/log         - name: varlibdockercontainers           hostPath:             path: /var/lib/docker/containers        Now execute all above file with below commands.   kubectl apply -f elasticsearch.yaml  kubectl apply -f kibana.yaml  kubectl apply -f fluentd.yaml  kubectl get pods -n logging       If you are using docker desktop you can use below command to port forward.   kubectl port-forward svc/kibana 8099:5601 -n logging      Now browse kibana using http://localhost:8099/      Step 15: Configure Istio to Log to Fluentd   Now we are going to configure Istio to use the same FluentD instance, and send proxy logs through FluentD into Elasticsearch. It will be actual adapter configuration that I mentioned earler.      Create a YAMl file and name the file fluentd-istio.yaml and write below code.   fluentd-istio.yaml   # Configuration for logentry instances apiVersion: config.istio.io/v1alpha2 kind: instance metadata:   name: newlog   namespace: istio-system spec:   compiledTemplate: logentry   params:     severity: '\"info\"'     timestamp: request.time     variables:       source: source.labels[\"app\"] | source.workload.name | \"unknown\"       user: source.user | \"unknown\"       destination: destination.labels[\"app\"] | destination.workload.name | \"unknown\"       responseCode: response.code | 0       responseSize: response.size | 0       latency: response.duration | \"0ms\"     monitored_resource_type: '\"UNSPECIFIED\"' --- # Configuration for a Fluentd handler apiVersion: config.istio.io/v1alpha2 kind: handler metadata:   name: handler   namespace: istio-system spec:   compiledAdapter: fluentd   params:     address: \"fluentd-es.kube-system:24224\" --- # Rule to send logentry instances to the Fluentd handler apiVersion: config.istio.io/v1alpha2 kind: rule metadata:   name: newlogtofluentd   namespace: istio-system spec:   match: \"true\" # match for all requests   actions:    - handler: handler      instances:      - newlog ---       Apply the below command   kubectl apply -f fluentd-istio.yaml      Filter on search with kubernetes.container.name is istio-proxy  and we will see logs fron istio proxy.   Some commands you may need   Kubectl Commands   kubectl get ns                   // Get all namesapces  kubectl get svc -n istio-system   // Get services under istio-system name space  kubectl get all -n istio-system   // Get all under istio-system name space  kubectl delete ns istio-system    // Delete namespace name istio-system  kubectl get all                   // Get everything in the kubernetes  kubectl delete --all pods         // Delete all pods  kubectl delete --all pods --namespace=foo  // Delete all pods under the namespace foo  kubectl delete --all deployments --namespace=foo // Delete all deployments under the namespace foo  kubectl delete --all namespaces  // Delete all name spaces  kubectl delete --all svc           // Delete all services  kubectl delete --all deployments    // Delete all deployments    Docker Commands   docker rm -vf $(docker ps -aq)     // To delete all containers including its volumes use  docker rmi -f $(docker images -aq)  // To delete all the images  docker images                       // To check docker images  docker image build -t mahedee/location:1.0.1 .  // create a docker image name mahedee/location:1.0.1     Source Code   ","categories": ["ASP.NET","ASP.NET Core","Web API","Docker","Istio","Kubernetes","Microservices"],
        "tags": ["aspnet","csharp"],
        "url": "http://localhost:4000/service-mesh-istio/",
        "teaser":null},{
        "title": "আল্লাহ যা করেন ভালোর জন্যই করেন",
        "excerpt":"এক রাজার এক মন্ত্রী ছিলো যে সবকিছুর ক্ষেত্রে বলতো “আল্লাহ যা করেন ভালোর জন্যই করেন”।   একবার রাজার হাত কেটে গেলো এবং মন্ত্রী ঐ একই কথা বললো “আল্লাহ যা করেন ভালোর জন্যই করেন।”   মন্ত্রীর এই কথা শুনে রাজা এতোটাই রাগান্বিত হলো যে তাকে বন্দি করে কারাগারে পাঠালো।   নিজের কারাগারের ফায়সালায়ও মন্ত্রীর সেই একই কথা “আল্লাহ যা করেন ভালোর জন্যই করেন।”   রাজা এবং মন্ত্রী সবসময় একসাথে জংগলে শিকারে বের হতো।   কিন্তু এবার রাজা একা গেলেন কারণ মন্ত্রী তখন কারাগারে।   শিকার করার সময় হঠাৎ জংলি লোকেরা এসে রাজাকে ধরে নিয়ে গেলো এবং তাকে তাদের দেবতার জন্য বলি দিতে মনস্থির করলো।   এক পর্যায়ে তারা দেখলো রাজার হাত কাটা এবং এই ধরনের ব্যক্তিকে তারা বলির অযোগ্য মনে করে। ফলে তারা রাজাকে ছেড়ে দিলো।   সুবহান আল্লাহ।   রাজা তখন বুঝতে পারলো যে তার হাত কাটাই তার জন্য কল্যাণকর ছিলো।   রাজা তখন মন্ত্রীকে ছেড়ে দিলো এবং জিজ্ঞেস করলো, “আমার হাত কাটা নাহয় ভালোর জন্য ছিলো কিন্তু তোমার কারাবন্দী হওয়া কিভাবে ভালো ছিলো”?   তখন মন্ত্রী বললো, সবসময় তো শিকারে আপনি আর আমি বের হই অথচ এবার আপনি একা ছিলেন।   যদি আমিও আপনার সাথে থাকতাম তাহলে আপনার জায়গায় আমি বলি হয়ে যেতাম কারণ আমার হাত কাটা ছিলো না।   অতএব কারাগারে থাকাই আমার জন্য কল্যাণের ছিলো। সুতরাং আল্লাহ যা করেন ভালোর জন্যই করেন।   আমরা বুঝি বা না বুঝি প্রতিটা ঘটে যাওয়া ঘটনাই আমাদের জন্য কল্যাণকর যদিও আপাত দৃষ্টিতে তা আমাদের জন্য ক্ষতি মনে হয়।           সংগৃহিত            গল্পের সত্যতা আল্লাহ ভালো জানেন তবে শিক্ষনীয়      ","categories": ["Bangla","Lesson Learned","Story","Collected"],
        "tags": ["Bangla","lessonlearned","story","collected"],
        "url": "http://localhost:4000/allah-ja-koren-valor-jonnei-koren/",
        "teaser":null},{
        "title": "Run Jekyll project on local machine",
        "excerpt":"Step 1: Install Ruby      Download and install ruby from here: https://rubyinstaller.org/downloads/   Step 2: Install bundle      Go to the root directory of the project. Ex. My-blog   Run the following command in the terminal   bundle install   Step 3: Run the application      Go to the root directory of the project. Ex. My-blog   Run the following command in the terminal   bundle exec jekyll serve   Step 4: Output      Browse application using: http://127.0.0.1:4000/ to see the output   For my blog you will see _site is created or updated.   Copy the content of the _site   Pest the content to mahedee.github.io   Commit and push both repo - my-blog and mahedee.github.io   Now browse the blog site   Archive   Run Jekyll project locally   Here is the list of tools or plugins I needed to install to run the blog locally.   Windows      Install jekyll on windows   VSCode extensions      Markdown All in One   Code Spell Checker   Steps      run bundle install (first time only)   bundle exec jekyll serve to serve the application   Tools that didn’t work   For some unknown reason, installing via choco didn’t didn’t work.      Chocolatey (Kept)   Jekyll (Removed)  ","categories": ["Blog","Configuration","Jekyll"],
        "tags": ["jekyll","uncategorized"],
        "url": "http://localhost:4000/run-minimal-mistake-locally-on-windows/",
        "teaser":null},{
        "title": "আইনস্টাইনের ড্রাইভার",
        "excerpt":"আইনস্টাইনের যিনি ড্রাইভার ছিলেন,   তিনি একবার আইনস্টাইনকে বললেন– “স্যার, আপনি প্রতিটি সভায় যে ভাষণ দেন সেগুলো শুনে শুনে আমার মুখস্থ হয়ে গেছে।”   আইনস্টাইন তো অবাক!!!   উনি বললেন– “বেশ, এর পরের মিটিংএ যেখানে যাবো তারা আমাকে চেনেন না, তুমি ওখানে আমার হয়ে ভাষণ দিয়ে দিও। আর আমি ড্রাইভার হয়ে বসে থাকব।”   যেমনি বলা তেমনি কাজ। পরের দিন সভায় তো ড্রাইভার উঠে গেলেন স্টেজে। হুবহু আইনস্টাইন এর ভাষণ গড় গড় করে বলে গেলেন।   উপস্থিত বিদ্বজ্জনেরা তুমুল করতালি দিলেন।   এরপর তারা ড্রাইভারকে আইনস্টাইন ভেবেই গাড়িতে পৌঁছে দিতে এলেন।   সেই সময়ে একজন অধ্যাপক ড্রাইভারকে জিজ্ঞেস করলেন–  “স্যার, ঐ আপেক্ষিক তত্ত্বের যে সংজ্ঞাটা বললেন, সেটা আরেকবার সংক্ষেপে বুঝিয়ে দেবেন?”   আসল আইনস্টাইন দেখলেন এ তো মহাবিপদ! এবার ড্রাইভার ধরা পড়ে যাবে। কিন্তু তিনি ড্রাইভারের উত্তর শুনে তাজ্জব বনে গেলেন।   ড্রাইভার উত্তর দিলো– “এই সহজ জিনিসটা আপনার মাথায় ঢোকেনি? আমার ড্রাইভারকে জিজ্ঞেস করুন, সে বুঝিয়ে দেবে।”   বিঃদ্রঃ- জ্ঞানী ব্যাক্তিদের সাথে চলাফেরা করলে আপনিও জ্ঞানী হয়ে উঠবেন। আপনি যেমন মানুষের সাথে মিশবেন তেমনই আপনার চরিত্র গড়ে উঠবে।   এই জন্যই বলে– “সৎ সঙ্গে স্বর্গবাস। অসৎ সঙ্গে সর্বনাশ।”   সংগৃহিত  ","categories": ["Bangla","Lesson Learned","Story","Collected"],
        "tags": ["Bangla","lessonlearned","story","collected"],
        "url": "http://localhost:4000/einstein-er-driver/",
        "teaser":null},{
        "title": "Some important links",
        "excerpt":"   How to Install XAMPP and WordPress Locally on Windows PC  ","categories": ["Links"],
        "tags": ["uncategorized","links"],
        "url": "http://localhost:4000/some-important-links/",
        "teaser":null},{
        "title": "হীরের হার ও স্বর্ণকারের ছেলে",
        "excerpt":"এক স্বর্ণকারের মৃত্যুর পর তার পরিবারটা বেশ সংকটে পড়ে গেলো। খাদ্য-বস্ত্রে দেখা দিল চরম অভাব।  স্বর্ণকারের বিধবা স্ত্রী তার বড় ছেলেকে একটা হীরের হার দিয়ে বললো–এটা তোমার কাকার দোকানে নিয়ে যাও সে যেন এটা বেচে কিছু টাকার ব্যবস্থা করে দেয়   ছেলেটা হারটি নিয়ে কাকার কাছে গেল। কাকা হারটা ভালো করে পরীক্ষা করে বললো- বেটা, তোমার মাকে গিয়ে বলবে যে এখন বাজার খুবই মন্দা, কয়েকদিন পর বিক্রি করলে ভাল দাম পাওয়া যাবে। কাকা কিছু টাকা ছেলেটিকে দিয়ে বললেন–আপাতত এটা নিয়ে যাও আর কাল থেকে তুমি প্রতিদিন দোকানে আসবে আমি কোন ১দিন ভাল খদ্দোর পেলেই যেন তুমি দৌড়ে হার নিয়ে আসতে পার তাই সারাদিন থাকবে।   পরের দিন থেকে ছেলেটা রোজ দোকানে যেতে লাগলো।সময়ের সাথে সাথে সেখানে সোনা-রুপা-হীরে কাজ শিখতে আরম্ভ করলো। ভাল শিক্ষার ফলে অল্প দিনেই খুব নামি জহুরত বনে গেল। দূর দূরান্ত থেকে লোক তার কাছে সোনাদানা বানাতে ও পরীক্ষা করাতে আসত। খুবই প্রসংশীত হচ্ছিল তার কাজ।   একদিন ছেলেটির কাকা বললো– তোমার মাকে গিয়ে বলবে যে এখন বাজারের অবস্থা বেশ ভালো, তাই সেই হারটা যেন তোমার হাতে দিয়ে দেন। এখন এটা বিক্রি করলে ভালো দাম পাওয়া যাবে।   ছেলেটি ঘরে গিয়ে মায়ের কাছ থেকে হারটি নিয়ে পরীক্ষা করে দেখলো যে এটা একটা নকল হীরের হার। তাই সে হারটা আর কাকার কাছে না নিয়ে বাড়িতেই. রেখে দিলো।   কাকা জিজ্ঞেস করলো– হারটি এনেছো ?ছেলেটি বললো– না কাকা পরীক্ষা করে দেখলাম এটা একটা নকল হার।   তখন কাকা বললো- তুমি যেদিন আমার কাছে হারটি প্রথম নিয়ে এসেছিলে সেদিন আমি দেখেই বুঝে নিয়েছিলাম যে এটা নকল, কিন্তু তখন যদি আমি তোমাকে এই কথাটা বলে দিতাম, তাহলে তোমরা হয়তো ভাবতে যে আজ আমাদের মন্দা সময় বলেই কাকা আমাদের আসল জিনিষকে নকল বলছে।   আজ যখন এ ব্যাপারে তোমার পুরো জ্ঞান হয়ে গেছে, তখন তুমি নিজেই বলছো এটা নকল হার। এই দুনিয়াতে প্রকৃত জ্ঞান ছাড়া তুমি যা কিছু দেখছো যা কিছু ভাবছো সবটাই এই হারের মতই নকল, মিথ্যে।   জ্ঞান ছাড়া কোন জিনিসের বিচার সম্ভব নয়। আর এই ভ্রমের শিকার হয়েই অনেক সম্পর্ক শেষ হয়ে যায়। তোমাদের সাথে আমার সেই সম্পর্কটা নষ্ট হোক আমি তা চাইনি।।   সংগৃহিত  ","categories": ["Bangla","Lesson Learned","Story","Collected"],
        "tags": ["Bangla","lessonlearned","story","collected"],
        "url": "http://localhost:4000/hirar-har-o-sornokarer-chele/",
        "teaser":null},{
        "title": "ছেলেকে দেওয়া একজন আদর্শ বাবার উপদেশ",
        "excerpt":"১. জুতা সেলাই বা রং করতে চাইলে মেরামতকারীর দোকানের সামনে পা বাড়িয়ে দিওনা, বরং জুতাটা খুলে নিজে একবার মুছে দিও।   ২. কখনও কাউকে কামলা, কাজের লোক বা বুয়া বলে ডেকোনা। মনে রেখো তারাও কারো না কারো ভাই, বোন, মা, বাবা। তাদেরকে সম্মান দিয়ে ডেকো।   ৩. বয়স, শিক্ষা, পদ বা পদবীর দিক দিয়ে কেউ ছোট হলেও কখনও কাউকে ছোট করে দেখোনা। নইলে তুমি ছোট হয়ে যাবে।   ৪. পড়াশুনা করে জীবনে উন্নতি করো, কিন্তু কারো ঘাড়ে পা দিয়ে উপরে উঠার চেষ্টা করো না।   ৫. কাউকে সাহায্য করে পিছনে ফিরে চেওনা, সে লজ্জা পেতে পারে।   ৬. সব সময় পাওয়ার চেয়ে দেয়ার চেষ্টা করো বেশি । মনে রেখো, প্রদানকারির হাত সর্বদা উপরেই থাকে।   ৭. এমন কিছু করোনা যার জন্য তোমার এবং তোমার পরিবারের উপর আঙুল ওঠে।   ৮. ছেলে হয়ে জন্ম নিয়েছো, তাই দায়িত্ব এড়িয়ে যেওনা।   ৯. তোমার কি আছে তোমার গায়ে লেখা নেই। কিন্তু তোমার ব্যবহারে দেখা যাবে তোমার পরিবার কোথায় আছে।   ১০. কখনও মার কথা শুনে বউকে এবং বউয়ের কথা শুনে মাকে বিচারের কাঠগড়ায় দাঁড় করিও না। কাউকে ফেলতে পারবে না।   ১১. কারও বাসায় নিমন্ত্রন খেতে গেলে বাসায় দু-মুঠো ভাত খেয়ে যেও। অন্যের পাতিলের ভাতের  আশায় থেকো না।   ১২. কারো বাসার খাবার নিয়ে সমালোচনা করো না। কেউ খাবার ইচ্ছে করে অস্বাদ করার চেষ্টা করে না।   ১৩. বড় হবার জন্য নয়, মানুষ হবার জন্য চেষ্টা করো।   ১৪. শ্বশুর কিংবা শাশুড়িকে এতটা সম্মান দিও,  যতটুকু সম্মান তোমার বাবা-মাকে দাও। এবং তাদের প্রতি এমন আচরন করো, যাতে করে তাদের  মেয়েকে তোমার বাড়ি পাঠানোর জন্য উতলা থাকে।   ১৫. সব সময় ভদ্র ও নম্রভাবে চলো এবং কথা বলো। কিন্তু অন্যায়ের সাথে আপোষ করোনা।   সংগৃহিত  ","categories": ["Bangla","Lesson Learned","Story","Collected"],
        "tags": ["Bangla","lessonlearned","story","collected"],
        "url": "http://localhost:4000/eheleke-deya-adorsho-babar-upodesh/",
        "teaser":null},{
        "title": "সময় ফুরিয়ে গেলে এভাবেই মূল্য কমতে থাকে সবার, সবকিছুর",
        "excerpt":"বৃষ্টি থেমে গেলে ছাতাটাকেও বোঝা মনে হয় ৷  কালি ফুরিয়ে গেলে কলমটাও আবর্জনার ঝুড়িতে জমা হয়। বাসি হয়ে গেলে প্রিয়জনের দেয়া ফুলটাও পরদিন ডাস্টবিনে পাওয়া যায়।  পৃথিবীর নিষ্ঠুরতম সত্য হলো আপনার উপকারের কথা মানুষ বেশিদিন মনে রাখবে না। জীবনের সবচেয়ে নিদারুণ বাস্তবতা হলো, কার কাছে আপনি কতদিন প্রায়োরিটি পাবেন, সেটা নির্ভর করবে কার জন্য কতদিন কিছু একটা করার সামর্থ্য আছে তার উপর। এই বাস্তবতা আপনি মানলেও সত্যি, না মানলেও সত্যি। আজ সকালে যে পত্রিকার দাম ১০ টাকা, একদিন পর সে একই পত্রিকার ১ কেজির দাম ১০ টাকা। হাজার টাকা খরচ করে একাডেমিক লাইফে বছরের শুরুতে যে বইগুলো গুরুত্ব দিয়ে কিনেন, বছর শেষে সেই বইগুলোই কেজি মাপে বিক্রি করে দেন। সময় ফুরিয়ে গেলে এভাবেই মূল্য কমতে থাকে সবার, সবকিছুর। আমরা আপাদমস্তক স্বার্থপর প্রাণী। ভিখারিকে ২ টাকা দেয়ার আগেও মানুষ চিন্তা করে কতটুকু পূণ্য অর্জন হবে। বিনা স্বার্থে কেউ ভিক্ষুককেও ভিক্ষা দেয় না৷  এতকিছুর পরও চলুন একটু হেসে কথা বলি। রাগটাকে কমাই। অহংকারকে কবর দেই।  যদি সুখী হতে চান তবে প্রত্যাশা কমান।  আপনি কারো জন্য কিছু করে থাকলে সেটা চিরতরে ভুলে যান। কারণ সেটা যতদিন আপনি মনে রাখবেন ততদিন সেটা আপনাকে অহংকারী করে তুলবে।  আবার কেউ যদি আপনার জন্য খুব ছোট কিছুও করে থাকে, তবে সেটা আজীবন মনে রাখবেন। কারণ এটা আপনাকে বিনয়ী ও কৃতজ্ঞতাসম্পন্ন একজন ভালো মানুষ হিসেবে বাঁচিয়ে রাখবে।   সংগৃহিত  ","categories": ["Bangla","Lesson Learned","Story","Collected"],
        "tags": ["Bangla","lessonlearned","story","collected"],
        "url": "http://localhost:4000/somoyer-sathe-sathe-mullo-kome/",
        "teaser":null},{
        "title": "সুযোগ থাকলে তাকে কাজে লাগানোই উচিৎ",
        "excerpt":"জার্মানির এক নামকরা ব্যাংকে ব্যাংক ডাকাতির সময় ডাকাত দলের সর্দার বন্দুক হাতে নিয়ে সবার উদ্দেশ্যে বললো, “কেউ কোনো নড়াচড়া করবেন না, টাকা গেলে যাবে সরকারের, কিন্তু জীবন গেলে যাবে আপনার আর তাই ভাবনা চিন্তা করে আপনার পরবর্তী পদক্ষেপ ঠিক করুন।”   এই কথা শোনার পর, সবাই শান্ত হয়ে চুপচাপ মাথা নিচু করে শুয়ে পড়েছিল। এই ব্যাপারটাকে বলে “Mind Changing Concept”, অর্থাৎ মানূষের ব্রেইনকে আপনার সুবিধা অনুযায়ী অন্যদিকে কনভার্ট করে ফেলা।   সবাই যখন শুয়ে পড়েছিল, তখন এক সুন্দরী মহিলার কাপড় অসাবধানতা বসত তার পা থেকে কিছুটা উপরে ঊঠে গিয়েছিল এমন সময় ডাকাত দলের সর্দার তার দিকে তাকিয়ে চিৎকার করে বলে উঠলো, “আপনার কাপড় ঠিক করুন! আমরা এখানে ব্যাংক ডাকাতি করতে এসেছি, রেপ করতে না।”   এই ব্যাপারটাকে বলে “Being Professional”, অর্থাৎ আপনি যেটা করতে এসেছেন, সেটাই করবেন। যতই প্রলোভন থাকুক অন্যদিকে মনোযোগ দেওয়া যাবে না।   যখন ডাকাতরা ডাকাতি করে তাদের আস্তানায় ফিরে এলো তখন এক ছোট ডাকাত(এমবিএ পাশ করা) ডাকাত দলের সর্দার(যে ক্লাস ফাইভ পর্যন্ত পড়াশোনা করেছে)কে বললো, “বস চলেন টাকাটা গুনে ফেলি” ডাকাত দলের সর্দার মুচকি হেসে বললো, তার কোনোই প্রয়োজন নেই, কেনোনা একটু পরে টিভি ছাড়লে নিউজ চ্যানেলগুলোই বলে দেবে আমরা কতো টাকা নিয়ে এসেছি।   এই ব্যাপারটাকে বলে “Experience”। অভিজ্ঞতা যে গতানুগতিক সার্টিফিকেট এর বাইরে গিয়েও কাজ করতে পারে, ইহা তার একটি ঊৎকৃষ্ট প্রমাণ।   ডাকাতরা চলে যাওয়ার সাথে সাথেই ব্যাংক এর এক কর্মচারি ব্যাংক ম্যানেজারের কাছে ছুটে এসে বললো, স্যার তাড়াতাড়ি চলেন পুলিশকে ফোন করি, এখনই ফোন করলে ওরা বেশিদূর যেতে পারবে না। ব্যাংক ম্যানেজার কর্মচারিকে থামিয়ে দিয়ে বললো, ওদেরকে আমাদের সুবিধার জন্যই এই ২০ মিলিয়ন টাকা নিয়ে যেতে দেওয়া উচিৎ, তাহলে আমরা যে ৭০ মিলিয়ন টাকার গরমিল করেছি, তা এই ডাকাতির ভিতর দিয়েই চালিয়ে দেওয়া যাবে।   এই ব্যাপারটাকে বলে, Swim with the tide, অর্থাৎ নিজের বিপদকেও বুদ্ধি দিয়ে নিজের সুবিধা হিসেবে ব্যবহার করা। কিছু সময় পরেই, টিভিতে রিপোর্ট আসলো, ব্যাংক ডাকাতিতে ১০০ মিলিয়ন টাকা লোপাট। ডাকাতরা সেই রিপোর্ট দেখে বারবার টাকা গুনেও ২০ মিলিয়ন এর বেশি বাড়াতে পারলো না। ডাকাত দলের সর্দার রাগে ক্রুদ্ধ হয়ে বললো, “শালা আমরা আমাদের জীবনের ঝুকি নিয়ে, এতো কিছু ম্যানেজ করে মাত্র ২০ মিলিয়ন টাকা নিলাম আর ব্যাংক ম্যানেজার শুধুমাত্র এক কলমের খোঁচাতেই ৮০ মিলিয়ন টাকা সরিয়ে দিল। শালা চোর-ডাকাত না হয়ে পড়াশোনা করলেই তো বেশি লাভ হত।”   এই ব্যাপারটাকে বলে “Knowledge is worth as much as gold!” অর্থাৎ অসির চেয়ে মসী বড়।   ব্যাংক ম্যনেজার মন খুলে হাসছে, কেনোনা তার লাভ ৮০ মিলিয়ন টাকা। ৭০ মিলিয়ন টাকার গরমিল করেও সে আরও ১০ মিলিয়ন টাকা এই সুযোগে তার নিজের পকেটে ঢুকিয়ে ফেলেছে। এই ব্যাপারটাকে বলে,   “Seizing the opportunity.” Daring to take risks! অর্থাৎ সুযোগ থাকলে তাকে কাজে লাগানোই উচিৎ…!   সংগৃহিত  ","categories": ["Bangla","Lesson Learned","Story","Collected"],
        "tags": ["Bangla","lessonlearned","story","collected"],
        "url": "http://localhost:4000/sujog-thakle-take-kaze-laganoi-uchit/",
        "teaser":null},{
        "title": "অভিজ্ঞতার মূল্য",
        "excerpt":"একবার এক জাহাজের ইঞ্জিন অন হচ্ছিল না, জাহাজের মালিক অনেক ইন্জিনিয়ার কে দেখিয়েছেন  কিন্তু কেউ তা ঠিক করতে পারে নাই। তাই তিনি ৪০ বছরের অভিজ্ঞতা সম্পন্ন একজন মেকানিক্যাল ইঞ্জিনিয়ার এনেছেন। তিনি খুব সাবধানে ইন্জিন পরিদর্শন করেন, উপর থেকে নিচে। কিছু দেখার পর লোকটি তার ব্যাগ থেকে একটি ছোট হাতুড়ি বের করলো। তিনি হাতুড়ি দিয়ে আলতো করে একটা আঘাত করলেন সাথে সাথে ইন্জিন চালু হয়ে গেল। ৭ দিন পর ইন্জিনিয়ার তার বিল হিসেবে চাইলেন ১০,০০০ ডলার ! জাহাজের মালিক বললো আপনি তো এখানে তেমন কিছুই করেননাই এতো বিল অসলো কেমনে…? তারপর ইন্জিনিয়ার বললেন হাতুড়ি দিয়ে বাড়ি মারার বিল ২ ডলার কিন্তু  কোন জায়গায় মারতে হবে ওইটা জন্য ৯৯৯৮ ডলার। সারমর্ম: আমরা অনেক সময় অনেক বড় ধরনের যান্ত্রিক প্রবলেমের জন্য সামান্য কাজকে মূল্যায়ন দেইনা। এই সামান্য কাজটার  অভিজ্ঞতা অনেক সেটা কেউ বোঝেনা।   সংগৃহিত  ","categories": ["Bangla","Lesson Learned","Story","Collected"],
        "tags": ["Bangla","lessonlearned","story","collected"],
        "url": "http://localhost:4000/oviggotar-mullo/",
        "teaser":null},{
        "title": "খলীফা হারুনুর রশীদ ও বাহলুল পাগল",
        "excerpt":"★খলীফা হারুনুর রশীদ এর শাসন আমলে ‘বাহলুল’ নামে এক পাগল ছিল। যে অধিকাংশ সময় কবরস্থানে কাটাতো। কবরস্থানে থাকা অবস্থায় একদিন বাদশাহ হারুনুর রশীদ তার পাশ দিয়ে যাচ্ছিলেন।   ★বাদশাহ তাকে ডেকে বললেন, “বাহলুল, ওহে পাগল..!! তোমার কি আর জ্ঞান ফিরবে না..?   বাহলুল বাদশাহর এ কথা শুনে নাচতে নাচতে গাছের উপরের ডালে চড়লেন এবং সেখান থেকে চিৎকার দিয়ে বললেন- “ওহে হারুন, ওই পাগল.! তোর কি কোনদিন জ্ঞান ফিরবে না..?   বাদশাহ গাছের নিচে এসে বাহলুলকে বললেন, “আমি পাগল নাকি তুমি, যে সারা দিন কবরস্থানে বসে থাকে?”   -বাহলুল বললেন, “আমিই বুদ্ধিমান।”   ★বাদশাহ বললেন, “কীভাবে..?”   -বাহলুল রাজপ্রাসাদের দিকে ইঙ্গিত দিয়ে বললেন, “আমি জানি এই রঙ্গীলা দালান ক্ষণিকের আবাসস্থল, এবং এটি (কবরস্থান) স্থায়ী নিবাস। এজন্য আমি মরার পূর্বেই এখানে বসবাস শুরু করেছি। অথচ তুই গ্রহণ করেছিস ঐ রঙ্গীনশালাকে আর এই স্থায়ীনিবাসকে (কবর) এড়িয়ে চলছিস। রাজপ্রসাদ থেকে এখানে আসাকে অপছন্দ করছিস যদিও তুই জানিস এটাই তোর শেষ গন্তব্য। এবার বল, আমাদের মধ্যে কে পাগল..?   বাহলুলের মুখে এ কথা শোনার পর বাদশাহর অন্তর কেঁপে উঠল, তিনি কেঁদে ফেললেন। তাঁর দাড়ি ভিজে গেল।   ★তিনি বললেন, “খোদার কসম..!! তুমিই সত্যবাদী। আমাকে আরও কিছু উপদেশ দাও..!!” -বাহলুল বললো, “তোমার উপদেশের জন্য আল্লাহর কোরআন যথেষ্ট। তাকে যথার্থভাবে আকড়ে ধরো।”   ★বাদশাহ বললেন, “বাহলুল, তোমার কোন কিছুর অভাব থাকলে আমাকে বলো, আমি তা পূরণ করবো।”   -বাহলুল বললেন, “হ্যা, আমার তিনটি অভাব আছে। এগুলো যদি তুমি পূরণ করতে পার তবে সারা জীবন তোমার কৃতজ্ঞতা স্বীকার করবো।”   ★বাদশাহ বললেন, “তুমি নিঃসঙ্কুচে চাইতে পারো।”   -বাহলুল বললো, “মরণের সময় হলে আমার আয়ূ বৃদ্ধি করতে হবে।”   ★বাদশাহ বললেন, “আমার পক্ষে সম্ভব নয়।”   -বাহলুল বললো, “আমাকে মৃত্যুর ফেরেশতা থেকে রক্ষা করতে হবে।”   ★বাদশাহ বললেন, “আমার পক্ষে সম্ভব নয়।”   -বাহলুল বললো, “আমাকে জান্নাতে স্থান করে দিতে হবে এবং জাহান্নাম থেকে আমাকে দূরে রাখতে হবে।”   ★বাদশাহ বললেন, “আমার পক্ষে এটাও সম্ভব নয়।”   -বাহলুল বললেন, “তবে জেন রাখো, তুমি বাদশাহ নও বরং তুমি অন্য কারও অধীনস্থ।   অতএব তোমার কাছে আমার কোন চাওয়া বা প্রার্থনা নেই।” আমাদের জন্য শিক্ষা হলো, আমরা একমাত্র আল্লাহ তায়ালার গোলাম, তাঁরই অধীনস্থ। আল্লাহ তা‘আলা আমাদেরকে তাঁর আনুগত্য, তাঁর দাসত্ব করার তাওফিক দান করুন। সুতরাং, যা কিছু চাওয়ার কেবলমাত্র তাঁর কাছেই চাইতে হবে।”   সংগৃহিত    ","categories": ["Bangla","Lesson Learned","Story","Collected","Islamic"],
        "tags": ["Bangla","lessonlearned","story","collected","islamic"],
        "url": "http://localhost:4000/harunur-rashid-o-pagol-bahlul/",
        "teaser":null},{
        "title": "Install jekyll on windows step by step",
        "excerpt":"Install jekyll on windows step by step   Here is the list of tools or plugins I needed to install to run the blog locally.   Windows      Install jekyll on windows   VSCode extensions      Markdown All in One   Code Spell Checker   Steps      run bundle install (first time only)   bundle exec jekyll serve to serve the application   Tools that didn’t work   For some unknown reason, installing via choco didn’t didn’t work.      Chocolatey (Kept)   Jekyll (Removed)  ","categories": ["Blog","Configuration","Jekyll"],
        "tags": ["jekyll","uncategorized"],
        "url": "http://localhost:4000/install-jekyll-on-windows/",
        "teaser":null},{
        "title": "Important notes",
        "excerpt":"Some important notes   How to run this site using visual studio code  bundle exec jekyll serve  Application will run here  http://127.0.0.1:4000/   or you can type  bundle exec jekyll serve -o  which will build the application run on the url   Tips for visual studio code  To view command in visual studio code  Type ctrl+shift+p   Important Links     Architecture Playbook   Government Digital Service   Minimal Mistakes - A Jekyll theme   Repository for this website  Storage Repository: https://github.com/mahedee/my-blogs  Site Repository : https://github.com/mahedee/mahedee.github.io   Convert markdown to jekyll  ","categories": ["Blog","VS Code","Links"],
        "tags": ["notes","unpublished"],
        "url": "http://localhost:4000/some-important-note/",
        "teaser":null},{
        "title": "Essential plugins for Visual Studio code",
        "excerpt":"Essential plugins for Visual Studio code      Markdown Preview Enhanced   Code Spell Checker   ES7 React/Redux/GraphQL/React-Native snippets   html to JSX   :emojisense:   Auto Markdown TOC   Markdown PDF   C#   Java Extension Pack   Kubernetes   YAML   Angular Language Service   Angular Snippets   HTML CSS Support   VS Code Live Server   ESLint   Prettier - Code formatter  ","categories": ["Markdown","VS Code"],
        "tags": ["vscode"],
        "url": "http://localhost:4000/essential-plugins-for-vs-code/",
        "teaser":null},{
        "title": "Could not access network location of wwwroot",
        "excerpt":"I have found the message – Could not access network location %SystemDrive%\\inetpub\\wwwroot\\” – When I was trying to install Infragistic NetAdvantage on Windows 7. To solve the problem do the followings.      Type “regedit” in the Run From Start Menu dialog box to open the “Registry Editor”.   Find the following key: HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\InetStp\\PathWWWRoot   Change the value of this registry key from “%SystemDrive%\\inetpub\\wwwroot” or ” \\inetpub\\wwwroot\\” to “C:\\inetpub\\wwwroot”. If your default website in IIS is instead stored in a different location, set the value of this registry key to that path instead.   Then install your software.  ","categories": ["IIS","Troubleshooting"],
        "tags": ["iis","troubleshooting"],
        "url": "http://localhost:4000/could-not-access-network-location-systemdriveinetpubwwwroot/",
        "teaser":null},{
        "title": "Visual Studio 2005 debugger does not work in IE 8!",
        "excerpt":"Do you face debugger problem of Visual studio 2005 in IE 8? Yes, I faced problem. Few days, Debugger of Visual studio 2005 was not working in IE8 in my pc.   This is because IE 8 has a feature called Loosely-Coupled Internet Explorer (LCIE) which results in IE running across multiple processes. Older version of VS debugger get confuse by this and cannot figure out how to attach to the correct process. To overcome this issue, you have to disable the process growth feature of LCIE.   To do this, just do the following steps:      Run –&gt; Regedit   HKEY_LOCALMACHINE -&gt; SOFTWARE -&gt; Microsoft -&gt; Internet Explorer -&gt; Main   Add a dword under this key called TabProcGrowth   Set TabProcGrowth to 0.   If you run into the same problem on Vista or newer, you will also need to turn off protected mode.   Or you can do the following from visual studio IDE     Debug –&gt; Attach to Process.   select iexplorer.exe and click attach It tends to be either the aspnet_wp.exe (IIS 6.0, XP) or one of the W3WP.exe processe  ","categories": ["Visual Studio","Troubleshooting","Browser"],
        "tags": ["visualstudio","troubleshooting","browser"],
        "url": "http://localhost:4000/visual-studio-2005-debugger-does-not-work-in-ie-8/",
        "teaser":null},{
        "title": "Procedural VS Object Oriented Programming",
        "excerpt":"Object Oriented and Procedural are two programming paradigm. Procedural programming creates a step by step program that guides the application through a sequence of instructions. Procedural programming is also called linear programming. Generally, code is executed from the top of the file to the bottom in procedural programming. Object Oriented uses object to design applications and computer programs. It isn’t as linear as procedural programming. Code is often broken up and distributed across multiple files, each one with a single purpose.           Programming Style: Procedural is linear programming and OOP is not linear programing.            Fundamental Unit: Function is the fundamental unit of procedural programming and object is the fundamental unit of OOP.            Code Organization: In procedural programming code is organized into small procedures. This procedure is used to perform any operation. In object oriented programming, the data and related functions are bundled together into an object.            Data Orientation: In procedural programming functions have no intrinsic relationship with the data they operate on. Here, you provide the correct number and type of arguments, the function will do its work and returns its output. In object oriented programming, the data and related functions are bundled together into an “object”. Ideally, the data   inside an object can only be manipulated by calling the object’s functions.            Global and Shared data: We can see that one of the principle differences is that procedural systems make use of shared and global data, while object oriented systems lock their data privately away in objects.            Reusability: Reusability is one of the best features of OOP. Reusability is higher than procedural programming.       Abstraction: Abstraction of OOP is higher than procedural programming so maintenance is easy.        Inheritance: Inheritance is the key of OOP but Procedural programming doesn’t support inheritance.            Encapsulation &amp; Polymorphism: Encapsulation and polymorphism is two key features of OOP which are absent in procedural programming.            Coupling and Cohesion: Loosely couple and maximum cohesion in the system is only possible by OOP but it is not possible by procedural programming.       Cost: OOP takes less cost than Procedural programming.  ","categories": ["OOP"],
        "tags": ["oop"],
        "url": "http://localhost:4000/procedural-vs-object-oriented-programming/",
        "teaser":null},{
        "title": "Basic concepts of Business Intelligence (BI)",
        "excerpt":"What is BI?   Business Intelligence (BI) is a computer based technique to identified, extracting (*1) and analyzing business data. For example senior management of an industry can inspect sales revenue by products and/or departments, or by associated costs and incomes. BI technologies provide historical, current and predictive views of business operations. So, management can take some strategic or operation decision easily.      Why BI?   BI is used for reporting, online analytical processing, data mining, process mining, complex event processing, business performance management, benchmarking, text mining and productive analysis .By using BI, management can monitor objectives from high level , understand what is happening, why is happening and can take necessary steps why the objectives are not full filled. Business intelligence aims to support better business decision-making. Thus a BI system can be called a decisions support system (DSS).   Before going to launch any product, company need to understand of market trend. Company uses BI to analyze market data and understand which product or which business is suitable for the current time in the market. In a word, BI gives you right information, right time in right format.   Suppose a software company wants to develop an ERP. Before going to develop an ERP, company’s business executive need to better understand of its development cost. Potentiality of it’s sells volume. Management need to understand that will it protect margins. To understand the above factors they have to have consolidated views of business. BI provides this visual and consolidates view. From this reports, company can take necessary action and can take decision whether they should develop an ERP or not.   Now suppose your ERP is developing and your management can see the current situation of the project. They have no time to see all the documents. They want to view the current status of the project from the top. This may be dashboard, BI provides this. So management can understand whether the product is developing cost effective way or not. BI can suggest corrective action against the data.   Sample sales Dashboard:      Prerequisites   Before implementing a BI solution, it is worth taking different factors into consideration before proceeding. According to Kimball et al., these are the three critical areas that you need to assess within your organization before getting ready to do a BI project.      The level of commitment and sponsorship of the project from senior management.   The level of business need for creating a BI implementation.   The amount and quality of business data available. Data can be gathered from Enterprise, department or individual.   How BI works?   BI uses technologies, processes, and applications to analyze mostly internal, structured data and business processes.   -Data warehousing and BI   Often BI applications use data gathered from a data warehouse or data mart. However, not all data warehouses are used for business intelligence, nor do all business intelligence applications require a data warehouse. In order to distinguish between concepts of business intelligence and data warehouses, Forrester Research often defines business intelligence in one of two ways:   Boarder Definition: “Business Intelligence is a set of methodologies, processes, architectures, and technologies that transform raw data into meaningful and useful information used to enable more effective strategic, tactical, and operational insights and decision-making.” When using this definition, business intelligence also includes technologies such as data integration, data quality, data warehousing, master data management, text and content analytics, and many others that the market sometimes lumps into the Information Management segment. Therefore, Forrester refers to data preparation and data usage as two separate, but closely linked segments of the business intelligence architectural stack.   Forrester defines the latter, narrower business intelligence market as “referring to just the top layers of the BI architectural stack such as reporting, analytics and dashboards.”   -Business intelligence and business analytics   Thomas Davenport has argued that business intelligence should be divided into querying, reporting, OLAP, an “alerts” tool, and business analytics. In this definition, business analytics is the subset of BI based on statistics, prediction, and optimization.   Business Intelligence can be applied to the following business purposes (MARCKM), in order to drive business value:   MARCKM means – Measurement, Analytics, Reporting/Enterprise Reporting, Collaboration/Collaboration Platform, and Knowledge Management.   In addition to above, Business Intelligence also can provide a pro-active approach, such as ALARM function to alert immediately to end-user. There are many types of alerts, for example if some business value exceeds the threshold value the color of that amount in the report will turn RED and the Business Analyst is alerted. Sometimes an alert mail will be sent to the user as well. This end to end process requires data governance, which should be handled by the expert.   Semi-structured or unstructured data   Businesses collect a huge amount of valuable information. These information included in the form of e-mails, memos, notes from call-centers, news, user groups, chats, reports, web-pages, presentations, image-files, video-files, and marketing material and news.   BI uses both structured and unstructured data, but the former is easy to search, and the latter contains a large quantity of the information needed for analysis and decision making. It is very difficult to identify which information is in unstructured data. Unstructured and semi-structured data have different meanings depending on their context. In the context of relational database systems, it refers to data that cannot be stored in columns and rows. It must be stored in a BLOB(binary large object), a catch-all data type available in most relational database management systems. Since it is difficult to search information from unstructured data so, what will organization do to extract information from unstructured data?   Metadata is only way to search information from unstructured data. Metadata is actually data about data. Metadata can include information such as author and time of creation. This metadata can be stored in a database. So, it is easy to search by this metadata. To solve problems with search ability and assessment of data, it is necessary to know something about the content. It is more useful would be metadata about the actual content – e.g. summaries, topics, people or companies mentioned.   There are many challenges to develop BI with semi-structured and structured data. Those are:   -Accessing unstructured data because it is stored in a variety of format.   -There is no standard terminology.   -Volume of data is so high   -Search ability of unstructured data is not easy.   Many BI tools are available now. The information delivery model is given below.      Data can be collected from different source.ETL (Extract, transform and load) is responsible to collect these data. Then these data are kept in data warehouse by ETL. Data warehouse can be sub divided into Data marts. OLAP provides these data to the BI tools users by OLAP Cubes. BI tools display these result to the users.   BI Tools:   Many BI tools are available now. Most of the organization follows-      Spreadsheet   Reporting and querying software: tools that extract, sort, summarize, and present selected data   Dashboards   Data mining   Data warehousing   Decision Engineering   Process Mining   Business Performance management   Local Information System   Microsoft introduced a new BI tool name-Dashboard. Dashboard is a visual display of the most important information needed to achieve one or more objectives which fits in a single computer screen so it can be monitored at a glance – Stephen Few, Information Dashboard design.   Microsoft BI Solution – 2007 architecture.      Notes:   Data extraction is the act or process of retrieving data out of (usually unstructured or poorly structured) data source for further data processing or data storage. The import into the intermediate extracting system is thus usually followed by data transformation and possibly the addition of metadata prior to export to another stage in the data workflow. Usually, the term data extraction is applied when (experimental) data is first imported into a computer from primary sources, like measuring recording devices. Today’s electronic devices will usually present a electrical connector (e.g. USB) through which ‘raw data” can be streamed into a personal computer.  ","categories": ["BI"],
        "tags": ["BI"],
        "url": "http://localhost:4000/basic-concepts-of-business-intelligence-bi/",
        "teaser":null},{
        "title": "HTTP/1.0 503 Service Unavailable",
        "excerpt":"Some days ago, I fall in a problem. I could not create an ASP.net project. An error occurred when I press ok button in New project.   ERROR:  “The Web server reported the following error when attempting to create or open the Web project located at the following URL: ‘http://localhost/MyProjectMahedee’. ‘HTTP/1.0 503 Service Unavailable’.”   Solution:   Go to browser: Internet Options-&gt;LAN Settings-&gt; Connection Tab-&gt; Check Bypass Proxy Server  ","categories": ["Troubleshooting"],
        "tags": ["troubleshooting"],
        "url": "http://localhost:4000/http1-0-503-service-unavailable/",
        "teaser":null},{
        "title": "Sys.WebForms.PageRequestManagerTimeoutException The server request timed out",
        "excerpt":"Few days ago I found an error when tried to export about 500 reports to pdf.  The error is Sys.WebForms.PageRequestManagerTimeoutException The server request timed out. This is not found as exception. It is found on run time as javascript error.  I was working on Ajax Control tool kit 3.5. It is occurred because export operation of 500 reports to pdf were relatively long time than default   How to solve this problem?   AsyncPostBackTimeOut is a property of ScriptManager of Ajax. You can change time out length. To solve this problem I have increased the time out of AsyncPostBackTimeOut property.   For example, for exporting 100 pdf I need 20 minutes. So, I will use maximum time out limit 20 minutes which is exactly 1200 seconds. My code is like below.   &lt;asp:ScriptManager ID=\"ScriptManager1\" AsyncPostBackTimeOut=\"1200\" runat=\"server\" /&gt;  **The default value of the AsyncPostBackTimeOut property is 90 seconds. For long time running method (Suppose a method will run for more than 90 seconds), you should use web service by setting timeout (number of seconds) of that web method by Javascript.  ","categories": ["ASP.NET","Troubleshooting"],
        "tags": ["aspnet","troubleshooting"],
        "url": "http://localhost:4000/sys-webforms-pagerequestmanagertimeoutexception-the-server-request-timed-out/",
        "teaser":null},{
        "title": "This application was precompiled with personalization turned off",
        "excerpt":"Some days ago I have deployed one of my asp.net applications in Windows 2003 server. After deploying I could not browse any pages. I was getting the following errors –      This application was precompiled with personalization turned off, but it appears to have been turned on after the precompilation, which is not supported. Description: An unhandled exception occurred during the execution of the current web request. Please review the stack trace for more information about the error and where it originated in the code.   Exception Details: System.Web.HttpException: This application was precompiled with personalization turned off, but it appears to have been turned on after the precompilation, which is not supported.   &lt;/span&gt;   I did not include Source Error and Stack Trace here. So, what is the solution of the problem? Yea! I have solved the problem by adding the following snippet in web config.   &lt;profile enabled=\"false\" /&gt;   It works fine. If you find same problem, try to solve the problem this way.  ","categories": ["ASP.NET","Troubleshooting"],
        "tags": ["aspnet","troubleshooting"],
        "url": "http://localhost:4000/this-application-was-precompiled-with-personalization-turned-off/",
        "teaser":null},{
        "title": "Global variable of ASP.net",
        "excerpt":"Global variables are those variables that can be accessed anywhere in the application. Global variable should always be used with caution. It stores data. The most common way of accessing global variables in ASP.net are by using Application, Cache, and Session Objects.   Application – Application objects are application level global variables, that need to be shared for all user sessions. Thus, data specific to a user should’nt be saved in application objects. While using application objects, the objects are locked so that multiple page requests cannot access a specific application object. Below is a code example for usage of application object…   Application.Lock(); Application(\"UserData\") = \"dotnetuncle\"; Application.UnLock(); Response.Redirect(\"DestinationPage.aspx\"); //DestinationPage.aspx gets the value from the Application State String sString = Application(\"UserData\").ToString();     Cache – The cache object is similar to the application object in scope, however, it does not need any explicit locking and unlocking. Code below shows usage of Cache object…   Cache(\"Userdata\") = \"dotnetuncle\";   Response.Redirect(\"DestinationPage.aspx\");  //Destination.aspx retrieves the value from Cache object   String sString = Cache(\"Userdate\").ToString();    The cache object also shares data across all user sessions. The cache object has features like it can automatically expire cached content after specified time periods or once memory consumption has reached a maximum.   Session – The session object is used to store the data specific to a user for the entire length of a user’s visit to a website. Below is a code that shows usage of the session object in ASP.NET …   //InitialPage.aspx stores the user’s credentials in Session state   Session(\"UserName\") = txtUserName.Text;   Server.Transfer(\"DestinationPage.aspx\");    //DestinationPage.aspx gets the user’s name from Session state   String sString = Session(\"UserName\").ToString();       ASP.NET stores session values in the server memory. If there are plenty of active user’s of a website, then the memory consumption on the server increases by leaps. Because of this reason, large websites use very less Session Variables. Session state can be configured to be automatically stored in a SQL Server database, or it can be configured to be stored centrally in a state server within a server farm. By default, a user’s session ends 20 minutes after their last page request and their data goes out of scope, freeing it from memory. In case user information is to be tracked by a large website, then a oookie is preferred.   Cookie – A cookie is a piece of data that is stored on a user’s browser. Thus, a cookie does not use any server memory.  ","categories": ["ASP.NET","C#"],
        "tags": ["aspnet","csharp"],
        "url": "http://localhost:4000/global-variable-of-asp-net/",
        "teaser":null},{
        "title": "How to release port 80",
        "excerpt":"Few days ago, I fall in a problem. I could not start apache server by XAMP control panel. There was a message shown port 80 busy. However ultimately, I found the solution this was due to IIS server. IIS Server was running on port 80 at that time.   Here is the step by step procedure, how I release port 80      Go to command prompt.   Check which process is using port 80            On the command prompt window, type the following command.         netstat -o -n -a | findstr 0.0:80                       You will see the following screen              The last column is process Id column   Open Task Manager to check the process ID      Right click on the taskbar to open the the task manager.   Go to the Processes tab.   Click the View menu   And make sure you select the PID (Process Identifier) as shown in the image below.      Now you can see which process is using which PID and description like the following   Stop the services      Go to Task Manager.   Click the Services tab   Arrange the Services by description or by   For IIS I found Service name as IIS Admin   Right click on it and select Stop Service.  ","categories": ["OS","Windows","Troubleshooting"],
        "tags": ["os","windows","troubleshooting"],
        "url": "http://localhost:4000/how-to-release-port-80/",
        "teaser":null},{
        "title": "How to find the size of all tables in SQL Server database",
        "excerpt":"SQL Server gives you everything its stored procedure sp_spaceused. Unfortunately this SP does not support iterating over all tables in a database, so we needed to leverage another (undocumented) Stored Procedure sp_msForEachTable.   SET NOCOUNT ON  DBCC UPDATEUSAGE(0)  -- Find DB size. EXEC sp_spaceused  -- Create a table to counts row and sizes. CREATE TABLE #tbl ( [name] NVARCHAR(128), [rows] CHAR(11), reserved VARCHAR(18), data VARCHAR(18), index_size VARCHAR(18), unused VARCHAR(18) )  INSERT #tbl EXEC sp_msForEachTable 'EXEC sp_spaceused ''?'''  SELECT * FROM #tbl  -- # of rows. SELECT SUM(CAST([rows] AS int)) AS [rows] FROM #tbl  DROP TABLE #tbl  After executing this, you will get the size of all tables in your database.  ","categories": ["SQL Server","Database"],
        "tags": ["sqlserver","database"],
        "url": "http://localhost:4000/how-to-find-the-size-of-all-tables-in-sql-server-database/",
        "teaser":null},{
        "title": "Create, Drop, Insert, Update, Delete and Select – The Basic SQL",
        "excerpt":"This topic for those who are very beginner of SQL. Here I will show some basic SQL by Microsoft SQL Server.   1. Create a table: Here I created a table name hrm_employee. Here emp_gid is int type, primary key and identity. Identity means its value will increment automatically by the sql server. You don’t need to insert it’s value.  --Create Table : hrm_employee--- CREATE TABLE hrm_employee (   emp_gid INT PRIMARY KEY IDENTITY,   emp_fullnm VARCHAR(100),   emp_nicknm VARCHAR(50),   emp_designation VARCHAR(100) )  2. Insert data in hrm_employee table: In this occasion, I have inserted 3 data i.e 3 rows. If you see in closer look, you will see that I didn’t insert any value of emp_gid because it increments its value automatically because it is an identity column.  --Insert data ito table: hrm_employee----  -- Insert data i.e. row-1 --- INSERT INTO hrm_employee (   emp_fullnm,    emp_nicknm,    emp_designation ) VALUES ( 'Md. Mahedee Hasan',  'Mahedee',  'Senior Software Engineer' )  -- Insert data i.e. row-2 --- INSERT INTO hrm_employee ( emp_fullnm , emp_nicknm , emp_designation ) VALUES ( 'Md. Asrafuzzaman' , 'Emon' , 'Senior Software Engineer' )  -- Insert data i.e. row-3 --- INSERT INTO hrm_employee ( emp_fullnm , emp_nicknm , emp_designation ) VALUES ( 'Md. Khondakar Enamul Haque' , 'Rony' , 'Broadcast Engineer' )  3. Infromation Retrive: Get all information of hrm_employee. Here I showed two ways to retrive data and I suggest to use second one. Second one is best practiced.  --Get all data from hrm_employee-- SELECT * FROM hrm_employee --or SELECT emp_gid, emp_fullnm, emp_nicknm, emp_designation FROM hrm_employee  4. Update hrm_employee: Is very easy to update a row or multiple rows against a condition. Lets look on the following query.  --update data from table: hrm_employee -- UPDATE hrm_employee SET emp_fullnm = 'M.K. Enamul Haque' , emp_designation = 'Senior Broadcast Engineer' WHERE emp_gid = 3  5. Delete Information: If you want to delete information from hrm_employee against a condition follow the query.  ---Delete data from table: hrm_employee--- DELETE FROM hrm_employee WHERE emp_gid = 3  6. Drop Table: Drop table means remove table for database. Use the query to drop hrm_employee table.  ---Drop table i.e remove table from Database-- DROP TABLE hrm_employee  ","categories": ["SQL Server","Database"],
        "tags": ["sqlserver","database"],
        "url": "http://localhost:4000/create-drop-insert-update-delete-and-select-the-basic-sql/",
        "teaser":null},{
        "title": "How to find pen drive hidden folder",
        "excerpt":"Sometimes due to virus attack, our pen drive data is hidden.  We think, all folders are deleted. So, check first before you format your Usb otherwise you will lose your data forever.  Sometimes hidden files are not displayed even if you “Show hidden files and folders” in the Folders Options. To find hidden folder in your pen drive. Just run the following command in your command window.   attrib -h -r -s /s /d g:\\*.*  For accurate command just copy the above command and pest it. Here g: is considered your pen drive.  Replace g by your pen drive “drive letter”  ","categories": ["Troubleshooting"],
        "tags": ["troubleshooting"],
        "url": "http://localhost:4000/how-to-find-pen-drive-hidden-folder/",
        "teaser":null},{
        "title": "ASP.net : Common Interview Questions",
        "excerpt":"   What is MS .NET?   What is IL/MSIL? What is CLR?   How ASP.net works in web?   What is the difference between layer and tire?   How ASP.net Provider model works?   What is directive in asp.net pages?   What is master page and contant page?   What is ASP.net themes? How it works?   What is web.config and machine.config?   What is the difference between “Web.config” and “Machine.Config”?   What is state management in ASP.net? What is server side and client side state management?   How view state, hidden field and cookies works?   How query Strings , control State are managed?   How application state, session state are managed?   What is caching how it works?   What is the use of @ Output Cache directive in ASP.NET.   What’ is the sequence in which ASP.NET events are processed?   In which event are the controls fully loaded?   How does ASP.NET maintain state in between subsequent request?   What is event bubbling?   How do we assign page specific attributes?   How do we ensure view state is not tampered?   What is the use of @ Register directives?   What is the use of Smart Navigation property?   What is AppSetting Section in “Web.Config” file?   Where is the ViewState information stored?   How can we create custom controls in ASP.NET?   How many types of validation controls are provided by ASP.NET?   Can you explain “AutoPostBack”?   How can you enable automatic paging in DataGrid?   What is the use of “GLOBAL.ASAX” file?   What is a SESSION and APPLICATION object?  ","categories": ["ASP.NET","Interview","Questions"],
        "tags": ["aspnet","interview","questions"],
        "url": "http://localhost:4000/asp-net-common-interview-questions/",
        "teaser":null},{
        "title": "Embedded system with assembly language – beginning – 1",
        "excerpt":"  Source code  ","categories": ["C","Embedded System"],
        "tags": ["c","embeddedsystem"],
        "url": "http://localhost:4000/embedded-system-with-assembly-language-beginning-1/",
        "teaser":null},{
        "title": "SQL Server: Common interview questions",
        "excerpt":"   What is the difference between Delete and  Truncate in SQL Server?   What is trigger? Write syntax of trigger.   What is the difference between “char” and “varchar”?   What is function in Sql server? How many types of functions?   What is stored procedure? Write syntax of stored procedure?   How parameter is passed to sql function and how call a function?   What is input and output parameter in stored procedure? How it works?   Write syntax to create a table.   What is view? What is the difference between table and view?   What is constraint? Tell different type of constraint and its functionality.   Discuss different type of joining. How it works?   How left outer joining works?   How inner join works? Give an example.   How outer join works? Give an example.   How right outer join works? Give an example.   How full outer join works? Give an example?   How Cross Join works? Give an example?   Which one faster – Inner join or Cross Join?   How do you move all data to another table using query?   Find out the maximum salary from a salary table?   How do you find number of employee from employee table?   What is commit and rollback? How it works?   What do you know about transaction block? How it works?   How primary key constraints, foreign key constraints and default constraints works?   How not null constraints, check constraints, rules constraint and unique constraints works?   What are DDL and DML? Give example.   How distinct keyword works?   What do you know about sql wildcard? Give example.   How to select top 10 employees from employee table?   How “between” and “in” operator works?   Union / Union all, requirement and difference.   What is sub query? Give an example.   How “having” clause works?   How “group by” clause works?   Why “Where” clause is needed?  ","categories": ["SQL Server","Interview","Questions"],
        "tags": ["sqlserver","interview","questions"],
        "url": "http://localhost:4000/sql-server-common-interview-questions/",
        "teaser":null},{
        "title": "Ringing buzzer with C : Embedded system beginning – 2",
        "excerpt":"  Source Code  ","categories": ["C","Embedded System"],
        "tags": ["c","embeddedsystem"],
        "url": "http://localhost:4000/ringing-buzzer-with-c-embedded-system-beginning-2/",
        "teaser":null},{
        "title": "C# – Common interview questions",
        "excerpt":"   What is value type and reference type?   What is the use of dispose method?   Give an example of method overloading and method overriding?   What is class? Give a real life example.   What is Object? Give a real life example.   What is abstract class?   Why partial class?   What is predefined data type and user defined data type? Discuss with example.   What is verbatim string? How it works?   What is the difference between string and string builder?   Why and how constant is used in C#?   What is enumeration type? How it works?   What do you know implicit and explicit conversion? Give an example.   How switch statement works? What is the function of default in switch case?   How break and continue keyword works? Give an example.   What is the difference in for loop, while loop and do while loop?   What is boxing and unboxing?   What do you know about namespace and nested namespace? Why namespace is used?   How parameter is passed by reference? Give an example.   What is constructor? What is constructor overloading?   Why constructor is used?   Why read only variable is used?   What is the difference between read only and constant variable?   What is static class? Why static class is used?   What is inheritance? Why is it necessary?   What is sealed class? Why sealed class is used?   What is abstract class?   What is the difference between abstract class and interface?   Is there any difference between “ ++I”  and “i++”? How it works?  ","categories": ["C#","Interview","Questions"],
        "tags": ["csharp","interview","questions"],
        "url": "http://localhost:4000/c-sharp-common-interview-questions/",
        "teaser":null},{
        "title": "Solution disappears in solution explorer : Visual Studio 2010",
        "excerpt":"I installed visual studio 2010 in my pc. I created a blank solution. When ever I add a project to the solution the original i.e root solution is disappear. This means that as soon as you add a project to a blank solution, the solution disappears and you are unable to add another project. I spent a lot of time to solve the problem. It is very easy.   To do this,     goto tools-&gt;options-&gt;Projects and Solution and check the “Always show solution” option.  ","categories": ["Visual Studio","Troubleshooting"],
        "tags": ["visualstudio","troubleshooting"],
        "url": "http://localhost:4000/solution-disappears-in-solution-explorer-visual-studio-2010/",
        "teaser":null},{
        "title": "Microsoft Office Excel cannot access the file in a directory",
        "excerpt":"I have deployed my application in a 64 bit OS and got the following error at the time of uploading an excel file.   Microsoft Office Excel cannot access the file ‘c:\\inetpub\\wwwroot\\Download\\mahedee.xlsx’.   There are several possible reasons:     The file name or path does not exist.   The file is being used by another program.   The workbook you are trying to save has the same name as a currently open workbook.   Solution:     Create directory “C:\\Windows\\SysWOW64\\config\\systemprofile\\Desktop ” (for 64 bit Windows) or “C:\\Windows\\System32\\config\\systemprofile\\Desktop ” (for 32 bit Windows)   Set Full control permissions for directory Desktop (for example in Win7 &amp; IIS 7 &amp; DefaultAppPool set permissions for user “IIS AppPool\\DefaultAppPool”)  ","categories": ["MS Office","Troubleshooting"],
        "tags": ["msoffice","troubleshooting"],
        "url": "http://localhost:4000/microsoft-office-excel-cannot-access-the-file-cinetpubwwwrootdownloadmahedee-xlsx/",
        "teaser":null},{
        "title": "Common OOP interview questions",
        "excerpt":"   What is object-oriented programming (OOP)?   What is class? Give a real life example.   What is an object? Give a real life example.   Explain the basic features of OOPs.   What is the relationship between a class and an object?   What is difference between OOP and procedural Language?   What is encapsulation? Why encapsulation is necessary, explain with example?   Tell about excess modifier.   What is value type and reference type, explain with example?   What is method overloading, explain with example?   What is method overriding, explain with example?   What is polymorphism, explain with example?   What is run time polymorphism, explain with example?   How is method overriding different from method overloading?   What is inheritance, explain with example?   What is interface? Why interface is used?   What is abstract class? Why abstract class is used?   What is static member? Why static member? How static member is accessed?   Can you specify the accessibility modifier for methods inside the interface?   What is constructor? Why constructor is used?   What is constructor overloading?   Is it possible for a class to inherit the constructor of its base class?   Is it possible for a class to inherit the constructor of its base class?   What is the difference between arrays and collection?   What are collections and generics?   How can you prevent your class to be inherited further?   What is the index value of the first element in an array?  ","categories": ["OOP","Interview","Questions"],
        "tags": ["oop","interview","questions"],
        "url": "http://localhost:4000/common-oop-interview-questions/",
        "teaser":null},{
        "title": "Color a row of excel based on cell date time value (Today)",
        "excerpt":"   Select all rows of excel in which you want to apply formula. There must be a date time filed on which you will apply rule. Suppose, column A is date time column and it is started from A2   Conditional Formatting -&gt; New Rule -&gt; Use formula to determine which cell to format   Write in format value text box:  =$A2=TODAY()   Click Format button -&gt; select fill tab -&gt; and select color -&gt; Click Ok   Finally click ok in the dialog box to apply.  ","categories": ["MS Office","Troubleshooting"],
        "tags": ["msoffice","troubleshooting"],
        "url": "http://localhost:4000/color-a-row-of-excel-based-on-cell-date-time-value-today/",
        "teaser":null},{
        "title": "Important Tools and Technologies",
        "excerpt":"Database     Redis Desktop Manager            Read the Docs       Tutorial          ","categories": ["Tools","Technologies","Links","Software"],
        "tags": ["tools","technologies","links","software"],
        "url": "http://localhost:4000/important-tools-and-technologies/",
        "teaser":null},{
        "title": "Set a fixed amount of memory in SQL Server (Using SQL Server Management Studio)",
        "excerpt":"Min Server memory and max server memory are two server memory options in SQL Server to configure the amount of memory (in megabytes) in the buffer pool used by an instance. SQL Server can change its memory requirements dynamically by default. But you can configure it based on your system memory.   Follow the following steps to set fixed amount of memory in SQL Server.      Right click on server and select Properties in Object Explorer.         Click/Select Memory node like below screen.         Under Server Memory Options, enter the amount that you want forMinimum server memory and Maximum server memory. Here I used 4500 MB on basis of my system capacity.   Default settings:   Min server memory = 0  Max server memory = 2147483647 MB  ","categories": ["SQL Server","Troubleshooting","Database"],
        "tags": ["sqlserver","troubleshooting","database"],
        "url": "http://localhost:4000/set-a-fixed-amount-of-memory-in-sql-server-using-sql-server-management-studio/",
        "teaser":null},{
        "title": "How to view SQL Server error log",
        "excerpt":"The SQL Server error log contains user-defined events and certain system events. You can use this error log to troubleshoot problems related to SQL Server.   Step to view SQL Server error log      Object Explorer -&gt; Server -&gt; Management -&gt; SQL Server Logs.         Right-click a log -&gt; Click View SQL Server Log.     ","categories": ["SQL Server","Database","Troubleshooting"],
        "tags": ["sql server","database","troubleshooting"],
        "url": "http://localhost:4000/how-to-view-sql-server-error-log/",
        "teaser":null},{
        "title": "Folder permission from windows command line",
        "excerpt":"To give all permission in temp folder for every one, run command prompt with admin privilege and then run the following command.   D:\\Images&gt; cacls C:\\Windows\\Temp /t /e /g Everyone:f processed dir: C:\\Windows\\Temp processed dir: C:\\Windows\\Temp\\C9B3A155-BAC8-4CC8-BB43-0E3BE182ABAB-Sigs processed dir: C:\\Windows\\Temp\\CAVS processed dir: C:\\Windows\\Temp\\comtypes_cache processed dir: C:\\Windows\\Temp\\Crashpad processed dir: C:\\Windows\\Temp\\CR_AD113.tmp processed dir: C:\\Windows\\Temp\\DiagOutputDir processed dir: C:\\Windows\\Temp\\Gethelp processed file: C:\\Windows\\Temp\\GoogleDFSSetup_211015180131_8668.log processed dir: C:\\Windows\\Temp\\logs processed file: C:\\Windows\\Temp\\MpCmdRun.log processed file: C:\\Windows\\Temp\\MpCopyAccelerator.log processed file: C:\\Windows\\Temp\\MpSigStub.log   Here,     /t means “apply change recursively”   /e means “edit existing DACL”.   Alternative way  You can try with the following command   C:&gt;icacls \"C:\\Windows\\temp\" /grant mahedee:(OI)(CI)F  Here,     F= Full Control   CI= Container Inherit   OI= Object Inherit    ","categories": ["C#"],
        "tags": ["csharp"],
        "url": "http://localhost:4000/folder-permission-from-windows-command-line/",
        "teaser":null},{
        "title": "How To Find Prime Number Between 1 To N",
        "excerpt":"class Program {     static void Main(string[] args)     {         //int n = 100000;         int n = 0;         Console.WriteLine(\"Type an integer number to get prime number between 1 to n\");         Int32.TryParse(Console.ReadLine(), out n);         PrintPrimes(n);     }      public static void PrintPrimes(int n)     {         bool isPrime = false;         for (int i = 2; i &lt; n; i++)          {              isPrime = true; for (int j = 2; j &lt;= Math.Sqrt(i); j++)              {                  if (i % j == 0)                  {                      isPrime = false; break;                  }              }              if (isPrime)                  Console.Write(i + \" \");          }          Console.ReadKey();      } }      ","categories": ["C#"],
        "tags": ["csharp"],
        "url": "http://localhost:4000/how-to-find-prime-number-between-1-to-n/",
        "teaser":null},{
        "title": "How to check palindrome word using C#",
        "excerpt":"Palindrome word can be read in both direction. Suppose “level” can be read in both direction, so it is palindrome word. To check palindrome word you can try like following code using C#.   class Program {     public static bool IsPalindrome(string word)     {         int minLength = 0;         int maxLength = word.Length - 1;         while (true)         {             if (minLength &gt; maxLength)             {                 return true;             }             char a = word[minLength];             char b = word[maxLength];             if (char.ToLower(a) != char.ToLower(b))             {                 return false;             }             minLength++;             maxLength--;         }     }       static void Main()     {         string[] palindromeWord = {\"aibohphobia\",\"Dhaka\",\"alula\",\"cammac\",\"Civic\", \"deified\",\"deleveled\",                              \"detartrated\",\"devoved\",\"History\",\"evitative\",\"level\",\"\",\"mahedee\"};           foreach (string word in palindromeWord)         {             if (IsPalindrome(word))             {                 Console.WriteLine(word + \" is a Palindrome\");             }             else             {                 Console.WriteLine(word + \" is not a Palindrome\");             }         }         Console.ReadKey();     } }     ","categories": ["C#"],
        "tags": ["csharp"],
        "url": "http://localhost:4000/how-to-check-palindrome-word-using-c/",
        "teaser":null},{
        "title": "How to remove special character from unicode string",
        "excerpt":"Here is the sample code to remove special character from Unicode string.                                      Sample Input: SG@%@sgs th? g#%@^@#$ chào^#^$#!abc35           _ sgs _35 hello world không gsg                           Sample Output: SG%sgs th? g#%^#$ chào^#^$#!abc35 sgs 35 hello world không gsg   class Program {     static void Main(string[] args)     {         string inputString = \"SG@%@sgs thể g#%@^@#$ chào^#^$#!abc35| _ sgs _35 hello world không gsg\";           string outputString = inputString.Replace(\"@\", \"\").Replace(\"|\", \"\").Replace(\"_\", \"\");           Console.WriteLine(inputString);         Console.WriteLine(outputString);         Console.ReadKey();     } }     ","categories": ["C#"],
        "tags": ["csharp"],
        "url": "http://localhost:4000/how-to-remove-special-character-from-unicode-string/",
        "teaser":null},{
        "title": "Common PowerShell commands for windows",
        "excerpt":"   Open (Windows) File Explorer using Command Prompt or PowerShell   PS C:\\Users\\mahedee&gt; explorer  ","categories": ["OS","Windows","Commands"],
        "tags": ["os","windows","commands"],
        "url": "http://localhost:4000/common-powershell-commands/",
        "teaser":null},{
        "title": "Common Tips for windows",
        "excerpt":"   Open (Windows) File Explorer using Command Prompt or PowerShell     Win + E  ","categories": ["OS","Windows"],
        "tags": ["os","windows"],
        "url": "http://localhost:4000/common-tips-for-windows/",
        "teaser":null},{
        "title": "Love calculator using C#",
        "excerpt":"Love Calculator    public class LoveCalculator {     public string GetResults(string name1, string name2)     {         return GetCount(name1, name2);     }     private string GetCount(string firstName, string secondName)     {         try         {             string first = firstName.ToUpper();             int firstlength = firstName.Length;             string second = secondName.ToUpper();             int secondlength = secondName.Length;             int LoveCount = 0;               for (int Count = 0; Count &lt; firstlength; Count++)             {                 string singleLetter = first.Substring(Count, 1);                 if (singleLetter.Equals(\"A\")) LoveCount += 2;                 if (singleLetter.Equals(\"E\")) LoveCount += 2;                 if (singleLetter.Equals(\"I\")) LoveCount += 2;                 if (singleLetter.Equals(\"O\")) LoveCount += 2;                 if (singleLetter.Equals(\"U\")) LoveCount += 3;                 if (singleLetter.Equals(\"A\")) LoveCount += 1;                 if (singleLetter.Equals(\"E\")) LoveCount += 3;             }             for (int Count = 0; Count &lt; secondlength; Count++)             {                 string singleLetter = second.Substring(Count, 1);                 if (singleLetter.Equals(\"A\")) LoveCount += 2;                 if (singleLetter.Equals(\"E\")) LoveCount += 2;                 if (singleLetter.Equals(\"I\")) LoveCount += 2;                 if (singleLetter.Equals(\"O\")) LoveCount += 2;                 if (singleLetter.Equals(\"U\")) LoveCount += 3;                 if (singleLetter.Equals(\"A\")) LoveCount += 1;                 if (singleLetter.Equals(\"E\")) LoveCount += 3;             }             int amount = 0;             if (LoveCount &gt; 0) amount = 5 - ((firstlength + secondlength) / 2);             if (LoveCount &gt; 2) amount = 10 - ((firstlength + secondlength) / 2);             if (LoveCount &gt; 4) amount = 20 - ((firstlength + secondlength) / 2);             if (LoveCount &gt; 6) amount = 30 - ((firstlength + secondlength) / 2);             if (LoveCount &gt; 8) amount = 40 - ((firstlength + secondlength) / 2);             if (LoveCount &gt; 10) amount = 50 - ((firstlength + secondlength) / 2);             if (LoveCount &gt; 12) amount = 60 - ((firstlength + secondlength) / 2);             if (LoveCount &gt; 14) amount = 70 - ((firstlength + secondlength) / 2);             if (LoveCount &gt; 16) amount = 80 - ((firstlength + secondlength) / 2);             if (LoveCount &gt; 18) amount = 90 - ((firstlength + secondlength) / 2);             if (LoveCount &gt; 20) amount = 100 - ((firstlength + secondlength) / 2);             if (LoveCount &gt; 22) amount = 110 - ((firstlength + secondlength) / 2);             if (firstlength == 0 || secondlength == 0) amount = 0;             if (amount &lt; 0) amount = 0;             if (amount &gt; 99) amount = 99;             return amount.ToString();         }         catch (Exception ex)         {             return \"There is an error!!\" + ex.ToString();         }     } }     public class Program {     public static void Main(string[] args)     {         Console.WriteLine(\"Love Calculator\");           while (true)         {             Console.Write(\"Enter First Name:\");               string name1 = Console.ReadLine();             Console.Write(\"Enter Second Name:\");               string name2 = Console.ReadLine();               LoveCalculator loveCalculator = new LoveCalculator();             string result = loveCalculator.GetResults(name1, name2);             Console.WriteLine(\"Love Result :\" + result + \"%\");             Console.WriteLine(\"Press q to exit\");             string quit = Console.ReadLine();             if (quit.ToLower().Trim() == \"q\")                 break;         }     } }     ","categories": ["C#"],
        "tags": ["csharp"],
        "url": "http://localhost:4000/love-calculator-using-c.md/",
        "teaser":null},{
        "title": "Static constructor and C# implementation",
        "excerpt":"Static Constructor      Instance constructors are used to initialize an object   Static constructors are used to initialize a class   Will only ever be executed once   Run before the first object of that type is created.   Have no parameter   Do not take an access modifier   May co-exist with a class constructor   Syntax:   class Lion {     static Lion()     {         // class-specific initialization     } }    Example:   class RandomNumberGenerator {     private static Random randomNumber;     public static string AuthorName { get; set; }      public RandomNumberGenerator(String msg)     {         Console.WriteLine(msg);         //Constructor for object     }      //Static constructor     static RandomNumberGenerator()     {         AuthorName = \"Mahedee Hasan\";         randomNumber = new Random();     }      public int Next()     {         return randomNumber.Next();     } }  class Program {     static void Main(string[] args)     {         RandomNumberGenerator randomNumber         = new RandomNumberGenerator(\"Generate 10 Random Number\");          for (int i = 0; i &lt; 10; i++)          {              Console.WriteLine(randomNumber.Next());          }           Console.WriteLine(\"Author Name: \" + RandomNumberGenerator.AuthorName);          Console.ReadKey();      }  }    ","categories": ["C#"],
        "tags": ["csharp"],
        "url": "http://localhost:4000/static-constructor-and-c-implementation/",
        "teaser":null},{
        "title": "Properties a short explanation using C#",
        "excerpt":"What are properties?   Properties are methods that protect access to class members.     Properties are class members that provide access to elements of an object or class.   Protect access to the state of object.   It likes fields, but they operate much like methods.   The get and set statements are called accessors.   Fields can’t be used in Interfaces so properties are the solution.   Syntax:   private double balance; public double Balance {     get     {         return balance;     }     set     {         balance = value;     } }   Example:   public class Employee {     private double salary;     private double taxRate = 0.05;             public string Name { get; set; }     public double YearOfExp { get; set; }       public double YearlyMedicalAllowance {get; private set;}       public Employee()     {         this.YearlyMedicalAllowance = 30000;     }       public double Salary     {         get { return salary; }         set {             if (value &gt; 200000)                 salary = value - value * taxRate;             else                 salary = 5000;         }     }   }  class Program {     static void Main(string[] args)     {         Employee objEmployee = new Employee();         objEmployee.Name = \"Rafiqul Islam\";         objEmployee.YearOfExp = 7;         objEmployee.Salary = 5000;                   Console.WriteLine(objEmployee.Name);         Console.WriteLine(\"Salary: \" + objEmployee.Salary);         Console.WriteLine(\"Yearly Madical Allowance\" + objEmployee.YearlyMedicalAllowance);           Console.ReadLine();     } }     ","categories": ["C#"],
        "tags": ["csharp"],
        "url": "http://localhost:4000/properties-a-short-explanation-using-c/",
        "teaser":null},{
        "title": "Commonly used proverbs with bangla meaning",
        "excerpt":"   নাচতে না জানলে উঠোন বাঁকা। - A bad workman quarrels with his tools.   যত গর্জে তত বর্ষে না। - A barking dog never or seldom bites.   মাথা নেই তার মাথাব্যথা। - A beggar cannot be a bankrupt.   নেংটার নেই বাটপাড়ের ভয়। - A beggar may sing before a pick-pocket.   হাতের জিনিস ফেলে দূরের জিনিস নিতে নেই। - A bird in the hand is worth two in the bush.   বিনা মেঘে বজ্রপাত। - A bolt from the blue.   তর্জনকারী বা ষন্ডা সব সময়ই কাপুরুষ। - A bully is always a cow.   ঘর-পোড়া গরু সিন্দুরে মেঘ দেখলে ভয় পায়। - A burnt child dreads the fire or Once bitten, twice shy.   কই মাছের প্রাণ বড়ই শক্ত। - A cat has nine lives.   সোজা আঙ্গুলে ঘি ওঠে না। - A cat in gloves catches no mice.   আপন গাঁয়ে কুকুর রাজা। - A cock is always bold on its own dunghill .   যতক্ষণ শ্বাস, ততকক্ষণ আঁশ।- A drawing man catches or clutches at a straw . or, While there is life, there is hope.   অসময়ের বন্ধুই প্রকৃত বন্ধু। - A friend in need is a friend in deed.   ভাত ছড়ালে কাকের অভাব হয় না। - A full purse never lacks friends.   টাকায় বাঘের দুধ মেলে। - A golden key can open any door.   একটা সুন্দর শুরু কোন কাজের অর্ধেক সাফল্য এনে দেয়/যুদ্ধের শুরু ভালো মানে অর্ধেক বিজয়। - A good beginning is half the battle .   সেয়ানে সেয়ানে কোলাকুলি। - A Greek meeting a Greek.   বাড়ন্তরা অনেক খায়। - A growing youth has a wolf in his belly .   অনুতপ্ত হলে অভিযোগকারীর প্রয়োজন নেই। - A guilty conscience needs no accuser.   ঠাকুর ঘরে কে, আমি তো কলা খাইনি। - A guilty mind is always suspicious.   পকেটে টাকা থাকলে মনও ভালো থাকে। - A heavy purse makes a light heart.   একাই একশো। - A host in himself.   খিদের জ্বালায় মাথা ঠিক থাকে না । - A hungry fox is an angry fox .   প্রয়োজনে আইন মানে না। - Necessity knows no law.   নেবু কচলালে তেতো হয়।- A jest driven hard, loses its point.   আজ বাদশা কাল ফকির। - A king today is a beggar tomorrow.   ট্যাক খালি তো মুখ কালি। - A light purse is a heavy curse.   অল্পবিদ্যা ভয়ংকরী।- A little learning is a dangerous thing.   পাগলে কী না বলে, ছাগলে কী না খায়। - A mad man and a animal have no difference.   সঙ্গ দেখে লোক চেনা যায় । - A man is known by the company he keeps .   নিজ বাড়ি নিজ ভুবন । - A man’s home is his castle .   নেংটার নেই বাটপারের ভয় । - A pauper has nothing to lose .   অসৎ সঙ্গে সর্বনাশ । - A rotten sheep infects the flock .   জ্ঞানীরা স্বল্পভাষী হয়। - A still tongue makes a wise head.   দুষ্ট গরুর চেয়ে শূন্য গোয়াল ভালো। - Better an empty house than an ill tenant .   চোরে চোরে মাসতুতো ভাই । - Birds of a feather flock together.   একই গোয়ালের গরু। - Birds of the same feather.   দাঁত থাকতে দাঁতের মর্যাদা জানে না। - Blessings are not valued till they are gone.   আকাশকুসুম কল্পণা করা। - Build castles in the air.   আগে ঘর তারপর পর - Charity begins at home.   ভালো হতে পয়সা লাগে না। - Civility/courtesy costs nothing.   ","categories": ["English"],
        "tags": ["proverb","english"],
        "url": "http://localhost:4000/most-used-proverbs-with-bangla-meaning/",
        "teaser":null},{
        "title": "Most commonly used proverbs",
        "excerpt":"   Slow and steady wins the race.   A bad workman quarrels with his tools. - An inefficient man complains of cicrumstances.   A barking dog seldom or never bites. - Someone who makes threats all the time seldom carries out the threats.   A burnt child dreads the fire or Once bitten, twice shy. - Experience teaches us caution; if something has hurt you once, you avoid it after that.   When in Rome, do as the Romans do.   If one can do it, You too can do it. If none can do it, you must do it. - Japanese Proverb.   Don’t judge a book by its cover.   Better late than never.   The grass is always greener on the other side of the fence.   Practice makes a man perfect.   The pen is mightier than the sword.   Actions speak louder than words.   Where there is a will, there is a way.   He who asks is a fool for five minutes, but he who does not ask remains a fool forever - Chinese Proverb.   I hear: I forget. I see: I remember. I do: I understand. - Chinese proverb   A picture is worth a thousand words.   Beauty is in the eye of the beholder.   Don’t put all of your eggs in one basket.   Fortune favours the brave / bold.   God helps those who help themselves.   Good things come to those who wait.   Honesty is the best policy.   Don’t reinvent the wheel.   Hope for the best, prepare for the worst.   If you play with fire, you’ll get burned.   Knowledge is power.   Laughter is the best medicine.   Like father, like son.   Like mother, like daughter.   People who live in the glass houses should not throw stones.   There is no place like home.   There is no such thing as a free lunch. (Nothing is free.)   Time is money.   Two heads are better than one. - It’s easier to do something as a team than by yourself.   Where there’s smoke, there’s fire.   Oil your own machine.   A guilty mind is always suspicious. - A criminal is always weak in mind though he tries to conceal this weakness.   A little learning is a dangerous thing.   A still tongue makes a wise head. - A wise man does not talk very much.   A tree is known by its fruit. - A man’s actual character is known by his actions.   A word to the wise is sufficient. -Wise people do not need long explanation.   Grasp all, lose all   As many men, so many minds   All that glitters is not gold.   An idle brain is the devil’s workshop.   Prevention is better than cure.   As is the tree, so is the fruit.   As you sow so you reap.   Better alone than in bad company.   Better an empty house than an ill tenant.   Civility/courtesy costs nothing   ","categories": ["English"],
        "tags": ["proverb","english"],
        "url": "http://localhost:4000/most-used-proverbs/",
        "teaser":null},{
        "title": "Some most used quote",
        "excerpt":"   Sometimes you win, sometimes you learn - John Maxwell, American Author and Speaker   A leader is one who knows the way, goes the way, and shows the way. - John Maxwell, American Author and Speaker   Your time is limited, so don’t waste it living someone else’s life. - Steve Jobs.   Stay hungry. Stay foolish. - Steve Jobs.   If you don’t do it, someone else will.   Respect is earned. Not given.   Insanity is doing the same thing over and over again and expecting different result. - Albert Einstein   If you do the same thing in the same way over and over again, you can’t expect different result.   Sometimes, you can’t shine but you can shine your weapon.   Fake it until you make it.   If you really want to do something, you will find a way. If you don’t, you will find an excuse. - Jim Rohn   If you think you can - you can! - Ronald Reagan   You can if you think you can - Dr. Norman Vincent Peale   Focus on one task at a time. “He who chases two rabbits catches neither.” - Paul Foster, CEO and Founder, The Business Therapist.   Don’t think what’s the cheapest way to do it or what’s the fastest way to do it, think what’s the most amazing way to do it. - Rechard Branson, Founder, Virgin Group   Laughter is the best medicine.   The only way to do great work is to love what you do. - Steve Jobs   Speak in such a way that others love to listen to you. Listen in such a way that others love to speak to you.   Dream is not what you see in sleep. It is something that does not let you sleep. - Dr. APJ Abdul Kalam   Be patient. Everthing comes to you in the right moment.   The biggest risk is not taking any risk. - Mark Zuckerberg        The future depends on what we do in the present.- Mahatma Gandhi            Enjoy life. This is not a dress rehearsal. - Friedrich Nietzsche            Creativity is just connecting things. ― Steve Jobs            Have the courage to follow your heart and intuition. They somehow already know what you truly want to become. Everything else is secondary. ― Steve Jobs            Sometimes when you innovate, you make mistakes. It is best to admit them quickly, and get on with improving your other innovations. ― Steve Jobs            An idea without execution is nothing. - John Lee Dumas       Why do people always expect authors to answer questions? I am an author because I want to ask questions. If I had answers, I’d be a politician. — Eugène Ionesco  ","categories": ["Quote","English"],
        "tags": ["quote","motivational","english"],
        "url": "http://localhost:4000/most-used-quote-motivational/",
        "teaser":null},{
        "title": "ইসলামিক মহান বানী",
        "excerpt":"আল কোরআন      রহমানের বান্দা তো তারাই, যারা দুনিয়াতে নম্রভাবে চলাফেরা করে। তাদের সাথে যখন মূর্খরা কথা বলতে থাকে, তারা বলে সালাম (শান্তি)। - সূরা_ফুরক্বনঃ ৬৩   চরিত্রহীনা নারী চরিত্রহীন পুরুষের জন্য, আর চরিত্রহীন পুরুষ চরিত্রহীনা নারীর জন্য। সৎ চরিত্রবতী নারী সৎ চরিত্রবান পুরুষের জন্য, আর সৎ চরিত্রবান পুরুষ সৎ চরিত্রবতী নারীর জন্য। - আল কুরআন   মুসলিম স্কলার      সুন্দর বিদায় হলো ক্ষতি না করে বিদায় নেয়া, সুন্দর ক্ষমা হলো বকা না দিয়ে ক্ষমা করা, সুন্দর ধৈর্য হলো অভিযোগ না রেখে ধৈর্য্ধারণ করা। - ইমাম ইবনে তাইমিয়া   ","categories": ["Quote","Bangla"],
        "tags": ["quote","motivational","bangla","islamic"],
        "url": "http://localhost:4000/islamic-quran-hadith-quote-bangla/",
        "teaser":null},{
        "title": "বানী চিরন্তনী",
        "excerpt":"   মূর্খদের সাথে কখনো তর্ক করতে যেও না, কারন হলো মূর্খরা তোমাকে তাদের পর্যায়ে নামিয়ে নিয়ে এসে তর্কে হারিয়ে দিবে। - হুমায়ূন আহমেদ   তুমি আমাকে শিক্ষিত মা দাও, আমি তোমাকে শিক্ষিত জাতি দিবো - নেপোলিয়ন বোনাপার্ট        স্বপ্ন সেটা নয় যেটা মানুষ, ঘুমিয়ে ঘুমিয়ে দেখে; স্বপ্ন সেটাই যেটা পূরনের প্রত্যাশা, মানুষকে ঘুমাতে দেয় না। - এ পি জে আব্দুল কালাম            বিনয়কে এদেশে দুর্বলতা মনে করা হয়, বদমেজাজকে ব্যক্তিত্ব ভাবা হয়। — হুমায়ূন আহমেদ       নদীর এপার কহে ছাড়িয়া নিশ্বাস, ওপারেতে সর্বসুখ আমার বিশ্বাস। নদীর ওপার বসি দীর্ঘশ্বাস ছাড়ে; কহে, যাহা কিছু সুখ সকলি ওপারে। - রবীন্দ্রনাথ ঠাকুর   আমরা সবাই পাপী; আপন পাপের বাটখারা দিয়ে; অন্যের পাপ মাপি !! - কাজী নজরুল ইসলাম   ছোট ছোট বালুকণা, বিন্দু বিন্দু জল, গড়ে তোলে মহাদেশ, সাগর অতল। - সংগৃহীত   ”বইয়ের মত এত বিশ্বস্ত বন্ধু আর নেই।“— আর্নেস্ট হেমিংওয়ের   ”ভাল বন্ধু, ভাল বই এবং একটি শান্ত বিবেক: এটি আদর্শ জীবন।“— মার্ক টোয়েন   ”যদি এমন কোনও বই থাকে যা আপনি পড়তে চান তবে এটি এখনও লেখা হয়নি তবে আপনাকে অবশ্যই এটি লিখতে হবে।” — টনি মরিসন   ”ভালো বই পড়া মানে গত শতাব্দীর মহৎ লোকের সাথে আলাপ করা।“- দেকার্ত   ”বই ছাড়া একটি কক্ষ আত্মা ছাড়া দেহের মত।” -মার্কাস টুলিয়াস সিসারো   ”একজন মানুষ ভবিষ্যতে কী হবেন সেটি অন্য কিছু দিয়ে বোঝা না গেলেও তার পড়া বইয়ের ধরন দেখে তা অনেকাংশেই বোঝা যায়।“-অস্কার ওয়াইল্ড   ”অন্তত ষাট হাজার বই সঙ্গে না থাকলে জীবন অচল।” – নেপোলিয়ান   ”বই কিনে কেউ কোনদিন দেউলিয়া হয় না।“-সৈয়দ মুজতবা আলী   ”বই হচ্ছে শ্রেষ্ঠ আত্মীয়, যার সঙ্গে কোনদিন ঝগড়া হয় না,কোনদিন মনোমালিন্য হয় না।“- প্রতিভা বসু   ”বই খুলে যা দেখে নেয়া যায় তা কখনো মুখস্থ করতে যেয়ো না।“-আলবার্ট আইনস্টাইন   ”বই হচ্ছে অতীত আর বর্তমানের মধ্যে বেঁধে দেয়া সাঁকো।” -রবীন্দ্রনাথ ঠাকুর   ”বই হচ্ছে মস্তিষ্কের সন্তান।” – জনাথন সুইফট   ”বই হলো এমন এক মৌমাছি যা অন্যদের সুন্দর মন থেকে মধু সংগ্রহ করে পাঠকের জন্য নিয়ে আসে।” – জেমস রাসেল   ”জীবনে তিনটি জিনিসের প্রয়োজন- বই, বই এবং বই।” – ডক্টর মুহম্মদ শহীদুল্লাহ   ”ঘরের কোনো আসবাবপত্র বইয়ের মতো সুন্দর নয়।” -সিডনি স্মিথ   ”খুব কম বয়সেই বই পড়ার প্রতি আমার ঝোঁক তৈরি হয়। শিশু হিসেবে আমার বাবা–মাও বই কিনতে আমাকে ইচ্ছামতোই টাকা দিতেন। তাই আমি প্রচুর পড়তাম।”- বিল গেটস   ”রুটি মদ ফুরিয়ে যাবে, প্রিয়ার কালো চোখ ঘোলাটে হয়ে যাবে, বই, সেতো অনন্ত যৌবনা।“-ওমর খৈয়াম   ”একটি বই পড়ার দুটি উদ্দেশ্য থাকা উচিত একটি হল- বইটিকে উপভোগ করা অন্যটি হল- বইটি নিয়ে গর্ব করতে পারা।“- বার্ট্রান্ড রাসেল   ”আমরা যখন বই সংগ্রহ করি, তখন আমরা আনন্দকেই সংগ্রহ করি।“- ভিনসেন্ট স্টারেট   ”আমাদের আত্মার মাঝে যে জমাট বাধা সমুদ্র সেই সমুদ্রের বরফ ভাঙার কুঠার হলো বই।“- ফ্রান্ৎস কাফকা   ”ভালো খাদ্য বস্তু পেট ভরে কিন্ত ভাল বই মানুষের আত্মাকে পরিতৃপ্ত করে।“-স্পিনোজা   ”একটি ভালো বই হলো বর্তমান ও চিরকালের জন্য সবচেয়ে উৎকৃষ্ট বন্ধু।” -টুপার   ”যে বই পড়েনা,তার মধ্যে মর্যাদাবোধ জন্মেনা।“-পিয়ারসন স্মিথ   ”বই হল মানুষের অনুভূতির ঘরে প্রবেশ করার অন্যতম চাবি।“- ফেরদৌসি মঞ্জিরা   ”বই উপহার দেওয়ার মাধ্যমে আমরা আসলে প্রিয়জনকে মানসিক উন্নয়নের রাস্তা দেখিয়ে দেই।“- ফেরদৌসি মঞ্জিরা   ”যারা বইয়ের পাতা ভালো করে পড়তে পারে তারা মানুষের চোখের পাতাও পড়তে পারে।“-কিশোর মজুমদার   নিন্দা করতে গেলে বাইরে থেকে করা যায়, কিন্তু বিচার করতে গেলে ভিতরে প্রবেশ করতে হয় - রবীন্দ্রনাথ ঠাকুর   হাসি সবসময় সুখের কারণ বুঝায় না মাঝে মাঝে এটা ও বুঝায় যে আপনি কতটা বেদনা লুকাতে পারেন - হুমায়ূন আহমেদ   একটি বই একশটি বন্ধুর সমান.. কিন্তু একজন ভালো বন্ধু পুরো একটি লাইব্রেরির সমান - এ পি জে আব্দুল কালাম   কখনো কাউকে অযোগ্য বলে অবহেলা করো না। ভেবে দেখো তুমিও কারো না কারো কাছে অযোগ্য। কেউ কারো যোগ্য নয়, যোগ্য বিবেচনা করে নিতে হয়। - হুমায়ূন আহমেদ   ছেলে এবং মেয়ে বন্ধু হতে পারে, কিন্তু তারা অবশ্যই একে অপরের প্রেমে পড়বে। হয়ত খুবই অল্প সময়ের জন্য, অথবা ভুল সময়ে। কিংবা খুবই দেরিতে, আর না হয় সব সময়ের জন্য। তবে প্রেমে তারা পড়বেই। - হুমায়ূন আহমেদ   লোভী ও অহংকারী মানুষকে বিধাতা সবচাইতে বেশী ঘৃণা করে - জন রে   চুল তার কবেকার অন্ধকার বিদিশার নিশা, মুখ তার শ্রাবস্তীর কারুকার্য; অতিদূর সমুদ্রের’পর হাল  ভেঙে যে নাবিক হারায়েছে দিশা - জীবনানন্দ দাশ   ‘পারিব না’ একথাটি বলিও না আর, কেন পারিবে না তাহা ভাব একবার; পাঁচজনে পারে যাহা, তুমিও পারিবে তাহা, পার কি না পার কর যতন আবার একবার না পারিলে দেখ শতবার। - কালীপ্রসন্ন ঘোষ   মনুষ্যত্বের শিক্ষাটাই চরম শিক্ষা আর সমস্তই তার অধীন - রবীন্দ্রনাথ ঠাকুর   আমি সবসময় নিজেক সুখী ভাবি, কারণ আমি কখনো কারো কাছে কিছু প্রত্যাশা করি না, কারো কাছে কিছু প্রত্যাশা করাটা সবসময়ই দুঃখের কারণ হয়ে দাঁড়ায় - উইলিয়াম শেক্সপিয়র   নরম কাঁদা একবার পুড়ে যদি ইট হয়ে যায়, তারপর যতই পানি ঢালা হোক না কেন, তা আর গলে না বরং শক্তিশালী হয়। মানুষের মনও একই রকম, একবার কষ্ট পেলে এরপর শত আবেগেও তার কোন পরিবর্তন হয় না। - টার্মস টমাস   ভদ্র ছেলেদের জন্য মেয়েদের মনে কখনও প্রেম জাগে না। যা জাগে সেটা হল সহানুভূতি। - হুমায়ূন আহমেদ   মানুষের কষ্ট দেখাও কষ্টের কাজ - হুমায়ূন আহমেদ   কাঁটা হেরি ক্ষান্ত কেন কমল তুলিতে দুঃখ বিনা সুখ লাভ হয় কি মহীতে? - কৃষ্ণচন্দ্র মজুমদার   বাস্তবতা নিছক একটি বিভ্রম, যদিও এটি খুব স্থায়ী - অ্যালবার্ট আইনস্টাইন   বন্যেরা বনে সুন্দর শিশুরা মাতৃক্রোড়ে - সঞ্জীবচন্দ্র চট্টোপাধ্যায়   সরাসরি চোখের দিকে তাকিয়ে কেউ মিথ্যা বলতে পারে না। মিথ্যা বলতে হয় অন্যদিকে তাকিয়ে! - হুমায়ূন আহমেদ   এই পৃথিবী কখনো খারাপ মানুষের খারাপ কর্মের জন্য ধ্বংস হবে না, যারা খারাপ মানুষের খারাপ কর্ম দেখেও কিছু করেনা তাদের জন্যই পৃথিবী ধ্বংস হবে - অ্যালবার্ট আইনস্টাইন   আপনি যদি গরীব হয়ে জন্ম নেন তাহলে এটা আপনার দোষ নয়, কিন্তু যদি গরীব থেকেই মারা যান তবে সেটা আপনার দোষ। - বিল গেটস   সবার উপর মানুষ সত্য, তাহার উপর নাই - চণ্ডীদাস   অধিকার ছাড়িয়া দিয়া অধিকার ধরিয়া রাখার মত বিড়ম্বনা আর হয় না - রবীন্দ্রনাথ ঠাকুর   কপালে সুখ লেখা না থাকলে সে কপাল পাথরে ঠুকেও লাভ নেই। এতে কপাল যথেষ্টই ফোলে, কিন্তু ভাগ্য একটুও ফোলে না - কাজী নজরুল ইসলাম   আগুনকে যে ভয় পায়, সে আগুনকে ব্যবহার করতে পারে না - রবীন্দ্রনাথ ঠাকুর  ","categories": ["Quote","Bangla"],
        "tags": ["quote","motivational","Bangla"],
        "url": "http://localhost:4000/most-used-quote-motivational-bangla/",
        "teaser":null},{
        "title": "HTTP Error 404.3",
        "excerpt":"Did you find the error “HTTP Error 404.3” ? Yes, I found the error at the time of deploying my ASP.NET web application to IIS 7. I found the following error (screen shot).         To solve the error follow the following steps:   Step 1: Go to Control Panel -&gt; Programs and Features -&gt; Turn Windows Features on or off   Step 2: Mark the features as like following image.   Step 3: Click OK and reset IIS.  ","categories": ["Troubleshooting","IIS"],
        "tags": ["troubleshooting","iis"],
        "url": "http://localhost:4000/http-error-404-3/",
        "teaser":null},{
        "title": "Unlock file(S) which is locked by someone in TFS",
        "excerpt":"If you are team project administrator, do the following to unlock or undo checkout.      From the Source Control Explorer find the folder containing the locked file(s).   Right click and select Find -&gt; Find by Status “Find in Source Control” window will appears   Click the Find button   A “Find in Source Control” tab should appear showing the file(s) that are checked out   Right click the file you want to unlock   Select Undo from the context menu   A confirmation dialog appears. Click the Yes button.   The file should disappear from the “Find in Source Control” window.   That means you are undo or unlocked file(s)  ","categories": ["TFS","Source Control","Troubleshooting"],
        "tags": ["tfs","sourcecontrol","troubleshooting"],
        "url": "http://localhost:4000/unlock-files-which-is-locked-by-someone-in-tfs/",
        "teaser":null},{
        "title": "Get Data Length Of A Table In SQL Server",
        "excerpt":"Get Column Name, Data Type and Data Length of a table in sql server. Here hrm_employee is a table name.   SELECT COLUMN_NAME 'Column Name', DATA_TYPE 'Data Type', CHARACTER_MAXIMUM_LENGTH 'Maximum Length' FROM information_schema.columns WHERE TABLE_NAME = 'hrm_employee'   ","categories": ["SQL Server","SQL"],
        "tags": ["sqlserver","sql"],
        "url": "http://localhost:4000/get-data-length-of-a-table-in-sql-server/",
        "teaser":null},{
        "title": "Which service is using which port?",
        "excerpt":"Every day we fell in some difficulties and want to know which service is using by which port? Ports are divided into three ranges: The well-known ports (from 0 to 1023), the registered ports (from 1024 to 49151) and Dynamic (Private) ports (from 49152 to 65535). The Internet Assigned Numbers Authority (IANA) is responsible for the global coordination of the port assignment. Here I will show some tools to figure out the problem. Two well-known utility NETSTAT.EXE and TASKLIST.EXE will be used here.   TASKLIST.EXE is used to know the list of processes with its owing id. When we run &gt;tasklist in command window we see the following output.      Suppose, we want to know which port is used by skype? After running »tasklist you will see the above output. Here you will see Image Name: Skype.exe with process id or PID: 3224. Now if you want to know which process owes process id or PID 3224? Just run »tasklist /FI “PID eq 3224”. You will see the following output.      NETSTAT.EXE is used to identify what ports are being used by a particular process. The syntax that we will be using for NETSTAT.EXE is as follows: netstat.exe –a –n –o. Here,   -a: listing of all connections and listening ports -n: display address and port numbers in numerical form -o: display the owning PID associated with each connection Now after running &gt;netstat –a –n –o , you will see the following screen.      If you look at the output, you will see that local address of PID 3224 is 0.0.0.0:55956 which mean process id 3224 used port 55956. You already know that 3224 is the PID of process Skype.exe. So, you came to know that process skype.exe is used port 55956.  ","categories": ["Troubleshooting","OS"],
        "tags": ["troubleshooting","os"],
        "url": "http://localhost:4000/which-service-is-using-which-port/",
        "teaser":null},{
        "title": "Call JavaScript from Asp.Net code behind",
        "excerpt":"Suppose you want to display confirmation message by javascript from asp.net code behind after saving data. Write the following code in your button event.   protected void btnSaved_Click(object sender, EventArgs e) {          string msg = \"Data saved sucessfully\";           Page.ClientScript.RegisterStartupScript(this.GetType(), \"Alert\", \"&lt;script type=text/javascript&lt;alert('\" + msg + \"')&lt;/script&gt;\");   }   ","categories": ["Javascript","C#"],
        "tags": ["javascript","csharp"],
        "url": "http://localhost:4000/call-javascript-from-asp-net-code-behind/",
        "teaser":null},{
        "title": "Display information by ASP.Net literal control",
        "excerpt":"The literal control is similar to the Label control. Unlike the Label control, the Literal control does not render its content inside of a tag. You can use the Literal control to display text or HTML content in a browser.   Literal control does not support either CssClass or BackColor properties.   Literal control has mode property which Label has not. Three mode property of Literal control:   PassThrough: Displays the contents of the control without encoding. Encode: The contents of the control are converted to an HTML-encoded string. Transform: Unsupported markup-language elements are removed from the contents of the control. If the Literal control is rendered on a browser that supports HTML or XHTML, the control’s contents are not modified. You will be clear after watching output of the following   Write the following code in your aspx page. Here I used 4 literal. 1st one for displaying simple message from code behind. Others 3 are displayed the content in different mode of literal.   &lt;asp:Literal ID = \"ltrlMsg\" runat = \"server\"&gt;asp:Literal&gt; &lt;br /&gt; &lt;asp:Literal ID = \"ltrPasThrough\" Mode =\"PassThrough\" Text = \"This is Mahedee Hasan\" runat = \"server\"&gt;asp:Literal&gt; &lt;br /&gt; &lt;asp:Literal ID = \"Literal1\" Mode=\"Encode\" Text = \"This is Mahedee Hasan\" runat = \"server\"&gt;asp:Literal&gt; &lt;br /&gt; &lt;asp:Literal ID = \"Literal2\" Mode = \"Transform\" Text = \"This is Mahedee Hasan\" runat = \"server\"&gt;asp:Literal&gt; &lt;br /&gt;    protected void Page_Load(object sender, EventArgs e) {     this.ltrlMsg.Text = \"Welcome to ASP.net Literal Control!\"; }    The output of the code is look like this.   Welcome to ASP.net Literal Control!  This is Mahedee Hasan  This is Mahedee Hasanll  This is Mahedee Hasan  ","categories": ["ASP.NET","C#"],
        "tags": ["aspnet","csharp"],
        "url": "http://localhost:4000/display-information-by-asp-net-literal-control/",
        "teaser":null},{
        "title": "How To Create Domain Controller In Windows Server 2008 R2",
        "excerpt":"Domain concept is introduced in windows NT. Domain Controller (DC) is a server that is responsible to maintain security within window server domain. To install Domain Controller (DC) in Windows Server 2008 R2, follow the steps.   Step 1: Click “Start -&gt; Administrative tools -&gt; Server Manager -&gt; Roles -&gt; Add Roles”      Step 2: Click next on the following screen.      Step 3: Select Server Role - “Active directory domain service” and Click Next.         Step 4: Click “Install”      Step 5: Now install DNS Server and active directory service. Go to “run” and type “dcpromo”      Step 6: In Active Directory Domain Services Installation Wizard. Press “Next” and don’t check on “Use advance mode installation”.         Step 7: Select “Create a new domain in a new forest” and click “Next” on the following screen      Step 8: Type your domain name and click “Next”.      Step 9: Select Windows Server 2008 R2 and click “Next”      Step 10: If this is the first Domain controller then the following message will be visible. Check “DNS Server” and click “Next”      Step 11: Press “Yes” to continue.      Step 12: Select the location to keep log of Active Directory Domain Controller.      Step 13: Type administrator password and Confirm password for directory service and click “Next”      Step 14: Click “Next” of Summary window and check reboot the computer of the following screen.         Step 15: Your Domain Controller installed successfully. Now login to the system by domain Id.     ","categories": ["OS"],
        "tags": ["windows","domaincontroller","os"],
        "url": "http://localhost:4000/how-to-create-domain-controller-in-windows-server-2008-r2/",
        "teaser":null},{
        "title": "How to configure IIS for different port",
        "excerpt":" ","categories": ["IIS","Troubleshooting"],
        "tags": ["iis","troubleshooting"],
        "url": "http://localhost:4000/how-to-configure-iis-for-different-port/",
        "teaser":null},{
        "title": "How to copy folder with content using C#",
        "excerpt":"using System; using System.Collections.Generic; using System.IO; using System.Linq; using System.Text; using System.Threading.Tasks;   namespace CopyFolder {     class Program     {         static void Main(string[] args)         {             string sourcePath = @\"G:\\Mahedee_Share\\Created\";             string destPath = @\"G:\\Mahedee_Share\\Development\";             CopyFolder(sourcePath,destPath);         }                  private static void CopyFolder(string sourcePath, string destinationPath)         {                      try             {                          //Now Create all of the directories             foreach (string dirPath in Directory.GetDirectories(sourcePath, \"*\",             SearchOption.AllDirectories))             Directory.CreateDirectory(dirPath.Replace(sourcePath, destinationPath));                          //Copy all the files &amp; Replaces any files with the same name             foreach (string newPath in Directory.GetFiles(sourcePath, \"*.*\",             SearchOption.AllDirectories))             System.IO.File.Copy(newPath, newPath.Replace(sourcePath, destinationPath), true);             }             catch (Exception exp)             {                          }         }     } }   ","categories": ["C#","ASP.NET"],
        "tags": ["csharp","aspnet"],
        "url": "http://localhost:4000/how-to-copy-folder-with-content/",
        "teaser":null},{
        "title": "File upload to server with ASP.Net",
        "excerpt":"File Upload to Server with ASP.net Uploading file to server from client sometimes very tricky. Sometimes it is required that you will not upload file more than certain size. This is the step by step approach to upload file from client to server.   Step 1: Add html input type as file   &lt;input id =\"uploadFile\" type=\"file\" runat=\"server\" /&gt;   Step 2: Create a button to upload file in the server   &lt;asp:Button ID=\"Button1\" runat=\"server\" OnClick=\"Button1_Click\"  /&gt;   Step 3: Create a folder in the web project like “TempFiles”  Step 4: Upload file in the server.   protected void Button1_Click(object sender, EventArgs e) {       if (this.uploadFile.PostedFile != null)     {         // Get a reference to PostedFile object         HttpPostedFile huploadFile = uploadFile.PostedFile;                  // Get size of uploaded file         int nFileLen = huploadFile.ContentLength;                  decimal fileSize = uploadFile.PostedFile.ContentLength / 1024;         if (fileSize &gt; 100) //If file size is no more than 100 KB         {             this.lblMsg.Text = \"Size of this image is greater than 100KB\";             return;         }                  byte[] scriptData = new byte[nFileLen];                  // Read uploaded file from the Stream         huploadFile.InputStream.Read(scriptData, 0, nFileLen);                  string filePath = Server.MapPath(\"TempFiles\");                  filePath = filePath + \"\\\\\" + Path.GetFileName(uploadFile.PostedFile.FileName); //concate filename with file path         FileStream newFile = new FileStream(filePath, FileMode.Create);                  // Write data to the file         newFile.Write(scriptData, 0, scriptData.Length);                  // Close file         newFile.Close();     }     else     {         lblMsg.Text = \"This is an empty file\";     } }   ","categories": ["C#","ASP.NET"],
        "tags": ["csharp","aspnet"],
        "url": "http://localhost:4000/file-upload-to-server-with-asp-net/",
        "teaser":null},{
        "title": "Populate Dropdownlist With Selected Index",
        "excerpt":"This is a demo to populate asp.net dropdownlist by C#.   Step 1: Create a asp.net dropdownlist   Create a dropdownlist in asp.net page. Here, I created a dropdownlist name ddlStudentInfo.   &lt;asp:DropDownList ID = \"ddlStudentInfo\" runat = \"server\" Height=\"19px\" Width=\"166px\"&gt;&lt;/asp:DropDownList&gt;   Step 2: Create StudentInfo class   Create a student info class to create list of StudentInfo object.   public class StudentInfo {     public int Id { get; set; }     public string Name { get; set; } }  Step 3: Populate dropdownlist   Create a list of StudentInfo object. Make it data source of dropdownlist and choose your selected index. Here, I choose selected index 2 means dropdownlist shows Asrafuzzaman as selected text and 3 as selected value. I have write all those in Page Load. You can do as you required.   protected void Page_Load(object sender, EventArgs e) {         List lstStudentInfo = new List();                  StudentInfo objStudentInfo1 = new StudentInfo();         objStudentInfo1.Id = 1;         objStudentInfo1.Name = \"Mahedee Hasan\";                  lstStudentInfo.Add(objStudentInfo1);                  StudentInfo objStudentInfo2 = new StudentInfo();         objStudentInfo2.Id = 2;         objStudentInfo2.Name = \"Mahmud Ahsan\";         lstStudentInfo.Add(objStudentInfo2);                  StudentInfo objStudentInfo3 = new StudentInfo();         objStudentInfo3.Id = 3;         objStudentInfo3.Name = \"Asrafuzzaman\";         lstStudentInfo.Add(objStudentInfo3);                  StudentInfo objStudentInfo4 = new StudentInfo();         objStudentInfo4.Id = 4;         objStudentInfo4.Name = \"Enamul Haque\";         lstStudentInfo.Add(objStudentInfo4);                  ddlStudentInfo.DataSource = lstStudentInfo;         ddlStudentInfo.DataValueField = \"Id\";         ddlStudentInfo.DataTextField = \"Name\";         ddlStudentInfo.SelectedIndex = 2; //Selected index 2 means selected value is 3 and text is Asrafuzzaman         ddlStudentInfo.DataBind();   }    ","categories": ["C#","ASP.NET"],
        "tags": ["csharp","aspnet"],
        "url": "http://localhost:4000/populate-dropdownlist-with-selected-index/",
        "teaser":null},{
        "title": "Generate image On the fly using ASP.NET",
        "excerpt":"Object Oriented Programming by Mahedee Hasan     ","categories": ["OOP","C#"],
        "tags": ["oop","csharp"],
        "url": "http://localhost:4000/object-oriented-programming-at-a-glance/",
        "teaser":null},{
        "title": "Generate image On the fly using ASP.NET",
        "excerpt":"Generating image on the fly is not difficult in asp.net. Here I have created national flag of Bangladesh on the fly and displayed this as JPEG image format in asp.net web form. So let’s start to draw an image on the fly.   Step 1: Add a new web form in ASP.net website.   Step 2: In the Page_Load of the web form write the following code   protected void Page_Load(object sender, EventArgs e) {         //Define the rectangle with (x co-ordinate, y co-ordinate, width, height)         RectangleF rectF = new RectangleF(0, 0, 400, 200);         Bitmap img = new Bitmap(400, 200, PixelFormat.Format24bppRgb);         Graphics grphs = Graphics.FromImage(img);         SolidBrush bgBrush = new SolidBrush(System.Drawing.Color.Green);                  grphs.FillRectangle(bgBrush, rectF);                  SolidBrush elpsBgBrush = new SolidBrush(System.Drawing.Color.Red);                  //Fill the interior of an ellipse by the pair of co-ordinates and height and width         grphs.FillEllipse(elpsBgBrush, 140, 40, 130, 130);                  int fontSize = 20;         string fontName = \"Arial\" + \".ttf\";         PrivateFontCollection privateFontCollection = new PrivateFontCollection();         privateFontCollection.AddFontFile(@\"C:/WINDOWS/Fonts/\" + fontName);                  FontFamily fontFamily = privateFontCollection.Families[0];                  // Set font style         int fontStyle = Convert.ToInt32(Request.Form.Get(\"fontstyle\"));         string text = \"Bangladesh\";                  SolidBrush fgBrush = new SolidBrush(System.Drawing.Color.Yellow);         FontStyle style = FontStyle.Bold;                  StringFormat format = new StringFormat();         format.FormatFlags = StringFormatFlags.DirectionRightToLeft;                  Font font = new Font(fontFamily, fontSize, style, GraphicsUnit.Pixel);                  grphs.DrawString(text, font, fgBrush, rectF, format);                  Response.ContentType = \"image/jpeg\";         img.Save(Response.OutputStream, ImageFormat.Jpeg);                  // Dispose objects         img.Dispose(); }    Here RectangleF stores a set of four floating-point numbers that represent the location and size of a rectangle. Here first pair is (x,y) co-ordinate and second pair is width and height. SolidBrush define a brush of single color. FillRectangle and FillEllipse is responsible for both Filling rectangle and Ellipse. Graphics.DrawString is used to draw text in the rectangle.   Now run the website. Yes! You have drawn your desired National Flag of Bangladesh and its look like this.   Output:       ","categories": ["ASP.NET","C#"],
        "tags": ["aspnet","csharp"],
        "url": "http://localhost:4000/generate-image-on-the-fly-by-asp-net/",
        "teaser":null},{
        "title": "Retrieve Store Procedure’s Output Parameter By C# (ASP.Net)",
        "excerpt":"How to retrieve store procedure’s output parameter by C#? Here I have explained with a simple example. I created a simple store procedure with output parameter. Then I catch it from code behind page of asp.net and displayed it to a label. Here I used a class DBConnector to connect with database. Lets look on the demo.   Step 1: Set connection string in web.config.   &lt;connectionstrings&gt;      &lt;add connectionstring=\"Data Source=SOFT;Initial Catalog=TestDB;User ID=sa;Password=sa\" name=\"SQLServerConnectionString\" providername=\"System.Data.SqlClient\"&gt; &lt;/add&gt;&lt;/connectionstrings&gt;   Step 2: Create a store procedure with output parameter.   CREATE PROCEDURE [dbo].[sp_output_param] (      @input_param VARCHAR(200)     , @Response VARCHAR(250) OUTPUT ) AS     --DECLARE @myName BEGIN      SET @Response = 'Welcome ' + @input_param END    Step 3: Create a DBConnector Class to retrieve data from database.   using System; using System.Data; using System.Configuration; using System.Web; using System.Web.Security; using System.Web.UI; using System.Web.UI.WebControls; using System.Web.UI.WebControls.WebParts; using System.Web.UI.HtmlControls; using System.Data.SqlClient;    public class DBConnector {     private string connectionString = null;     private SqlConnection sqlConn = null;     private SqlCommand cmd = null;        public DBConnector()     {         connectionString = ConfigurationManager.ConnectionStrings[\"SQLServerConnectionString\"].ToString();     }           public SqlCommand GetCommand()     {         cmd = new SqlCommand();         cmd.Connection = sqlConn;         return cmd;     }        public SqlConnection GetConn()     {         sqlConn = new SqlConnection(connectionString);         return sqlConn;     }    }    Step 4 : Create a label name lblMsg in asp page. Then in a button event, write the following code. You will see your desired output in the lebel which is actually the value of output parameter. Here btnGetOutputParam_Click is the click event of Button btnGetOutputParam.   protected void btnGetOutputParam_Click(object sender, EventArgs e) {         SqlConnection sqlConn;         SqlCommand cmd;            DBConnector objDBConnector = new DBConnector();         sqlConn = objDBConnector.GetConn();            cmd = objDBConnector.GetCommand();            SqlDataReader rdr = null;            cmd.CommandType = CommandType.StoredProcedure;         cmd.CommandText = \"sp_output_param\";         cmd.Parameters.AddWithValue(\"@input_param\", \"Mahedee\");         cmd.Parameters.Add(\"@Response\", SqlDbType.VarChar, 250);         cmd.Parameters[\"@Response\"].Direction = ParameterDirection.Output;            try         {             if (sqlConn.State == ConnectionState.Closed)                 sqlConn.Open();                rdr = cmd.ExecuteReader();                string outputValue = cmd.Parameters[\"@Response\"].Value.ToString();             this.lblMsg.Text = outputValue;         }         catch (Exception exp)         {             throw (exp);         }         finally         {             if (sqlConn.State == ConnectionState.Open)                 sqlConn.Close();         }    }    You will see in label - Welcome Mahedee which is provided by output parameter of store procedure.    ","categories": ["ASP.NET","C#","SQL Server"],
        "tags": ["aspnet","csharp","sqlserver"],
        "url": "http://localhost:4000/retrieve-store-procedures-output-parameter-by-c-asp-net/",
        "teaser":null},{
        "title": "How to register .NET framework in IIS",
        "excerpt":"If you install IIS after installing framework, you have to register framework in IIS. Otherwise you will get following message after hosting asp.net application in IIS.    ASP.NET 4.5 has not been registered on the Web server. You need to manually configure your Web server for ASP.NET 4.5 in order for your site to run correctly.    You may get error of different version instead of 4.5 according to your configuration. So to register framework in IIS, run the following command in command window.      Register framework to IIS without changing existing web applications to use this version of ASP.net   C:\\windows\\Microsoft.NET\\Framework\\v4.0.30319-&gt;aspnet_regiis –ir     Or Installing framework to IIS   C:\\windows\\Microsoft.NET\\Framework\\v4.0.30319-&gt;aspnet_regiis –i   This installed ASP.NET version v4.0.30319 without updating all script maps. After installing Rational   System Architect XT, the following command was run:   C:\\windows\\Microsoft.NET\\Framework\\v4.0.30319-&gt;aspnet_regiis -s W3SVC/1/ROOT/SAXT  This installed ASP.NET version v4.0.30319 at the specified application root and its subfolders. All existing script maps in the specified path and below were updated.   For the Rational System Architect XT Web Service add-on product, the Registration tool was run with the following command:   C:\\windows\\Microsoft.NET\\Framework\\v4.0.30319-&gt;aspnet_regiis -sW3SVC/1/ROOT/SAXTWebService    ","categories": ["ASP.NET","IIS","Command"],
        "tags": ["aspnet","iis","commands"],
        "url": "http://localhost:4000/how-to-register-net-framework-in-iis/",
        "teaser":null},{
        "title": "ASP.NET membership step by step",
        "excerpt":"ASP.NET provides build in control to validate and store user credential. So, membership helps to manage user authentication and authorization in website. The membership provider is the glue between Login controls and membership database.   Step 1: Implementing the Membership and Role Provider   Suppose we are going to create a website using Visual Studio 2010. If you create a website using visual studio 2010, you will get login and Registration pages by default. But we want to create it manually so that we can understand its functionality.   So, what should we do? Don’t worry. Let’s create an empty website. To create an empty website, go to Add -&gt; New Website -&gt; ASP.NET Empty Website.   In the empty website, we will get only an web.config file.   To store user information, we need to create required tables, sp and other information into the database in the SQL Server. To create membership tables and stored procedures follow the following steps.      Go to directory C:\\WINDOWS\\Microsoft.NET\\Framework\\v4.0.30319   Click aspnet_regsql.exe. You will see the following screen.         Click next to continue         Select Configure SQL Server for application services and Press Next      Type your server name. Here my server name is SOFT. Select SQL Server Authentication, type user name and password of server. Then select Database Name. Click Next to continue. You will see the following screen.      Click Next to continue.      Click Finish. Now all tables and SPs are imported to desired database.   Step 2: Configuring Connection String:   To retrieve membership information, create a connection string. This connection string can be used for retrieving other information from database for the website.     &lt;connectionStrings&gt;     &lt;add name=\"ApplicationServices\" connectionString=\"Data Source=SOFT;Initial Catalog=TourismDB; User ID=sa;Password=sa\" providerName=\"System.Data.SqlClient\"/&gt;   &lt;/connectionStrings&gt;   Step 3: Configuring Authentication:   Authentication is the process by which system can identify who are you? ASP.NET framework supports 3 types of Authentication.      Windows Authentication   .NET Passport Authentication   Form Authentication.   We will configure form authentication here. When form authentication is enabled, users are typically identified by the cookies. There are several options for configuring form authentication. One of the options is cookiless which enables you to use form authentication even when the browser does not support cookies.   In this case, Membership handles all details’ of retrieving and storing user and role information. Add the following portion in web.config file to enable form authentication.   &lt;system.web&gt;     &lt;authentication mode=\"Forms\"&gt;       &lt;forms loginUrl=\"~/Account/Login.aspx\" timeout=\"2880\" cookieless=\"AutoDetect\"&gt;       &lt;/forms&gt;     &lt;/authentication&gt;   &lt;/system.web&gt;   Step 4: Membership Provider Settings:   To enable membership, add the following code snippet to web.config file. There are many elements in membership provider. We will use only the important elements here. Basic elements are – name, type( name space of the provider), connectionStringName (name of connection string which is used to connect with membership database). You can use PasswordFormat either of the three – Hash, encrypted and clear. Default value of PasswordFormat attribute is Hashed. You can use maxInvalidPasswordAttempts – number of maximum attempts to enter invalid password,  minRequiredPasswordLength – minimum password length.   &lt;system.web&gt;    &lt;membership&gt;       &lt;providers&gt;         &lt;clear/&gt;              &lt;add name=\"AspNetSqlMembershipProvider\" type=\"System.Web.Security.SqlMembershipProvider\" connectionStringName=\"ApplicationServices\" enablePasswordRetrieval=\"false\" enablePasswordReset=\"true\" requiresQuestionAndAnswer=\"false\" requiresUniqueEmail=\"false\" maxInvalidPasswordAttempts=\"5\" minRequiredPasswordLength=\"6\" minRequiredNonalphanumericCharacters=\"0\" passwordAttemptWindow=\"10\" applicationName=\"/\"/&gt;       &lt;providers&gt;     &lt;membership&gt; &lt;system.web&gt;    Step 5: Add a Login Form: Add a login form name Login.aspx in the website. Now add a Login control in Login page. You can change the style of the login control according to your requirements. Elegant format of login control is used here. For the first time, there is no user available. So we must create some users. We used here CreateUserText=”Register” CreateUserUrl=”~/Register.aspx”. This two properties are used here so that we can create a new user by going to Register.aspx page.   &lt;asp:Login ID=\"loginUser\" runat=\"server\" CreateUserText=\"Register\"   CreateUserUrl=\"~/Register.aspx\"   onauthenticate=\"loginUser_Authenticate\" BackColor=\"#F7F7DE\"   BorderColor=\"#CCCC99\" BorderStyle=\"Solid\" BorderWidth=\"1px\"   Font-Names=\"Verdana\" Font-Size=\"10pt\" Height=\"135px\" Width=\"286px\"&gt;   &lt;TitleTextStyle BackColor=\"#6B696B\" Font-Bold=\"True\" ForeColor=\"#FFFFFF\" /&gt; &lt;asp:Login&gt;      Add the following code snippet for handling corresponding onauthenticate event   protected void loginUser_Authenticate(object sender, AuthenticateEventArgs e) {     bool isLogin = Membership.ValidateUser(loginUser.UserName, loginUser.Password);     if (isLogin)     {       loginUser.Visible = true;       Session[\"user\"] = User.Identity.Name;       FormsAuthentication.RedirectFromLoginPage(loginUser.UserName, true);       Response.Redirect(\"Default.aspx\");     } }   After log in successfully. Page will be redirected to Default.aspx page. So we need to add a Default.aspx page. We will add it later.   Step 6: Add Register Form: In step 5 I have added property CreateUserUrl=”~/Register.aspx” .But this page is not exists. So create a page Register.aspx. In this form we will use a CreateUserWizard which enable to display a user registration form. Like login control you can also change style of CreateUserWizard control. I used here simple format.   &lt;asp:CreateUserWizard ID=\"RegisterUser\" runat=\"server\"             OnCreatedUser=\"RegisterUser_CreatedUser\" BackColor=\"#E3EAEB\"             BorderColor=\"#E6E2D8\" BorderStyle=\"Solid\" BorderWidth=\"1px\"             Font-Names=\"Verdana\" Font-Size=\"0.8em\"&gt;             &lt;ContinueButtonStyle BackColor=\"White\" BorderColor=\"#C5BBAF\"                 BorderStyle=\"Solid\" BorderWidth=\"1px\" Font-Names=\"Verdana\"                 ForeColor=\"#1C5E55\" /&gt;             &lt;CreateUserButtonStyle BackColor=\"White\" BorderColor=\"#C5BBAF\"                 BorderStyle=\"Solid\" BorderWidth=\"1px\" Font-Names=\"Verdana\"                 ForeColor=\"#1C5E55\" /&gt;             &lt;TitleTextStyle BackColor=\"#1C5E55\" Font-Bold=\"True\" ForeColor=\"White\" /&gt;             &lt;WizardSteps&gt;                 &lt;asp:CreateUserWizardStep ID=\"CreateUserWizardStep1\" runat=\"server\"&gt;                 asp:CreateUserWizardStep&gt;                 &lt;asp:CompleteWizardStep ID=\"CompleteWizardStep1\" runat=\"server\"&gt;                 asp:CompleteWizardStep&gt;             WizardSteps&gt;             &lt;HeaderStyle BackColor=\"#666666\" BorderColor=\"#E6E2D8\" BorderStyle=\"Solid\"                 BorderWidth=\"2px\" Font-Bold=\"True\" Font-Size=\"0.9em\" ForeColor=\"White\"                 HorizontalAlign=\"Center\" /&gt;             &lt;NavigationButtonStyle BackColor=\"White\" BorderColor=\"#C5BBAF\"                 BorderStyle=\"Solid\" BorderWidth=\"1px\" Font-Names=\"Verdana\"                 ForeColor=\"#1C5E55\" /&gt;             &lt;SideBarButtonStyle ForeColor=\"White\" /&gt;             &lt;SideBarStyle BackColor=\"#1C5E55\" Font-Size=\"0.9em\" VerticalAlign=\"Top\" /&gt;             &lt;StepStyle BorderWidth=\"0px\" /&gt;         &lt;asp:CreateUserWizard&gt;   Add the following code snippet for handling corresponding OnCreatedUser event.   protected void RegisterUser_CreatedUser(object sender, EventArgs e) {     FormsAuthentication.SetAuthCookie(RegisterUser.UserName, false /* createPersistentCookie */);          string continueUrl = RegisterUser.ContinueDestinationPageUrl;     if (String.IsNullOrEmpty(continueUrl))     {         continueUrl = \"Login.aspx\";     }     Response.Redirect(continueUrl); }   Step 7: Add location tag for Register page: Add the following code snippet in web.config file. This means register page is allowed to all. Because, for the first time you have to create a user without login to the application.   &lt;locationpath=\"Register.aspx\"&gt;   &lt;system.web&gt;     &lt;authorization&gt;       &lt;allowusers=\"*\"/&gt;     &lt;/authorization&gt;   &lt;/system.web&gt; &lt;/location&gt;  Step 8: Add Default Page: Add Default.aspx page. You can add here some message here because page will be redirected to the default page after successfully logged in.   Now run the application. You will see the following login screen.      But you don’t have any user to login. So, click Register in login page and you will be redirected to Register page.      Now create a user and try to login by that user from login page. Yes! you have logged in and redirected to Default.aspx.   Step 9: Add Login Status:  We always see a message “Welcome Mahedee!” after login and Login before login to the site. We see this login status in all pages. If user want to login from any pages, he just need to click in login link and go to login page.  Here he can login and enter the site as authentic user. Here we have created a master page and login status control to do exactly the same thing. Here I used LoginStatus and LoginView Control. It should be mentioned here what are the functions of LoginStatus and LoginView Control? LoginStatus control enables you to display a login or logout link depending on user authentication. It actually displays whether user is currently logged in or not. LoginView enables you to display different content depending on user Authentication status or role.      Add the following code snippet in MasterPage.master.   &lt;asp:LoginView ID=\"HeadLoginView\" runat=\"server\" EnableViewState=\"false\"&gt;     &lt;AnonymousTemplate&gt;         [ &lt;a href=\"Login.aspx\" id=\"HeadLoginStatus\" runat=\"server\"&gt;Log Ina&gt; ]     AnonymousTemplate&gt;     &lt;LoggedInTemplate&gt;         Welcome &lt;span class=\"bold\"&gt;             &lt;asp:LoginName ID=\"HeadLoginName\" runat=\"server\" /&gt;         span&gt;! [         &lt;asp:LoginStatus ID=\"HeadLoginStatus\" runat=\"server\" LogoutAction=\"Redirect\" LogoutText=\"Log Out\"             LogoutPageUrl=\"~/\" /&gt;         ]     &lt;LoggedInTemplate&gt; &lt;asp:LoginView&gt;   Now if you add MasterPage.master to any of your pages. You will get login status after login to the application. Here I used MasterPage in Default.aspx.   Step 10: Add Role Manager:  To add role manager add the following code snippet to web.config file.   &lt;roleManager enabled=\"true\"&gt;       &lt;providers&gt;         &lt;clear/&gt;         &lt;add name=\"AspNetSqlRoleProvider\" type=\"System.Web.Security.SqlRoleProvider\" connectionStringName=\"ApplicationServices\" applicationName=\"/\"/&gt;         &lt;add name=\"AspNetWindowsTokenRoleProvider\" type=\"System.Web.Security.WindowsTokenRoleProvider\" applicationName=\"/\"/&gt;       &lt;providers/&gt;     &lt;roleManager/&gt;  Step 11: Create Role Manager Page:   Create a page like below for managing roles.      Step 12: Add Role Provider in web.config:   Add the following code snippet for web.config for enable Role Provider.   &lt;roleManager enabled=\"true\"&gt;       &lt;providers&gt;         &lt;clear/&gt;         &lt;add name=\"AspNetSqlRoleProvider\" type=\"System.Web.Security.SqlRoleProvider\" connectionStringName=\"ApplicationServices\" applicationName=\"/\"/&gt;         &lt;add name=\"AspNetWindowsTokenRoleProvider\" type=\"System.Web.Security.WindowsTokenRoleProvider\" applicationName=\"/\"/&gt;       &lt;providers/&gt;     &lt;roleManager/&gt;   Step 13: Manage Role:    In step 11 we saw Role manager page. Now we will create the corresponding code for managing (Create, delete roles &amp; assign users to role) roles. Here I also add a grid to display user role mapping.      Create Roles: Add the following code for corresponding event to create role. I have added the code for corresponding Create button event.   protected void btnCreateRole_Click(object sender, EventArgs e) {     try     {       if (!Roles.RoleExists(this.txtRole.Text))       {         Roles.CreateRole(txtRole.Text);         BindRoles();         BindUsers();         this.lblMsg.Text = \"Role created successfully\";       }       else       {         lblMsg.Text = \"Role already exists\";       }     }     catch (Exception ex)     {       lblMsg.Text = ex.Message;     } }     Bind Roles: I have bind a dropdown list for Roles.   private void BindRoles() {     SqlConnection con = new SqlConnection(Convert.ToString(ConfigurationManager.ConnectionStrings[\"ApplicationServices\"]));          con.Open();     SqlDataAdapter da = new SqlDataAdapter(\"select UserId, UserName from aspnet_users\", con);     DataSet ds = new DataSet();     da.Fill(ds);     this.ddlUsers.DataSource = ds;     ddlUsers.DataTextField = \"UserName\";     ddlUsers.DataValueField = \"UserName\";     ddlUsers.DataBind();          con.Close(); }           Bind Users: A dropdown list is bound for roles in this occasion also. ```csharp private void BindUsers() {   SqlConnection con = new SqlConnection(Convert.ToString(ConfigurationManager.ConnectionStrings[“ApplicationServices”]));       con.Open();   SqlDataAdapter da = new SqlDataAdapter(“SELECT RoleId, RoleName FROM aspnet_Roles”, con);   DataSet ds = new DataSet();   da.Fill(ds);   this.ddlRoles.DataSource = ds;   ddlRoles.DataTextField = “RoleName”;   ddlRoles.DataValueField = “RoleName”;   ddlRoles.DataBind();       con.Close(); }       * Assign Roles to User: Use the following code snippet to assign roles to users.  ```csharp protected void btnAssign_Click(object sender, EventArgs e) {     try     {       if (!Roles.IsUserInRole(this.ddlRoles.SelectedValue))       {         Roles.AddUserToRole(this.ddlUsers.SelectedValue,this.ddlRoles.SelectedValue);         BindUsers();         BindRoles();         BindUserRole();         this.lblMsg.Text = \"User assigned to role successfully\";       }       else       {         this.lblMsg.Text = \"Role already exits for the user.\";       }     }     catch (Exception ex)     {       this.lblMsg.Text = ex.Message;     } }     Remove role from the user: I have added a gridview in rolemanger page. Here is the code snippet of delete button event handler. Roles.RemoveUserFromRole(string username, string rolename) Method is responsible to remove role form the user.   protected void btnDelete_Click(object sender, EventArgs e) {     LinkButton btnDelete = sender as LinkButton;          //Identify the clicked row     int rowIndex = Convert.ToInt32(btnDelete.Attributes[\"RowIndex\"]);          GridViewRow gvRow = this.gvRoleToUsers.Rows[rowIndex];          try     {         Roles.RemoveUserFromRole(gvRow.Cells[0].Text, gvRow.Cells[1].Text); //username, role name         BindUsers();         BindRoles();         BindUserRole();         this.lblMsg.Text = \"User is removed from the role\";     }     catch (Exception ex)     {         this.lblMsg.Text = ex.Message;     }   }       Delete roles: The following code snippet is responsible to delete a roles.   protected void btnDeleteRole_Click(object sender, EventArgs e) {     try     {         Roles.DeleteRole(this.ddlRoles.SelectedValue); //Responsible to delete role         this.BindRoles();         this.BindUserRole();         this.lblMsg.Text = \"Role is deleted!\";     }     catch (Exception exp)     {         this.lblMsg.Text = exp.Message;     } }    Step 14: Show and Hide Menu depending on Roles:   We have already created roles and assigned roles to users. Now if we want to show and Hide the menus depending on roles, we have to follow the following steps.      Add sitemap: Add web.sitemap in the project. We have added this site map with a treeview. Have a look in the web.sitemap content.   &lt;xmlversion=\"1.0\"encoding=\"utf-8\" ?&gt;   &lt;siteMapxmlns=\"http://schemas.microsoft.com/AspNet/SiteMap-File-1.0\" &gt;   &lt;siteMapNodeurl=\"ASP.NET\"title=\"\"  description=\"\"roles=\"Administrator\"&gt;   &lt;siteMapNodeurl=\"Defult.aspx\"title=\"Home\"  description=\"\"/&gt;   &lt;siteMapNodeurl=\"Register.aspx\"title=\"Register\"  description=\"\" /&gt;   &lt;siteMapNodeurl=\"RoleManager.aspx\"title=\"Role Manager\"description=\"\"roles=\"Administrator\"/&gt;   &lt;siteMapNodeurl=\"ManageUsers.aspx\"title=\"User Manager\"description=\"\"roles=\"Administrator,IT officer\"/&gt;   &lt;siteMapNode/&gt;   &lt;siteMap/&gt;   You may understand above code snippet that only Administrator can view RoleManager.aspx page and Administrator and IT Officer can view ManageUsers.aspx page. There is no restriction in other pages.      Add Location element in web.config: To hide and show menu as described above add the following code snippet in web.config file.   &lt;locationpath=\"RoleManager.aspx\"&gt;   &lt;system.web&gt;     &lt;authorization&gt;     &lt;allowroles=\"Administrator\"/&gt;     &lt;denyusers=\"*\"/&gt;     &lt;authorization/&gt;   &lt;system.web/&gt; &lt;location/&gt; &lt;locationpath=\"ManageUsers.aspx\"&gt;   &lt;system.web&gt;     &lt;authorization&gt;     &lt;allowroles=\"Administrator,IT officer\"/&gt;     &lt;denyusers=\"*\"/&gt;     &lt;authorization&gt;   &lt;system.web/&gt; &lt;location/&gt;   Ok now run your application. Login to the application and you will see menus according to your roles.    ","categories": ["ASP.NET","C#"],
        "tags": ["aspnet","csharp"],
        "url": "http://localhost:4000/asp-net-membership-step-by-step/",
        "teaser":null},{
        "title": "Retrieve data from database using your first ASP.Net program",
        "excerpt":"You who are very beginner and want to retrieve data from database, can use the code snippet. Though this is not good practice, this is very useful for beginners. Because beginners is not interested to layer architecture can not create connection string in web.config file. Here, I have create a city_info table and displayed this data into a table of asp page. Ok, no more talk. Lets start.   Step 1: Create a table city_info and insert 3 data in the table.   CREATE TABLE city_info (   id INT   , name VARCHAR(100) )   insert into city_info (   id, name ) values (   1 , 'Dhaka' )   insert into city_info (   id, name ) values (   2 , 'Chittagong' )   insert into city_info (   id, name ) values (   3 , 'Comilla' )  Step 2: Create a literal control in asp page.   &lt;asp:Literal id = \"ltrlCityInfo\" runat=\"server\" /&gt;   Step 3: Accessing data in Page_Load method of asp page and bind data with a table in ltrCityInfo    using System.Data.SqlClient; //Use for SqlConnection, SqlCommand using System.Data;           //Use for CommandType  protected void Page_Load(object sender, EventArgs e) {            //Connection string, here SOFT is database server name, TestDB is database name, user id and password of //database server         string connectionString = \"Data Source=SOFT;Initial Catalog=TestDB;User ID=sa;Password=sa\";         SqlConnection sqlConn = new SqlConnection(connectionString);         SqlCommand cmd = new SqlCommand();         cmd.Connection = sqlConn;               SqlDataReader rdr = null;            cmd.CommandType = CommandType.Text;         cmd.CommandText = \"select id, name from city_info\";            try         {             if (sqlConn.State == ConnectionState.Closed)                 sqlConn.Open();                rdr = cmd.ExecuteReader();                this.ltrlCityInfo.Text = \"\";             while (rdr.Read())             {                 this.ltrlCityInfo.Text += \"\";             }                this.ltrlCityInfo.Text += \"&lt;table border=\"1\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th&gt;City Name&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\";                 string city = rdr[\"name\"].ToString();                 this.ltrlCityInfo.Text += city;                 this.ltrlCityInfo.Text += \"&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;\";         }         catch (Exception exp)         {             throw (exp);         }         finally         {             if (sqlConn.State == ConnectionState.Open)                 sqlConn.Close();         }  }  Yes! We have done. After running the project, you will see the output.    ","categories": ["ASP.NET","C#"],
        "tags": ["aspnet","csharp"],
        "url": "http://localhost:4000/retrieve-data-from-database-by-first-asp-net-program/",
        "teaser":null},{
        "title": "Calculate File Checksum Using C#",
        "excerpt":"Calculate file checksum using c#   using System; using System.Collections.Generic; using System.IO; using System.Linq; using System.Security.Cryptography; using System.Text; using System.Threading.Tasks;   namespace CheckSumTest {     class Program     {         static void Main(string[] args)         {             string filePath = @\"G:\\Mahedee_Share\\Created\\23062014-1\\FileDeployManager\\FileDeployManager\\Form1.cs\";                          string checksumMd5 = GetFileChecksum(filePath, Algorithms.MD5);             string checksumSha1 = GetFileChecksum(filePath, Algorithms.SHA1);             string checksumSha256 = GetFileChecksum(filePath, Algorithms.SHA256);             string checksumSha384 = GetFileChecksum(filePath, Algorithms.SHA384);             string checksumSha512 = GetFileChecksum(filePath, Algorithms.SHA512);             string checksumRipemd160 = GetFileChecksum(filePath, Algorithms.RIPEMD160);             Console.ReadKey();           }                      public static string GetFileChecksum(string filePath, HashAlgorithm algorithm)           {             using (var stream = new BufferedStream(File.OpenRead(filePath), 100000))             {               byte[] hash = algorithm.ComputeHash(stream);               return BitConverter.ToString(hash).Replace(\"-\", String.Empty);             }           }          }          public static class Algorithms     {         public static readonly HashAlgorithm MD5 = new MD5CryptoServiceProvider();         public static readonly HashAlgorithm SHA1 = new SHA1Managed();         public static readonly HashAlgorithm SHA256 = new SHA256Managed();         public static readonly HashAlgorithm SHA384 = new SHA384Managed();         public static readonly HashAlgorithm SHA512 = new SHA512Managed();         public static readonly HashAlgorithm RIPEMD160 = new RIPEMD160Managed();     }   }     ","categories": ["Algorithms","C#"],
        "tags": ["algorithms","csharp"],
        "url": "http://localhost:4000/calculate-file-checksum/",
        "teaser":null},{
        "title": "How to send email in ASP.Net",
        "excerpt":"You have to configure SMTP server before sending email from your server. Hope you already know how to configure smtp server. Here is the simple code segment for sending email against a button click.   protected void btnSendMail_Click(object sender, EventArgs e) {       SmtpClient smtpClient = new SmtpClient();       MailAddress fromAddress = new MailAddress(\"mahedee_hasan@leads-bd.com\"); //Sender email address       MailMessage _mail = new MailMessage();        _mail.Attachments.Add(new Attachment(@\"E:\\Temp\\attachment.pdf\")); //Add dirctory of attachment        //bool IsSuccess = false;     try     {       _mail.From = fromAddress;       _mail.To.Add(\"mahedee.hasan@gmail.com\"); //Receiver email address       _mail.CC.Add(\"mahedee.hasan@yahoo.com\"); //Email address for cc       _mail.Bcc.Add(\"mahedee.hasan@hotmail.com\"); //Email address for bcc         _mail.Subject = \"Test Message\"; //Email subject       _mail.Body = \"Dear concern, This is the test message from Mahedee\"; //Email body       _mail.IsBodyHtml = true; //Email body is in html format          smtpClient.Host = \"182.268.30.50\"; //Name or IP address of the host used for SMTP transaction        smtpClient.EnableSsl = false;        //smtpClient.Port = 25; //25 is default port for smtp. You have to change port no if it is not used defualt         port       smtpClient.Send(_mail); //Send mail       //IsSuccess = true;     }     catch (Exception ex)     {        //IsSuccess = false;     }     finally     {      //     } }     ","categories": ["ASP.NET","C#"],
        "tags": ["aspnet","csharp"],
        "url": "http://localhost:4000/how-to-send-email-in-asp-net/",
        "teaser":null},{
        "title": "Training on C# for beginner",
        "excerpt":"   C# - Part 1  from Mahedee Hasan   ","categories": ["OOP","C#"],
        "tags": ["oop","csharp"],
        "url": "http://localhost:4000/c-part-1/",
        "teaser":null},{
        "title": "SQL Server (database development) - Part 1",
        "excerpt":"    Sql server part - 1  from Mahedee Hasan    ","categories": ["SQL Server","Database"],
        "tags": ["sqlserver","database"],
        "url": "http://localhost:4000/sql-server-database-development-part-1/",
        "teaser":null},{
        "title": "Padding character in string",
        "excerpt":"using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks;   namespace Padding {     class Program     {         static void Main(string[] args)         {             string str = \"This is a text\";             char padChar = '.';               Console.WriteLine(str.PadLeft(25, padChar));             Console.WriteLine(str.PadLeft(2, padChar));               Console.WriteLine(str.PadRight(25, padChar));             Console.WriteLine(str.PadRight(2, padChar));               str = \"I am Mahedee hasan. Software Architect, Leadsoft Bangladesh Ltd\";             Console.WriteLine((str.PadRight(25, padChar)));               Console.WriteLine((str.PadRight(25,padChar)).Substring(0,24)+\"...\");               Console.ReadKey();         }     } }   Output:   ...........This is a text This is a text This is a text........... This is a text I am Mahedee hasan. Software Architect, Leadsoft Bangladesh Ltd I am Mahedee hasan. Soft...    ","categories": ["ASP.NET","C#","Troubleshooting","Data Structures"],
        "tags": ["aspnet","csharp","troubleshooting","datastructures"],
        "url": "http://localhost:4000/padding-character-with-string/",
        "teaser":null},{
        "title": "Determine Whether Caps Lock Is ON In ASP.Net Page By JavaScript",
        "excerpt":"Here I used a simple Textbox in ASP.net page and used Javascript to determine whether Caps Lock is on or off.   I have used the following Javascript code in between head  tag.   function isCapslock(e) {               e = (e) ? e : window.event;               var charCode = false;               if (e.which) {                 charCode = e.which;             } else if (e.keyCode) {                 charCode = e.keyCode;             }               var shifton = false;             if (e.shiftKey) {                 shifton = e.shiftKey;             } else if (e.modifiers) {                 shifton = !!(e.modifiers &amp; 4);             }               if (charCode &gt;= 97 &amp;&amp; charCode &lt;= 122 &amp;&amp; shifton) {                 document.getElementById(\"txtCapsMsg\").value = \"Caps Lock is on\";                 return true;             }               if (charCode &gt;= 65 &amp;&amp; charCode &lt;= 90 &amp;&amp; !shifton) {                 document.getElementById(\"txtCapsMsg\").value = \"Caps Lock is on\";                 return true;             }               document.getElementById(\"txtCapsMsg\").value = \"Caps Lock is off\";             return false;           }   I have also used two text box in ASP.net page. One for input and another for displaying message whether Caps Lock is on or off.   &lt;form id=\"form1\" runat=\"server\"&gt;     &lt;div&gt;         &lt;table&gt;             &lt;tr&gt;                 &lt;td&gt;                     Message :                 &lt;/td&gt;                 &lt;td&gt;                     &lt;input type=\"text\" id=\"txtCapsMsg\" /&gt;                 &lt;/td&gt;             &lt;/tr&gt;             &lt;tr&gt;                 &lt;td&gt;                     Input Text :                 &lt;/td&gt;                 &lt;td&gt;                     &lt;asp:TextBox ID=\"txtInputCaps\" runat=\"server\" onkeypress=\"isCapslock(event)\"&gt;&lt;asp:TextBox&gt;                 &lt;/td&gt;             &lt;/tr&gt;         &lt;/table&gt;     &lt;/div&gt;     &lt;/form&gt;  Now input some text in input textbox. Message will be showed in txtCapsMsg, textbox whether Caps Lock is on or off.    ","categories": ["ASP.NET","C#","JavaScript"],
        "tags": ["aspnet","csharp","javascript"],
        "url": "http://localhost:4000/determine-whether-caps-lock-is-on-in-asp-net-page-by-javascript/",
        "teaser":null},{
        "title": "Abstract class and method using C# – A detail description",
        "excerpt":"What is Abstract Class?   Abstract class is a class that has no direct instances, but its descendants may have direct instances.  An abstract class is a class that can contain abstract members, although it is not required. But any class that contains abstract member must be abstract. An abstract class can also contain non-abstract members.   An abstract method is an empty method – a method that has no implementation. Any class that implement this abstract class must implement the abstract method. We always use interface in C#, it is implicitly abstract.   Why abstract class?   The purpose of an abstract class is to act as a base class. It is not possible to instantiate an abstract class directly, nor can an abstract class be sealed. Often we need a class that contains methods that must be implemented by all derived classes but not by the base class itself. By this, actually we force the programmer to implement base class methods. Think a simple scenario. Suppose we want to develop a banking software. Here a common entity is account information. There are many type of account like savings account,  current account e.t.c in bank. In every account two things is common that is deposit and withdraw. So we can create a Account class as base class which must have this two method deposit and withdraw and it will be abstract method and the Account class will be abstract class. So, you can say – why its will be abstract class and abstract method? Answer of the first question is if there is any abstract member in the class, the class must be abstract. Answer of the second question, in every type of accounts two things is common deposit and withdraw but their way of transaction may be different. We just want to enforce the programmer to implement the methods if the create any class by inheriting the Account class   Syntax   The syntax for creating an abstract method is - use the abstract modifier with the name of the method and the parameters, followed by a semicolon by keeping it empty. It will be look like this.   [access-modifiers] abstract return-type method-name ([parameters]) ;   Example:   The following example shows how to create an abstract class Account with two abstract methods Deposit and Withdraw.   public abstract class Account {     public abstract string Deposit(double money);     public abstract string Withdraw(double money); }   The benefit of creating abstract methods is that it enables you to add methods to your base class that subsequently must be implemented by all derived classes, but the implementation details for these methods do not have to be defined in the base class.   Override the abstract class  When a derived class inherits an abstract method from an abstract class, it must override the abstract methods. This requirement is enforced at compile time. The following example shows how a SavingsAccount class, which is derived from Account, uses the override keyword to implement the Deposit and Withdraw method. Here first (Account) class is base class and second (SavingsAccount) is derived class.   /// /// Base class /// public abstract class Account {     public abstract string Deposit(double money);     public abstract string Withdraw(double money); }   /// /// Derived class /// public class SavingsAccount : Account {       //override the base class     public override string Deposit(double money)     {         return \"AC type savings: Deposit transaction done sucessfully\";     }          public override string Withdraw(double money)     {         return \"AC type savings: Withdraw transaction done sucessfully\";     } }   After creating instance of SavingsAccount, if you call Deposit and withdraw method you will see the following output:   AC type savings: Deposit transaction done sucessfully AC type savings: Withdraw transaction done sucessfully   Abstract class with virtual method:   You can also create an abstract class that contains virtual methods, as shown in the following example:   /// /// Base class ///   public abstract class Account {     public virtual void BankName()     {         Console.WriteLine(\"Welcome to ABC Bank Limited\");     }          public abstract string Deposit(double money);     public abstract string Withdraw(double money); }    In this case, a derived class does not have to provide an implementation of the BankName method because BankName is defined as virtual. Therefore, I say the important thing again, if you have a generic method that is common to all derived classes, and you want to force each derived class to implement the method, you must define the method as abstract in the base class.   Difference between an abstract method &amp; virtual method:   Virtual method has an implementation and provides the derived class with the option of overriding it. Abstract method does not provide an implementation and forces the derived class to override the method.   Abstract Properties:   Properties may also be declared as abstract. Same as abstract method, to declare an abstract property, specify the property name and the accessors that the derived property should implement.   Example:   /// /// Base class /// public abstract class Account {     //Abastract property     public abstract string AccountNo { get; set; }          //Virtual Method     public virtual void BankName()     {         Console.WriteLine(\"Welcome to ABC Bank Limited\");     }          public abstract string Deposit(double money);     public abstract string Withdraw(double money); }   Total Solution:   using System; using System.Collections.Generic; using System.Linq; using System.Text;   /* * Author : Md. Mahedee Hasan * Create Date : 14/04/2012 * web : mahedee.blogspot.com */   namespace ConsoleProgram {       ///     /// Base class     ///          public abstract class Account     {         //Abastract property         public abstract string AccountNo { get; set; }                  //Virtual Method         public virtual void BankName()         {             Console.WriteLine(\"Welcome to ABC Bank Limited\");         }                  //Abstract Method         public abstract string Deposit(double money);         public abstract string Withdraw(double money);     }          ///     /// Derived class     ///          public class SavingsAccount : Account     {         private string acccNo;         //override the base class         public override string Deposit(double money)         {             return \"AC type savings: Deposit transaction done sucessfully\";         }                  public override string Withdraw(double money)         {             return \"AC type savings: Withdraw transaction done sucessfully\";         }                  //Override base class property         public override string AccountNo         {             get             {                 return acccNo;             }             set             {                 acccNo = value;             }         }     }          ///     /// Main class     ///     class Program     {       /// Main Method       static void Main(string[] args)       {           SavingsAccount objSavingsAccount = new SavingsAccount();           objSavingsAccount.BankName();           objSavingsAccount.AccountNo = \"0110\";           Console.WriteLine(\"Account Number: \" + objSavingsAccount.AccountNo);           string msg = objSavingsAccount.Deposit(1000);           Console.WriteLine(msg);           msg = objSavingsAccount.Deposit(500);           Console.WriteLine(msg);       }     } }   Output:   Welcome to ABC Bank Limited Account Number: 0110 AC type savings: Deposit transaction done sucessfully AC type savings: Deposit transaction done sucessfully   At a glance:     An abstract class is a generic base class.   Contains abstract methods that must be implemented by the derived class.   Cannot create instance of abstract class.   Abstract class can contain no abstract members.    ","categories": ["OOP","C#"],
        "tags": ["OOP","csharp"],
        "url": "http://localhost:4000/abstract-class-and-method/",
        "teaser":null},{
        "title": "A Simple Demonstration with ASP.Net GridView",
        "excerpt":"   ASP.net  from Mahedee Hasan   ","categories": ["ASP.NET","C#"],
        "tags": ["aspnet","csharp"],
        "url": "http://localhost:4000/presentation-slide-asp-net-part-i/",
        "teaser":null},{
        "title": "A Simple Demonstration with ASP.Net GridView",
        "excerpt":"GridView is a powerful control of ASP.net. Here I tried to demonstrate gridview with a simple project. I have stored employee information then displayed it in gridview and insert, update and delete employee information.   Step 1: Create a table name hrm_employee and insert some sample data in it.   --Create Table : hrm_employee--- CREATE TABLE hrm_employee (   emp_gid INT PRIMARY KEY IDENTITY,   emp_fullnm VARCHAR(100),   emp_nicknm VARCHAR(50),   emp_designation VARCHAR(100) )   ---Insert data ito table: hrm_employee----   -- Insert data i.e. row-1 --- INSERT INTO hrm_employee (   emp_fullnm   , emp_nicknm   , emp_designation ) VALUES (     'Md. Mahedee Hasan'     , 'Mahedee'     , 'Senior Software Engineer' )   -- Insert data i.e. row-2 --- INSERT INTO hrm_employee (   emp_fullnm   , emp_nicknm   , emp_designation ) VALUES (   'Md. Asrafuzzaman'   , 'Emon'   , 'Senior Software Engineer' )   -- Insert data i.e. row-3 --- INSERT INTO hrm_employee (   emp_fullnm   , emp_nicknm   , emp_designation ) VALUES (   'Md. Khondakar Enamul Haque'   , 'Rony'   , 'Broadcast Engineer' )    Step 2: Create an ASP.net website with 3 Layers - DAL for data access layer, BLL for Business Logic Layer and presentation Layer. Also create another layer name Model for mapping with data.   Step 3: Create connection string in web.config file.   &lt;connectionStrings&gt;   &lt;add name=\"SQLServerConnectionString\" connectionString=\"Data Source=SOFT;Initial   Catalog=TestDB;User ID=sa;Password=sa\" providerName=\"System.Data.SqlClient\"/&gt; &lt;/connectionStrings&gt;  Step 4: Create Images Folder and store icon edit_icon.gif for edit and icon_remove.png for delete.   Step 5: Create EmployeeInfo model class.   using System; using System.Collections.Generic; using System.Linq; using System.Web; public class EmployeeInfo {     public int EmpGid { get; set; }     public string EmpFullNm { get; set; }     public string EmpNickNm { get; set; }     public string EmpDesignation { get; set; } }    Step 6: Create a DBConnector Class for connecting with database in DAL.   /// Class : DBConnector /// Author : Md. Mahedee Hasan /// Purpose : For Connecting with database ///Creation Date : 21/04/201 /// ================================================================================================== /// || Modification History || /// ------------------------------------------------------------------------------------------------- /// Sl No. Date: Author: Ver: Area of Change: /// ///**************************************************************************************************   using System; using System.Data; using System.Configuration; using System.Web; using System.Web.Security; using System.Web.UI; using System.Web.UI.WebControls; using System.Web.UI.WebControls.WebParts; using System.Web.UI.HtmlControls; using System.Data.SqlClient;   public class DBConnector {     private string connectionString = null;     private SqlConnection sqlConn = null;     private SqlCommand cmd = null;       public DBConnector()     {         connectionString = ConfigurationManager.ConnectionStrings[\"SQLServerConnectionString\"].ToString();     }          public SqlCommand GetCommand()     {         cmd = new SqlCommand();         cmd.Connection = sqlConn;         return cmd;     }          public SqlConnection GetConn()     {         sqlConn = new SqlConnection(connectionString);         return sqlConn;     } }    Step 7: Create EmployeeInfoDAL class in DAL layer for accessing data (Employee Information related) from database.   /// Class : EmployeeInfoDAL /// Author : Md. Mahedee Hasan /// Purpose : Retreving data from database /// Creation Date : 21/04/2012 /// ================================================================================== /// || Modification History || /// ----------------------------------------------------------------------------- /// Sl No. Date: Author: Ver: Area of Change: /// /// ***************************************************************************   using System; using System.Collections.Generic; using System.Linq; using System.Web; using System.Data; using System.Data.SqlClient;   /// /// Summary description for EmployeeInfoDAL ///   public class EmployeeInfoDAL {          private SqlConnection sqlConn;     private SqlCommand cmd;     private readonly DBConnector objDBConnector;          ///     /// Constructor     ///          public EmployeeInfoDAL()     {         objDBConnector = new DBConnector();         sqlConn = objDBConnector.GetConn();         cmd = objDBConnector.GetCommand();     }          ///     /// Get all employee information     ///     ///          public DataTable GetEmployeeInfoAll()     {         DataTable tblEmpInfo = new DataTable();         SqlDataReader rdr = null;                  cmd.CommandType = CommandType.Text;                  cmd.CommandText = \"SELECT emp_gid, emp_fullnm, emp_nicknm, emp_designation FROM hrm_employee\";              try         {             if (sqlConn.State == ConnectionState.Closed)             sqlConn.Open();                          rdr = cmd.ExecuteReader();             tblEmpInfo.Load(rdr);         }         catch (Exception exp)         {             throw (exp);         }         finally         {             if (sqlConn.State == ConnectionState.Open)               sqlConn.Close();         }                  return tblEmpInfo;          }          ///     /// Insert Employee information     ///     ///     ///          public string InsertEmployeeInfo(EmployeeInfo objEmployeeInfo)     {         string msg = String.Empty;                  int noOfRowEffected = 0;                  try         {           if (sqlConn.State == ConnectionState.Closed)               sqlConn.Open();           cmd.CommandType = CommandType.Text;           cmd.CommandText = \"INSERT INTO hrm_employee(emp_fullnm , emp_nicknm , emp_designation)\"           + \" VALUES('\" + objEmployeeInfo.EmpFullNm + \"','\" + objEmployeeInfo.EmpNickNm + \"','\" + objEmployeeInfo.EmpDesignation + \"')\";                      noOfRowEffected = cmd.ExecuteNonQuery();           cmd.Parameters.Clear();         }         catch (Exception exp)         {             throw (exp);         }         finally         {             if (sqlConn.State == ConnectionState.Open)                 sqlConn.Close();         }                  if (noOfRowEffected &gt; 0)             return \"Employee information saved successfully!\";         else             return msg;     }          ///     /// Update employee information     ///     ///     ///          public string UpdateEmployeeInfo(EmployeeInfo objEmployeeInfo)     {         string msg = String.Empty;                  int noOfRowEffected = 0;                  try         {             if (sqlConn.State == ConnectionState.Closed)                 sqlConn.Open();             cmd.CommandType = CommandType.Text;             cmd.CommandText = \"UPDATE hrm_employee SET emp_fullnm = '\" + objEmployeeInfo.EmpFullNm +             \"',emp_nicknm = '\" + objEmployeeInfo.EmpNickNm + \"', emp_designation = '\" + objEmployeeInfo.EmpDesignation             + \"' WHERE emp_gid = \" + objEmployeeInfo.EmpGid;                          noOfRowEffected = cmd.ExecuteNonQuery();             cmd.Parameters.Clear();         }         catch (Exception exp)         {             throw (exp);         }         finally         {             if (sqlConn.State == ConnectionState.Open)                 sqlConn.Close();         }                  if (noOfRowEffected &gt; 0)             return \"Employee information updated successfully!\";         else             return msg;     }          ///     /// Delete employee information     ///          public string DeleteEmployeeInfo(int empGid)     {         string msg = String.Empty;         int noOfRowEffected = 0;                  try         {             if (sqlConn.State == ConnectionState.Closed)                 sqlConn.Open();             cmd.CommandType = CommandType.Text;             cmd.CommandText = \"DELETE FROM hrm_employee\"             + \" WHERE emp_gid = \" + empGid;                          noOfRowEffected = cmd.ExecuteNonQuery();             cmd.Parameters.Clear();         }         catch (Exception exp)         {             throw (exp);         }         finally         {             if (sqlConn.State == ConnectionState.Open)                 sqlConn.Close();         }                  if (noOfRowEffected &gt; 0)             return \"Employee information deleted successfully!\";         else             return msg;     } }   Step 8: Create EmployeeInfoBLL in BLL for writing business logic and accessing data by DAL.   /// Class : EmployeeInfoBLL /// Author : Md. Mahedee Hasan /// Purpose : Business Logic Layer - Write business logic here /// Creation Date : 21/04/2012 /// ================================================================================================== /// || Modification History || /// ------------------------------------------------------------------------------------------------- /// Sl No. Date: Author: Ver: Area of Change: **************************************************************************************************   using System; using System.Collections.Generic; using System.Linq; using System.Web; using System.Data;   /// /// Summary description for EmployeeInfoBLL ///   public class EmployeeInfoBLL {     public EmployeeInfoBLL()     {          }          public DataTable GetEmployeeInfoAll()     {         try         {             EmployeeInfoDAL objEmployeeInfoDAL = new EmployeeInfoDAL();             return objEmployeeInfoDAL.GetEmployeeInfoAll();         }         catch (Exception exp)         {             throw (exp);         }     }          public string SaveEmployeeInfo(EmployeeInfo objEmployeeInfo)     {     try     {         EmployeeInfoDAL objEmployeeInfoDAL = new EmployeeInfoDAL();         return objEmployeeInfoDAL.InsertEmployeeInfo(objEmployeeInfo);     }     catch (Exception exp)     {         throw (exp);     }     }          public string EditEmployeeInfo(EmployeeInfo objEmployeeInfo)     {         try         {             EmployeeInfoDAL objEmployeeInfoDAL = new EmployeeInfoDAL();             return objEmployeeInfoDAL.UpdateEmployeeInfo(objEmployeeInfo);         }         catch (Exception exp)         {             throw (exp);         }     }          public string RemoveEmployeeInfo(int empGid)     {         try         {             EmployeeInfoDAL objEmployeeInfoDAL = new EmployeeInfoDAL();             return objEmployeeInfoDAL.DeleteEmployeeInfo(empGid);         }         catch (Exception exp)         {             throw (exp);         }     } }    Step 9: Create a gridview and update form in UI page (Here Default.aspx). Default.aspx   &lt;table&gt;         &lt;tr&gt;             &lt;td align=\"right\"&gt;                 Full Name :             &lt;/td&gt;             &lt;td&gt;                 &lt;asp:TextBox ID=\"txtEmpFullNm\" Width =\"200px\" runat=\"server\"&gt;&lt;/asp:TextBox&gt;             &lt;/td&gt;         &lt;/tr&gt;         &lt;tr&gt;             &lt;td align=\"right\"&gt;                 Nick Name :             &lt;/td&gt;             &lt;td&gt;                 &lt;asp:TextBox ID=\"txtEmpNickNm\" Width =\"200px\" runat=\"server\"&gt;&lt;/asp:TextBox&gt;             &lt;/td&gt;         &lt;/tr&gt;           &lt;tr&gt;             &lt;td align=\"right\"&gt;                 Designation :             &lt;/td&gt;             &lt;td&gt;                 &lt;asp:TextBox ID=\"txtDesignation\" runat=\"server\"                     Width=\"200px\"&gt;&lt;/asp:TextBox&gt;             &lt;/td&gt;         &lt;/tr&gt;     &lt;/table&gt;       &lt;asp:Button ID = \"btnSave\" runat = \"server\" Text =\"Save\" Height=\"23px\"          style=\"font-weight: 700\" Width=\"100px\" onclick=\"btnSave_Click\" /&gt;           &lt;asp:HiddenField ID =\"hf_emp_gid\" runat =\"server\" /&gt;     &lt;br /&gt;     &lt;br /&gt;     &lt;asp:GridView ID=\"gvEmpInfo\" runat=\"server\" AutoGenerateColumns=\"False\" CellPadding=\"4\"         ForeColor=\"#333333\" GridLines=\"None\"&gt;         &lt;AlternatingRowStyle BackColor=\"White\" /&gt;         &lt;Columns&gt;             &lt;asp:BoundField DataField=\"emp_fullnm\" HeaderText=\"Full Name\" /&gt;             &lt;asp:BoundField DataField=\"emp_nicknm\" HeaderText=\"Nick Name\" /&gt;             &lt;asp:BoundField DataField=\"emp_designation\" HeaderText=\"Designation\" /&gt;             &lt;asp:TemplateField HeaderText=\"Edit\"&gt;                 &lt;ItemStyle HorizontalAlign=\"Center\" VerticalAlign=\"Middle\" Width=\"80px\" /&gt;                 &lt;ItemTemplate&gt;                     &lt;asp:HiddenField ID=\"hidemp_gid\" runat=\"server\" Value='&lt;%#Eval(\"emp_gid\") %&gt;' /&gt;                     &lt;asp:LinkButton ID=\"btnEdit\" Text=\"Edit\" runat=\"server\" CausesValidation=\"false\"                         RowIndex='&lt;%# Container.DisplayIndex %&gt;' OnClick=\"btnEdit_Click\"&gt;                             &lt;img style=\"border:none;\" src = \"Images/edit_icon.gif\"/&gt;&lt;/asp:LinkButton&gt;                 &lt;/ItemTemplate&gt;             &lt;/asp:TemplateField&gt;             &lt;asp:TemplateField HeaderText=\"Delete\"&gt;                 &lt;ItemStyle HorizontalAlign=\"Center\" VerticalAlign=\"Middle\" Width=\"80px\" /&gt;                 &lt;ItemTemplate&gt;                     &lt;asp:LinkButton ID=\"btnDelete\" Text=\"Delete\" runat=\"server\" CausesValidation=\"false\"                         RowIndex='&lt;%# Container.DisplayIndex %&gt;' OnClick=\"btnDelete_Click\"&gt;                             &lt;img style=\"border:none;\" src = \"Images/icon_remove.png\"/&gt;&lt;/asp:LinkButton&gt;                 &lt;/ItemTemplate&gt;             &lt;/asp:TemplateField&gt;         &lt;/Columns&gt;         &lt;EditRowStyle BackColor=\"#2461BF\" /&gt;         &lt;FooterStyle BackColor=\"#507CD1\" Font-Bold=\"True\" ForeColor=\"White\" /&gt;         &lt;HeaderStyle BackColor=\"#507CD1\" Font-Bold=\"True\" ForeColor=\"White\" /&gt;         &lt;PagerStyle BackColor=\"#2461BF\" ForeColor=\"White\" HorizontalAlign=\"Center\" /&gt;         &lt;RowStyle BackColor=\"#EFF3FB\" /&gt;         &lt;SelectedRowStyle BackColor=\"#D1DDF1\" Font-Bold=\"True\" ForeColor=\"#333333\" /&gt;         &lt;SortedAscendingCellStyle BackColor=\"#F5F7FB\" /&gt;         &lt;SortedAscendingHeaderStyle BackColor=\"#6D95E1\" /&gt;         &lt;SortedDescendingCellStyle BackColor=\"#E9EBEF\" /&gt;         &lt;SortedDescendingHeaderStyle BackColor=\"#4870BE\" /&gt;     &lt;/asp:GridView&gt;   Defult.aspx.cs   /// Author : Md. Mahedee Hasan /// Purpose : Code behind of Default.aspx page /// Creation Date : 21/04/2012 /// ================================================================================================== /// || Modification History || /// ------------------------------------------------------------------------------------------------- /// Sl No. Date: Author: Ver: Area of Change: /// /// **************************************************************************************************   using System; using System.Collections.Generic; using System.Linq; using System.Web; using System.Web.UI; using System.Web.UI.WebControls;   public partial class _Default : System.Web.UI.Page {       protected void Page_Load(object sender, EventArgs e)     {              if (!Page.IsPostBack)         {             Load_gvEmpInfo();         }     }          ///     /// Binding gridview gvEmpInfo     ///            private void Load_gvEmpInfo()       {           EmployeeInfoBLL objEmployeeInfoBLL = new EmployeeInfoBLL();           this.gvEmpInfo.DataSource = objEmployeeInfoBLL.GetEmployeeInfoAll();           this.gvEmpInfo.DataBind();       }          protected void btnEdit_Click(object sender, EventArgs e)     {              this.btnSave.Text = \"Edit\";                  LinkButton btnEdit = sender as LinkButton;                  //Identify the clicked row         int rowIndex = Convert.ToInt32(btnEdit.Attributes[\"RowIndex\"]);                  GridViewRow gvRow = this.gvEmpInfo.Rows[rowIndex];                  //Identify the hidden filed value of clicked row         int emp_gid = Convert.ToInt32(((HiddenField)gvRow.FindControl(\"hidemp_gid\")).Value);                  this.txtEmpFullNm.Text = gvRow.Cells[0].Text;         this.txtEmpNickNm.Text = gvRow.Cells[1].Text;         this.txtDesignation.Text = gvRow.Cells[2].Text;                  this.hf_emp_gid.Value = emp_gid.ToString();          }          protected void btnDelete_Click(object sender, EventArgs e)     {     LinkButton btnDelete = sender as LinkButton;          //Identify the clicked row     int rowIndex = Convert.ToInt32(btnDelete.Attributes[\"RowIndex\"]);          GridViewRow gvRow = this.gvEmpInfo.Rows[rowIndex];          //Identify the hidden filed value of clicked row     int emp_gid = Convert.ToInt32(((HiddenField)gvRow.FindControl(\"hidemp_gid\")).Value);          string msg = String.Empty;          try     {     EmployeeInfoBLL objEmployeeInfoBLL = new EmployeeInfoBLL();     msg = objEmployeeInfoBLL.RemoveEmployeeInfo(emp_gid);     Load_gvEmpInfo();     ClearForm();     }     catch (Exception exp)     {     msg = exp.Message;     }          }          protected void btnSave_Click(object sender, EventArgs e)     {         String msg = String.Empty;         Button btnSave = sender as Button;                  EmployeeInfoBLL objEmployeeInfoBLL = new EmployeeInfoBLL();         EmployeeInfo objEmployeeInfo = new EmployeeInfo();         objEmployeeInfo.EmpFullNm = this.txtEmpFullNm.Text;         objEmployeeInfo.EmpNickNm = this.txtEmpNickNm.Text;         objEmployeeInfo.EmpDesignation = this.txtDesignation.Text;                  try         {             if (btnSave.Text == \"Edit\")             {                 objEmployeeInfo.EmpGid = Convert.ToInt32(this.hf_emp_gid.Value);                 msg = objEmployeeInfoBLL.EditEmployeeInfo(objEmployeeInfo);                 this.btnSave.Text = \"Save\";             }             else             {                 msg = objEmployeeInfoBLL.SaveEmployeeInfo(objEmployeeInfo);             }                      Load_gvEmpInfo();             ClearForm();         }         catch (Exception exp)         {             msg = exp.Message;         }          }          ///     /// Clear form     ///          private void ClearForm()     {         this.txtEmpFullNm.Text = \"\";         this.txtEmpNickNm.Text = \"\";         this.txtDesignation.Text = \"\";     } }   Yes! You have done this. Now you will see the following form where you can insert update and delete employee information. gridView   Source code  ","categories": ["ASP.NET","C#"],
        "tags": ["aspnet","csharp"],
        "url": "http://localhost:4000/a-simple-demonstration-with-asp-net-gridview/",
        "teaser":null},{
        "title": "Introduction to Web Services using ASP.NET",
        "excerpt":"What is Web Services?   Web service is a method of communication between two web based application using XML, SOAP, WSDL and UDDI open standards over an internet protocol backbone. Web service can convert your application into web application which can publish its function or message to the rest of the world. Web service are-      Web services are application components   Web services communicate with open protocols   Web services are self-contained and self-describing   Web services can be discovered using UDDI (*4)   Web services can be used by other applications   XML is the basis of web services   Why Web Services?   Different web applications in the web want to interact with each other. Such as application can share data, can invoke method of other application. So, how can you solve this? It will also be a great problem if applications are in different platform and language. Web service solves the above issues.   By using Web services, your application can publish its function or message to the rest of the world. Web services use XML to code and to decode data, and SOAP to transport it (using open protocols). With Web services, your accounting department’s Win 2k server’s billing system can connect with your IT supplier’s UNIX server   Web services have two types of uses:      Reusable Application Component - currency conversion, weather reports, language translation.   Connect Existing Software - Web services can help to solve the interoperability problem by giving different applications a way to link their data.   How does it work?   The basic web service platform is XML + HTTP. Web service elements are –      SOAP – Simple Object Access Protocol   UDDI – Universal Description, Discovery and Integration   WSDL – Web Service Description Language   With ASP.net, you do not have to write SOAP and WSDL documents. ASP.net automatically creates SOAP and WSDL documents.   Example:   Simple Addition Method: Here I have tried to represent web service before you by a simple add method which takes two parameter as two integer value and it returns the addition of these two.   Step 1: Create Asp.net Web service      Create an Asp.net website.   Click right button on asp.net web site.   Click on add new Item.   Select Web service like and click add button   Right click on WebService.asmx and select view code. You will see the following code snippet. It should be mentioned here that I have created my web service named WebService which you have already seen in previous screen.   using System;  using System.Collections.Generic; using System.Linq; using System.Web; using System.Web.Services;   /// /// Summary description for WebService ///   [WebService(Namespace = \"http://tempuri.org/\")] [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]   // To allow this Web Service to be called from script, using ASP.NET AJAX, uncomment the following line. // [System.Web.Script.Services.ScriptService]   public class WebService : System.Web.Services.WebService  {     public WebService ()      {        //Uncomment the following line if using designed components     //InitializeComponent();     }          [WebMethod]     public string HelloWorld()     {         return \"Hello World\";     }   }     Simply add a Method name Add as like below.   using System; using System.Collections.Generic; using System.Linq; using System.Web; using System.Web.Services;   /// /// Summary description for WebService ///   [WebService(Namespace = \"http://tempuri.org/\")] [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]   // To allow this Web Service to be called from script, using ASP.NET AJAX, uncomment the following line.   // [System.Web.Script.Services.ScriptService]   public class WebService : System.Web.Services.WebService  {     public WebService ()      {           //Uncomment the following line if using designed components       //InitializeComponent();     }          [WebMethod]     public string HelloWorld()     {         return \"Hello World\";     }          [WebMethod]     public int Add(int firstVal, int secondVal)     {         return firstVal + secondVal;     }  }       Click right button on WebService.asmx and set as Start Page   Run Project or press F5.   Click Add method, you will see a page with two text field name firstVal and secondVal.   Suppose, I input two value 12 and 30. Click Invoke.   After clicking Invoke you will get the addition of two values as XML format.   Now your web service is ready to use. We have to use web service in various ways. In the next step I will show how to access web service from client page.   Step 2: Create a client page and access web service.   There are many ways to consume web service. Here is an example of HTML-POST protocol which is one of the ways of consuming web service.      Create a aspx/html page. I have used here an aspx page name “ClientForm.aspx”.   Add the following tags in aspx source.   In action attribute of form tag, I have used localhost because I have already hosted it. You can simply use “http://localhost:5143/Web/WebService.asmx/Add” in  action attribute instead of present value in action attribute if you didn’t host website in your local machine. Here 5143 can vary.   &lt;form id=\"form1\" action=\"http://localhost/Demo_2010/WebService.asmx/Add\"&gt;   &lt;div&gt;     Input1: &lt;input name=\"firstVal\" type=\"text\" /&gt;      Input2: &lt;input name=\"secondVal\" type=\"text\" /&gt;      &lt;input type=\"submit\" value=\"Enter\" /&gt;   &lt;/div&gt; &lt;/form&gt;     Click right button on ClientForm.aspx and set as Start Up page.   Run your project.   You will see a screen with two textbox   Enter two values of two textbox.   Press Enter you will get the result in xml format.   This is the basic example and web service. You will see more about web service next.   Notes:   XML provides a language which can be used between different platforms and programming languages and still express complex messages and functions.   SOAP: The HTTP protocol is the most used Internet protocol. SOAP is an XML-based protocol to let applications exchange information over HTTP. Or, more simple: SOAP is a protocol for accessing a Web Service.      SOAP stands for Simple Object Access Protocol   SOAP is a communication protocol   SOAP is a format for sending messages   SOAP is designed to communicate via Internet   SOAP is platform independent   SOAP is language independent   SOAP is based on XML   SOAP is simple and extensible   SOAP allows you to get around firewalls   SOAP is a W3C standard   WSDL:  WSDL is an XML-based language for locating and describing Web services.      WSDL stands for Web Services Description Language   WSDL is based on XML   WSDL is used to describe Web services   WSDL is used to locate Web services   WSDL is a W3C standard   UDDI:     UDDI is a directory service where companies can register and search for Web services.   UDDI stands for Universal Description, Discovery and Integration   UDDI is a directory for storing information about web services   UDDI is a directory of web service interfaces described by WSDL   UDDI communicates via SOAP   UDDI is built into the Microsoft .NET platform    ","categories": ["ASP.NET","C#"],
        "tags": ["csharp","oop"],
        "url": "http://localhost:4000/introduction-to-web-services/",
        "teaser":null},{
        "title": "Recovering SQL Server Database From Suspect Mode",
        "excerpt":"Sometimes we have to face a critical situation when SQL Server database going to Suspect Mode. In that moment no work can be done on database. Database may go into suspect mode because the primary file group is damaged and the database cannot be recovered during the startup of the SQL Server   Reason for database to go into suspect mode:     Data files or log files are corrupt.   Database server was shut down improperly   Lack of Disk Space   SQL cannot complete a rollback or roll forward operation.   How to recover database from suspect mode:   Step 1: Change the status of your database. Suppose database name is “BluechipDB”   EXEC sp_resetstatus '';   Example:   EXEC sp_resetstatus 'BlueChipDB'   Step 2: Set the database in “Emergency” mode   ALTER DATABASE  SET EMERGENCY;  Example:   ALTER DATABASE BlueChipDB SET EMERGENCY  Step 3: Check the database for any inconsistency   DBCC CHECKDB('');  Example:   DBCC checkdb('BlueChipDB')  Step 4: If you get any error after executing DBCC CHECKDB then immediately bring the database in SINGLE USER MODE by running following query. If no error found then you need not execute the following query.   ALTER DATABASE  SET SINGLE_USER WITH ROLLBACK IMMEDIATE   Example:  ALTER DATABASE BlueChipDB SET SINGLE_USER WITH ROLLBACK IMMEDIATE   Step 5: For safety, take the backup of the database.   Step 6: Run the following query as next step. Remember while using the below query, that uses REPAIR_ALLOW_DATA_LOSS, is a one way operation that is once the database is repaired all the actions performed by these queries can’t be undone. There is no way to go back to the previous state of the database. So as a precautionary step you should take backup of your database in step 5 mentioned above.   DBCC CHECKDB ('', REPAIR_ALLOW_DATA_LOSS);  Example  DBCC CheckDB ('BlueChipDB', REPAIR_ALLOW_DATA_LOSS)   Step 7: Finally, bring the database in MULTI USER mode   ALTER DATABASE  SET MULTI_USER; ALTER DATABASE [BlueChipDB]  SET MULTI_USER  Step 8: Refresh your database server and verify the connectivity of your database. Now users should be able to connect to the database properly. If any data loss, you can restore database – backup taken in step 5.    ","categories": ["SQL Server","Database","Troubleshooting"],
        "tags": ["sqlserver","database","troubleshooting"],
        "url": "http://localhost:4000/recovering-sql-server-database-from-suspect-mode/",
        "teaser":null},{
        "title": "Configure Web gardens in IIS 7 step by step",
        "excerpt":"Introduction  “Web garden” scaling out by increasing the number of worker processes per CPU. Web gardening will allow more than two subscribers to synchronize at the same time. Before going to the details of web garden, I hope you have fundamental idea on application pool and worker process. Just for reminder - for request processing in IIS, worker process (w3wp.exe) runs the ASP.NET application in IIS. Worker process is responsible for handling all kinds of request, response, session data, and cache data. Application Pool is the container of worker process. Application pool is used to separate sets of IIS worker processes and enables a better security, reliability, and availability for any web application. It will also increase CPU utilization by replisapi.dll, which can negatively impact overall server performance. So, it is important to balance these considerations when you choose a value for Maximum Worker Processes.      Fig – Application pool is the container of one or more worker processes   Now, by default, each and every Application pool contains a single worker process. Application which contains the multiple worker process is called “Web Garden”. Below is the typical diagram for a web garden application.      Fig – Multiple worker process in an application pool (Web garden)   Why Web garden?     Offering applications that are not CPU-bound but execute long running requests the ability to scale and not use up all threads available in the worker process   Applications that make long running database requests (e.g. high computational database transaction)   Applications that have threads occupied by long-running synchronous and network intensive transactions   You can support a greater number of concurrent synchronization operations per CPU by increasing the Maximum Worker Process property value   Provides better application availability by sharing request between multiple worker processes.   Web garden use processor affinity where application can swapped out based on preference and tag setting.   Less consumption of physical space for web garden configuration.   Configure Web garden in IIS 7   Step 1: Deploy and configure your web application as usual   Step 2: Modify web.config file   Find out the following line in web.config file.  &lt;sessionState mode=\"InProc\" timeout=\"60\"&gt;&lt;/sessionState&gt;   If the above line exists, remove the above line and replace following line.   &lt;sessionState mode=\"StateServer\" cookieless=\"false\" timeout=\"30\" stateConnectionString=\"tcpip=127.0.0.1:42424\" /&gt;   Here tcpip = “127.0.0.1” is local state server IP and “42424” is the port number for state server.  You can use other IP as state server.   Step 3:  Modify registry by regedit   Run -&gt; regedt -&gt; HKEY_LOCAL_MACHINESYSTEM -&gt; CurrentControlSet -&gt; Services -&gt; aspnet_state -&gt; Parameters      Step a: AllowRemoteConnection (Right Click) -&gt; Modify -&gt; Set Value Data to 1 (Base Decimal) -&gt; Ok   Step b: Port (Right Click) -&gt; Modify -&gt; Base Decimal -&gt; Ok   Step 4: Run asp.net state service   Check the following step: Run -&gt; control -&gt; Administrative Tools -&gt; Services -&gt; ASP.NET State Service (Right Click) -&gt; Properties     Step a:  Startup Type -&gt; Automatic   Step b:  Service Status -&gt; start   Finally Click Ok.   Step 5: Create an application pool  Create a different application pool for safety. If you use a separate application pool, it will be easy to manage. You can use default application pool also.   To create an application pool that runs using a custom service account     Start Internet Information Services (IIS) Manager.  (Run-&gt;inetmgr)   In the left pane, expand the local computer and then select Application Pools.   Right-click the Application Pools node, clicks Add Application Pool, and then clicks Application Pool.        In the Add Application Pool dialog box, type “Pool Name” in the name text box. In figure Pool name is Bluechipplus. Select .NET Framework version. In figure, I select 4.0.30319. Select Managed pipeline mode. I select integrated mode. Selection of framework version and managed pipeline mode depends on your application which you are going to hosted. Click OK to complete application pool creation.              Now select application pools. You will see newly created Bluechipplus application pool in the middle panel.   Step 6: Configure application pool     Select newly created “Bluechipplus” application pool in the middle panel.   Click Advanced Settings in “Edit Application Pool” section in the right panel. A dialogue box will appear named “Advanced Settings”   In Process Model section, select identity. Network service is default and recommended. If you find problem, you should change. In figure Local service is selected.   In Process Model section, type maximum worker process. In figure 12 maximum worker processes selected. Selecting worker process is actually depends on your server capability and memory.   In Recycling section, select private memory limit in KB. In figure 200000 is selected. Consider your server memory before considering memory limit.        Finally click OK to complete application pool settings.              Step 7: Select application pool for the application     Right click on application in IIS-&gt;Manage Application -&gt; Advanced Settings         From advanced settings dialogue box -&gt; Browse application pool -&gt; Select application pool         Finally click OK after assigning application pool   Now you have completed web garden for your application. Browse your application and cheers!!!    ","categories": ["IIS","ASP.NET","Troubleshooting"],
        "tags": ["iis","aspnet","troubleshooting"],
        "url": "http://localhost:4000/web-gardening-in-iis-7-configure-step-by-step/",
        "teaser":null},{
        "title": "Object Oriented Design Principles With C# – Part – 1",
        "excerpt":"   Oop principles  from Mahedee Hasan ","categories": ["C#","OOP","Slides"],
        "tags": ["csharp","oop","slides"],
        "url": "http://localhost:4000/object-oriented-design-principles-with-c-part-1/",
        "teaser":null},{
        "title": "Install And Uninstall Windows Service From Command Prompt",
        "excerpt":"Suppose you have created a windows service name “YourServiceName.exe”. Now you want to install or uninstall it from command prompt.   To Install Service run the following commnad   C:\\Windown\\Microsoft.Net\\framework\\v2.0\\installUtil.exe  C:\\dirctory\\YourServeceName.exe    To Uninstall Service run the following command   C:\\Windown\\Microsoft.Net\\v2.0\\installUtil.exe /u C:\\dirctory\\YourServeceName.exe    Note: Here, “C:\\dirctory\\YourServeceName.exe” means location of your service.  ","categories": ["C#","Troubleshooting","Commands"],
        "tags": ["csharp","troubleshooting","commands"],
        "url": "http://localhost:4000/install-and-uninstall-windows-service-from-command-prompt/",
        "teaser":null},{
        "title": "SQL Join With Microsoft SQL Server",
        "excerpt":"What is SQL Joins?   In SQL, a join is a mechanism to combine data from two or more tables based on related columns between them. A join allows you to retrieve data from multiple tables as a single result set.   There are several types of joins in SQL, including:     INNER JOIN   LEFT JOIN   RIGHT JOIN   FULL JOIN   SELF JOIN   CARTESIAN JOIN/CROSS JOIN   To understand JOINs, let’s consider the following two tables Customers and Orders is as follows   Customers      Orders      INNER JOIN   INNER JOIN returns match data between tables. It returns rows when there is at least one match in both the tables.      Syntax:   SELECT Cust.Id, Cust.Name, ord.Amount, ord.[Date] FROM Customers Cust INNER JOIN Orders ord ON Cust.Id = ord.CustomerId;   Output:                  ID       Name       Amount       Date                       2       Hamidur Rahman       4000.00       2014-01-10                 2       Hamidur Rahman       5000.00       2014-01-10                 3       Jamilur Rahman       3000.00       2014-02-13                 4       Hasan Sarwar       600.00       2014-03-22           LEFT JOIN/LEFT OUTER JOIN  Left Outer Join returns all the rows from the left table in conjunction with the matching rows from the right table. If there are no columns matching in the right table, it returns NULL values.      SELECT Cust.Id, Cust.Name, ord.Amount, ord.[Date] FROM Customers Cust LEFT JOIN Orders ord ON Cust.Id = ord.CustomerId;   Output:                  Id       Name       Amount       Date                       1       Mahedee Hasan       NULL       NULL                 2       Hamidur Rahman       4000.00       2014-01-10                 2       Hamidur Rahman       5000.00       2014-01-10                 3       Jamilur Rahman       3000.00       2014-02-13                 4       Hasan Sarwar       600.00       2014-03-22                 5       Kamal Hossain       NULL       NULL                 6       Imran Khan       NULL       NULL                 7       Abu Sayem       NULL       NULL           RIGHT JOIN/RIGHT OUTER JOIN  Right outer join returns all the rows from the right table in conjunction with the matching rows from the left table. If there are no columns matching in the left table, it returns NULL values.      Syntax:   SELECT Cust.Id, Cust.Name, ord.Amount, ord.[Date] FROM Customers Cust RIGHT JOIN Orders ord ON Cust.Id = ord.CustomerId;   Output:                  Id       Name       Amount       Date                       2       Hamidur Rahman       4000.00       2014-01-10                 2       Hamidur Rahman       5000.00       2014-01-10                 3       Jamilur Rahman       3000.00       2014-02-13                 4       Hasan Sarwar       600.00       2014-03-22                 NULL       NULL       800.00       2014-03-22           FULL JOIN /FULL OUTER JOIN   Full outer join is combines left outer join and right outer join. It returns row from either table when the conditions are met and returns null value when there is no match      Syntax:   SELECT Cust.Id, Cust.Name, ord.Amount, ord.[Date] FROM Customers Cust FULL JOIN Orders ord ON Cust.Id = ord.CustomerId;   Output:                  Id       Name       Amount       Date                       1       Mahedee Hasan       NULL       NULL                 2       Hamidur Rahman       4000.00       2014-01-10                 2       Hamidur Rahman       5000.00       2014-01-10                 3       Jamilur Rahman       3000.00       2014-02-13                 4       Hasan Sarwar       600.00       2014-03-22                 5       Kamal Hossain       NULL       NULL                 6       Imran Khan       NULL       NULL                 7       Abu Sayem       NULL       NULL                 NULL       NULL       800.00       2014-03-22           SELF JOIN  The SQL SELF JOIN is used to join a table to itself as if the table were two tables, temporarily renaming at least one table in the SQL statement.   Syntax:   SELECT A.Id, A.Name, B.Name AS Introducer FROM Customers A, Customers B WHERE A.IntroducerId = B.Id   Output:                  Id       Name       Introducer                       1       Mahedee Hasan       Hamidur Rahman                 2       Hamidur Rahman       Mahedee Hasan                 3       Jamilur Rahman       Hamidur Rahman                 4       Hasan Sarwar       Jamilur Rahman                 5       Kamal Hossain       Hasan Sarwar                 6       Imran Khan       Kamal Hossain                 7       Abu Sayem       Imran Khan           CARTESIAN JOIN/CROSS JOIN  The SQL cross join produces a result set which is the number of rows in the first table multiplied by the number of rows in the second table, if no WHERE clause uses in the second table      Syntax:   SELECT cust.Id, cust.Name, ord.Amount, ord.[Date] FROM Customers cust CROSS JOIN Orders ord   Output:                  Id       Name       Amount       Date                       1       Mahedee Hasan       4000.00       2014-01-10                 2       Hamidur Rahman       4000.00       2014-01-10                 3       Jamilur Rahman       4000.00       2014-01-10                 4       Hasan Sarwar       4000.00       2014-01-10                 5       Kamal Hossain       4000.00       2014-01-10                 6       Imran Khan       4000.00       2014-01-10                 7       Abu Sayem       4000.00       2014-01-10                 1       Mahedee Hasan       5000.00       2014-01-10                 2       Hamidur Rahman       5000.00       2014-01-10                 3       Jamilur Rahman       5000.00       2014-01-10                 4       Hasan Sarwar       5000.00       2014-01-10                 5       Kamal Hossain       5000.00       2014-01-10                 6       Imran Khan       5000.00       2014-01-10                 7       Abu Sayem       5000.00       2014-01-10                 1       Mahedee Hasan       3000.00       2014-02-13                 2       Hamidur Rahman       3000.00       2014-02-13                 3       Jamilur Rahman       3000.00       2014-02-13                 4       Hasan Sarwar       3000.00       2014-02-13                 5       Kamal Hossain       3000.00       2014-02-13                 6       Imran Khan       3000.00       2014-02-13                 7       Abu Sayem       3000.00       2014-02-13                 1       Mahedee Hasan       600.00       2014-03-22                 2       Hamidur Rahman       600.00       2014-03-22                 3       Jamilur Rahman       600.00       2014-03-22                 4       Hasan Sarwar       600.00       2014-03-22                 5       Kamal Hossain       600.00       2014-03-22                 6       Imran Khan       600.00       2014-03-22                 7       Abu Sayem       600.00       2014-03-22                 1       Mahedee Hasan       800.00       2014-03-22                 2       Hamidur Rahman       800.00       2014-03-22                 3       Jamilur Rahman       800.00       2014-03-22                 4       Hasan Sarwar       800.00       2014-03-22                 5       Kamal Hossain       800.00       2014-03-22                 6       Imran Khan       800.00       2014-03-22                 7       Abu Sayem       800.00       2014-03-22           Additional Information Related JOIN   Left Outer Join Where Null Left outer join where null returns all the rows from the left table in conjunction without the matching rows from the right table.      Syntax   SELECT Cust.Id, Cust.Name, ord.Amount, ord.[Date] FROM Customers Cust LEFT JOIN Orders ord ON Cust.Id = ord.CustomerId where ord.CustomerId is null  Output                  Id       Name       Amount       Date                       1       Mahedee Hasan       NULL       NULL                 5       Kamal Hossain       NULL       NULL                 6       Imran Khan       NULL       NULL                 7       Abu Sayem       NULL       NULL           Right Outer Join Where Null  Right outer join where null returns all the rows from the right table in conjunction without the matching rows from the left table.      Syntax:   SELECT Cust.Id, Cust.Name, ord.Amount, ord.[Date] FROM Customers Cust RIGHT JOIN Orders ord ON Cust.Id = ord.CustomerId where Cust.Id is null   Output                  Id       Name       Amount       Date                       NULL       NULL       800.00       2014-03-22           Full Outer Join Where Null  Full outer join is combines left outer join and right outer join. It returns row from either table when the conditions are met and returns null value when there is no match      Syntax   SELECT Cust.Id, Cust.Name, ord.Amount, ord.[Date] FROM Customers Cust FULL OUTER JOIN Orders ord ON Cust.Id = ord.CustomerId WHERE Cust.Id is null OR ord.CustomerId is null   Output                  Id       Name       Amount       Date                       1       Mahedee Hasan       NULL       NULL                 5       Kamal Hossain       NULL       NULL                 6       Imran Khan       NULL       NULL                 7       Abu Sayem       NULL       NULL                 NULL       NULL       800.00       2014-03-22          ","categories": ["Database","SQL Server"],
        "tags": ["database","sqlserver"],
        "url": "http://localhost:4000/sql-join-with-microsoft-sql-server/",
        "teaser":null},{
        "title": "Introduction To ASP.NET MVC",
        "excerpt":"What is MVC?   MVC is a framework methodology. It divides an application’s implementation into three component roles: models, views, and controllers.         The Model represents the application core (for instance a list of database records).   The View displays the data (the database records).   The Controller handles the input.   For example: If you request a page, first controller handle the request and order a action which will serve the request. Action can use model to get database record. Then action displays results to the view pages. MVC provides full control over HTML, CSS and JavaScript.   You can think MVC model defines web applications with 3 logic layers:      The business layer (Model logic)   The display layer (View logic)   The input control (Controller logic)   The Model is the part of the application that handles the logic for the application data. Often model objects retrieve data (and store data) from a database.   The View is the parts of the application that handles the display of the data. Most often the views are created from the model data.   The Controller is the part of the application that handles user interaction. Typically controllers read data from a view, control user input, and send input data to the model.   The MVC separation helps you manage complex applications, because you can focus on one aspect a time. For example, you can focus on the view without depending on the business logic. It also makes it easier to test an application.   The MVC separation also simplifies group development. Different developers can work on the view, the controller logic, and the business logic in parallel.   A Look at MVC Request Response process   From the above discussion, you may guess the Request Response process of MVC. Let us try to see this formally.      User sends the request by the URL.   UrlRoutingModule intercepts the request and starts parsing it.   The appropriate Controller and handler will be identified from the URL by looking at the RouteTable collection. Also any data coming along with the request is kept in RouteData.   The appropriate action in the identified controller will be executed.   This action will create the Model class based on data.   The action will then pass on this created model class to some view and tell the view to proceed.   Now the view will execute and create the markup based on the logic and Model’s data and then push the HTML back to the browser.   This life cycle above is defined for explanation and has omitted some technical details.   What is View Engine?   View Engines are responsible for rendering the HTML from your views to the browser. The view engine template will have different syntax for implementation. Currently there are few numbers of view engines available for MVC and the top four view engines are Razor, traditional ASPX, Spark and NHaml.  ","categories": ["ASP.NET MVC","C#"],
        "tags": ["aspnetmvc","csharp"],
        "url": "http://localhost:4000/introduction-to-asp-net-mvc/",
        "teaser":null},{
        "title": "How To Create First Application By ASP.NET MVC",
        "excerpt":" ","categories": ["ASP.NET MVC","C#"],
        "tags": ["aspnetmvc","csharp"],
        "url": "http://localhost:4000/how-to-create-first-application-by-asp-net-mvc/",
        "teaser":null},{
        "title": "Uses Of ViewBag And Model In ASP.NET MVC",
        "excerpt":"In my series tutorial on ASP.NET MVC, I will try to develop an application which is called Training Management System (TMS). In this project, I will keep an employee’s skill matrix on the basis of training. Rather than this, I will keep employee information, training information and many more. I will continuously modify the project by implementing different features and functionality of ASP.NET MVC.   In this article, I will show how to implement a simple model and ViewBag. ASP.NET MVC offers us ViewBag for passing data from controller to view. ViewBag is dynamic object. Let’s create a project using asp.net MVC.   Step 1: Create a Model name – AboutModel   using System; using System.Collections.Generic; using System.Linq; using System.Web;   namespace TMS.Models {   public class AboutModel   {     public string Name { get; set; }     public string Location { get; set; }   } }   Step 2: Edit HomeController and update the About action as follows   public ActionResult About() {   ViewBag.Message = \"Company Information\";      var aboutModel = new AboutModel();   aboutModel.Name = \"Leadsoft Bangladesh Limited\";   aboutModel.Location = \"41/6, Purana Platan, Sawdesh Tower, Dhaka - 1000\";      return View(aboutModel); }   In this action, you will see, ViewBag.Message is used to hold a string, we will use it in view. I use a AboutModel object name aboutModel with its two property which will also use in the view.   Step 3: Edit About view (About.cshtml) as follows   @model TMS.Models.AboutModel @{ ViewBag.Title = \"About\"; } &lt;hgroupclass=\"title\"&gt; &lt;h1&gt;@ViewBag.Title.&lt;/h1&gt; &lt;/hgroup&gt; &lt;div&gt; &lt;h2&gt;@ViewBag.Message&lt;/h2&gt; &lt;h2&gt;@Model.Name&lt;/h2&gt; Location : @Model.Location &lt;/div&gt;   Add @model TMS.Models.AboutModelat the top of the view. To view the ViewBag data use like @ViewBag.Message . Use AboutModel value like   &lt;h2&gt;@Model.Name&lt;/h2&gt; Location : @Model.Location   Now run the project and click About link, you will see the output.      ","categories": ["ASP.NET MVC","C#"],
        "tags": ["aspnetmvc","csharp"],
        "url": "http://localhost:4000/uses-of-viewbag-and-model-in-asp-net-m/",
        "teaser":null},{
        "title": "Routes And Controllers In ASP.NET MVC",
        "excerpt":"Let’s consider a url http://localhost/home/about . How does it work in an MVC application? How does it deliver a request? Yes, routing engine is responsible for this task. So, what is routing engine? The routing engine is a core part of asp.net. It’s not tied to the MVC framework. You can use the routing engine to route requests for web form, WCF Service, actually any type of resources but in MVC we use this routing engine to direct requests to our controllers.      The goal of the routing engine, its job is to examine a URL and figure out where to send it for processing.   Let’s examine our TMS application (according to our previous article) or any other ASP.NET MVC application. If you open global.asax file of TMS, you can see a class here derived from HttpApplication and this allow to hook into some application level events like application start. This method(application_start) magically invoked by asp.net before processing the first http request. So when your application starts, application_start will execute one time before any of your controllers start executing. Here is the sample global.asax file.   public class MvcApplication : System.Web.HttpApplication {     protected void Application_Start()     {         AreaRegistration.RegisterAllAreas();         WebApiConfig.Register(GlobalConfiguration.Configuration);         FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters);                  RouteConfig.RegisterRoutes(RouteTable.Routes); //Responsible for routing                  BundleConfig.RegisterBundles(BundleTable.Bundles);         AuthConfig.RegisterAuth();          } }  In Application_Start() method the following statement is responsible for routing. RouteConfig.RegisterRoutes(RouteTable.Routes);   If you click right button on “RegisterRoutes” and go to definition it will go to the RegisterRoutes method of the RouteConfig class which is App_Start folder. Here is the RouteConfig class. I can get into the definition of this method if I just put my cursor tight here on the method and press F12.   You have noticed that this class is called from the application start method in globa.asax.cs.   public class RouteConfig {     public static void RegisterRoutes(RouteCollection routes)     {         routes.IgnoreRoute(\"{resource}.axd/{*pathInfo}\");         routes.MapRoute(         name: \"Default\", //Route Name         url: \"{controller}/{action}/{id}\", //URL with parameters (Pattern for the route)         defaults: new { controller = \"Home\", action = \"Index\", id = UrlParameter.Optional } //Default route             );              } }    So, let me introduce details of the RegisterRoutes method. Here is the code we see, here the first statement is  routes.IgnoreRoute(\"{resource}.axd/{*pathInfo}\");  It means ignore route which is in this pattern. Then let’s see the following statement. It means add a new route name “Default” and routing pattern must be “{controller}/{action}/{id}” and default routing   routes.MapRoute( name: \"Default\", //Route Name url: \"{controller}/{action}/{id}\", //URL with parameters (Pattern for the rout) defaults: new { controller = \"Home\", action = \"Index\", id = UrlParameter.Optional } //Default route );   Defaults route means, when you don’t type any controller or action in the URL, its goes to the index action of home controller.   Let’s go to the index action of home controller and modify the index action like following.   public ActionResult Index() { var controller = RouteData.Values[\"controller\"]; var action = RouteData.Values[\"action\"]; var id = RouteData.Values[\"id\"];   var message = string.Format(\"{0}::{1} {2}\",controller, action,id);   ViewBag.Message = message;   return View(); }    Now if you run the application you will see in the home page – Home::Index If you slightly modify the url like - http://localhost:25379/Home/Index/2323. You will see home page - Home::Index 2323 Now you understand what the function of route and controller is? Happy programming !!! 🙂      ","categories": ["ASP.NET MVC","C#"],
        "tags": ["aspnetmvc","csharp"],
        "url": "http://localhost:4000/routes-and-controllers-in-asp-net-mvc/",
        "teaser":null},{
        "title": "A Simple Application With ASP.NET MVC 4 With EF 6 Code First And Scaffolding",
        "excerpt":"Introduction  Before going to the details of article, I think you already know what MVC is and how ASP.NET MVC Works. If you don’t have any idea, you are requested to read the following article.      Introduction to ASP.NET MVC   How to create first Application by ASP.NET MVC   Uses of ViewBag and Model in ASP.NET MVC   Routes and Controllers in ASP.NET MVC   Project description  In this article I will develop a simple application with ASP.NET MVC 4 with Entity Framework 6 code first approach and scaffolding. I will also use MvcScaffold for quick develop of controllers, context and views. For your kind information, here I used visual studio 2012. Here I will develop two functionalities of an application “Training Management system” – Trainer Information and Training Information. User can view, save, edit and delete Trainer information and training information can be viewed, saved, edit and deleted same way. Both trainer and training information will show in simple grid. Trainer can be assigned to the training information   Entity Framework – code first  Entity Framework (EF) is an object-relational mapper (ORM) that enables .NET developers to work with relational data using domain-specific objects. It eliminates the need for most of the data-access code that developers usually need to write.   Three approach of entity framework are Model first, Database first, code first. In Code-First Approach, we create the classes first and then generate the database from the classes directly   Application development step by step   Step 1: Create a simple application name “TMS” by asp.net mvc.   I think, you must know How to create first Application by ASP.NET MVC) .   Step 2: Install “nuget” packages.     For installing “nuget”, you must have enable internet connection.   Open Package Manager Console (Tools-&gt; Library Package Manager –&gt; Package Manager Console)   Run following commands in the console – bottom of the window.   PM&gt;Install-Package EntityFramework  PM&gt;Install-Package MvcScaffolding   Step 3: Create two models “Trainer” and “Training” in Model folder.      Create Trainer and Training model class in Models folder.   Trainer.cs   using System; using System.Collections.Generic; using System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; using System.Linq; using System.Web;   namespace TMS.Models {     public class Trainer     {              [Required, Key, DatabaseGenerated(DatabaseGeneratedOption.Identity)]         public long Id { get; set; }          public string Name { get; set; }          public string Designation { get; set; }         public string Oranizaton { get; set; }          public DateTime CreateDate { get; set; }         public DateTime ModificationDate { get; set; }          public bool IsActive { get; set; }     } }   Training.cs   using System; using System.Collections.Generic; using System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; using System.Linq; using System.Web;   namespace TMS.Models {     public class Training     {         [Required, Key, DatabaseGenerated(DatabaseGeneratedOption.Identity)]                  public long Id { get; set; }         public string Title { get; set; }         public string Venue { get; set; }         public long TrainerId { get; set; }                  [ForeignKey(\"TrainerId\")]         public virtual Trainer Trainer { get; set; }                  public string Description { get; set; }                  public DateTime StartDate { get; set; }         public DateTime EndDate { get; set; }                  public DateTime CreateDate { get; set; }         public DateTime ModificationDate { get; set; }                  public bool IsActive { get; set; }     } }    In the above model, I used  [Required, Key, DatabaseGenerated(DatabaseGeneratedOption.Identity)]   Which means attribute “Id” of the model is primary key and it is a identity column.   [ForeignKey(“TrainerId”)] means TrainerId is a Foreign key of Trainer. This two are called data annotation. You will know more about data annotation. I will write another article on data annotation soon.   Step 4: Change Connection String   Create a database name “TMSDB” and change connection string like following   &lt;add name=\"TMSContext\" connectionString=\"Data Source=.\\sqlexpress;Initial Catalog=TMSDB;Integrated Security=SSPI;\" providerName=\"System.Data.SqlClient\" /&gt;   Step 5: Create Controller and View using “Scaffold”     Open Package Manager Console (Tools-&gt; Library Package Manager –&gt; Package Manager Console)   Type the following command to Package Manager Console.   PM&gt; Scaffold Controller Trainer PM&gt; Scaffold Controller Training   After running the above command, TrainersController, TrainingController and their corresponding view will be created.   Step 6: Modify Contex and Layout.      Modify TMSContext.cs file like following   using System; using System.Collections.Generic; using System.Data.Entity; using System.Linq; using System.Web;   namespace TMS.Models {     public class TMSContext : DbContext     {         // You can add custom code to this file. Changes will not be overwritten.         //         // If you want Entity Framework to drop and regenerate your database         // automatically whenever you change your model schema, add the following         // code to the Application_Start method in your Global.asax file.         // Note: this will destroy and re-create your database with every model change.         //         // System.Data.Entity.Database.SetInitializer(new System.Data.Entity.DropCreateDatabaseIfModelChanges());                  //Added for customized connection string \"TMSContext\"         public TMSContext()         : base(\"TMSContext\")         {         }                  public DbSet UserProfiles { get; set; } //Added DbSet                  public DbSet Trainers { get; set; } //Auto generated by scaffolding                  public DbSet Trainings { get; set; } //Auto generated by scaffolding     } }    Build the application you will find error. So, replace UsersContext by TMSContext and build again. Now it builds successfully.   Added the marked two line in the _Layout.cshtml page (Views-&gt;Shared-&gt;_Layout.cshtml)   &lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt;     &lt;head&gt;         &lt;meta charset=\"utf-8\" /&gt;         &lt;title&gt;@ViewBag.Title - My ASP.NET MVC Application&lt;/title&gt;         &lt;link href=\"~/favicon.ico\" rel=\"shortcut icon\" type=\"image/x-icon\" /&gt;         &lt;meta name=\"viewport\" content=\"width=device-width\" /&gt;         @Styles.Render(\"~/Content/css\")         @Scripts.Render(\"~/bundles/modernizr\")     &lt;/head&gt;     &lt;body&gt;         &lt;header&gt;             &lt;div class=\"content-wrapper\"&gt;                 &lt;div class=\"float-left\"&gt;                     &lt;p class=\"site-title\"&gt;@Html.ActionLink(\"your logo here\", \"Index\", \"Home\")&lt;/p&gt;                 &lt;/div&gt;                 &lt;div class=\"float-right\"&gt;                     &lt;section id=\"login\"&gt;                         @Html.Partial(\"_LoginPartial\")                     &lt;/section&gt;                     &lt;nav&gt;                         &lt;ul id=\"menu\"&gt;                             &lt;li&gt;@Html.ActionLink(\"Home\", \"Index\", \"Home\")&lt;/li&gt;                             &lt;li&gt;@Html.ActionLink(\"About\", \"About\", \"Home\")&lt;/li&gt;                             &lt;li&gt;@Html.ActionLink(\"Contact\", \"Contact\", \"Home\")&lt;/li&gt;                                                          &lt;li&gt;@Html.ActionLink(\"Trainer Information\", \"Index\", \"Trainers\")&lt;/li&gt;                             &lt;li&gt;@Html.ActionLink(\"Training Information\", \"Index\", \"Trainings\")&lt;/li&gt;                          &lt;/ul&gt;                     &lt;/nav&gt;                 &lt;/div&gt;             &lt;/div&gt;         &lt;/header&gt;         &lt;div id=\"body\"&gt;             @RenderSection(\"featured\", required: false)             &lt;section class=\"content-wrapper main-content clear-fix\"&gt;                 @RenderBody()             &lt;/section&gt;         &lt;/div&gt;         &lt;footer&gt;             &lt;div class=\"content-wrapper\"&gt;                 &lt;div class=\"float-left\"&gt;                     &lt;p&gt;&amp;copy; @DateTime.Now.Year - My ASP.NET MVC Application&lt;/p&gt;                 &lt;/div&gt;             &lt;/div&gt;         &lt;/footer&gt;          @Scripts.Render(\"~/bundles/jquery\")         @RenderSection(\"scripts\", required: false)     &lt;/body&gt; &lt;/html&gt;   Step 7: Add migration and update database Run the following command in the package manager console.   PM&gt; Enable-Migrations PM&gt; Add-Migration initialmigration PM&gt; Update-Database –Verbose   After running the above the command, database table will be created in the metioned database.   Now your project is ready. Run your project and go to the Trainer and Training information link and you can View, insert, update and delete an entry. Let’s try. Yes it’s working. Thanks for your patient! 🙂   Source code    ","categories": ["ASP.NET MVC","EF","C#"],
        "tags": ["aspnetmvc","ef","csharp"],
        "url": "http://localhost:4000/a-simple-application-with-asp-net-mvc-4-with-ef-6-code-first-and-scaffolding/",
        "teaser":null},{
        "title": "A Mini SPA with ASP.NET MVC and AngularJS",
        "excerpt":"SPA stands for Single Page Application; I think you already have little idea on it. Here I will demonstrate a mini SPA with ASP.NET MVC and AngularJS. So, let’s start.   Step 1: Create a ASP.NET MVC application with empty template      Open visual studio, Got to File-&gt;New-&gt;Project   Select Template -&gt; Visual C# -&gt; Web -&gt; ASP.NET MVC 4 Web application and click OK   Select Empty Template and Razor as view engine   Step 2: Install required packages      Run the following command in Package Manager Console (Tools-&gt;Library Package Manager-&gt;Package Manager Console) to install required package.   Make sure your internet connection is enabled.   PM&gt; Install-Package jQuery PM&gt; Install-Package angularjs -Version 1.0.7 PM&gt; Install-Package Newtonsoft.Json   Step 3: Create View model  In this application I will try to demonstrate two pages for Trainer and Training. For this purpose, create TrainerVM, TrainingVM, RegistrationVm view model in Model folder. JSONBuilder is a class in Model folder which make model as json serialized.   public class TrainingVm {     public string TrainingCode { get; set; }     public string Title { get; set; }     public string Trainer { get; set; } }    public class TrainerVm {     public string Name { get; set; }     public string Email { get; set; }     public string Venue { get; set; } }    public class RegistrationVm {     public string Trainings { get; set; }     public string Trainers { get; set; } }      public class JSONBuilder {     public RegistrationVm BuildRegistrationVm()     {         var registrationVm = new RegistrationVm         {             Trainings = GetSerializedTraining(),             Trainers = GetSerializedTrainers()         };          return registrationVm;     }      public string GetSerializedTraining()     {         var trainings = new[]             {                 new TrainingVm {TrainingCode = \"TRA001\", Title = \"ASP.NET MVC 4\", Trainer=\"Mahedee Hasan\"},                 new TrainingVm {TrainingCode = \"TRA002\", Title = \"ASP.NET Web Form\", Trainer=\"Asrafuzzaman\"},                 new TrainingVm {TrainingCode = \"TRA003\", Title = \"AngularJs Fundamental\", Trainer=\"Foysal Alam\"},                 new TrainingVm {TrainingCode = \"TRA004\", Title = \"ASP.NET MVC 5 with web API\", Trainer=\"Asfaquzzaman\"},             };         var settings = new JsonSerializerSettings { ContractResolver = new CamelCasePropertyNamesContractResolver() };         var serializeCourses = JsonConvert.SerializeObject(trainings, Formatting.None, settings);         return serializeCourses;     }       public string GetSerializedTrainers()     {         var trainers = new[]             {                 new TrainerVm {Name = \"Mahedee Hasan\", Email = \"mahedee.hasan@gmail.com\", Venue=\"Leadsoft Bangladesh Ltd\"},                 new TrainerVm {Name = \"Asrafuzzaman\", Email = \"asraf@gmail.com\", Venue=\"Leadsoft Bangladesh Ltd\"},                 new TrainerVm {Name = \"Foysal Alam\", Email = \"foysal@gmail.com\", Venue=\"Leadsoft Bangladesh Ltd\"},                 new TrainerVm {Name = \"Asfaquzzaman\", Email = \"asfaq@gmail.com\", Venue=\"Leadsoft Bangladesh Ltd\"},             };         var settings = new JsonSerializerSettings { ContractResolver = new CamelCasePropertyNamesContractResolver() };         var serializedInstructors = JsonConvert.SerializeObject(trainers, Formatting.None, settings);         return serializedInstructors;     } }   Step 4: Create a RegistrationController in controller folder   public class RegistrationController : Controller {     private JSONBuilder jsonBuilder = new JSONBuilder();      public ActionResult Index()     {         return View(jsonBuilder.BuildRegistrationVm());     }  }   Step 5: Create TrainingController and TrainerController     Create TrainingsController.js and TrainersController.js in Scripts-&gt;Application-&gt;Controllers folder   TrainersController.js   'use strict';   registrationModule.controller(\"TrainersController\", function ($scope, registrationData) {     $scope.trainers = registrationData.trainers; });    TrainingsController.js   'use strict';   registrationModule.controller(\"TrainingsController\", function ($scope, registrationData) {     $scope.trainings = registrationData.trainings; });   I will define registrationModule and registrationData in next steps.   Step 6: Create registrationModule     Create registrationModule.js in Scripts-&gt;Application. This is the configuration file for angular routing in client side.   var registrationModule = angular.module(\"registrationModule\", [])     .config(function ($routeProvider, $locationProvider) {         $routeProvider.when('/Registration/Trainings', {             templateUrl: '/templates/Trainings.html',             controller: 'TrainingsController'         });           $routeProvider.when('/Registration/Trainers', {             templateUrl: '/templates/trainers.html',             controller: 'TrainersController'         });           $locationProvider.html5Mode(true);     });    Here you might see that I map template and controller on corresponding routing. But I didn’t declare template yet. I will declare template in next steps.   Step 7: Create a layout page     Create a layout page in Views-&gt; Shared -&gt;_Layout.cshtml and add reference of angularjs, jquery and registration module.   &lt;html ng-app=\"registrationModule\"&gt;     &lt;head&gt;         &lt;script src=\"~/Scripts/angular.min.js\"&gt;&lt;/script&gt;         &lt;script src=\"~/Scripts/jquery-2.1.1.js\"&gt;&lt;/script&gt;         &lt;script src=\"~/Scripts/Application/registrationModule.js\"&gt;&lt;/script&gt;           &lt;title&gt;Training Registration&lt;/title&gt;         @RenderSection(\"JavascriptInHead\", required:false)     &lt;/head&gt;     &lt;body&gt;         @RenderBody()     &lt;/body&gt; &lt;/html&gt;   Step 8: Create Index view     Right click on Index action of Registration controller and add a view. Modify the view as follows.   @model MiniSPA.Models.RegistrationVm   @{     ViewBag.Title = \"Training Regirstration\";     Layout = \"~/Views/Shared/_Layout.cshtml\"; }   @section JavascriptInHead {     &lt;script src=\"~/Scripts/Application/Controllers/TrainersController.js\"&gt;&lt;/script&gt;     &lt;script src=\"~/Scripts/Application/Controllers/TrainingsController.js\"&gt;&lt;/script&gt;     &lt;script type=\"text/javascript\"&gt;         registrationModule.factory('registrationData', function() {             return {                 trainings: @Html.Raw(Model.Trainings),                 trainers: @Html.Raw(Model.Trainers)                 };         });     &lt;/script&gt; }   &lt;div&gt;     &lt;div&gt;         &lt;div&gt;             &lt;div&gt;                 &lt;ul&gt;                     &lt;li&gt;&lt;span&gt;Training Registration&lt;/span&gt;&lt;/li&gt;                 &lt;/ul&gt;             &lt;/div&gt;             &lt;div&gt;                 &lt;ul&gt;                     &lt;li&gt;&lt;a href=\"/Registration/Trainings\"&gt;Trainings Details&lt;/a&gt;&lt;/li&gt;                     &lt;li&gt;&lt;a href=\"/Registration/Trainers\"&gt;Trainer Details&lt;/a&gt;&lt;/li&gt;                 &lt;/ul&gt;             &lt;/div&gt;         &lt;/div&gt;     &lt;/div&gt;     &lt;div ng-view&gt;&lt;/div&gt; &lt;/div&gt;    Step 9: Create template     Create training.html and trainer.html in templates folder as follows   Trainer.html   &lt;div class=\"row\"&gt;      &lt;div class=\"span10\"&gt;          &lt;h2&gt;Instructors&lt;/h2&gt;      &lt;/div&gt;  &lt;/div&gt;  &lt;div class=\"row\"&gt;      &lt;div class=\"span10\"&gt;          &lt;table class=\"table table-condensed table-hover\"&gt;              &lt;tr&gt;                  &lt;th&gt;Trainer Name&lt;/th&gt;                  &lt;th&gt;Email&lt;/th&gt;                  &lt;th&gt;Venue&lt;/th&gt;              &lt;/tr&gt;              &lt;tr ng-repeat=\"trainer in trainers\"&gt;                  &lt;td&gt;&lt;/td&gt;                  &lt;td&gt;&lt;/td&gt;                  &lt;td&gt;&lt;/td&gt;              &lt;/tr&gt;          &lt;/table&gt;      &lt;/div&gt;  &lt;/div&gt;   Training.html   &lt;div&gt;         &lt;div&gt;             &lt;h2&gt;Training Details&lt;/h2&gt;         &lt;/div&gt;     &lt;/div&gt;     &lt;div&gt;         &lt;div&gt;             &lt;table&gt;                 &lt;tr&gt;                     &lt;th&gt;Training Code&lt;/th&gt;                     &lt;th&gt;Training Title&lt;/th&gt;                     &lt;th&gt;Trainer Name&lt;/th&gt;                 &lt;/tr&gt;                 &lt;tr ng-repeat=\"training in trainings\"&gt;                     &lt;td&gt;&lt;/td&gt;                     &lt;td&gt;&lt;/td&gt;                     &lt;td&gt;&lt;/td&gt;                 &lt;/tr&gt;             &lt;/table&gt;         &lt;/div&gt;     &lt;/div&gt;    Step 10: Modify RouteConfig.cs     Modify the RouteConfig.cs as follows for routing Registration controller default and catching all other parameter.   public class RouteConfig {     public static void RegisterRoutes(RouteCollection routes)     {         routes.IgnoreRoute(\"{resource}.axd/{*pathInfo}\");          routes.MapRoute(         name: \"Mini SPA\",         url: \"Registration/{*catchall}\",         defaults: new { controller = \"Registration\", action = \"Index\", id = UrlParameter.Optional }         );           routes.MapRoute(             name: \"Default\",             url: \"{controller}/{action}/{id}\",             defaults: new { controller = \"Registration\", action = \"Index\", id = UrlParameter.Optional }         );     } }   This structure is not best. So it is not recommended for large application. For large application use service. Hope, I will publish a complete SPA soon. Thanks for your patient!   Source code    ","categories": ["ASP.NET MVC","JavaScript","Angular","C#","Web API"],
        "tags": ["aspnetmvc","javascript","Angular","csharp","webapi"],
        "url": "http://localhost:4000/a-mini-spa-with-asp-net-mvc-and-angularjs-copy/",
        "teaser":null},{
        "title": "A Mini SPA with ASP.NET MVC and AngularJS",
        "excerpt":"SPA stands for Single Page Application; I think you already have little idea on it. Here I will demonstrate a mini SPA with ASP.NET MVC and AngularJS. So, let’s start.   Step 1: Create a ASP.NET MVC application with empty template      Open visual studio, Got to File-&gt;New-&gt;Project   Select Template -&gt; Visual C# -&gt; Web -&gt; ASP.NET MVC 4 Web application and click OK   Select Empty Template and Razor as view engine   Step 2: Install required packages      Run the following command in Package Manager Console (Tools-&gt;Library Package Manager-&gt;Package Manager Console) to install required package.   Make sure your internet connection is enabled.   PM&gt; Install-Package jQuery PM&gt; Install-Package angularjs -Version 1.0.7 PM&gt; Install-Package Newtonsoft.Json   Step 3: Create View model  In this application I will try to demonstrate two pages for Trainer and Training. For this purpose, create TrainerVM, TrainingVM, RegistrationVm view model in Model folder. JSONBuilder is a class in Model folder which make model as json serialized.   public class TrainingVm {     public string TrainingCode { get; set; }     public string Title { get; set; }     public string Trainer { get; set; } }    public class TrainerVm {     public string Name { get; set; }     public string Email { get; set; }     public string Venue { get; set; } }    public class RegistrationVm {     public string Trainings { get; set; }     public string Trainers { get; set; } }      public class JSONBuilder {     public RegistrationVm BuildRegistrationVm()     {         var registrationVm = new RegistrationVm         {             Trainings = GetSerializedTraining(),             Trainers = GetSerializedTrainers()         };          return registrationVm;     }      public string GetSerializedTraining()     {         var trainings = new[]             {                 new TrainingVm {TrainingCode = \"TRA001\", Title = \"ASP.NET MVC 4\", Trainer=\"Mahedee Hasan\"},                 new TrainingVm {TrainingCode = \"TRA002\", Title = \"ASP.NET Web Form\", Trainer=\"Asrafuzzaman\"},                 new TrainingVm {TrainingCode = \"TRA003\", Title = \"AngularJs Fundamental\", Trainer=\"Foysal Alam\"},                 new TrainingVm {TrainingCode = \"TRA004\", Title = \"ASP.NET MVC 5 with web API\", Trainer=\"Asfaquzzaman\"},             };         var settings = new JsonSerializerSettings { ContractResolver = new CamelCasePropertyNamesContractResolver() };         var serializeCourses = JsonConvert.SerializeObject(trainings, Formatting.None, settings);         return serializeCourses;     }       public string GetSerializedTrainers()     {         var trainers = new[]             {                 new TrainerVm {Name = \"Mahedee Hasan\", Email = \"mahedee.hasan@gmail.com\", Venue=\"Leadsoft Bangladesh Ltd\"},                 new TrainerVm {Name = \"Asrafuzzaman\", Email = \"asraf@gmail.com\", Venue=\"Leadsoft Bangladesh Ltd\"},                 new TrainerVm {Name = \"Foysal Alam\", Email = \"foysal@gmail.com\", Venue=\"Leadsoft Bangladesh Ltd\"},                 new TrainerVm {Name = \"Asfaquzzaman\", Email = \"asfaq@gmail.com\", Venue=\"Leadsoft Bangladesh Ltd\"},             };         var settings = new JsonSerializerSettings { ContractResolver = new CamelCasePropertyNamesContractResolver() };         var serializedInstructors = JsonConvert.SerializeObject(trainers, Formatting.None, settings);         return serializedInstructors;     } }   Step 4: Create a RegistrationController in controller folder   public class RegistrationController : Controller {     private JSONBuilder jsonBuilder = new JSONBuilder();      public ActionResult Index()     {         return View(jsonBuilder.BuildRegistrationVm());     }  }   Step 5: Create TrainingController and TrainerController     Create TrainingsController.js and TrainersController.js in Scripts-&gt;Application-&gt;Controllers folder   TrainersController.js   'use strict';   registrationModule.controller(\"TrainersController\", function ($scope, registrationData) {     $scope.trainers = registrationData.trainers; });    TrainingsController.js   'use strict';   registrationModule.controller(\"TrainingsController\", function ($scope, registrationData) {     $scope.trainings = registrationData.trainings; });   I will define registrationModule and registrationData in next steps.   Step 6: Create registrationModule     Create registrationModule.js in Scripts-&gt;Application. This is the configuration file for angular routing in client side.   var registrationModule = angular.module(\"registrationModule\", [])     .config(function ($routeProvider, $locationProvider) {         $routeProvider.when('/Registration/Trainings', {             templateUrl: '/templates/Trainings.html',             controller: 'TrainingsController'         });           $routeProvider.when('/Registration/Trainers', {             templateUrl: '/templates/trainers.html',             controller: 'TrainersController'         });           $locationProvider.html5Mode(true);     });    Here you might see that I map template and controller on corresponding routing. But I didn’t declare template yet. I will declare template in next steps.   Step 7: Create a layout page     Create a layout page in Views-&gt; Shared -&gt;_Layout.cshtml and add reference of angularjs, jquery and registration module.   &lt;html ng-app=\"registrationModule\"&gt;     &lt;head&gt;         &lt;script src=\"~/Scripts/angular.min.js\"&gt;&lt;/script&gt;         &lt;script src=\"~/Scripts/jquery-2.1.1.js\"&gt;&lt;/script&gt;         &lt;script src=\"~/Scripts/Application/registrationModule.js\"&gt;&lt;/script&gt;           &lt;title&gt;Training Registration&lt;/title&gt;         @RenderSection(\"JavascriptInHead\", required:false)     &lt;/head&gt;     &lt;body&gt;         @RenderBody()     &lt;/body&gt; &lt;/html&gt;   Step 8: Create Index view     Right click on Index action of Registration controller and add a view. Modify the view as follows.   @model MiniSPA.Models.RegistrationVm   @{     ViewBag.Title = \"Training Regirstration\";     Layout = \"~/Views/Shared/_Layout.cshtml\"; }   @section JavascriptInHead {     &lt;script src=\"~/Scripts/Application/Controllers/TrainersController.js\"&gt;&lt;/script&gt;     &lt;script src=\"~/Scripts/Application/Controllers/TrainingsController.js\"&gt;&lt;/script&gt;     &lt;script type=\"text/javascript\"&gt;         registrationModule.factory('registrationData', function() {             return {                 trainings: @Html.Raw(Model.Trainings),                 trainers: @Html.Raw(Model.Trainers)                 };         });     &lt;/script&gt; }   &lt;div&gt;     &lt;div&gt;         &lt;div&gt;             &lt;div&gt;                 &lt;ul&gt;                     &lt;li&gt;&lt;span&gt;Training Registration&lt;/span&gt;&lt;/li&gt;                 &lt;/ul&gt;             &lt;/div&gt;             &lt;div&gt;                 &lt;ul&gt;                     &lt;li&gt;&lt;a href=\"/Registration/Trainings\"&gt;Trainings Details&lt;/a&gt;&lt;/li&gt;                     &lt;li&gt;&lt;a href=\"/Registration/Trainers\"&gt;Trainer Details&lt;/a&gt;&lt;/li&gt;                 &lt;/ul&gt;             &lt;/div&gt;         &lt;/div&gt;     &lt;/div&gt;     &lt;div ng-view&gt;&lt;/div&gt; &lt;/div&gt;    Step 9: Create template     Create training.html and trainer.html in templates folder as follows   Trainer.html   &lt;div class=\"row\"&gt;      &lt;div class=\"span10\"&gt;          &lt;h2&gt;Instructors&lt;/h2&gt;      &lt;/div&gt;  &lt;/div&gt;  &lt;div class=\"row\"&gt;      &lt;div class=\"span10\"&gt;          &lt;table class=\"table table-condensed table-hover\"&gt;              &lt;tr&gt;                  &lt;th&gt;Trainer Name&lt;/th&gt;                  &lt;th&gt;Email&lt;/th&gt;                  &lt;th&gt;Venue&lt;/th&gt;              &lt;/tr&gt;              &lt;tr ng-repeat=\"trainer in trainers\"&gt;                  &lt;td&gt;&lt;/td&gt;                  &lt;td&gt;&lt;/td&gt;                  &lt;td&gt;&lt;/td&gt;              &lt;/tr&gt;          &lt;/table&gt;      &lt;/div&gt;  &lt;/div&gt;   Training.html   &lt;div&gt;         &lt;div&gt;             &lt;h2&gt;Training Details&lt;/h2&gt;         &lt;/div&gt;     &lt;/div&gt;     &lt;div&gt;         &lt;div&gt;             &lt;table&gt;                 &lt;tr&gt;                     &lt;th&gt;Training Code&lt;/th&gt;                     &lt;th&gt;Training Title&lt;/th&gt;                     &lt;th&gt;Trainer Name&lt;/th&gt;                 &lt;/tr&gt;                 &lt;tr ng-repeat=\"training in trainings\"&gt;                     &lt;td&gt;&lt;/td&gt;                     &lt;td&gt;&lt;/td&gt;                     &lt;td&gt;&lt;/td&gt;                 &lt;/tr&gt;             &lt;/table&gt;         &lt;/div&gt;     &lt;/div&gt;    Step 10: Modify RouteConfig.cs     Modify the RouteConfig.cs as follows for routing Registration controller default and catching all other parameter.   public class RouteConfig {     public static void RegisterRoutes(RouteCollection routes)     {         routes.IgnoreRoute(\"{resource}.axd/{*pathInfo}\");          routes.MapRoute(         name: \"Mini SPA\",         url: \"Registration/{*catchall}\",         defaults: new { controller = \"Registration\", action = \"Index\", id = UrlParameter.Optional }         );           routes.MapRoute(             name: \"Default\",             url: \"{controller}/{action}/{id}\",             defaults: new { controller = \"Registration\", action = \"Index\", id = UrlParameter.Optional }         );     } }   This structure is not best. So it is not recommended for large application. For large application use service. Hope, I will publish a complete SPA soon. Thanks for your patient!   Source code    ","categories": ["ASP.NET MVC","JavaScript","Angular","C#","Web API"],
        "tags": ["aspnetmvc","javascript","Angular","csharp","webapi"],
        "url": "http://localhost:4000/a-mini-spa-with-asp-net-mvc-and-angularjs/",
        "teaser":null},{
        "title": "A Simple SPA with AngularJs, ASP.NET MVC, Web API And EF",
        "excerpt":"SPA stands for Single Page Application. Here I will demonstrate a simple SPA with ASP.NET MVC, Web API and Entity Framework. I will show a trainer profile and its CRUD operation using AngularJS, ASP.NET MVC, Web api and Entity Framework.   Step 1: Create a ASP.NET MVC application with empty template      Open visual studio, Got to File-&gt;New-&gt;Project   Select Template -&gt; Visual C# -&gt; Web -&gt; ASP.NET MVC 4 Web application and click OK   Select Empty Template and Razor as view engine   Step 2: Install required nuget packages     Run the following command in Package Manager Console (Tools-&gt;Library Package Manager-&gt;Package Manager Console) to install required package.   Make sure your internet connection is enabled.   PM&gt; Install-Package jQuery PM&gt; Install-Package angularjs -Version 1.2.26 PM&gt; Install-Package Newtonsoft.Json PM&gt; Install-Package MvcScaffolding   Step 3: Create Connection String  Create connection string and name DB name as SPADB   &lt;connectionStrings&gt;   &lt;add name=\"SPAContext\" connectionString=\"Data Source=.\\sqlexpress;Initial Catalog=SPADB;Integrated Security=SSPI;\" providerName=\"System.Data.SqlClient\" /&gt; &lt;/connectionStrings&gt;   Step 4: Create model class      Create Trainer model   public class Trainer {     [Key, DatabaseGenerated(DatabaseGeneratedOption.Identity)]     public long Id { get; set; }     public string Name { get; set; }     public string Email { get; set; }     public string Venue { get; set; } }   Step 5: Create Repository     Create repository for Trainer model.   Run the following command in Package Manager Console (Tools-&gt;Library Package Manager-&gt;Package Manager Console) to create repository.   I used repository pattern for well-structured and more manageable.   PM&gt; Scaffold Repository Trainer   After running the above command you will see SPAContext.cs and TrainerRepository.cs created in Model folder. For well manageability, I create a directory name Repository and put these two files in the Repository folder. So change the namespace as like SPA.Repository instead of SPA.Model. I also create a UnitOfWork for implement unit of work pattern.   The overall folder structure looks like below.      SPAContext.cs    public class SPAContext : DbContext {     public SPAContext()         : base(\"SPAContext\")     {     }     // You can add custom code to this file. Changes will not be overwritten.     //      // If you want Entity Framework to drop and regenerate your database     // automatically whenever you change your model schema, add the following     // code to the Application_Start method in your Global.asax file.     // Note: this will destroy and re-create your database with every model change.     //      // System.Data.Entity.Database.SetInitializer(new System.Data.Entity.DropCreateDatabaseIfModelChanges&lt;SPA.Models.SPAContext&gt;());       public DbSet&lt;SPA.Models.Trainer&gt; Trainers { get; set; }       public DbSet&lt;SPA.Models.Training&gt; Trainings { get; set; } }    TrainerRepository.cs   public class TrainerRepository : ITrainerRepository {     SPAContext context = new SPAContext();       public TrainerRepository()         : this(new SPAContext())     {       }     public TrainerRepository(SPAContext context)     {         this.context = context;     }         public IQueryable&lt;Trainer&gt; All     {         get { return context.Trainers; }     }       public IQueryable&lt;Trainer&gt; AllIncluding(params Expression&lt;Func&lt;Trainer, object&gt;&gt;[] includeProperties)     {         IQueryable&lt;Trainer&gt; query = context.Trainers;         foreach (var includeProperty in includeProperties)         {             query = query.Include(includeProperty);         }         return query;     }       public Trainer Find(long id)     {         return context.Trainers.Find(id);     }       public void InsertOrUpdate(Trainer trainer)     {         if (trainer.Id == default(long))         {             // New entity             context.Trainers.Add(trainer);         }         else         {             // Existing entity             context.Entry(trainer).State = System.Data.Entity.EntityState.Modified;         }     }       public void Delete(long id)     {         var trainer = context.Trainers.Find(id);         context.Trainers.Remove(trainer);     }       public void Save()     {         context.SaveChanges();     }       public void Dispose()     {         context.Dispose();     } }   public interface ITrainerRepository : IDisposable {     IQueryable&lt;Trainer&gt; All { get; }     IQueryable&lt;Trainer&gt; AllIncluding(params Expression&lt;Func&lt;Trainer, object&gt;&gt;[] includeProperties);     Trainer Find(long id);     void InsertOrUpdate(Trainer trainer);     void Delete(long id);     void Save(); }   UnitOfWork.cs   public class UnitOfWork : IDisposable {     private SPAContext context;     public UnitOfWork()     {         context = new SPAContext();     }       public UnitOfWork(SPAContext _context)     {         this.context = _context;     }       private TrainingRepository _trainingRepository;       public TrainingRepository TrainingRepository     {         get         {               if (this._trainingRepository == null)             {                 this._trainingRepository = new TrainingRepository(context);             }             return _trainingRepository;         }     }         private TrainerRepository _trainerRepository;       public TrainerRepository TrainerRepository     {         get         {               if (this._trainerRepository == null)             {                 this._trainerRepository = new TrainerRepository(context);             }             return _trainerRepository;         }     }       public void Dispose()     {         context.Dispose();         GC.SuppressFinalize(this);     } }    Step 6: Add migration      Run the following command to add migration   PM&gt; Enable-Migrations PM&gt; Add-Migration initialmigration PM&gt; Update-Database –Verbose   Step 7: Create API Controllers     Create Trainers api Controllers by clicking right button on Controller folder   Choose API controller with empty read/write actions as scaffolding template   Click Add button.   Step 8: Modify Controllers      Now modify the controllers as follows. Here I used unit of work pattern.   public class TrainersController : ApiController {     private UnitOfWork unitOfWork = new UnitOfWork();       public IEnumerable&lt;Trainer&gt; Get()     {         List&lt;Trainer&gt; lstTrainer = new List&lt;Trainer&gt;();         lstTrainer = unitOfWork.TrainerRepository.All.ToList();         return lstTrainer;     }       //// GET api/trainers/5     public Trainer Get(int id)     {         Trainer objTrainer = unitOfWork.TrainerRepository.Find(id);         return objTrainer;     }         public HttpResponseMessage Post(Trainer trainer)     {           if (ModelState.IsValid)         {             unitOfWork.TrainerRepository.InsertOrUpdate(trainer);             unitOfWork.TrainerRepository.Save();             return new HttpResponseMessage(HttpStatusCode.OK);         }         return new HttpResponseMessage(HttpStatusCode.InternalServerError);     }         private IEnumerable&lt;string&gt; GetErrorMessages()     {         return ModelState.Values.SelectMany(x =&gt; x.Errors.Select(e =&gt; e.ErrorMessage));     }           // PUT api/trainers/5     public HttpResponseMessage Put(int Id, Trainer trainer)     {         if (ModelState.IsValid)         {             unitOfWork.TrainerRepository.InsertOrUpdate(trainer);             unitOfWork.TrainerRepository.Save();             return new HttpResponseMessage(HttpStatusCode.OK);         }         else             return new HttpResponseMessage(HttpStatusCode.InternalServerError);     }       // DELETE api/trainers/5     public HttpResponseMessage Delete(int id)     {         Trainer objTrainer = unitOfWork.TrainerRepository.Find(id);         if (objTrainer == null)         {             return new HttpResponseMessage(HttpStatusCode.InternalServerError);         }           unitOfWork.TrainerRepository.Delete(id);         unitOfWork.TrainerRepository.Save();           return new HttpResponseMessage(HttpStatusCode.OK);     } }    Step 9: Create Layout and Home Controller     Create _Layout.cshtml in Views-&gt;Shared folder   Create HomeController and create inext view of Home controller by right click on index action and add view. You will see index.cshtml is created in Views-&gt;Home   HomeController.cs   public class HomeController : Controller {     //     // GET: /Home/       public ActionResult Index()     {         return View();     }   }    _Layout.cshtml   &lt;html ng-app=\"registrationModule\"&gt; &lt;head&gt;     &lt;title&gt;Training Registration&lt;/title&gt;   &lt;/head&gt; &lt;body&gt;     @RenderBody() &lt;/body&gt; &lt;/html&gt;   Index.cshtml   @{     ViewBag.Title = \"Home\";     Layout = \"~/Views/Shared/_Layout.cshtml\"; }   &lt;h2&gt;Home&lt;/h2&gt;   &lt;div&gt;     &lt;ul&gt;               &lt;li&gt;&lt;a href=\"/Registration/Trainers\"&gt;Trainer Details&lt;/a&gt;&lt;/li&gt;         &lt;li&gt;&lt;a href=\"/Registration/Trainers/add\"&gt;Add New Trainer&lt;/a&gt;&lt;/li&gt;     &lt;/ul&gt; &lt;/div&gt; &lt;div ng-view&gt;&lt;/div&gt;    Step 10: Create registrationModule      Create registrationModule.js in Scripts-&gt;Application. This is for angularjs routing.   var registrationModule = angular.module(\"registrationModule\", ['ngRoute', 'ngResource'])     .config(function ($routeProvider, $locationProvider) {           $routeProvider.when('/Registration/Trainers', {             templateUrl: '/templates/trainers/all.html',             controller: 'listTrainersController'         });           $routeProvider.when('/Registration/Trainers/:id', {             templateUrl: '/templates/trainers/edit.html',             controller: 'editTrainersController'         });           $routeProvider.when('/Registration/Trainers/add', {             templateUrl: '/templates/trainers/add.html',             controller: 'addTrainersController'         });           $routeProvider.when(\"/Registration/Trainers/delete/:id\", {             controller: \"deleteTrainersController\",             templateUrl: \"/templates/trainers/delete.html\"         });           $locationProvider.html5Mode(true);     });    Step 11: Create trainerRepository      Create trainerRepository.js in Scripts-&gt;Application-&gt;Repository. This increase manageability for large application.    'use strict';   //Repository for trainer information registrationModule.factory('trainerRepository', function ($resource) {       return {         get: function () {             return $resource('/api/Trainers').query();         },           getById: function (id) {             return $resource('/api/Trainers/:Id', { Id: id }).get();         },           save: function (trainer) {             return $resource('/api/Trainers').save(trainer);         },           put: function (trainer) {             return $resource('/api/Trainers', { Id: trainer.id },                 {                     update: { method: 'PUT' }                 }).update(trainer);         },           remove: function (id) {             return $resource('/api/Trainers').remove({ Id: id });         }     };   });    Step 12: Create trainerController      Create trainerController.js in Scripts-&gt;Application-&gt;Controllers   'use strict';   //Controller to get list of trainers informaion registrationModule.controller(\"listTrainersController\", function ($scope, trainerRepository, $location) {     $scope.trainers = trainerRepository.get(); });     //Controller to save trainer information registrationModule.controller(\"addTrainersController\", function ($scope, trainerRepository, $location) {     $scope.save = function (trainer) {         trainer.Id = 0;         $scope.errors = [];         trainerRepository.save(trainer).$promise.then(             function () { $location.url('Registration/Trainers'); },             function (response) { $scope.errors = response.data; });     }; });     //Controller to modify trainer information registrationModule.controller(\"editTrainersController\", function ($scope,$routeParams, trainerRepository, $location) {     $scope.trainer = trainerRepository.getById($routeParams.id);       $scope.update = function (trainer) {         $scope.errors = [];         trainerRepository.put(trainer).$promise.then(             function () { $location.url('Registration/Trainers'); },             function (response) { $scope.errors = response.data; });     }; });   //Controller to delete trainer information registrationModule.controller(\"deleteTrainersController\", function ($scope, $routeParams, trainerRepository, $location) {         trainerRepository.remove($routeParams.id).$promise.then(             function () { $location.url('Registration/Trainers'); },             function (response) { $scope.errors = response.data; }); });    Step 13: Create templates     Create all.html, add.html, edit.html, delete.html in templateds-&gt;trainers folder.   All.html   &lt;div&gt;     &lt;div&gt;         &lt;h2&gt;Trainers Details&lt;/h2&gt;     &lt;/div&gt; &lt;/div&gt; &lt;div&gt;     &lt;div&gt;         &lt;table&gt;             &lt;tr&gt;                 &lt;th&gt;Name &lt;/th&gt;                 &lt;th&gt;Email &lt;/th&gt;                 &lt;th&gt;Venue &lt;/th&gt;                 &lt;th&gt;Action&lt;/th&gt;             &lt;/tr&gt;             &lt;tr ng-repeat=\"trainer in trainers\"&gt;                 &lt;td&gt;&lt;/td&gt;                 &lt;td&gt;&lt;/td&gt;                 &lt;td&gt;&lt;/td&gt;                 &lt;td&gt;                     &lt;a title=\"Delete\" ng-href=\"/Registration/Trainers/delete/\"&gt;Delete&lt;/a&gt;                     |&lt;a title=\"Edit\" ng-href=\"/Registration/Trainers/\"&gt;Edit&lt;/a&gt;                 &lt;/td&gt;             &lt;/tr&gt;         &lt;/table&gt;     &lt;/div&gt; &lt;/div&gt;   Add.html   &lt;form name=\"trainerForm\" novalidate ng-submit=\"save(trainer)\"&gt;     &lt;table&gt;         &lt;tbody&gt;               &lt;tr&gt;                 &lt;td&gt;Trainer Name                 &lt;/td&gt;                 &lt;td&gt;                     &lt;input name=\"name\" type=\"text\" ng-model=\"trainer.name\" required ng-minlength=\"5\" /&gt;                 &lt;/td&gt;             &lt;/tr&gt;             &lt;tr&gt;                 &lt;td&gt;Email                 &lt;/td&gt;                 &lt;td&gt;                     &lt;input name=\"email\" type=\"text\" ng-model=\"trainer.email\" /&gt;                 &lt;/td&gt;             &lt;/tr&gt;             &lt;tr&gt;                 &lt;td&gt;Venue                 &lt;/td&gt;                 &lt;td&gt;                     &lt;input name=\"venue\" type=\"text\" ng-model=\"trainer.venue\" /&gt;                 &lt;/td&gt;             &lt;/tr&gt;               &lt;tr&gt;                 &lt;td class=\"width30\"&gt;&lt;/td&gt;                 &lt;td&gt;                     &lt;input type=\"submit\" value=\"Save\" ng-disabled=\"trainerForm.$invalid\" /&gt;                     &lt;a href=\"/Registration/Trainers\" class=\"btn btn-inverse\"&gt;Cancel&lt;/a&gt;                 &lt;/td&gt;             &lt;/tr&gt;         &lt;/tbody&gt;     &lt;/table&gt; &lt;/form&gt;    Edit.html   &lt;form name=\"trainerFrom\" novalidate abide&gt;     &lt;table&gt;         &lt;tbody&gt;             &lt;tr&gt;                 &lt;td&gt;                     &lt;input name=\"id\" type=\"hidden\" ng-model=\"trainer.id\"/&gt;                 &lt;/td&gt;             &lt;/tr&gt;             &lt;tr&gt;                 &lt;td&gt;Name                 &lt;/td&gt;                 &lt;td&gt;                     &lt;input name=\"name\" type=\"text\" ng-model=\"trainer.name\" /&gt;                 &lt;/td&gt;             &lt;/tr&gt;             &lt;tr&gt;                 &lt;td&gt;Email                 &lt;/td&gt;                 &lt;td&gt;                     &lt;input name=\"email\" type=\"text\" ng-model=\"trainer.email\" /&gt;                 &lt;/td&gt;             &lt;/tr&gt;             &lt;tr&gt;                 &lt;td&gt;Venue                 &lt;/td&gt;                 &lt;td&gt;                     &lt;textarea name=\"venue\" ng-model=\"trainer.venue\"&gt;&lt;/textarea&gt;                 &lt;/td&gt;             &lt;/tr&gt;             &lt;tr&gt;                 &lt;td class=\"width30\"&gt;&lt;/td&gt;                 &lt;td&gt;                     &lt;button type=\"submit\" class=\"btn btn-primary\" ng-click=\"update(trainer)\" ng-disabled=\"trainerFrom.$invalid\"&gt;Update&lt;/button&gt;                   &lt;/td&gt;             &lt;/tr&gt;         &lt;/tbody&gt;     &lt;/table&gt; &lt;/form&gt;    Step 14: Add references to the Layout     Modify the _Layout.cshtml to add references   _Layout.cshtml   &lt;html ng-app=\"registrationModule\"&gt; &lt;head&gt;         &lt;title&gt;Training Registration&lt;/title&gt;       &lt;script src=\"~/Scripts/angular.min.js\"&gt;&lt;/script&gt;     &lt;script src=\"~/Scripts/angular-resource.min.js\"&gt;&lt;/script&gt;     &lt;script src=\"~/Scripts/angular-route.min.js\"&gt;&lt;/script&gt;     &lt;script src=\"~/Scripts/jquery-2.1.1.min.js\"&gt;&lt;/script&gt;     &lt;script src=\"~/Scripts/Application/registrationModule.js\"&gt;&lt;/script&gt;     &lt;script src=\"~/Scripts/Application/Repository/trainerRepository.js\"&gt;&lt;/script&gt;     &lt;script src=\"~/Scripts/Application/Controllers/trainersController.js\"&gt;&lt;/script&gt;   &lt;/head&gt; &lt;body&gt;     @RenderBody() &lt;/body&gt; &lt;/html&gt;    Now run you application and add, delete, modify and get all trainer information. Thanks for your patient!   Source code    ","categories": ["ASP.NET MVC","JavaScript","Angular","C#","EF","Web API"],
        "tags": ["aspnetmvc","javascript","Angular","csharp","ef","webapi"],
        "url": "http://localhost:4000/a-simple-spa-with-angularjs-asp-net-mvc-web-api-and-ef/",
        "teaser":null},{
        "title": "A SignalR Application for Real Time Notification Using AngularJS and Toastr",
        "excerpt":"SignalR is a new developer’s API provided for ASP.NET web applications, used to add “real time” web functionality to ASP.NET applications. “Real Time” web functionality is the ability to have server code to push contents to connected clients.   Uses of SignalR     Notification   Chat application   Real time monitoring application   Job progress update etc.   So, let’s start to create a SignalR Application. In this program I will assign a task for a person and everybody will get notification.   Step 1: Create a ASP.NET MVC application with basic template      Open visual studio, Got to File-&gt;New-&gt;Project   Select Template -&gt; Visual C# -&gt; Web -&gt; ASP.NET MVC 4 Web application and click OK   Select Basic Template and Razor as view engine   Step 2: Install required packages     Install nuget package for SignalR. To install click right button of the project and then click Manages NuGet packages.   Search SignalR and then install “Microsoft ASP.NET SignalR” .   Run the following command in package manager console to install packages   PM&gt; Install-Package angularjs PM&gt; Install-Package toastr  Step 3: Create Startup class      Create a Startup class in project root directory. Create Stratup.cs file and modify as follows.   using Microsoft.Owin; using Owin;   [assembly: OwinStartup(typeof(SignalRApp.Startup))]   namespace SignalRApp {     public class Startup     {         public void Configuration(IAppBuilder app)         {             app.MapSignalR();         }     } }    Step 4: Create signalR hub      Create a SignalR hub name NotificationHub in root directory and inherit Hub class.   Modify the class as follows   using Microsoft.AspNet.SignalR; using Microsoft.AspNet.SignalR.Hubs; using System; using System.Collections.Generic; using System.Linq; using System.Web;   namespace SignalRApp {           [HubName(\"notification\")]     public class NotificationHub : Hub     {          public void PushNotification(string msg)          {              Clients.All.response(msg);          }     } }    Here Clients.All means all user will get notification. It can be configured on the basis of group and individual.   Step 5: Create HomeController and index view   Create a Home controller by right click on controller folder. Create an index view in Views-&gt;Hoome-&gt;index.cshtml by right clicking in index action of Home controller.   HomeController.cs   using System; using System.Collections.Generic; using System.Linq; using System.Web; using System.Web.Mvc;   namespace SignalRApp.Controllers {     public class HomeController : Controller     {         //         // GET: /Home/           public ActionResult Index()         {             return View();         }       } }    Index.cshtml    @{     ViewBag.Title = \"Index\";     Layout = \"~/Views/Shared/_Layout.cshtml\"; }   &lt;h2&gt;Please entry a task&lt;/h2&gt; &lt;form name =\"taskForm\" id=\"taskformid\" ng-controller=\"mainController\"&gt;     Enter a Task:    &lt;input name=\"txtTask\" id=\"txtTask\" type=\"text\" /&gt;    &lt;button ng-click=\"sendMessage()\"&gt;Send&lt;/button&gt; &lt;/form&gt;    Here mainController and sendMessage() is declared. I will define it later.   Step 6: Change bundle config      Change BundleConfig and add customScripts, angular, signalr, jquery, toastr buddle as follows.   public class BundleConfig {     // For more information on Bundling, visit http://go.microsoft.com/fwlink/?LinkId=254725     public static void RegisterBundles(BundleCollection bundles)     {         bundles.Add(new ScriptBundle(\"~/bundles/customScripts\").Include(                   \"~/Scripts/Application/app.js\",                   \"~/Scripts/Application/mainController.js\"));             bundles.Add(new ScriptBundle(\"~/bundles/angular\").Include(                    \"~/Scripts/angular.js\"));           bundles.Add(new ScriptBundle(\"~/bundles/signalr\").Include(                    \"~/Scripts/jquery.signalR-2.1.2.js\"));                                 bundles.Add(new ScriptBundle(\"~/bundles/jquery\").Include(                     \"~/Scripts/jquery-{version}.js\"));           bundles.Add(new ScriptBundle(\"~/bundles/jqueryui\").Include(                     \"~/Scripts/jquery-ui-{version}.js\"));           bundles.Add(new ScriptBundle(\"~/bundles/jqueryval\").Include(                     \"~/Scripts/jquery.unobtrusive*\",                     \"~/Scripts/jquery.validate*\"));             bundles.Add(new ScriptBundle(\"~/bundles/toastr\").Include(                     \"~/Scripts/toastr.js*\"));           // Use the development version of Modernizr to develop with and learn from. Then, when you're         // ready for production, use the build tool at http://modernizr.com to pick only the tests you need.         bundles.Add(new ScriptBundle(\"~/bundles/modernizr\").Include(                     \"~/Scripts/modernizr-*\"));           //bundles.Add(new StyleBundle(\"~/Content/css\").Include(\"~/Content/site.css\"));           bundles.Add(new StyleBundle(\"~/Content/themes/base/css\").Include(                     \"~/Content/themes/base/jquery.ui.core.css\",                     \"~/Content/themes/base/jquery.ui.resizable.css\",                     \"~/Content/themes/base/jquery.ui.selectable.css\",                     \"~/Content/themes/base/jquery.ui.accordion.css\",                     \"~/Content/themes/base/jquery.ui.autocomplete.css\",                     \"~/Content/themes/base/jquery.ui.button.css\",                     \"~/Content/themes/base/jquery.ui.dialog.css\",                     \"~/Content/themes/base/jquery.ui.slider.css\",                     \"~/Content/themes/base/jquery.ui.tabs.css\",                     \"~/Content/themes/base/jquery.ui.datepicker.css\",                     \"~/Content/themes/base/jquery.ui.progressbar.css\",                     \"~/Content/themes/base/jquery.ui.theme.css\"));           bundles.Add(new StyleBundle(\"~/Content/css\").Include(            //\"~/Content/bootstrap.css\",            \"~/Content/toastr.css\",            \"~/Content/site.css\"));             BundleTable.EnableOptimizations = false;     } }    Here I add app.js and mainController.js in customScripts bundle. I will add it later. And add bundle reference and ng-app in Views-&gt;Shared-&gt;_Layout.cshtml   _Layout.cshtml   &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt;     &lt;meta charset=\"utf-8\" /&gt;     &lt;meta name=\"viewport\" content=\"width=device-width\" /&gt;     &lt;title&gt;@ViewBag.Title&lt;/title&gt;     @Styles.Render(\"~/Content/css\")     @Scripts.Render(\"~/bundles/modernizr\") &lt;/head&gt; &lt;body ng-app=\"app\"&gt;     @RenderBody()       @Scripts.Render(\"~/bundles/jquery\")     @Scripts.Render(\"~/bundles/toastr\")     @Scripts.Render(\"~/bundles/signalr\")     &lt;script src=\"signalr/hubs\"&gt;&lt;/script&gt;     @Scripts.Render(\"~/bundles/angular\")     @Scripts.Render(\"~/bundles/customScripts\")           @RenderSection(\"scripts\", required: false) &lt;/body&gt; &lt;/html&gt;    Step 7: Add app.js and mainController.js in Scripts-&gt;Application folder   App.js   (function () {     angular.module('app', []);       $(function () {         $.connection.hub.logging = true;         $.connection.hub.start();     });         $.connection.hub.error(function (err) {         console.log('An error occurred: ' + err);     });       angular.module('app')        .value('notification', $.connection.notification)        .value('toastr', toastr);   })();    mainController.js   angular.module('app').controller('mainController', function ($scope, notification, toastr) {     $scope.messages = [];       $scope.sendMessage = function () {         var inputval = taskForm.elements.txtTask.value;         taskForm.elements.txtTask.value = \"\";         notification.server.pushNotification(inputval);         $scope.newMessage = \"\";     };       notification.client.response = function onNewMessage(message) {         displayMessage(message);         $scope.$apply();     };       function displayMessage(message) {         toastr.success(message); //To nofiy as fadin and fadout     }   });    Now run the application and write a text in text box, open two or three browser, you will get same notification like below.      Thanks for your patient !   Source code  ","categories": ["ASP.NET MVC","JavaScript","Angular","C#","SignalR"],
        "tags": ["aspnetmvc","javascript","Angular","csharp","signalr"],
        "url": "http://localhost:4000/a-signalr-application-for-real-time-notification-using-angularjs-and-toastr/",
        "teaser":null},{
        "title": "Simple Notifications With Toastr",
        "excerpt":"toastr is a simple JavaScript toast notification library that is small, easy to use, and extendable. It is mostly used to show notification and its outlook is very nice and responsive. It allows you to create simple toasts with HTML5 and JavaScript like following:      Let’s use toastr in a simple asp.net MVC application.   Step 1: Create a ASP.NET MVC application with basic template      Open visual studio, Go to File-&gt;New-&gt;Project   Select Template -&gt; Visual C# -&gt; Web -&gt; ASP.NET MVC 4 Web application and click OK   Select Basic Template and Razor as view engine   Step 2: Install required packages   Run the following command in package manager console to install packages   PM&gt; Install-Package toastr   Step 3: Create HomeController and index view   Create a Home controller by right click on controller folder. Create an index view in Views -&gt; Home -&gt; Index.cshtml by right clicking in index action of Home controller.   HomeController.cs   using System; using System.Collections.Generic; using System.Linq; using System.Web; using System.Web.Mvc;   namespace Toastr.Controllers {     public class HomeController : Controller     {         //         // GET: /Home/           public ActionResult Index()         {             return View();         }       } }    Index.cshtml   @{     ViewBag.Title = \"Index\";     Layout = \"~/Views/Shared/_Layout.cshtml\"; }   &lt;h2&gt;Toastr Implimentation&lt;/h2&gt;    Step 5: Modify BundleConfig.cs   BundleConfig.cs   using System.Web; using System.Web.Optimization;   namespace Toastr {     public class BundleConfig     {         // For more information on Bundling, visit http://go.microsoft.com/fwlink/?LinkId=254725         public static void RegisterBundles(BundleCollection bundles)         {             bundles.Add(new ScriptBundle(\"~/bundles/jquery\").Include(                         \"~/Scripts/jquery-{version}.js\"));               bundles.Add(new ScriptBundle(\"~/bundles/jqueryui\").Include(                         \"~/Scripts/jquery-ui-{version}.js\"));               bundles.Add(new ScriptBundle(\"~/bundles/jqueryval\").Include(                         \"~/Scripts/jquery.unobtrusive*\",                         \"~/Scripts/jquery.validate*\"));               //Added for toaster             bundles.Add(new ScriptBundle(\"~/bundles/toastr\").Include(                        \"~/Scripts/toastr.js*\",                        \"~/Scripts/toastrImp.js\"));                 // Use the development version of Modernizr to develop with and learn from. Then, when you're             // ready for production, use the build tool at http://modernizr.com to pick only the tests you need.             bundles.Add(new ScriptBundle(\"~/bundles/modernizr\").Include(                         \"~/Scripts/modernizr-*\"));               //Modify for toastr             bundles.Add(new StyleBundle(\"~/Content/css\").Include(\"~/Content/site.css\",                                                                 \"~/Content/toastr.css\"));               bundles.Add(new StyleBundle(\"~/Content/themes/base/css\").Include(                         \"~/Content/themes/base/jquery.ui.core.css\",                         \"~/Content/themes/base/jquery.ui.resizable.css\",                         \"~/Content/themes/base/jquery.ui.selectable.css\",                         \"~/Content/themes/base/jquery.ui.accordion.css\",                         \"~/Content/themes/base/jquery.ui.autocomplete.css\",                         \"~/Content/themes/base/jquery.ui.button.css\",                         \"~/Content/themes/base/jquery.ui.dialog.css\",                         \"~/Content/themes/base/jquery.ui.slider.css\",                         \"~/Content/themes/base/jquery.ui.tabs.css\",                         \"~/Content/themes/base/jquery.ui.datepicker.css\",                         \"~/Content/themes/base/jquery.ui.progressbar.css\",                         \"~/Content/themes/base/jquery.ui.theme.css\"));                             BundleTable.EnableOptimizations = false;             }                  } }    Add toastrImp.js in Scripts folder. Modify BundleConfig.cs to add toastr.js, toastrImp.js and toastr.css add bundle reference in Views-&gt;Shared-&gt;_Layout.cshtml. toastrImp.js is my created javascript file to implement toastr.   toastrImp.js   $(document).ready(function () {       displayToastr();    });   function displayToastr() {     //alert('yes');     // Display a info toast, with no title     toastr.info('Hi Mahedee, This information for you.')       // Display a warning toast, with no title     toastr.warning('Hi Mahedee, This the first warning for you!')       // Display a success toast, with a title     toastr.success('Yes! You have successfully completed your task!', 'Congratulation for you, Mahedee!')       // Display an error toast, with a title     toastr.error('An error occured in the solution!', 'Please contact with system administrator.') }    _Layout.cshtml   &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt;     &lt;meta charset=\"utf-8\" /&gt;     &lt;meta name=\"viewport\" content=\"width=device-width\" /&gt;     &lt;title&gt;@ViewBag.Title&lt;/title&gt;     @Styles.Render(\"~/Content/css\")     @Scripts.Render(\"~/bundles/modernizr\") &lt;/head&gt; &lt;body&gt;     @RenderBody()       @Scripts.Render(\"~/bundles/jquery\")     @Scripts.Render(\"~/bundles/toastr\")     @RenderSection(\"scripts\", required: false) &lt;/body&gt; &lt;/html&gt;    Now run the program, you will see some notification nicely like below.      Some option need to know:   The position of toastr can be      toast-top-right   toast-top-left   toast-bottom-right   toast-bottom-left   toast-top-full-width   toast-bottom-full-width   You can change it in toastr.js like following.   toastr.options = { \"closeButton\": false, \"debug\": false, \"positionClass\": \"toast-top-full-width\", \"onclick\": null, \"showDuration\": \"200\", \"hideDuration\": \"1500\", \"timeOut\": \"6000\", \"extendedTimeOut\": \"1200\", \"showEasing\": \"swing\", \"hideEasing\": \"linear\", \"showMethod\": \"fadeIn\", \"hideMethod\": \"fadeOut\" }   Source code  ","categories": ["ASP.NET MVC","JavaScript","C#"],
        "tags": ["aspnetmvc","javascript","csharp"],
        "url": "http://localhost:4000/simple-notifications-with-toastr/",
        "teaser":null},{
        "title": "JSON Serialization In ASP.NET MVC And AngularJs",
        "excerpt":"In this article I will show how JSON serialize in ASP.NET MVC and bind data by AngularJs. I will not describe what and how JSON, ASP.NET MVC or AngularJs work. Hope I will discuss these topics in another article.   Let’s start to create an ASP.NET MVC project with AngularJs.   Step 1: Create ASP.NET MVC application      Open visual studio, Got to File-&gt;New-&gt;Project   Select Template -&gt; Visual C# -&gt; Web -&gt; ASP.NET MVC 4 Web application and click OK   Select Empty Template and Razor as view engine   Step 2: Install required packages     Run the following command in Package Manager Console (Tools-&gt;Library Package Manager-&gt;Package Manager Console) to install required package.   PM&gt; Install-Package jQuery PM&gt; Install-Package angularjs -Version 1.2.26 PM&gt; Install-Package Newtonsoft.Json   Step 3: Create a layout page     Create a layout page in Views-&gt; Shared -&gt;_Layout.cshtml and add reference of angularjs and jquery.   &lt;html ng-app&gt;     &lt;head&gt;             &lt;script src=\"~/Scripts/angular.min.js\"&gt;&lt;/script&gt;         &lt;script src=\"~/Scripts/jquery-2.1.1.js\"&gt;&lt;/script&gt;         &lt;title&gt;Student Information&lt;/title&gt;     &lt;/head&gt;     &lt;body&gt;         @RenderBody()     &lt;/body&gt; &lt;/html&gt;   Step 4: Create a view model “Student” in model folder   public class StudentVM {    public int RollNo { get; set; }    public string StudentName { get; set; }    public string Class { get; set; }    public string ClassTeacher { get; set; } }   Step 5: Create StudentsController     Create StudentsController in Controller folder like following. Here GetSerializedStudentVMS method serialized Student model to JSON.   public class StudentsController : Controller   {       //       // GET: /Students/        public ActionResult Index()       {           return View(\"Index\", \"\", GetSerializedStudentVMS());       }        public string GetSerializedStudentVMS()       {           var students = new[]             {                   new StudentVM {RollNo = 1, StudentName = \"Jamal Uddin\", Class=\"One\", ClassTeacher=\"Mr. Anowar Hossain\"},                   new StudentVM {RollNo = 5, StudentName = \"Kamal Hossain\", Class=\"Two\", ClassTeacher=\"Mr. Shahana Begum\"},                   new StudentVM {RollNo = 10, StudentName = \"Jahid Hasan\", Class=\"Three\", ClassTeacher=\"Mr. Lutfor Rahman\"},               };                      //Used to make property name as camel case           var settings = new JsonSerializerSettings { ContractResolver = new CamelCasePropertyNamesContractResolver() };            return JsonConvert.SerializeObject(students, Formatting.None, settings); //Returns students list as JSON       }    }    Step 6: Create index view          Right click of index action of StudentsController, click view and a view will automatically create to Views-&gt; Students -&gt;index.cshtml            Change the index.cshtml like following       @model string   @{     Layout = \"~/Views/Shared/_Layout.cshtml\"; } &lt;div ng-init=\"students = @Html.Raw(Model)\"&gt;     &lt;div&gt;         &lt;div&gt;             &lt;table&gt;                 &lt;tr&gt;                     &lt;th&gt;Roll No&lt;/th&gt;                     &lt;th&gt;Student Name&lt;/th&gt;                     &lt;th&gt;Class&lt;/th&gt;                     &lt;th&gt;Course Teacher&lt;/th&gt;                 &lt;/tr&gt;                 &lt;tr ng-repeat=\"student in students\"&gt;                     &lt;td&gt;&lt;/td&gt;                     &lt;td&gt;&lt;/td&gt;                     &lt;td&gt;&lt;/td&gt;                     &lt;td&gt;&lt;/td&gt;                 &lt;/tr&gt;             &lt;/table&gt;         &lt;/div&gt;     &lt;/div&gt; &lt;/div&gt;   Here ng-init used to initialize the json object and ng-repeat works like foreach.   Step 7: Change RouteConfig.cs      Change RouteConfig like following to run StudentController by default.     public class RouteConfig {   public static void RegisterRoutes(RouteCollection routes)   {       routes.IgnoreRoute(\"{resource}.axd/{*pathInfo}\");        routes.MapRoute(           name: \"Default\",           url: \"{controller}/{action}/{id}\",           defaults: new { controller = \"Students\", action = \"Index\", id = UrlParameter.Optional }       );   } }           Now run the application. Yes you will see the student information in a table. Thanks for your patient    ","categories": ["ASP.NET MVC","Bootstrap","C#"],
        "tags": ["aspnetmvc","bootstrap","csharp"],
        "url": "http://localhost:4000/json-serialization-in-asp-net-mvc-and-angularjs/",
        "teaser":null},{
        "title": "Easy Way To Design Application Layout By Bootstrap Theme",
        "excerpt":"To design layout of your web site is much more cumbersome. But you can easily design your website layout by bootstrap, you can make it responsive also.   Step 1: Create a ASP.NET MVC application with empty template      Open visual studio, Got to File-&gt;New-&gt;Project   Select Template -&gt; Visual C# -&gt; Web -&gt; ASP.NET MVC 4 Web application and click OK   Select Empty Template and Razor as view engine   Step 2: Install required packages     Run the following command in Package Manager Console (Tools-&gt;Library Package Manager-&gt;Package Manager Console) to install required package. Make sure your internet connection is enabled.   PM&gt; Install-Package bootstrap   Step 3: Download bootstrap theme Go to http://bootswatch.com/ . Download any theme (bootstrap.css) like below and pest the content in Contents -&gt; bootstrap-main-theme.css file      Step 4: Create a Layout page  Create a _Layout.cshtml in Views-&gt;Shared folder and add the following references.   _Layout.cshtml    &lt;!DOCTYPE html&gt;   &lt;html&gt; &lt;head&gt;     &lt;title&gt;Bootstrap theme test&lt;/title&gt;     &lt;link href=\"~/Content/bootstrap.min.css\" rel=\"stylesheet\" /&gt;     &lt;link href=\"~/Content/bootstrap-main-theme.css\" rel=\"stylesheet\" /&gt;     &lt;script src=\"~/Scripts/jquery-1.9.1.min.js\"&gt;&lt;/script&gt;     &lt;script src=\"~/Scripts/bootstrap.js\"&gt;&lt;/script&gt;   &lt;/head&gt; &lt;body&gt;          &lt;div&gt;         @RenderBody()     &lt;/div&gt; &lt;/body&gt; &lt;/html&gt;    Step 5: Create HomeController and index view  Create HomeController and create index view. Right click on index action of home controller you will see index.cshtml file created in Views-&gt;Home folder. Modify the index.cshtml file like following   Index.cshtml   @{     ViewBag.Title = \"Index\";     Layout = \"~/Views/Shared/_Layout.cshtml\"; } &lt;h2&gt;Home Page&lt;/h2&gt;   Step 6: Add Navigation bar   If you go the preview of the theme you will see some sample code or documentation. You can customize later. To add navigation bar to the website I modify the _Layout.cshtml like following.   _Layout.cshtml   &lt;!DOCTYPE html&gt;   &lt;html&gt; &lt;head&gt;     &lt;title&gt;Bootstrap theme test&lt;/title&gt;     &lt;link href=\"~/Content/bootstrap.min.css\" rel=\"stylesheet\" /&gt;     &lt;link href=\"~/Content/bootstrap-main-theme.css\" rel=\"stylesheet\" /&gt;     &lt;script src=\"~/Scripts/jquery-1.9.1.min.js\"&gt;&lt;/script&gt;     &lt;script src=\"~/Scripts/bootstrap.js\"&gt;&lt;/script&gt;   &lt;/head&gt; &lt;body&gt;     &lt;div class=\"navbar navbar-inverse\"&gt;   &lt;div class=\"navbar-header\"&gt;     &lt;button type=\"button\" class=\"navbar-toggle\" data-toggle=\"collapse\" data-target=\".navbar-inverse-collapse\"&gt;       &lt;span class=\"icon-bar\"&gt;&lt;/span&gt;       &lt;span class=\"icon-bar\"&gt;&lt;/span&gt;       &lt;span class=\"icon-bar\"&gt;&lt;/span&gt;     &lt;/button&gt;     &lt;a class=\"navbar-brand\" href=\"#\"&gt;Brand&lt;/a&gt;   &lt;/div&gt;   &lt;div class=\"navbar-collapse collapse navbar-inverse-collapse\"&gt;     &lt;ul class=\"nav navbar-nav\"&gt;       &lt;li class=\"active\"&gt;&lt;a href=\"#\"&gt;Active&lt;/a&gt;&lt;/li&gt;       &lt;li&gt;&lt;a href=\"#\"&gt;Link&lt;/a&gt;&lt;/li&gt;       &lt;li class=\"dropdown\"&gt;         &lt;a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\"&gt;Dropdown &lt;b class=\"caret\"&gt;&lt;/b&gt;&lt;/a&gt;         &lt;ul class=\"dropdown-menu\"&gt;           &lt;li&gt;&lt;a href=\"#\"&gt;Action&lt;/a&gt;&lt;/li&gt;           &lt;li&gt;&lt;a href=\"#\"&gt;Another action&lt;/a&gt;&lt;/li&gt;           &lt;li&gt;&lt;a href=\"#\"&gt;Something else here&lt;/a&gt;&lt;/li&gt;           &lt;li class=\"divider\"&gt;&lt;/li&gt;           &lt;li class=\"dropdown-header\"&gt;Dropdown header&lt;/li&gt;           &lt;li&gt;&lt;a href=\"#\"&gt;Separated link&lt;/a&gt;&lt;/li&gt;           &lt;li&gt;&lt;a href=\"#\"&gt;One more separated link&lt;/a&gt;&lt;/li&gt;         &lt;/ul&gt;       &lt;/li&gt;     &lt;/ul&gt;     &lt;form class=\"navbar-form navbar-left\"&gt;       &lt;input type=\"text\" class=\"form-control col-lg-8\" placeholder=\"Search\"&gt;     &lt;/form&gt;     &lt;ul class=\"nav navbar-nav navbar-right\"&gt;       &lt;li&gt;&lt;a href=\"#\"&gt;Link&lt;/a&gt;&lt;/li&gt;       &lt;li class=\"dropdown\"&gt;         &lt;a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\"&gt;Dropdown &lt;b class=\"caret\"&gt;&lt;/b&gt;&lt;/a&gt;         &lt;ul class=\"dropdown-menu\"&gt;           &lt;li&gt;&lt;a href=\"#\"&gt;Action&lt;/a&gt;&lt;/li&gt;           &lt;li&gt;&lt;a href=\"#\"&gt;Another action&lt;/a&gt;&lt;/li&gt;           &lt;li&gt;&lt;a href=\"#\"&gt;Something else here&lt;/a&gt;&lt;/li&gt;           &lt;li class=\"divider\"&gt;&lt;/li&gt;           &lt;li&gt;&lt;a href=\"#\"&gt;Separated link&lt;/a&gt;&lt;/li&gt;         &lt;/ul&gt;       &lt;/li&gt;     &lt;/ul&gt;   &lt;/div&gt; &lt;/div&gt;       &lt;div&gt;         @RenderBody()     &lt;/div&gt; &lt;/body&gt; &lt;/html&gt;   Now run the application, you will get a nice layout. Thanks for your patient!   Some other bootstrap theme sites which may help you.      http://bootswatch.com/   http://getbootstrap.com/   https://wrapbootstrap.com/   http://pikock.github.io/bootstrap-magic/   https://www.boottheme.com/   http://startbootstrap.com/   Source code  ","categories": ["ASP.NET MVC","Bootstrap","C#"],
        "tags": ["aspnetmvc","bootstrap","csharp"],
        "url": "http://localhost:4000/easy-way-to-design-application-layout-by-bootstrap-theme/",
        "teaser":null},{
        "title": "Introduction To AngularJs And Bootstrap In ASP.NET Web Form",
        "excerpt":"Step 1: Create a ASP.NET Web Forms Application      Open visual studio, Got to File-&gt;New-&gt;Project   Select Template -&gt; Visual C# -&gt; Web -&gt; ASP.NET Empty web application, set location and click OK   Step 2: Install required packages      Run the following command in Package Manager Console (Tools-&gt;Library Package Manager-&gt;Package Manager Console) to install required package. Make sure your internet connection is enabled.   PM&gt; Install-Package AngularJS.Core PM&gt; Install-Package AngularJS.Resource PM&gt; Install-Package bootstrap   Step 3: Design Master Page   Add required references for bootstrap and AngularJS , and design master page using bootstrap as follows. You can use theme. For details visit the article “ Easy way to design web layout by bootstrap theme ”    &lt;%@ Master Language=\"C#\" AutoEventWireup=\"true\" CodeBehind=\"Site.master.cs\" Inherits=\"AngularWeb.Site\" %&gt;   &lt;!DOCTYPE html&gt;   &lt;html xmlns=\"http://www.w3.org/1999/xhtml\"&gt; &lt;head runat=\"server\"&gt;     &lt;title&gt;&lt;/title&gt;       &lt;link href=\"Content/bootstrap.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;     &lt;link href=\"Content/Site.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;       &lt;asp:ContentPlaceHolder ID=\"HeadContent\" runat=\"server\"&gt;     &lt;/asp:ContentPlaceHolder&gt; &lt;/head&gt; &lt;body&gt;     &lt;div class=\"navbar navbar-inverse\"&gt;         &lt;div class=\"navbar-header\"&gt;             &lt;button type=\"button\" class=\"navbar-toggle\" data-toggle=\"collapse\" data-target=\".navbar-inverse-collapse\"&gt;                 &lt;span class=\"icon-bar\"&gt;&lt;/span&gt;                 &lt;span class=\"icon-bar\"&gt;&lt;/span&gt;                 &lt;span class=\"icon-bar\"&gt;&lt;/span&gt;             &lt;/button&gt;             &lt;a class=\"navbar-brand\" href=\"#\"&gt;ASP.NET with Angular&lt;/a&gt;         &lt;/div&gt;         &lt;div class=\"navbar-collapse collapse navbar-inverse-collapse\"&gt;             &lt;ul class=\"nav navbar-nav\"&gt;                 &lt;li class=\"active\"&gt;&lt;a href=\"#\"&gt;Home&lt;/a&gt;&lt;/li&gt;                 &lt;li&gt;&lt;a href=\"#\"&gt;About Me&lt;/a&gt;&lt;/li&gt;               &lt;/ul&gt;           &lt;/div&gt;     &lt;/div&gt;     &lt;form id=\"form1\" runat=\"server\"&gt;         &lt;div&gt;             &lt;asp:ContentPlaceHolder ID=\"MainContent\" runat=\"server\"&gt;             &lt;/asp:ContentPlaceHolder&gt;         &lt;/div&gt;     &lt;/form&gt;       &lt;script src=\"scripts/jquery-1.9.1.js\"&gt;&lt;/script&gt;     &lt;script src=\"scripts/bootstrap.js\"&gt;&lt;/script&gt;     &lt;script src=\"scripts/angular.js\"&gt;&lt;/script&gt;     &lt;script src=\"scripts/angular-resource.min.js\"&gt;&lt;/script&gt;       &lt;script src=\"scripts/app/app.js\"&gt;&lt;/script&gt;     &lt;script src=\"scripts/app/data.js\"&gt;&lt;/script&gt;     &lt;script src=\"scripts/app/studentsCtrl.js\"&gt;&lt;/script&gt;   &lt;/body&gt; &lt;/html&gt;   Here you must see that I used the reference of app.js, data.js. studentCtrl.js which are not defined yet. Soon, I will create those files.   Step 4: Create Application module, data and angular controller  Create app.js, data.js and studentCtrl.js in scripts -&gt; app folder. Content are given below.   app.js   var app = angular.module('app', ['ngResource']);  data.js   app.value('studentInfo', [   { id: 1, name: 'Mahedee Hasan', credit:20, semester: '8th' },   { id: 2, name: 'Enamul Haque', credit: 15, semester: '7th' },   { id: 2, name: 'Arefin Billah', credit: 15, semester: '6th' },   { id: 3, name: 'Zahid Hasan', credit: 12, semester: '7th' } ]);   studentCtrl.js   app.controller('studentsCtrl', function ($scope, studentInfo) {     $scope.studentInfo = studentInfo; });   App.js for just declaring application module, data.js for hardcoded data by javascript and studentCtrl.js is the main angular controller.   Step 4: Create a Page for View   Create a page name Default.aspx, just right click on the application -&gt; Add -&gt; New item -&gt; Web form using master page. Select Master page and type page name as Default.aspx. Now modify the page as follows.    &lt;%@ Page Title=\"\" Language=\"C#\" MasterPageFile=\"~/Site.Master\" AutoEventWireup=\"true\" CodeBehind=\"Default.aspx.cs\" Inherits=\"AngularWeb.Default\" %&gt;   &lt;asp:Content ID=\"Content1\" ContentPlaceHolderID=\"HeadContent\" runat=\"server\"&gt; &lt;/asp:Content&gt; &lt;asp:Content ID=\"Content2\" ContentPlaceHolderID=\"MainContent\" runat=\"server\"&gt;       &lt;div class=\"container\" ng-controller=\"studentsCtrl\" ng-app=\"app\"&gt;           &lt;table class=\"table table-striped table-hover table-condensed\"&gt;             &lt;thead&gt;                 &lt;tr&gt;                     &lt;th&gt;Id&lt;/th&gt;                     &lt;th&gt;Name&lt;/th&gt;                     &lt;th&gt;Credit&lt;/th&gt;                     &lt;th&gt;Semester&lt;/th&gt;                   &lt;/tr&gt;             &lt;/thead&gt;               &lt;tr ng-repeat=\"student in studentInfo\"&gt;                 &lt;td&gt;                 &lt;/td&gt;                 &lt;td&gt;                 &lt;/td&gt;                 &lt;td&gt;                 &lt;/td&gt;                 &lt;td&gt;                 &lt;/td&gt;             &lt;/tr&gt;         &lt;/table&gt;     &lt;/div&gt; &lt;/asp:Content&gt;   Look at the page, here I add ng-controller and ng-app and ng-repeat. If you have little idea about angularJs, you must understand the code. Now just run the application and you will get following output. Happy programming.   Source code  ","categories": ["ASP.NET","Angular","C#"],
        "tags": ["aspnet","angular","csharp"],
        "url": "http://localhost:4000/introduction-to-angularjs-and-bootstrap-in-asp-net-web-form/",
        "teaser":null},{
        "title": "Retrieving A Collection Of Objects With Page Methods And AngularJS In ASP.NET Web Form",
        "excerpt":"Page Methods are asp.net web form feature. It is an easy way to communicate with the server. You can communicate with server using Page Methods and can do anything you like but mind it is not restful form of communication. In this solution I used visual studio 2012 and bootstrap. So let’s start to retrieve a collection of objects with Page Methods and AngularJS in ASP.NET web forms.   Step 1: Create a ASP.NET Web Forms Application      Open visual studio, Got to File-&gt;New-&gt;Project   Select Template -&gt; Visual C# -&gt; Web -&gt; ASP.NET Empty web application, set location and click OK   Step 2: Install required packages   Run the following command in Package Manager Console (Tools-&gt;Library Package Manager-&gt;Package Manager Console) to install required package. Make sure your internet connection is enabled.   PM&gt; Install-Package AngularJS.Core PM&gt; Install-Package AngularJS.Resource PM&gt; Install-Package bootstrap   Step 3: Design the Master Page   Add required references for bootstrap and AngularJS and design master page using bootstrap as follows. You can use theme. For details visit the article Easy way to design web layout by bootstrap theme   &lt;%@ Master Language=\"C#\" AutoEventWireup=\"true\" CodeBehind=\"Site.master.cs\" Inherits=\"WebMathodAngular.Site\" %&gt;   &lt;!DOCTYPE html&gt;   &lt;html xmlns=\"http://www.w3.org/1999/xhtml\"&gt; &lt;head id=\"Head1\" runat=\"server\"&gt;     &lt;title&gt;&lt;/title&gt;       &lt;link href=\"Content/bootstrap.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;     &lt;link href=\"Content/Site.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;       &lt;asp:ContentPlaceHolder ID=\"HeadContent\" runat=\"server\"&gt;     &lt;/asp:ContentPlaceHolder&gt; &lt;/head&gt; &lt;body&gt;     &lt;div class=\"navbar navbar-inverse\"&gt;         &lt;div class=\"navbar-header\"&gt;             &lt;button type=\"button\" class=\"navbar-toggle\" data-toggle=\"collapse\" data-target=\".navbar-inverse-collapse\"&gt;                 &lt;span class=\"icon-bar\"&gt;&lt;/span&gt;                 &lt;span class=\"icon-bar\"&gt;&lt;/span&gt;                 &lt;span class=\"icon-bar\"&gt;&lt;/span&gt;             &lt;/button&gt;             &lt;a class=\"navbar-brand\" href=\"#\"&gt;ASP.NET with Angular&lt;/a&gt;         &lt;/div&gt;         &lt;div class=\"navbar-collapse collapse navbar-inverse-collapse\"&gt;             &lt;ul class=\"nav navbar-nav\"&gt;                 &lt;li class=\"active\"&gt;&lt;a href=\"#\"&gt;Home&lt;/a&gt;&lt;/li&gt;                 &lt;li&gt;&lt;a href=\"#\"&gt;About Me&lt;/a&gt;&lt;/li&gt;               &lt;/ul&gt;           &lt;/div&gt;     &lt;/div&gt;     &lt;form id=\"form1\" runat=\"server\"&gt;            &lt;asp:ScriptManager ID=\"ScriptManager1\" runat=\"server\" EnablePageMethods=\"True\"&gt;&lt;/asp:ScriptManager&gt;           &lt;div&gt;             &lt;asp:ContentPlaceHolder ID=\"MainContent\" runat=\"server\"&gt;             &lt;/asp:ContentPlaceHolder&gt;         &lt;/div&gt;     &lt;/form&gt;       &lt;script src=\"scripts/jquery-1.9.1.js\"&gt;&lt;/script&gt;     &lt;script src=\"scripts/bootstrap.js\"&gt;&lt;/script&gt;     &lt;script src=\"scripts/angular.js\"&gt;&lt;/script&gt;     &lt;script src=\"scripts/angular-resource.min.js\"&gt;&lt;/script&gt;       &lt;script src=\"scripts/app/app.js\"&gt;&lt;/script&gt;     &lt;script src=\"scripts/app/data.js\"&gt;&lt;/script&gt;     &lt;script src=\"scripts/app/studentsCtrl.js\"&gt;&lt;/script&gt;   &lt;/body&gt; &lt;/html&gt;   Here you must see that I used the reference of app.js, data.js. studentCtrl.js which are not defined yet. Soon, I will create those files. Another thing that you must set EnablePageMethod=”True”   Step 4: Create Application module, data and angular controller  Create app.js, data.js and studentCtrl.js in scripts -&gt; app folder. Content are given below.   app.js   var app = angular.module('app', ['ngResource']);   data.js   app.value('pageMethods', PageMethods);   app.factory('student', function (pageMethods, $rootScope) {     var result = [];     pageMethods.GetStudent(function (data) {         data.forEach(function (item) {             result.push({ id: item.Id, name: item.Name, semester: item.Semester, credits: item.Credits});         });         $rootScope.$apply();     });     return result; })  studentCtrl.js   app.controller('studentsCtrl', function ($scope, student) {     $scope.student = student; });   Here, App.js for just declaring application module, data.js for retrieving data using Page Methods and studentCtrl.js is the main angular controller. You must see, in data.js I have declare pageMethods and call a Page Method name “GetStudent”. This is not yet defines. I will create this method in next Step.   Step 4: Create a Page for View      Create a page name Default.aspx, just right click on the application -&gt; Add -&gt; New item -&gt; Web form using master page. Select Master page and type page name as Default.aspx. Now modify the page as follows.   Default.aspx.cs   using System; using System.Collections.Generic; using System.Linq; using System.Web; using System.Web.Services; using System.Web.UI; using System.Web.UI.WebControls;   namespace WebMathodAngular {     public partial class Default : System.Web.UI.Page     {         protected void Page_Load(object sender, EventArgs e)         {           }           [WebMethod]         public static List&lt;Student&gt; GetStudent()         {             List&lt;Student&gt; lstStudents = new List&lt;Student&gt;()                 {                 new Student { Id= 1, Name= \"Mahedee Hasan\", Semester=\"5th\", Credits= 15},                 new Student { Id= 2, Name= \"Robiul Alam\", Semester=\"4th\", Credits= 20},                 new Student { Id= 3, Name= \"Amit Karmaker\", Semester=\"7th\", Credits= 12 },                 new Student { Id= 4, Name= \"Zahid Hasan\", Semester=\"8th\", Credits= 18},                 new Student { Id= 5, Name= \"Shafiqul Islam\", Semester=\"6th\", Credits= 15},                               };               return lstStudents;         }         }         public class Student     {         public int Id { get; set; }         public string Name { get; set; }         public string Semester { get; set; }         public int Credits { get; set; }     }   }    In Deafult.aspx.cs file, you must see, I have created a Page Method which is annoted by WebMethod. This method returns a list of Students object.   Default.aspx   &lt;%@ Page Title=\"\" Language=\"C#\" MasterPageFile=\"~/Site.Master\" AutoEventWireup=\"true\" CodeBehind=\"Default.aspx.cs\" Inherits=\"WebMathodAngular.Default\" %&gt;   &lt;asp:Content ID=\"Content1\" ContentPlaceHolderID=\"HeadContent\" runat=\"server\"&gt; &lt;/asp:Content&gt; &lt;asp:Content ID=\"Content2\" ContentPlaceHolderID=\"MainContent\" runat=\"server\"&gt;     &lt;div class=\"container\" ng-controller=\"studentsCtrl\" ng-app=\"app\"&gt;           &lt;table class=\"table table-striped table-hover table-condensed\"&gt;             &lt;thead&gt;                 &lt;tr&gt;                     &lt;th&gt;Id&lt;/th&gt;                     &lt;th&gt;Name&lt;/th&gt;                     &lt;th&gt;Credit&lt;/th&gt;                     &lt;th&gt;Semester&lt;/th&gt;                   &lt;/tr&gt;             &lt;/thead&gt;               &lt;tr ng-repeat=\"student in student\"&gt;                 &lt;td&gt;                 &lt;/td&gt;                 &lt;td&gt;                 &lt;/td&gt;                 &lt;td&gt;                 &lt;/td&gt;                 &lt;td&gt;                 &lt;/td&gt;             &lt;/tr&gt;         &lt;/table&gt;         &lt;/div&gt; &lt;/asp:Content&gt;    Look at the page, here I have added ng-controller, ng-app and ng-repeat. If you have little idea about angularJs, you must understand it. Now just run the application and see the output. I need to download required packages to run the application.   Source code  ","categories": ["ASP.NET","Angular","C#"],
        "tags": ["aspnet","angular","csharp"],
        "url": "http://localhost:4000/retrieving-a-collection-of-objects-with-page-methods-and-angularjs-in-asp-net-web-form/",
        "teaser":null},{
        "title": "How To Add ASP.NET MVC to a Web Form Application",
        "excerpt":"ASP.NET MVC is very popular now a day. But we have much legacy system of ASP.NET web form. If you want to use ASP.NET MVC with legacy ASP.NET web form application. What should you do? This is not encouraged to create an application with ASP.NET web form and ASP.NET MVC together. If you need, you can use. So, let’s start. In this application I used Visual Studio 2012 and .NET framework 4.5   Step 1: Create a ASP.NET Web Forms Application      Open visual studio, Got to File-&gt;New-&gt;Project   Select Template -&gt; Visual C# -&gt; Web -&gt; ASP.NET Web Forms application, set location and click OK   Step 2: Add Reference     Click right button on the project -&gt; Add Reference -&gt;Extensions -&gt; System.web.mvc   And Add Reference -&gt; Framework -&gt; System.Web.Routing      Step 3: Configure Default Routing  Modify the Application_Start method of Global.asax file. Write down the following code snippet in the Application_Start method .   System.Web.Routing.RouteTable.Routes.MapRoute(\"Default\", \"{controller}/{action}/{id}\",                 new { Controller = \"Home\", action = \"index\", id = \"\" });   Here Route name is Default and default routing is {controller}/{action}/{id} . Here, default controller is Home and default action is index and default id is empty.   Step 4: Create Controller directory and Controller      Create a controller directory by right click on solution -&gt;Add -&gt; New folder -&gt; Controllers   Create a controller by right click on Controller folder -&gt; Add -&gt; Class -&gt; MyController (name of the class)   And create an action in MyController - name AboutMe like below.   MyController.cs   using System; using System.Collections.Generic; using System.Linq; using System.Web; using System.Web.Mvc;   namespace WebFormMVC.Controllers {     public class MyController : Controller     {         public JsonResult AboutMe()         {             return Json(new { name = \"Mahedee Hasan\", designation = \"Software Architect\"}, JsonRequestBehavior.AllowGet);         }     } }    Now run the application, if you set default page of your application is default.aspx. You will see the output of as usual asp.net webform application. Now change the URL like : http://localhost:53598/My/Aboutme you will see a json output. This is actually MVC output.   If you are not clear in any portion or you have any suggestion, please leave your comment here. To run the application you may require some packages to download.  ","categories": ["ASP.NET MVC","ASP.NET","C#"],
        "tags": ["aspnetmvc","aspnet","csharp"],
        "url": "http://localhost:4000/how-to-add-asp-net-mvc-to-a-web-form-application/",
        "teaser":null},{
        "title": "Uses Of Dropdown List And Radio Button In ASP.NET MVC Application With Entity Framework",
        "excerpt":"Introduction  Dropdown list and Radio button are two very important controls for web. We frequently use it. In this article I will show you how to use dynamic dropdown list and radio button in CRUD operation.   Implementation Repository Pattern with ASP.NET MVC and Entity Framework   Let’s create a University Ranking application and implement Dropdown list and Radio button dynamically. Here I only show you CRUD operation on University Information page. Tools and Technology used   I used following tools and technology to develop the project – Implementation of generic repository      Visual Studio 2013   Visual C#   ASP.NET MVC 5   Entity Framework   Razor view engine   Step 1: Create an ASP.NET MVC 5 application using Visual Studio 2013. I kept the application name “UniversityRanking”. Help: How to create first application using asp.net MVC   Step 2: Configure connection string in web.config   &lt;connectionStrings&gt;   &lt;add name=\"DefaultConnection\" connectionString=\"Data Source=localhost;Initial Catalog=UniversityDB;User ID=sa; Password=sa@123\" providerName=\"System.Data.SqlClient\" /&gt; &lt;/connectionStrings&gt;   Step 3: Create three models – “Country, Category and University”   Country.cs   public class Country {     public int Id { get; set; }     public string Name { get; set; }   }   Category.cs    public class Category {      public int Id { get; set; }     public string Name { get; set; } }   University.cs   public class University {     public int Id { get; set; }     public string Name { get; set; }     [Required]     public int CountryId { get; set; }      [ForeignKey(\"CountryId\")]     public virtual Country Country { get; set; }         [Required]     public int CategoryId { get; set; }     [ForeignKey(\"CategoryId\")]     public virtual Category Category { get; set; } }   Step 4: Create a DbContext name UniversityContext in Repository folder.   public class UniversityContext : DbContext {     public UniversityContext()         : base(\"DefaultConnection\")     {       }       public DbSet&lt;University&gt; Universities { get; set; }     public DbSet&lt;Category&gt; Categories { get; set; }     public DbSet&lt;Country&gt; Countries { get; set; }       protected override void OnModelCreating(DbModelBuilder modelBuilder)     {       } }    Step 5: Create a controller name – EmployeeController.     Select template “MVC5 Controller with views, using entity framework”. * EmployeeController will create in Controller folder and related views will be created in Views/Employee folder   Step 6: Now modify some of the action of UniversityController mentioned bellow (using comments).   public class UniversityController : Controller {     private UniversityContext db = new UniversityContext();       // GET: /University/     public ActionResult Index()     {         var universities = db.Universities.Include(u =&gt; u.Category).Include(u =&gt; u.Country);         return View(universities.ToList());     }       // GET: /University/Details/5     public ActionResult Details(int? id)     {         if (id == null)         {             return new HttpStatusCodeResult(HttpStatusCode.BadRequest);         }         University university = db.Universities.Find(id);         if (university == null)         {             return HttpNotFound();         }         return View(university);     }       // Modify Create Action.      //GET: /University/Create     public ActionResult Create()     {         //ViewBag.CategoryId = new SelectList(db.Categories, \"Id\", \"Name\");         ViewBag.Categories = db.Categories.ToList();         ViewBag.CountryId = new SelectList(db.Countries, \"Id\", \"Name\");         return View();     }       // Modifed following action     // POST: /University/Create     // To protect from overposting attacks, please enable the specific properties you want to bind to, for      // more details see http://go.microsoft.com/fwlink/?LinkId=317598.     [HttpPost]     [ValidateAntiForgeryToken]     public ActionResult Create([Bind(Include=\"Id,Name,CountryId,CategoryId\")] University university)     {         try         {             if (ModelState.IsValid)             {                 db.Universities.Add(university);                 db.SaveChanges();                 return RedirectToAction(\"Index\");             }         }         catch(Exception exp)         {             return RedirectToAction(\"Create\");         }           //ViewBag.CategoryId = new SelectList(db.Categories, \"Id\", \"Name\", university.CategoryId);         //ViewBag.CountryId = new SelectList(db.Countries, \"Id\", \"Name\", university.CountryId);         ViewBag.Categories = db.Categories.ToList();         ViewBag.CountryId = new SelectList(db.Countries, \"Id\", \"Name\");         return View(university);     }       // Modifed following action     // GET: /University/Edit/5     public ActionResult Edit(int? id)     {         if (id == null)         {             return new HttpStatusCodeResult(HttpStatusCode.BadRequest);         }         University university = db.Universities.Find(id);         if (university == null)         {             return HttpNotFound();         }         //ViewBag.CategoryId = new SelectList(db.Categories, \"Id\", \"Name\", university.CategoryId);         ViewBag.Categories = db.Categories.ToList();         ViewBag.CountryId = new SelectList(db.Countries, \"Id\", \"Name\", university.CountryId);         return View(university);     }       // POST: /University/Edit/5     // To protect from overposting attacks, please enable the specific properties you want to bind to, for      // more details see http://go.microsoft.com/fwlink/?LinkId=317598.     [HttpPost]     [ValidateAntiForgeryToken]     public ActionResult Edit([Bind(Include=\"Id,Name,CountryId,CategoryId\")] University university)     {         if (ModelState.IsValid)         {             db.Entry(university).State = EntityState.Modified;             db.SaveChanges();             return RedirectToAction(\"Index\");         }         ViewBag.CategoryId = new SelectList(db.Categories, \"Id\", \"Name\", university.CategoryId);         ViewBag.CountryId = new SelectList(db.Countries, \"Id\", \"Name\", university.CountryId);         return View(university);     }       // GET: /University/Delete/5     public ActionResult Delete(int? id)     {         if (id == null)         {             return new HttpStatusCodeResult(HttpStatusCode.BadRequest);         }         University university = db.Universities.Find(id);         if (university == null)         {             return HttpNotFound();         }         return View(university);     }       // POST: /University/Delete/5     [HttpPost, ActionName(\"Delete\")]     [ValidateAntiForgeryToken]     public ActionResult DeleteConfirmed(int id)     {         University university = db.Universities.Find(id);         db.Universities.Remove(university);         db.SaveChanges();         return RedirectToAction(\"Index\");     }       protected override void Dispose(bool disposing)     {         if (disposing)         {             db.Dispose();         }         base.Dispose(disposing);     } }    Step 7: Modified some of the views given below   Create.cshtml – Modified view   @model UniversityRating.Models.University   @{     ViewBag.Title = \"Create\"; } &lt;h2&gt;Create&lt;/h2&gt; @using (Html.BeginForm()) {     @Html.AntiForgeryToken() &lt;div class=\"form-horizontal\"&gt; &lt;h4&gt;University&lt;/h4&gt;   &lt;hr /&gt;   @Html.ValidationSummary(true) &lt;div class=\"form-group\"&gt;             @Html.LabelFor(model =&gt; model.Name, new { @class = \"control-label col-md-2\" }) &lt;div class=\"col-md-10\"&gt;                 @Html.EditorFor(model =&gt; model.Name)                 @Html.ValidationMessageFor(model =&gt; model.Name)&lt;/div&gt; &lt;/div&gt; &lt;div class=\"form-group\"&gt;             @Html.LabelFor(model =&gt; model.CountryId, \"Country\", new { @class = \"control-label col-md-2\" }) &lt;div class=\"col-md-10\"&gt;                 @*@Html.DropDownList(\"PossibleCountries\", String.Empty)*@                 @Html.DropDownList(\"CountryId\", \"Select Country\")                 @Html.ValidationMessageFor(model =&gt; model.CountryId)&lt;/div&gt; &lt;/div&gt; &lt;div class=\"form-group\"&gt;             &lt;label class=\"control-label col-md-2\"&gt;Unviersity category&lt;/label&gt; &lt;div class=\"col-md-10\"&gt;                 @foreach (var item in (IEnumerable&lt;UniversityRating.Models.Category&gt;)ViewBag.Categories)                 {                     @Html.RadioButtonFor(rbtn =&gt; rbtn.CategoryId, item.Id.ToString())                     @item.Name }                 @Html.ValidationMessageFor(model =&gt; model.CategoryId)&lt;/div&gt; &lt;/div&gt; @* &lt;div class=\"form-group\"&gt;                 @Html.LabelFor(model =&gt; model.CategoryId, \"CategoryId\", new { @class = \"control-label col-md-2\" }) &lt;div class=\"col-md-10\"&gt;                     @Html.DropDownList(\"CategoryId\", String.Empty)                     @Html.ValidationMessageFor(model =&gt; model.CategoryId)&lt;/div&gt; &lt;/div&gt; *@ &lt;div class=\"form-group\"&gt; &lt;div class=\"col-md-offset-2 col-md-10\"&gt;                 &lt;input type=\"submit\" value=\"Create\" class=\"btn btn-default\" /&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; } &lt;div&gt;     @Html.ActionLink(\"Back to List\", \"Index\")&lt;/div&gt; @section Scripts {     @Scripts.Render(\"~/bundles/jqueryval\") }    Delete.cshtml   @model UniversityRating.Models.University   @{     ViewBag.Title = \"Delete\"; } &lt;h2&gt;Delete&lt;/h2&gt; &lt;h3&gt;Are you sure you want to delete this?&lt;/h3&gt; &lt;div&gt; &lt;h4&gt;University&lt;/h4&gt;   &lt;hr /&gt;   &lt;dl class=\"dl-horizontal\"&gt;         &lt;dt&gt;             @Html.DisplayNameFor(model =&gt; model.Category.Name)         &lt;/dt&gt;           &lt;dd&gt;             @Html.DisplayFor(model =&gt; model.Category.Name)         &lt;/dd&gt;           &lt;dt&gt;             @Html.DisplayNameFor(model =&gt; model.Country.Name)         &lt;/dt&gt;           &lt;dd&gt;             @Html.DisplayFor(model =&gt; model.Country.Name)         &lt;/dd&gt;           &lt;dt&gt;             @Html.DisplayNameFor(model =&gt; model.Name)         &lt;/dt&gt;           &lt;dd&gt;             @Html.DisplayFor(model =&gt; model.Name)         &lt;/dd&gt;       &lt;/dl&gt;       @using (Html.BeginForm()) {         @Html.AntiForgeryToken() &lt;div class=\"form-actions no-color\"&gt;             &lt;input type=\"submit\" value=\"Delete\" class=\"btn btn-default\" /&gt; |             @Html.ActionLink(\"Back to List\", \"Index\")&lt;/div&gt; }&lt;/div&gt;    Details.cshtml    @model UniversityRating.Models.University   @{     ViewBag.Title = \"Details\"; } &lt;h2&gt;Details&lt;/h2&gt; &lt;div&gt; &lt;h4&gt;University&lt;/h4&gt;   &lt;hr /&gt;   &lt;dl class=\"dl-horizontal\"&gt;         &lt;dt&gt;             @Html.DisplayNameFor(model =&gt; model.Category.Name)         &lt;/dt&gt;           &lt;dd&gt;             @Html.DisplayFor(model =&gt; model.Category.Name)         &lt;/dd&gt;           &lt;dt&gt;             @Html.DisplayNameFor(model =&gt; model.Country.Name)         &lt;/dt&gt;           &lt;dd&gt;             @Html.DisplayFor(model =&gt; model.Country.Name)         &lt;/dd&gt;           &lt;dt&gt;             @Html.DisplayNameFor(model =&gt; model.Name)         &lt;/dt&gt;           &lt;dd&gt;             @Html.DisplayFor(model =&gt; model.Name)         &lt;/dd&gt;       &lt;/dl&gt;&lt;/div&gt; @Html.ActionLink(\"Edit\", \"Edit\", new { id = Model.Id }) |     @Html.ActionLink(\"Back to List\", \"Index\")    Edit.cshtml : Modified   @model UniversityRating.Models.University   @{     ViewBag.Title = \"Edit\"; } &lt;h2&gt;Edit&lt;/h2&gt; @using (Html.BeginForm()) {     @Html.AntiForgeryToken() &lt;div class=\"form-horizontal\"&gt; &lt;h4&gt;University&lt;/h4&gt;   &lt;hr /&gt;   @Html.ValidationSummary(true)         @Html.HiddenFor(model =&gt; model.Id) &lt;div class=\"form-group\"&gt;             @Html.LabelFor(model =&gt; model.Name, new { @class = \"control-label col-md-2\" }) &lt;div class=\"col-md-10\"&gt;                 @Html.EditorFor(model =&gt; model.Name)                 @Html.ValidationMessageFor(model =&gt; model.Name)&lt;/div&gt; &lt;/div&gt; &lt;div class=\"form-group\"&gt;             @Html.LabelFor(model =&gt; model.CountryId, \"Country\", new { @class = \"control-label col-md-2\" }) &lt;div class=\"col-md-10\"&gt;                 @Html.DropDownList(\"CountryId\", String.Empty)                 @Html.ValidationMessageFor(model =&gt; model.CountryId)&lt;/div&gt; &lt;/div&gt; @* &lt;div class=\"form-group\"&gt;             @Html.LabelFor(model =&gt; model.CategoryId, \"CategoryId\", new { @class = \"control-label col-md-2\" }) &lt;div class=\"col-md-10\"&gt;                 @Html.DropDownList(\"CategoryId\", String.Empty)                 @Html.ValidationMessageFor(model =&gt; model.CategoryId)&lt;/div&gt; &lt;/div&gt; *@ &lt;div class=\"form-group\"&gt;             &lt;label class=\"control-label col-md-2\"&gt;Unviersity category&lt;/label&gt; &lt;div class=\"col-md-10\"&gt;                 @foreach (var item in (IEnumerable&lt;UniversityRating.Models.Category&gt;)ViewBag.Categories)                 {                     @Html.RadioButtonFor(rbtn =&gt; rbtn.CategoryId, item.Id.ToString(), Model.CategoryId == item.Id ? new { Checked = \"checked\" } : null)                     @item.Name }&lt;/div&gt; &lt;/div&gt; &lt;div class=\"form-group\"&gt; &lt;div class=\"col-md-offset-2 col-md-10\"&gt;                 &lt;input type=\"submit\" value=\"Save\" class=\"btn btn-default\" /&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; } &lt;div&gt;     @Html.ActionLink(\"Back to List\", \"Index\")&lt;/div&gt; @section Scripts {     @Scripts.Render(\"~/bundles/jqueryval\") }  __Index.cshtml__    ```csharp @model IEnumerable&lt;UniversityRating.Models.University&gt;   @{     ViewBag.Title = \"Index\"; } &lt;h2&gt;Index&lt;/h2&gt; @Html.ActionLink(\"Create New\", \"Create\") &lt;table class=\"table\"&gt; &lt;tr&gt; &lt;th&gt;     @Html.DisplayNameFor(model =&gt; model.Name)&lt;/th&gt; &lt;th&gt;     Country&lt;/th&gt; &lt;th&gt;     University Category&lt;/th&gt; &lt;th&gt;&lt;/th&gt; &lt;/tr&gt; @foreach (var item in Model)     { &lt;tr&gt; &lt;td&gt;     @Html.DisplayFor(modelItem =&gt; item.Name)&lt;/td&gt; &lt;td&gt;     @Html.DisplayFor(modelItem =&gt; item.Country.Name)&lt;/td&gt; &lt;td&gt;     @Html.DisplayFor(modelItem =&gt; item.Category.Name)&lt;/td&gt; &lt;td&gt;     @Html.ActionLink(\"Edit\", \"Edit\", new { id = item.Id }) |     @Html.ActionLink(\"Details\", \"Details\", new { id = item.Id }) |     @Html.ActionLink(\"Delete\", \"Delete\", new { id = item.Id })&lt;/td&gt; &lt;/tr&gt; }&lt;/table&gt;    Step 8: Add a link to _Layout page to access university information in Views/Shared   &lt;ul class=\"nav navbar-nav\"&gt;     &lt;li&gt;@Html.ActionLink(\"Home\", \"Index\", \"Home\")&lt;/li&gt;     &lt;li&gt;@Html.ActionLink(\"About\", \"About\", \"Home\")&lt;/li&gt;     &lt;li&gt;@Html.ActionLink(\"Contact\", \"Contact\", \"Home\")&lt;/li&gt;     &lt;li&gt;@Html.ActionLink(\"University\", \"Index\", \"University\")&lt;/li&gt; &lt;/ul&gt;   Step 9: Run the following command in package manager console one after another   PM&gt; Enable-Migrations -ContextTypeName UniversityContext PM&gt; Add-Migration created PM&gt; Update-Database –Verbose   Now run application and apply CRUD operation on it using dropdownlist and radio button.   Source code  ","categories": ["ASP.NET MVC","EF","C#"],
        "tags": ["aspnetmvc","ef","csharp"],
        "url": "http://localhost:4000/uses-of-dropdown-list-and-radio-button-in-asp-net-mvc-application-with-entity-framework/",
        "teaser":null},{
        "title": "CRUD Operation Using Asynchronous Method In ASP.NET MVC",
        "excerpt":"Introduction  In .NET framework 4.5 asynchronous programming concept has been introduced. In this regard, .NET introduced two keyword async and await. It is much easier to implement than the multi-threading concept. The .NET Framework 4 introduced an asynchronous programming concept referred to as a Task and ASP.NET MVC 4 supports Task. In this article I will show you a simple CRUD operation using asynchronous programming by async, await and Task.   A simple overview on “async, await, Task” Keyword   async      The async modifier indicates that the method, lambda expression, or anonymous method will work asynchronously.   Method with async modifier also called async method.   An async method provides a convenient way to do potentially long-running work without blocking the caller’s thread.   The caller of an async method can resume its work without waiting for the async method to finish.   Typically, a method modified by the async keyword contains at least one await expression or statement.   await      Typically await keyword used to free a thread   The await operator is applied to a task in an asynchronous method to suspend the execution of the method until the awaited task completes.   The asynchronous method in which await is used must be modified by the async keyword. Such a method, defined by using the async modifier, and usually containing one or more await expressions, is referred to as an async method.   The task to which the await operator is applied typically is the return value from a call to a method that implements.   Task      The main types are System.Threading.Tasks.Task   Represents an asynchronous operation that can be waited on and cancelled        System.Threading.Tasks.Task, which is a task that can return a value. MSDN References:       https://msdn.microsoft.com/en-us/library/hh156513(v=vs.110).aspx   https://msdn.microsoft.com/en-us/library/hh156528(v=vs.110).aspx   https://msdn.microsoft.com/en-us/library/system.threading.tasks(v=vs.110).aspx   Here I implement async modifier to a CRUD operation on Employee Object. Let’s start.   Tools and Technology used  I used following tools and technology to develop the project –      Visual Studio 2013   Visual C#   ASP.NET MVC 5   Entity Framework   Razor view engine   Step 1: Create an ASP.NET MVC 5 application using Visual Studio 2013.      Create an ASP.NET MVC 5 application name MVCAsync   Step 2: Configure connection string in web.config   &lt;connectionStrings&gt;   &lt;add name=\"DefaultConnection\" connectionString=\"Data Source=localhost;Initial Catalog=EmployeeDB;User ID=sa; Password=sa@123\" providerName=\"System.Data.SqlClient\" /&gt; &lt;/connectionStrings&gt;   Step 3: Create a model in model folder - Employee   Employee.cs   public class Employee  {      public int Id { get; set; }      public string Name { get; set; }      public string NickName { get; set; }      public string Designation { get; set; }      public string Dept { get; set; }  }   Step 4: Create a DbContext name EmployeeDBContext in Model folder.   public class EmployeeDBContext : DbContext {     public EmployeeDBContext()         : base(\"DefaultConnection\")     {     }       public DbSet&lt;Employee&gt; Employees { get; set; } }    Step 5: Create a controller name – EmployeeController.      Select template - MVC5 Controller with views, using entity framework   EmployeeController will create in Controller folder and related views will be created in Views/Employee folder.   At the time of creating controller - mark use async controller action.      Step 6: Employee Controller is given below.     A simple difference over normal method is –            used async keyword in Action Method.       Used Task instead of typical ActionResult       And used await keyword in any operation.           public class EmployeeController : Controller  {      private EmployeeDBContext db = new EmployeeDBContext();        // GET: /Employee/      public async Task&lt;ActionResult&gt; Index()      {          return View(await db.Employees.ToListAsync());      }        // GET: /Employee/Details/5      public async Task&lt;ActionResult&gt; Details(int? id)      {          if (id == null)          {              return new HttpStatusCodeResult(HttpStatusCode.BadRequest);          }          Employee employee = await db.Employees.FindAsync(id);          if (employee == null)          {              return HttpNotFound();          }          return View(employee);      }        // GET: /Employee/Create      public ActionResult Create()      {          return View();      }        // POST: /Employee/Create      // To protect from overposting attacks, please enable the specific properties you want to bind to, for       // more details see http://go.microsoft.com/fwlink/?LinkId=317598.      [HttpPost]      [ValidateAntiForgeryToken]      public async Task&lt;ActionResult&gt; Create([Bind(Include=\"Id,Name,NickName,Designation,Dept\")] Employee employee)      {          if (ModelState.IsValid)          {              db.Employees.Add(employee);              await db.SaveChangesAsync();              return RedirectToAction(\"Index\");          }            return View(employee);      }        // GET: /Employee/Edit/5      public async Task&lt;ActionResult&gt; Edit(int? id)      {          if (id == null)          {              return new HttpStatusCodeResult(HttpStatusCode.BadRequest);          }          Employee employee = await db.Employees.FindAsync(id);          if (employee == null)          {              return HttpNotFound();          }          return View(employee);      }        // POST: /Employee/Edit/5      // To protect from overposting attacks, please enable the specific properties you want to bind to, for       // more details see http://go.microsoft.com/fwlink/?LinkId=317598.      [HttpPost]      [ValidateAntiForgeryToken]      public async Task&lt;ActionResult&gt; Edit([Bind(Include=\"Id,Name,NickName,Designation,Dept\")] Employee employee)      {          if (ModelState.IsValid)          {              db.Entry(employee).State = EntityState.Modified;              await db.SaveChangesAsync();              return RedirectToAction(\"Index\");          }          return View(employee);      }        // GET: /Employee/Delete/5      public async Task&lt;ActionResult&gt; Delete(int? id)      {          if (id == null)          {              return new HttpStatusCodeResult(HttpStatusCode.BadRequest);          }          Employee employee = await db.Employees.FindAsync(id);          if (employee == null)          {              return HttpNotFound();          }          return View(employee);      }        // POST: /Employee/Delete/5      [HttpPost, ActionName(\"Delete\")]      [ValidateAntiForgeryToken]      public async Task&lt;ActionResult&gt; DeleteConfirmed(int id)      {          Employee employee = await db.Employees.FindAsync(id);          db.Employees.Remove(employee);          await db.SaveChangesAsync();          return RedirectToAction(\"Index\");      }        protected override void Dispose(bool disposing)      {          if (disposing)          {              db.Dispose();          }          base.Dispose(disposing);      }  }    Step 7: Views – After selecting and executing template views are automatically created. Here is the views for CRUD operation of Employee.   Create.cshtml   @model MVCAsync.Models.Employee   &lt;!DOCTYPE html&gt;   &lt;html&gt; &lt;head&gt;     &lt;meta name=\"viewport\" content=\"width=device-width\" /&gt;     &lt;title&gt;Create&lt;/title&gt; &lt;/head&gt; &lt;body&gt;     @Scripts.Render(\"~/bundles/jquery\")     @Scripts.Render(\"~/bundles/jqueryval\")                 @using (Html.BeginForm())      {         @Html.AntiForgeryToken()                   &lt;div class=\"form-horizontal\"&gt;             &lt;h4&gt;Employee&lt;/h4&gt;             &lt;hr /&gt;             @Html.ValidationSummary(true)                   &lt;div class=\"form-group\"&gt;                 @Html.LabelFor(model =&gt; model.Name, new { @class = \"control-label col-md-2\" })                 &lt;div class=\"col-md-10\"&gt;                     @Html.EditorFor(model =&gt; model.Name)                     @Html.ValidationMessageFor(model =&gt; model.Name)                 &lt;/div&gt;             &lt;/div&gt;                   &lt;div class=\"form-group\"&gt;                 @Html.LabelFor(model =&gt; model.NickName, new { @class = \"control-label col-md-2\" })                 &lt;div class=\"col-md-10\"&gt;                     @Html.EditorFor(model =&gt; model.NickName)                     @Html.ValidationMessageFor(model =&gt; model.NickName)                 &lt;/div&gt;             &lt;/div&gt;                   &lt;div class=\"form-group\"&gt;                 @Html.LabelFor(model =&gt; model.Designation, new { @class = \"control-label col-md-2\" })                 &lt;div class=\"col-md-10\"&gt;                     @Html.EditorFor(model =&gt; model.Designation)                     @Html.ValidationMessageFor(model =&gt; model.Designation)                 &lt;/div&gt;             &lt;/div&gt;                   &lt;div class=\"form-group\"&gt;                 @Html.LabelFor(model =&gt; model.Dept, new { @class = \"control-label col-md-2\" })                 &lt;div class=\"col-md-10\"&gt;                     @Html.EditorFor(model =&gt; model.Dept)                     @Html.ValidationMessageFor(model =&gt; model.Dept)                 &lt;/div&gt;             &lt;/div&gt;                   &lt;div class=\"form-group\"&gt;                 &lt;div class=\"col-md-offset-2 col-md-10\"&gt;                     &lt;input type=\"submit\" value=\"Create\" class=\"btn btn-default\" /&gt;                 &lt;/div&gt;             &lt;/div&gt;         &lt;/div&gt;     }           &lt;div&gt;         @Html.ActionLink(\"Back to List\", \"Index\")     &lt;/div&gt; &lt;/body&gt; &lt;/html&gt;   Delete.cshtml   @model MVCAsync.Models.Employee     &lt;!DOCTYPE html&gt;   &lt;html&gt; &lt;head&gt;     &lt;meta name=\"viewport\" content=\"width=device-width\" /&gt;     &lt;title&gt;Delete&lt;/title&gt; &lt;/head&gt; &lt;body&gt;     &lt;h3&gt;Are you sure you want to delete this?&lt;/h3&gt;     &lt;div&gt;         &lt;h4&gt;Employee&lt;/h4&gt;         &lt;hr /&gt;         &lt;dl class=\"dl-horizontal\"&gt;             &lt;dt&gt;                 @Html.DisplayNameFor(model =&gt; model.Name)             &lt;/dt&gt;                   &lt;dd&gt;                 @Html.DisplayFor(model =&gt; model.Name)             &lt;/dd&gt;                   &lt;dt&gt;                 @Html.DisplayNameFor(model =&gt; model.NickName)             &lt;/dt&gt;                   &lt;dd&gt;                 @Html.DisplayFor(model =&gt; model.NickName)             &lt;/dd&gt;                   &lt;dt&gt;                 @Html.DisplayNameFor(model =&gt; model.Designation)             &lt;/dt&gt;                   &lt;dd&gt;                 @Html.DisplayFor(model =&gt; model.Designation)             &lt;/dd&gt;                   &lt;dt&gt;                 @Html.DisplayNameFor(model =&gt; model.Dept)             &lt;/dt&gt;                   &lt;dd&gt;                 @Html.DisplayFor(model =&gt; model.Dept)             &lt;/dd&gt;               &lt;/dl&gt;               @using (Html.BeginForm()) {             @Html.AntiForgeryToken()                   &lt;div class=\"form-actions no-color\"&gt;                 &lt;input type=\"submit\" value=\"Delete\" class=\"btn btn-default\" /&gt; |                 @Html.ActionLink(\"Back to List\", \"Index\")             &lt;/div&gt;         }     &lt;/div&gt; &lt;/body&gt; &lt;/html&gt;   Details.cshtml   @model MVCAsync.Models.Employee   &lt;!DOCTYPE html&gt;   &lt;html&gt; &lt;head&gt;     &lt;meta name=\"viewport\" content=\"width=device-width\" /&gt;     &lt;title&gt;Details&lt;/title&gt; &lt;/head&gt; &lt;body&gt;     &lt;div&gt;         &lt;h4&gt;Employee&lt;/h4&gt;         &lt;hr /&gt;         &lt;dl class=\"dl-horizontal\"&gt;             &lt;dt&gt;                 @Html.DisplayNameFor(model =&gt; model.Name)             &lt;/dt&gt;                   &lt;dd&gt;                 @Html.DisplayFor(model =&gt; model.Name)             &lt;/dd&gt;                   &lt;dt&gt;                 @Html.DisplayNameFor(model =&gt; model.NickName)             &lt;/dt&gt;                   &lt;dd&gt;                 @Html.DisplayFor(model =&gt; model.NickName)             &lt;/dd&gt;                   &lt;dt&gt;                 @Html.DisplayNameFor(model =&gt; model.Designation)             &lt;/dt&gt;                   &lt;dd&gt;                 @Html.DisplayFor(model =&gt; model.Designation)             &lt;/dd&gt;                   &lt;dt&gt;                 @Html.DisplayNameFor(model =&gt; model.Dept)             &lt;/dt&gt;                   &lt;dd&gt;                 @Html.DisplayFor(model =&gt; model.Dept)             &lt;/dd&gt;               &lt;/dl&gt;     &lt;/div&gt;     &lt;p&gt;         @Html.ActionLink(\"Edit\", \"Edit\", new { id = Model.Id }) |         @Html.ActionLink(\"Back to List\", \"Index\")     &lt;/p&gt; &lt;/body&gt; &lt;/html&gt;   Edit.cshtml   @model MVCAsync.Models.Employee     &lt;!DOCTYPE html&gt;   &lt;html&gt; &lt;head&gt;     &lt;meta name=\"viewport\" content=\"width=device-width\" /&gt;     &lt;title&gt;Edit&lt;/title&gt; &lt;/head&gt; &lt;body&gt;     @Scripts.Render(\"~/bundles/jquery\")     @Scripts.Render(\"~/bundles/jqueryval\")                 @using (Html.BeginForm())     {         @Html.AntiForgeryToken()                   &lt;div class=\"form-horizontal\"&gt;             &lt;h4&gt;Employee&lt;/h4&gt;             &lt;hr /&gt;             @Html.ValidationSummary(true)             @Html.HiddenFor(model =&gt; model.Id)                   &lt;div class=\"form-group\"&gt;                 @Html.LabelFor(model =&gt; model.Name, new { @class = \"control-label col-md-2\" })                 &lt;div class=\"col-md-10\"&gt;                     @Html.EditorFor(model =&gt; model.Name)                     @Html.ValidationMessageFor(model =&gt; model.Name)                 &lt;/div&gt;             &lt;/div&gt;                   &lt;div class=\"form-group\"&gt;                 @Html.LabelFor(model =&gt; model.NickName, new { @class = \"control-label col-md-2\" })                 &lt;div class=\"col-md-10\"&gt;                     @Html.EditorFor(model =&gt; model.NickName)                     @Html.ValidationMessageFor(model =&gt; model.NickName)                 &lt;/div&gt;             &lt;/div&gt;                   &lt;div class=\"form-group\"&gt;                 @Html.LabelFor(model =&gt; model.Designation, new { @class = \"control-label col-md-2\" })                 &lt;div class=\"col-md-10\"&gt;                     @Html.EditorFor(model =&gt; model.Designation)                     @Html.ValidationMessageFor(model =&gt; model.Designation)                 &lt;/div&gt;             &lt;/div&gt;                   &lt;div class=\"form-group\"&gt;                 @Html.LabelFor(model =&gt; model.Dept, new { @class = \"control-label col-md-2\" })                 &lt;div class=\"col-md-10\"&gt;                     @Html.EditorFor(model =&gt; model.Dept)                     @Html.ValidationMessageFor(model =&gt; model.Dept)                 &lt;/div&gt;             &lt;/div&gt;                   &lt;div class=\"form-group\"&gt;                 &lt;div class=\"col-md-offset-2 col-md-10\"&gt;                     &lt;input type=\"submit\" value=\"Save\" class=\"btn btn-default\" /&gt;                 &lt;/div&gt;             &lt;/div&gt;         &lt;/div&gt;     }           &lt;div&gt;         @Html.ActionLink(\"Back to List\", \"Index\")     &lt;/div&gt; &lt;/body&gt; &lt;/html&gt;   Index.cshtml   @model IEnumerable&lt;MVCAsync.Models.Employee&gt;   &lt;!DOCTYPE html&gt;   &lt;html&gt; &lt;head&gt;     &lt;meta name=\"viewport\" content=\"width=device-width\" /&gt;     &lt;title&gt;Index&lt;/title&gt; &lt;/head&gt; &lt;body&gt;     &lt;p&gt;         @Html.ActionLink(\"Create New\", \"Create\")     &lt;/p&gt;     &lt;table class=\"table\"&gt;         &lt;tr&gt;             &lt;th&gt;                 @Html.DisplayNameFor(model =&gt; model.Name)             &lt;/th&gt;             &lt;th&gt;                 @Html.DisplayNameFor(model =&gt; model.NickName)             &lt;/th&gt;             &lt;th&gt;                 @Html.DisplayNameFor(model =&gt; model.Designation)             &lt;/th&gt;             &lt;th&gt;                 @Html.DisplayNameFor(model =&gt; model.Dept)             &lt;/th&gt;             &lt;th&gt;&lt;/th&gt;         &lt;/tr&gt;           @foreach (var item in Model) {         &lt;tr&gt;             &lt;td&gt;                 @Html.DisplayFor(modelItem =&gt; item.Name)             &lt;/td&gt;             &lt;td&gt;                 @Html.DisplayFor(modelItem =&gt; item.NickName)             &lt;/td&gt;             &lt;td&gt;                 @Html.DisplayFor(modelItem =&gt; item.Designation)             &lt;/td&gt;             &lt;td&gt;                 @Html.DisplayFor(modelItem =&gt; item.Dept)             &lt;/td&gt;             &lt;td&gt;                 @Html.ActionLink(\"Edit\", \"Edit\", new { id=item.Id }) |                 @Html.ActionLink(\"Details\", \"Details\", new { id=item.Id }) |                 @Html.ActionLink(\"Delete\", \"Delete\", new { id=item.Id })             &lt;/td&gt;         &lt;/tr&gt;     }           &lt;/table&gt; &lt;/body&gt; &lt;/html&gt;   Step 8: Add a link to _Layout page to access Employee information in Views/Shared   &lt;ul class=\"nav navbar-nav\"&gt;     &lt;li&gt;@Html.ActionLink(\"Home\", \"Index\", \"Home\")&lt;/li&gt;     &lt;li&gt;@Html.ActionLink(\"About\", \"About\", \"Home\")&lt;/li&gt;     &lt;li&gt;@Html.ActionLink(\"Contact\", \"Contact\", \"Home\")&lt;/li&gt;     &lt;li&gt;@Html.ActionLink(\"Employee\", \"Index\", \"Employee\")&lt;/li&gt; &lt;/ul&gt;  Step 9: Run the following command in package manager console one after another   PM&gt; Enable-Migrations -ContextTypeName EmployeeDBContext PM&gt; Add-Migration created PM&gt; Update-Database –Verbose   Now run application and apply CRUD operation on it. It’s simple!!   ","categories": ["ASP.NET MVC","EF","C#"],
        "tags": ["aspnetmvc","ef","csharp"],
        "url": "http://localhost:4000/crud-operation-using-asynchronous-method-in-asp-net-mvc/",
        "teaser":null},{
        "title": "Generic Repository Pattern With ASP.NET MVC And Entity Framework",
        "excerpt":"Introduction  You may introduce with an Object Oriented Design Principle name DRY – Don’t repeat yourself. It is more important in Multi-tier architecture. We can use generic repository pattern to implement DRY.   What is Repository Pattern?  In most of the business operation we have to perform CRUD (Create, Read, Update and Delete) operation. A repository basically works as a mediator between our business logic layer and our data access layer of the application   Benefits of Repository Pattern      Centralizes data logic or service logic.   Provides a substitution point for the unit tests for both business logic and data access logic   Provides a flexible architecture   Can adopt new change easily   Domain driven development is easier   What is Generic Repository Pattern?  Generic Repository is a pattern by which we can use single repository for data access of all domain models. Generally, we used one repository for one model to access data.   Benefits of Generic Repository Pattern      Reduce redundancy of code   Force developer to work same pattern – Possibility of less error or no error   Easy to maintain – Centralize data access logic   Implementation Repository Pattern with ASP.NET MVC and Entity Framework   Let’s consider a project to keep Employee Information. Here I will show CRUD operation on employee information.   Tools and Technology used I used following tools and technology to develop the project – Implementation of generic repository      Visual Studio 2013   Visual C#   ASP.NET MVC 5   Entity Framework   Razor view engine   Step 1: Create an ASP.NET MVC 5 application using Visual Studio 2013.      Create an asp.net mvc project name - GenericRepo   Step 2: Configure connection string in web.config   &lt;connectionStrings&gt;   &lt;add name=\"DefaultConnection\" connectionString=\"Data Source=localhost;Initial Catalog=GenericRepoDB;User ID=sa; Password=leads@123\" providerName=\"System.Data.SqlClient\" /&gt; &lt;/connectionStrings&gt;   Step 3: Create Model – “Employee”   public class Employee {     public int Id { get; set; }     public string Name { get; set; }     public string FatherName { get; set; }     public string MotherName { get; set; }     public string Designation { get; set; }     public string Dept { get; set; } }    Step 4: Create a DbContext name GenericDbContext in Repository folder.   public class GenericRepoContext : DbContext {     public GenericRepoContext()         : base(\"DefaultConnection\")     {     }       public DbSet&lt;Employee&gt; Employees { get; set; }       protected override void OnModelCreating(DbModelBuilder modelBuilder)     {       } }   Step 5: Create IGenericRepository and GenericRepository in Repository folder   interface IGenericRepository&lt;T&gt; where T : class {     IEnumerable&lt;T&gt; SelectAll();     T SelectByID(object id);     void Insert(T obj);     void Update(T obj);     void Delete(object id);     void Save(); }   public class GenericRepository&lt;T&gt; : IGenericRepository&lt;T&gt; where T : class {     private GenericRepoContext db = null;     private DbSet&lt;T&gt; table = null;     public GenericRepository()     {         this.db = new GenericRepoContext();         table = db.Set&lt;T&gt;();     }     public GenericRepository(GenericRepoContext db)     {         this.db = db;         table = db.Set&lt;T&gt;();     }     public IEnumerable&lt;T&gt; SelectAll()     {         return table.ToList();     }     public T SelectByID(object id)     {         return table.Find(id);     }     public void Insert(T obj)     {         table.Add(obj);     }     public void Update(T obj)     {         table.Attach(obj);         db.Entry(obj).State = EntityState.Modified;     }     public void Delete(object id)     {         T existing = table.Find(id);         table.Remove(existing);     }     public void Save()     {         db.SaveChanges();     } }    Step 6: Create Employee Controller      Create a controller name – EmployeeController.   Select template “MVC5 Controller with read/write action”   public class EmployeeController : Controller {     private IGenericRepository&lt;Employee&gt; repository = null;     public EmployeeController()     {         this.repository = new GenericRepository&lt;Employee&gt;();     }         // GET: Employee     public ActionResult Index()     {         var employee = repository.SelectAll().ToList();         return View(employee);     }       // GET: Employee/Details/5     public ActionResult Details(int id)     {         var employee = repository.SelectByID(id);         return View(employee);     }       // GET: Employee/Create     public ActionResult Create()     {         return View();     }       // POST: Employee/Create     [HttpPost]     public ActionResult Create(Employee employee)     {         if (ModelState.IsValid)         {             repository.Insert(employee);             repository.Save();               return RedirectToAction(\"Index\");         }         return View(employee);     }       // GET: Employee/Edit/5     public ActionResult Edit(int id)     {         var employee = repository.SelectByID(id);         return View(employee);     }       // POST: Employee/Edit/5     [HttpPost]     public ActionResult Edit(Employee employee)     {         try         {             repository.Update(employee);             repository.Save();             return RedirectToAction(\"Index\");         }         catch         {             return View();         }     }       // GET: Employee/Delete/5     public ActionResult Delete(int id)     {         var employee = repository.SelectByID(id);         return View(employee);     }       // POST: Employee/Delete/5     [HttpPost]     public ActionResult Delete(int id, FormCollection collection)     {         try         {             repository.Delete(id);             repository.Save();             return RedirectToAction(\"Index\");         }         catch         {             return View();         }     } }   Step 7: Create List, Edit, Delete and details page against EmployeeController.      Right click on each action and add views   Index.cshtml   @model IEnumerable&lt;GenericRepo.Models.Employee&gt;   @{     ViewBag.Title = \"Index\"; }   &lt;h2&gt;Index&lt;/h2&gt;   &lt;p&gt;     @Html.ActionLink(\"Create New\", \"Create\") &lt;/p&gt; &lt;table class=\"table\"&gt;     &lt;tr&gt;         &lt;th&gt;             @Html.DisplayNameFor(model =&gt; model.Name)         &lt;/th&gt;         &lt;th&gt;             @Html.DisplayNameFor(model =&gt; model.FatherName)         &lt;/th&gt;         &lt;th&gt;             @Html.DisplayNameFor(model =&gt; model.MotherName)         &lt;/th&gt;         &lt;th&gt;             @Html.DisplayNameFor(model =&gt; model.Designation)         &lt;/th&gt;         &lt;th&gt;             @Html.DisplayNameFor(model =&gt; model.Dept)         &lt;/th&gt;         &lt;th&gt;&lt;/th&gt;     &lt;/tr&gt;   @foreach (var item in Model) {     &lt;tr&gt;         &lt;td&gt;             @Html.DisplayFor(modelItem =&gt; item.Name)         &lt;/td&gt;         &lt;td&gt;             @Html.DisplayFor(modelItem =&gt; item.FatherName)         &lt;/td&gt;         &lt;td&gt;             @Html.DisplayFor(modelItem =&gt; item.MotherName)         &lt;/td&gt;         &lt;td&gt;             @Html.DisplayFor(modelItem =&gt; item.Designation)         &lt;/td&gt;         &lt;td&gt;             @Html.DisplayFor(modelItem =&gt; item.Dept)         &lt;/td&gt;         &lt;td&gt;             @Html.ActionLink(\"Edit\", \"Edit\", new { id=item.Id }) |             @Html.ActionLink(\"Details\", \"Details\", new { id=item.Id }) |             @Html.ActionLink(\"Delete\", \"Delete\", new { id=item.Id })         &lt;/td&gt;     &lt;/tr&gt; }   &lt;/table&gt;   _CreateOrEdit.cshtml   @model GenericRepo.Models.Employee       &lt;div class=\"form-group\"&gt;         @Html.LabelFor(model =&gt; model.Name, htmlAttributes: new { @class = \"control-label col-md-2\" })         &lt;div class=\"col-md-10\"&gt;             @Html.EditorFor(model =&gt; model.Name, new { htmlAttributes = new { @class = \"form-control\" } })             @Html.ValidationMessageFor(model =&gt; model.Name, \"\", new { @class = \"text-danger\" })         &lt;/div&gt;     &lt;/div&gt;       &lt;div class=\"form-group\"&gt;         @Html.LabelFor(model =&gt; model.FatherName, htmlAttributes: new { @class = \"control-label col-md-2\" })         &lt;div class=\"col-md-10\"&gt;             @Html.EditorFor(model =&gt; model.FatherName, new { htmlAttributes = new { @class = \"form-control\" } })             @Html.ValidationMessageFor(model =&gt; model.FatherName, \"\", new { @class = \"text-danger\" })         &lt;/div&gt;     &lt;/div&gt;       &lt;div class=\"form-group\"&gt;         @Html.LabelFor(model =&gt; model.MotherName, htmlAttributes: new { @class = \"control-label col-md-2\" })         &lt;div class=\"col-md-10\"&gt;             @Html.EditorFor(model =&gt; model.MotherName, new { htmlAttributes = new { @class = \"form-control\" } })             @Html.ValidationMessageFor(model =&gt; model.MotherName, \"\", new { @class = \"text-danger\" })         &lt;/div&gt;     &lt;/div&gt;       &lt;div class=\"form-group\"&gt;         @Html.LabelFor(model =&gt; model.Designation, htmlAttributes: new { @class = \"control-label col-md-2\" })         &lt;div class=\"col-md-10\"&gt;             @Html.EditorFor(model =&gt; model.Designation, new { htmlAttributes = new { @class = \"form-control\" } })             @Html.ValidationMessageFor(model =&gt; model.Designation, \"\", new { @class = \"text-danger\" })         &lt;/div&gt;     &lt;/div&gt;       &lt;div class=\"form-group\"&gt;         @Html.LabelFor(model =&gt; model.Dept, htmlAttributes: new { @class = \"control-label col-md-2\" })         &lt;div class=\"col-md-10\"&gt;             @Html.EditorFor(model =&gt; model.Dept, new { htmlAttributes = new { @class = \"form-control\" } })             @Html.ValidationMessageFor(model =&gt; model.Dept, \"\", new { @class = \"text-danger\" })         &lt;/div&gt;     &lt;/div&gt;       &lt;div class=\"form-group\"&gt;         &lt;div class=\"col-md-offset-2 col-md-10\"&gt;             &lt;input type=\"submit\" value=\"Create\" class=\"btn btn-default\" /&gt;         &lt;/div&gt;     &lt;/div&gt;   Edit.cshtml   @model GenericRepo.Models.Employee     @using (Html.BeginForm()) {     @Html.AntiForgeryToken()       &lt;div class=\"form-horizontal\"&gt;         &lt;h4&gt;Employee&lt;/h4&gt;         &lt;hr /&gt;         @Html.ValidationSummary(true, \"\", new { @class = \"text-danger\" })         @Html.Partial(\"_CreateOrEdit\", Model)     &lt;/div&gt; }   &lt;div&gt;     @Html.ActionLink(\"Back to List\", \"Index\") &lt;/div&gt;   @section Scripts {     @Scripts.Render(\"~/bundles/jqueryval\") }    Delete.cshtml   @model GenericRepo.Models.Employee   &lt;h3&gt;Are you sure you want to delete this?&lt;/h3&gt; &lt;div&gt;     &lt;h4&gt;Employee&lt;/h4&gt;     &lt;hr /&gt;     &lt;dl class=\"dl-horizontal\"&gt;         &lt;dt&gt;             @Html.DisplayNameFor(model =&gt; model.Name)         &lt;/dt&gt;           &lt;dd&gt;             @Html.DisplayFor(model =&gt; model.Name)         &lt;/dd&gt;           &lt;dt&gt;             @Html.DisplayNameFor(model =&gt; model.FatherName)         &lt;/dt&gt;           &lt;dd&gt;             @Html.DisplayFor(model =&gt; model.FatherName)         &lt;/dd&gt;           &lt;dt&gt;             @Html.DisplayNameFor(model =&gt; model.MotherName)         &lt;/dt&gt;           &lt;dd&gt;             @Html.DisplayFor(model =&gt; model.MotherName)         &lt;/dd&gt;           &lt;dt&gt;             @Html.DisplayNameFor(model =&gt; model.Designation)         &lt;/dt&gt;           &lt;dd&gt;             @Html.DisplayFor(model =&gt; model.Designation)         &lt;/dd&gt;           &lt;dt&gt;             @Html.DisplayNameFor(model =&gt; model.Dept)         &lt;/dt&gt;           &lt;dd&gt;             @Html.DisplayFor(model =&gt; model.Dept)         &lt;/dd&gt;       &lt;/dl&gt;       @using (Html.BeginForm()) {         @Html.AntiForgeryToken()           &lt;div class=\"form-actions no-color\"&gt;             &lt;input type=\"submit\" value=\"Delete\" class=\"btn btn-default\" /&gt; |             @Html.ActionLink(\"Back to List\", \"Index\")         &lt;/div&gt;     } &lt;/div&gt;   Details.cshtml   @model GenericRepo.Models.Employee   &lt;div&gt;     &lt;h4&gt;Employee&lt;/h4&gt;     &lt;hr /&gt;     &lt;dl class=\"dl-horizontal\"&gt;         &lt;dt&gt;             @Html.DisplayNameFor(model =&gt; model.Name)         &lt;/dt&gt;           &lt;dd&gt;             @Html.DisplayFor(model =&gt; model.Name)         &lt;/dd&gt;           &lt;dt&gt;             @Html.DisplayNameFor(model =&gt; model.FatherName)         &lt;/dt&gt;           &lt;dd&gt;             @Html.DisplayFor(model =&gt; model.FatherName)         &lt;/dd&gt;           &lt;dt&gt;             @Html.DisplayNameFor(model =&gt; model.MotherName)         &lt;/dt&gt;           &lt;dd&gt;             @Html.DisplayFor(model =&gt; model.MotherName)         &lt;/dd&gt;           &lt;dt&gt;             @Html.DisplayNameFor(model =&gt; model.Designation)         &lt;/dt&gt;           &lt;dd&gt;             @Html.DisplayFor(model =&gt; model.Designation)         &lt;/dd&gt;           &lt;dt&gt;             @Html.DisplayNameFor(model =&gt; model.Dept)         &lt;/dt&gt;           &lt;dd&gt;             @Html.DisplayFor(model =&gt; model.Dept)         &lt;/dd&gt;       &lt;/dl&gt; &lt;/div&gt; &lt;p&gt;     @Html.ActionLink(\"Edit\", \"Edit\", new { id = Model.Id }) |     @Html.ActionLink(\"Back to List\", \"Index\") &lt;/p&gt;    Step 8: Add a link “Employee” to _Layout page like below   &lt;ul class=\"nav navbar-nav\"&gt;            &lt;li&gt;@Html.ActionLink(\"Home\", \"Index\", \"Home\")&lt;/li&gt;            &lt;li&gt;@Html.ActionLink(\"About\", \"About\", \"Home\")&lt;/li&gt;            &lt;li&gt;@Html.ActionLink(\"Contact\", \"Contact\", \"Home\")&lt;/li&gt;            &lt;li&gt;@Html.ActionLink(\"Employee\", \"Index\", \"Employee\")&lt;/li&gt;  &lt;/ul&gt;   Step 9: Write following command in package manager console   PM&gt; Enable-Migrations -ContextTypeName GenericRepoContext PM&gt; Add-Migration initalcreate PM&gt; Update-Database -Verbose -Force   Now your project is ready. Run application and execute CRUD operation on it.   Source code  ","categories": ["ASP.NET MVC","Design Pattern","EF","C#"],
        "tags": ["aspnetmvc","designpattern","ef","csharp"],
        "url": "http://localhost:4000/generic-repository-pattern-with-asp-net-mvc-and-entity-framework/",
        "teaser":null},{
        "title": "Dependency Injection Using Ninject In ASP.NET MVC",
        "excerpt":"What is Dependency Injection?  In software engineering, dependency injection is a software design pattern that implements inversion of control for resolving dependencies. – Wikipedia. It makes software components are loosely coupled.   Advantages of Dependency Injection      Flexibility to use alternative implementation of service.   Configurable &amp; easy to use   Make system loosely couple   Code becomes more reusable, testable, readable and manageable.   Reduction of boilerplate code in the application objects   What is Ninject?     Open Source Inversion of Control (IOC)   It is a Dependency Injector for .NET created by Nate Kohari   It’s very easy to use.   Easily add from nuget.   For more information visit Ninject.org   Let’s come to the implementation of DI using Ninject in ASP.NET MVC   Tools and Technology used  I used following tools and technology to develop the project –      Visual Studio 2013   Visual C#   ASP.NET MVC 5   Entity Framework 6   Razor view engine   Ninject for MVC5   Step 1: Create a ASP.net MVC Project     From Visual studio 2013, choose File-&gt;Project   Select MVC Template and click OK   Step 2: Create a model name Employee   Create a Model name Employee in model folder   public class Employee {     public int Id { get; set; }     public string Name { get; set; }     public string Designation { get; set; }     public string Dept { get; set; }     public string BloodGroup { get; set; } }   Step 3: Change or Add Connection String      Change or Add connection string in Web.config ```xml           __Step 4: Create a Context class__ * Create HRMContext Class in Repository folder.   ```csharp public class HRMContext : DbContext {     public HRMContext()         : base(\"DefaultConnection\")     {     }     public DbSet &lt; Employee &gt; Employees { get; set; } }   Step 5: Create Repository Interface and Concrete Class     Create IEmployeeRepository Interface and EmployeeRepository class in Repository folder   public interface IEmployeeRepository : IDisposable {     IQueryable &lt;Employee&gt; All { get; }     Employee Find(int? id);     void InsertOrUpdate(Employee employee);     void Delete(int id);     void Save(); }     public class EmployeeRepository : IEmployeeRepository {       HRMContext context;     public EmployeeRepository(HRMContext context)     {         this.context = context;     }       public IQueryable &lt;Employee&gt; All     {         get { return context.Employees; }     }       public Employee Find(int? id)     {         Employee objEmployee = new Employee();         objEmployee = context.Employees.Where(p =&gt; p.Id == id).FirstOrDefault();         return objEmployee;     }       public void InsertOrUpdate(Employee employee)     {         if (employee.Id == default(int))         {             // New entity             context.Employees.Add(employee);         }         else         {             // Existing entity             context.Entry(employee).State = System.Data.Entity.EntityState.Modified;         }     }       public void Delete(int id)     {         var employee = context.Employees.Find(id);         context.Employees.Remove(employee);     }       public void Save()     {         context.SaveChanges();     }       public void Dispose()     {         context.Dispose();     } }    Step 6: Install Ninject from nuget      In nuget package manager search and install Ninject.MVC5   Step 7: Map Interface and Concrete class in Ninject     Go to NinjectWebCommon file in App_Start folder. Add the following line for IEmployee Interface and Employee concrete class.       public static class NinjectWebCommon      {         private static readonly Bootstrapper bootstrapper = new Bootstrapper();           /// &lt;summary&gt;         /// Starts the application         /// &lt;/summary&gt;         public static void Start()          {             DynamicModuleUtility.RegisterModule(typeof(OnePerRequestHttpModule));             DynamicModuleUtility.RegisterModule(typeof(NinjectHttpModule));             bootstrapper.Initialize(CreateKernel);         }                   /// &lt;summary&gt;         /// Stops the application.         /// &lt;/summary&gt;         public static void Stop()         {             bootstrapper.ShutDown();         }                   /// &lt;summary&gt;         /// Creates the kernel that will manage your application.         /// &lt;/summary&gt;         /// &lt;returns&gt;The created kernel.&lt;/returns&gt;         private static IKernel CreateKernel()         {             var kernel = new StandardKernel();             try             {                 kernel.Bind&lt;Func&lt;IKernel&gt;&gt;().ToMethod(ctx =&gt; () =&gt; new Bootstrapper().Kernel);                 kernel.Bind&lt;IHttpModule&gt;().To&lt;HttpApplicationInitializationHttpModule&gt;();                   kernel.Bind&lt;IEmployeeRepository&gt;().To&lt;EmployeeRepository&gt;();                   RegisterServices(kernel);                 return kernel;             }             catch             {                 kernel.Dispose();                 throw;             }         }           /// &lt;summary&gt;         /// Load your modules or register your services here!         /// &lt;/summary&gt;         /// &lt;param name=\"kernel\"&gt;The kernel.&lt;/param&gt;         private static void RegisterServices(IKernel kernel)         {         }             }   Step 8: Create Controller and Views     Click Right button on Controller Folder-&gt;Add Controller.   Choose its name as EmployeeController.   Now choose scaffolding template - Web API 2 Controller with actions, using Entity Framework.   After clicking Add button, Employee Controller and Corresponding actions and views will be created automatically.   Step 9: Modify the controller      Modify the controller - use repository instead of context directly.   public class EmployeesController : Controller {     private readonly IEmployeeRepository repository;       public EmployeesController(IEmployeeRepository objIrepository)     {         repository = objIrepository;     }       // GET: Employees     public ActionResult Index()     {         return View(repository.All.ToList());     }       // GET: Employees/Details/5     public ActionResult Details(int? id)     {         if (id == null)         {             return new HttpStatusCodeResult(HttpStatusCode.BadRequest);         }         Employee employee = repository.Find(id);         if (employee == null)         {             return HttpNotFound();         }         return View(employee);     }       // GET: Employees/Create     public ActionResult Create()     {         return View();     }       // POST: Employees/Create     // To protect from overposting attacks, please enable the specific properties you want to bind to, for      // more details see http://go.microsoft.com/fwlink/?LinkId=317598.     [HttpPost]     [ValidateAntiForgeryToken]     public ActionResult Create([Bind(Include = \"Id,Name,Designation,Dept,BloodGroup\")] Employee employee)     {         if (ModelState.IsValid)         {             repository.InsertOrUpdate(employee);             repository.Save();             return RedirectToAction(\"Index\");         }           return View(employee);     }       // GET: Employees/Edit/5     public ActionResult Edit(int? id)     {         if (id == null)         {             return new HttpStatusCodeResult(HttpStatusCode.BadRequest);         }         Employee employee = repository.Find(id);         if (employee == null)         {             return HttpNotFound();         }         return View(employee);     }       // POST: Employees/Edit/5     // To protect from overposting attacks, please enable the specific properties you want to bind to, for      // more details see http://go.microsoft.com/fwlink/?LinkId=317598.     [HttpPost]     [ValidateAntiForgeryToken]     public ActionResult Edit([Bind(Include = \"Id,Name,Designation,Dept,BloodGroup\")] Employee employee)     {         if (ModelState.IsValid)         {             repository.InsertOrUpdate(employee);             repository.Save();             return RedirectToAction(\"Index\");         }         return View(employee);     }       // GET: Employees/Delete/5     public ActionResult Delete(int? id)     {         if (id == null)         {             return new HttpStatusCodeResult(HttpStatusCode.BadRequest);         }         Employee employee = repository.Find(id);         if (employee == null)         {             return HttpNotFound();         }         return View(employee);     }       // POST: Employees/Delete/5     [HttpPost, ActionName(\"Delete\")]     [ValidateAntiForgeryToken]     public ActionResult DeleteConfirmed(int id)     {         repository.Delete(id);         repository.Save();         return RedirectToAction(\"Index\");     }       protected override void Dispose(bool disposing)     {         if (disposing)         {             repository.Dispose();         }         base.Dispose(disposing);     } }    Step 10: Run command in Package Manager Console      To find Package manager console go to Tool-&gt;NuGet Package Manager -&gt; Package Manager Console   Now, run the following command one by one in Package Manager Console.   PM&gt; Enable-Migrations -ContextTypeName HRMContext PM&gt; Add-Migration initialmigration PM&gt; Update-Database -Verbose   Step 11: Add a menu     Add a menu name employee in _Layout.cshtml page to create a menu.    &lt;ul class=\"nav navbar-nav\"&gt;     &lt;li&gt;@Html.ActionLink(\"Home\", \"Index\", \"Home\")&lt;/li&gt;     &lt;li&gt;@Html.ActionLink(\"About\", \"About\", \"Home\")&lt;/li&gt;     &lt;li&gt;@Html.ActionLink(\"Contact\", \"Contact\", \"Home\")&lt;/li&gt;     &lt;li&gt;@Html.ActionLink(\"Employee\", \"Index\", \"Employees\")&lt;/li&gt; &lt;/ul&gt;      Run the application and click “Employee” menu. Now you can create, delete, read update employee information.      ","categories": ["ASP.NET MVC","Design Pattern","EF","C#"],
        "tags": ["aspnetmvc","designpattern","ef","csharp"],
        "url": "http://localhost:4000/dependency-injection-using-ninject-in-asp-net-mvc/",
        "teaser":null},{
        "title": "How to solve error: Bobj Is Undefined",
        "excerpt":"Problem Statement  I have an application developed with the following tools and technologies.      MS .NET Framework 4.5   SAP Crystal Report 13.5   ASP.NET Web form   SQL Server 2008 R2   In deployment server the report is not displayed. Instead I found a javascript error “bobj is undefined”. But it works fine in development server.   Solutions      Copy aspnet_client folder (From a running project) from c:\\inetpub\\wwwroot folder to the new website root folder. For example: c:\\inetpub\\wwwroot   Create a virtual directory called aspnet_client that points to c:\\inetpub\\wwwroot\\aspnet_client inside the new website   If this is a 32 bit application running on a 64 bit OS, make sure the application pool is set to 32 bit   Set application pool to run under Local System Account   Change application pool to Classic mode.  ","categories": ["Troubleshooting","Crystal Report"],
        "tags": ["troubleshooting","crystalreport"],
        "url": "http://localhost:4000/bobj-is-undefined/",
        "teaser":null},{
        "title": "Generic Repository Pattern With ASP.NET MVC And Entity Framework",
        "excerpt":"    Generic Repository Pattern with ASP.NET MVC and EF  from Mahedee Hasan  ","categories": ["ASP.NET MVC","EF","Design Pattern","C#","Slides"],
        "tags": ["ASP.NET MVC","ef","designpattern","csharp","slides"],
        "url": "http://localhost:4000/generic-repository-pattern-with-asp-net-mvc-and-entity-framework-2/",
        "teaser":null},{
        "title": "Multiple DbContext In A Single Asp.Net Mvc Applications With EF Code First",
        "excerpt":"Is it possible to create multiple DbContext in a single asp.net application with entity framework code first? Yes! Then, How!! This was the questions to me for a couple of weeks. Here is the simple article where you will get all answer. First, I want to say, yes it is possible to create multiple DbContext in a single asp.net application with entity framework code first.   Let’s see how to create multiple DbContext   Tools and Technology used  I used following tools and technology for my project –      Visual Studio 2013   Visual C#   ASP.NET MVC 5   Entity Framework 6   Here, I have an application name PMTool with two DbContext name PMToolContext and SecurityContext.   Step 1: Enable Migration  If you run only Enable-Migrations in package manager console, you will get following error.   PM&gt; Enable-Migrations More than one context type was found in the assembly 'PMTool'. To enable migrations for 'PMTool.Repository.SecurityContext', use Enable-Migrations -ContextTypeName PMTool.Repository.SecurityContext. To enable migrations for 'PMTool.Repository.PMToolContext', use Enable-Migrations -ContextTypeName PMTool.Repository.PMToolContext.   So you have to run enable-migration for each context. You have to specify the directory for each Configuration.cs also. Now run the command in package manager console in the following way.   PM&gt; Enable-Migrations -ContextTypeName PMToolContext -MigrationsDirectory Migrations\\PMToolContext Checking if the context targets an existing database... Code First Migrations enabled for project PMTool. PM&gt; Enable-Migrations -ContextTypeName SecurityContext -MigrationsDirectory Migrations\\SecurityContext Checking if the context targets an existing database... Code First Migrations enabled for project PMTool.   Step 2: Add Migration  Use fully qualified name of the configuration class as follows.   PM&gt; Add-Migration -ConfigurationTypeName PMTool.Migrations.PMToolContext.Configuration FirstMigForPMTool Scaffolding migration 'FirstMigForPMTool'.   PM&gt; Add-Migration -ConfigurationTypeName PMTool.Migrations.SecurityContext.Configuration FirstMigForSecurity Scaffolding migration 'FirstMigForSecurity'.   Step 3: Update database   Now update the database. Use fully qualified name of configuration class here also.   PM&gt; Update-Database -ConfigurationTypeName PMTool.Migrations.PMToolContext.Configuration Specify the '-Verbose' flag to view the SQL statements being applied to the target database. Applying explicit migrations: [201512071619030_FirstMigForPMTool]. Applying explicit migration: 201512071619030_FirstMigForPMTool. Running Seed method. PM&gt; Update-Database -ConfigurationTypeName PMTool.Migrations.SecurityContext.Configuration Specify the '-Verbose' flag to view the SQL statements being applied to the target database. Applying explicit migrations: [201512071627058_FirstMigForSecurity]. Applying explicit migration: 201512071627058_FirstMigForSecurity. Running Seed method.   If each commands run individually, means you could use multiple DbContext in an asp.net web application with Entity framework. Let’s cheer!!  ","categories": ["ASP.NET","ASP.NET MVC","EF"],
        "tags": ["aspnet","ASP.NET MVC","ef"],
        "url": "http://localhost:4000/multiple-dbcontext-in-a-single-asp-net-mvc-applications-with-ef-code-first/",
        "teaser":null},{
        "title": "Introduction to Team Foundation Server 2013",
        "excerpt":"    Introduction to TFS 2013  from Mahedee Hasan  ","categories": ["TFS","Source Control","Slides"],
        "tags": ["tfs","sourcecontrol","slides"],
        "url": "http://localhost:4000/introduction-to-team-foundation-server-2013/",
        "teaser":null},{
        "title": "The World Of Enterprise Solution Development With Asp.Net And C#",
        "excerpt":"    The world of enterprise solution development with asp.net and C#  from Mahedee Hasan  ","categories": ["ASP.NET","C#","Slides"],
        "tags": ["aspnet","csharp","slides"],
        "url": "http://localhost:4000/the-world-of-enterprise-solution-development-with-asp-net-and-c/",
        "teaser":null},{
        "title": "Introduction To OMNeT++",
        "excerpt":"    Introduction to OMNeT++  from Mahedee Hasan  ","categories": ["Simulation","OMNeT++","Slides"],
        "tags": ["simulation","omnetplusplus","slides"],
        "url": "http://localhost:4000/introduction-to-omnet/",
        "teaser":null},{
        "title": "Introduction To OData Services Using ASP.NET Web API",
        "excerpt":"What is OData?   OData Stands for Open Data Protocol. It is a data access protocol for the web. OData provides a uniform way to query and manipulate data sets through CRUD operations (create, read, update, and delete). OData consumption can be done across different Programming Language. ASP.NET Web API supports both OData v3 and V4.   Advantages of OData Services      OData based on REST Architecture so we can retrieve data using URL   Support CRUD Operation using HTTP Method like GET, POST, PUT, DELETE   Support HTTP, JSON and Atom Pub   It is very light weight, so interaction of client and server is very fast   Disadvantage      Since it is URL based so many people think it is less secure   It does not support all type of custom query   Let’s implement OData Services using ASP.NET Web API   Tools and Technology used  I used following tools and technology to develop the project –      Visual Studio 2013   Visual C#   ASP.NET Web API 2   Entity Framework 6   Postman(Google postman)   Step 1: Create a ASP.net Web API Project      Open visual studio and then go File -&gt; Project -&gt; ASP.NET Web Application   select Web API and press OK   Step 2: Install Microsoft.AspNet.Odata      Select Tool -&gt; NuGet Package Manager &gt; Package Manager Console   Type following command in package manager console     PM&gt; Install-Package Microsoft.AspNet.Odata          Step 3: Create a model class name Employee       Create a Model class name Employee in Model folder   public class Employee {     public int Id { get; set; }     public string Name { get; set; }     public string Designation { get; set; }     public string Dept { get; set; }     public string BloodGroup { get; set; } }   Step 4: Change or Add Connection String   Change or Add connection string in Web.config   &lt;add name=\"DefaultConnection\" connectionString=\"Data Source=(LocalDb)\\v11.0;AttachDbFilename=|DataDirectory|\\HRMDB.mdf;Initial Catalog=HRMDB;Integrated Security=True\" providerName=\"System.Data.SqlClient\" /&gt;   Step 5: Create a Context class      Create HRMContext class in Model  folder.       public class HRMContext : DbContext   {       public HRMContext()           : base(\"DefaultConnection\")       {       }       public DbSet&lt;Employee&gt; Employees { get; set; }   }           Step 6: Add Employee Controller           Press right button on Controller folder -&gt; Add -&gt; Controller       Now choose “Web API 2 OData v3 Controller with actions, using Entity Framework” scaffolding template and then press Add.   Now choose Controller Name as EmployeeController, Model name as Employee and Context name as HRMContext and click Add.   The following code will be generated on corresponding for the controller.   public class EmployeeController : ODataController {     private HRMContext db = new HRMContext();       // GET: odata/Employee     [EnableQuery]     public IQueryable&amp;ltEmployee&amp;gt GetEmployee()     {         return db.Employees;     }       // GET: odata/Employee(5)     [EnableQuery]     public SingleResult&amp;ltEmployee&amp;gt GetEmployee([FromODataUri] int key)     {         return SingleResult.Create(db.Employees.Where(employee =&gt; employee.Id == key));     }       // PUT: odata/Employee(5)     public IHttpActionResult Put([FromODataUri] int key, Delta&lt;Employee&gt; patch)     {         Validate(patch.GetEntity());           if (!ModelState.IsValid)         {             return BadRequest(ModelState);         }           Employee employee = db.Employees.Find(key);         if (employee == null)         {             return NotFound();         }           patch.Put(employee);           try         {             db.SaveChanges();         }         catch (DbUpdateConcurrencyException)         {             if (!EmployeeExists(key))             {                 return NotFound();             }             else             {                 throw;             }         }           return Updated(employee);     }       // POST: odata/Employee     public IHttpActionResult Post(Employee employee)     {         if (!ModelState.IsValid)         {             return BadRequest(ModelState);         }           db.Employees.Add(employee);         db.SaveChanges();           return Created(employee);     }       // PATCH: odata/Employee(5)     [AcceptVerbs(\"PATCH\", \"MERGE\")]     public IHttpActionResult Patch([FromODataUri] int key, Delta&lt;Employee&gt; patch)     {         Validate(patch.GetEntity());           if (!ModelState.IsValid)         {             return BadRequest(ModelState);         }           Employee employee = db.Employees.Find(key);         if (employee == null)         {             return NotFound();         }           patch.Patch(employee);           try         {             db.SaveChanges();         }         catch (DbUpdateConcurrencyException)         {             if (!EmployeeExists(key))             {                 return NotFound();             }             else             {                 throw;             }         }           return Updated(employee);     }       // DELETE: odata/Employee(5)     public IHttpActionResult Delete([FromODataUri] int key)     {         Employee employee = db.Employees.Find(key);         if (employee == null)         {             return NotFound();         }           db.Employees.Remove(employee);         db.SaveChanges();           return StatusCode(HttpStatusCode.NoContent);     }       protected override void Dispose(bool disposing)     {         if (disposing)         {             db.Dispose();         }         base.Dispose(disposing);     }       private bool EmployeeExists(int key)     {         return db.Employees.Count(e =&gt; e.Id == key) &gt; 0;     } }    Step 7: Configure OData End Point      Open the file App_Start/WebApiConfig.cs.   Add the following references   using System.Web.Http.OData.Builder; using System.Web.Http.OData.Extensions; using Web.OData.Models;      Add the following code in the register method.     public static class WebApiConfig {   public static void Register(HttpConfiguration config)   {     ODataConventionModelBuilder builder = new ODataConventionModelBuilder();     builder.EntitySet&lt;Employee&gt;(\"Employee\");     config.Routes.MapODataServiceRoute(\"odata\", \"odata\", builder.GetEdmModel());   } }           Step 8: Enable Migration      Type the following command in package manager console to enable migration     PM&gt; Enable-Migrations -ContextTypeName HRMContext           After pressing enter you will see a class name Configuration is created in Mingrations folder with some codes.   Step 9: Add seed data and add migration      Modify the Seed() method of Configuration class like below to add some seed data.           protected override void Seed(Web.OData.Models.HRMContext context)         {               context.Employees.AddOrUpdate(               p =&gt; p.Name,               new Employee { Name = \"Mahedee Hasan\", Designation = \"Software Architect\", Dept = \"SSD\", BloodGroup = \"A+\" },               new Employee { Name = \"Kazi Aminur Rashid\", Designation = \"AGM\", Dept = \"SSD\", BloodGroup = \"NA\" },               new Employee { Name = \"Tauhidul Haque\", Designation = \"DGM\", Dept = \"SSD\", BloodGroup = \"A+\" }             );   }       Now type the following command in the package manager console to add a migration.   PM&gt; Add-Migration initialmigration   Step 10: Update database and attaché mdf file      Now type the following command in package manager console.     PM&gt; Update-Database –Verbose                You will see two file .mdf and .ldf is created in your App_data directory. Now attached the file to your application.       Now run you application.   Run Postman.   Type http://localhost:64126/odata/Employee in your postbox you will see following output in JSON format. Use port number on which your application currently running instead of 64126.      Now, it’s working…!! Cheers!!!   Source Code  ","categories": ["ASP.NET MVC","C#","Web API","OData"],
        "tags": ["aspnetmvc","csharp","webapi","odata"],
        "url": "http://localhost:4000/introduction-to-odata-services-using-asp-net-web-api/",
        "teaser":null},{
        "title": "ASP.NET Application Performance Tuning And Scalability Improvement (Part – 1)",
        "excerpt":"Every developers and customer wants his/her application performed well. But it is very tricky to improve performance of a web application. It’s actually depends on different parameter like HTML client, HTTP network, Web server, middle-tier components, database components, resource-management components, TCP/IP networks, and database servers. Sometimes performance of the application increases drastically, if you change a single parameter. Sometimes you have to change multiple parameters. Here are the some performance optimization tips for ASP.NET web applications which may help you to increase performance of ASP.NET Application.   Prepare release with release mode  When prepare release for deployment, select release mode instead of debug mode.   How affect in performance?      If you choose debug mode instead of release mode, you are creating pdb (program database – uses for debugging) files which creates extra overhead. For this reason you may face timeout problem.   Best Practice      Always prepare release in release mode.      In Web.Config, Set debug=”false”   Set debug=”false” in web.config as follows after deploying your application. By default debug=”true” when you create a web application. It is necessary to set debug=”true” in development environment.   &lt;system.web&gt;   &lt;compilation debug=\"false\" targetFramework=\"4.5.1\" /&gt; &lt;/system.web&gt;   How affect in performance?   If you set debug = “true”, application requires the pdb information to be inserted into the file and that results in a comparatively larger file and hence processing will be slow.   Best Practice   In deployment server, set debug = “false” in web.config   Turn off Tracing unless until required  Sometimes developers need to trace the application to monitor the executions of application or a pages. It requires for application diagnostic purposes.   How affect in performance?   When trace is enabled it loaded extra information to the pages which degrades performances.   Best Practice      Always set trace enabled = “false” unless or until you required to monitor a page’s executions. Set trace enable = “false” as follows in web.config.   &lt;system.web&gt;     &lt;trace enabled=\"true\" pageOutput=\"true\" requestLimit=\"10\" localOnly=\"false\" mostRecent=\"true\" traceMode=\"SortByTime\"/&gt; &lt;/system.web&gt;   Carefully manage session state Session state is a very useful feature of asp.net. Though, ASP.NET manages session state by default, we must pay attention of session memory management.   How affect in performance?     When you store your data in in-process or on a state server or in a SQL Database, session state, it requires memory.   It is also time consuming when you store or retrieve data in-process or state server or SQL server.   Best Practice           If your page is static, it is recommended not to use session state. In such cases where you don’t need to use session state, disable it on your web form using the following directive: &lt;@%Page EnableSessionState=”false”%&gt;            In case you use the session state only to retrieve data and not to update, make the session state read-only using the following directive. &lt;@%Page EnableSessionState =”ReadOnly”%&gt;            If your application session state is out of process then consider carefully whether there is a need of the state server or SQL Server mode. SQL Server session mode provides lower performance than state server mode.            Try to avoid keeping object in session. Since it requires serializing then de-serializing which affected in performance.            Use client-side state management than server side.       Disable View State of a page if not required      It stores data in the generated HTML using hidden field not on the server.   View State provides page level state management   As long as the user is on the current page, state is available and the user redirects to the next page and the current page state is lost   View State can store any type of data because it is object type but it is preferable not to store a complex type of data due to the need for serialization and deserialization on each post back   How affect in performance?      It increases the total payload of a page when submitted and when serving request.   Serialization and deserialization of the data is required when submitting data and gets requested data.   View state increases the memory allocations on the server.   Best Practice      Pages that do not have any server postback events can have the view state turned off.   The default behaviour of the View State property is enabled, but if you don’t need it, you can turn it off at the control or page level.   Within a control, simply set the EnableViewState property to false, or set it globally within the page using this setting.   &lt;%@ Page EnableViewState=\"false\" %&gt;   Use finally block to release resources We always uses try, catch and finally block for exception handling. Finally block executes whether any exception occurs or not.   How affect in performance?      Sometimes application occupy resources where as it doesn’t need it. It is occur due to bad programming.   Best Practice      Always use a finally block to release resources like closing database connections, closing files, disposing objects and other resources.   Avoid unnecessary round trips to the server   How affect in performance?      Unnecessary round trips significantly effect on web application performance.   It increases network latency and downstream server latency.   Many data-driven Web sites heavily access the database for every user request. While connection pooling helps, the increased network traffic and processing load on the database server can adversely affect performance.   Best Practice      Keep round trips as minimum as possible   Use Ajax or partial page load instead of full page reload or refresh.   Choose low cost authentication  Authentication is a main factor for a secured applications. You must take decision which authentication will you use? Keep in mind, passport authentication is slower than form-base authentication which is slower than Windows authentication.   Use paging in grid view  In asp.net web application to show data in tabular format, generally we use grid view. Besides this we also uses DataGrid, JQgrid, Telerik grid, Kendo Grid etc. For huge number of data we cannot think general way because it takes huge time to load.   Best Practice      To load grid view faster take advantages of paging, it shows small subsets of data at a time. JQGrid is faster than asp.net grid view because it does everything in client side.   Minimizes number of web server control   How affect in performance?      The uses of web server controls increase the response time.   Web server controls go to the server executes all of its life cycle and then rendered on the client side.   Best Practice      Don’t use server control unless until required. Use HTML elements where suited.   ","categories": ["ASP.NET MVC","C#"],
        "tags": ["aspnetmvc","csharp"],
        "url": "http://localhost:4000/asp-net-application-performance-tuning-and-scalability-improvement-part-1/",
        "teaser":null},{
        "title": "Cascading Dropdown List In ASP.Net MVC A Sample Demonstration",
        "excerpt":"Last couple of weeks I found a good number of requests from my trainees and some .NET developers. They request me for sample code or a demonstration of cascading dropdown list in ASP.NET MVC. That’s why, I am writing this article. Cascading dropdown list is actually a parent child dropdown list. In this article I showed two dropdown lists one is category dropdown list and other is product dropdown list. Product dropdown list will be populated on the basis of category (selected category).   Let’s implement cascading dropdown list in ASP.NET MVC   Tools and Technology used  I used following tools and technology to develop the project –      Visual Studio 2013   Visual C#   ASP.NET MVC 5   Entity Framework 6   JQuery Ajax   Step 1: Create a ASP.NET MVC Project     Open visual studio and then go   File -&gt; Project -&gt; ASP.NET Web Application   Create an ASP.NET MVC project   Step 2: Install Json.NET     Click right button on Project -&gt; NuGet Packages   Search Json.NET   Select and install Json.NET   Keep note that in this moment, your internet connection must on.   Step 3: Create a local database     Click right button on App_Data folder -&gt; Select Add -&gt; SQL Server Database.   Type Item name as InventoryDB. You can choose any type you want. You will see Inventory.mdf file is created in App_Data folder   Step 4: Modify connection string. Modify connection string as below because you are using localdb.   &lt;connectionStrings&gt;   &lt;add name=\"DefaultConnection\" connectionString=\"Data Source=(LocalDb)\\v11.0;AttachDbFilename=|DataDirectory|\\InventoryDB.mdf;Initial Catalog=InventoryDB;Integrated Security=True\" providerName=\"System.Data.SqlClient\" /&gt; &lt;/connectionStrings&gt;   Step 5: Create a model for the application.   Create a model class name Category in model folder   public class Category {     public int Id { get; set; }     public string Name { get; set; }     public List&lt;Product&gt; Products { get; set; } }   Create a model class name Product in model folder   public class Product {     public int Id { get; set; }     public string Name { get; set; }       public int CategoryId { get; set; }       [ForeignKey(\"CategoryId\")]     public virtual Category Category { get; set; } }    Create a model name Item in model folder   public class Item {     public int Id { get; set; }     public string Name { get; set; }       [Display(Name = \"Category\")]     public int CategoryId { get; set; }     [ForeignKey(\"CategoryId\")]     public virtual Category Category { get; set; }       [Display(Name = \"Products\")]     public int ProductId { get; set; }     [ForeignKey(\"ProductId\")]     public Product Product { get; set; } }    Step 6: Create Context Class  Create a context class in model folder name InventoryDBContext as follows   public class InventoryDBContext : DbContext {     public InventoryDBContext()         : base(\"DefaultConnection\")     {       }       public DbSet&lt;Category&gt; Categories { get; set; }     public DbSet&lt;Product&gt; Products { get; set; }     public DbSet&lt;Item&gt; Items { get; set; } }    Step 7: Enable Migration      Go to Tools-&gt; NuGet Package Manager -&gt; Package Manger Console   Type the following command in package manager console to enable migration     PM&gt; Enable-Migrations -ContextTypeName InventoryDBContext           After pressing enter you will see a class name Configuration is created in Migrations folder with some codes. Now add seed data in Seed method of Configuration class in Migrations folder as follows.   internal sealed class Configuration : DbMigrationsConfiguration&lt;Web.Mahedee.net.Models.InventoryDBContext&gt; {     public Configuration()     {         AutomaticMigrationsEnabled = false;     }       protected override void Seed(Web.Mahedee.net.Models.InventoryDBContext context)     {         context.Categories.AddOrUpdate(             p =&gt; p.Name,             new Category             {                 Name = \"Electronics\",                 Products = new List&lt;Product&gt; {                      new Product{Name = \"Mobile\"},                     new Product{Name = \"Laptop\"},                     new Product{Name = \"Television\"},                     new Product{Name = \"Camera\"}                 }               },               new Category             {                 Name = \"Men ware\",                 Products = new List&lt;Product&gt;                  {                      new Product{Name = \"Footware\"},                     new Product{Name = \"Clothings\"},                     new Product{Name = \"Watches\"},                     new Product{Name = \"Hand bag\"},                     new Product{Name = \"Sun Glass\"}                 }             },               new Category             {                 Name = \"Baby &amp; Kids\",                 Products = new List&lt;Product&gt;                  {                      new Product{Name = \"Baby footware\"},                     new Product{Name = \"Kids clothigs\"},                     new Product{Name = \"Baby care\"}                 }             },                new Category             {                 Name = \"Books\",                 Products = new List&lt;Product&gt;                  {                      new Product{Name = \"Introduction to C#\"},                     new Product{Name = \"ASP.NET MVC Begineer to Professional\"},                     new Product{Name = \"ASP.NET Web API Security\"},                     new Product{Name = \"SPA with ASP.NET MVC\"}                 }             }               );     } }    Step 8: Add Migration and Update database   In package manager console write the following command to add a migration.   PM&gt; add-migration firstmigration   A file will be created in Migrations folder something like below. File Name: 201512041037292_firstmigration   Update the file, in AddForeignKey section and set false for cascadeDelete as follows.   public partial class firstmigration : DbMigration  {      public override void Up()      {          DropForeignKey(\"dbo.Categories\", \"Item_Id\", \"dbo.Items\");          DropForeignKey(\"dbo.Products\", \"Item_Id\", \"dbo.Items\");          DropIndex(\"dbo.Categories\", new[] { \"Item_Id\" });          DropIndex(\"dbo.Products\", new[] { \"Item_Id\" });          CreateIndex(\"dbo.Items\", \"CategoryId\");          CreateIndex(\"dbo.Items\", \"ProductId\");            AddForeignKey(\"dbo.Items\", \"CategoryId\", \"dbo.Categories\", \"Id\", cascadeDelete: false);          AddForeignKey(\"dbo.Items\", \"ProductId\", \"dbo.Products\", \"Id\", cascadeDelete: false);            DropColumn(\"dbo.Categories\", \"Item_Id\");          DropColumn(\"dbo.Products\", \"Item_Id\");      }             public override void Down()      {          AddColumn(\"dbo.Products\", \"Item_Id\", c =&gt; c.Int());          AddColumn(\"dbo.Categories\", \"Item_Id\", c =&gt; c.Int());          DropForeignKey(\"dbo.Items\", \"ProductId\", \"dbo.Products\");          DropForeignKey(\"dbo.Items\", \"CategoryId\", \"dbo.Categories\");          DropIndex(\"dbo.Items\", new[] { \"ProductId\" });          DropIndex(\"dbo.Items\", new[] { \"CategoryId\" });          CreateIndex(\"dbo.Products\", \"Item_Id\");          CreateIndex(\"dbo.Categories\", \"Item_Id\");          AddForeignKey(\"dbo.Products\", \"Item_Id\", \"dbo.Items\", \"Id\");          AddForeignKey(\"dbo.Categories\", \"Item_Id\", \"dbo.Items\", \"Id\");      }  }    Write the following command in package manager console to update database.   PM&gt; update-database –Verbose   Step 9: Add Items Controller      Right click on Controllers folder -&gt; Add -&gt; Controller   Select MVC 5 Controller with views using Entity Framework and the click Add   Select Item as Model class and InventoryDBContext as context class and click Add button.   ItemsController and Views will be created automatically.   Step 10: Update Items controller   Modify the following action of Items controller   public ActionResult Create() {     List&lt;Category&gt; lstCategory = db.Categories.ToList();     lstCategory.Insert(0, new Category { Id = 0, Name = \"--Select Category--\" });       List&lt;Product&gt; lstProduct = new List&lt;Product&gt;();     ViewBag.CategoryId = new SelectList(lstCategory, \"Id\", \"Name\");     ViewBag.ProductId = new SelectList(lstProduct, \"Id\", \"Name\");     return View(); }    Add the following action in the Items controller   public JsonResult GetProductsByCategoryId(int id) {     List&lt;Product&gt; products = new List&lt;Product&gt;();     if (id &gt; 0)     {         products = db.Products.Where(p =&gt; p.CategoryId == id).ToList();       }     else     {         products.Insert(0, new Product { Id = 0, Name = \"--Select a category first--\" });     }     var result = (from r in products                   select new                   {                       id = r.Id,                       name = r.Name                   }).ToList();       return Json(result, JsonRequestBehavior.AllowGet); }    Step 5: Modify the Create View of Items folder  Modify the Create View as follows.    @model Web.Mahedee.net.Models.Item   @{     ViewBag.Title = \"Create\"; }   &lt;script type=\"text/javascript\" src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.4.1/jquery.min.js\"&gt;&lt;/script&gt; &lt;script type=\"text/javascript\"&gt;     $(function () {         if ($(\"#CategoryId\").val() == '0') {             var productDefaultValue = \"&lt;option value='0'&gt;--Select a category first--&lt;/option&gt;\";             $(\"#ProductId\").html(productDefaultValue).show();         }           $(\"#CategoryId\").change(function () {             var selectedItemValue = $(this).val();               var ddlProducts = $(\"#ProductId\");             $.ajax({                 cache: false,                 type: \"GET\",                 url: '@Url.Action(\"GetProductsByCategoryId\", \"Items\")',                 data: { \"id\": selectedItemValue },                 success: function (data) {                     ddlProducts.html('');                     $.each(data, function (id, option) {                         ddlProducts.append($('&lt;option&gt;&lt;/option&gt;').val(option.id).html(option.name));                     });                 },                 error: function (xhr, ajaxOptions, thrownError) {                     alert('Found error to load product!!.');                 }             });         });     }); &lt;/script&gt;   &lt;h2&gt;Create&lt;/h2&gt;     @using (Html.BeginForm()) {     @Html.AntiForgeryToken()       &lt;div class=\"form-horizontal\"&gt;         &lt;h4&gt;Item&lt;/h4&gt;         &lt;hr /&gt;         @Html.ValidationSummary(true, \"\", new { @class = \"text-danger\" })         &lt;div class=\"form-group\"&gt;             @Html.LabelFor(model =&gt; model.CategoryId, \"Category\", htmlAttributes: new { @class = \"control-label col-md-2\" })             &lt;div class=\"col-md-10\"&gt;                 @Html.DropDownList(\"CategoryId\", null, htmlAttributes: new { @class = \"form-control\" })                 @Html.ValidationMessageFor(model =&gt; model.CategoryId, \"\", new { @class = \"text-danger\" })             &lt;/div&gt;         &lt;/div&gt;           &lt;div class=\"form-group\"&gt;             @Html.LabelFor(model =&gt; model.ProductId, \"Product\", htmlAttributes: new { @class = \"control-label col-md-2\" })             &lt;div class=\"col-md-10\"&gt;                 @Html.DropDownList(\"ProductId\", null, htmlAttributes: new { @class = \"form-control\" })                 @Html.ValidationMessageFor(model =&gt; model.ProductId, \"\", new { @class = \"text-danger\" })             &lt;/div&gt;         &lt;/div&gt;           &lt;div class=\"form-group\"&gt;             @Html.LabelFor(model =&gt; model.Name, htmlAttributes: new { @class = \"control-label col-md-2\" })             &lt;div class=\"col-md-10\"&gt;                 @Html.EditorFor(model =&gt; model.Name, new { htmlAttributes = new { @class = \"form-control\" } })                 @Html.ValidationMessageFor(model =&gt; model.Name, \"\", new { @class = \"text-danger\" })             &lt;/div&gt;         &lt;/div&gt;           &lt;div class=\"form-group\"&gt;             &lt;div class=\"col-md-offset-2 col-md-10\"&gt;                 &lt;input type=\"submit\" value=\"Create\" class=\"btn btn-default\" /&gt;             &lt;/div&gt;         &lt;/div&gt;     &lt;/div&gt; }   &lt;div&gt;     @Html.ActionLink(\"Back to List\", \"Index\") &lt;/div&gt;   @section Scripts {     @Scripts.Render(\"~/bundles/jqueryval\") }    Now run the application and type the following URL . http://localhost:61767/Items/Create   You will see the following output. Now select category from category dropdown lsit, you will see product dropdown list is populating on corresponding category.      Means, it’s working…!! Cheers!!!   Source Code  ","categories": ["ASP.NET MVC","C#"],
        "tags": ["aspnetmvc","csharp"],
        "url": "http://localhost:4000/cascading-dropdown-list-in-asp-net-mvc-a-sample-demonstration/",
        "teaser":null},{
        "title": "CRUD And Search Operation In ASP.NET MVC Application Using Partial View",
        "excerpt":"What is Partial View in ASP.NET MVC?      Partial view is a view which is rendered in another view   Partial view render portion of pages   Using partial view, you can reuse portion of page   Partial view is similar to a normal view with .cshtml   Project overview   Here I have created an application to keep basic employee information. View, add, update and delete option of an employee is in the application. I used partial view to show employee information in grid. Here I showed how do you run CRUD operation using partial view in most manageable way. Let’s come to the implementation of the project.   Tools and Technology used I used following tools and technology to develop the project –      Visual Studio 2013   Visual C#   ASP.NET MVC 5   Entity Framework 6   Razor view engine   JQuery   Step 1: Create a ASP.net MVC Project     From Visual studio 2013, choose File-&gt;Project -&gt; ASP.NET Web application   Select MVC Template and click OK   Step 2: Change or Add Connection String     Change or Add connection string in Web.config as follows   &lt;add name=\"DefaultConnection\" connectionString=\"Data Source=(LocalDb)\\v11.0;AttachDbFilename=|DataDirectory|\\HRMDB.mdf;Initial Catalog=HRMDB;Integrated Security=True\" providerName=\"System.Data.SqlClient\" /&gt;   Step 3: Create model classes   Create three model classes Dept, Designation and Employee as follows.   Dept Class   using System; using System.Collections.Generic; using System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema;   namespace Web.HRM.Models {     public class Dept     {         public Dept()         {             ActionDate = DateTime.Now;         }           [Key, DatabaseGenerated(DatabaseGeneratedOption.Identity)]         public int Id { get; set; }           [Display(Name = \"Dept\")]         public string Name { get; set; }           public virtual List&lt;employee&gt; Employees { get; set; }         public DateTime ActionDate { get; set; }     } }   Designation Class   using System; using System.Collections.Generic; using System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema;   namespace Web.HRM.Models {     public class Designation     {         public Designation()         {             ActionDate = DateTime.Now;         }         [Key, DatabaseGenerated(DatabaseGeneratedOption.Identity)]         public int Id { get; set; }         [Display(Name = \"Designation\")]         public string Name { get; set; }         public virtual List&lt;Employee&gt; Employees { get; set; }         public DateTime ActionDate { get; set; }       } }   Employee Class   using System; using System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema;   namespace Web.HRM.Models {     public class Employee     {         public Employee()         {             ActionDate = DateTime.Now;         }           [Key, DatabaseGenerated(DatabaseGeneratedOption.Identity)]         public int Id { get; set; }           [Display(Name = \"Employee Code\")]         public string EmpCode { get; set; }           [Display(Name = \"Full Name\")]         public string FullName { get; set; }           [Display(Name = \"Nick Name\")]         public string NickName { get; set; }           [Display(Name = \"Designation\")]         public int DesignationId { get; set; }           [ForeignKey(\"DesignationId\")]         public virtual Designation Designation { get; set; }           [Display(Name = \"Department\")]         public int DeptId { get; set; }           [ForeignKey(\"DeptId\")]         public virtual Dept Dept { get; set; }           public string Phone { get; set; }         public string Email { get; set; }         public string Address { get; set; }         public DateTime ActionDate { get; set; }     } }   Step 4: Create a Context class     Create HRMContext Class in Model folder.   using Microsoft.AspNet.Identity.EntityFramework; using System.Data.Entity;   namespace Web.HRM.Models {       public class HRMContext : IdentityDbContext&lt;ApplicationUser&gt;     {         public HRMContext()             : base(\"DefaultConnection\", throwIfV1Schema: false)         {         }           public static HRMContext Create()         {             return new HRMContext();         }           public DbSet&lt;Dept&gt; Depts { get; set; }         public DbSet&lt;Designation&gt; Designations { get; set; }         public DbSet&lt;Employee&gt; Employees { get; set; }     } }    Step 5: Create Controller and Views     Click Right button on Controller Folder-&gt;Add Controller.   Now choose MVC 5 Controller with views, using Entity Framework as scaffolding template.   Click Add.   Now select HRMContext as context, Employee as model and type controller name as EmployeeController.   Step 6: Modify the controller     Modify EmployeeController as follows.   using System; using System.Collections.Generic; using System.Data.Entity; using System.Linq; using System.Net; using System.Web.Mvc; using Web.HRM.Models;   namespace Web.HRM.Controllers {     public class EmployeeController : Controller     {         private HRMContext db = new HRMContext();           // GET: /Employee/         public ActionResult Index()         {             var employees = db.Employees.Include(e =&gt; e.Dept).Include(e =&gt; e.Designation);             return View(employees.ToList());         }           // GET: /Employee/Details/5         public ActionResult Details(int? id)         {             if (id == null)             {                 return new HttpStatusCodeResult(HttpStatusCode.BadRequest);             }             Employee employee = db.Employees.Find(id);             if (employee == null)             {                 return HttpNotFound();             }             return View(employee);         }           // GET: /Employee/Create         public ActionResult Create()         {             ViewBag.DeptId = new SelectList(db.Depts, \"Id\", \"Name\");             ViewBag.DesignationId = new SelectList(db.Designations, \"Id\", \"Name\");               List&lt;Dept&gt; lstDept = db.Depts.ToList();             ViewBag.DeptList = lstDept;               List&lt;Designation&gt; lstDesignation = db.Designations.ToList();             ViewBag.DesignationList = lstDesignation;               return View();         }           // POST: /Employee/Create         // To protect from overposting attacks, please enable the specific properties you want to bind to, for          // more details see http://go.microsoft.com/fwlink/?LinkId=317598.         [HttpPost]         [ValidateAntiForgeryToken]         public ActionResult Create([Bind(Include = \"Id,EmpCode,FullName,NickName,DesignationId,DeptId,Phone,Email,Address\")] Employee employee)         {             if (ModelState.IsValid)             {                 employee.ActionDate = DateTime.Now;                 if (employee.Id != 0)                     db.Entry(employee).State = EntityState.Modified;                 else                     db.Employees.Add(employee);                 db.SaveChanges();                 return RedirectToAction(\"Create\");             }               ViewBag.DeptId = new SelectList(db.Depts, \"Id\", \"Name\", employee.DeptId);             ViewBag.DesignationId = new SelectList(db.Designations, \"Id\", \"Name\", employee.DesignationId);             return View(employee);         }           // GET: /Employee/Edit/5         public ActionResult Edit(int? id)         {             if (id == null)             {                 return new HttpStatusCodeResult(HttpStatusCode.BadRequest);             }             Employee employee = db.Employees.Find(id);             if (employee == null)             {                 return HttpNotFound();             }             ViewBag.DeptId = new SelectList(db.Depts, \"Id\", \"Name\", employee.DeptId);             ViewBag.DesignationId = new SelectList(db.Designations, \"Id\", \"Name\", employee.DesignationId);             return View(employee);         }           // POST: /Employee/Edit/5         // To protect from overposting attacks, please enable the specific properties you want to bind to, for          // more details see http://go.microsoft.com/fwlink/?LinkId=317598.         [HttpPost]         [ValidateAntiForgeryToken]         public ActionResult Edit([Bind(Include = \"Id,EmpCode,FullName,NickName,DesignationId,DeptId,Phone,Email,Address,ActionDate\")] Employee employee)         {             if (ModelState.IsValid)             {                 db.Entry(employee).State = EntityState.Modified;                 db.SaveChanges();                 return RedirectToAction(\"Index\");             }             ViewBag.DeptId = new SelectList(db.Depts, \"Id\", \"Name\", employee.DeptId);             ViewBag.DesignationId = new SelectList(db.Designations, \"Id\", \"Name\", employee.DesignationId);             return View(employee);         }           // GET: /Employee/Delete/5         public ActionResult Delete(int? id)         {             if (id == null)             {                 return new HttpStatusCodeResult(HttpStatusCode.BadRequest);             }             Employee employee = db.Employees.Find(id);             if (employee == null)             {                 return HttpNotFound();             }               return View(employee);         }           // POST: /Employee/Delete/5         [HttpPost, ActionName(\"Delete\")]         [ValidateAntiForgeryToken]         public ActionResult DeleteConfirmed(int id)         {             Employee employee = db.Employees.Find(id);             db.Employees.Remove(employee);             db.SaveChanges();             return RedirectToAction(\"Create\");             //return RedirectToAction(\"Index\");         }             public ActionResult _LoadSearchEmployee(string desigId, string deptId)         {             List&lt;Employee&gt; employee = new List&lt;Employee&gt;();             int _desigId = 0;             int _deptId = 0;             Int32.TryParse(desigId, out _desigId);             Int32.TryParse(deptId, out _deptId);               employee = db.Employees.Where(p =&gt; (p.DeptId == _deptId || _deptId == 0) &amp;&amp;                 (p.DesignationId == _desigId || _desigId == 0)).ToList();             return PartialView(employee);         }         protected override void Dispose(bool disposing)         {             if (disposing)             {                 db.Dispose();             }             base.Dispose(disposing);         }     } }   Step 7: Create a partial view     Create a partial view name _LoadSearchEmployee in Employee Controller.   Click right button on _LoadSearchEmployee action -&gt; Add View -&gt; Select “Create as a partial view” as follows.         Modify the partial view “_LoadSearchEmployee” in Views-&gt; Employee folder as follows.   @model IEnumerable&lt;Web.HRM.Models.Employee&gt;       @{         ViewBag.Title = \"View1\";     }       &lt;h2&gt;List of Employees&lt;/h2&gt;       @*&lt;p&gt;             @Html.ActionLink(\"Create New\", \"Create\")         &lt;/p&gt;*@     &lt;table class=\"table\"&gt;         &lt;tr&gt;               &lt;th&gt;                 @Html.DisplayNameFor(model =&gt; model.EmpCode)             &lt;/th&gt;             &lt;th&gt;                 @Html.DisplayNameFor(model =&gt; model.FullName)             &lt;/th&gt;             &lt;th&gt;                 @Html.DisplayNameFor(model =&gt; model.NickName)             &lt;/th&gt;             &lt;th&gt;                 @Html.DisplayNameFor(model =&gt; model.Designation.Name)             &lt;/th&gt;             &lt;th hidden=\"hidden\"&gt;&lt;/th&gt;             &lt;th&gt;                 @Html.DisplayNameFor(model =&gt; model.Dept.Name)             &lt;/th&gt;             &lt;th hidden=\"hidden\"&gt;&lt;/th&gt;               &lt;th&gt;                 @Html.DisplayNameFor(model =&gt; model.Phone)             &lt;/th&gt;             &lt;th&gt;                 @Html.DisplayNameFor(model =&gt; model.Email)             &lt;/th&gt;               &lt;th hidden=\"hidden\"&gt;&lt;/th&gt;             &lt;th hidden=\"hidden\"&gt;&lt;/th&gt;               &lt;th&gt;&lt;/th&gt;         &lt;/tr&gt;           @foreach (var item in Model)         {             &lt;tr&gt;                   &lt;td&gt;                     @Html.DisplayFor(modelItem =&gt; item.EmpCode)                 &lt;/td&gt;                 &lt;td&gt;                     @Html.DisplayFor(modelItem =&gt; item.FullName)                 &lt;/td&gt;                 &lt;td&gt;                     @Html.DisplayFor(modelItem =&gt; item.NickName)                 &lt;/td&gt;                     &lt;td&gt;                     @Html.DisplayFor(modelItem =&gt; item.Designation.Name)                   &lt;/td&gt;                 &lt;td hidden=\"hidden\"&gt;                     @item.DesignationId                 &lt;/td&gt;                   &lt;td&gt;                     @Html.DisplayFor(modelItem =&gt; item.Dept.Name)                 &lt;/td&gt;                   &lt;td hidden=\"hidden\"&gt;                     @item.DeptId                 &lt;/td&gt;                   &lt;td&gt;                     @Html.DisplayFor(modelItem =&gt; item.Phone)                 &lt;/td&gt;                 &lt;td&gt;                     @Html.DisplayFor(modelItem =&gt; item.Email)                 &lt;/td&gt;                   &lt;td hidden=\"hidden\"&gt;                     @item.Address                 &lt;/td&gt;                   &lt;td hidden=\"hidden\"&gt;                     @item.Id                 &lt;/td&gt;                 &lt;td&gt;                 &lt;input type=\"button\" id=\"editRow\" value=\"Edit\" class=\"btn btn-link editRow\" /&gt;                 |                 @Html.ActionLink(\"Details\", \"Details\", new { id = item.Id }) |                 @Html.ActionLink(\"Delete\", \"Delete\", new { id = item.Id })                 &lt;/td&gt;             &lt;/tr&gt;         }       &lt;/table&gt;       &lt;script src=\"~/Scripts/jquery-1.10.2.min.js\"&gt;&lt;/script&gt;     &lt;script&gt;         $(function () {               $('#EmpCode').val('');             $('#FullName').val('');             $('#NickName').val('');             $('#Phone').val('');             $('#Email').val('');               $('.editRow').click(function () {                   $('#EmpCode').val($(this).closest('tr').find('td:eq(0)').text().trim());                 $('#FullName').val($(this).closest('tr').find('td:eq(1)').text().trim());                 $('#NickName').val($(this).closest('tr').find('td:eq(2)').text().trim());                   var designationId = $(this).closest('tr').find('td:eq(4)').text().trim();                 var deptId = $(this).closest('tr').find('td:eq(6)').text().trim();                 //alert(designationId);                 $(\"#DesignationId\").val(designationId);                 $(\"#DeptId\").val(deptId);                   $('#Phone').val($(this).closest('tr').find('td:eq(7)').text().trim());                 $('#Email').val($(this).closest('tr').find('td:eq(8)').text().trim());                   $('#Address').val($(this).closest('tr').find('td:eq(9)').text().trim());                   var empId = $(this).closest('tr').find('td:eq(10)').text().trim();                 //alert(empId);                 $(\"#Id\").val(empId);                 $(\"#btnSave\").val(\"Edit\");               });         });     &lt;/script&gt;    Step 8: Create a View     Right click on Create action -&gt; Add View name Create as follows.         Modify the “Create” View and javascript bottom of the view in View-&gt;Employee folder as follows.   @model Web.HRM.Models.Employee   @{     ViewBag.Title = \"Create\";       var lstDept = ViewBag.DeptList;     var lstDesignation = ViewBag.DesignationList;   }   @*&lt;h2&gt;Create&lt;/h2&gt;*@     @using (Html.BeginForm()) {     @Html.AntiForgeryToken()         &lt;div class=\"form-horizontal\"&gt;         &lt;h4&gt;Employee Information&lt;/h4&gt;         &lt;hr /&gt;         @Html.ValidationSummary(true)           @*@Html.HiddenFor(model =&gt; model.Id)*@         &lt;input type=\"hidden\" value=\"0\" id=\"Id\" name=\"Id\" /&gt;           &lt;table&gt;             &lt;tr&gt;                 &lt;td&gt;@Html.LabelFor(model =&gt; model.EmpCode, new { @style = \"width : 150px\", @class = \"control-label col-md-2\" })&lt;/td&gt;                 &lt;td&gt;                     @Html.EditorFor(model =&gt; model.EmpCode)                     @Html.ValidationMessageFor(model =&gt; model.EmpCode)                 &lt;/td&gt;                 &lt;td&gt;@Html.LabelFor(model =&gt; model.FullName, new { @style = \"width : 150px\", @class = \"control-label col-md-2\" })&lt;/td&gt;                 &lt;td&gt;                     @Html.EditorFor(model =&gt; model.FullName)                     @Html.ValidationMessageFor(model =&gt; model.FullName)                 &lt;/td&gt;             &lt;/tr&gt;               &lt;tr&gt;                 &lt;td&gt;@Html.LabelFor(model =&gt; model.NickName, new { @style = \"width : 150px\", @class = \"control-label col-md-2\" })&lt;/td&gt;                 &lt;td&gt;                     @Html.EditorFor(model =&gt; model.NickName)                     @Html.ValidationMessageFor(model =&gt; model.NickName)                 &lt;/td&gt;                 &lt;td&gt;@Html.LabelFor(model =&gt; model.DesignationId, \"Designation\", new { @style = \"width : 150px\", @class = \"control-label col-md-2\" })&lt;/td&gt;                 &lt;td&gt;                     @Html.DropDownList(\"DesignationId\", \"---Select Dept---\")                     @Html.ValidationMessageFor(model =&gt; model.DesignationId)                 &lt;/td&gt;             &lt;/tr&gt;               &lt;tr&gt;                 &lt;td&gt;@Html.LabelFor(model =&gt; model.DeptId, \"Dept\", new { @style = \"width : 150px\", @class = \"control-label col-md-2\" })&lt;/td&gt;                 &lt;td&gt;                     @Html.DropDownList(\"DeptId\", \"---Select Dept---\")                     @Html.ValidationMessageFor(model =&gt; model.DeptId)                 &lt;/td&gt;                 &lt;td&gt;@Html.LabelFor(model =&gt; model.Phone, new { @style = \"width : 150px\", @class = \"control-label col-md-2\" })&lt;/td&gt;                 &lt;td&gt;                     @Html.EditorFor(model =&gt; model.Phone)                     @Html.ValidationMessageFor(model =&gt; model.Phone)                 &lt;/td&gt;             &lt;/tr&gt;               &lt;tr&gt;                 &lt;td&gt;@Html.LabelFor(model =&gt; model.Email, new { @style = \"width : 150px\", @class = \"control-label col-md-2\" })&lt;/td&gt;                 &lt;td&gt;                     @Html.EditorFor(model =&gt; model.Email)                     @Html.ValidationMessageFor(model =&gt; model.Email)                 &lt;/td&gt;                 &lt;td&gt;@Html.LabelFor(model =&gt; model.Address, new { @style = \"width : 150px\", @class = \"control-label col-md-2\" })&lt;/td&gt;                 &lt;td&gt;                     @Html.EditorFor(model =&gt; model.Address)                     @Html.ValidationMessageFor(model =&gt; model.Address)                 &lt;/td&gt;             &lt;/tr&gt;             &lt;tr&gt;                 &lt;td&gt;&lt;/td&gt;                 &lt;td&gt;                     &lt;input type=\"submit\" value=\"Save\" id=\"btnSave\" class=\"btn btn-primary\" /&gt; ||                     @Html.ActionLink(\"Clear\", \"Create\", \"Employee\", null, new { @class = \"btn btn-primary\" })                     @*@Html.ActionLink(\"Back to List\", \"Index\")*@                   &lt;/td&gt;                 &lt;td&gt;&lt;/td&gt;                 &lt;td&gt;&lt;/td&gt;             &lt;/tr&gt;         &lt;/table&gt;           &lt;hr /&gt;         &lt;table&gt;             &lt;tr&gt;                 &lt;td&gt;@Html.Label(\"Dept: \", new { @style = \"width : 150px\", @class = \"control-label col-md-2\" }) &lt;/td&gt;                 &lt;td&gt;                     @Html.DropDownList(\"DeptSearch\", new SelectList(lstDept, \"Id\", \"Name\"), \"---Select Dept---\", new { @style = \"width : 200px\", @class = \"form-control\" })                 &lt;/td&gt;                 &lt;td&gt;@Html.Label(\"Designation: \", new { @class = \"control-label col-md-2\" })&lt;/td&gt;                 &lt;td&gt;                       @Html.DropDownList(\"DesigSearch\", new SelectList(lstDesignation, \"Id\", \"Name\"), \"---Select Designation---\", new { @style = \"width : 200px\", @class = \"form-control\" })                 &lt;/td&gt;                 &lt;td&gt;                     &lt;input type=\"button\" value=\"Search\" class=\"btn btn-primary\" id=\"getData\" /&gt;                 &lt;/td&gt;             &lt;/tr&gt;         &lt;/table&gt;       &lt;/div&gt; }   @*&lt;div&gt;         @Html.ActionLink(\"Back to List\", \"Index\")     &lt;/div&gt;*@   &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;   &lt;div id=\"saveDiv\"&gt;     @{ Html.RenderAction(\"_LoadSearchEmployee\", new { desigId = \"\", deptId = \"\" }); } &lt;/div&gt; &lt;div id=\"partial\"&gt;   &lt;/div&gt;     @section Scripts {     @Scripts.Render(\"~/bundles/jqueryval\")         &lt;script&gt;         $(function () {               $('#getData').click(function () {                 //alert('Clicked');                 var deptId = $('#DeptSearch').val();                 var desigId = $('#DesigSearch').val();                 $('#saveDiv').hide();                   var url = \"@Html.Raw(Url.Action(\"_LoadSearchEmployee\", \"Employee\", new { desigId = \"-parameter\", deptId = \"sempar\" }))\";                 url = url.replace(\"-parameter\", desigId);                 url = url.replace(\"sempar\", deptId);                 $('#partial').load(url);             });           });       &lt;/script&gt; }    Step 9: Modify the RouteConfig     Modify route configuration in App_Start in RouteConfig.cs is as follows. Main reason to modify this class to run the create page by default.   using System.Web.Mvc; using System.Web.Routing;   namespace Web.HRM {     public class RouteConfig     {         public static void RegisterRoutes(RouteCollection routes)         {             routes.IgnoreRoute(\"{resource}.axd/{*pathInfo}\");               routes.MapRoute(                 name: \"Default\",                 url: \"{controller}/{action}/{id}\",                 defaults: new { controller = \"Employee\", action = \"Create\", id = UrlParameter.Optional }             );         }     } }    Now run the application, you will see the following output. You can add, view, update and delete employee information in a same page. Thanks for your patience.     ","categories": ["ASP.NET MVC","C#"],
        "tags": ["aspnetmvc","csharp"],
        "url": "http://localhost:4000/crud-and-search-operation-in-asp-net-mvc-application-using-partial-view/",
        "teaser":null},{
        "title": "Building A Simple Application Using ASP.NET Core 1.0",
        "excerpt":"What is .NET Core?      .NET Core is a general-purpose development platform   Maintained by Microsoft and the .NET community on GitHub   Its work in cross-platform, supporting Windows, macOS and Linux   Can be used in device, cloud, and embedded/IoT scenarios.   First release on 27 June, 2016   Application overview   HRM Core an application which I will develop here. User can view, add, edit and delete Employee information with his department and designation. This application will be developed by asp.net core. Let’s come to the implementation of the project.   Tools and Technology used I have used following tools and technology to develop the project –      Visual Studio 2015 Update 3   Visual C#   ASP.NET MVC   Entity Framework core 1.0   Razor view engine   JQuery   Step 1: Create an ASP.net MVC Project          File -&gt; New project and select the project template C# -&gt; .NET Core -&gt; Console application (.NET Core).            Select Web Application as a Template, change authentication to individual user account and click OK          Step 2: Change or Add Connection String     Change or Add connection string in appsettings.json as follows   {   \"ConnectionStrings\": {     \"DefaultConnection\": \"Server=(localdb)\\\\mssqllocaldb;Database=HRMCoreDB;Trusted_Connection=True;MultipleActiveResultSets=true\"   },   \"Logging\": {     \"IncludeScopes\": false,     \"LogLevel\": {       \"Default\": \"Debug\",       \"System\": \"Information\",       \"Microsoft\": \"Information\"     }   } }    Step 3: Create model classes   Create three model classes Dept, Designation and Employee as follows.   Dept Class  using System; using System.Collections.Generic; using System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; using System.Linq; using System.Threading.Tasks;   namespace HRMCore.Models {     public class Dept     {         public Dept()         {             ActionDate = DateTime.Now;         }           //[Key, DatabaseGenerated(DatabaseGeneratedOption.Identity)]         public int DeptId { get; set; }           [Display(Name = \"Dept\")]         public string Name { get; set; }           public string Location { get; set; }           public virtual List&lt;Employee&gt; Employees { get; set; }         public DateTime ActionDate { get; set; }     } }    Designation Class   using System; using System.Collections.Generic; using System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; using System.Linq; using System.Threading.Tasks;   namespace HRMCore.Models {     public class Designation     {         public Designation()         {             ActionDate = DateTime.Now;         }         [Key, DatabaseGenerated(DatabaseGeneratedOption.Identity)]         public int Id { get; set; }         [Display(Name = \"Designation\")]         public string Name { get; set; }         public virtual List&lt;Employee&gt; Employees { get; set; }         public DateTime ActionDate { get; set; }     } }    Employee Class   using System; using System.Collections.Generic; using System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; using System.Linq; using System.Threading.Tasks;   namespace HRMCore.Models {     public class Employee     {         public Employee()         {             ActionDate = DateTime.Now;         }           [Key, DatabaseGenerated(DatabaseGeneratedOption.Identity)]         public int Id { get; set; }           [Display(Name = \"Employee Code\")]         public string EmpCode { get; set; }           [Display(Name = \"Full Name\")]         public string FullName { get; set; }           [Display(Name = \"Nick Name\")]         public string NickName { get; set; }           [Display(Name = \"Designation\")]         public int DesignationId { get; set; }           [ForeignKey(\"DesignationId\")]         public virtual Designation Designation { get; set; }           [Display(Name = \"Department\")]         public int DeptId { get; set; }           [ForeignKey(\"DeptId\")]         public virtual Dept Dept { get; set; }           public string Phone { get; set; }         public string Email { get; set; }         public string Address { get; set; }         public DateTime ActionDate { get; set; }     } }    Step 4: Modify Context class     Modify ApplicationDbContext in Data folder. Add DbSet for Dept, Designation and Employee model   using Microsoft.AspNet.Identity.EntityFramework; using System.Data.Entity;   using System; using System.Collections.Generic; using System.Linq; using System.Threading.Tasks; using Microsoft.AspNetCore.Identity.EntityFrameworkCore; using Microsoft.EntityFrameworkCore; using HRMCore.Models;   namespace HRMCore.Data {     public class ApplicationDbContext : IdentityDbContext&lt;ApplicationUser&gt;     {         public ApplicationDbContext(DbContextOptions&lt;ApplicationDbContext&gt; options)             : base(options)         {         }           public DbSet&lt;Dept&gt; Depts { get; set; }         public DbSet&lt;Designation&gt; Designations { get; set; }         public DbSet&lt;Employee&gt; Employees { get; set; }           protected override void OnModelCreating(ModelBuilder builder)         {             base.OnModelCreating(builder);             // Customize the ASP.NET Identity model and override the defaults if needed.             // For example, you can rename the ASP.NET Identity table names and more.             // Add your customizations after calling base.OnModelCreating(builder);         }     } }   Step 5: Create Controller and Views Create Depts Controller and Views           Click Right button on Controller Folder-&gt;Add Controller. Now choose scaffolding template as MVC Controllers with views using Entity Framework and then Click Add.            Now select Model class as Dept and Data Context Class as ApplicationDbContext. Then click OK.       Create Employees Controller and Views          Click Right button on Controller Folder-&gt;Add Controller. Now choose scaffolding template as MVC Controllers with views using Entity Framework and then Click Add as before.            Then select Model class as Employee and Data Context Class as ApplicationDbContext as follows. Then click OK.       Step 6: Modify the controller     Modify EmployeeController as follows.   using System; using System.Collections.Generic; using System.Linq; using System.Threading.Tasks; using Microsoft.AspNetCore.Mvc; using Microsoft.AspNetCore.Mvc.Rendering; using Microsoft.EntityFrameworkCore; using HRMCore.Data; using HRMCore.Models;   namespace HRMCore.Controllers {     public class EmployeesController : Controller     {         private readonly ApplicationDbContext _context;           public EmployeesController(ApplicationDbContext context)         {             _context = context;             }           // GET: Employees         public async Task&lt;IActionResult&gt; Index()         {             var applicationDbContext = _context.Employees.Include(e =&gt; e.Dept).Include(e =&gt; e.Designation);             return View(await applicationDbContext.ToListAsync());         }           // GET: Employees/Details/5         public async Task&lt;IActionResult&gt; Details(int? id)         {             if (id == null)             {                 return NotFound();             }               var employee = await _context.Employees.SingleOrDefaultAsync(m =&gt; m.Id == id);             if (employee == null)             {                 return NotFound();             }               return View(employee);         }           // GET: Employees/Create         public IActionResult Create()         {             ViewData[\"DeptId\"] = new SelectList(_context.Depts, \"DeptId\", \"Name\");             ViewData[\"DesignationId\"] = new SelectList(_context.Designations, \"Id\", \"Name\");             return View();         }           // POST: Employees/Create         // To protect from overposting attacks, please enable the specific properties you want to bind to, for          // more details see http://go.microsoft.com/fwlink/?LinkId=317598.         [HttpPost]         [ValidateAntiForgeryToken]         public async Task&lt;IActionResult&gt; Create([Bind(\"Id,ActionDate,Address,DeptId,DesignationId,Email,EmpCode,FullName,NickName,Phone\")] Employee employee)         {             if (ModelState.IsValid)             {                 _context.Add(employee);                 await _context.SaveChangesAsync();                 return RedirectToAction(\"Index\");             }             ViewData[\"DeptId\"] = new SelectList(_context.Depts, \"DeptId\", \"Name\", employee.DeptId);             ViewData[\"DesignationId\"] = new SelectList(_context.Designations, \"Id\", \"Name\", employee.DesignationId);             return View(employee);         }           // GET: Employees/Edit/5         public async Task&lt;IActionResult&gt; Edit(int? id)         {             if (id == null)             {                 return NotFound();             }               var employee = await _context.Employees.SingleOrDefaultAsync(m =&gt; m.Id == id);             if (employee == null)             {                 return NotFound();             }             ViewData[\"DeptId\"] = new SelectList(_context.Depts, \"DeptId\", \"Name\", employee.DeptId);             ViewData[\"DesignationId\"] = new SelectList(_context.Designations, \"Id\", \"Name\", employee.DesignationId);             return View(employee);         }           // POST: Employees/Edit/5         // To protect from overposting attacks, please enable the specific properties you want to bind to, for          // more details see http://go.microsoft.com/fwlink/?LinkId=317598.         [HttpPost]         [ValidateAntiForgeryToken]         public async Task&lt;IActionResult&gt; Edit(int id, [Bind(\"Id,ActionDate,Address,DeptId,DesignationId,Email,EmpCode,FullName,NickName,Phone\")] Employee employee)         {             if (id != employee.Id)             {                 return NotFound();             }               if (ModelState.IsValid)             {                 try                 {                     _context.Update(employee);                     await _context.SaveChangesAsync();                 }                 catch (DbUpdateConcurrencyException)                 {                     if (!EmployeeExists(employee.Id))                     {                         return NotFound();                     }                     else                     {                         throw;                     }                 }                 return RedirectToAction(\"Index\");             }             ViewData[\"DeptId\"] = new SelectList(_context.Depts, \"DeptId\", \"Name\", employee.DeptId);             ViewData[\"DesignationId\"] = new SelectList(_context.Designations, \"Id\", \"Name\", employee.DesignationId);             return View(employee);         }           // GET: Employees/Delete/5         public async Task&lt;IActionResult&gt; Delete(int? id)         {             if (id == null)             {                 return NotFound();             }               var employee = await _context.Employees.SingleOrDefaultAsync(m =&gt; m.Id == id);             if (employee == null)             {                 return NotFound();             }               return View(employee);         }           // POST: Employees/Delete/5         [HttpPost, ActionName(\"Delete\")]         [ValidateAntiForgeryToken]         public async Task&lt;IActionResult&gt; DeleteConfirmed(int id)         {             var employee = await _context.Employees.SingleOrDefaultAsync(m =&gt; m.Id == id);             _context.Employees.Remove(employee);             await _context.SaveChangesAsync();             return RedirectToAction(\"Index\");         }           private bool EmployeeExists(int id)         {             return _context.Employees.Any(e =&gt; e.Id == id);         }     } }    Step 7: Modify the view     Modify the views if required.   Step 8: Add Seed method     Add a seed class name DataSeeder in model class as follows.   using System; using System.Collections.Generic; using System.Linq; using System.Threading.Tasks; //using Microsoft.AspNet.Builder; using Microsoft.AspNetCore.Builder; using Microsoft.Extensions.DependencyInjection; using HRMCore.Data; //using System.Data   namespace HRMCore.Models {       public static class DataSeeder     {         // TODO: Move this code when seed data is implemented in EF 7           /// &lt;summary&gt;         /// This is a workaround for missing seed data functionality in EF 7.0-rc1         /// More info: https://github.com/aspnet/EntityFramework/issues/629         /// &lt;/summary&gt;         /// &lt;param name=\"app\"&gt;         /// An instance that provides the mechanisms to get instance of the database context.         /// &lt;/param&gt;         public static void SeedData(this IApplicationBuilder app)         {             var db = app.ApplicationServices.GetService&lt;ApplicationDbContext&gt;();               // TODO: Add seed logic here                 var objSE = new Designation { Name = \"Software Engineer\" };             var objSSE = new Designation { Name = \"Senior Engineer\" };             var objSA = new Designation { Name = \"Software Archiect\" };             var objBA = new Designation { Name = \"Business Analyst\" };             var objOfficer = new Designation { Name = \"Officer\" };             var objSrOfficer = new Designation { Name = \"Sr. Officer\" };             var objAssMgr = new Designation { Name = \"Asst. Manager\" };               var objSSD = new Dept { Name = \"Software Development\" };             var objIMP = new Dept { Name = \"Software Implementation\" };             var objFin = new Dept { Name = \"Finance &amp; Administration\" };             var objMkt = new Dept { Name = \"Sells &amp; Marketing\" };                   var lstEmployees = new List&lt;Employee&gt;()             {                 new Employee(){EmpCode = \"L0001\", FullName = \"Tariqul Islam\", NickName = \"Shakil\",                     Designation = objSE, Dept = objSSD, Phone = \"01715333333\", Email =\"demo@gmail.com\"  },                   new Employee(){EmpCode = \"L0002\", FullName = \"Enamul Haque\", NickName = \"Rony\",                     Designation = objSSE, Dept = objIMP, Phone = \"01715333332\", Email =\"deom@gmail.com\"  },                   new Employee(){EmpCode = \"L0003\", FullName = \"Mallik Arif Ahsan\", NickName = \"Arif\",                     Designation = objAssMgr, Dept = objFin, Phone = \"01715333332\", Email =\"deom@gmail.com\"  },                   new Employee(){EmpCode = \"L0004\", FullName = \"Jafrin Islam\", NickName = \"Sinthi\",                     Designation = objSSE, Dept = objSSD, Phone = \"01715333334\", Email =\"demo@gmail.com\"  },                   new Employee(){EmpCode = \"L0005\", FullName = \"Md. Mahedee Hasan\", NickName = \"Mahedee\",                     Designation = objSSE, Dept = objSSD, Phone = \"01715333334\", Email =\"demo@gmail.com\"  },               };                 List&lt;Dept&gt; lstDept = new List&lt;Dept&gt; {                      new Dept { Name = \"Supply Chain\" },                      new Dept { Name = \"Software Innovation\" }                 };               List&lt;Designation&gt; lstDesignation = new List&lt;Designation&gt;             {                     new Designation { Name = \"Executive\" },                     new Designation { Name = \"Senior Executive\" },                     new Designation { Name = \"Manager\" },                     new Designation { Name = \"Deputy Manager\" },                     new Designation { Name = \"Project Manager\" }             };               if (db.Depts.ToList().Count &lt;= 0)                 db.AddRange(lstDept);               if (db.Designations.ToList().Count &lt;= 0)                 db.AddRange(lstDesignation);               if (db.Employees.ToList().Count &lt;= 0)                 db.Employees.AddRange(lstEmployees);               db.SaveChanges();         }     } }    Step 9: Add SeedData Method     Add SeedData method in Startup class as follows.   using System; using System.Collections.Generic; using System.Linq; using System.Threading.Tasks; using Microsoft.AspNetCore.Builder; using Microsoft.AspNetCore.Hosting; using Microsoft.AspNetCore.Identity.EntityFrameworkCore; using Microsoft.EntityFrameworkCore; using Microsoft.Extensions.Configuration; using Microsoft.Extensions.DependencyInjection; using Microsoft.Extensions.Logging; using HRMCore.Data; using HRMCore.Models; using HRMCore.Services;   namespace HRMCore {     public class Startup     {         public Startup(IHostingEnvironment env)         {             var builder = new ConfigurationBuilder()                 .SetBasePath(env.ContentRootPath)                 .AddJsonFile(\"appsettings.json\", optional: true, reloadOnChange: true)                 .AddJsonFile($\"appsettings.{env.EnvironmentName}.json\", optional: true);               if (env.IsDevelopment())             {                 // For more details on using the user secret store see http://go.microsoft.com/fwlink/?LinkID=532709                 builder.AddUserSecrets();             }               builder.AddEnvironmentVariables();             Configuration = builder.Build();         }           public IConfigurationRoot Configuration { get; }           // This method gets called by the runtime. Use this method to add services to the container.         public void ConfigureServices(IServiceCollection services)         {             // Add framework services.             services.AddDbContext&lt;ApplicationDbContext&gt;(options =&gt;                 options.UseSqlServer(Configuration.GetConnectionString(\"DefaultConnection\")));               services.AddIdentity&lt;ApplicationUser, IdentityRole&gt;()                 .AddEntityFrameworkStores&lt;ApplicationDbContext&gt;()                 .AddDefaultTokenProviders();               services.AddMvc();               // Add application services.             services.AddTransient&lt;IEmailSender, AuthMessageSender&gt;();             services.AddTransient&lt;ISmsSender, AuthMessageSender&gt;();         }           // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.         public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)         {             loggerFactory.AddConsole(Configuration.GetSection(\"Logging\"));             loggerFactory.AddDebug();               if (env.IsDevelopment())             {                 app.UseDeveloperExceptionPage();                 app.UseDatabaseErrorPage();                 app.UseBrowserLink();             }             else             {                 app.UseExceptionHandler(\"/Home/Error\");             }               app.UseStaticFiles();               app.UseIdentity();             app.SeedData();               // Add external authentication middleware below. To configure them please see http://go.microsoft.com/fwlink/?LinkID=532715               app.UseMvc(routes =&gt;             {                 routes.MapRoute(                     name: \"default\",                     template: \"{controller=Home}/{action=Index}/{id?}\");             });         }     } }    Step 9: Add Migration     Go to Tools -&gt; NuGet Package Manager -&gt; Package Manager Console   Run the following command in the package manager console.     PM&gt; Add-Migration addmodel PM&gt; Update-Database -Verbose          Step 10: Add Links in Layout Page  Add Dept and Employee link as follows. ```csharp      Home About Contact Dept Employee ``` Now run the application. Click Dept or Employee link in the nav bar. You can View, add, modify and delete employee information as well as department information. Thanks for your patience.     ","categories": ["ASP.NET Core","C#"],
        "tags": ["aspnetcore","csharp"],
        "url": "http://localhost:4000/building-a-simple-application-using-asp-net-core-1-0/",
        "teaser":null},{
        "title": "Image Cropping Using Jcrop In ASP.NET MVC Application",
        "excerpt":"What is Image cropping?      Image cropping refer to removal of some part of image   Uses to improve framing and size   Applied in photograph to resize image   Application overview  In this project, I will show image cropping of an employee phot when employee information saved and modified. Full crud operation applied in the application with image cropping.   Let’s have a look on the implementation of the project.   Tools and Technology used I have used following tools and technology to develop the project –      Visual Studio 2015   Visual C#   ASP.NET MVC   Entity Framework 5   Razor view engine   JCrop   Step 1: Create a ASP.net MVC Project          Select File -&gt; New project and select the project template Visual C# -&gt; ASP.NET Web Application (.NET Framework)            Select MVC Template and click OK       Step 2: Change or Add Connection String  Change or Add connection string in Web.config as follows   &lt;connectionStrings&gt;   &lt;add name=\"DefaultConnection\" connectionString=\"Data Source=(LocalDb\\MSSQLLocalDB;AttachDbFilename=|DataDirectory|\\JCropMVCDB.mdf;Initial Catalog=JCropMVCDB;Integrated Security=True\" providerName=\"System.Data.SqlClient\" /&gt; &lt;/connectionStrings&gt;   Step 3: Install JCrop Nuget Package  Go to Tools -&gt; NuGet Package Manager -&gt; Manages NuGet Package Manager for the solution -&gt; Search Jcrop and install jquery.jcrop.js      Step 4: Create model class   Create model class “Employee” as follows.   Employee Class   using System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema;   namespace JCropMVC.Models {     public class Employee     {         [Key, DatabaseGenerated(DatabaseGeneratedOption.Identity)]         public int Id { get; set; }           [Display(Name = \"Full Name\")]         [Required(ErrorMessage = \"Name cannot be empty\")]         public string Name { get; set; }           [Display(Name = \"Father Name\")]         public string FatherName { get; set; }           [Display(Name = \"Designation\")]         public string Designation { get; set; }           [Display(Name = \"Mobile No\")]         public string Mobile { get; set; }           [DataType(DataType.EmailAddress)]         [Display(Name = \"Email\")]         public string Email { get; set; }           [Display(Name = \"Image URL\")]         public string PhotoURL { get; set; }     } }    Step 5: Modify Context class     Modify ApplicationDbContext in IdentityModel Class   public class ApplicationDbContext : IdentityDbContext&lt;ApplicationUser&gt; {     public ApplicationDbContext()         : base(\"DefaultConnection\", throwIfV1Schema: false)     {     }       public static ApplicationDbContext Create()     {         return new ApplicationDbContext();     }       public DbSet&lt;Employee&gt; Employees { get; set; } }    Step 6: Create Controller and Views     Create Employees Controller and Views   Click Right button on Controller Folder-&gt;Add Controller. Now choose scaffolding template as MVC Controllers with views using Entity Framework and then Click Add.   Now select Model class as Employee and Data Context Class as ApplicationDbContext and click OK.   Step 7: Modify the controller     Modify EmployeesController as follows. Here method ProcessImage(string croppedImage) is used to process and save image. An extra parameter added for Create and Edit action.   using System; using System.Data.Entity; using System.Linq; using System.Net; using System.Web.Mvc; using JCropMVC.Models; using System.IO;   namespace JCropMVC.Controllers {     public class EmployeesController : Controller     {         private ApplicationDbContext db = new ApplicationDbContext();           // GET: Employees         public ActionResult Index()         {             return View(db.Employees.ToList());         }           // GET: Employees/Details/5         public ActionResult Details(int? id)         {             if (id == null)             {                 return new HttpStatusCodeResult(HttpStatusCode.BadRequest);             }             Employee employee = db.Employees.Find(id);             if (employee == null)             {                 return HttpNotFound();             }             return View(employee);         }           // GET: Employees/Create         public ActionResult Create()         {             return View();         }           // POST: Employees/Create         // To protect from overposting attacks, please enable the specific properties you want to bind to, for          // more details see http://go.microsoft.com/fwlink/?LinkId=317598.         [HttpPost]         [ValidateAntiForgeryToken]         public ActionResult Create([Bind(Include = \"Id,Name,FatherName,Designation,Mobile,Email,PhotoURL\")] Employee employee, string avatarCropped)         {             string filePath = ProcessImage(avatarCropped);             employee.PhotoURL = filePath;               if (ModelState.IsValid)             {                 db.Employees.Add(employee);                 db.SaveChanges();                 return RedirectToAction(\"Index\");             }               return View(employee);         }           /// &lt;summary&gt;         /// Process image and save in predefined path         /// &lt;/summary&gt;         /// &lt;param name=\"croppedImage\"&gt;&lt;/param&gt;         /// &lt;returns&gt;&lt;/returns&gt;         private string ProcessImage(string croppedImage)         {             string filePath = String.Empty;             try             {                 string base64 = croppedImage;                 byte[] bytes = Convert.FromBase64String(base64.Split(',')[1]);                 filePath = \"/Images/Photo/Emp-\" + Guid.NewGuid() + \".png\";                 using (FileStream stream = new FileStream(Server.MapPath(filePath), FileMode.Create))                 {                     stream.Write(bytes, 0, bytes.Length);                     stream.Flush();                 }             }             catch (Exception ex)             {                 string st = ex.Message;             }               return filePath;         }           // GET: Employees/Edit/5         public ActionResult Edit(int? id)         {             if (id == null)             {                 return new HttpStatusCodeResult(HttpStatusCode.BadRequest);             }             Employee employee = db.Employees.Find(id);             if (employee == null)             {                 return HttpNotFound();             }             return View(employee);         }           // POST: Employees/Edit/5         // To protect from overposting attacks, please enable the specific properties you want to bind to, for          // more details see http://go.microsoft.com/fwlink/?LinkId=317598.         [HttpPost]         [ValidateAntiForgeryToken]         public ActionResult Edit([Bind(Include = \"Id,Name,FatherName,Designation,Mobile,Email,PhotoURL\")] Employee employee, string avatarCropped)         {             string filePath = ProcessImage(avatarCropped);             employee.PhotoURL = filePath;               if (ModelState.IsValid)             {                 db.Entry(employee).State = EntityState.Modified;                 db.SaveChanges();                 return RedirectToAction(\"Index\");             }             return View(employee);         }           //[Authorize(Users =\"sumon\")]         // GET: Employees/Delete/5         public ActionResult Delete(int? id)         {             if (id == null)             {                 return new HttpStatusCodeResult(HttpStatusCode.BadRequest);             }             Employee employee = db.Employees.Find(id);             if (employee == null)             {                 return HttpNotFound();             }             return View(employee);         }           // POST: Employees/Delete/5         [HttpPost, ActionName(\"Delete\")]         [ValidateAntiForgeryToken]         public ActionResult DeleteConfirmed(int id)         {             Employee employee = db.Employees.Find(id);             db.Employees.Remove(employee);             db.SaveChanges();             return RedirectToAction(\"Index\");         }           protected override void Dispose(bool disposing)         {             if (disposing)             {                 db.Dispose();             }             base.Dispose(disposing);         }     } }    Step 8: Modify the views for Employee   Create.cshtml   @model JCropMVC.Models.Employee   @{     ViewBag.Title = \"Create\"; }   &lt;h2 class=\"breadcrumb\"&gt;     Create Employee Information &lt;/h2&gt;   @using (Html.BeginForm(\"Create\", \"Employees\", null, FormMethod.Post, new { enctype = \"multipart/form-data\" })) {     @Html.AntiForgeryToken()       &lt;hr /&gt;     @Html.ValidationSummary(true)       &lt;div class=\"form-group\"&gt;         @Html.LabelFor(model =&gt; model.Name, new { @class = \"\" })         @Html.TextBoxFor(model =&gt; model.Name, new { @class = \"form-control\", placeholder = \"Enter employee full name...\", type = \"text\" })         @Html.ValidationMessageFor(model =&gt; model.Name)     &lt;/div&gt;       &lt;div class=\"form-group\"&gt;         @Html.LabelFor(model =&gt; model.FatherName, new { @class = \"\" })         @Html.TextBoxFor(model =&gt; model.FatherName, new { @class = \"form-control\", placeholder = \"Enter father name...\", type = \"text\" })         @Html.ValidationMessageFor(model =&gt; model.FatherName)     &lt;/div&gt;       &lt;div class=\"form-group\"&gt;         @Html.LabelFor(model =&gt; model.Designation, new { @class = \"\" })         @Html.TextBoxFor(model =&gt; model.Designation, new { @class = \"form-control\", placeholder = \"Enter designation name...\", type = \"text\" })         @Html.ValidationMessageFor(model =&gt; model.Designation)     &lt;/div&gt;       &lt;div class=\"form-group\"&gt;         @Html.LabelFor(model =&gt; model.Mobile, new { @class = \"\" })         @Html.TextBoxFor(model =&gt; model.Mobile, new { @class = \"form-control\", placeholder = \"Enter mobile number...\", type = \"text\" })         @Html.ValidationMessageFor(model =&gt; model.Mobile)     &lt;/div&gt;       &lt;div class=\"form-group\"&gt;         @Html.LabelFor(model =&gt; model.Email, new { @class = \"\" })         @Html.TextBoxFor(model =&gt; model.Email, new { @class = \"form-control\", placeholder = \"Enter email address...\", type = \"text\" })         @Html.ValidationMessageFor(model =&gt; model.Email)     &lt;/div&gt;         &lt;div class=\"form-group\"&gt;         @Html.LabelFor(model =&gt; model.PhotoURL, new { @class = \"\" })         &lt;input type=\"file\" id=\"flPhoto\" name=\"upload\" /&gt;           &lt;table&gt;             &lt;tr&gt;                 &lt;td&gt;                     Width: &lt;label id=\"lblWidth\"&gt;200px&lt;/label&gt; &amp;nbsp;                     Height: &lt;label id=\"lblHeight\"&gt;200px&lt;/label&gt;                 &lt;/td&gt;                 &lt;td&gt;                     &lt;a href=\"#\" id=\"hlcropImage\" style=\"vertical-align:top;\"&gt;Crop Image&lt;/a&gt;                   &lt;/td&gt;                 &lt;/tr&gt;             &lt;tr&gt;                 &lt;td&gt;                     &lt;div style=\"height:400px; width:400px; overflow:auto;\"&gt;                         &lt;img id=\"imgEmpPhoto\" src=\"~/Images/Default/emp-blank-avatar.png\" alt=\"Employee Image\" /&gt;                     &lt;/div&gt;                 &lt;/td&gt;                 &lt;td&gt;                     &lt;canvas id=\"canvas\" height=\"5\" width=\"5\" style=\"vertical-align:top;\"&gt;&lt;/canvas&gt;                 &lt;/td&gt;             &lt;/tr&gt;         &lt;/table&gt;       &lt;/div&gt;     &lt;p&gt;         &lt;img id=\"imgCropped\" src=\"#\" style=\"display:none;\" /&gt;     &lt;/p&gt;       &lt;input type=\"hidden\" name=\"avatarCropped\" id=\"avatarCropped\" /&gt;           &lt;div class=\"form-group\"&gt;         &lt;input type=\"submit\" value=\"Create\" class=\"btn btn-primary\" /&gt;     &lt;/div&gt; }   &lt;div&gt;     @Html.ActionLink(\"Back to List\", \"Index\") &lt;/div&gt;   @section Scripts {     @Scripts.Render(\"~/bundles/jqueryval\")       &lt;script type=\"text/javascript\"&gt;           var imageCropWidth = 0;         var imageCropHeight = 0;         var cropPointX = 0;         var cropPointY = 0;         var jcropApi;           $(document).ready(function () {             //initCrop();         });           $(\"#hlcropImage\").on(\"click\", function (e) {               /*             The event.preventDefault() method stops the default action of             an element from happening. For example: Prevent a submit button             from submitting a form. Prevent a link from following the URL             */               e.preventDefault();             cropImage();         });           function initCrop() {             $('#imgEmpPhoto').Jcrop({                 onChange: setCoordsAndImgSize,                 aspectRatio: 0, // 1 means will be same for height and weight                 onSelect: setCoordsAndImgSize             }, function () { jcropApi = this });         }           function showCoordinate() {             $(\"#lblWidth\").text(imageCropWidth + \"px\");             $(\"#lblHeight\").text(imageCropHeight + \"px\");         }           function setCoordsAndImgSize(e) {               imageCropWidth = e.w;             imageCropHeight = e.h;               cropPointX = e.x;             cropPointY = e.y;               $(\"#lblWidth\").text(imageCropWidth + \"px\");             $(\"#lblHeight\").text(imageCropHeight + \"px\");         }           function cropImage() {               if (imageCropWidth == 0 &amp;&amp; imageCropHeight == 0) {                 alert(\"Please select crop area.\");                 return;             }               var img = $(\"#imgEmpPhoto\").attr(\"src\");               /*Show cropped image*/             showCroppedImage();         }           function showCroppedImage() {             var x1 = cropPointX;             var y1 = cropPointY;               var width = imageCropWidth;             var height = imageCropHeight;             var canvas = $(\"#canvas\")[0];             var context = canvas.getContext('2d');             var img = new Image();             img.onload = function () {                 canvas.height = height;                 canvas.width = width;                 context.drawImage(img, x1, y1, width, height, 0, 0, width, height);                 $('#avatarCropped').val(canvas.toDataURL());             };             img.src = $('#imgEmpPhoto').attr(\"src\");         }           function readFile(input) {               if (input.files &amp;&amp; input.files[0]) {                 var reader = new FileReader();                   /*Destroy jcrop initialization other wise it will hold it previous image in img tag*/                 if (jcropApi != null) {                     jcropApi.destroy();                 }                 reader.onload = function (e) {                     $('#imgEmpPhoto').attr('src', \"\");                     var img = $('#imgEmpPhoto').attr('src', e.target.result);                       /*Current uploaded image size*/                     var width = img[0].height;                     var height = img[0].width;                     $(\"#lblWidth\").text(width + \"px\");                     $(\"#lblHeight\").text(height + \"px\");                       //InitCrop must call here otherwise it will not work                     initCrop();                 }                   reader.readAsDataURL(input.files[0]);             }         }           $('#flPhoto').change(function () {             readFile(this);             //initCrop();         });     &lt;/script&gt; }    Edit.cshtml   @model JCropMVC.Models.Employee   @{     ViewBag.Title = \"Edit\"; }   &lt;h2&gt;Edit&lt;/h2&gt;     @using (Html.BeginForm()) {     @Html.AntiForgeryToken()       @*&lt;div class=\"form-horizontal\"&gt;*@     &lt;h4&gt;Employee&lt;/h4&gt;     &lt;hr /&gt;     @Html.ValidationSummary(true, \"\", new { @class = \"text-danger\" })     @Html.HiddenFor(model =&gt; model.Id)       &lt;div class=\"form-group\"&gt;         @Html.LabelFor(model =&gt; model.Name, htmlAttributes: new { @class = \"\" })         @Html.EditorFor(model =&gt; model.Name, new { htmlAttributes = new { @class = \"form-control\" } })         @Html.ValidationMessageFor(model =&gt; model.Name, \"\", new { @class = \"text-danger\" })     &lt;/div&gt;           &lt;div class=\"form-group\"&gt;             @Html.LabelFor(model =&gt; model.FatherName, htmlAttributes: new { @class = \"\" })               @Html.EditorFor(model =&gt; model.FatherName, new { htmlAttributes = new { @class = \"form-control\" } })             @Html.ValidationMessageFor(model =&gt; model.FatherName, \"\", new { @class = \"text-danger\" })           &lt;/div&gt;           &lt;div class=\"form-group\"&gt;             @Html.LabelFor(model =&gt; model.Designation, htmlAttributes: new { @class = \"\" })               @Html.EditorFor(model =&gt; model.Designation, new { htmlAttributes = new { @class = \"form-control\" } })             @Html.ValidationMessageFor(model =&gt; model.Designation, \"\", new { @class = \"text-danger\" })           &lt;/div&gt;           &lt;div class=\"form-group\"&gt;             @Html.LabelFor(model =&gt; model.Mobile, htmlAttributes: new { @class = \"\" })               @Html.EditorFor(model =&gt; model.Mobile, new { htmlAttributes = new { @class = \"form-control\" } })             @Html.ValidationMessageFor(model =&gt; model.Mobile, \"\", new { @class = \"text-danger\" })           &lt;/div&gt;           &lt;div class=\"form-group\"&gt;             @Html.LabelFor(model =&gt; model.Email, htmlAttributes: new { @class = \"\" })               @Html.EditorFor(model =&gt; model.Email, new { htmlAttributes = new { @class = \"form-control\" } })             @Html.ValidationMessageFor(model =&gt; model.Email, \"\", new { @class = \"text-danger\" })           &lt;/div&gt;           @*&lt;div class=\"form-group\"&gt;                 @Html.LabelFor(model =&gt; model.PhotoURL, htmlAttributes: new { @class = \"\" })                 &lt;div class=\"col-md-10\"&gt;                     @Html.EditorFor(model =&gt; model.PhotoURL, new { htmlAttributes = new { @class = \"form-control\" } })                     @Html.ValidationMessageFor(model =&gt; model.PhotoURL, \"\", new { @class = \"text-danger\" })                 &lt;/div&gt;             &lt;/div&gt;*@             &lt;div class=\"form-group\"&gt;             @Html.LabelFor(model =&gt; model.PhotoURL, new { @class = \"\" })             &lt;input type=\"file\" id=\"flPhoto\" name=\"upload\" /&gt;               &lt;table&gt;                 &lt;tr&gt;                     &lt;td&gt;                         Width: &lt;label id=\"lblWidth\"&gt;200px&lt;/label&gt; &amp;nbsp;                         Height: &lt;label id=\"lblHeight\"&gt;200px&lt;/label&gt;                     &lt;/td&gt;                     &lt;td&gt;                         &lt;a href=\"#\" id=\"hlcropImage\" style=\"vertical-align:top;\"&gt;Crop Image&lt;/a&gt;                       &lt;/td&gt;                     &lt;/tr&gt;                 &lt;tr&gt;                     &lt;td&gt;                         &lt;div style=\"height:400px; width:400px; overflow:auto;\"&gt;                             &lt;img id=\"imgEmpPhoto\" src=\"@Model.PhotoURL\" alt=\"Employee Image\" /&gt;                         &lt;/div&gt;                     &lt;/td&gt;                     &lt;td&gt;                         &lt;canvas id=\"canvas\" height=\"5\" width=\"5\" style=\"vertical-align:top;\"&gt;&lt;/canvas&gt;                     &lt;/td&gt;                 &lt;/tr&gt;             &lt;/table&gt;           &lt;/div&gt;         &lt;p&gt;             &lt;img id=\"imgCropped\" src=\"#\" style=\"display:none;\" /&gt;         &lt;/p&gt;           &lt;input type=\"hidden\" name=\"avatarCropped\" id=\"avatarCropped\" /&gt;             &lt;div class=\"form-group\"&gt;             &lt;div class=\"col-md-offset-2 col-md-10\"&gt;                 &lt;input type=\"submit\" value=\"Save\" class=\"btn btn-primary\" /&gt;             &lt;/div&gt;         &lt;/div&gt;         @*&lt;/div&gt;*@ }   &lt;div&gt;     @Html.ActionLink(\"Back to List\", \"Index\") &lt;/div&gt;   @section Scripts {     @Scripts.Render(\"~/bundles/jqueryval\")     &lt;script type=\"text/javascript\"&gt;           var imageCropWidth = 0;         var imageCropHeight = 0;         var cropPointX = 0;         var cropPointY = 0;         var jcropApi;           $(document).ready(function () {             //initCrop();         });           $(\"#hlcropImage\").on(\"click\", function (e) {               /*             The event.preventDefault() method stops the default action of             an element from happening. For example: Prevent a submit button             from submitting a form. Prevent a link from following the URL             */               e.preventDefault();             cropImage();         });           function initCrop() {             $('#imgEmpPhoto').Jcrop({                 onChange: setCoordsAndImgSize,                 aspectRatio: 0, // 1 means will be same for height and weight                 onSelect: setCoordsAndImgSize             }, function () { jcropApi = this });         }           function showCoordinate() {             $(\"#lblWidth\").text(imageCropWidth + \"px\");             $(\"#lblHeight\").text(imageCropHeight + \"px\");         }           function setCoordsAndImgSize(e) {               imageCropWidth = e.w;             imageCropHeight = e.h;               cropPointX = e.x;             cropPointY = e.y;               $(\"#lblWidth\").text(imageCropWidth + \"px\");             $(\"#lblHeight\").text(imageCropHeight + \"px\");         }           function cropImage() {               if (imageCropWidth == 0 &amp;&amp; imageCropHeight == 0) {                 alert(\"Please select crop area.\");                 return;             }               var img = $(\"#imgEmpPhoto\").attr(\"src\");               /*Show cropped image*/             showCroppedImage();         }           function showCroppedImage() {             var x1 = cropPointX;             var y1 = cropPointY;               var width = imageCropWidth;             var height = imageCropHeight;             var canvas = $(\"#canvas\")[0];             var context = canvas.getContext('2d');             var img = new Image();             img.onload = function () {                 canvas.height = height;                 canvas.width = width;                 context.drawImage(img, x1, y1, width, height, 0, 0, width, height);                 $('#avatarCropped').val(canvas.toDataURL());             };             img.src = $('#imgEmpPhoto').attr(\"src\");         }           function readFile(input) {               if (input.files &amp;&amp; input.files[0]) {                 var reader = new FileReader();                   /*Destroy jcrop initialization other wise it will hold it previous image in img tag*/                 if (jcropApi != null) {                     jcropApi.destroy();                 }                 reader.onload = function (e) {                     $('#imgEmpPhoto').attr('src', \"\");                     var img = $('#imgEmpPhoto').attr('src', e.target.result);                       /*Current uploaded image size*/                     var width = img[0].height;                     var height = img[0].width;                     $(\"#lblWidth\").text(width + \"px\");                     $(\"#lblHeight\").text(height + \"px\");                       //InitCrop must call here otherwise it will not work                     initCrop();                 }                   reader.readAsDataURL(input.files[0]);             }         }           $('#flPhoto').change(function () {             readFile(this);             //initCrop();         });     &lt;/script&gt; }    Index.cshtml   @model IEnumerable&lt;JCropMVC.Models.Employee&gt;   @{     ViewBag.Title = \"Index\"; }   &lt;h2&gt;Index&lt;/h2&gt;   &lt;p&gt;     @Html.ActionLink(\"Create New\", \"Create\") &lt;/p&gt; &lt;table class=\"table table-hover\"&gt;     &lt;tr class=\"success\"&gt;         &lt;th&gt;             @Html.DisplayNameFor(model =&gt; model.Name)         &lt;/th&gt;         &lt;th&gt;             @Html.DisplayNameFor(model =&gt; model.FatherName)         &lt;/th&gt;         &lt;th&gt;             @Html.DisplayNameFor(model =&gt; model.Designation)         &lt;/th&gt;         &lt;th&gt;             @Html.DisplayNameFor(model =&gt; model.Mobile)         &lt;/th&gt;         &lt;th&gt;             @Html.DisplayNameFor(model =&gt; model.Email)         &lt;/th&gt;         &lt;th&gt;             @Html.DisplayNameFor(model =&gt; model.PhotoURL)         &lt;/th&gt;         &lt;th&gt;&lt;/th&gt;     &lt;/tr&gt;   @foreach (var item in Model) {     &lt;tr&gt;         &lt;td&gt;             @Html.DisplayFor(modelItem =&gt; item.Name)         &lt;/td&gt;         &lt;td&gt;             @Html.DisplayFor(modelItem =&gt; item.FatherName)         &lt;/td&gt;         &lt;td&gt;             @Html.DisplayFor(modelItem =&gt; item.Designation)         &lt;/td&gt;         &lt;td&gt;             @Html.DisplayFor(modelItem =&gt; item.Mobile)         &lt;/td&gt;         &lt;td&gt;             @Html.DisplayFor(modelItem =&gt; item.Email)         &lt;/td&gt;         &lt;td&gt;             &lt;img src= \"@item.PhotoURL\" id=\"photo\" height=\"50\" width=\"50\" /&gt;             @*&lt;img id=\"photo\" src=\"~/Images/Photo/Emp-94a18d39-6de9-4330-a035-9a9dcf7c0927.png\"\" /&gt;*@             @*@Html.DisplayFor(modelItem =&gt; item.PhotoURL)*@         &lt;/td&gt;         &lt;td&gt;             @Html.ActionLink(\"Edit\", \"Edit\", new { id=item.Id }) |             @Html.ActionLink(\"Details\", \"Details\", new { id=item.Id }) |             @Html.ActionLink(\"Delete\", \"Delete\", new { id=item.Id })         &lt;/td&gt;     &lt;/tr&gt; }   &lt;/table&gt;   Delete.cshtml   @model JCropMVC.Models.Employee   @{     ViewBag.Title = \"Delete\"; }   &lt;h2&gt;Delete&lt;/h2&gt;   &lt;h3&gt;Are you sure you want to delete this?&lt;/h3&gt; &lt;div&gt;     &lt;h4&gt;Employee&lt;/h4&gt;     &lt;hr /&gt;     &lt;dl class=\"dl-horizontal\"&gt;         &lt;dt&gt;             @Html.DisplayNameFor(model =&gt; model.Name)         &lt;/dt&gt;           &lt;dd&gt;             @Html.DisplayFor(model =&gt; model.Name)         &lt;/dd&gt;           &lt;dt&gt;             @Html.DisplayNameFor(model =&gt; model.FatherName)         &lt;/dt&gt;           &lt;dd&gt;             @Html.DisplayFor(model =&gt; model.FatherName)         &lt;/dd&gt;           &lt;dt&gt;             @Html.DisplayNameFor(model =&gt; model.Designation)         &lt;/dt&gt;           &lt;dd&gt;             @Html.DisplayFor(model =&gt; model.Designation)         &lt;/dd&gt;           &lt;dt&gt;             @Html.DisplayNameFor(model =&gt; model.Mobile)         &lt;/dt&gt;           &lt;dd&gt;             @Html.DisplayFor(model =&gt; model.Mobile)         &lt;/dd&gt;           &lt;dt&gt;             @Html.DisplayNameFor(model =&gt; model.Email)         &lt;/dt&gt;           &lt;dd&gt;             @Html.DisplayFor(model =&gt; model.Email)         &lt;/dd&gt;           &lt;dt&gt;             @Html.DisplayNameFor(model =&gt; model.PhotoURL)         &lt;/dt&gt;           &lt;dd&gt;             @Html.DisplayFor(model =&gt; model.PhotoURL)         &lt;/dd&gt;       &lt;/dl&gt;       @using (Html.BeginForm()) {         @Html.AntiForgeryToken()           &lt;div class=\"form-actions no-color\"&gt;             &lt;input type=\"submit\" value=\"Delete\" class=\"btn btn-default\" /&gt; |             @Html.ActionLink(\"Back to List\", \"Index\")         &lt;/div&gt;     } &lt;/div&gt;   Step 9: Add image folders  Add Image folders and sub folders (Deafult and Photo) as follows. Add blank photo in the Default folder to show blank photo for the employee.      Step 10: Add Employee link  Add Employee link in the nav bar of _Layout page as follows.  &lt;ul class=\"nav navbar-nav\"&gt;     &lt;li&gt;@Html.ActionLink(\"Home\", \"Index\", \"Home\")&lt;/li&gt;     &lt;li&gt;@Html.ActionLink(\"About\", \"About\", \"Home\")&lt;/li&gt;     &lt;li&gt;@Html.ActionLink(\"Contact\", \"Contact\", \"Home\")&lt;/li&gt;     &lt;li&gt;@Html.ActionLink(\"Employee\", \"Index\", \"Employees\")&lt;/li&gt; &lt;/ul&gt;   Step 11: Run the application  Now run the application. Click Employee link in the nav bar. You can View, add, modify and delete employee information. If you go to the create or edit page, you have an option to upload photo and have option to crop the image and then save the image with employee information. Yes! You are done. Let’s cheers!     ","categories": ["ASP.NET MVC","C#","JavaScript"],
        "tags": ["aspnetmvc","javascript","csharp"],
        "url": "http://localhost:4000/image-cropping-using-jcrop-with-in-asp-net-mvc-application/",
        "teaser":null},{
        "title": "Easy Solution On How to Stop Growing Log File Too Big",
        "excerpt":"In various organizations, huge SQL databases are equipped, which perform more than millions of transactions per hour. A SQL server database has data files and transaction log files. Data files store the user data and transaction log files store all the changes user made in the database and all the details of the transactions performed while making changes.   Now, the issue is that this feature of logging the details, every time changes are made in SQL server can not be controlled or stopped. This causes a grave issue when the size of SQL server overgrows. However, the way in which these log files grow and configure can be controlled. So, to avoid SQL server log file growing unexpectedly, consider any of the following methods given below. Also, to manage the large area size, it is good to shrink log file size, we will discuss the ways to resolve the same issue in this content.   SQL Server- Solutions To Stop Growing Log File Too Big   There are numerous ways for truncating sql ldf too big file. Some of the chief solutions have been provided in the following segment of this content.           Monitor default Size Limit: In case SQL ldf file is growing too big then, put a large default size limit on the SQL server, so that it does not expands automatically and overloads the SQL server database.            Using the Memory Units: Remember to configure the expansion of log files by making use of the memory units instead of percentage if the SQL transaction log file grows quickly.            Changing the recovery model: Simple Recovery model definitely helps in controlling and shrinking the log file size. Based on how crucial the data is, user can choose any of the following recovery models namely,      1. Simple Recovery Model      2. Bulk-logged Recovery Model      3. Full Recovery Model       In the simple model, the most recent backup of the database of SQL server is recovered while in the bulk-logged or full recovery model, database can be recovered up to the point of failure. This recovery is done by restoring transaction log file.   By default, Full recovery model is set. Then, user has to regularly back up the transaction log files to prevent them from becoming too large and to remove inactive transactions from transaction log. Also, consider this when taking back up of .ldf files.   NOTE: If user is defragmenting indexes, make use of DBCC INDEXDEFRAG and not DBCC DBREINDEX. If DBCC DBREINDEX is used then, transaction log file might expand drastically.   Using Manual Solution:   If maintenance is not carried on regularly, log file size grows too big. Therefore, it is recommended to take these manual steps before it takes up all available disk space. Now, let us look at the method to shrink a SQL Database’s transaction log file:      Firstly, Open the SQL Server Management Studio and then log in to the proper SQL instance.   In Object Explorer tree, expand the Database folder » select database with large .ldf file.   After this, Create a full backup of database by right-clicking on it » Select Tasks » Back Up.            User should make sure that Backup type is set to Full then, Delete any existing destinations » add a new Disk destination.       Browse a location with a lot of free disk space » rename the backup file with the .BAK extension.       Choose the bullet option for Overwrite all existing backup sets on the ‘Options’ page.       Finally, user can click on the ‘OK’ button to start the process of taking backup of log files.           Similarly, create a transaction log backup of the database in the same manner as done above.            Right-click on database » Select Tasks » Backup and assure that backup type is set to Transaction log.       Choose the bullet option for Overwrite all existing backup sets on the ‘Options’ page.       Finally, user can click on the ‘OK’ button to start the process of taking backup of log files.           The closing step is the shrinking of transaction log files by right-clicking database » Tasks » Shrink » Files   NOTE: User may repeat steps 3,4 and 5 until the .ldf file size becomes physically smaller.   Conclusion   In this content, we have discussed various solutions on how to truncate .ldf files if transaction file size becomes too large. This is necessary in order to manage data with ease. Manual method and some general solutions have been written in this content to enlighten users when they come across such issues while dealing with SQL Server.  ","categories": ["SQL Server"],
        "tags": ["sqlserver"],
        "url": "http://localhost:4000/how-to-stop-growing-log-file-too-big/",
        "teaser":null},{
        "title": "A Simple Data Science Experiment With Azure Machine Learning Studio",
        "excerpt":" &lt;!DOCTYPE html&gt;                                                                                                                                                                                                                                                                                                         my-blogs/2017-07-02-a-simple-data-science-experiment-with-azure-machine-learning-studio.md at master · mahedee/my-blogs                                                                                                                                                                                                                                                     Skip to content                                                                                                                                                   &lt;/option&gt;&lt;/form&gt;                &lt;input type=\"text\"           class=\"form-control input-sm header-search-input jump-to-field js-jump-to-field js-site-search-focus js-site-search-field is-clearable\"           data-hotkey=s,/           name=\"q\"           data-test-selector=\"nav-search-input\"           placeholder=\"Search or jump to…\"           data-unscoped-placeholder=\"Search or jump to…\"           data-scoped-placeholder=\"Search or jump to…\"           autocapitalize=\"off\"           role=\"combobox\"           aria-haspopup=\"listbox\"           aria-expanded=\"false\"           aria-autocomplete=\"list\"           aria-controls=\"jump-to-results\"           aria-label=\"Search or jump to…\"           data-jump-to-suggestions-path=\"/_graphql/GetSuggestedNavigationDestinations\"           spellcheck=\"false\"           autocomplete=\"off\"         &gt;                                                                                                                                        In this repository                       All GitHub              ↵                  Jump to       ↵                     No suggested jump to results                                                                                    In this repository                       All GitHub              ↵                  Jump to       ↵                                                                                        In this user                       All GitHub              ↵                  Jump to       ↵                                                                                        In this repository                       All GitHub              ↵                  Jump to       ↵                                                                                     Dashboard               Pull requests             Issues                            Marketplace                    Explore             Codespaces        Sponsors             Settings                    mahedee      &lt;/option&gt;&lt;/form&gt;                               Sign out                                                                                                                                                                                 New repository          Import repository        New gist          New organization                                           &lt;/img&gt;                                                                                                   Sorry, something went wrong.                                                                                                                                                                                                                            mahedee      /        my-blogs      Private                                                                                                                 Unwatch                                                              Stop ignoring                                                              Watch                                                                                    Notifications                                                                                                                                                                                                                                                                    Participating and @mentions                                                                 Only receive notifications from this repository when participating or @mentioned.                                                                                                                                                                                                           All Activity                                                                 Notified of all notifications on this repository.                                                                                                                                                                                                           Ignore                                                                 Never be notified.                                                                                                                                                                                             Custom                                                                                                                                  Select events you want to be notified of in addition to participating and @mentions.                                                                                                                                                                                                                                                            Custom                                                                                                                                                 Custom                                                                                                          Select events you want to be notified of in addition to participating and @mentions.                                                                                                                          Issues                                                                                                                               Pull requests                                                                                                                               Releases                                                                                                                               Discussions                                                                                                                                                                                                            Security alerts                                                                                        Apply                        Cancel                                                                            1                                                                                      Unstar                     0                                                               Star                    0                                                                                                                       Fork                                                                Fork my-blogs                                                                                           If this dialog fails to load, you can visit the fork page directly.                                                                        0                                                                                                      Code                                                                         Issues             11                                                            Pull requests             0                                                            Actions                                                                         Projects             0                                                            Wiki                                                                         Security                                                                         Insights                                                                         Settings                                                                               More                                                                                                  Code                                                                          Issues                                                                          Pull requests                                                                          Actions                                                                          Projects                                                                          Wiki                                                                          Security                                                                          Insights                                                                          Settings                                                    Open in github.dev                                Permalink                                                master                                    Switch branches/tags                                                                                 Branches           Tags                                                           Could not load branches                                  &lt;/option&gt;&lt;/form&gt;                                                                Create branch:            from ‘master’                                                                                                                                                        default                     View all branches                                                                       Could not load tags                                          Nothing to show                                                     default                                                                                                     View all tags                                                           my-blogs/_posts/2017/2017-07-02-a-simple-data-science-experiment-with-azure-machine-learning-studio.md                        Go to file                                                                                                        Go to file                 T                                                                             Go to line                   L                                                                                                            Copy path                                                                                   Copy permalink                                                                                               &nbsp;                              &nbsp;           Cannot retrieve contributors at this time                                                               168 lines (113 sloc)            7.48 KB                          Raw                    Blame                                                                       &lt;/option&gt;&lt;/form&gt;                                                           &lt;/option&gt;&lt;/form&gt;                                                                                                                                                                  Open with Desktop                                                                     View raw                                                                     View blame                                                                            Edit file                                               Delete file                                                              title   categories   tags   excerpt               A simple data science experiment with Azure Machine Learning Studio            AI   Machine Learning   Bot                    ai   machinelearning   bot           Machine Learning is concerned with computer programs that automatically improve their performance through experience. It learns from previous experience or data. Data science, also known as data-driven science, is an interdisciplinary field about scientific methods, processes, and systems to extract knowledge or insights from data in various forms, either structured or unstructured, similar to data mining. (Wikipedia)         What is Machine Learning, data science and Azure Machine Learning Studio?   Machine Learning is concerned with computer programs that automatically improve their performance through experience. It learns from previous experience or data. Data science, also known as data-driven science, is an interdisciplinary field about scientific methods, processes, and systems to extract knowledge or insights from data in various forms, either structured or unstructured, similar to data mining. (Wikipedia) Azure Machine Learning Studio is a tool that uses to develop predictive analytic solutions in the Microsoft Azure Cloud.  Experiment Overview  Azure Machine Learning Studio is an excellent tool to develop and host Machine Learning Application. You don’t need to write code. You can develop an experiment by drag and drop. Here we will create a simple Machine Learning experiment using Azure Machine Learning Studio.  Tools and Technology used   Azure Machine Learning Studio  Now create our experiment step by step  Step 1: Create Azure Machine Learning Workspace   Go to https://portal.azure.com and log in using your azure credential Click More Services from left panel of azure portal Click “Machine Learning Studio Workspace” under “Intelligence + Analytics” category Add a work space by clicking add (+) button at the top left corner Choose pricing tire and select. Figure shows pricing tire below. Finally click create button      Step 2: Launch Machine Learning Studio   Click Launch Machine Learning Studio to launch machine learning studio Then login to the portal    Step 3: Create a blank experiment   Select Experiment Menu. Then click New (+), at the bottom left corner. Click Blank Experiment. In addition to blank experiment there are many other sample experiments. You can load and modify the experiment. Once the new blank experiment has been loaded, you will then see the Azure ML Studio visual designer as follows.      Step 4: Add data set in the ML Studio visual designer   You can import data set or can use saved data set. In this case we use saved sample dataset. Click Saved Datasets from left top corner. Drag and drop “Adult Census Income Binary Classification dataset” from Saved Datasets -&gt; Sample    Step 5: Select columns in dataset   Expand Data Transformation -&gt; Manipulation Drag and drop “Select Columns in Dataset” to the visual surface Connect the “Dataset” with “Select Columns in Dataset” in visual surface Click the Select Columns in Dataset Click Launch column selector in the property pane Select “WITH RULES” Add age, education, marital-status, relationship, race, sex, income columns and finally click tick mark of the bottom right corner.      Step 6: Split up the dataset   Split your input data into two – Training data and Validation data Expand “Data Transformation” -&gt; “Sample and Split” from left pane Drag and drop Split Data to Azure Machine Learning Studio visual surface Connect the split module with “Select Columns in Dataset” in visual surface Click the Split module and set the value of the Fraction of Rows to 0.80 in the right pane of the visual designer surface. This means 80 percent data will be used for training and rest of the data will be used for validation.    Step 7: Train the model   Expand “Machine Learning” -&gt; “Train” from left pane Drag and drop “Train Model” to Azure ML Studio visual surface Connect split dataset1 to train model (second point of train model as figure below) Expand Machine Learning -&gt; Initialize Model -&gt; Classification from left pane Drag and drop “Two-Class Boosted Decision Tree” as shown figure Connect “Two-Class Boosted Decision Tree” to Train Model (first point of train model as figure below)    Step 8: Choose columns for prediction   Click the Train Model Click “Launch column selector” in the property pane Select Include and add column name “Income”. Because this experiment will predict income. Click tick mark on the bottom right corner    Step 9: Score the model   Expand “Machine Learning” -&gt; “Score” Drag and drop “Score Model” to the visual design surface. Connect Train Model to Score Model (first point of Score Model as figure below) Connect “Split” to “Score Model” (second point of Split with Second point of Score Model as figure below)    Step 10: Evaluate the model   Expand “Machine Learning” -&gt; “Evaluate” Drag and drop “Evaluate Model” to the visual design surface. Connect “Score Model” to “Evaluate Model” (first point of Evaluate Model as figure below) Now click “Run” at the bottom of the Azure ML Studio. After processing, if you see each stage marked as green, means its ok. After completing process, right click on the Evaluate Model -&gt; Evaluation Result -&gt; Visualize You will see the accuracy curve as shown below. Click Save As at the bottom of the screen        Step 11: Setup a web service   Click Setup Web Service -&gt; Predictive Experiment Connect Web Service Input to Score model (As shown below figure) Select “Column in Dataset”, remove income column from dataset. Because model is now ready to predict income. Save and run the model from bottom of the ML studio        Step 12: Deploy Web Service   Click Deploy Web Service -&gt; Deploy Web Service [Classic] from the bottom of ML Studio After completing deployment process, you will see a dashboard. Here you will see different documents to test and consume services as shown below Click “Test Button” from the Dashboard You will see a popup dialog to take input Type input as like below and Click Tick mark You will see desired output as like figure. Here you see income &gt; 50K        Now you have developed a simple data science experiment. You can now embed this with your application. API links, security key and necessary document is given in the dashboard.                                     &lt;/option&gt;&lt;/form&gt;                        Go                                                                                       &copy; 2021 GitHub, Inc.         Terms         Privacy         Security         Status         Docs                                       Contact GitHub         Pricing       API       Training         Blog         About                                                                     You can’t perform that action at this time.                       You signed in with another tab or window. Reload to refresh your session.     You signed out in another tab or window. Reload to refresh your session.                                                                                                                                          ","categories": [],
        "tags": [],
        "url": "http://localhost:4000/a-simple-data-science-experiment-with-azure-machine-learning-studio/",
        "teaser":null},{
        "title": "Create your first chat bot application using Microsoft Bot Framework",
        "excerpt":"What is chatbot?      Bot is an automated software designed by human programmers to do tasks   Chatbot is an automated software to talk customer using messaging apps   Why Chatbot?      One to one messaging with thousands of customers at a time   Available in 24/7   Lots of application in real world            Bank and Insurance       HR issues       Ordering Pizza       Customer support       Personal Finance Assistant       Schedule Meeting       Product Suggestions       Weather forecasting etc.           What is Microsoft Bot Framework?      A platform for building, connecting, testing and deploying powerful and intelligent bots   Open source   Connect cross platform with the flip of a switch   Installation Requirements      Visual Studio 2015 / 2017 (In this demo I use Visual Studio 2017)   Download Bot template: Visual Studio Bot Template – C# (http://aka.ms/bf-bc-vstemplate )   Save the zip file to Visual Studio 2015/2017 template directory “%USERPROFILE%\\Documents\\Visual Studio 2017\\Templates\\ProjectTemplates\\Visual C#”   Create First Application     Start Visual Studio 2017   From the file -&gt; New-&gt;Project   Select Visual C# template   Select Bot Application   Enter project name (For example DigitalAssistant)   Browse save location   Click OK   A bot application with default structure will be created.   Now run your application, you will see the following screen.      If you see the above screen, means your application is created successfully.   Test your project using bot emulator      Download bot emulator from the following link https://github.com/Microsoft/BotFramework-Emulator/releases/download/v3.5.32/botframework-emulator-Setup-3.5.32.exe   Install bot emulator   Test your project by typing http://localhost:3979/api/messages in the emulator url   Click Connect button of the emulator   Now type some message in the emulator   You will see the following screen   If you see the reply message like this, it means its means it works properly.      Next: Deploy bot application to Azure and register in Microsoft Bot Framework  ","categories": ["AI","Machine Learning","Bot"],
        "tags": ["ai","machinelearning","bot"],
        "url": "http://localhost:4000/create-your-first-chat-bot-application-using-microsoft-bot-framework/",
        "teaser":null},{
        "title": "Software Review – Stellar Phoenix SQL Database Repair",
        "excerpt":"In this fast-evolving Digital Environment, Corruption is the most common occurrence. It mutely strikes at any instant and takes a toll on transaction, performance, and database availability. The reason for the SQL database SUSPECT condition can be anything including Application Crash, Improper Shutdown to the Missing Transaction Log. This action is potential enough to thwart the production badly.   Therefore, to counterbalance its impact and repair affected SQL Database, precise Recovery is the dire need. The best approach to cater to this request is by employing a Repair tool that combats the corruption and repairs the Database efficiently.   Thinking to buy a reliable Repair tool? Jumbled in the tons of options? Wondering which option is right for you? Here, Stellar Phoenix SQL Database Repair would serve the purpose. It has been self-evaluated, experimented, and approved. This fast and powerful tool is also the first and foremost choice for several professionals.   Stellar Phoenix SQL Database Repair: Transparent Analysis   Product Details      Product Name: Stellar Phoenix SQL Database Repair   Version: 8.0   Type: Do-it-yourself   Language Support: English   Limitations: NA   Minimum System Requirement:      Processor: Pentium Class   Operating System: Windows 10, 8, 7, Vista, XP and Windows Server 2008, 2003   Memory: At least 1 GB   Hard Disk: Minimum of 50 MB   Version Support: MS SQL Server 2016, 2014, 2012, 2008 R2, 2008, 200864, 2008 Express, 2005, 200564, Express, 2000, 2000*64, 7.0 and mixed formats   Software Versions:   Demo Version      Intended for evaluation purpose   Enables to view only MDF files preview   License Version     Facilitates saving   Permits you to take advantage of all features   Brief Outline   An impressive do-it-yourself SQL Recovery software intended to fight back almost all SQL Server database damage or corruption scenarios including unexpected system shutdown, virus attack, to media read error. Further, recovers inaccessible MS SQL Server database files—MDF and NDF.   Backed by powerful non-destructive repair algorithms, this dedicated solution promises 100% database integrity assurance during repairing as well as recovering. With hands on this tool, you can safely recover tables, rules, indexes, triggers, keys, and defaults. The best thing about this software is its ability to recover even heavily damaged files seamlessly.   Key Features:      Supports recovery for deleted records   Capability to store repaired database to the Live database   Capability to save repaired database into CSV, HTML, and XLS format   Prominent Features:      Fast scanning algorithms   Facilitates Recoverable Database Objects Preview   Aids Object Name Search in tree view   Facilitates creation of Sorted tables in tree view   Prepare distinct log report after scanning database   Facilitates auto new database recreation   Option to save the scanned result automatically   Support Options      SQL Server Large MDF and NDF files   MS SQL Server Sequence Objects   Standard Compression Scheme for Unicode   MS SQL Server ROW Compressed data   MS SQL Server PAGE Compressed data   XML data types, XML indexes   SQL Server File stream data types, sparse columns, columns set property   Recovery Options      Column Row GUID COL Property   Defaults and Default constraints   Sp_addextended Property   Stored Procedure, Synonyms, and Functions   Tables, Identity Triggers, Indexes, Collations, and Views   Predefined defaults, default values, and Rules   Primary, Foreign, and Unique Keys   Check constraints, Null / Not Null, and User Defined Data Types   Positive Traits      Secure   Reliable   Easy to use   Straightforward   Simple user-interface   Ensures Data Integrity   ROW and PAGE Compressed Data Recovery Is In frame   The most distinguish feature of this software is its ability to recover SQL tables with PAGE and ROW compression. It is a much-demanded need by many users. In addition, it offers support for SQL Server 2008 R2 SCSU.   Powerful Algorithms to Safeguard Data Integrity   Thanks to its powerful algorithms, the top-most concern for every individual—Data Integrity is always maintained. This software comprehensively scans MDF files and efficiently recover as much data as possible   Deleted Record Recovery Is No More Hassle   This software enables you to recover corrupt database deleted records effortlessly without any alteration in original hierarchy. After recovery, you can easily save them in the newly created table.   Multiple Saving Options for Added Convenience   This powerful software has programmed to offer as much ease as much possible. Thereby, to provide utmost comfort, it comes with multiple saving options. You can choose the desired option to save the repaired SQL Server database. The hidden secret of this feature is that you do not require SQL Server on your system to access the file.   All Database Components Recovery Is In Frame   Another efficient feature speaking of its diverse nature. It lets you recover almost everything including column set property, Keys, Rules, and Indexes, to Stored Procedures in a hassle-free manner.   Selective Recovery is No More Tedious Task   With hands on this software, you can effortlessly perform selective database objects recovery. It allows you to choose desired database objects for recovery and save them at a specific location.   Disruption Is No more a Hindrance   Another quite significant feature of this software is its reconnection ability to Server automatically, in the case of interruption while repairing. Thanks to this feature, you can repair smoothly.   How does it Work?   The functionality of this software is very simple and straightforward. Simply follow the stepped instructions.   Steps to Repair and Recover are as follows:   Step 1: Download, install and launch Stellar Phoenix SQL Database Repair software using the activation key   Step 2: Click Select Database -&gt; Select the database for recovery (In case, you are unaware of the exact destination, Click Find Database -&gt;Folder -&gt; Search)      Step 3: Click Repair  Step 4: All repaired database objects will enlist in the left pane  Step 5: Click desired object to preview its data in right-pane      Step 6: Now, save the repaired database. Click on the Save button  Step 7: You have 4 options to save the repaired database      Here, I am choosing MSSQL option      Step 8: You can see New database and Live database I selected the New database option and save the repaired database. Click Browse and state destination detail  Step 9: On connection, click Connect  Step 10: On generation of File saved at the desired path dialog box, click OK      The Repaired and Repaired process is complete.   Final Verdict   Every Database users’ searches for a recovery tool on which they can ultimately rely for resolving their both day-to-day and severe database corruption issues effortlessly. However, this smart software: Stellar Phoenix SQL Database Recover has all the unique traits to work efficiently in almost all corruption cases. Moreover, it is an edge over other humble competitors in terms of ease-of-use, scanning performance, flexible options, technical support and much more. Personally, my rating for this software is 9 out of 10. Try it!  ","categories": ["SQL Server","Database"],
        "tags": ["sqlserver","database"],
        "url": "http://localhost:4000/software-review-stellar-phoenix-sql-database-repair/",
        "teaser":null},{
        "title": "Deploy bot application to Azure and register in Microsoft Bot Framework",
        "excerpt":"Before starting to read this article you are requested to read the following article Create your first chat bot application using Microsoft Bot Framework   Publish Application to Azure      Right click on the web application and click publish   Create Microsoft App Service   Select Microsoft Azure App Service   Click publish   Type App name, choose subscription, resource group, app service plan   Click create         Application is deployed to azure and you will see the following page in the browser   You will see the azure application url   You will get message end point      Register Bot with Microsoft Bot Framework      Go to https://dev.botframework.com/   Click to My bot -&gt; Create bot   Click Create button   You will redirect to Azure portal   Click “Web App bot” and then click create      Create new bot service      From Web App Bot -&gt; Click the “Create button” to start the bot creation process.   Type bot name   App name   You can keep other option by default or change as your own       Obtain Microsoft App Id and Microsoft App Password      Click settings of newly created bot service        Change message end point        Click Mange (beside Microsoft App id) link        Click Generate new password and obtain new Microsoft app id and password and then save        Now open web.config of bot application and add Microsoft App Id and password.        Publish application again to azure        Now go to Web App bot in Azure   Click Test in Web Chat   In the right side window. Type some message and enter.   You will see the following reply.    If it replied above message, means its ok. Cheers !!    ","categories": ["AI","Machine Learning","Azure Cognitive Service","Bot"],
        "tags": ["ai","machinelearning","azurecognitiveservice","bot"],
        "url": "http://localhost:4000/deploy-bot-application-to-azure-and-register-in-microsoft-bot-framework/",
        "teaser":null},{
        "title": "Introduction to Azure Cognitive Services",
        "excerpt":"What are Azure Cognitive Services?      Azure Cognitive Services are APIs, SDKs and services to build AI application without having detail knowledge on AI and data science.   Azure Cognitive Services are divided in to following five categories      Vision   Speech   Language   Search   Knowledge    It has almost 22 sets of different APIs.   Vision APIs          Computer Vision: Sets of API which allow you to access advanced algorithms for image processing and getting information.            Custom Vision: Its allows you to build custom image classifier. You can access information through API.            Content Moderator: Content Moderator provides monitoring for possible offensive, undesirable, and risky content.            Face API: Allow you to access advanced algorithm to detect and recognize face.            Emotion API: Take picture as an input, detect its emotion and return output. For example: percentage of happiness, angry etc.            Video Indexer: Extract inner content of the video.       Speech APIs          Speech Service: Speech Service adds speech-enabled features to applications.            Custom Speech Service: Using custom speech service, you can create your own acoustic model and use it to your application.            Bing Speech API: You can easily apply speech-enabled feature to your application. For example : Speech to text and text to speech.            Translator Speech: You can translate real time speech and its output will be text.            Speaker Recognition API: Speaker recognition API helps you to identify specific speaker.       Language API     Bing Spell check: API to use spell and grammar checking.   Language Understanding Intelligence Service (LUIS): Natural language processing engine to understand query.   Linguistic Analysis: Natural language processing tool to understand sentence structure.   Text Analytics: Natural language processing tool to analyze sentiment, key phrase extraction and language detection.   Translator Text: Translator text translate text in real-time.   Web Language Model: It’s a natural language processing tool for anticipating word sequencing, completions, and word breaking of strings without any spaces   Search API     Bing News Search: Returns news based on the query of the user.   Bing Video Search: Returns list of videos based on the query of the user.   Bing Web Search: Returns list of results based on the query of the user.   Bing Autosuggest: Returns list of suggested search query based on the query of the user.   Bing Custom Search: Bing Custom Search allows you to create tailored search experiences for topics that you care about.   Bing Entity Search: Bing Entity Search returns information about entities that Bing determines are relevant to a user’s query.   Bing Image Search: Returns list of images based on the user’s query.   Bing Visual Search: Bing Visual Search provides returns insights about an image such as visually similar images, shopping sources for products found in the image, and related searches.   Knowledge API     Custom Decision Service: Custom Decision Service helps you create intelligent systems with contextual decision making for personalizing and optimizing user experience.   QnA Maker: You can create custom and static question and answer service using this service.    ","categories": ["AI","Machine Learning","Azure Cognitive Service"],
        "tags": ["ai","machinelearning","azurecognitiveservice"],
        "url": "http://localhost:4000/introduction-to-azure-cognitive-services/",
        "teaser":null},{
        "title": "How to Get Rid of SQL Server Error 3313, 3314 & 3414",
        "excerpt":"Overview   Microsoft SQL Server is Relational Database Management System (RDBMS). The primary function of this software product is storing and retrieving data as per request of other software applications installed on the same or other computers across a network (including the Internet). Just like other computer applications, SQL Server also incorporates some error messages with it. In this technical paper, we are going to discuss some common SQL Server errors and the techniques to resolve them easily. So, let us get started!   SQL Server Error 3313  Description: ‘Could not redo log record’ error occurs in SQL Server while redoing of a logged operation in database ‘%. This error occurs at log record ID %S_LSN. The particular failure is previously logged as the error in the Windows Event Log Service. This error places the database into a SUSPECT state. Error 3313 in SQL Server requires to restore the database from full backup or repair the entire database.   Note: The database cannot be recovered during the startup of SQL Server.   Resolution: Below are some solutions to Microsoft SQL Server error 3313.   Technique 1: Run Hardware Diagnostics   First, run the hardware diagnostics to correct all issue. Also, examine that the Microsoft Windows NT system, application log, and SQL Server log to find out the cause of hardware failure.   If there is persistent data inconsistency problems then, try to swap out various hardware components to isolate the issue. Make sure that write caching is not enabled on disk controller of your system. If you suspect that, this is the problem then, contact the hardware vendor.   Eventually, you may find it beneficial to switch to a new hardware system, including reformatting disk drives and re-installing the OS.   Technique 2: Restore from Backup   If the issue is not related to hardware and a complete backup is available then, restore the database from recent backup.   Technique 3: Run DBCC CHECKDB Command   If the backup is not available then, execute DBCC CHECKDB command without the repair clause to recognize the level of corruption. DBCC CHECKDB command is recommended to repair the corrupted database.   SQL Server Error 3314  Description: It is a rollup error to undo the recovery process. It occurs while undoing a logged operation in database ‘%. It occurs in log record ID %S_LSN. It places the database into the SUSPECT state. The primary and other filegroups are suspect and might be damaged. One can recover the database or file from the backup or can repair the database.   Resolution: First workaround to fix SQL Server error 3314 is restore the database from backup. The server is recommended to use the current backup file to restore the SUSPECT database. However, if the backup is not available then, go to the following solution:      Execute DBCC CHECDB command as an emergency repairing technique. For this run the below mentioned command:     ALTER DATABASE SET EMERGENCY          After setting the database to emergency mode, try to copy or move whole data (as much possible) to another database.       SQL Server Error 3414  ‘SQL Server service not starting: Error Code 3414’ is an error message that occurs while logging in or start-up time when the automatic recovery of SQL database is not completed properly. This error is stated as follows:      Note:The description of error 3414 can be found in the Event Log or ERRORLOG entry of SQL Server, while the database attempts recovery procedure and fails to do the same.   If SQL Server finds it hard to recuperate the scheduled database from a suspicious condition the error 3414 occurs. If the database recovery from SQL error 3414 becomes failed, this will update ‘sys.databases.state_desc’ and ‘SQL Server Management Studio’ both column status as a SUSPECT.   Resolution: The error message 3414 provides two choices:      “Restore from a recent good backup”   “Diagnose the recovery error and fix them”   Yet, to fix the issue, the alternative to restore from complete backup is good in some cases but if it is not possible; try the following alternatives:      Utilize the Database Console Commands, rather ’emergency repair’ procedure provided by DBCC CHECKDB   Copy the healthy or recoverable data to another database Note: Via above-mentioned technique, the operational consistency is not guaranteed.   Quick Tip: SQL Error 3313, 3314 and 3414 make database in Suspect Mode and you will not be able to access your database. To resolve these error quickly, you can use SQL Recovery Software for easy repairing of your database.   Summing It Up In this article, we have discussed some easy techniques for troubleshooting error 3313, 3314, 3414 in SQL Server. It is recommended to execute the guidelines sequentially and carefully to avoid any kind of data loss condition or you can opt for a quick solution ie SQL Recovery Tool to recover database from Suspect Mode.   Author: Andrew Jackson  ","categories": ["SQL Server","Database"],
        "tags": ["sqlserver","database"],
        "url": "http://localhost:4000/resolve-sql-error-3313-3314-3414/",
        "teaser":null},{
        "title": "Face Recognition Using Microsoft Vision API",
        "excerpt":"Factorial Calculator using C# July 1, 2018 Mahedee Fb-Button   Factorial is a positive number which is the product of all number less than or equal to that positive number. For example:   0! = 1  1! = 1  2! = 2 * 1! = 2  3! = 3 * 2! = 6  …  n! = n * (n – 1)!   Here is the sample code to calculate Factorial using both loop and recursion using c#.   using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks;  namespace Factorial01 {     /// &lt;summary&gt;     /// Author: Md. Mahedee Hasan     /// &lt;/summary&gt;     class Program     {         static void Main(string[] args)         {             int number = 0;             Console.WriteLine(\"Enter an integer number to calculate factorial: \");             Int32.TryParse(Console.ReadLine(), out number);              Console.WriteLine(\"Factorial of \" + number + \" is (using loop): \" + CalculateFactoial(number));             Console.WriteLine(\"Factorial of \" + number + \" is (Using recursion): \" + Factorial(number));             Console.ReadLine();         }          //Calculate factorial using loop          private static int CalculateFactoial(int number)         {             int factorial = 1;             for (int counter = 1; counter &lt;= number; counter++)             {                 factorial = factorial * counter;             }             return factorial;         }          //Calculate factorial using recursion         private static int Factorial(int number)         {             if (number == 0)                 return 1;             else                 return number * Factorial(number - 1);         }     } }   ","categories": ["C#","Data Structures","Algorithms"],
        "tags": ["datastructures","algorithms","csharp"],
        "url": "http://localhost:4000/factorial-calculator-using-c/",
        "teaser":null},{
        "title": "Face Recognition Using Microsoft Vision API",
        "excerpt":"Using computer vision API, you can analyze an image. To analyze an image, you can either upload an Image or specify an Image URL.   Prerequisite      A subscription keys. To get a subscription key go to this link: Obtaining Subscription Keys.   Need an IDE for example: Visual Studio 2017   Step to create a sample application:      Open visual studio and create a console application   Replace content of the Program.cs file by the following code.   using System; using System.IO; using System.Net.Http; using System.Net.Http.Headers; using System.Text;  namespace FaceDemo {     class Program     {         //NOTE: To create subscription key         //To create subscription key. Go to azure portal search emotion and create face key          // Replace  with your valid subscription key.         //It actually not subscription key. Its cognitive-face01 Key1         //To find subscriptionkey, go to Home-&gt;CognitiveFace01-&gt;ManageKeys (KEY 1)'         const string subscriptionKey = \"\";         //\"ac45c7cf-d3be-400c-95ab-4fc82887da98\";          // NOTE: You must use the same region in your REST call as you used to         // obtain your subscription keys. For example, if you obtained your         // subscription keys from westus, replace \"westcentralus\" in the URL         // below with \"westus\".         //         // Free trial subscription keys are generated in the \"westus\" region.         // If you use a free trial subscription key, you shouldn't need to change         // this region.          //To find uriBase, go to Home-&gt;CognitiveFace01-&gt;EndPoint + '/detect'         const string uriBase =             \"https://southcentralus.api.cognitive.microsoft.com/face/v1.0/detect\";          static void Main(string[] args)         {             // Get the path and filename to process from the user.             Console.WriteLine(\"Detect faces:\");             Console.Write(                 \"Enter the path to an image with faces that you wish to analyze: \");              //Image path you want to detect             string imageFilePath = @\"D:\\Projects\\Github\\ms-cognitive\\FaceDemo\\Images\\mahedee-buet.jpg\";              //Console.ReadLine();              if (File.Exists(imageFilePath))             {                 try                 {                     MakeAnalysisRequest(imageFilePath);                     Console.WriteLine(\"\\nWait a moment for the results to appear.\\n\");                 }                 catch (Exception e)                 {                     Console.WriteLine(\"\\n\" + e.Message + \"\\nPress Enter to exit...\\n\");                 }             }             else             {                 Console.WriteLine(\"\\nInvalid file path.\\nPress Enter to exit...\\n\");             }             Console.ReadLine();         }          // Gets the analysis of the specified image by using the Face REST API.         static async void MakeAnalysisRequest(string imageFilePath)         {             HttpClient client = new HttpClient();              // Request headers.             client.DefaultRequestHeaders.Add(                 \"Ocp-Apim-Subscription-Key\", subscriptionKey);              // Request parameters. A third optional parameter is \"details\".             string requestParameters = \"returnFaceId=true&amp;returnFaceLandmarks=false\" +                 \"&amp;returnFaceAttributes=age,gender,headPose,smile,facialHair,glasses,\" +                 \"emotion,hair,makeup,occlusion,accessories,blur,exposure,noise\";              // Assemble the URI for the REST API Call.             string uri = uriBase + \"?\" + requestParameters;              HttpResponseMessage response;              // Request body. Posts a locally stored JPEG image.             byte[] byteData = GetImageAsByteArray(imageFilePath);              using (ByteArrayContent content = new ByteArrayContent(byteData))             {                 // This example uses content type \"application/octet-stream\".                 // The other content types you can use are \"application/json\"                 // and \"multipart/form-data\".                 content.Headers.ContentType =                     new MediaTypeHeaderValue(\"application/octet-stream\");                  // Execute the REST API call.                 response = await client.PostAsync(uri, content);                  // Get the JSON response.                 string contentString = await response.Content.ReadAsStringAsync();                  // Display the JSON response.                 Console.WriteLine(\"\\nResponse:\\n\");                 Console.WriteLine(JsonPrettyPrint(contentString));                 Console.WriteLine(\"\\nPress Enter to exit...\");             }         }           // Returns the contents of the specified file as a byte array.         static byte[] GetImageAsByteArray(string imageFilePath)         {             using (FileStream fileStream =                 new FileStream(imageFilePath, FileMode.Open, FileAccess.Read))             {                 BinaryReader binaryReader = new BinaryReader(fileStream);                 return binaryReader.ReadBytes((int)fileStream.Length);             }         }          // Formats the given JSON string by adding line breaks and indents.         //Json Perser          static string JsonPrettyPrint(string json)         {             if (string.IsNullOrEmpty(json))                 return string.Empty;              json = json.Replace(Environment.NewLine, \"\").Replace(\"\\t\", \"\");              StringBuilder sb = new StringBuilder();             bool quote = false;             bool ignore = false;             int offset = 0;             int indentLength = 3;              foreach (char ch in json)             {                 switch (ch)                 {                     case '\"':                         if (!ignore) quote = !quote;                         break;                     case '\\'':                         if (quote) ignore = !ignore;                         break;                 }                  if (quote)                     sb.Append(ch);                 else                 {                     switch (ch)                     {                         case '{':                         case '[':                             sb.Append(ch);                             sb.Append(Environment.NewLine);                             sb.Append(new string(' ', ++offset * indentLength));                             break;                         case '}':                         case ']':                             sb.Append(Environment.NewLine);                             sb.Append(new string(' ', --offset * indentLength));                             sb.Append(ch);                             break;                         case ',':                             sb.Append(ch);                             sb.Append(Environment.NewLine);                             sb.Append(new string(' ', offset * indentLength));                             break;                         case ':':                             sb.Append(ch);                             sb.Append(' ');                             break;                         default:                             if (ch != ' ') sb.Append(ch);                             break;                     }                 }             }              return sb.ToString().Trim();         }     } }      Replace your subscription key   Replace your image path   Now you will see the following output of the given image. Output describes: Face attribute, gender, age, emotion etc.                  Input Image       Output                                         ","categories": ["AI","Machine Learning","C#"],
        "tags": ["ai","machinelearning","csharp"],
        "url": "http://localhost:4000/face-recognition-using-microsoft-vision-api/",
        "teaser":null},{
        "title": "Fix SQL Error 924 Without Any Data Loss – Most Accurate Way",
        "excerpt":"SQL Server is Microsoft’s relational database management system(RDBMS). It is used to primarily stores and retrieves data requested by other application. It is a programming language developed to handle data in a relational database management system. It is known that a database server is a computer program which provides database services to other programs and defined as a client-server model. Hence, the SQL Server is a database server that is used to implement the Structured Query Language (SQL). Due to its platform independence, it can be functioned on both GUI and command based software.   Similar to other applications, SQL Server also prompts different types of error. It is mostly encountered by an individual user or a system administrator. One such error is “SQL error 924” or “Msg 924 Database is already open and can only have one user at a time”. This blog mentions the reasons for SQL error code 924 and its possible solutions.   User Queries  Let us take a glance for the various error messages which appear in an SQL Server. These queries have been taken from various tech-forums which are relevant to SQL error code 924. Some of them are mentioned below:   “During the execution course to restore project command in SQL Server Management Studio. I encountered an error “Exclusive access could not be obtained because the database is in use”.Then, I went to the database properties and switched to Single User mode. After which, I am unable to switch it back to multi-user mode. I get the error message “Msg 924 Database is already open and can only have one user at a time.” Would I be able to solve this error, please help!”   “When I tried to open the SQL database “AdventureWorks” in a single user mode, an error message was displayed stating, Database ‘AdventureWorks’ is already open and can only have one user at a time. It is a Microsoft SQL Server, Error: 924. Is there any troubleshooting steps to resolve this issue?”   SQL Error Code 924 – Find Out The Root Cause  Microsoft SQL error 924 generally occurs whenever an attempt is been made to access the database by another user which is set as a single-user mode. Hence, only one user can access the database at a time when it is set to single-user mode.   Manual Techniques To Solve SQL Error 924          Restore the Database from Backup  A user can restore the database by using a backup. To practice this method, make sure there is an updated backup for the same. If there is no current database, try using another method.            Check SQL Server Services  There could be settings failure in the Server Services that might result this issue. Hence, it is advised to restart the SQL Server service, which may solve the problem. If the problem still exists, try to use SQL Server Configuration Manager.            DBCC CHECKDB Repair Options  One can repair the database using the following options, where “abc” is the database name,       DBCC CHECKDB(‘abc‘,REPAIR_REBUILD)   If it does not work, try using this,  DBCC CHECKDB(‘abc‘,REPAIR_ALLOW_DATA_LOSS)            Verify the Database Accessed is in Single-User Mode              Firstly, check the status of the database by executing the command below:           sp_helpdb   go   Note: If the database is in single mode, it is shown as “single user” in the status column      Now, execute sp_who to find out who is accessing the database. From there, check the database name under dbname column and the login name from the loginame column   Either contact the system administrator “sa” or the individual to arrange the database access. The “sa” or database owner “dbo” can set the database to give multi-user access. Make sure the database is not in use which is followed as,   sp_dboption , single, false  go  use   go checkpoint go   Repair SQL Error 924- An Automated Approach  SQL Error 924 is one of the common error faced by a majority of system administrators and individuals. With the manual approach, one can fix this issue but there are less chances that it repair the error completely. Hence, it is recommended to use SQL Repair tool. It is the most preferred software to fix different types of SQL errors, including SQL error 924. It offers two scanning modes to scan more effectively i.e., Quick scan and advanced scan. With its easy-to-use interface, no technical knowledge is required to use this software.   Conclusion  While working with SQL server, an error can occur anytime. One such error is SQL error 924 which can be fixed by using the above manual technique. However, it is observed that the manual approach mostly fails. This can be resolved using third party utility which enables to repair SQL errors and even support to the latest SQL server 2016 version.   Author: Andrew Jackson  ","categories": ["SQL Server","Database"],
        "tags": ["sqlserver","database"],
        "url": "http://localhost:4000/fix-sql-error-924/",
        "teaser":null},{
        "title": "Top 2 Methods To Recover Deleted Records From SQL Table",
        "excerpt":"When it comes to data management task, SQL Server is used by most of IT organizations. Sometimes, while working with table users perform UPDATE operation or DELETE operation accidentally without specifying the WHERE condition. This results in the deletion of the SQL table. Now, it becomes difficult for an organization to handle the data loss problem. Fortunately, it is possible to recover deleted records from SQL table. Thus, in this blog, we are going to introduce different ways to recover deleted table record in SQL Server.   How To Recover Deleted Records From SQL Table?  Each record present in the SQL Server transaction log is uniquely identified by a log sequence number (LSN). The user can recover deleted rows if the time of their deletion is known. This can be done only through the use of Log Sequence Number (LSNs). Basically, the LSN of a log record at which a significant event occurred can be useful for constructing correct restore sequences.   Recover Deleted Records From SQL Table – Step-By-Step Process  In this section, we are going to explain the process to recover deleted records from SQL table with the help of Transaction log and LSNs.   Step - 1. First of all, you have to check the number of rows present in the table from which the data has been mistakenly deleted via using the below-mentioned query:   SELECT * FROM Table_name   Step - 2. Now, you need to take the transaction log backup of the database by implementing the query given below:   USE Databasename GO BACKUP LOG [Databasename] TO DISK = N'D:\\Databasename\\RDDTrLog.trn' WITH NOFORMAT, NOINIT, NAME = N'Databasename-Transaction Log Backup', SKIP, NOREWIND, NOUNLOAD, STATS = 10 GO   Step - 3. After that, to recover deleted records from SQL Server Table, gather some information related to deleted rows. For this, you need to execute the query given below:   USE Databasename GO Select [Current LSN] LSN], [Transaction ID], Operation, Context, AllocUnitName FROM fn_dblog(NULL, NULL) WHERE Operation = 'LOP_DELETE_ROWS'   After executing all the above-mentioned queries, the user will obtain a Transaction ID (assuming ID is 000:000001f3) of the deleted row. Now, the user can easily determine the time when these rows were deleted via using this ID.   Step-4. To find the particular time at which rows were deleted you need to use the transaction ID 000:000001f3. You have to follow the query given below:   USE Databasename GO SELECT [Current LSN], Operation, [Transaction ID], [Begin Time], [Transaction Name], [Transaction SID] FROM fn_dblog(NULL, NULL) WHERE [Transaction ID] = ‘000:000001f3' AND [Operation] = 'LOP_BEGIN_XACT'   After executing this query, you will get the value of current Log Sequence Number (LSN). Assuming the value is 00000020:000001d0:0001   Step - 5. Next, begin the restore process to recover deleted records from SQL table:   USE Databasename GO RESTORE DATABASE Databasename_COPY FROM DISK = 'D:\\Databasename\\RDDFull.bak' WITH MOVE 'Databasename' TO 'D:\\RecoverDB\\Databasename.mdf', MOVE 'Databasename_log' TO 'D:\\RecoverDB\\Databasename_log.ldf', REPLACE, NORECOVERY; GO   Step - 6. Now, apply the transaction log to restore deleted rows by using LSN 00000020:000001d0:0001   USE Databasename  GO RESTORE LOG Databasename_COPY FROM DISK = N'D:\\Databasename\\RDOTrLog.trn' WITH STOPBEFOREMARK = ‘lsn:0x00000020:000001d0:0001' Note: Since LSN values are in HexadecimaUSE Databasename GO  RESTORE LOG Databasename_COPY FROM DISK = N'D:\\Databasename\\RDOTrLog.trn' WITH STOPBEFOREMARK = ‘lsn:0x00000020:000001d0:0001'  Note: Since LSN values are in Hexadecimal form and for restoring tables using this LSN, we need to convert it into decimal form. For this purpose, we add 0x just before the LSN as shown above form and for restoring tables using this LSN, we need to convert it into decimal form. For this purpose, we add 0x just before the LSN as shown above   Step - 7. Finally, the process to recover the deleted table from SQL Server will begin. After the completion of the process, you can easily check for the SQL table in the database   USE Databasename_Copy GO Select * from Table_name   Recover Deleted Records From SQL Table  However, it is quite difficult for the user to implement the steps correctly. As the method is highly time-consuming and requires adequate technical knowledge. Additionally, if the user is not able to perform the steps correctly then it can also lead to permanent data loss issues. Thus, to avoid all the catastrophic situations, the user can make use of an automated solution that is SysTools SQL Log Viewer. With SQL Log Analyzer, the user can easily recover deleted records from SQL Server if the database is in simple recovery mode. Moreover, the utility can also read and analyze all the transaction like INSERT, DELETE, UPDATE etc. The software is capable to preview .ldf activities such as transaction, time, name, table name, query etc.      Final Words  Every organization or businesses own important and confidential data. Thus, no one can afford the loss of their vital data. To manage tons of data, SQL Server database is used by numerous companies and users. Sometimes, the situation arises in which the user by mistake deletes SQL table. Now, recovering deleted SQL table is quite a complex task for the user without knowing the proper approach. Thus, in the above section, we have introduced a complete procedure to recover deleted records from SQL table.   Author: Andrew Jackson  ","categories": ["SQL Server","Database"],
        "tags": ["sqlserver","database"],
        "url": "http://localhost:4000/recover-deleted-records-sql-table/",
        "teaser":null},{
        "title": "Factory Design Pattern using C#",
        "excerpt":"Factory design pattern implements the concept of real world factories. Factory pattern is a creational design pattern. It deals with creating object without specifying exact class. In general, actors of factory patterns are a client, a factory and a product. Client is an object that requires another object for some purposes. Rather than creating the product instance directly, the client delegates this responsibility to the factory. The factory then creates a new instance of the product, passing it back to the client. Figure shows the whole process.      Application   For an example, a banking application works with accounts. In this application there are different types of account like saving account and checking account. All accounts are derived from an abstract account name IAccount. The IAccount defines the withdraw, deposit and interest rate which must be implemented by the concrete accounts (saving account, checking account). If clients want to know the interest rate of the Saving Account. It just invoke the factory to create an instance of Saving account.  Being invoked factory, it creates an instance of the saving account and then client just get the interest rate by invoking interest method. The client uses the object as casted to the abstract class without being aware of the concrete object type. Over all implementation of this scenario is given below.   The advantage is in here that new account can be added without changing a single line of code in the client code. Here an object is created without exposing instantiation logic to the client. The object generation is centralized here.   Benefits:      Factory Pattern is the mostly used pattern.   Decoupled the classes i.e eliminates the need to bind application specific class   The code only deals with the Interface.   Factory Pattern provides the way to create multiple instances of classes.   This provides a hook so that we can derive a sub-class to create different controls to display the data.   Factory method connects the class hierarchies with minimum coupling.   Product implementation may change over time but client remains unchanged.   Implementation   Step 1: Create an Interface - IAccount   using System; using System.Collections.Generic; using System.Linq; using System.Text;   namespace FactoryPattern {   public interface IAccount   {     string Withdraw(int amount);     string Deposit(int amount);          double InterestRate();   } }   Step 2: Create concrete classes   Saving account   using System; using System.Collections.Generic; using System.Linq; using System.Text;   namespace FactoryPattern {     /// Concrete class SavingsAccount     public class SavingsAccount : IAccount     {         public string Withdraw(int amount)         {           throw new NotImplementedException();         }                  public string Deposit(int amount)         {           throw new NotImplementedException();         }                  public double InterestRate()         {           return 12.5;         }     } }    Checking Account   using System; using System.Collections.Generic; using System.Linq; using System.Text;   namespace FactoryPattern {          ///     /// Concrete class CheckingAccount     ///          public class CheckingAccount : IAccount     {         public string Withdraw(int amount)         {             throw new NotImplementedException();         }                  public string Deposit(int amount)         {             throw new NotImplementedException();         }                  public double InterestRate()         {             return 10.24;         }              } }   Step 3: Create a Factory Object Enum   using System; using System.Collections.Generic; using System.Linq; using System.Text;   namespace FactoryPattern {     /// FactoryObject Enum to configure object     public enum FactoryObject     {         SavingAccount,         CheckingAccount     } }   Step 4: Create a factory class   using System; using System.Collections.Generic; using System.Linq; using System.Text;   namespace FactoryPattern {     ///     /// Factory class to create object     ///          public static class Factory     {         public static IAccount CreateObject(FactoryObject factoryObject)         {             IAccount objIAccount = null;                          switch (factoryObject)             {                 case FactoryObject.SavingAccount:                 objIAccount = new SavingsAccount();                 break;                                  case FactoryObject.CheckingAccount:                 objIAccount = new CheckingAccount();                 break;                                  default:                 break;             }                          return objIAccount;         }     } }    Step 5: Access from client   using System; using System.Collections.Generic; using System.Linq; using System.Text;   namespace FactoryPattern {     public class Program     {         public static void Main(string[] args)         {             //Create object by factory pattern             IAccount objSavingAccount = Factory.CreateObject(FactoryObject.SavingAccount);             IAccount objCheckingAccount = Factory.CreateObject(FactoryObject.CheckingAccount);                          //Access object             Console.WriteLine(\"Saving Account Interest Rate: \" + objSavingAccount.InterestRate());             Console.WriteLine(\"Checking Account Interest Rate: \" + objCheckingAccount.InterestRate());                          Console.ReadLine();                  }     } }   Source code  ","categories": ["OOP","C#","Design Pattern"],
        "tags": ["oop","csharp","designpattern"],
        "url": "http://localhost:4000/factory-design-pattern/",
        "teaser":null},{
        "title": "Abstract factory pattern with C#",
        "excerpt":"Abstract factory pattern is a creational design pattern. Creational design pattern is deals with object creation mechanism. Object creation mechanism is changed on the basis of problem. Abstract factory pattern provides an interface to create families of related or dependent objects without specifying their concrete class. It is identified on the basis of problem complexity. It is encapsulated the process of instantiation of family of classes. Abstract factory pattern is widely used in framework and libraries to encapsulate the family of classes.   Elements of Abstract Factory Pattern:      Abstract Factory – An Interface to create families of related or dependent item object.   Concrete Factory – Implement the interface to create families of related item object.   Abstract Item – An interface to create concrete item object.   Concrete Item – Implement the interface to create concrete item object.   Client – Uses Interface (abstract Item) provided by abstract factory and access concrete object by this interface.   Implementation:   Here I have implemented abstract factory pattern on International Cricket Team by C#. The UML diagram is given below.      Step 1: Create interface for Item class   using System; using System.Collections.Generic; using System.Linq; using System.Text;   namespace AFP {     /// Interface for Item class     public interface ICricketer     {         string BattingStrength();         string BowlingStrength();         string AllroundingStrength();         string IconPlayer();     } }   Step 2: Create Factory Interface   using System; using System.Collections.Generic; using System.Linq; using System.Text;   namespace AFP {     /// A Factory interface     public interface ICricketerFactory     {         ICricketer GetCricketer(CricketerBase cricketerBase);     } }   Step 3: Define the type of Base object   using System; using System.Collections.Generic; using System.Linq; using System.Text;   namespace AFP {     /// Define the type of Base Object     public enum CricketerBase     {         AustralianCricketer,         BangladeshiCricketer,         EnglishCricketer,         IndianCricketer,         PakistaniCricketer     } }  Step 4: Create Concrete factory class for Asian Cricketer   using System; using System.Collections.Generic; using System.Linq; using System.Text;   namespace AFP {       /// Concrete factory class for Asian Cricketer     public class AsianCricketerFactory : ICricketerFactory     {         public ICricketer GetCricketer(CricketerBase cricketerBase)         {             ICricketer objICricketer = null;                          switch (cricketerBase)             {                 case CricketerBase.BangladeshiCricketer:                     objICricketer = new BangladeshiCricketer();                     break;                                      case CricketerBase.IndianCricketer:                     objICricketer = new IndianCricketer();                     break;                 default:                     break;             }             return objICricketer;         }      } }   Step 5: Create Concrete factory class for European Cricketer   using System; using System.Collections.Generic; using System.Linq; using System.Text;   namespace AFP {     /// Concrete factory class for European Cricketer     public class EuropeanCricketerFactory : ICricketerFactory     {                 public ICricketer GetCricketer(CricketerBase cricketerBase)         {             ICricketer objICricketer = null;                          switch (cricketerBase)             {                 case CricketerBase.EnglishCricketer:                     objICricketer = new EnglishCricketer();                     break;                 default:                     break;             }             return objICricketer;         }          } }   Step 6: Create Item class for Bangladeshi Cricketer   using System; using System.Collections.Generic; using System.Linq; using System.Text;   namespace AFP {         /// Item class for Bangladeshi Cricketer         public class BangladeshiCricketer : ICricketer         {                         public string BattingStrength()             {                 return \"60%\";             }                          public string BowlingStrength()             {                 return \"70%\";             }                          public string AllroundingStrength()             {                 return \"85%\";             }                          public string IconPlayer()             {                 return \"Shakib Al Hasan\";             }         } }   Step 7: Create Item Class for Indian Cricketer   using System; using System.Collections.Generic; using System.Linq; using System.Text;   namespace AFP {           ///         /// Item class for Indian Cricketer         ///                  public class IndianCricketer : ICricketer         {                         public string BattingStrength()             {                 return \"85%\";             }                          public string BowlingStrength()             {                 return \"60%\";             }                          public string AllroundingStrength()             {                 return \"70%\";             }                          public string IconPlayer()             {                 return \"Shachin Tendulkar.\";             }         } }  Step 8: Create Item class for Pakistani Cricketer   using System; using System.Collections.Generic; using System.Linq; using System.Text;   namespace AFP {     /// Item class for Pakistani Cricketer     public class PakistaniCricketer : ICricketer     {         public string BattingStrength()         {             return \"75%\";         }                  public string BowlingStrength()         {             return \"85%\";         }                  public string AllroundingStrength()         {             return \"75%\";         }                  public string IconPlayer()         {             return \"Shahid Afridi.\";         }     } }    Step 9: Create Item class for English Cricketer   using System; using System.Collections.Generic; using System.Linq; using System.Text;   namespace AFP {     /// Item class for English Cricketer     public class EnglishCricketer : ICricketer     {                  public string BattingStrength()         {             return \"75%\";         }                  public string BowlingStrength()         {             return \"80%\";         }                  public string AllroundingStrength()         {             return \"70%\";         }                  public string IconPlayer()         {             return \"Kavin Pietersen\";         }     } }   Step 10: Create a client class   using System; using System.Collections.Generic; using System.Linq; using System.Text;   namespace AFP {      /// Client Class        class Program     {         static void Main(string[] args)         {             AsianCricketerFactory objAsianFactory = new AsianCricketerFactory();             ICricketer objIAsianCricketer = objAsianFactory.GetCricketer(CricketerBase.BangladeshiCricketer);             Console.WriteLine(\"Bangladesh Cricket Team\\nBatting Strength:\" + objIAsianCricketer.BattingStrength());             Console.WriteLine(\"Bowling Strength:\" + objIAsianCricketer.BowlingStrength());             Console.WriteLine(\"Allrounding Strength:\" + objIAsianCricketer.AllroundingStrength());             Console.WriteLine(\"Icon Player:\" + objIAsianCricketer.IconPlayer());                          Console.WriteLine();                          EuropeanCricketerFactory objEuropeanFactory = new EuropeanCricketerFactory();             ICricketer objIEuropeanCricketer = objEuropeanFactory.GetCricketer(CricketerBase.EnglishCricketer);             Console.WriteLine(\"England Cricket Team\\nBatting Strength:\" + objIEuropeanCricketer.BattingStrength());                          Console.WriteLine(\"Bowling Strength:\" + objIEuropeanCricketer.BowlingStrength());             Console.WriteLine(\"Allrounding Strength:\" + objIEuropeanCricketer.AllroundingStrength());             Console.WriteLine(\"Icon Player:\" + objIEuropeanCricketer.IconPlayer());                          Console.ReadLine();                      }     } }   Output:    Source code  ","categories": ["OOP","C#","Design Pattern"],
        "tags": ["oop","csharp","designpattern"],
        "url": "http://localhost:4000/abstract-factory-pattern/",
        "teaser":null},{
        "title": "Strategy design pattern with C#",
        "excerpt":"Strategy design pattern is a behavioral design pattern. It is a particular software design pattern where algorithms are selected at runtime.   According to the book of Design Pattern (Gang of Four) - “Define a family of algorithms, encapsulate each one, and make them interchangeable. Strategy lets the algorithm vary independently from clients that use it. “   The key phrases of definition are “Family of algorithms”, “encapsulate”, and “interchangeable”. Actually, Strategy Pattern encapsulates a collection of functions that do similar yet not identical jobs. Client is not bound to call fixed methods; rather it can change its strategy dynamically at run time. Client don’t call any methods directly by instantiating concrete classes. It sets its strategy via context class.   There are three main parts in strategy pattern:      Strategy – An interface that defines how the algorithm will be called.   Concrete Strategy – The implementation of the strategy.   Context – It holds the concrete strategy.      Implementation:   Suppose you have two lists of items. Item here integer numbers. Now, if you want to search an item from either of the lists. You can use either one of the algorithms from Linear Search or Binary search. Since binary search algorithm cannot search data without sorted list, we take here a sorted list. Now the strategy of client to use which one – Binary search or linear search. Let’s implement the problem by strategy pattern using c#.   Step 1: Create an Interface for Strategy   using System; using System.Collections.Generic; using System.Linq; using System.Text;   namespace StrategyPattern {     /// Strategy defines how algorithm will be called     public interface ISearchStrategy     {         int Search(int[] list, int item);     } }    Step 2: Create concrete strategy (Linear Search)   using System; using System.Collections.Generic; using System.Linq; using System.Text;   namespace StrategyPattern {     /// Concrete strategy(Linear Search Algorithm)     public class LinearSearch : ISearchStrategy     {            public int Search(int[] list, int item)         {             Console.WriteLine(\"Linear Search\");             int position = 0;                      for (int i = 0; i &lt; list.Count(); i++)             {                 if (list[i] == item)                 {                     position = i;                     break;                 }             }                          return position;         }     } }  Step 3: Create concrete strategy (Binary Search)   using System; using System.Collections.Generic; using System.Linq; using System.Text;   namespace StrategyPattern {     /// Concrete strategy(Binary Search Algorithm)       public class BinarySearch : ISearchStrategy     {         public int Search(int[] list, int item)         {             Console.WriteLine(\"Binary Search\");                          int beg = 0;             int end = list.Count() - 1;             int mid = (int)((beg + end)/2);             int position = 0;                          while (beg &lt;= end &amp;&amp; list[mid] != item)             {                 if(item &lt; list[mid])                 end = mid - 1;                 else                 beg = mid + 1;                                  mid = (int)((beg + end)/2);             }                          if (list[mid] == item)                 position = mid;             else                 position = 0;                          return position;         }     } }   Step 4: Create a context class   using System; using System.Collections.Generic; using System.Linq; using System.Text;   namespace StrategyPattern {     /// Concrete strategy(Linear Search Algorithm)     public class LinearSearch : ISearchStrategy     {               public int Search(int[] list, int item)         {             Console.WriteLine(\"Linear Search\");             int position = 0;                          for (int i = 0; i &lt; list.Count(); i++)             {                 if (list[i] == item)                 {                     position = i;                     break;                 }             }                          return position;         }     } }   Step 5: Client class to demonstrate strategy pattern   using System; using System.Collections.Generic; using System.Linq; using System.Text;   namespace StrategyPattern {     /// Client class         class Program     {         static void Main(string[] args)         {                      int[] sortedList = { 1, 2, 3, 4, 5, 6, 7, 8 };                          //Instance of context to follow different strategies             SearchList objSearchList = new SearchList();                          objSearchList.SetSearchStrategy(new BinarySearch());             objSearchList.Search(sortedList, 4);                          objSearchList.SetSearchStrategy(new LinearSearch());             objSearchList.Search(sortedList, 7);                          Console.ReadLine();         }     } }   Output:      Source code  ","categories": ["OOP","C#","Design Pattern"],
        "tags": ["oop","csharp","designpattern"],
        "url": "http://localhost:4000/strategy-design-pattern/",
        "teaser":null},{
        "title": "Check out Best SQL Server Disaster Recovery Options",
        "excerpt":"As the name suggests, Disaster Recovery means recovering in case of any disaster. This is a much popular method used for SQL Server database safeguard. By setting up a disaster recovery strategy and its timely execution, users can recover the data lost because of any type of natural or man-made disaster.   In this post, we will discuss some SQL Server Disaster Recovery options. This will help the users in choosing the right Disaster Recovery measures for SQL Server. But they must keep in mind that every organization’s need is different. That is why, the customized Disaster Recovery policy should reflect the requirements of the company.   Best SQL Server Disaster Recovery Options  Here, we will discuss the methods often considered for SQL Server Disaster Recovery by various organizations. We will learn about the approaches in brief and also know their pros and cons.   Backup and Restore  SQL Server offers this feature to its users, which is the most basic method of Disaster recovery. Using various native techniques like T-SQL, PowerShell, or SSMS, full backup of the complete database can be created and saved in a secure location. In case of both data loss and data corruption, users can easily restore the data from the last good backup. While using this feature, database can be compressed and encrypted, as these are supported by SQL Server.   Pros and Cons: The biggest advantage of this method is that the backup can be saved on any location including external media storage devices. There is also no network dependency involved in it. Its demerits are the requirement of manual database restoration and loss of data since last good backup.   Important: Microsoft suggests that you should run backup and restore in a test environment before implementing it on the business environment. Also, do not depend on this method solely in case of business-critical database.   Failover Clustering  This is another method used for downtime management and disaster recovery. Here, multiple clusters are created out of the group of servers. In case a node crashes or seizes to function, another cluster takes over the operation and automatically restarts the application. Here, it does not require any manual intervention. This method uses SAN and NAS for shared data storage and various network connections and thus removes the single failure point. Through quorum-based approach, node-level fault tolerance is increased. The same approach is used by failover cluster for monitoring cluster health.   Pros and Cons: The best thing about this solution is it gets enabled automatically whenever the primary server is unavailable. But it involves high cost and server location should be the same. On the other hand, Disk array failure is not possible to prohibit in this method. Also, these clusters are not available at database or database object level.   Log Shipping  This method got introduced in the Developer and Enterprise editions of SQL Server 2000. In the latest SQL 2017, this is supported by both the Standard and Enterprise editions. The term log shipping means exporting log file of the primary database to another database. In this process, minimum two or more SQL Server instances are involved. Apart from the primary server, other servers are the standby ones. This can be used at the database level only and not at the instance level. Also, automated failover is not available here.   Pros and Cons: With the help of this process, all database objects can be recovered during any disaster. This method also speeds up the processes of log file restoration and data recovery. During the data restoration, the database remains inaccessible. Log shipping is also devoid of granular restoration. Restoration has to be implemented for all the changes done in primary server. Besides, whenever the primary server fails, users need to redirect the applications to the standby server as automated failover is unavailable.   Database Mirroring  This solution is commonly used for SQL Server Disaster Recovery as well as High Availability . This technique can be implemented of databases with full recovery model. Users can choose from synchronous or asynchronous copy for a single database only. Since no future SQL Server versions (SQL Server 2017 is the last one) will have this feature, Microsoft asked users to go for AlwaysOn Availability Groups or Basic Availability Groups.   Pros and Cons: If you use database mirroring, you are not only become able to protect your database in a better way but also its availability gets higher. Even while upgrading, production database availability gets improved due to database mirroring. The disadvantage of this process is that the mirror database and the main database should be completely identical in every way, including all the objects and logins. Users also need to be careful about the data security as this process involves data transfer between two systems through a network.   Transactional Replication  In Transactional Replication, data from the primary Server (the publisher) is copied to the secondary Server (the subscriber). This approach can be applied to table level and other object levels. It works best when the database is small and the recovery process requires to be fast. In this way, users can use the subscriber Server if the publisher Server fails after disaster. It is mostly used in server to server environment.   Pros and Cons: In this process, the changes are done in small intervals and users can view the data during the changes are being applied. Transaction replication is slower than the process of log shipping. Replication configurations will be gone once the servers are switched. Once Replication is done, changes in Schema or security will be unavailable to the subscriber. Server switching should be done manually after the occurrence of the disaster.   SQL Recovery As The Ultimate Disaster Recovery Option  If you have lost data due to any disaster even before implementing these options, MDF Recovery tool is there for you. This software can easily recover deleted data from SQL Server database. The tool can also remove high-level corruption issues with Advanced Scan mode. This application cannot be used as the preventive measure against the disasters, but it is helpful after the data got deleted or corrupt or inaccessible.   Conclusion  As every SQL Server should have a customized Disaster Recovery policy in place, we have discussed some of the useful SQL Server Disaster Recovery options here. We presented both the pros and cons of these solutions so that users can choose the ones suitable for their requirement. It is expected that users will get benefited by this write-up.   Author: Andrew Jackson  ","categories": ["SQL Server","Database"],
        "tags": ["sqlserver","database"],
        "url": "http://localhost:4000/best-sql-server-disaster-recovery-options/",
        "teaser":null},{
        "title": "Learn About Microsoft SQL Server Disaster Recovery Best Practices",
        "excerpt":"Disaster Recovery is one of the burning issues in today’s tech world. While data has become the most important component of business, the rate of data loss, data deletion, and data corruption is increasing. You never know when a disaster might occur and attack our database. Therefore, you have to prepare ourselves to deal with any disaster. Precautions about disaster in equally important for SQL Server user. SQL Database is often vulnerable to different natural and man-created disasters. To safeguard the data, it is necessary to have complete knowledge about Microsoft SQL Server disaster recovery best practices. In this post, we will share with you some of Disaster Recovery practices that are considered as the best.   Best Practices Of SQL Server Disaster Recovery   The most effective practices of SQL Disaster Recovery involve looking into the database architecture and create solutions for every possible situation. The solutions can involve backup and other measures of data protection. Let us learn about all the best Disaster Recovery practices.      Design a Solution that Properly Addresses the Problem   While creating a solution for any problem, you have to make sure that it does not end up creating more problems. Though no design can be called perfect, you must focus on developing the best design that is capable of solving the problem and provide enhanced opportunity. While doing this, always note down why you picked up this particular design over others and how can this meet your goal of solving the problem. At times, when improvement in the solution is expected, design must be compatible with the current SQL Server version. Also, consider the impacts of changes on all the dependent materials, if you are planning to make any changes.      Find out Possible Weakness of the Solution   No solution design is completely flawless and that is why it is crucial to accept the limitations. This acknowledgment will help you to prepare for the disaster in a better way. There is no shame in having solutions with limited capabilities because of restricted resources and changing circumstances. But the main issue lies in accepting it and find about about automated solutions that can fulfill the limitations of the design. The same policy should be followed in other cases like active-active replication, availability group, etc.           Consider All other Possible Situations  Usually, the solution design and its limitations are evaluated based on our knowledge. But what if something else happens that you are not even considering at this point? Your knowledge (or the lack of it) can be your weak point. To counter these issues, you can consider hiring a consultant/ expert to check the design and find out its limitations.            Create the Solution  After you find out about all the possible flaws of your design, you need to create the solution as soon as possible. The solution can be anything: backup restoration or Server addition. But, it should be created without wasting any time as you do not know when the disaster might happen. The more you wait, the more risk you put your data into.            Drill, Drill, and Drill  The most important thing after setting up the Disaster Recovery Solution is to practice/ drill it. Without drilling, the complete Disaster Recovery project remains incomplete. For drilling, you can re-create the situation in a test environment and then run the solution. Do not forget to have a backup of the solution. Saving the solution script in the test environment without backup can put you in danger if the Server fails.            Train Junior DBAs  Drilling for Disaster Recovery is the best time to train the database admins who are new in this profession. Through simulation, they can be prepared for the worst situations that may occur to cover by themselves. Through practices, junior DBAs become comfortable with the “state of panic” and learn how to handle the situation.            Coordination between All the teams  In case of large-sized environments, the entire disaster recovery procedure should be done by coordinating with multiple teams like DB Admin team, System team and Developer team. In organizations that do not have this type of team division, coordination must involve everyone who might become affected by the disaster.            Appreciation and Incentive  Do not forget to appreciate yourself and everyone else involved in creating the solution and drilling it. Acknowledgment of all the good work done will function as the incentive for future.            SQL Recovery Tool As The Last Resort For Data Recovery  These are some of the best practices that can be done to protect SQL Server database during any disaster. However, these cannot assure the foolproof safety of your database items. If you have lost data from your database due to any disaster, you can take the help of SQL Recovery Tool. This application can retrieve all the deleted data from your database regardless of the cause of data loss. This application is suitable for all the latest versions of SQL Server including SQL 2017.       Conclusion  In this post, we have depicted Microsoft SQL Server Disaster Recovery best practices. Reading this, users will become aware of the practices that should be performed to ensure maximum protection against the disasters. If you still lose some data, use SQL Recovery to get back lost data of your database.   Author: Andrew Jackson  ","categories": ["SQL Server","Database"],
        "tags": ["sqlserver","database"],
        "url": "http://localhost:4000/microsoft-sql-server-disaster-recovery-best-practices/",
        "teaser":null},{
        "title": "Execute sql query using windows terminal",
        "excerpt":"Problem Statement  I had a sql file which was almost 400MB. Whenever, I was going to excute that file using SQL managment studio, it shows the following error. By the way, I was using SQL Server 2019 Enterprise edition.      Solution      Use the command line tools which takes low memory. Command is as follows -   SQLCMD -d &lt;database-name&gt; -i filename.sql      Example:   PS D:\\Backup\\Scripts&gt; SQLCMD -d AMBSConso -i testdb.sql  ","categories": ["SQL Server","Troubleshooting","Commands"],
        "tags": ["csharp","oop","commands"],
        "url": "http://localhost:4000/execute-sql-query-using-windows-terminal/",
        "teaser":null},{
        "title": "Open Close Principle With C#",
        "excerpt":"Open Close Principle is an Object Oriented Design principle. It is first introduced by Betrand Meyer in 1988. He says “Software entities (Class, module, function etc.) should be open for extension, but closed for modification”. An entity is “Open for extension” means that its behavior can be extended to accommodate new demand. The entity is “closed for modification” means that the existing source code of the module is not changed or minimum change when making enhancement. It is clear that if a system cannot accommodate change easily, its life cycle will end fast.   Sometimes code changes introduce heavy risk. At the time of changing, you must ensure that changes will not break the system. Sometimes it takes huge regression testing. This risk can be minimized if no changes are made to existing code.   So, our intention should be writing code in such a way that new functionality should be added with minimum changes or not changes in the existing code.  It should be done in a way to allow the adding of new functionality as new classes, keeping as much as possible existing code unchanged. The major advantages of “open close principle” is that it undergo changes and its value will be tremendous. It required almost no regression testing.   Let’s introduce open close principle with an example. Suppose, in our application, we need a “Area calculator” which calculate area of rectangle. However, in this occasion we just create a class AreaCalculator then there will be a method RectangleArea in this class which just calculates area of rectangle. It works fine. In the middle of the application development, we need to calculate area of Triangle and Circle. In this occasion, what should we do? We just add another two method TriangleArea and CircleArea and can do the job. But several problems will arise here – for each new shape you have to add new unit of code. Developer must have to know the logic to calculate area of new shape. Adding a new shape might effect in existing functionalities. So, it will take huge cost of regression testing. This is actually violate, open close principle.   We implement the same problem abide by open close principle by the following way. Here Rectangle, Triangle and Circle class inherit the Shape class and implement CalculateArea Method. In this way, if you need to calculate area of x shape just add a class of x and then implement shape and calculate area of x without modifying exiting code.   Class diagram:      Open Close Principle Implementation by C#:   Step 1: Create abstract Shape class   using System; using System.Collections.Generic; using System.Linq; using System.Text;   namespace OCP {     public abstract class Shape     {         public abstract double CalculateArea();     } }  Step 2: Create Rectangle class   using System; using System.Collections.Generic; using System.Linq; using System.Text;   namespace OCP {     public class Rectangle : Shape     {         public double Height { get; set; }         public double Width { get; set; }                  public Rectangle(double height, double width)         {             this.Height = height;             this.Width = width;         }                  public override double CalculateArea()         {             return Height * Width;         }     } }   Step 3: Create Triangle class   using System; using System.Collections.Generic; using System.Linq; using System.Text;   namespace OCP {     public class Triangle : Shape     {         public double Base { get; set; }         public double Height { get; set; }                  public Triangle(double vbase, double vheight)         {             this.Base = vbase;             this.Height = vheight;         }                  public override double CalculateArea()         {             return 1 / 2.0 * Base * Height;         }     } }   Step 4: Create circle class   using System; using System.Collections.Generic; using System.Linq; using System.Text;   namespace OCP {     public class Circle : Shape     {         public double Radius { get; set; }                  public Circle(double radius)         {             this.Radius = radius;         }                  public override double CalculateArea()         {             return Math.PI * Radius * Radius;         }     } }    Step 5: Client class which uses Rectangle, Triangle and Circle class   using System; using System.Collections.Generic; using System.Linq; using System.Text;   namespace OCP {     public class Program     {         public static void Main(string[] args)         {             Shape objShape = new Rectangle(20, 30);             Console.WriteLine(\"Area of Rectangle: \" + objShape.CalculateArea());                          objShape = new Triangle(20, 30);             Console.WriteLine(\"Area of Triangle: \" + objShape.CalculateArea());                          objShape = new Circle(4);             Console.WriteLine(\"Area of Circle: \" + objShape.CalculateArea());                          Console.ReadKey();         }     } }    Source code  ","categories": ["OOP","C#","Design Pattern"],
        "tags": ["OOP","csharp","designpattern"],
        "url": "http://localhost:4000/open-close-principle/",
        "teaser":null},{
        "title": "Iterator design pattern with C#",
        "excerpt":"Iterator pattern is a design pattern which is used to traverse aggregate object often called container and access container’s object without exposing it’s underlying representation. Iterator pattern decoupled algorithm from aggregate object or container. In some cases, algorithms are container specific. We often use collection in C# and then we traverse the collection without knowing it’s internal details. Collection is grouping of some object. Objects can be same type or different type. Collection in fact actively used iterator pattern.      The above figure is UML class diagram for Iterator Pattern. The main idea behind the iterator pattern is to take the responsibility of traversing container and put it to the iterator object. The iterator object will maintain the state of the iteration, keeping track of the current item and track for the next item to iterate.   Benefits:      Access element of container without exposing it’s internal details.   Provides a uniform interface for traversing different collection (aggregate object).   Provides multiple simultaneous traversals in a collection.   Implementation:   Let’s come to the point. We are going to implement iterator design pattern. I am using here a collection for fruits item. The main actor in here:      IIterator – Interface to define Iterator (Concrete iterator class)   Iterator – Concrete iterator class which is used to iterate elements.   ICollection – Interface to define aggregate.   Collection – Concrete aggregate class.   I used FruitItem class as item class here.   Step 1: Create Item class.   using System; using System.Collections.Generic; using System.Linq; using System.Text;   namespace IteratorPattern {   /// Item class   public class FruitItem   {     public string Id { get; set; }     public string Name { get; set; }   }   }   Step 2: Create IIterator Interface   using System; using System.Collections.Generic; using System.Linq; using System.Text;   namespace IteratorPattern {   /// Interface for Iterator   public interface IIterator   {     FruitItem First();     FruitItem Next();     FruitItem CurrentItem { get; }     bool IsDone { get; }   } }   Step 3: Create concrete Iterator class   using System; using System.Collections.Generic; using System.Linq; using System.Text;   namespace IteratorPattern {      /// Concrete Iterator Class     public class Iterator : IIterator     {                  private Collection collection;         private int current = 0;         private int step = 1;                  public Iterator(Collection vCollection)         {             this.collection = vCollection;         }                  public FruitItem First()         {             current = 0;             return (FruitItem)collection[current];         }                  public FruitItem Next()         {             current ++;                          if (!IsDone)               return (FruitItem)collection[current];             else               return null;         }                  public bool IsDone         {             get { return current &gt;= collection.Count; }         }                  public FruitItem CurrentItem         {             get { return (FruitItem) collection[current]; }         }                  // Gets or sets stepsize         public int Step         {             get { return step; }             set { step = value; }         }     } }    Step 4: Create collection interface.   using System; using System.Collections.Generic; using System.Linq; using System.Text;   namespace IteratorPattern {   /// Interface for Aggregate class     public interface ICollection   {     Iterator CreateIterator();   } }   Step 5: Create concrete collection class.   using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Collections;   namespace IteratorPattern {     ///     /// Concrete aggregate class     ///          public class Collection : ICollection     {         private ArrayList lstFoodItem = new ArrayList();                  public Iterator CreateIterator()         {             return new Iterator(this);         }                  // Get counted items         public int Count         {             get             {                 return lstFoodItem.Count;             }         }                  // Indexer         public object this[int index]         {             get { return lstFoodItem[index]; }                     set { lstFoodItem.Add(value); }         }     } }    Step 6: Create client class   using System; using System.Collections.Generic; using System.Linq; using System.Text;   namespace IteratorPattern { class Program {     public static void Main(string[] args)     {         Collection collection = new Collection();                  collection[0] = new FruitItem() { Id = \"1\", Name = \"Mango\" };         collection[1] = new FruitItem() { Id = \"2\", Name = \"Orange\" };         collection[2] = new FruitItem() { Id = \"3\", Name = \"Banana\" };         collection[3] = new FruitItem() { Id = \"4\", Name = \"Apple\" };         collection[4] = new FruitItem() { Id = \"5\", Name = \"Lichi\" };         collection[5] = new FruitItem() { Id = \"7\", Name = \"Tamarind\" };                  // Create iterator         Iterator iterator = new Iterator(collection);         Console.WriteLine(\"Items by iterating over collection\");                  for (FruitItem item = iterator.First(); !iterator.IsDone; item = iterator.Next())         {             Console.WriteLine(item.Name);         }                  Console.ReadLine();     }     } }   Output:      Source code  ","categories": ["OOP","C#","Design Pattern"],
        "tags": ["oop","csharp","designpattern"],
        "url": "http://localhost:4000/iterator-design-pattern/",
        "teaser":null},{
        "title": "Crystal Report With ASP.Net Step By Step",
        "excerpt":"For business or other managerial purpose, it is very important to prepare reports. We use SAP crystal reports in asp.net often for reporting purpose. Before going to the details, I hope you already know how to prepare a crystal report (something.rpt file). Here I used SAP crystal report; data is retrieved by a stored procedure which required two parameters. I used SAP Crystal Report 13.0.5 with visual studio 2012. A stored procedure is responsible to provide data to crystal report. So, let’s implement crystal report in asp.net.   Step 1: Create a report file   Create a report file (rpt_get_employee_info_dept_id_team_id.rpt). Write a stored procedure (rsp_get_employee_info_by_dept_id_team_id) to retrieve data. Set the stored procedure as crystal report data source. Design crystal reports.   Step 2: Add Assemblies   Add the following references to your web site. Version of the assembly is most important. I used assembly version: 13.0.2000.0   CrystalDecisions.CrystalReports.Engine; CrystalDecisions.Shared; CrystalDecisions.Web  Step 3: Create a report base class   This is a custom class, responsible to generate crystal report document. Some global variable is used in this class for configuration purpose. Server name, database name, user id, password is hard coded here for easily understand but I recommend, it should come from web configuration file.   ReportBase.cs   using System; using System.Collections.Generic; using System.Linq; using System.Web; using CrystalDecisions.CrystalReports.Engine; using System.Collections; using CrystalDecisions.Shared;  /// &lt;summary&gt; /// The base class to generate report document /// &lt;/summary&gt; public class ReportBase {      string ServerName = \"MAHEDEE-PC\";    //Database server name to which report connected     string DataBaseName = \"TestDB\";      //Database name to which report connected     string UserID = \"sa\";                //Database user name to which report connected     string Password = \"sa\";              //Database user password to which report connected      ReportDocument crReportDocument = new ReportDocument();   //Crystal report document object            public ReportBase()     {     }          /// &lt;summary&gt;     ///Base method to generate report document.      /// &lt;/summary&gt;     /// &lt;param name=\"ReportName\"&gt;Report name&lt;/param&gt;     /// &lt;param name=\"ParamArraylist\"&gt;Parameter ArrayList&lt;/param&gt;     /// &lt;param name=\"ReportFolder\"&gt;Report folder name&lt;/param&gt;     /// &lt;returns&gt;&lt;/returns&gt;          public ReportDocument PFSubReportConnectionMainParameter(string ReportName, ArrayList ParamArraylist, string ReportFolder)     {         int ObjArrayA, ObjArrayB, Paraindex;         string Paravalue;         ObjArrayB = 0;          string path = ReportFolder + @\"\\\" + @ReportName; //Full path of report                  try         {             crReportDocument.Load(path); //Load crystal Report         }         catch (Exception ex)         {              string msg = \"The report file \" + path +                         \" can not be loaded, ensure that the report exists or the path is correct.\" +                         \"\\nException:\\n\" + ex.Message +                         \"\\nSource:\" + ex.Source +                         \"\\nStacktrace:\" + ex.StackTrace;             throw new Exception(msg);         }         //Ensure login to the database server         if (!Logon(crReportDocument, ServerName, DataBaseName, UserID, Password))         {             string msg = \"Can not login to Report Server \" +                         \"\\nDatabase Server: \" + ServerName +                         \"\\nDatabase:\\n\" + DataBaseName +                         \"\\nDBUser:\" + UserID +                         \"\\nDBPassword:\" + Password;             throw new Exception(msg);         }          Logon(crReportDocument, ServerName, DataBaseName, UserID, Password);                  //To Check Parameter Feild Array have the Same Amount of Parameter Feild in the Report         int ParamArrayCount, ParameterFieldCount;         //Getting Value from the Array          if (ParamArraylist.Count != 0)         {             ParamArrayCount = (ParamArraylist.Count / 2);              //Getting Value From the Report (Parameter and Formula Feild)             ParameterFieldCount = crReportDocument.DataDefinition.ParameterFields.Count;              //Parameter on The Report and Array List Parameter Amount is not the same             ParamArrayCount = ParameterFieldCount;                       for (ObjArrayA = 0; ObjArrayA &lt; ((ParamArraylist.Count / 2)); ObjArrayA++)             {                 Paraindex = (int)ParamArraylist[ObjArrayB]; //Parameter index                 Paravalue = (string)ParamArraylist[ObjArrayB + 1]; //Paramter Value                 PassParameter(Paraindex, Paravalue);                 ObjArrayB = ObjArrayB + 2;             }         }                   return crReportDocument;      }      /// &lt;summary&gt;     /// Set parameter value in crystal report on corresponding index     /// &lt;/summary&gt;     /// &lt;param name=\"ParameterIndex\"&gt;&lt;/param&gt;     /// &lt;param name=\"ParameterValue\"&gt;&lt;/param&gt;     public void PassParameter(int ParameterIndex, string ParameterValue)     {         //        '         //        ' Declare the parameter related objects.         //        '         ParameterDiscreteValue crParameterDiscreteValue;         ParameterFieldDefinitions crParameterFieldDefinitions;         ParameterFieldDefinition crParameterFieldLocation;         ParameterValues crParameterValues;           crParameterFieldDefinitions = crReportDocument.DataDefinition.ParameterFields;         crParameterFieldLocation = (ParameterFieldDefinition)crParameterFieldDefinitions[ParameterIndex];         crParameterValues = crParameterFieldLocation.CurrentValues;         crParameterDiscreteValue = new CrystalDecisions.Shared.ParameterDiscreteValue();         crParameterDiscreteValue.Value = System.Convert.ToString(ParameterValue);         crParameterValues.Add(crParameterDiscreteValue);         crParameterFieldLocation.ApplyCurrentValues(crParameterValues);     }      //Check whether crytal report can login to the server     private bool Logon(CrystalDecisions.CrystalReports.Engine.ReportDocument cr, string server, string database, string user_id, string password)     {         // Declare and instantiate a new connection info object.         CrystalDecisions.Shared.ConnectionInfo ci;         ci = new CrystalDecisions.Shared.ConnectionInfo();          ci.ServerName = server;         ci.DatabaseName = database;         ci.UserID = user_id;         ci.Password = password;//password;         //  ci.IntegratedSecurity = false;          // If the ApplyLogon function fails then return a false for this function.         // We are applying logon information to the main report at this stage.         if (!ApplyLogon(cr, ci))         {             return false;         }          // Declare a subreport object.         CrystalDecisions.CrystalReports.Engine.SubreportObject subobj;          // Loop through all the report objects and locate subreports.         // If a subreport is found then apply logon information to         // the subreport.         foreach (CrystalDecisions.CrystalReports.Engine.ReportObject obj in cr.ReportDefinition.ReportObjects)         {             if (obj.Kind == CrystalDecisions.Shared.ReportObjectKind.SubreportObject)             {                 subobj = (CrystalDecisions.CrystalReports.Engine.SubreportObject)obj;                 if (!ApplyLogon(cr.OpenSubreport(subobj.SubreportName), ci))                 {                     return false;                 }             }         }          // Return True if the code runs to this stage.         return true;      }      /// &lt;summary&gt;     ///This method is called by the \"Logon\" method. It loops through the report tables and applies the connection information to each table.     /// &lt;/summary&gt;     /// &lt;param name=\"cr\"&gt;&lt;/param&gt;     /// &lt;param name=\"ci\"&gt;&lt;/param&gt;     /// &lt;returns&gt;&lt;/returns&gt;     private bool ApplyLogon(CrystalDecisions.CrystalReports.Engine.ReportDocument cr, CrystalDecisions.Shared.ConnectionInfo ci)     {         // This function is called by the \"Logon\" function         // It loops through the report tables and applies         // the connection information to each table.          // Declare the TableLogOnInfo object and a table object for use later.         CrystalDecisions.Shared.TableLogOnInfo li;         // For each table apply connection info.          foreach (CrystalDecisions.CrystalReports.Engine.Table tbl in cr.Database.Tables)         {              li = tbl.LogOnInfo;             li.ConnectionInfo.ServerName = ci.ServerName;             li.ConnectionInfo.DatabaseName = ci.DatabaseName;             li.ConnectionInfo.UserID = ci.UserID;             li.ConnectionInfo.Password = ci.Password;             tbl.ApplyLogOnInfo(li);             tbl.Location = ci.DatabaseName + \".dbo.\" + tbl.Name;              // Verify that the logon was successful.             // If TestConnectivity returns false, correct table locations.             if (!tbl.TestConnectivity())             {                 return false;              }         }         return true;     }  }  In this class some methods are used for different purposes.      public ReportDocument PFSubReportConnectionMainParameter(string ReportName, ArrayList ParamArraylist, string ReportFolder)  - This is the base method to generate report document   public void PassParameter(int ParameterIndex, string ParameterValue) - Set parameter value in crystal report on corresponding index   private bool Logon(CrystalDecisions.CrystalReports.Engine.ReportDocument cr, string server, string database, string user_id, string password) – Cystal report login check to the server   private bool ApplyLogon(CrystalDecisions.CrystalReports.Engine.ReportDocument cr, CrystalDecisions.Shared.ConnectionInfo ci) – Supporting method of “Logon” to login check.   Step 4: Create Report Viewer pages   In this project, I have created a report viewer page – ViewReport.aspx. Here some steps need to follow.      Register Assembly – Register assembly CrystalDecisions.Web to the page directive   &lt;%@ Register Assembly=\"CrystalDecisions.Web, Version=13.0.2000.0, Culture=neutral, PublicKeyToken=692fbea5521e1304\" Namespace=\"CrystalDecisions.Web\" TagPrefix=\"CR\" %&gt;      Add crystal report viewer – Add crystal report viewer to view report.   &lt;CR:CrystalReportViewer ID=\"CrystalReportViewer1\" runat=\"server\" AutoDataBind=\"True\" HasPrintButton=\"True\"HasRefreshButton=\"True\" ReuseParameterValuesOnRefresh=\"True\" Height=\"50px\" Width=\"350px\"OnReportRefresh=\"CrystalReportViewer1_ReportRefresh\" PrintMode=\"ActiveX\" /&gt;      Manually config CSS file - Sometimes crystal report shows blank page due to some technical problem so add the following css link in between head tag   &lt;link href=\"/aspnet_client/System_Web/4_0_30319/CrystalReportWebFormViewer3/css/default.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;  &lt;link href=\"/aspnet_client/System_Web/4_0_30319/CrystalReportWebFormViewer3/css/default.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;  &lt;link href=\"/aspnet_client/System_Web/4_0_30319/CrystalReportWebFormViewer3/css/default.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;  &lt;link href=\"/aspnet_client/System_Web/4_0_30319/CrystalReportWebFormViewer3/css/default.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;  &lt;link href=\"/aspnet_client/System_Web/4_0_30319/CrystalReportWebFormViewer3/css/default.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;  &lt;link href=\"/aspnet_client/System_Web/4_0_30319/CrystalReportWebFormViewer3/css/default.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;  &lt;link href=\"/aspnet_client/System_Web/4_0_30319/CrystalReportWebFormViewer3/css/default.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;  &lt;link href=\"/aspnet_client/System_Web/4_0_30319/CrystalReportWebFormViewer3/css/default.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;   A button (btnViewReport) is used to display report   Source file of ViewReport.aspx   &lt;%@ Page Language=\"C#\" AutoEventWireup=\"true\" CodeFile=\"ViewReport.aspx.cs\" Inherits=\"ViewReport\" %&gt;  &lt;%@ Register Assembly=\"CrystalDecisions.Web, Version=13.0.2000.0, Culture=neutral, PublicKeyToken=692fbea5521e1304\"     Namespace=\"CrystalDecisions.Web\" TagPrefix=\"CR\" %&gt;  &lt;!DOCTYPE html&gt;  &lt;html xmlns=\"http://www.w3.org/1999/xhtml\"&gt; &lt;head runat=\"server\"&gt;     &lt;title&gt;&lt;/title&gt;     &lt;link href=\"/aspnet_client/System_Web/4_0_30319/CrystalReportWebFormViewer3/css/default.css\"         rel=\"stylesheet\" type=\"text/css\" /&gt;     &lt;link href=\"/aspnet_client/System_Web/4_0_30319/CrystalReportWebFormViewer3/css/default.css\"         rel=\"stylesheet\" type=\"text/css\" /&gt;     &lt;link href=\"/aspnet_client/System_Web/4_0_30319/CrystalReportWebFormViewer3/css/default.css\"         rel=\"stylesheet\" type=\"text/css\" /&gt;     &lt;link href=\"/aspnet_client/System_Web/4_0_30319/CrystalReportWebFormViewer3/css/default.css\"         rel=\"stylesheet\" type=\"text/css\" /&gt;     &lt;link href=\"/aspnet_client/System_Web/4_0_30319/CrystalReportWebFormViewer3/css/default.css\"         rel=\"stylesheet\" type=\"text/css\" /&gt;     &lt;link href=\"/aspnet_client/System_Web/4_0_30319/CrystalReportWebFormViewer3/css/default.css\"         rel=\"stylesheet\" type=\"text/css\" /&gt;     &lt;link href=\"/aspnet_client/System_Web/4_0_30319/CrystalReportWebFormViewer3/css/default.css\"         rel=\"stylesheet\" type=\"text/css\" /&gt;     &lt;link href=\"/aspnet_client/System_Web/4_0_30319/CrystalReportWebFormViewer3/css/default.css\"         rel=\"stylesheet\" type=\"text/css\" /&gt;  &lt;/head&gt; &lt;body&gt;     &lt;form id=\"form1\" runat=\"server\"&gt;         &lt;div&gt;             &lt;table&gt;                  &lt;tr&gt;                     &lt;td&gt;                         &lt;asp:Button ID=\"btnViewReport\" Text=\"View Report\" runat=\"server\" OnClick=\"btnViewReport_Click\" /&gt;&lt;/td&gt;                 &lt;/tr&gt;              &lt;/table&gt;             &lt;br /&gt;             &lt;div style=\"height: 500px; width: 500px;\"&gt;                 &lt;CR:CrystalReportViewer ID=\"CrystalReportViewer1\" runat=\"server\" AutoDataBind=\"True\" HasPrintButton=\"True\" HasRefreshButton=\"True\" ReuseParameterValuesOnRefresh=\"True\" Height=\"50px\" Width=\"350px\" OnReportRefresh=\"CrystalReportViewer1_ReportRefresh\" PrintMode=\"ActiveX\" /&gt;               &lt;/div&gt;          &lt;/div&gt;     &lt;/form&gt; &lt;/body&gt; &lt;/html&gt;   Code behind of ViewReport.aspx   Some methods are used in code behind file for different purpose.      protected void btnViewReport_Click(object sender, EventArgs e) – Click event handler of btnViewReport button. In this method two parameters of crystal report are used as hardcoded. In real application, it should come as input control dynamically.   private void GetReportDocument() – Responsible to generate report document using ReportBase class.   private void ViewCystalReport() - Set generated report document as Crystal Report viewer report source and display report in report viewer.   using CrystalDecisions.CrystalReports.Engine; using CrystalDecisions.Web; using System; using System.Collections; using System.Collections.Generic; using System.Drawing; using System.Linq; using System.Web; using System.Web.UI; using System.Web.UI.WebControls;  public partial class ViewReport : System.Web.UI.Page {          ArrayList ParameterArrayList = new ArrayList(); //Report parameter list     ReportDocument ObjReportClientDocument = new ReportDocument(); //Report document      protected void Page_Load(object sender, EventArgs e)     {      }      protected void btnViewReport_Click(object sender, EventArgs e)     {         /*The report with two parameters. */         ParameterArrayList.Add(0);         ParameterArrayList.Add(\"1\"); //Parameter 1 with input 1. This is actually dept id according to report parameter         ParameterArrayList.Add(1);          ParameterArrayList.Add(\"1\"); //Parameter 2 with input 1. This is actually team id according to report parameter          GetReportDocument(); //Generate Report document         ViewCystalReport();  //View report document in crystal report viewer      }        /*Generate report document*/     private void GetReportDocument()     {         ReportBase objReportBase = new ReportBase();         string sRptFolder = string.Empty;         string sRptName = string.Empty;          sRptName = \"rpt_get_employee_info_dept_id_team_id.rpt\"; //Report name         sRptFolder = Server.MapPath(\"~/Reports\");  //Report folder name           ObjReportClientDocument = objReportBase.PFSubReportConnectionMainParameter(sRptName, ParameterArrayList, sRptFolder);                   //This section is for manipulating font and font size. This an optional section          foreach (Section oSection in ObjReportClientDocument.ReportDefinition.Sections)         {             foreach (ReportObject obj in oSection.ReportObjects)             {                 FieldObject field;                 field = ObjReportClientDocument.ReportDefinition.ReportObjects[obj.Name] as FieldObject;                    if (field != null)                 {                     Font oFon1 = new Font(\"Arial Narrow\", field.Font.Size - 1F);                     Font oFon2 = new Font(\"Arial\", field.Font.Size - 1F);                      if (oFon1 != null)                     {                         field.ApplyFont(oFon1);                     }                     else if (oFon2 != null)                     {                         field.ApplyFont(oFon2);                     }                 }             }         }     }      protected void CrystalReportViewer1_ReportRefresh(object source, ViewerEventArgs e)     {         //OnInit(e);         //ViewCystalReport();     }      /// &lt;summary&gt;     /// To view crystal report     /// &lt;/summary&gt;     private void ViewCystalReport()     {          //Set generated report document as Crystal Report viewer report source         CrystalReportViewer1.ReportSource = ObjReportClientDocument;     }  }   Output:      Source code  ","categories": ["ASP.NET","C#","Crystal Report"],
        "tags": ["aspnet","csharp","crystalreport"],
        "url": "http://localhost:4000/crystal-report-in-asp-net-step-by-step/",
        "teaser":null},{
        "title": "Decorator Design Pattern using C#",
        "excerpt":"You who work on design pattern must familiar with Gang of Four (GoF). Design Patterns: Elements of Reusable Object-Oriented Software is a Software Engineering book. The authors of this book are Erich Gamma, Richard Helm, Ralph Johnson and John Vlissides. The authors of this book are often refers to as Gang of Four (GoF). It’s a parody relating to Mao’s Gang of Four. This book describes the recurring solution of common problem in software design. The Gang of Four (GoF) patterns are generally considered the foundation for all other patterns. They are categorized in three groups: Creational, Structural, and Behavioral. Factory Pattern, Abstract Factory Pattern, Singleton Pattern, Builder e.t.c are creational design pattern. Decorator, Adapter, Bridge, Façade, Proxy, Composite e.t.c are structural design pattern. Command, interpreter, strategy, iterator e.t.c are behavioral design pattern.   Decorator Design Pattern  Decorator Design Pattern is a structural design pattern. It is also known as wrapper. It is used to add additional functionality to a particular object during run time without affecting other objects. Responsibility can be adding or removing at run time. Critics says that it uses lot of little object of similar type.   Let’s consider a scenario in which I am going to implement Decorated Design Pattern. We, Bangladeshi are very much cricket loving. A cricket equipment shop declared some package on the occasion of Cricket World Cup 2011. The base package is with a bat and a ball and its cost is 1500 Taka (Bangladeshi Currency). The smart package is with a bat, a ball and 6 stamps i.e base package plus 6 stamps and its cost is 1500 + 600 = 2100 Taka. The special package is with a bat, a ball, 6 stamps and a pair of gloves i.e smart package plus a pair of gloves. It’s cost is 2100 + 500 = 2600 Taka. It looks like the following figure. Actually, the top one wrapped the inner packages.      Before going to implement the scenario by decorated design pattern, I would like to show you the class diagram. The class diagram is given below.      Implementation: Let’s implement decorated design pattern by C#.   Step 1: Create interface ICricketInstrument for all package of cricket instrument.   using System; using System.Collections.Generic; using System.Linq; using System.Text;   namespace DecoratorPattern { /// /// Interface for Cricket Instrument /// Developed by: Mahedee ///   public interface ICricketInstrument   {     double Cost { get; }     string Insturments { get; }   } }   Step 2: Create a base type for Concrete Cricket Instrument Package and Instrument Package Option   using System; using System.Collections.Generic; using System.Linq; using System.Text;   namespace DecoratorPattern { /// /// Base type for concrete cricket instrument package and decorator(option). /// Developed by: Mahedee ///          public abstract class CricketInstrument : ICricketInstrument     {         private double cost = 00;         private string instrument = \"Cricket Instruments: \";                    public virtual double Cost         {           get { return cost; }         }                  public virtual string Insturments         {           get { return instrument; }         }          } }  Step 3: Create a base type for Concrete Cricket Instrument Package Option. It is actually decorator – to decorate Instrument package.   using System; using System.Collections.Generic; using System.Linq; using System.Text;     namespace DecoratorPattern {     /// &lt;summary&gt;     /// Decorator for concrete package option     /// &lt;/summary&gt;     public abstract class PackageOption : CricketInstrument     {         double cost = 00;         string instruments = \"Abstract Package Option\";           public override double Cost         {             get { return cost; }         }             public override string Insturments         {             get { return instruments; }         }       } }    Step 4: Create base package of Cricket Instrument.   using System; using System.Collections.Generic; using System.Linq; using System.Text;   namespace DecoratorPattern {     ///     /// Base Cricket Insturment Package     ///          public class BasePackage : CricketInstrument     {         double cost = 1500;         string instruments = \"Ball and Bat\";                  public override double Cost         {             get { return cost; }         }                  public override string Insturments         {             get { return base.Insturments + instruments; }         }          } }  Step 5: Decorate Smart package for Cricket Instrument   using System; using System.Collections.Generic; using System.Linq; using System.Text;   namespace DecoratorPattern {     ///     /// Smart Package = Base Package (Bat, Ball) + 6 Stamps     /// Developed by: Mahedee     ///          public class SmartPackage : PackageOption     {         double cost = 600;         string instruments = \"6 Stamps\";         CricketInstrument objCricketInstrument;                  public SmartPackage(CricketInstrument objPCricketInstrument)         {             objCricketInstrument = objPCricketInstrument;         }                  public override double Cost         {             get { return objCricketInstrument.Cost + cost; }         }                  public override string Insturments         {             get { return objCricketInstrument.Insturments + \", \" + instruments; }         }     } }    Step 6: Decorate Special Package for Cricket Instrument.   using System; using System.Collections.Generic; using System.Linq; using System.Text;   namespace DecoratorPattern {     ///     /// Special Package = Base Package (Bat, Ball) + 6 Stamps + 1 Pair - Gloves     /// Developed by: Mahedee     ///          public class SpecialPackage : PackageOption     {         double cost = 500;         string instruments = \"Gloves - 1 Pair\";         CricketInstrument objCricketInstrument;                  public SpecialPackage(CricketInstrument objPCricketInstrument)         {             objCricketInstrument = objPCricketInstrument;         }                  public override double Cost         {             get { return objCricketInstrument.Cost + cost; }         }                  public override string Insturments         {             get { return objCricketInstrument.Insturments + \", \" + instruments; }         }          } }   Step 7: Program class to create base package and decorate other package with option.   using System; using System.Collections.Generic; using System.Linq; using System.Text;   namespace DecoratorPattern {     public class Program     {     static void Main(string[] args)     {         //Base Insturment class                  CricketInstrument objCricketInstruments = new BasePackage();         Console.WriteLine(\"::Base Package::\");         Console.WriteLine(objCricketInstruments.Insturments);         Console.WriteLine(\"Instrument's Cost: \" + objCricketInstruments.Cost);                  Console.WriteLine();                  //Smart Package         objCricketInstruments = new SmartPackage(objCricketInstruments);         Console.WriteLine(\"::Smart Package::\");         Console.WriteLine(objCricketInstruments.Insturments);         Console.WriteLine(\"Instrument's Cost: \" + objCricketInstruments.Cost);                  Console.WriteLine();                  //Special Package         objCricketInstruments = new SpecialPackage(objCricketInstruments);         Console.WriteLine(\"::Special Package::\");         Console.WriteLine(objCricketInstruments.Insturments);         Console.WriteLine(\"Instrument's Cost: \" + objCricketInstruments.Cost);                  Console.ReadLine();                  }     } }   Source Code  ","categories": ["C#","Design Pattern"],
        "tags": ["csharp","designpattern"],
        "url": "http://localhost:4000/decorator-design-pattern/",
        "teaser":null},{
        "title": "Image Detection Using Custom Vision AI",
        "excerpt":"Custom vision AI is an interesting way to detect images. Just upload your image, train and then evaluate. To know more, please visit : https://www.customvision.ai/  Prerequisite  Step 1: A subscription keys. To get a subscription key go to this link: Obtaining Subscription Keys.  Step 2: Need an IDE for example: Visual Studio 2017  Step to create a sample application:  Step 3: Open visual studio and create a console application  Step 4: Replace content of the Program.cs file by the following code.    using System; using System.IO; using System.Net.Http; using System.Net.Http.Headers; using System.Threading.Tasks;   namespace CSPredictionSample {     static class Program     {         static void Main()         {             Console.Write(\"Enter image file path: \");             string imageFilePath = @\"D:\\Projects\\Github\\ms-cognitive\\CustomVision\\Images\\Test\\Mahedee.JPG\";               //Console.ReadLine();               //Predict uploaded image             MakePredictionRequest(imageFilePath).Wait();               Console.WriteLine(\"\\n\\n\\nHit ENTER to exit...\");             Console.ReadLine();         }           //Convert image as byte stream         static byte[] GetImageAsByteArray(string imageFilePath)         {             FileStream fileStream = new FileStream(imageFilePath, FileMode.Open, FileAccess.Read);             BinaryReader binaryReader = new BinaryReader(fileStream);             return binaryReader.ReadBytes((int)fileStream.Length);         }           static async Task MakePredictionRequest(string imageFilePath)         {             var client = new HttpClient();               //To get prediction key, url and content type, please go to             //Project -&gt; Performance -&gt; Prediction URL             //Request headers - replace this example key with your valid subscription key.               client.DefaultRequestHeaders.Add(\"Prediction-Key\", \"Enter your Subscription key here\");             //client.DefaultRequestHeaders.Add(\"Prediction-Key\", \"71c950638c3c4f34be320cc952174ba7\");               // Prediction URL - replace this example URL with your valid prediction URL.             string url = \"https://southcentralus.api.cognitive.microsoft.com/customvision/v2.0/Prediction/0cb90ad3-84e0-4ccc-860c-5222efc8e227/image?iterationId=af197714-139b-43a1-9032-d757c4bb0d29\";             //string url = \"https://southcentralus.api.cognitive.microsoft.com/customvision/v2.0/Prediction/94a4ed5a-dc9a-4121-9d3f-aee7294d3d48/image\";             //\"http://southcentralus.api.cognitive.microsoft.com/customvision/v1.0/prediction/d16e136c-5b0b-4b84-9341-6a3fff8fa7fe/image?iterationId=f4e573f6-9843-46db-8018-b01d034fd0f2\";               HttpResponseMessage response;               // Request body. Try this sample with a locally stored image.             byte[] byteData = GetImageAsByteArray(imageFilePath);               using (var content = new ByteArrayContent(byteData))             {                 //content.Headers.ContentType = new MediaTypeHeaderValue(\"application/json\");                 content.Headers.ContentType = new MediaTypeHeaderValue(\"application/octet-stream\");                 response = await client.PostAsync(url, content);                 Console.WriteLine(await response.Content.ReadAsStringAsync());             }         }     } }    Step 5: Replace your subscription key  Step 6: Replace your image path  Now you will see the following output of the given image.  ","categories": ["AI","Machine Learning"],
        "tags": ["ai","ml"],
        "url": "http://localhost:4000/image-detection-using-custom-vision-ai/",
        "teaser":null},{
        "title": "Ways To Fix SQL Server Attach Database Error 5120 Efficiently",
        "excerpt":"Microsoft SQL Server is one of the popular and Widely used Relational database Management system. SQL language is used to manage and perform operations in the data. This application saves the data in the MDF and LDF file formats. MDF is the primary database file where the LDF file is the transaction log file. While working in the database the user encounters various issues like SQL Server Attach Database error 5120. Let us consider the problem faced by the users in one of the forum sites.   “Dear All! While attaching my .mdf file on my SQL Server database, I am getting an error like this error 5120 SQL server to attach the database. Here is the following error message. Msg 5120, Level 16, State 101, Line 1 Unable to open the physical file “C:\\Program Files\\Microsoft SQL Server\\MSSQL12.MSSQLSERVER\\MSSQL\\DATA’ Operating system error 5: “5(Access denied.)”. Can anyone tell the best possible solution to resolve this issue?”   In this guide, we are going to discuss the solution to the problem SQL server attach database error 5120. Also, we will the causes of this problem. Also in case if you dont be able to access SQL database then the user can take the help of  SQL Recovery Tool. Let us start.   Reasons Behind SQL Server Attach Database Error 5120  The main problem arises when the SQL Server database users does not have the authorization to access the MDF and the LDF files.           In case if the MDF file is not at their accurate position then the user has to face this issue.            Not opening the SQL Server Management Studio with the admin rights.            This issue arises when the Server drives don’t have the permission to store the server files.       Know-How To Fix Error 5120 SQL Server Attach Database Issue     First, the user has to create the two user accounts Admin1 and Admin2. After that follow the steps to resolve this problem.   CREATE DATABASE [Test]  CONTAINMENT = NONE  ON PRIMARY  (NAME = N’Test’, FILENAME = N’D:\\SQLDATA\\MSSQL13.MSSQLSERVER\\MSSQL\\DATA\\Test.mdf’)  LOG ON  (NAME = N’Test_log’, FILENAME = N’D:\\SQLDATA\\MSSQL13.MSSQLSERVER\\MSSQL\\DATA\\Test_log.ldf’)  GO           Now check the Test File Permission For MDF and LDF: After that browse the location of MDF and LDF files after that Right Click on the File »Property»Security.            Now Admin1 detaches the SQL database. To detach the database the user has to Right-click on the Test database »Tasks»Detach.            Check the file permission for MDF and LDF again: Permission has changed and the full permissions are granted to Admin1 only.            When the Admin2 tries to attach the database the SQL Server error 5120 appears because of the limited permissions.            Follow the steps to provide full permissions on both the MDF and the LDF files of the SQL Database.          First right click on the test database and then choose Properties.   Now click on the Security Tab and then click on the Edit button.   After that click on the Add button and then enter the object name to NT Service\\MSSQL$SQL2013.   After clicking on Check Names and then click on OK.   Now Give the full control to the file and after that click on OK.  Now Reattach the Database: In this way, SQL admin2 is able to reattach the database.   Note: The user can try the above steps to resolve this SQL server attach database error 5120. But in case if your MDF files are inaccessible then the user can take the help of SQL Database Recovery Software to recover data from corrupted MDF files. The user can easily recover SQL database objects such as table, stored procedure, functions. This application comes with a simple and easy to use user interface so that everyone can easily use this software with ease.   Final Conclusion In this article, We have discussed the problem SQL server attach database error 5120. This problem can be solved by granting full permissions. But in case if your MDF file database is still inaccessible then the user can take the help of SQL Recovery Software to resolve such types of issues.   Author: Andrew Jackson  ","categories": ["SQL Server","Database"],
        "tags": ["sqlserver","database"],
        "url": "http://localhost:4000/fix-sql-server-attach-database-error-5120-efficiently/",
        "teaser":null},{
        "title": "Fix SQL Error 4064 Cannot Open User Default Database",
        "excerpt":"Everything is data, We store all the data in a proper manner in a database because it is easy to maintain, retrieve, or to perform any manipulation task in the SQL database. But What when you get an SQL error 4064 cannot open user default database? You will not be to go through the database i.e. cannot go through the data stored in the tables even you will not be able to login to your SQL server. This blog will provide a solution for the same query of the users.   “Hey, I am getting an issue with my SQL server 2014 i.e. cannot open my default database and even can’t log in into the SQL server. Please suggest to me a solution to get rid-off from the same problem because it stores my all priceless data in it. Money is not a concern I just need the data of my database again. I sharing a screen that I received at the time of the login”   The user has to face this issue when the login default database may not be available. There are various possible reasons for this error such as when the database is dropped, the database is corrupt, the database is offline. Also when the user has no longer access to the database or even when the SQL database is renamed.   Important Note: If you want to access the corrupted SQL Database. Then the user can take the help of  SQL Database Recovery to recover SQL Database files.   Reasons Behind Cannot Open User Default Database Login Failed 4064 Error  There are many causes of the occurrence of this issue. Some causes are described below:           This error occurs because when your database is in the suspect mode.            Because of the accidental deletion of the database from the SQL server, it shows error.            When the SQL database is detached from the user account.            In case your database is set to the emergency status this error occurs.            In case your database is in restrict user state, therefore, you are not able to login to your database.            If your database is a part of the database mirror you will get the error.       Know-How To Fix SQL Server Error 4064     Connect your database with another one.   Method #1. Connect Your Database With Another One   To perform this task follow the steps   STEP #1 Open the SQL Server Management Studio » Fill the Server name, username, and password when the wizard opens.   STEP #2 In connection to database option for making the connection. It is set to the default database change default database name or set it to the master database to get the accessibility.   STEP #3 Click on the Connect button and your Account will log in successfully.   Important Note: The user can try the above methods to resolve this problem. But in case if your SQL Database inaccessible or corrupted then the user can take the help of SQL Recovery Software to recover data from corrupted MDF and NDF Files. Also, the user can preview and recover the SQL database.   STEP #1 Download and Launch the Recovery Tool   STEP #2 Select Quick scan» Check Auto detect SQL server file» Click to next.   STEP #3 Check the recovered database in the database object   STEP #4 Export your data with schema / with Schema &amp; data.   Conclusion In this article we have discussed, how to fix SQL error 4064 cannot open user default database problem. To resolve this issue we have given the manual solution. But in case if you want a quick solution to access the SQL database then the user can take the help of SQL Recovery Software.  Author: Andrew Jackson  ","categories": ["SQL Server","Database"],
        "tags": ["sqlserver","database"],
        "url": "http://localhost:4000/sql-error-4064-cannot-open-user-default-database/",
        "teaser":null},{
        "title": "How to support Console.WriteLine() in VS code in debug mode",
        "excerpt":"  Visual Studio code doesn’t support Console.WriteLine or Console.ReadLine automatically in debug mode. To enable it in debug mode you have to do the following thing.   Change the lunch.json     Change “console”: “externalTerminal” to “console”: “integratedTerminal” as follows   {     // Use IntelliSense to learn about possible attributes.     // Hover to view descriptions of existing attributes.     // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387     \"version\": \"0.2.0\",     \"configurations\": [         {             \"OS-COMMENT1\": \"Use IntelliSense to find out which attributes exist for C# debugging\",             \"OS-COMMENT2\": \"Use hover for the description of the existing attributes\",             \"OS-COMMENT3\": \"For further information visit https://github.com/OmniSharp/omnisharp-vscode/blob/master/debugger-launchjson.md\",             \"name\": \".NET Core Launch (console)\",             \"type\": \"coreclr\",             \"request\": \"launch\",             \"preLaunchTask\": \"build\",             \"OS-COMMENT4\": \"If you have changed target frameworks, make sure to update the program path.\",             \"program\": \"${workspaceFolder}/bin/Debug/net5.0/ArrayDS.dll\",             \"args\": [],             \"cwd\": \"${workspaceFolder}\",             \"OS-COMMENT5\": \"For more information about the 'console' field, see https://aka.ms/VSCode-CS-LaunchJson-Console\",             \"console\": \"integratedTerminal\",             \"stopAtEntry\": false         },         {             \"name\": \".NET Core Attach\",             \"type\": \"coreclr\",             \"request\": \"attach\",             \"processId\": \"${command:pickProcess}\"         }     ] }  ","categories": ["VS Code"],
        "tags": ["csharp","vscode"],
        "url": "http://localhost:4000/how-to-support-console-writeline-in-vs-code-in-debug-mode/",
        "teaser":null},{
        "title": "Visual Studio Code Tips and Tricks (Part - 01)",
        "excerpt":"  Visual Studio Code Shortcut   Visual studio code extensions which I use most      Markdown Preview Enhanced   Code Spell Checker   ES7 React/Redux/GraphQL/React-Native snippets   html to JSX   :emojisense:   Auto Markdown TOC   Markdown PDF   C#   Java Extension Pack   Kubernetes   YAML   Angular Language Service   Angular Snippets   HTML CSS Support   VS Code Live Server   ESLint   Prettier - Code formatter   VS Code to open starting at the current folder.   code .   How to add a project to a solution using VS Code   Open VS Code terminal and navigate to the directory where you want to create solution folder. Use following commands   dotnet new sln -o MyApiApp   The -o parameter lets you specify the output directory   Navigate to solution direction   Cd .\\MyApiApp\\   Create new projects under root solution folder   dotnet new console -o MyApiApp.ConsoleApp dotnet new webapi -o MyApiApp.WebApi dotnet new classlib -o MyApiApp.Repository dotnet new xunit -o MyApiApp.Tests   Add projects to solution (use tab to navigate path).   dotnet sln MyApiApp.sln add .\\MyApiApp.ConsoleApp\\MyApiApp.ConsoleApp.csproj .\\MyApiApp.WebApi\\MyApiApp.WebApi.csproj .\\MyApiApp.Repository\\MyApiApp.Repository.csproj .\\MyApiApp.Tests\\MyApiApp.Tests.csproj   Add project references   dotnet add .\\MyApiApp.WebApi\\MyApiApp.WebApi.csproj reference .\\MyApiApp.Repository\\MyApiApp.Repository.csproj dotnet add .\\MyApiApp.ConsoleApp\\MyApiApp.ConsoleApp.csproj reference .\\MyApiApp.Repository\\MyApiApp.Repository.csproj dotnet add .\\MyApiApp.Tests\\MyApiApp.Tests.csproj reference .\\MyApiApp.WebApi\\MyApiApp.WebApi.csproj .\\MyApiApp.Repository\\MyApiApp.Repository.csproj   Shortcut for Visual Studio Code   VS Code      Ctrl + Shift + P = will bring you directly to the editor commands   Alt + Shift + f = Format portion of the code   Ctrl+Shift+I = Format the entire active file   Ctrl+K Ctrl+F = Format the selected text   Ctrl + P = Search file in Visual Studio Code   Ctrl + Shift + F = Search text in all files   For React.js      rfc + tab = React function component   rcc + tab = React class component   rfce + tab = React function export component   rafce + tab = React arrow function export component  ","categories": ["VS Code",".NET Core"],
        "tags": ["git","source-control","shortcut"],
        "url": "http://localhost:4000/visual-studio-code-tips-and-tricks-part-01/",
        "teaser":null},{
        "title": "Getting Started with GitHub",
        "excerpt":"Tips and Tricks for git   GitHub is a internet hosting provider for software development and version control using git. It provides distributed version control, source code management, issue tracking and many more. This is now the number one version control provider. Here, I will discuss on tips and tricks of git      Discard unstaged changes in Git?   For all unstaged files in current working directory use:      git checkout -- .      ","categories": ["Source Control","Github"],
        "tags": ["git","source-control"],
        "url": "http://localhost:4000/getting-started-with-github/",
        "teaser":null},{
        "title": "Branching and merging in GitHub",
        "excerpt":"Branching and merging sometimes very difficult in github. For you wrong command it may destroy your repository. In this article, Branching and merging in github is discussed here step by step   Branching and merging in GitHub      To create a branch     $ git checkout -b branch01 Switched to a new branch 'branch01' or  $git branch branch01       To switch to a branch  ```github $git checkout    Example $git checkout branch03   * **Push files to the a branch**   First switch to the specific branch. Then add or modify files. To add files for the commit run the following command. ```github $ git add .   $ git push origin &lt;branch name&gt;  Example: $ git push origin branch01      Merge branch01 with master branch     $ git checkout master Switched to branch 'master' Your branch is up-to-date with 'origin/master'.       $ git merge branch01   $ git commit -m \"merge branch01\"   $ git push   References     Git Branching - Basic Branching and Merging  ","categories": ["Source Control","Github"],
        "tags": ["git","source-control"],
        "url": "http://localhost:4000/branching-and-merging/",
        "teaser":null},{
        "title": "Tips and Tricks for git",
        "excerpt":"  GitHub is a internet hosting provider for software development and version control using git. It provides distributed version control, source code management, issue tracking and many more. This is now the number one version control provider. Here, I will discuss on tips and tricks of git      Discard unstaged changes in Git?   For all unstaged files in current working directory use:      git checkout -- .       Merge your local uncommited changes     git stash     git pull     git stash apply      Remove cached files            Go to the directory and run the following command          git rm -r --cached obj/                   Move git repository to another repository with history   cd existing_repo  git remote rename origin old-origin  git remote add origin http://192.168.104.33/gitlab-instance-f3a04ace/Monitoring.git  git push -u origin --all  git push -u origin --tags      Undo the commit, which has not been pushed yet.            Check how many commit             $ git log    // Type q to exit this screen              Remove commit and keep file staged             $ git reset --soft HEAD~1              Remove commit and unstaged file             $ git reset HEAD~1              Remove commit and discard changes             $ git reset --hard HEAD~1       ","categories": ["Source Control","Github"],
        "tags": ["git","source-control"],
        "url": "http://localhost:4000/necessary-tips-for-git/",
        "teaser":null},{
        "title": "Visual studio tips and tricks (Part 01)",
        "excerpt":"  Microsoft Visual Studio is the most famous IDE (Integrated development environment.) It is used to develop computer program, website, web application, web services and sophisticated applications. It has lots of feature. Here I will show you some daily used feature.   Set bookmarks in code     Keep your cursor in a specific line   Go to View-&gt;Bookmark Window   Click Bookmark icon at the upper right or at the bottom of bookmark windows   To jump between Bookmarks:      Ctrl + K + N (for next)   Ctrl + K + P (for previous)   To toggle a Bookmark on/off for a line:  Ctrl + K + K   Shortcut in Visual Studio      Create properties in Visual Studio            Type “prop” and then press tab twice           Create constructor in a class            Type “ctor” and then press tab twice            ","categories": ["Visual Studio"],
        "tags": ["visualstudio"],
        "url": "http://localhost:4000/visual-studio-tips-and-tricks-part-01/",
        "teaser":null},{
        "title": "Speaking at Career Adda at MBSTU",
        "excerpt":" Organized by CSE Family of MBSTU  Venue: Online/Virtual  Date: 21 August, 2020      ","categories": ["Speech","Technical Speech"],
        "tags": ["speech","tech"],
        "url": "http://localhost:4000/speaking-at-career-adda-at-cse-family-of-mbstu/",
        "teaser":null},{
        "title": "Common Markdown Syntax",
        "excerpt":"Display Image     Markdown syntax     From URL ![Image Title](imageurl.jpg)          From Directory ![](..\\assets\\images\\posts\\0006.postmantest.gif)           Rendered output      How to display two image side by side   Markdown syntax   Input Image            |  Output :-------------------------:|:-------------------------: ![](/assets/images/posts/2018/mahedee-buet.jpg) |  ![](/assets/images/posts/2018/output.png)    Output                  Input Image       Output                                         Hyperlink  Markdown syntax  [Source Code](https://github.com/mahedee/code-sample/tree/master/auth-demo/MVCAuth)  Rendered output  Source Code   Commenting on markdown   &lt;!-- Single or multiline commenting--&gt;   ","categories": ["Github","Markdown"],
        "tags": ["markdown","md"],
        "url": "http://localhost:4000/common-markdown-syntax/",
        "teaser":null},{
        "title": "Resolve git conflict using meld",
        "excerpt":"Resolve git conflict using meld      Install meld in windows   Configure meld in your pc            Edit gitconfig file in C:\\Users&lt;username&gt;\\       Add following line in the gitconfig file   ```text   [diff]   tool = meld   [difftool “meld”]    path = C:/Program Files (x86)/Meld/Meld.exe    [difftool]   prompt = false           ```       Now check and resolve conflict using the following command     $ git difftool origin/master       Refereces     Git Tutorial 7: Diff and Merge using meld 2019  ","categories": ["Source Control","Github"],
        "tags": ["git","sourcecontrol"],
        "url": "http://localhost:4000/resolve-git-conflict-using-meld/",
        "teaser":null},{
        "title": "Necessary SQL query in MS SQL",
        "excerpt":"  SQL stands for Structured Query Languages. In this article, I will show you some important query you need frequently.      Search a table name in a database in MS SQL Server     SELECT * FROM INFORMATION_SCHEMA.TABLES  WHERE TABLE_NAME LIKE '%tablename%'           If you want to see all column of a joining table   select Region.* from Branch inner join Region on Branch.RegionId = Region.Id     ","categories": ["SQL Server","SQL","Database"],
        "tags": ["sql"],
        "url": "http://localhost:4000/necessary-sql-query-in-ms-sql/",
        "teaser":null},{
        "title": "How to contribute on an open source project",
        "excerpt":"How to contribute on an open source project   Step 1: Fork the repository on which you want to contribute  For example, I have forked the following repository  https://github.com/OpenCodeFoundation/eSchool   After forking my repository has became  https://github.com/mahedee/eSchool   Step 2: Clone your forked project    For example:  git clone https://github.com/mahedee/eSchool.git  So your remote repository is https://github.com/mahedee/eSchool.git  if you want to see the remote repository type   git remote -v  output will be like   origin  https://github.com/mahedee/eSchool.git (fetch) origin  https://github.com/mahedee/eSchool.git (push)  Here I see that the name of my remote repository is origin   Step 3: Add the original repository in the local repository  Now add the original repository as origin in the local repository and name as upstream   git remote add upstream https://github.com/OpenCodeFoundation/eSchool   So you have two remote link in your local repository     origin - forked repository which is in your github   upstream - original project’s repository on which you will be contributed   if you run the following command   git remote -v  you will see the following output   origin  https://github.com/mahedee/eSchool.git (fetch) origin  https://github.com/mahedee/eSchool.git (push) upstream        https://github.com/OpenCodeFoundation/eSchool (fetch) upstream        https://github.com/OpenCodeFoundation/eSchool (push)   Step 4: Open a new branch in my local repository   Before opening any branch or contributing, please run the following command to up to date your local repository   git pull upstream master   To check is there any new commit on upstream run-   git status  you should see something like-   On branch master Your branch is behind 'upstream/master' by 14 commits, and can be fast-forwarded.   (use \"git pull\" to update your local branch)  nothing to commit, working tree clean  If you see, any changes in upstream, you can pull upstream to your local drive   Now open a branch name feature-joining using following command   git checkout -b feature-joining  Now you will see the   Mahedee@MahedeePC MINGW64 /d/Projects/Github/OpenCodeFoundation/eSchool (feature-joining)   instead of   Mahedee@MahedeePC MINGW64 /d/Projects/Github/OpenCodeFoundation/eSchool (master)   Step 5: Work on the new branch and push  Now work on the new branch. After completing your task, just add, commit and push. Before that, you should check is there any change in the upstream. If change occur, just merge it with your local using the following command.   git pull --rebase upstream master  If you get any conflit, you have to resolve it locally. If no conflit occur, type the following command one by one.   git add .   git commit -m \"complete feature-joining\"   git push origin feature-joining  Step 6: Make a pull request  After completing the previous step, you will see something like the following image with a button “Compare and pull request”      Now press the button and make a pull request. Now reviewer can accept or reject the pull request (PR).  You can think the whole workflow as below      Step 7: Add your change to your forked repository Now, if you want to add your change to your forked repository. Just type the following command. Remember, in this case, your forked repository and original repository may not sync if the PR is not accepted.   git checkout master  git merge feature-joining  git push origin master  Step 8: Sync forked repository with original repository  If you want to sync your forked repository with original repository at any time. Tyep the following command.   git pull upstream master  git push origin master   Step 9: Delete the branch After accepting or rejecting your PR. You should remove the branch. For new work, you should create a new branch. To remove the local branch type the following command  git branch -d feature-joining  If you want to remove this branch from github then type the following command.  git push origin :feature-joining   Thank you for your patience :)  ","categories": ["Source Control","Github"],
        "tags": ["git","source-control"],
        "url": "http://localhost:4000/how-to-contribute-an-opensource-project/",
        "teaser":null},{
        "title": "Convert markdown to html using asp.net core",
        "excerpt":"  Application overview  In this application, I will show how to create an application which is convert markdown to html using asp.net core. Let’s have a look on the implementation of the project.   Tools and Technology used  The following tools and technologies has been used for this application     Visual Studio 2019   Visual C#   NuGet package “Markdig”   ASP.NET Core MVC   Razor view engine   Step1: Select ASP.NET Core Web Application  Select File-&gt;New-&gt;Project-&gt;ASP.NET Core Web Application   Step2: Choose project and solution name  Type project and solution name as “MarkdownToHtml”   Step 3: Select project template     Select project template as Web Application (Model-View-Controller)   Click create button   Step 4: Install Nuget package “Markdig”  Run the following command in package manager console  PM&gt; Install-Package Markdig     Step 5: Add a method name Parse in MarkDownParser static class in Utility foler   MarkDownParser.cs      public IActionResult Index()     {         string markdownText = \"## This is a title of Markdown file \";         string htmltext = MarkDownParser.Parse(markdownText);         htmltext += MarkDownParser.Parse(\"  \") ;// for new line         htmltext += MarkDownParser.Parse(\"__Strong text__\");// for new line          htmltext += MarkDownParser.Parse(\"  \");// for new line         htmltext += MarkDownParser.Parse(\"* This is a bullet point\");// bullet point         ViewBag.HTMLText = htmltext;          return View();     }   Step 6: Modify Home-&gt;Index.cshtml as follows  @{     ViewData[\"Title\"] = \"Home Page\"; }  &lt;div class=\"text-center\"&gt;     @Html.Raw(ViewBag.HTMLText) &lt;/div&gt;   Step 7: Build and run the application   Now the application is ready to run. Build and run the application and watch the html output which you have given as markdown input in index action.   Source Code   ","categories": ["ASP.NET","ASP.NET Core","C#","ASP.NET MVC"],
        "tags": ["aspnetcore"],
        "url": "http://localhost:4000/convert-markdown-to-html-using-asp.net-core/",
        "teaser":null},{
        "title": "Build a CRUD application using asp.net core",
        "excerpt":"  Application overview  In this application, I will show how to build a CRUD application using asp.net mvc core. Let’s have a look on the implementation of the project.   Tools and Technology used  The following tools and technologies has been used for this application     Visual Studio 2019   Visual C#   ASP.NET Core MVC   Entity Framework   Razor view engine   Step1: Select ASP.NET Core Web Application  Select File-&gt;New-&gt;Project-&gt;ASP.NET Core Web Application   Step2: Choose project and solution name  Type project name as “HRM” and also solution name as “HRM”   Step 3: Select project template     Select project template as Web Application (Model-View-Controller)   Change authentication to Individual User Authentication (Optional)   Click create button   Step 4: Modify appsettings.json  Change connection string as follows. Since, I am using localdb.     \"ConnectionStrings\": {     \"DefaultConnection\": \"Server=(localdb)\\\\mssqllocaldb;Database=HRMDB;Trusted_Connection=True;MultipleActiveResultSets=true\" }   Step 5: Add following model class in Models folder  Dept.cs       public class Dept     {         [DatabaseGenerated(DatabaseGeneratedOption.Identity)]         [Key, Column(Order = 0)]         public int Id { get; set; }          [Display(Name = \"Dept. Name\")]         [StringLength(150)]         public string Name { get; set; }          public List&lt;Employee&gt; Employees { get; set; }     }   Employee.cs      public class Employee     {         [DatabaseGenerated(DatabaseGeneratedOption.Identity)]         [Key, Column(Order = 0)]         public int Id { get; set; }          [Display(Name = \"Full Name\")]         [StringLength(200)]         public string FullName { get; set; }          [Display(Name = \"Father's Name\")]         [StringLength(200)]         public string FathersName { get; set; }          [Display(Name = \"Mother's Name\")]         [StringLength(200)]         public String MothersName { get; set; }          [Display(Name = \"Dept\")]         public int DeptId { get; set; }          [StringLength(250)]         public string Designation { get; set; }          [ForeignKey(\"DeptId\")]         public virtual Dept Dept { get; set; }     }   Step 6: Create Controller and Views for Dept     Add DeptsController in Controllers folder   Choose template MVC controller with views, using Entity Framework   Select Model Class as Dept   Select ApplicationDbContext as DbContext class   DeptsController and corresponding views will be created automatically as follows   DeptsController       public class DeptsController : Controller     {         private readonly ApplicationDbContext _context;          public DeptsController(ApplicationDbContext context)         {             _context = context;         }          // GET: Depts         public async Task&lt;IActionResult&gt; Index()         {             return View(await _context.Dept.ToListAsync());         }          // GET: Depts/Details/5         public async Task&lt;IActionResult&gt; Details(int? id)         {             if (id == null)             {                 return NotFound();             }              var dept = await _context.Dept                 .FirstOrDefaultAsync(m =&gt; m.Id == id);             if (dept == null)             {                 return NotFound();             }              return View(dept);         }          // GET: Depts/Create         public IActionResult Create()         {             return View();         }          // POST: Depts/Create         // To protect from overposting attacks, enable the specific properties you want to bind to, for          // more details, see http://go.microsoft.com/fwlink/?LinkId=317598.         [HttpPost]         [ValidateAntiForgeryToken]         public async Task&lt;IActionResult&gt; Create([Bind(\"Id,Name\")] Dept dept)         {             if (ModelState.IsValid)             {                 _context.Add(dept);                 await _context.SaveChangesAsync();                 return RedirectToAction(nameof(Index));             }             return View(dept);         }          // GET: Depts/Edit/5         public async Task&lt;IActionResult&gt; Edit(int? id)         {             if (id == null)             {                 return NotFound();             }              var dept = await _context.Dept.FindAsync(id);             if (dept == null)             {                 return NotFound();             }             return View(dept);         }          // POST: Depts/Edit/5         // To protect from overposting attacks, enable the specific properties you want to bind to, for          // more details, see http://go.microsoft.com/fwlink/?LinkId=317598.         [HttpPost]         [ValidateAntiForgeryToken]         public async Task&lt;IActionResult&gt; Edit(int id, [Bind(\"Id,Name\")] Dept dept)         {             if (id != dept.Id)             {                 return NotFound();             }              if (ModelState.IsValid)             {                 try                 {                     _context.Update(dept);                     await _context.SaveChangesAsync();                 }                 catch (DbUpdateConcurrencyException)                 {                     if (!DeptExists(dept.Id))                     {                         return NotFound();                     }                     else                     {                         throw;                     }                 }                 return RedirectToAction(nameof(Index));             }             return View(dept);         }          // GET: Depts/Delete/5         public async Task&lt;IActionResult&gt; Delete(int? id)         {             if (id == null)             {                 return NotFound();             }              var dept = await _context.Dept                 .FirstOrDefaultAsync(m =&gt; m.Id == id);             if (dept == null)             {                 return NotFound();             }              return View(dept);         }          // POST: Depts/Delete/5         [HttpPost, ActionName(\"Delete\")]         [ValidateAntiForgeryToken]         public async Task&lt;IActionResult&gt; DeleteConfirmed(int id)         {             var dept = await _context.Dept.FindAsync(id);             _context.Dept.Remove(dept);             await _context.SaveChangesAsync();             return RedirectToAction(nameof(Index));         }          private bool DeptExists(int id)         {             return _context.Dept.Any(e =&gt; e.Id == id);         }     }      Following views will be created automatically in Views-&gt;Depts folder   Index.cshtml  @model IEnumerable&lt;HRM.Models.Dept&gt;  @{     ViewData[\"Title\"] = \"Index\"; }  &lt;h1&gt;Index&lt;/h1&gt;  &lt;p&gt;     &lt;a asp-action=\"Create\"&gt;Create New&lt;/a&gt; &lt;/p&gt; &lt;table class=\"table\"&gt;     &lt;thead&gt;         &lt;tr&gt;             &lt;th&gt;                 @Html.DisplayNameFor(model =&gt; model.Name)             &lt;/th&gt;             &lt;th&gt;&lt;/th&gt;         &lt;/tr&gt;     &lt;/thead&gt;     &lt;tbody&gt; @foreach (var item in Model) {         &lt;tr&gt;             &lt;td&gt;                 @Html.DisplayFor(modelItem =&gt; item.Name)             &lt;/td&gt;             &lt;td&gt;                 &lt;a asp-action=\"Edit\" asp-route-id=\"@item.Id\"&gt;Edit&lt;/a&gt; |                 &lt;a asp-action=\"Details\" asp-route-id=\"@item.Id\"&gt;Details&lt;/a&gt; |                 &lt;a asp-action=\"Delete\" asp-route-id=\"@item.Id\"&gt;Delete&lt;/a&gt;             &lt;/td&gt;         &lt;/tr&gt; }     &lt;/tbody&gt; &lt;/table&gt;    Create.cshtml   @model HRM.Models.Dept  @{     ViewData[\"Title\"] = \"Create\"; }  &lt;h1&gt;Create&lt;/h1&gt;  &lt;h4&gt;Dept&lt;/h4&gt; &lt;hr /&gt; &lt;div class=\"row\"&gt;     &lt;div class=\"col-md-4\"&gt;         &lt;form asp-action=\"Create\"&gt;             &lt;div asp-validation-summary=\"ModelOnly\" class=\"text-danger\"&gt;&lt;/div&gt;             &lt;div class=\"form-group\"&gt;                 &lt;label asp-for=\"Name\" class=\"control-label\"&gt;&lt;/label&gt;                 &lt;input asp-for=\"Name\" class=\"form-control\" /&gt;                 &lt;span asp-validation-for=\"Name\" class=\"text-danger\"&gt;&lt;/span&gt;             &lt;/div&gt;             &lt;div class=\"form-group\"&gt;                 &lt;input type=\"submit\" value=\"Create\" class=\"btn btn-primary\" /&gt;             &lt;/div&gt;         &lt;/form&gt;     &lt;/div&gt; &lt;/div&gt;  &lt;div&gt;     &lt;a asp-action=\"Index\"&gt;Back to List&lt;/a&gt; &lt;/div&gt;  @section Scripts {     @{await Html.RenderPartialAsync(\"_ValidationScriptsPartial\");} }   Delete.cshtml   @model HRM.Models.Dept  @{     ViewData[\"Title\"] = \"Delete\"; }  &lt;h1&gt;Delete&lt;/h1&gt;  &lt;h3&gt;Are you sure you want to delete this?&lt;/h3&gt; &lt;div&gt;     &lt;h4&gt;Dept&lt;/h4&gt;     &lt;hr /&gt;     &lt;dl class=\"row\"&gt;         &lt;dt class = \"col-sm-2\"&gt;             @Html.DisplayNameFor(model =&gt; model.Name)         &lt;/dt&gt;         &lt;dd class = \"col-sm-10\"&gt;             @Html.DisplayFor(model =&gt; model.Name)         &lt;/dd&gt;     &lt;/dl&gt;          &lt;form asp-action=\"Delete\"&gt;         &lt;input type=\"hidden\" asp-for=\"Id\" /&gt;         &lt;input type=\"submit\" value=\"Delete\" class=\"btn btn-danger\" /&gt; |         &lt;a asp-action=\"Index\"&gt;Back to List&lt;/a&gt;     &lt;/form&gt; &lt;/div&gt;    Details.cshtml   @model HRM.Models.Dept  @{     ViewData[\"Title\"] = \"Details\"; }  &lt;h1&gt;Details&lt;/h1&gt;  &lt;div&gt;     &lt;h4&gt;Dept&lt;/h4&gt;     &lt;hr /&gt;     &lt;dl class=\"row\"&gt;         &lt;dt class = \"col-sm-2\"&gt;             @Html.DisplayNameFor(model =&gt; model.Name)         &lt;/dt&gt;         &lt;dd class = \"col-sm-10\"&gt;             @Html.DisplayFor(model =&gt; model.Name)         &lt;/dd&gt;     &lt;/dl&gt; &lt;/div&gt; &lt;div&gt;     &lt;a asp-action=\"Edit\" asp-route-id=\"@Model.Id\"&gt;Edit&lt;/a&gt; |     &lt;a asp-action=\"Index\"&gt;Back to List&lt;/a&gt; &lt;/div&gt;    Edit.cshtml  @model HRM.Models.Dept  @{     ViewData[\"Title\"] = \"Edit\"; }  &lt;h1&gt;Edit&lt;/h1&gt;  &lt;h4&gt;Dept&lt;/h4&gt; &lt;hr /&gt; &lt;div class=\"row\"&gt;     &lt;div class=\"col-md-4\"&gt;         &lt;form asp-action=\"Edit\"&gt;             &lt;div asp-validation-summary=\"ModelOnly\" class=\"text-danger\"&gt;&lt;/div&gt;             &lt;input type=\"hidden\" asp-for=\"Id\" /&gt;             &lt;div class=\"form-group\"&gt;                 &lt;label asp-for=\"Name\" class=\"control-label\"&gt;&lt;/label&gt;                 &lt;input asp-for=\"Name\" class=\"form-control\" /&gt;                 &lt;span asp-validation-for=\"Name\" class=\"text-danger\"&gt;&lt;/span&gt;             &lt;/div&gt;             &lt;div class=\"form-group\"&gt;                 &lt;input type=\"submit\" value=\"Save\" class=\"btn btn-primary\" /&gt;             &lt;/div&gt;         &lt;/form&gt;     &lt;/div&gt; &lt;/div&gt;  &lt;div&gt;     &lt;a asp-action=\"Index\"&gt;Back to List&lt;/a&gt; &lt;/div&gt;  @section Scripts {     @{await Html.RenderPartialAsync(\"_ValidationScriptsPartial\");} }    Step 7: Create Controller and Views for Employee     Add EmployeesController in Controllers folder   Choose template MVC controller with views, using Entity Framework   Select Model Class as Employee   Select ApplicationDbContext as DbContext class   EmployeesController and corresponding views will be created automatically as follows   EmployeesController   public class EmployeesController : Controller     {         private readonly ApplicationDbContext _context;          public EmployeesController(ApplicationDbContext context)         {             _context = context;         }          // GET: Employees         public async Task&lt;IActionResult&gt; Index()         {             var applicationDbContext = _context.Employee.Include(e =&gt; e.Dept);             return View(await applicationDbContext.ToListAsync());         }          // GET: Employees/Details/5         public async Task&lt;IActionResult&gt; Details(int? id)         {             if (id == null)             {                 return NotFound();             }              var employee = await _context.Employee                 .Include(e =&gt; e.Dept)                 .FirstOrDefaultAsync(m =&gt; m.Id == id);             if (employee == null)             {                 return NotFound();             }              return View(employee);         }          // GET: Employees/Create         public IActionResult Create()         {             ViewData[\"DeptId\"] = new SelectList(_context.Dept, \"Id\", \"Name\");             return View();         }          // POST: Employees/Create         // To protect from overposting attacks, enable the specific properties you want to bind to, for          // more details, see http://go.microsoft.com/fwlink/?LinkId=317598.         [HttpPost]         [ValidateAntiForgeryToken]         public async Task&lt;IActionResult&gt; Create([Bind(\"Id,FullName,FathersName,MothersName,DeptId,Designation\")] Employee employee)         {             if (ModelState.IsValid)             {                 _context.Add(employee);                 await _context.SaveChangesAsync();                 return RedirectToAction(nameof(Index));             }             ViewData[\"DeptId\"] = new SelectList(_context.Dept, \"Id\", \"Name\", employee.DeptId);             return View(employee);         }          // GET: Employees/Edit/5         public async Task&lt;IActionResult&gt; Edit(int? id)         {             if (id == null)             {                 return NotFound();             }              var employee = await _context.Employee.FindAsync(id);             if (employee == null)             {                 return NotFound();             }             ViewData[\"DeptId\"] = new SelectList(_context.Dept, \"Id\", \"Name\", employee.DeptId);             return View(employee);         }          // POST: Employees/Edit/5         // To protect from overposting attacks, enable the specific properties you want to bind to, for          // more details, see http://go.microsoft.com/fwlink/?LinkId=317598.         [HttpPost]         [ValidateAntiForgeryToken]         public async Task&lt;IActionResult&gt; Edit(int id, [Bind(\"Id,FullName,FathersName,MothersName,DeptId,Designation\")] Employee employee)         {             if (id != employee.Id)             {                 return NotFound();             }              if (ModelState.IsValid)             {                 try                 {                     _context.Update(employee);                     await _context.SaveChangesAsync();                 }                 catch (DbUpdateConcurrencyException)                 {                     if (!EmployeeExists(employee.Id))                     {                         return NotFound();                     }                     else                     {                         throw;                     }                 }                 return RedirectToAction(nameof(Index));             }             ViewData[\"DeptId\"] = new SelectList(_context.Dept, \"Id\", \"Name\", employee.DeptId);             return View(employee);         }          // GET: Employees/Delete/5         public async Task&lt;IActionResult&gt; Delete(int? id)         {             if (id == null)             {                 return NotFound();             }              var employee = await _context.Employee                 .Include(e =&gt; e.Dept)                 .FirstOrDefaultAsync(m =&gt; m.Id == id);             if (employee == null)             {                 return NotFound();             }              return View(employee);         }          // POST: Employees/Delete/5         [HttpPost, ActionName(\"Delete\")]         [ValidateAntiForgeryToken]         public async Task&lt;IActionResult&gt; DeleteConfirmed(int id)         {             var employee = await _context.Employee.FindAsync(id);             _context.Employee.Remove(employee);             await _context.SaveChangesAsync();             return RedirectToAction(nameof(Index));         }          private bool EmployeeExists(int id)         {             return _context.Employee.Any(e =&gt; e.Id == id);         }     }       Following views will be created automatically in Views-&gt;Employees folder   Index.cshtml  @model IEnumerable&lt;HRM.Models.Employee&gt;  @{     ViewData[\"Title\"] = \"Index\"; }  &lt;h1&gt;Index&lt;/h1&gt;  &lt;p&gt;     &lt;a asp-action=\"Create\"&gt;Create New&lt;/a&gt; &lt;/p&gt; &lt;table class=\"table\"&gt;     &lt;thead&gt;         &lt;tr&gt;             &lt;th&gt;                 @Html.DisplayNameFor(model =&gt; model.FullName)             &lt;/th&gt;             &lt;th&gt;                 @Html.DisplayNameFor(model =&gt; model.FathersName)             &lt;/th&gt;             &lt;th&gt;                 @Html.DisplayNameFor(model =&gt; model.MothersName)             &lt;/th&gt;             &lt;th&gt;                 @Html.DisplayNameFor(model =&gt; model.Designation)             &lt;/th&gt;             &lt;th&gt;                 @Html.DisplayNameFor(model =&gt; model.Dept)             &lt;/th&gt;             &lt;th&gt;&lt;/th&gt;         &lt;/tr&gt;     &lt;/thead&gt;     &lt;tbody&gt; @foreach (var item in Model) {         &lt;tr&gt;             &lt;td&gt;                 @Html.DisplayFor(modelItem =&gt; item.FullName)             &lt;/td&gt;             &lt;td&gt;                 @Html.DisplayFor(modelItem =&gt; item.FathersName)             &lt;/td&gt;             &lt;td&gt;                 @Html.DisplayFor(modelItem =&gt; item.MothersName)             &lt;/td&gt;             &lt;td&gt;                 @Html.DisplayFor(modelItem =&gt; item.Designation)             &lt;/td&gt;             &lt;td&gt;                 @Html.DisplayFor(modelItem =&gt; item.Dept.Name)             &lt;/td&gt;             &lt;td&gt;                 &lt;a asp-action=\"Edit\" asp-route-id=\"@item.Id\"&gt;Edit&lt;/a&gt; |                 &lt;a asp-action=\"Details\" asp-route-id=\"@item.Id\"&gt;Details&lt;/a&gt; |                 &lt;a asp-action=\"Delete\" asp-route-id=\"@item.Id\"&gt;Delete&lt;/a&gt;             &lt;/td&gt;         &lt;/tr&gt; }     &lt;/tbody&gt; &lt;/table&gt;    Create.cshtml  @model HRM.Models.Employee  @{     ViewData[\"Title\"] = \"Create\"; }  &lt;h1&gt;Create&lt;/h1&gt;  &lt;h4&gt;Employee&lt;/h4&gt; &lt;hr /&gt; &lt;div class=\"row\"&gt;     &lt;div class=\"col-md-4\"&gt;         &lt;form asp-action=\"Create\"&gt;             &lt;div asp-validation-summary=\"ModelOnly\" class=\"text-danger\"&gt;&lt;/div&gt;             &lt;div class=\"form-group\"&gt;                 &lt;label asp-for=\"FullName\" class=\"control-label\"&gt;&lt;/label&gt;                 &lt;input asp-for=\"FullName\" class=\"form-control\" /&gt;                 &lt;span asp-validation-for=\"FullName\" class=\"text-danger\"&gt;&lt;/span&gt;             &lt;/div&gt;             &lt;div class=\"form-group\"&gt;                 &lt;label asp-for=\"FathersName\" class=\"control-label\"&gt;&lt;/label&gt;                 &lt;input asp-for=\"FathersName\" class=\"form-control\" /&gt;                 &lt;span asp-validation-for=\"FathersName\" class=\"text-danger\"&gt;&lt;/span&gt;             &lt;/div&gt;             &lt;div class=\"form-group\"&gt;                 &lt;label asp-for=\"MothersName\" class=\"control-label\"&gt;&lt;/label&gt;                 &lt;input asp-for=\"MothersName\" class=\"form-control\" /&gt;                 &lt;span asp-validation-for=\"MothersName\" class=\"text-danger\"&gt;&lt;/span&gt;             &lt;/div&gt;             &lt;div class=\"form-group\"&gt;                 &lt;label asp-for=\"DeptId\" class=\"control-label\"&gt;&lt;/label&gt;                 &lt;select asp-for=\"DeptId\" class =\"form-control\" asp-items=\"ViewBag.DeptId\"&gt;&lt;/select&gt;             &lt;/div&gt;             &lt;div class=\"form-group\"&gt;                 &lt;label asp-for=\"Designation\" class=\"control-label\"&gt;&lt;/label&gt;                 &lt;input asp-for=\"Designation\" class=\"form-control\" /&gt;                 &lt;span asp-validation-for=\"Designation\" class=\"text-danger\"&gt;&lt;/span&gt;             &lt;/div&gt;             &lt;div class=\"form-group\"&gt;                 &lt;input type=\"submit\" value=\"Create\" class=\"btn btn-primary\" /&gt;             &lt;/div&gt;         &lt;/form&gt;     &lt;/div&gt; &lt;/div&gt;  &lt;div&gt;     &lt;a asp-action=\"Index\"&gt;Back to List&lt;/a&gt; &lt;/div&gt;  @section Scripts {     @{await Html.RenderPartialAsync(\"_ValidationScriptsPartial\");} }    Delete.cshtml   @model HRM.Models.Employee  @{     ViewData[\"Title\"] = \"Delete\"; }  &lt;h1&gt;Delete&lt;/h1&gt;  &lt;h3&gt;Are you sure you want to delete this?&lt;/h3&gt; &lt;div&gt;     &lt;h4&gt;Employee&lt;/h4&gt;     &lt;hr /&gt;     &lt;dl class=\"row\"&gt;         &lt;dt class = \"col-sm-2\"&gt;             @Html.DisplayNameFor(model =&gt; model.FullName)         &lt;/dt&gt;         &lt;dd class = \"col-sm-10\"&gt;             @Html.DisplayFor(model =&gt; model.FullName)         &lt;/dd&gt;         &lt;dt class = \"col-sm-2\"&gt;             @Html.DisplayNameFor(model =&gt; model.FathersName)         &lt;/dt&gt;         &lt;dd class = \"col-sm-10\"&gt;             @Html.DisplayFor(model =&gt; model.FathersName)         &lt;/dd&gt;         &lt;dt class = \"col-sm-2\"&gt;             @Html.DisplayNameFor(model =&gt; model.MothersName)         &lt;/dt&gt;         &lt;dd class = \"col-sm-10\"&gt;             @Html.DisplayFor(model =&gt; model.MothersName)         &lt;/dd&gt;         &lt;dt class = \"col-sm-2\"&gt;             @Html.DisplayNameFor(model =&gt; model.Designation)         &lt;/dt&gt;         &lt;dd class = \"col-sm-10\"&gt;             @Html.DisplayFor(model =&gt; model.Designation)         &lt;/dd&gt;         &lt;dt class = \"col-sm-2\"&gt;             @Html.DisplayNameFor(model =&gt; model.Dept)         &lt;/dt&gt;         &lt;dd class = \"col-sm-10\"&gt;             @Html.DisplayFor(model =&gt; model.Dept.Id)         &lt;/dd class&gt;     &lt;/dl&gt;          &lt;form asp-action=\"Delete\"&gt;         &lt;input type=\"hidden\" asp-for=\"Id\" /&gt;         &lt;input type=\"submit\" value=\"Delete\" class=\"btn btn-danger\" /&gt; |         &lt;a asp-action=\"Index\"&gt;Back to List&lt;/a&gt;     &lt;/form&gt; &lt;/div&gt;    Details.cshtml   @model HRM.Models.Employee  @{     ViewData[\"Title\"] = \"Details\"; }  &lt;h1&gt;Details&lt;/h1&gt;  &lt;div&gt;     &lt;h4&gt;Employee&lt;/h4&gt;     &lt;hr /&gt;     &lt;dl class=\"row\"&gt;         &lt;dt class = \"col-sm-2\"&gt;             @Html.DisplayNameFor(model =&gt; model.FullName)         &lt;/dt&gt;         &lt;dd class = \"col-sm-10\"&gt;             @Html.DisplayFor(model =&gt; model.FullName)         &lt;/dd&gt;         &lt;dt class = \"col-sm-2\"&gt;             @Html.DisplayNameFor(model =&gt; model.FathersName)         &lt;/dt&gt;         &lt;dd class = \"col-sm-10\"&gt;             @Html.DisplayFor(model =&gt; model.FathersName)         &lt;/dd&gt;         &lt;dt class = \"col-sm-2\"&gt;             @Html.DisplayNameFor(model =&gt; model.MothersName)         &lt;/dt&gt;         &lt;dd class = \"col-sm-10\"&gt;             @Html.DisplayFor(model =&gt; model.MothersName)         &lt;/dd&gt;         &lt;dt class = \"col-sm-2\"&gt;             @Html.DisplayNameFor(model =&gt; model.Designation)         &lt;/dt&gt;         &lt;dd class = \"col-sm-10\"&gt;             @Html.DisplayFor(model =&gt; model.Designation)         &lt;/dd&gt;         &lt;dt class = \"col-sm-2\"&gt;             @Html.DisplayNameFor(model =&gt; model.Dept)         &lt;/dt&gt;         &lt;dd class = \"col-sm-10\"&gt;             @Html.DisplayFor(model =&gt; model.Dept.Name)         &lt;/dd&gt;     &lt;/dl&gt; &lt;/div&gt; &lt;div&gt;     &lt;a asp-action=\"Edit\" asp-route-id=\"@Model.Id\"&gt;Edit&lt;/a&gt; |     &lt;a asp-action=\"Index\"&gt;Back to List&lt;/a&gt; &lt;/div&gt;    Edit.cshtml   @model HRM.Models.Employee  @{     ViewData[\"Title\"] = \"Edit\"; }  &lt;h1&gt;Edit&lt;/h1&gt;  &lt;h4&gt;Employee&lt;/h4&gt; &lt;hr /&gt; &lt;div class=\"row\"&gt;     &lt;div class=\"col-md-4\"&gt;         &lt;form asp-action=\"Edit\"&gt;             &lt;div asp-validation-summary=\"ModelOnly\" class=\"text-danger\"&gt;&lt;/div&gt;             &lt;input type=\"hidden\" asp-for=\"Id\" /&gt;             &lt;div class=\"form-group\"&gt;                 &lt;label asp-for=\"FullName\" class=\"control-label\"&gt;&lt;/label&gt;                 &lt;input asp-for=\"FullName\" class=\"form-control\" /&gt;                 &lt;span asp-validation-for=\"FullName\" class=\"text-danger\"&gt;&lt;/span&gt;             &lt;/div&gt;             &lt;div class=\"form-group\"&gt;                 &lt;label asp-for=\"FathersName\" class=\"control-label\"&gt;&lt;/label&gt;                 &lt;input asp-for=\"FathersName\" class=\"form-control\" /&gt;                 &lt;span asp-validation-for=\"FathersName\" class=\"text-danger\"&gt;&lt;/span&gt;             &lt;/div&gt;             &lt;div class=\"form-group\"&gt;                 &lt;label asp-for=\"MothersName\" class=\"control-label\"&gt;&lt;/label&gt;                 &lt;input asp-for=\"MothersName\" class=\"form-control\" /&gt;                 &lt;span asp-validation-for=\"MothersName\" class=\"text-danger\"&gt;&lt;/span&gt;             &lt;/div&gt;             &lt;div class=\"form-group\"&gt;                 &lt;label asp-for=\"DeptId\" class=\"control-label\"&gt;&lt;/label&gt;                 &lt;select asp-for=\"DeptId\" class=\"form-control\" asp-items=\"ViewBag.DeptId\"&gt;&lt;/select&gt;                 &lt;span asp-validation-for=\"DeptId\" class=\"text-danger\"&gt;&lt;/span&gt;             &lt;/div&gt;             &lt;div class=\"form-group\"&gt;                 &lt;label asp-for=\"Designation\" class=\"control-label\"&gt;&lt;/label&gt;                 &lt;input asp-for=\"Designation\" class=\"form-control\" /&gt;                 &lt;span asp-validation-for=\"Designation\" class=\"text-danger\"&gt;&lt;/span&gt;             &lt;/div&gt;             &lt;div class=\"form-group\"&gt;                 &lt;input type=\"submit\" value=\"Save\" class=\"btn btn-primary\" /&gt;             &lt;/div&gt;         &lt;/form&gt;     &lt;/div&gt; &lt;/div&gt;  &lt;div&gt;     &lt;a asp-action=\"Index\"&gt;Back to List&lt;/a&gt; &lt;/div&gt;  @section Scripts {     @{await Html.RenderPartialAsync(\"_ValidationScriptsPartial\");} }       Modify the navbar of _Layout.cshtml in Views-&gt;Shared folder as follows                   &lt;div class=\"navbar-collapse collapse d-sm-inline-flex flex-sm-row-reverse\"&gt;                     &lt;partial name=\"_LoginPartial\" /&gt;                     &lt;ul class=\"navbar-nav flex-grow-1\"&gt;                         &lt;li class=\"nav-item\"&gt;                             &lt;a class=\"nav-link text-dark\" asp-area=\"\" asp-controller=\"Home\" asp-action=\"Index\"&gt;Home&lt;/a&gt;                         &lt;/li&gt;                         &lt;li class=\"nav-item\"&gt;                             &lt;a class=\"nav-link text-dark\" asp-area=\"\" asp-controller=\"Depts\" asp-action=\"Index\"&gt;Depts&lt;/a&gt;                         &lt;/li&gt;                         &lt;li class=\"nav-item\"&gt;                             &lt;a class=\"nav-link text-dark\" asp-area=\"\" asp-controller=\"Employees\" asp-action=\"Index\"&gt;Employees&lt;/a&gt;                         &lt;/li&gt;                         &lt;li class=\"nav-item\"&gt;                             &lt;a class=\"nav-link text-dark\" asp-area=\"\" asp-controller=\"Home\" asp-action=\"Privacy\"&gt;Privacy&lt;/a&gt;                         &lt;/li&gt;                     &lt;/ul&gt;                 &lt;/div&gt;   Step 8: Run migration command in package manager console   Now the application is ready to run.   Source Code   ","categories": ["ASP.NET","ASP.NET Core","C#"],
        "tags": ["aspnet","aspnetcore"],
        "url": "http://localhost:4000/build-a-crud-application-using-asp.net-core/",
        "teaser":null},{
        "title": "How to measure database size in MS SQL Server",
        "excerpt":"Using system view “sys.databases” and sys.master_files  Run the following script in master database.   SELECT      sys.databases.name,               CONVERT(VARCHAR,SUM(size)*8/1024)+' MB' AS [Size]   FROM        sys.databases    JOIN        sys.master_files   ON          sys.databases.database_id=sys.master_files.database_id   GROUP BY    sys.databases.name   ORDER BY    sys.databases.name     or in GB  SELECT      sys.databases.name,               CONVERT(VARCHAR,(SUM(size)*8/1024)/1024.00)+' GB' AS [Size]   FROM        sys.databases    JOIN        sys.master_files   ON          sys.databases.database_id=sys.master_files.database_id   GROUP BY    sys.databases.name   ORDER BY    sys.databases.name     Observe the individual database size  Run the following stored procedure in each database.  exec sp_spaceused     Watch database size using SSMS  Press right button on individual database -&gt; Properties -&gt; General -&gt; Size    ","categories": ["SQL Server","Database"],
        "tags": ["sql"],
        "url": "http://localhost:4000/how-to-measure-database-size-in-sql-server/",
        "teaser":null},{
        "title": "Authentication and authorization using ASP.NET MVC",
        "excerpt":"  Step1: Select ASP.NET Web Application (.NET Framework)   Step2: Type project and solution name  Type project name as “MVCAuth” and also solution name as “MVC Auth”   Step 3: Select project template     Select project template as Web Application (Model-View-Controller)   Change authentication to Individual User Authentication   Click create button   Step 4: Change web.config file   &lt;add name=\"DefaultConnection\" connectionString=\"Data Source=localhost;Initial Catalog=AuthDB;Persist Security Info=False;User ID=sa; Password=mahedee.net; Pooling=False;MultipleActiveResultSets=False;Encrypt=False;TrustServerCertificate=False\" providerName=\"System.Data.SqlClient\" /&gt;   Step 5: Add some model and view model class     Create Role Model class in Models folder as follows      public class Role : IdentityRole   {    }           Create UserRoleVM View Model class in Models folder as follows       public class UserRoleVM   {       public string UserId { get; set; }       public string RoleId { get; set; }        public string UserName { get; set; }       public string RoleName { get; set; }   }           Create UsersRolesVM View Model class in Models folder as follows       public class UsersRolesVM   {       //public string UserName { get; set; }       public ApplicationUser User { get; set; }        public IEnumerable&lt;string&gt; RoleNames { get; set; }   }           Step 6: Add Controllers to the application     Add RolesController in Controllers folder   Choose template MVC 5 Controller with read/write actions   Modify RolesController as follows       public class RolesController : Controller     {         private ApplicationDbContext db = new ApplicationDbContext();         // GET: Roles         public ActionResult Index()         {             var roleStore = new RoleStore&lt;IdentityRole&gt;(db);             var roleManager = new RoleManager&lt;IdentityRole&gt;(roleStore);             var roles = roleManager.Roles.ToList();             return View(roles);         }          // GET: Roles/Details/5         public ActionResult Details(int id)         {             return View();         }          // GET: Roles/Create         public ActionResult Create()         {             return View();         }          // POST: Roles/Create         [HttpPost]         public ActionResult Create(IdentityRole role)         {             try             {                 // TODO: Add insert logic here                  var roleStore = new RoleStore&lt;IdentityRole&gt;(db);                 var roleManager = new RoleManager&lt;IdentityRole&gt;(roleStore);                  if(!roleManager.RoleExists(role.Name))                 {                     roleManager.Create(role);                 }                  return RedirectToAction(\"Index\");             }             catch             {                 return View();             }         }          // GET: Roles/Edit/5         public ActionResult Edit(int id)         {             return View();         }          // POST: Roles/Edit/5         [HttpPost]         public ActionResult Edit(int id, FormCollection collection)         {             try             {                 // TODO: Add update logic here                  return RedirectToAction(\"Index\");             }             catch             {                 return View();             }         }          // GET: Roles/Delete/5         public ActionResult Delete(int id)         {             return View();         }          // POST: Roles/Delete/5         [HttpPost]         public ActionResult Delete(int id, FormCollection collection)         {             try             {                 // TODO: Add delete logic here                  return RedirectToAction(\"Index\");             }             catch             {                 return View();             }         }     }      Add UsersRoleController in Controllers folder   Choose template MVC 5 Controller with read/write actions   Modify UsersRoleController as follows       public class UsersRoleController : Controller     {         ApplicationDbContext db = new ApplicationDbContext();         // GET: UsersRole         public ActionResult Index()         {             List&lt;UsersRolesVM&gt; usersRolesVMs = new List&lt;UsersRolesVM&gt;();             List&lt;ApplicationUser&gt; users = db.Users.ToList();              var userManager = new UserManager&lt;ApplicationUser&gt;(new UserStore&lt;ApplicationUser&gt;(db));              foreach (ApplicationUser user in users)             {                 UsersRolesVM usersRolesVM = new UsersRolesVM();                 usersRolesVM.User = user;                 usersRolesVM.RoleNames = userManager.GetRoles(user.Id);                 usersRolesVMs.Add(usersRolesVM);             }             return View(usersRolesVMs);         }          // GET: UsersRole/Details/5         public ActionResult Details(int id)         {             return View();         }          // GET: UsersRole/Create         public ActionResult Create()         {              var roleStore = new RoleStore&lt;IdentityRole&gt;(db);             var roleManager = new RoleManager&lt;IdentityRole&gt;(roleStore);             var roles = roleManager.Roles.ToList();               ViewBag.UserId = new SelectList(db.Users.ToList(), \"Id\", \"UserName\");             ViewBag.RoleName = new SelectList(roles, \"Name\", \"Name\");              return View();         }          // POST: UsersRole/Create         [HttpPost]         //public ActionResult Create(FormCollection collection)         public ActionResult Create(UserRoleVM userRole)         {             try             {                if(userRole != null)                 {                     var userManager = new UserManager&lt;ApplicationUser&gt;(new UserStore&lt;ApplicationUser&gt;(db));                     userManager.AddToRole(userRole.UserId, userRole.RoleName);                 }                  return RedirectToAction(\"Index\");             }             catch             {                 return View();             }         }          // GET: UsersRole/Edit/5         public ActionResult Edit(int id)         {             return View();         }          // POST: UsersRole/Edit/5         [HttpPost]         public ActionResult Edit(int id, FormCollection collection)         {             try             {                 // TODO: Add update logic here                  return RedirectToAction(\"Index\");             }             catch             {                 return View();             }         }          // GET: UsersRole/Delete/5         public ActionResult Delete(int id)         {             return View();         }          // POST: UsersRole/Delete/5         [HttpPost]         public ActionResult Delete(int id, FormCollection collection)         {             try             {                 // TODO: Add delete logic here                  return RedirectToAction(\"Index\");             }             catch             {                 return View();             }         }     }    Step 7: Create Roles View to the application     Add Index View in Views-&gt;Roles folder   Add Create View in Views-&gt;Roles folder   Modify views as follows   Index.cshtml   @model IEnumerable&lt;Microsoft.AspNet.Identity.EntityFramework.IdentityRole&gt;  @{     ViewBag.Title = \"Index\"; }  &lt;h2&gt;Index&lt;/h2&gt;  &lt;p&gt;     @Html.ActionLink(\"Create New\", \"Create\") &lt;/p&gt; &lt;table class=\"table\"&gt;     &lt;tr&gt;         &lt;th&gt;             @Html.DisplayNameFor(model =&gt; model.Name)         &lt;/th&gt;         &lt;th&gt;&lt;/th&gt;     &lt;/tr&gt;  @foreach (var item in Model) {     &lt;tr&gt;         &lt;td&gt;             @Html.DisplayFor(modelItem =&gt; item.Name)         &lt;/td&gt;         &lt;td&gt;             @Html.ActionLink(\"Edit\", \"Edit\", new { id=item.Id }) |             @Html.ActionLink(\"Details\", \"Details\", new { id=item.Id }) |             @Html.ActionLink(\"Delete\", \"Delete\", new { id=item.Id })         &lt;/td&gt;     &lt;/tr&gt; }  &lt;/table&gt;    Create.cshtml   @*@model MVCAuth.Models.Role*@ @model Microsoft.AspNet.Identity.EntityFramework.IdentityRole  @{     ViewBag.Title = \"Create\"; }  &lt;h2&gt;Create&lt;/h2&gt;   @using (Html.BeginForm()) {     @Html.AntiForgeryToken()      &lt;div class=\"form-horizontal\"&gt;         &lt;h4&gt;Role&lt;/h4&gt;         &lt;hr /&gt;         @Html.ValidationSummary(true, \"\", new { @class = \"text-danger\" })         &lt;div class=\"form-group\"&gt;             @Html.LabelFor(model =&gt; model.Name, htmlAttributes: new { @class = \"control-label col-md-2\" })             &lt;div class=\"col-md-10\"&gt;                 @Html.EditorFor(model =&gt; model.Name, new { htmlAttributes = new { @class = \"form-control\" } })                 @Html.ValidationMessageFor(model =&gt; model.Name, \"\", new { @class = \"text-danger\" })             &lt;/div&gt;         &lt;/div&gt;          &lt;div class=\"form-group\"&gt;             &lt;div class=\"col-md-offset-2 col-md-10\"&gt;                 &lt;input type=\"submit\" value=\"Create\" class=\"btn btn-default\" /&gt;             &lt;/div&gt;         &lt;/div&gt;     &lt;/div&gt; }  &lt;div&gt;     @Html.ActionLink(\"Back to List\", \"Index\") &lt;/div&gt;  @section Scripts {     @Scripts.Render(\"~/bundles/jqueryval\") }     Step 8: Create UsersRole View to the application     Add Index View in Views-&gt;UsersRole folder   Add Create View in Views-&gt;UsersRole folder   Modify views as follows   Index.cshtml   @model IEnumerable&lt;MVCAuth.Models.UsersRolesVM&gt;  @{     ViewBag.Title = \"Index\"; }  &lt;h2&gt;Index&lt;/h2&gt;  &lt;p&gt;     @Html.ActionLink(\"Create New\", \"Create\") &lt;/p&gt; &lt;table class=\"table\"&gt;     &lt;tr&gt;         &lt;th&gt;             @*@Html.DisplayNameFor(model =&gt; model.UserName)*@             User Name         &lt;/th&gt;         &lt;th&gt;             @*@Html.DisplayNameFor(model =&gt; model.RoleName)*@             Roles Name         &lt;/th&gt;         &lt;th&gt;&lt;/th&gt;     &lt;/tr&gt;      @foreach (var users in Model)     {          foreach (string rolesName in users.RoleNames)         {             &lt;tr&gt;                 &lt;td&gt;                     @Html.DisplayFor(modelItem =&gt; users.User.UserName)                 &lt;/td&gt;                 &lt;td&gt;                     @Html.DisplayFor(modelItem =&gt; rolesName)                 &lt;/td&gt;                 &lt;td&gt;                     @Html.ActionLink(\"Delete\", \"Delete\", new { id = 1 })                 &lt;/td&gt;             &lt;/tr&gt;         }     }  &lt;/table&gt;   Create.cshtml  @model MVCAuth.Models.UserRoleVM  @{     ViewBag.Title = \"Create\"; }  &lt;h2&gt;Create&lt;/h2&gt;   @using (Html.BeginForm())  {     @Html.AntiForgeryToken()      &lt;div class=\"form-horizontal\"&gt;     &lt;h4&gt;UserRoleVM&lt;/h4&gt;     &lt;hr /&gt;     @Html.ValidationSummary(true, \"\", new { @class = \"text-danger\" })      &lt;div class=\"form-group\"&gt;         @Html.LabelFor(model =&gt; model.UserName, \"UserName\", htmlAttributes: new { @class = \"control-label col-md-2\" })         &lt;div class=\"col-md-10\"&gt;             @Html.DropDownList(\"UserId\", null, htmlAttributes: new { @class = \"form-control\" })         &lt;/div&gt;     &lt;/div&gt;      &lt;div class=\"form-group\"&gt;         @Html.LabelFor(model =&gt; model.RoleName, \"RoleName\", htmlAttributes: new { @class = \"control-label col-md-2\" })         &lt;div class=\"col-md-10\"&gt;             @Html.DropDownList(\"RoleName\", null, htmlAttributes: new { @class = \"form-control\" })             @Html.ValidationMessageFor(model =&gt; model.UserName, \"\", new { @class = \"text-danger\" })         &lt;/div&gt;     &lt;/div&gt;      &lt;div class=\"form-group\"&gt;         &lt;div class=\"col-md-offset-2 col-md-10\"&gt;             &lt;input type=\"submit\" value=\"Create\" class=\"btn btn-default\" /&gt;         &lt;/div&gt;     &lt;/div&gt; &lt;/div&gt; }  &lt;div&gt;     @Html.ActionLink(\"Back to List\", \"Index\") &lt;/div&gt;  @section Scripts {     @Scripts.Render(\"~/bundles/jqueryval\") }    Step 9: Run migration command in package manager console   Now the application is ready to run.   Source Code  ","categories": ["ASP.NET","ASP.NET MVC","C#"],
        "tags": ["aspnet","mvc","csharp"],
        "url": "http://localhost:4000/authentication-and-authorization-in-asp.net-mvc/",
        "teaser":null},{
        "title": "Create a sentiment analysis app using ML.NET",
        "excerpt":"  Application overview  ML.NET is a free, open source and cross platform machine learning framework. It is easily integrated with .NET development environment. ML.NET allows you to train, build, and ship custom machine learning models using C# and some other languages. Here a simple sentiment analysis application will be created using ML.NET and C#. Let’s start.   Tools and Technology used  The following tools and technologies has been used for this application     Visual Studio 2019   Visual C#   Step 1: Create a console application     Create a new project using visual studio 2019   Choose the C# Console App (.NET Core) project template   Change the project and solution name as “SentimentAnalysis”   Click create button to create the project.   Step 2: Enable the ML.NET Model Builder preview feature Press right button on the project file -&gt; Add -&gt; Machine learning You will see the following pop up message. Enable it.   Would you like to enable the ML.NET Model Builder preview feature so you can add Machine Learning to your .NET projects? Enable   Step 3: Select model builder scenario     Press right button on the project -&gt; Add -&gt; Machine Learning   Select Text classification   Keep the Local Environment and click on data (to move data step)     Step 4: Download and add data     Download the Sentiment Labelled Sentences datasets from the UCI Machine Learning Repository   Unzip the file and keep the “yelp_labelled.txt” file to Data folder   The first column of this file represents the comments and the second column represent the sentiment of the text (0 for negative and 1 for positive)   Add data     In this form, select File as the input data source type   Browse file yelp_labelled.txt. Once you are selected, you will see the preview of the data.   Select “col1” for Column to predict (Label) as the image below   Now click Train button to move to the train step      Step 5: Train your model     Time to train set automatically based on data. But you can manually set it.   Click start training button. You will see the following point the screen.   Best accuracy - Percentage of accuracy of the current model   Best model - This shows you which algorithm performed the best during Model Builder’s exploration.  Training time - Total times taken to run training Models explored (total) - This shows you the total number of models explored by Model Builder in the given amount of time.   Source : Microsoft docs      Now click Evaluate to move to the evaluate step   Step 6: Evaluate your model     Type a sentence in Try your model section.   I Typed “This is a fantastic place” and it shows positive is 98% and negative 2%      Step 7: Add project in to the solution     Click Add Project Button   Model builder will add machine learning model and the project for training   ModelBuilder.cs in the console application is used to build/train the model   Program.cs in the console application is used to test run the model   ModelInput.cs and ModelOutput.cs in Model library is the input and output class for the model training.   ConsumeModel.cs in Model library contains the method for model consumption   Solution structure will be like as follows      Step 8: Consume your model     Set SentimentAnalysisML.ConsoleApp as startup project   Modify a bit of Program.cs in SentimentAnalysisML.ConsoleApp as follows       class Program     {         static void Main(string[] args)         {             // Create single instance of sample data from first line of dataset for model input             ModelInput sampleData = new ModelInput()             {                 Col0 = @\"The food of Hotel Sonargaon was awesome\",             };              // Make a single prediction on the sample data and print results             var predictionResult = ConsumeModel.Predict(sampleData);              Console.WriteLine(\"Using model to make single prediction -- Comparing actual Col1 with predicted Col1 from sample data...\\n\\n\");             Console.WriteLine($\"Col0: {sampleData.Col0}\");             Console.WriteLine($\"\\n\\nPredicted Col1 value {predictionResult.Prediction} \\nPredicted Col1 scores: [{String.Join(\",\", predictionResult.Score)}]\\n\");              string sentiment = predictionResult.Prediction == \"1\" ? \"Positive\" : \"Negative\";             Console.WriteLine($\"Sentiment: {sentiment} \\n\");              Console.WriteLine(\"=============== End of process, hit any key to finish ===============\");             Console.ReadKey();         }     }    Step 9: Build and run the application Now build and run the application. You will see the sentiment output of the sentence “The food of Hotel Sonargaon was awesome”.   Source Code    ","categories": ["AI","Machine Learning"],
        "tags": ["ai","machinelearning"],
        "url": "http://localhost:4000/create-a-sentiment-analysis-app-using-ml-dot-net/",
        "teaser":null},{
        "title": "Authentication and authorization using asp.net core web api and JWT (Part 01)",
        "excerpt":"  Application overview  Token based authentication has been the most popular authentication technique for the last couple of years. Before that we used session based authentication. In session based authentication, client saves session id in the cookie. In token-based authentication, token is given to client instead of session. This token contains encrypted information of user with expiry time. In this article, I will show you, how to create authentication application using asp.net core web api and JWT(Json Web Token).   Tools and Technology used  The following tools and technologies has been used for this application     Visual Studio 2019   Visual C#   ASP.NET Core Web API   Postman - for api testing   Let’s have a look to the implementation of the project.   Step 1: Create an asp.net core web api application     Select File-&gt;New-&gt;Project-&gt;ASP.NET Core Web Application   Choose project and solution name   Click “Create” button   Step 2: Choose project template     Select project template as API   Click create button   Step 3: Install NuGet packages     Install following nuget packages in the application     PM&gt; Install-Package Microsoft.IdentityModel.Tokens PM&gt; Install-Package System.IdentityModel.Tokens.Jwt PM&gt; Install-Package Microsoft.AspNetCore.Authentication.JwtBearer -Version 3.1.11           Step 4: Add Key, Issuer and Audience     Add Key, Issuer and Audience in Appsettings.json as follows     \"Jwt\": {     \"Key\": \"thisisasecretkey\",     \"Issuer\": \"Issuer.com\",     \"Audience\":  \"Audience.com\"   }   Step 5: Add authentication in HTTP request pipeline  Add the following code snippet to add authentication in HTTP request pipeline.     public void Configure(IApplicationBuilder app, IWebHostEnvironment env)   {       .       .       .       // Configure for HTTP Request pipeline       app.UseAuthentication();        app.UseHttpsRedirection();        app.UseRouting();        app.UseAuthorization();        app.UseEndpoints(endpoints =&gt;       {           endpoints.MapControllers();       });   }   Step 6: Configure JWT based authentication  Register a JWT authentication schema by using “AddAuthentication” method in ConfigureService Method of Startup.cs as follows     public void ConfigureServices(IServiceCollection services)   {       services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)       .AddJwtBearer(options =&gt;       {           options.TokenValidationParameters = new TokenValidationParameters           {               ValidateIssuer = true,               ValidateAudience = true,               ValidateLifetime = true,               ValidateIssuerSigningKey = true,                ValidIssuer = Configuration[\"Jwt:Issuer\"],               ValidAudience = Configuration[\"Jwt:Audience\"],               IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(Configuration[\"Jwt:Key\"]))           };       });        services.AddControllers();   }   Step 7: Create a login view model  Create a view model name “LoginVM” in Model folder as follows    public class LoginVM   {       public string UserName { get; set; }       public string Password { get; set; }   }   Step 8: Create an api controller  Create an api controller name AuthController as follows       [Route(\"api/[controller]\")]     [ApiController]     public class AuthController : ControllerBase     {         private IConfiguration _config;          public AuthController(IConfiguration config)         {             _config = config;         }          [AllowAnonymous]         [HttpPost, Route(\"login\")]         public IActionResult Login([FromBody] LoginVM loginModel)         {             if (loginModel == null)             {                 return BadRequest(\"Invalid request\");             }              if (IsLogin(loginModel.UserName, loginModel.Password))             {                 var secretKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_config[\"Jwt:Key\"]));                 var signinCredentials = new SigningCredentials(secretKey, SecurityAlgorithms.HmacSha256);                 var tokeOptions = new JwtSecurityToken(                      issuer: _config[\"Jwt:Issuer\"],                      audience: _config[\"Jwt:Audience\"],                      claims: new List&lt;Claim&gt;(),                      expires: DateTime.Now.AddMinutes(30),                      signingCredentials: signinCredentials                  );                  var tokenString = new JwtSecurityTokenHandler().WriteToken(tokeOptions);                 return Ok(new { Token = tokenString });             }             else             {                  return Unauthorized();             }            }          public bool IsLogin(string username, string password)         {             bool result = username == \"mahedee\" &amp;&amp; password == \"pass123\" ? true : false;             return result;         }     }   Step 9: Create a test api controller     Create a test api controller name ValuesController as follows   Add “Authorize” attribute on the ValuesController     [Route(\"api/[controller]\")]   [ApiController]   [Authorize]   public class ValuesController : ControllerBase   {       // GET: api/&lt;ValuesController&gt;       [HttpGet]       public IEnumerable&lt;string&gt; Get()       {           return new string[] { \"value1\", \"value2\", \"value3\", \"value4\" };       }   }      Step 10: Run application and test using postman     Run application   Run postman   In the Headers tab of postman, set Key as Content-Type and Value as application/json   Set url as https://localhost:44362/api/auth/login and set POST method   In the body tab select raw and JSON   Now set userName and Password in the body of postman as follows   Press send button and you will get the token as follows      Step 11: Test your application using token     Copy the token you have already got against user name and password   In the header tab use Authorization and Bearer Token as follows   Set url as https://localhost:44362/api/values   Select GET method and click send button you will see the output      Source Code    ","categories": ["ASP.NET","ASP.NET Core","Web API","C#","JWT"],
        "tags": ["aspnet","csharp"],
        "url": "http://localhost:4000/authentication-and-authorization-using-asp.net-core-web-api-and-jwt-part01/",
        "teaser":null},{
        "title": "Implementation of swagger in a asp.net core web api using in memory database",
        "excerpt":"  Here, an application name School Management System is developed using asp.net core web api and in memory database. Swagger is implemented in this application.   Tools and Technology used     Visual studio 2019   Visual C#   ASP.NET Core Web Api   Entity Framework Core   In memory database   Step 1: Create an asp.net core web api project      Type the project name as “SMS” aks School Management System.   Select API Template   Select “Configure for HTTPS”   Step 2: Install in memory database provider for entity framework core     Install nuget package Microsoft.EntityFrameworkCore.InMemory in the project   Step 3: Create model classes     Create two model classes name Student and Teacher as follows       public class Student     {         public int Id { get; set; }         public string Class { get; set; }         public string RollNo { get; set; }         public string FullName { get; set; }         public string FathersName { get; set; }         public string MothersName { get; set; }     }        public class Teacher     {         public int Id { get; set; }         public string TeacherId { get; set; }         public string FullName { get; set; }         public string FathersName { get; set; }         public string MothersName { get; set; }     }   Step 4: Add dbcontext class     Add a db context class as follows       public class SMSContext : DbContext   {       public SMSContext(DbContextOptions&lt;SMSContext&gt; options)           : base(options)       {       }        public DbSet&lt;Student&gt; Users { get; set; }        public DbSet&lt;Teacher&gt; Posts { get; set; }   }           Configure in memory database in the ConfigureService method of Startup class as follows.       public void ConfigureServices(IServiceCollection services)     {         services.AddDbContext&lt;SMSContext&gt;(opt =&gt; opt.UseInMemoryDatabase(\"SMSContext\"));     }  Step 5: Add Api Controller     Add two api controller StudentController and TeacherController as follows       [Route(\"api/[controller]\")]   [ApiController]   public class StudentsController : ControllerBase   {       private readonly SMSContext _context;        public StudentsController(SMSContext context)       {           _context = context;       }        // GET: api/Students       [HttpGet]       public async Task&lt;ActionResult&lt;IEnumerable&lt;Student&gt;&gt;&gt; GetUsers()       {           return await _context.Users.ToListAsync();       }        // GET: api/Students/5       [HttpGet(\"{id}\")]       public async Task&lt;ActionResult&lt;Student&gt;&gt; GetStudent(int id)       {           var student = await _context.Users.FindAsync(id);            if (student == null)           {               return NotFound();           }            return student;       }        // PUT: api/Students/5       // To protect from overposting attacks, enable the specific properties you want to bind to, for       // more details, see https://go.microsoft.com/fwlink/?linkid=2123754.       [HttpPut(\"{id}\")]       public async Task&lt;IActionResult&gt; PutStudent(int id, Student student)       {           if (id != student.Id)           {               return BadRequest();           }            _context.Entry(student).State = EntityState.Modified;            try           {               await _context.SaveChangesAsync();           }           catch (DbUpdateConcurrencyException)           {               if (!StudentExists(id))               {                   return NotFound();               }               else               {                   throw;               }           }            return NoContent();       }        // POST: api/Students       // To protect from overposting attacks, enable the specific properties you want to bind to, for       // more details, see https://go.microsoft.com/fwlink/?linkid=2123754.       [HttpPost]       public async Task&lt;ActionResult&lt;Student&gt;&gt; PostStudent(Student student)       {           _context.Users.Add(student);           await _context.SaveChangesAsync();            return CreatedAtAction(\"GetStudent\", new { id = student.Id }, student);       }        // DELETE: api/Students/5       [HttpDelete(\"{id}\")]       public async Task&lt;ActionResult&lt;Student&gt;&gt; DeleteStudent(int id)       {           var student = await _context.Users.FindAsync(id);           if (student == null)           {               return NotFound();           }            _context.Users.Remove(student);           await _context.SaveChangesAsync();            return student;       }        private bool StudentExists(int id)       {           return _context.Users.Any(e =&gt; e.Id == id);       }   }            [Route(\"api/[controller]\")]   [ApiController]   public class TeachersController : ControllerBase   {       private readonly SMSContext _context;        public TeachersController(SMSContext context)       {           _context = context;       }        // GET: api/Teachers       [HttpGet]       public async Task&lt;ActionResult&lt;IEnumerable&lt;Teacher&gt;&gt;&gt; GetPosts()       {           return await _context.Posts.ToListAsync();       }        // GET: api/Teachers/5       [HttpGet(\"{id}\")]       public async Task&lt;ActionResult&lt;Teacher&gt;&gt; GetTeacher(int id)       {           var teacher = await _context.Posts.FindAsync(id);            if (teacher == null)           {               return NotFound();           }            return teacher;       }        // PUT: api/Teachers/5       // To protect from overposting attacks, enable the specific properties you want to bind to, for       // more details, see https://go.microsoft.com/fwlink/?linkid=2123754.       [HttpPut(\"{id}\")]       public async Task&lt;IActionResult&gt; PutTeacher(int id, Teacher teacher)       {           if (id != teacher.Id)           {               return BadRequest();           }            _context.Entry(teacher).State = EntityState.Modified;            try           {               await _context.SaveChangesAsync();           }           catch (DbUpdateConcurrencyException)           {               if (!TeacherExists(id))               {                   return NotFound();               }               else               {                   throw;               }           }            return NoContent();       }        // POST: api/Teachers       // To protect from overposting attacks, enable the specific properties you want to bind to, for       // more details, see https://go.microsoft.com/fwlink/?linkid=2123754.       [HttpPost]       public async Task&lt;ActionResult&lt;Teacher&gt;&gt; PostTeacher(Teacher teacher)       {           _context.Posts.Add(teacher);           await _context.SaveChangesAsync();            return CreatedAtAction(\"GetTeacher\", new { id = teacher.Id }, teacher);       }        // DELETE: api/Teachers/5       [HttpDelete(\"{id}\")]       public async Task&lt;ActionResult&lt;Teacher&gt;&gt; DeleteTeacher(int id)       {           var teacher = await _context.Posts.FindAsync(id);           if (teacher == null)           {               return NotFound();           }            _context.Posts.Remove(teacher);           await _context.SaveChangesAsync();            return teacher;       }        private bool TeacherExists(int id)       {           return _context.Posts.Any(e =&gt; e.Id == id);       }   }           Step 6: Install Swagger     Install nuget package Swashbuckle.AspNetCore   Step 6: Add and configure Swagger middleware     Add the Swagger generator to the services collection in the ConfigureServices method of startup class as follows.       // This method gets called by the runtime. Use this method to add services to the container.   public void ConfigureServices(IServiceCollection services)        services.AddControllers();        // Register the Swagger generator, defining 1 or more Swagger documents       services.AddSwaggerGen();   }           In the Startup.Configure method, enable the middleware for serving the generated JSON document and the Swagger UI:   public void Configure(IApplicationBuilder app) {     // Enable middleware to serve generated Swagger as a JSON endpoint.     app.UseSwagger();      // Enable middleware to serve swagger-ui (HTML, JS, CSS, etc.),     // specifying the Swagger JSON endpoint.     app.UseSwaggerUI(c =&gt;     {         c.SwaggerEndpoint(\"/swagger/v1/swagger.json\", \"My API V1\");     });      app.UseRouting();     app.UseEndpoints(endpoints =&gt;     {         endpoints.MapControllers();     }); }    Step 4: Run the application and Check     Run the application   Browse https://&lt;localhost&gt;:&lt;port&gt;/swagger/index.html   Download source code  ","categories": ["ASP.NET","ASP.NET Core","C#","Swagger"],
        "tags": ["csharp","aspnet"],
        "url": "http://localhost:4000/implement-swagger-in-asp.net-core-web-api-using-in-memory-db/",
        "teaser":null},{
        "title": "Parsing markdown file and display in a razor view using asp.net core",
        "excerpt":"  Application overview Markdown has been huge popular for documentation and blog post. How to parse a markdown file and display in a razor view as blog post will be shown in this application. Let’s have a look on the implementation of the project.   Tools and Technology used  The following tools and technologies has been used for this application     Visual Studio 2019   Visual C#   NuGet package “Westwind.AspNetCore.Markdown”   ASP.NET Core MVC   Razor view engine   Step1: Select ASP.NET Core Web Application  Select File-&gt;New-&gt;Project-&gt;ASP.NET Core Web Application   Step2: Choose project and solution name  Type project and solution name as “MarkdownBlog”   Step 3: Select project template     Select project template as Web Application (Model-View-Controller)   Click create button   Step 4: Install Nuget package “Westwind.AspNetCore.Markdown”  Run the following command in package manager console  PM&gt; Install-Package Westwind.AspNetCore.Markdown   Step 5: Set up the markdown middleware  Once the Nuget package is installed, you can configure the middleware. Modify “ConfigureServices” and “Configure” Method as follows. Here, AddMarkdown() is used to configure the page processing. UseMarkdown() is used to hook up the middleware.   Startup.cs       public class Startup     {         public Startup(IConfiguration configuration)         {             Configuration = configuration;         }          public IConfiguration Configuration { get; }          // This method gets called by the runtime. Use this method to add services to the container.         public void ConfigureServices(IServiceCollection services)         {             services.AddMarkdown(config =&gt;             {                 // optional Tag BlackList                 config.HtmlTagBlackList = \"script|iframe|object|embed|form\"; // default                  // Simplest: Use all default settings                 var folderConfig = config.AddMarkdownProcessingFolder(\"/docs/\", \"~/Pages/__MarkdownPageTemplate.cshtml\");                  // Customized Configuration: Set FolderConfiguration options                 folderConfig = config.AddMarkdownProcessingFolder(\"/posts/\", \"~/Pages/__MarkdownPageTemplate.cshtml\");                  // Optionally strip script/iframe/form/object/embed tags ++                 folderConfig.SanitizeHtml = false;  //  default                  // Optional configuration settings                 folderConfig.ProcessExtensionlessUrls = true;  // default                 folderConfig.ProcessMdFiles = true; // default                  // Optional pre-processing - with filled model                 folderConfig.PreProcess = (model, controller) =&gt;                 {                     // controller.ViewBag.Model = new MyCustomModel();                 };                  // folderConfig.BasePath = \"https://github.com/RickStrahl/Westwind.AspNetCore.Markdow/raw/master\";                  // Create your own IMarkdownParserFactory and IMarkdownParser implementation                 // to replace the default Markdown Processing                 //config.MarkdownParserFactory = new CustomMarkdownParserFactory();                                   // optional custom MarkdigPipeline (using MarkDig; for extension methods)                 config.ConfigureMarkdigPipeline = builder =&gt;                 {                     builder.UseEmphasisExtras(Markdig.Extensions.EmphasisExtras.EmphasisExtraOptions.Default)                         .UsePipeTables()                         .UseGridTables()                         .UseAutoIdentifiers(AutoIdentifierOptions.GitHub) // Headers get id=\"name\"                          .UseAutoLinks() // URLs are parsed into anchors                         .UseAbbreviations()                         .UseYamlFrontMatter()                         .UseEmojiAndSmiley(true)                         .UseListExtras()                         .UseFigures()                         .UseTaskLists()                         .UseCustomContainers()                         //.DisableHtml()   // renders HTML tags as text including script                         .UseGenericAttributes();                 };             });              services.AddControllersWithViews()                  .AddApplicationPart(typeof(MarkdownPageProcessorMiddleware).Assembly);         }          // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.         public void Configure(IApplicationBuilder app, IWebHostEnvironment env)         {             if (env.IsDevelopment())             {                 app.UseDeveloperExceptionPage();             }             else             {                 app.UseExceptionHandler(\"/Home/Error\");                 // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.                 app.UseHsts();             }             app.UseHttpsRedirection();             app.UseStaticFiles();                          //For markdown             app.UseMarkdown();              app.UseRouting();              app.UseAuthorization();              app.UseEndpoints(endpoints =&gt;             {                 endpoints.MapControllerRoute(                     name: \"default\",                     pattern: \"{controller=Home}/{action=Index}/{id?}\");             });         }     }    Step 6: Create a Markdown Container Razor Page  Create __MarkdownPageTemplate.cshtml in Pages folder as follows  @model Westwind.AspNetCore.Markdown.MarkdownModel @{     ViewBag.Title = Model.Title;     Layout = \"_Layout\"; }  &lt;div&gt;     @Model.RenderedMarkdown &lt;/div&gt;   Step 7: Now drop a markdown file in /wwwroot/  Here I have dropped MyArticle.md in /wwwroot/posts/2020/12/01/ folder. You can organize directory by yourself.   MyArticle.md  ## Batting changes not yet bearing fruit The buzzword in the Bangladesh camp before returning to international cricket after over 10  months with the ODI series against the West Indies was long-term planning keeping the 2023  ICC World Cup in mind.  The team management did try some tactical changes such as promoting young left-hander Nazmul  Hossain Shanto to number three in place of Shakib Al Hasan, who had made the position his own  during the 2019 ICC World Cup.  ![Bangladesh Test Captain](image01.jpg)     Step 8: Build and run the application   Now the application is ready to run. Build and run the application. Now type the “https://localhost:yourport/posts/2020/12/01/markdownarticle” and watch the html output which you is writtern in the markdown tag. You can browse as https://localhost:44338/posts/2020/12/01/MyArticle.md to see output as github flavour.   Source Code    ","categories": ["ASP.NET","ASP.NET Core","C#","Markdown"],
        "tags": ["dotnet","C#","aspnet"],
        "url": "http://localhost:4000/parsing-markdown-file-and-display-in-a-razor-view-page-using-asp.net-core/",
        "teaser":null},{
        "title": "Embed markdown into a razor view using asp.net core",
        "excerpt":"  Application overview Mardown is creeping up and has become a standard for documentation. How to embed markdown into a razor view will be shown in this application. Let’s have a look on the implementation of the project.   Tools and Technology used  The following tools and technologies has been used for this application     Visual Studio 2019   Visual C#   NuGet package “Westwind.AspNetCore.Markdown”   ASP.NET Core MVC   Razor view engine   Step1: Select ASP.NET Core Web Application  Select File-&gt;New-&gt;Project-&gt;ASP.NET Core Web Application   Step2: Choose project and solution name  Type project and solution name as “MarkdownToHTMLv02”   Step 3: Select project template     Select project template as Web Application (Model-View-Controller)   Click create button   Step 4: Install Nuget package “Westwind.AspNetCore.Markdown”  Run the following command in package manager console  PM&gt; Install-Package Westwind.AspNetCore.Markdown   Step 5: Register TagHelper   Add the following TagHelper in Views-&gt;_ViewImports.cshtml  @addTagHelper *, Westwind.AspNetCore.Markdown   Step 6: Apply markdown tag  Now apply markdown tag in Views-&gt;Home-&gt;Index.cshtml   &lt;h3&gt;Markdown TagHelper Block&lt;/h3&gt;  &lt;markdown normalize-whitespace=\"true\"&gt;     ## This is a markdown title     * Item 1     * Item 2     The current Time is:     **@DateTime.Now.ToString(\"HH:mm:ss\")**  &lt;/markdown&gt;   Step 7: Build and run the application   Now the application is ready to run. Build and run the application and watch the html output which you is writtern in the markdown tag.   Source Code   ","categories": ["ASP.NET","ASP.NET Core","C#","Markdown"],
        "tags": ["markdown","csharp","aspnet"],
        "url": "http://localhost:4000/embed-markdown-into-a-razor-view-using-asp.net-core/",
        "teaser":null},{
        "title": "File transfer (export) through ASP.NET core web api",
        "excerpt":"  Tools and Technology used     Visual studio 2019   ASP.NET Core Web Api   Visual C#   JQuery   Step 1: Create a blank solution name “FileExpoter”  Step 2: Add a new asp.net core project in “FileExporer” solution      Type the project name as “ExportApi”   Select API Template   Select “Configure for HTTPS”   Step 3: Add a new asp.net core MVC Project in “File Explorer” Solution      Type the project name as “ClientApp”   Select Template - Web Application (Model-View-Controller)   Step 4: Keep files in a folder     Create a folder name “files”   Keep two files.  mahedeebio.pdf and booklist.xlsx in the files folder   Step 4:  Enable CORS in ExportApi application.     Install nuget package - Microsoft.AspNetCore.Cors   Modify the ConfigureServices and Configure Method in Startup.cs file as follows.       public class Startup     {         public Startup(IConfiguration configuration)         {             Configuration = configuration;         }          public IConfiguration Configuration { get; }          // This method gets called by the runtime. Use this method to add services to the container.         public void ConfigureServices(IServiceCollection services)         {             services.AddControllers();              //Enable CORS - Cross-Origin resource sharing             services.AddCors(options =&gt;             {                 options.AddPolicy(\"CorsPolicy\",                     builder =&gt; builder.AllowAnyOrigin()                     .AllowAnyMethod()                     .AllowAnyHeader()                     );             });              ////If you want to enable any particular IP             //services.AddCors(c =&gt;             //{             //    c.AddPolicy(\"AllowOrigin\", options =&gt; options.WithOrigins(\"https://localhost:44312\"));             //});         }          // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.         public void Configure(IApplicationBuilder app, IWebHostEnvironment env)         {             if (env.IsDevelopment())             {                 app.UseDeveloperExceptionPage();             }              app.UseHttpsRedirection();              app.UseRouting();              // Enable CORS             // Must be in between app.UseRouting and app.UseEndpoints             app.UseCors(\"CorsPolicy\");               // Another of way of Allow CORS             //app.UseCors(options =&gt; options.AllowAnyOrigin());             //app.UseCors(options =&gt; options.WithOrigins(\"https://localhost:44312\"));              app.UseAuthorization();              app.UseEndpoints(endpoints =&gt;             {                 endpoints.MapControllers();             });                    }     }   Step 5: Add a controller class in ExportApi project     Create a controller - name ExportController   Select Template - “API Controller - Empty”   Update the Export Controller as follows   using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; using Microsoft.AspNetCore.Cors; using Microsoft.AspNetCore.Http; using Microsoft.AspNetCore.Mvc;  namespace ExportApi.Controllers {     [EnableCors(\"CorsPolicy\")]     [Route(\"api/[controller]\")]     [ApiController]     public class ExportController : ControllerBase     {         //Get: api/Export/GetExcel         [HttpGet]         [Route(\"GetExcel\")]         public IActionResult GetExcel()         {             try             {                 return Ok(ConverExceltoB64());             }              catch (Exception ex)             {                  throw (ex);             }         }              //Get: api/Export/GetPDF         [HttpGet]         [Route(\"GetPDF\")]         public IActionResult GetPDF()         {             try             {                 return Ok(ConvertPDFtoB64());             }              catch (Exception ex)             {                 throw (ex);             }         }          //Get: api/Export/GetDynamicExcel         [HttpGet]         [Route(\"GetDynamicExcel\")]         public IActionResult GetDynamicExcel()         {             try             {                 return Ok(BuildeExcel());             }             catch (Exception ex)             {                 throw (ex);             }         }           // Convert an excel file to Base64          private string ConverExceltoB64()         {             var docBytes = System.IO.File.ReadAllBytes(System.IO.Path.GetFullPath(@\"files\\booklist.xlsx\"));             string docBase64 = Convert.ToBase64String(docBytes);             return (docBase64);         }           // Convert a pdf file to Base64         private string ConvertPDFtoB64()         {             var docBytes = System.IO.File.ReadAllBytes(System.IO.Path.GetFullPath(@\"files\\mahedeebio.pdf\"));             string docBase64 = Convert.ToBase64String(docBytes);             return (docBase64);         }           // Create an excel on the fly and return as Base64 format         private string BuildeExcel()         {             StringBuilder table = new StringBuilder();             table.Append(\"&lt;table border=`\" + \"1px\" + \"`b&gt;\");             table.Append(\"&lt;tr&gt;\");             table.Append(\"&lt;td&gt;&lt;b&gt;&lt;font face=Arial Narrow size=3&gt;ID&lt;/font&gt;&lt;/b&gt;&lt;/td&gt;\");             table.Append(\"&lt;td&gt;&lt;b&gt;&lt;font face=Arial Narrow size=3&gt;Name&lt;/font&gt;&lt;/b&gt;&lt;/td&gt;\");             table.Append(\"&lt;td&gt;&lt;b&gt;&lt;font face=Arial Narrow size=3&gt;Designation&lt;/font&gt;&lt;/b&gt;&lt;/td&gt;\");             table.Append(\"&lt;/tr&gt;\");              foreach (var item in GetEmployeeAll())             {                 table.Append(\"&lt;tr&gt;\");                 table.Append(\"&lt;td&gt;&lt;font face=Arial Narrow size=\" + \"14px\" + \"&gt;\" + item.Id.ToString() + \"&lt;/font&gt;&lt;/td&gt;\");                 table.Append(\"&lt;td&gt;&lt;font face=Arial Narrow size=\" + \"14px\" + \"&gt;\" + item.Name.ToString() + \"&lt;/font&gt;&lt;/td&gt;\");                 table.Append(\"&lt;td&gt;&lt;font face=Arial Narrow size=\" + \"14px\" + \"&gt;\" + item.Designation.ToString() + \"&lt;/font&gt;&lt;/td&gt;\");                 table.Append(\"&lt;/tr&gt;\");             }              table.Append(\"&lt;/table&gt;\");             byte[] temp = System.Text.Encoding.UTF8.GetBytes(table.ToString());             return System.Convert.ToBase64String(temp);          }           // Return list of employee         private List&lt;Employee&gt; GetEmployeeAll()         {             List&lt;Employee&gt; employees = new List&lt;Employee&gt;             {                 new Employee(){Id = 1, Name = \"Sabrina Jahan Sara\", Designation = \"Software Engineer\"},                 new Employee(){Id = 2, Name = \"Tahiya Hasan Arisha\", Designation = \"Sr. Software Engineer\"},                 new Employee(){Id = 3, Name = \"Ishrat Jahan Nusaifa\", Designation = \"Software Architect\"},                 new Employee(){Id = 4, Name = \"Nusrat Janan\", Designation = \"Project Manager\"}             };              return employees;         }     }       // Employee model class     internal class Employee     {         public int Id { get; set; }         public string Name { get; set; }         public string Designation { get; set; }     } }    Step 6: Modify index.cshtml in ClientApp Project     Modify Views-&gt;Home-&gt;Index.cshtml as follows   @{     ViewData[\"Title\"] = \"Home Page\"; }  &lt;h4&gt;Export file using asp.net web api&lt;/h4&gt; &lt;button type=\"button\" class=\"btn btn-primary\" id=\"btnExcel\"&gt;Export Excel&lt;/button&gt; &lt;button type=\"button\" class=\"btn btn-info\" id=\"btnPDF\"&gt;Export PDF&lt;/button&gt; &lt;button type=\"button\" class=\"btn btn-success\" id=\"btnDynamicExcel\"&gt;Export Dynamic Excel&lt;/button&gt;    @* Implement Scripts section *@  @section Scripts{     &lt;script&gt;         $(document).ready(function () {             //alert('working from document ready!!');         })          //Button's events         $(\"#btnExcel\").click(function () {             //alert(\"Export button clicked\");             ExcelExportar.OnExportarClick();         });          $(\"#btnPDF\").click(function () {             //alert(\"Export for dynamic pdf clicked\");             PDFExportar.OnExportarClick();         });          $(\"#btnDynamicExcel\").click(function () {             //alert(\"Export button clicked\");             DyamicExcelExportar.OnExportarClick();         });             //Excel exporter - start         var ExcelExportar = {             OnExportarClick: function () {                 //alert('click on exporter!');                 $.ajax({                     url: \"https://localhost:44386/api/export/getexcel\",                     type: 'GET',                     dataType: 'text',                     success: ExcelExportar.DownloadExcel,                      failure: function (data) {                         alert('failur: ' + data.responseText);                     }, //End of AJAX failure function                     error: function (request) {                         alert('error: ' + request.responseText);                     } //End of AJAX error function                 });             },              DownloadExcel: function (data) {                 //alert('download excel');                 var createA = document.createElement('a');                 createA.setAttribute('id', 'linkDownload');                 createA.setAttribute('href', 'data:application/vnd.ms-excel;base64,' + data);                 document.body.appendChild(createA);                  createA.download = 'download_latest.xls';                 var selectorHref = document.getElementById('linkDownload');                 selectorHref.click();                 selectorHref.remove();             }         };          //Excel exporter - End           //PDF exporter - start          var PDFExportar = {             OnExportarClick: function () {                 //alert('click on pdf exporter!');                 $.ajax({                     url: \"https://localhost:44386/api/export/getpdf\",                     type: 'GET',                     dataType: 'text',                     success: PDFExportar.DownloadPDF,                     failure: function (data) {                         alert('failur: ' + data.responseText);                     }, //End of AJAX failure function                     error: function (request) {                         alert('error: ' + request.responseText);                     } //End of AJAX error function                 });             },              DownloadPDF: function (data) {                  // Display in a same page with a download link                  // Embed the PDF into the HTML page and show it to the user                 var obj = document.createElement('object');                 obj.style.width = '100%';                 obj.style.height = '842pt';                 obj.type = 'application/pdf';                 obj.data = 'data:application/pdf;base64,' + data;                 document.body.appendChild(obj);                  // Insert a link that allows the user to download the PDF file                 var link = document.createElement('a');                 link.innerHTML = 'Download PDF file';                 link.download = 'file.pdf';                 link.href = 'data:application/octet-stream;base64,' + data;                 document.body.appendChild(link);                   // Display in a new window                 //var objbuilder = '';                 //objbuilder += ('&lt;object width=\"100%\" height=\"100%\"      data=\"data:application/pdf;base64,');                 //objbuilder += (data);                 //objbuilder += ('\" type=\"application/pdf\" class=\"internal\"&gt;');                 //objbuilder += ('&lt;embed src=\"data:application/pdf;base64,');                 //objbuilder += (data);                 //objbuilder += ('\" type=\"application/pdf\" /&gt;');                 //objbuilder += ('&lt;/object&gt;');                  //var win = window.open(\"\", \"_blank\", \"titlebar=yes\");                 //win.document.title = \"My Title\";                 //win.document.write('&lt;html&gt;&lt;body&gt;');                 //win.document.write(objbuilder);                 //win.document.write('&lt;/body&gt;&lt;/html&gt;');                 //layer = jQuery(win.document);               }         };          //PDF exporter - end          var DyamicExcelExportar = {             OnExportarClick: function () {                 $.ajax({                     url: \"https://localhost:44386/api/export/GetDynamicExcel\",                     type: 'GET',                     dataType: 'text',                     success: DyamicExcelExportar.DownloadExcel,                     failure: function (data) {                         alert('failur: ' + data.responseText);                     }, //End of AJAX failure function                     error: function (request) {                         alert('error: ' + request.responseText);                     } //End of AJAX error function                 });             },              DownloadExcel: function (data) {                 //alert('download excel');                 var createA = document.createElement('a');                 createA.setAttribute('id', 'linkDownload');                 createA.setAttribute('href', 'data:application/vnd.ms-excel;base64,' + data);                 document.body.appendChild(createA);                  createA.download = 'download_latest.xls';                 var selectorHref = document.getElementById('linkDownload');                 selectorHref.click();                 selectorHref.remove();             }         };      &lt;/script&gt; }   Step 7: Run Multiple projects     Run both ExportApi and ClientApp project   To run both multiple project right click on solution-&gt;Properties-&gt;Startup Project-&gt;Multiple Start up project, Select both project as start.   Click the button on button of index page and you will see the output.   Download source code  ","categories": ["ASP.NET","ASP.NET Core","Web API","C#"],
        "tags": ["csharp","aspnet","aspnetcore"],
        "url": "http://localhost:4000/export-file-using-aspnet-core-web-api/",
        "teaser":null},{
        "title": "Building a web application using React and asp.net core(Part 01)",
        "excerpt":"  React is an open-source, javascript library for building UI components. It is the most popular front end framework. It is maintained by facebook. It can be used for SPA or mobile application development. On the other hand, .net core is an open-source, cross-platform supported framework. Now a days, it is also most popular for software development. In this article, I will show you, how to create a simple application with CRUD operation using asp.net core web api and react. I will show a simple employee profile of HRM application. Let’s start.   Tools and Technology used     Visual Studio Code   ASP.NET Core Web Api   Visual C#   React   Step 1: Create a new application     Visual Studio Code -&gt; File -&gt; Open Folder   Go to View -&gt; Terminal   Type dotnet new react -o HRM in the terminal   Type cd HRM to enter into the HRM folder   In the application folder you will see another folder name ClientApp which is actually react application inside dotnet application.   Now run the application using donet run command   Step 2: Create model classes     Create a model class name Employee in Model folder as follows   Employee.cs      public class Employee     {         public int Id { get; set; }         public string Name { get; set; }         public string Designation {get; set;}         public string FathersName{get; set;}         public string MothersName{get; set;}         public DateTime DateOfBirth{get; set;}     }   Step 3: Install in memory database provider for entity framework core     Go to the terminal and type the following command  dotnet add package Microsoft.EntityFrameworkCore.InMemory   Step 4: Create a dbContext class     Create HRMContext Class in Db folder as follows   HRMContext.cs   using HRM.Models; using Microsoft.EntityFrameworkCore;  namespace HRM.Db {     public class HRMContext : DbContext     {         public HRMContext(DbContextOptions&lt;HRMContext&gt; options) : base(options)         {          }         public DbSet&lt;Employee&gt; Employees { get; set; }     } }      Configure in memory database in the ConfigureService method of Startup class as follows.   public void ConfigureServices(IServiceCollection services) {     services.AddDbContext&lt;HRMContext&gt;(opt =&gt; opt.UseInMemoryDatabase(\"HRMDB\")); }   Step 5: Add some seed data     Create a class name SeedDataGenerator in Db folder as follows   using System; using System.Linq; using HRM.Db; using HRM.Models; using Microsoft.EntityFrameworkCore; using Microsoft.Extensions.DependencyInjection;  public class SeedDataGenerator {     public static void Initialize(IServiceProvider serviceProvider)     {         using (var context = new HRMContext(             serviceProvider.GetRequiredService&lt;DbContextOptions&lt;HRMContext&gt;&gt;()))         {             // Check any employee exists              if (context.Employees.Any())             {                 return; // Data already exists no need to generate             }              context.Employees.AddRange(                 new Employee                 {                     Name = \"Md. Mahedee Hasan\",                     Designation = \"Head of Software Development\",                     FathersName = \"Yeasin Bhuiyan\",                     MothersName = \"Moriom Begum\",                     DateOfBirth = new DateTime(1984, 12, 19, 00, 00, 00)                 },                  new Employee                 {                     Name = \"Khaleda Islam\",                     Designation = \"Software Engineer\",                     FathersName = \"Shahidul Islam\",                     MothersName = \"Momtaz Begum\",                     DateOfBirth = new DateTime(1990, 10, 29, 00, 00, 00)                 },                                  new Employee                 {                     Name = \"Tahiya Hasan Arisha\",                     Designation = \"Jr. Software Engineer\",                     FathersName = \"Md. Mahedee Hasan\",                     MothersName = \"Khaleda Islam\",                     DateOfBirth = new DateTime(2017, 09, 17, 00, 00, 00)                 }             );             context.SaveChanges();          }     } }      Call SeedDataGenerator from Program class to generate seed data as follows   using HRM.Db; using Microsoft.AspNetCore.Hosting; using Microsoft.Extensions.DependencyInjection; using Microsoft.Extensions.Hosting;  namespace HRM {     public class Program     {         public static void Main(string[] args)         {             //CreateHostBuilder(args).Build().Run();              // 1. Get the IHost which will host this application             var host = CreateHostBuilder(args).Build();              // 2. Find the service within the scope to use             using (var scope = host.Services.CreateScope())             {                 // 3. Get the instance of HRMContext in our service layer                 var services = scope.ServiceProvider;                 var context = services.GetRequiredService&lt;HRMContext&gt;();                  // 4. Call the SeedDataGenerator to generate seed data                 SeedDataGenerator.Initialize(services);               }              // Run the application              host.Run();         }          public static IHostBuilder CreateHostBuilder(string[] args) =&gt;             Host.CreateDefaultBuilder(args)                 .ConfigureWebHostDefaults(webBuilder =&gt;                 {                     webBuilder.UseStartup&lt;Startup&gt;();                 });     } }    Step 6: Create IRepository and Repository class in the Repository folder as follows   IEmployeeRepository.cs    using System.Collections.Generic; using System.Threading.Tasks; using HRM.Models;  namespace HRM.Repository {     public interface IEmployeeRepository     {         public Task&lt;IEnumerable&lt;Employee&gt;&gt; SelectAllEmployees();         public Task&lt;Employee&gt; SelectEmployee(int id);         public Task&lt;string&gt; UpdateEmployee(int id, Employee employee);         public Task&lt;string&gt; SaveEmployee(Employee employee);         public Task&lt;string&gt; DeleteEmployee(int id);     } }     EmployeeRepository.cs   using System; using System.Collections.Generic; using System.Linq; using System.Threading.Tasks; using HRM.Db; using HRM.Models; using Microsoft.EntityFrameworkCore;  namespace HRM.Repository {     public class EmployeeRepository : IEmployeeRepository     {         private readonly HRMContext _context;          public EmployeeRepository(HRMContext context)         {             _context = context;         }          public async Task&lt;IEnumerable&lt;Employee&gt;&gt; SelectAllEmployees()         {             try             {                 var allemployess = _context.Employees.ToListAsync();                 return await allemployess;             }             catch (Exception exp)             {                 throw (exp);             }         }          public async Task&lt;Employee&gt; SelectEmployee(int id)         {             try             {                 var employee = _context.Employees.FindAsync(id);                 return await employee;             }             catch (Exception exp)             {                 throw (exp);             }         }          public async Task&lt;string&gt; UpdateEmployee(int id, Employee employee)         {             if (id != employee.Id)             {                 return \"Cannot be updated!\";             }              _context.Entry(employee).State = EntityState.Modified;              try             {                 await _context.SaveChangesAsync();                 return \"Data updated successfully!\";             }             catch (DbUpdateConcurrencyException exp)             {                 if (!EmployeeExists(id))                 {                     return \"Data not found!\";                 }                 else                 {                     throw (exp);                 }             }         }          public async Task&lt;string&gt; SaveEmployee(Employee employee)         {             _context.Employees.Add(employee);             try             {                 await _context.SaveChangesAsync();                 return \"Data saved successfully!\";             }             catch (Exception exp)             {                 throw (exp);             }         }          public async Task&lt;string&gt; DeleteEmployee(int id)         {             var employee = await _context.Employees.FindAsync(id);             if (employee == null)             {                 return \"Data not found!\";             }              _context.Employees.Remove(employee);             await _context.SaveChangesAsync();              return \"Data deleted successfully!\";         }          private bool EmployeeExists(int id)         {             return _context.Employees.Any(e =&gt; e.Id == id);         }      } }    Step 7: Create IEmployeeService and EmployeeService class in the Services folder as follows   IEmployeeService.cs  using System.Collections.Generic; using System.Threading.Tasks; using HRM.Models;  namespace HRM.Services {     public interface IEmployeeService     {         public Task&lt;IEnumerable&lt;Employee&gt;&gt; GetEmployees();         public Task&lt;Employee&gt; GetEmployee(int id);         public Task&lt;string&gt; EditEmployee(int id, Employee employee);         public Task&lt;string&gt; AddEmployee(Employee employee);         public Task&lt;string&gt; RemoveEmployee(int id);      } }    EmployeeService.cs   using System; using System.Collections.Generic; using System.Threading.Tasks; using HRM.Models; using HRM.Repository;  namespace HRM.Services {     public class EmployeeService : IEmployeeService     {         IEmployeeRepository _employeeRepository;         public EmployeeService(IEmployeeRepository repository)         {             _employeeRepository = repository;         }          public async Task&lt;IEnumerable&lt;Employee&gt;&gt; GetEmployees()         {             try             {                 return await _employeeRepository.SelectAllEmployees();             }             catch(Exception exp)             {                 throw (exp);             }         }          public async Task&lt;Employee&gt; GetEmployee(int id)         {             try             {                 return await _employeeRepository.SelectEmployee(id);             }             catch(Exception exp)             {                 throw(exp);             }         }          public async Task&lt;string&gt; EditEmployee(int id, Employee employee)         {             try             {                 return await _employeeRepository.UpdateEmployee(id, employee);             }             catch(Exception exp)             {                 throw(exp);             }         }          public async Task&lt;string&gt; AddEmployee(Employee employee)         {             try             {                 return await _employeeRepository.SaveEmployee(employee);             }             catch(Exception exp)             {                 throw(exp);             }         }          public async Task&lt;string&gt; RemoveEmployee(int id)         {             try             {                 return await _employeeRepository.DeleteEmployee(id);             }             catch(Exception exp)             {                 throw(exp);             }         }      } }   Step 7: Register interfaces and corresponding concrete class in the ConfigureServic method   public void ConfigureServices(IServiceCollection services) {     services.AddDbContext&lt;HRMContext&gt;(opt =&gt; opt.UseInMemoryDatabase(\"HRMDB\"));           services.AddControllersWithViews();      // In production, the React files will be served from this directory     services.AddSpaStaticFiles(configuration =&gt;     {         configuration.RootPath = \"ClientApp/build\";     });      //Register      services.AddScoped&lt;IEmployeeRepository, EmployeeRepository&gt;();     services.AddScoped&lt;IEmployeeService, EmployeeService&gt;(); }   Step 8: Add controller     Add a controller class name - EmployeesController in Controllers folder as follows.   EmployeesController.cs   using System; using System.Collections.Generic; using System.Threading.Tasks; using HRM.Db; using HRM.Models; using HRM.Services; using Microsoft.AspNetCore.Mvc; using Microsoft.EntityFrameworkCore;  [Route(\"api/[controller]\")] public class EmployeesController : Controller {      private readonly IEmployeeService _employeeService;      public EmployeesController(IEmployeeService employeeService)     {         _employeeService = employeeService;     }      [HttpGet(\"[action]\")]     public async Task&lt;ActionResult&lt;IEnumerable&lt;Employee&gt;&gt;&gt; GetEmployees()     {         try         {              var allemployess = await _employeeService.GetEmployees();              return Ok(allemployess);         }         catch(Exception exp)         {             return BadRequest(exp.Message);         }         //return await _context.Employees.ToListAsync();     }           [HttpGet(\"Employee/{id}\")]     public async Task&lt;ActionResult&lt;Employee&gt;&gt; GetEmployeeById(int id)     {         try         {             var employee = await _employeeService.GetEmployee(id);             return Ok(employee);         }         catch(Exception exp)         {             return BadRequest(exp.Message);         }     }      [HttpPost(\"AddEmployee\")]     public async Task&lt;ActionResult&gt; AddEmployee([FromBody]Employee employee)     {         try         {             string result = string.Empty;             if(employee != null)             {                 result = await _employeeService.AddEmployee(employee);             }             return Ok(result);         }         catch(Exception exp)         {             return BadRequest(exp.Message);             //         }     }      [HttpPut(\"EditEmployee/{id}\")]     public async Task&lt;ActionResult&gt; EditEmployee(int id, [FromBody]Employee employee)     {         try         {             string result = string.Empty;             result = await _employeeService.EditEmployee(id, employee);             return Ok(result);         }         catch(Exception exp)         {             return BadRequest(exp.Message);         }     }      [HttpDelete(\"DeleteEmployee/{id}\")]     public async Task&lt;ActionResult&gt; DeleteEmployee(int id)     {         try         {             string result = string.Empty;             result = await _employeeService.RemoveEmployee(id);             return Ok(result);         }         catch(Exception exp)         {             return BadRequest(exp.Message);         }     }  }   Step 9: Test the application using postman     Go to terminal and type dotnet run to run the application   Test api end point using postman as follows.   ","categories": ["ASP.NET","ASP.NET Core","C#","React"],
        "tags": ["csharp","aspnet","react"],
        "url": "http://localhost:4000/building-a-web-application-using-react-and-asp.net-core-part-01/",
        "teaser":null},{
        "title": "Building a web application using React and asp.net core(Part 02)",
        "excerpt":"  In the previous article, I have shown you how to create a back end application using asp.net core web api. I have created some api end points for employee profile. In this article, I will design react pages, connect with api end points and perform CRUD operation using react.   Step 1: Install axios to make http request     Go to terminal -&gt; go to the directory -&gt; ClientApp   Run the command npm install axios --save   Step 2: Write class components     Create a “Employee” folder in src-&gt;components.   Now create List, Create, Delete and Edit componets in the employee folder as follows   Employee.jsx   import React, {Component} from 'react'; import axios from 'axios';  // export keyword is a new feature in ES6 let export your functions ,  // variables so you can get access to them in other js files  export class Employees extends Component {     constructor(props){         super(props);          this.OnEmployeeEdit = this.OnEmployeeEdit.bind(this);         this.OnEmployeeDelete = this.OnEmployeeDelete.bind(this);         this.onEmployeeCreate = this.onEmployeeCreate.bind(this);          this.state = {             employees: [],             loading: true,             failed: false,             error: ''         }     }      /*Lifecycle Method: The componentDidMount() method runs after      the component output has been rendered to the DOM.*/      componentDidMount(){         this.populateEmployeesData();     }      // Event handler for create button     onEmployeeCreate()     {         const {history} = this.props;         history.push('/create');     }      // Event handler for edit button     OnEmployeeEdit(id){         const {history} = this.props;         history.push('/edit/'+id);     }      // Event handler for delete button     OnEmployeeDelete(id){         const {history} = this.props;         history.push('/delete/'+id);     }      populateEmployeesData(){         axios.get(\"api/Employees/GetEmployees\").then(result =&gt; {             const response = result.data;             this.setState({employees: response, loading: false, error: \"\"});         }).catch(error =&gt; {             this.setState({employees: [], loading: false, failed: true, error: \"Employess could not be loaded!\"});         });     }      renderAllEmployeeTable(employees){         return(             &lt;table className=\"table table-striped\"&gt;                 &lt;thead&gt;                     &lt;tr&gt;                         &lt;th&gt;Name&lt;/th&gt;                         &lt;th&gt;Designation&lt;/th&gt;                         &lt;th&gt;Father's Name&lt;/th&gt;                         &lt;th&gt;Mother's Name&lt;/th&gt;                         &lt;th&gt;Date of Birth&lt;/th&gt;                         &lt;th&gt;Actions&lt;/th&gt;                     &lt;/tr&gt;                 &lt;/thead&gt;                 &lt;tbody&gt;                     {                         employees.map(employee =&gt; (                             &lt;tr key={employee.id}&gt;                                 &lt;td&gt;{employee.name}&lt;/td&gt;                                 &lt;td&gt;{employee.designation}&lt;/td&gt;                                 &lt;td&gt;{employee.fathersName}&lt;/td&gt;                                 &lt;td&gt;{employee.mothersName}&lt;/td&gt;                                 &lt;td&gt;{ new Date(employee.dateOfBirth).toISOString().slice(0,10)}&lt;/td&gt;                                 &lt;td&gt;&lt;button onClick={()=&gt; this.OnEmployeeEdit(employee.id)}  className= \"btn btn-success\"&gt;Edit&lt;/button&gt; ||                                  &lt;button onClick={()=&gt; this.OnEmployeeDelete(employee.id)} className= \"btn btn-danger\"&gt;Delete&lt;/button&gt;&lt;/td&gt;                             &lt;/tr&gt;                         ))                     }                 &lt;/tbody&gt;             &lt;/table&gt;         );     }      render(){          let content = this.state.loading ? (             &lt;p&gt;                 &lt;em&gt;Loading...&lt;/em&gt;             &lt;/p&gt;         ):(             this.renderAllEmployeeTable(this.state.employees)         )          return(             &lt;div&gt;                 &lt;h2&gt;Employee&lt;/h2&gt;                 &lt;button onClick={()=&gt; this.onEmployeeCreate()} className=\"btn btn-primary\"&gt;Create&lt;/button&gt;                 {content}             &lt;/div&gt;         );     }  }   Create.jsx  import React, { Component } from \"react\"; import axios from \"axios\";  export class Create extends Component{      constructor(props){         super(props);          this.onChangeName = this.onChangeName.bind(this);         this.onChangeDesignation = this.onChangeDesignation.bind(this);         this.onChangeFathersName = this.onChangeFathersName.bind(this);         this.onChangeMothersName = this.onChangeMothersName.bind(this);         this.onChangeDOB = this.onChangeDOB.bind(this);         this.onSubmit = this.onSubmit.bind(this);           this.state = {             name: '',             designation: '',             fathersName: '',             mothersName: '',             //This is date time object             dateOfBirth: null          }     }      onChangeName(e){         this.setState({             name: e.target.value         })     }      onChangeDesignation(e){         this.setState({             designation: e.target.value         })     }      onChangeFathersName(e){         this.setState({             fathersName: e.target.value         })      }      onChangeMothersName(e){         this.setState({             mothersName: e.target.value         })      }      onChangeDOB(e){         this.setState({             dateOfBirth: e.target.value         })      }      onSubmit(e){         e.preventDefault();         const {history} = this.props;          let employeeObj = {             name: this.state.name,             designation: this.state.designation,             fathersName: this.state.fathersName,             mothersName: this.state.mothersName,             dateOfBirth: this.state.dateOfBirth         }          axios.post(\"api/Employees/AddEmployee\", employeeObj).then(result =&gt; {             history.push('/employees');         })     }      render(){         return(             &lt;div className=\"row\"&gt;                 &lt;div className=\"col-md-4\"&gt;                 &lt;h3&gt;Add new employee&lt;/h3&gt;                 &lt;form onSubmit={this.onSubmit}&gt;                     &lt;div className=\"form-group\"&gt;                         &lt;label className=\"control-label\"&gt;Name: &lt;/label&gt;                         &lt;input className=\"form-control\" type=\"text\" value = {this.state.name} onChange={this.onChangeName}&gt;&lt;/input&gt;                     &lt;/div&gt;                      &lt;div className=\"form-group\"&gt;                         &lt;label className=\"control-label\"&gt;Designation: &lt;/label&gt;                        &lt;input className=\"form-control\" type=\"text\" value = {this.state.designation} onChange={this.onChangeDesignation}&gt;&lt;/input&gt;                     &lt;/div&gt;                      &lt;div className=\"form-group\"&gt;                         &lt;label className=\"control-label\"&gt;Father's Name: &lt;/label&gt;                         &lt;input className=\"form-control\" type=\"text\" value = {this.state.fathersName} onChange={this.onChangeFathersName}&gt;&lt;/input&gt;                     &lt;/div&gt;                      &lt;div className=\"form-group\"&gt;                         &lt;label className=\"control-label\"&gt;Mother's Name: &lt;/label&gt;                         &lt;input className=\"form-control\" type=\"text\" value = {this.state.mothersName} onChange={this.onChangeMothersName}&gt;&lt;/input&gt;                     &lt;/div&gt;                      &lt;div className=\"form-group\"&gt;                         &lt;label className=\"control-label\"&gt;Date of Birth: &lt;/label&gt;                         &lt;input className=\"form-control\" type=\"date\" value = {this.state.dateOfBirth} onChange={this.onChangeDOB}&gt;&lt;/input&gt;                     &lt;/div&gt;                      &lt;div className=\"form-group\"&gt;                         &lt;input type=\"submit\" value = \"Add Employee\" className=\"btn btn-primary\"&gt;&lt;/input&gt;                     &lt;/div&gt;                  &lt;/form&gt;                  &lt;/div&gt;             &lt;/div&gt;         )     }  }    _Edit.jsx  import axios from \"axios\"; import React, { Component } from \"react\";  export class Edit extends Component {     constructor(props) {         super(props);          this.onChangeName = this.onChangeName.bind(this);         this.onChangeDesignation = this.onChangeDesignation.bind(this);         this.onChangeFathersName = this.onChangeFathersName.bind(this);         this.onChangeMothersName = this.onChangeMothersName.bind(this);         this.onChangeDOB = this.onChangeDOB.bind(this);         this.onSubmit = this.onSubmit.bind(this);          this.state = {             id : '',             name: '',             designation: '',             fathersName: '',             mothersName: '',             //This is date time object             dateOfBirth: null          }     }      componentDidMount(){         const {id} = this.props.match.params;         axios.get(\"api/Employees/Employee/\" + id).then(employee =&gt;{             const response = employee.data;             this.setState({                 id : response.id,                 name: response.name,                 designation: response.designation,                 fathersName: response.fathersName,                 mothersName: response.mothersName,                 dateOfBirth: new Date(response.dateOfBirth).toISOString().slice(0,10)             })         })         //alert(id);     }      onChangeName(e) {         this.setState({             name: e.target.value         });     }      onChangeDesignation(e) {         this.setState({             designation: e.target.value         });     }      onChangeFathersName(e) {         this.setState({             fathersName: e.target.value         });      }      onChangeMothersName(e) {         this.setState({             mothersName: e.target.value         });      }      onChangeDOB(e) {         this.setState({             dateOfBirth: e.target.value         });     }       onUpdateCancel(){         const {history} = this.props;         history.push('/employees');     }      onSubmit(e){                 e.preventDefault();         const {history} = this.props;         const {id} = this.props.match.params;         let employeeObj = {             id: this.state.id,             name: this.state.name,             designation: this.state.designation,             fathersName: this.state.fathersName,             mothersName: this.state.mothersName,             dateOfBirth: new Date(this.state.dateOfBirth).toISOString()         }          axios.put(\"api/Employees/EditEmployee/\"+id, employeeObj).then(result =&gt; {             history.push('/employees');         })     }      render() {         return (             &lt;div className=\"row\"&gt;                 &lt;div className=\"col-md-4\"&gt;                     &lt;h3&gt;Edit Employee&lt;/h3&gt;                     &lt;form onSubmit={this.onSubmit}&gt;                         &lt;div className=\"form-group\"&gt;                             &lt;label className=\"control-label\"&gt;Name: &lt;/label&gt;                             &lt;input className=\"form-control\" type=\"text\" value={this.state.name} onChange={this.onChangeName}&gt;&lt;/input&gt;                         &lt;/div&gt;                          &lt;div className=\"form-group\"&gt;                             &lt;label className=\"control-label\"&gt;Designation: &lt;/label&gt;                             &lt;input className=\"form-control\" type=\"text\" value={this.state.designation} onChange={this.onChangeDesignation}&gt;&lt;/input&gt;                         &lt;/div&gt;                          &lt;div className=\"form-group\"&gt;                             &lt;label className=\"control-label\"&gt;Father's Name: &lt;/label&gt;                             &lt;input className=\"form-control\" type=\"text\" value={this.state.fathersName} onChange={this.onChangeFathersName}&gt;&lt;/input&gt;                         &lt;/div&gt;                          &lt;div className=\"form-group\"&gt;                             &lt;label className=\"control-label\"&gt;Mother's Name: &lt;/label&gt;                             &lt;input className=\"form-control\" type=\"text\" value={this.state.mothersName} onChange={this.onChangeMothersName}&gt;&lt;/input&gt;                         &lt;/div&gt;                          &lt;div className=\"form-group\"&gt;                             &lt;label className=\"control-label\"&gt;Date of Birth: &lt;/label&gt;                             &lt;input className=\"form-control\" type=\"date\" value={this.state.dateOfBirth} onChange={this.onChangeDOB}&gt;&lt;/input&gt;                         &lt;/div&gt;                          &lt;div className=\"form-group\"&gt;                             &lt;button onClick={this.onUpdateCancel} className=\"btn btn-default\"&gt;Cancel&lt;/button&gt;                             &lt;input type=\"submit\" value=\"Edit\" className=\"btn btn-primary\"&gt;&lt;/input&gt;                         &lt;/div&gt;                      &lt;/form&gt;                  &lt;/div&gt;             &lt;/div&gt;         )     } }   Delete.jsx  import axios from \"axios\"; import React, { Component } from \"react\";  export class Delete extends Component{     constructor(props){         super(props);          this.onCancel = this.onCancel.bind(this);         this.onConfirmation = this.onConfirmation.bind(this);          this.state = {             name: '',             designation: '',             fathersName: '',             mothersName: '',             dateOfBirth: null         }     }      componentDidMount(){         const {id} = this.props.match.params;         axios.get(\"api/Employees/Employee/\" + id).then(employee =&gt;{             const response = employee.data;             this.setState({                 id : response.id,                 name: response.name,                 designation: response.designation,                 fathersName: response.fathersName,                 mothersName: response.mothersName,                 dateOfBirth: new Date(response.dateOfBirth).toISOString().slice(0,10)             })         })     }      onCancel() {         const { history } = this.props;         history.push('/employees');     }      onConfirmation(e){         e.preventDefault();          const {id} = this.props.match.params;         const {history} = this.props;                  axios.delete(\"api/Employees/DeleteEmployee/\" + id).then(result =&gt; {             history.push('/employees');         })      }        render(){         return(             &lt;div&gt;                 &lt;h2&gt;Delete&lt;/h2&gt;                 &lt;h3&gt;Are you sure you want to delete this?&lt;/h3&gt;                 &lt;div&gt;                 &lt;h4&gt;Employee&lt;/h4&gt;                     &lt;dl class=\"row\"&gt;                         &lt;dt class=\"col-sm-2\"&gt;                             Name:                         &lt;/dt&gt;                         &lt;dd class=\"col-sm-10\"&gt;                             {this.state.name}                         &lt;/dd&gt;                         &lt;dt class=\"col-sm-2\"&gt;                             Designation:                         &lt;/dt&gt;                         &lt;dd class=\"col-sm-10\"&gt;                             {this.state.designation}                         &lt;/dd&gt;                         &lt;dt class=\"col-sm-2\"&gt;                             Father's Name:                         &lt;/dt&gt;                         &lt;dd class=\"col-sm-10\"&gt;                             {this.state.fathersName}                         &lt;/dd&gt;                         &lt;dt class=\"col-sm-2\"&gt;                             Mother's Name:                         &lt;/dt&gt;                         &lt;dd class=\"col-sm-10\"&gt;                             {this.state.mothersName}                         &lt;/dd&gt;                          &lt;dt class=\"col-sm-2\"&gt;                             Date of Birth:                         &lt;/dt&gt;                         &lt;dd class=\"col-sm-10\"&gt;                             {this.state.dateOfBirth}                         &lt;/dd&gt;                      &lt;/dl&gt;                      &lt;form onSubmit={this.onConfirmation}&gt;                         &lt;input type=\"hidden\" asp-for=\"Id\" /&gt;                         &lt;button type=\"submit\" class=\"btn btn-danger\"&gt;Delete&lt;/button&gt; |                         &lt;button onClick={this.onCancel} className=\"btn btn-primary\"&gt;Back to List&lt;/button&gt;                     &lt;/form&gt;                 &lt;/div&gt;             &lt;/div&gt;         )     } }  Step 3: Add Route in App.js     Modify App.js as follows   Here I have define route for employees, create, edit, delete   App.js  import React, { Component } from 'react'; import { Route } from 'react-router'; import { Layout } from './components/Layout'; import { Home } from './components/Home'; import { FetchData } from './components/FetchData'; import { Counter } from './components/Counter';  import './custom.css'  import {Employees} from './components/Employee/Employees'; import { Create } from './components/Employee/Create'; import { Edit } from './components/Employee/Edit'; import { Delete } from './components/Employee/Delete';  export default class App extends Component {   static displayName = App.name;    render () {     return (       &lt;Layout&gt;         &lt;Route exact path='/' component={Home} /&gt;         &lt;Route path='/employees' component={Employees} /&gt;         &lt;Route path='/create' component = {Create}&gt;&lt;/Route&gt;         &lt;Route path='/Edit/:id' component = {Edit}&gt;&lt;/Route&gt;         &lt;Route path='/Delete/:id' component = {Delete}&gt;&lt;/Route&gt;         &lt;Route path='/counter' component={Counter} /&gt;         &lt;Route path='/fetch-data' component={FetchData} /&gt;       &lt;/Layout&gt;     );   } }   Step 4: Add Employee in the menu     Add Employee link in the menu   Change NavMenu.js as follows   NavMenu.js  import React, { Component } from 'react'; import { Collapse, Container, Navbar, NavbarBrand, NavbarToggler, NavItem, NavLink } from 'reactstrap'; import { Link } from 'react-router-dom'; import './NavMenu.css';  export class NavMenu extends Component {   static displayName = NavMenu.name;    constructor (props) {     super(props);      this.toggleNavbar = this.toggleNavbar.bind(this);     this.state = {       collapsed: true     };   }    toggleNavbar () {     this.setState({       collapsed: !this.state.collapsed     });   }    render () {     return (       &lt;header&gt;         &lt;Navbar className=\"navbar-expand-sm navbar-toggleable-sm ng-white border-bottom box-shadow mb-3\" light&gt;           &lt;Container&gt;             &lt;NavbarBrand tag={Link} to=\"/\"&gt;HRM&lt;/NavbarBrand&gt;             &lt;NavbarToggler onClick={this.toggleNavbar} className=\"mr-2\" /&gt;             &lt;Collapse className=\"d-sm-inline-flex flex-sm-row-reverse\" isOpen={!this.state.collapsed} navbar&gt;               &lt;ul className=\"navbar-nav flex-grow\"&gt;                 &lt;NavItem&gt;                   &lt;NavLink tag={Link} className=\"text-dark\" to=\"/\"&gt;Home&lt;/NavLink&gt;                 &lt;/NavItem&gt;                 &lt;NavItem&gt;                   &lt;NavLink tag={Link} className=\"text-dark\" to=\"/employees\"&gt;Employees&lt;/NavLink&gt;                 &lt;/NavItem&gt;                 &lt;NavItem&gt;                   &lt;NavLink tag={Link} className=\"text-dark\" to=\"/counter\"&gt;Counter&lt;/NavLink&gt;                 &lt;/NavItem&gt;                 &lt;NavItem&gt;                   &lt;NavLink tag={Link} className=\"text-dark\" to=\"/fetch-data\"&gt;Fetch data&lt;/NavLink&gt;                 &lt;/NavItem&gt;               &lt;/ul&gt;             &lt;/Collapse&gt;           &lt;/Container&gt;         &lt;/Navbar&gt;       &lt;/header&gt;     );   } }    Step 5: Run and test the application     Go to terminal and type dotnet run to run the application   Now view, insert, update and delete employee information.   Download Source Code  ","categories": ["ASP.NET","ASP.NET Core","C#","React"],
        "tags": ["csharp","aspnet","react"],
        "url": "http://localhost:4000/building-a-web-application-using-react-and-asp.net-core-part-02/",
        "teaser":null},{
        "title": "Maintain DbContext class in a seperate project using Entity Framework core",
        "excerpt":"  Problem Statement  Generally we keep DbContext class in Web api or MVC project where Startup class is present. Recently, I have created a project based on clean architecture. In this project, my DbContext class is in another project name Ordering.Infrastructure rather than Ordering.API. My Project structure as like –           - Ecommerce             - Ordering.API             - Ordering.Application             - Ordering.Core             - Ordering.Infrastructure   In this application, Startup class is in Ordering.API project which is an API project and DbContext class is in Ordering.Infrastructure class as mentioned earlier. I run the following script in Ordering.API project and got the following error.   PM&gt; Add-Migration initial Build started... Build succeeded. Your target project 'Ordering.API' doesn't match your migrations assembly 'Ordering.Infrastructure'. Either change your target project or change your migrations assembly. Change your migrations assembly by using DbContextOptionsBuilder. E.g. options.UseSqlServer(connection, b =&gt; b.MigrationsAssembly(\"Ordering.API\")). By default, the migrations assembly is the assembly containing the DbContext. Change your target project to the migrations project by using the Package Manager Console's Default project drop-down list, or by executing \"dotnet ef\" from the directory containing the migrations project.   Solution  Step 1: Install the following nuget packages in Ordering.Infrastructure where DbContext class is present.   Install-Package Microsoft.EntityFrameworkCore Install-Package Microsoft.EntityFrameworkCore.Design Install-Package Microsoft.EntityFrameworkCore.SqlServer Install-Package Microsoft.EntityFrameworkCore.Tools   Step 2: Run the migration command in Ordering.Infrastructure project. Before running the following command, make sure your Ordering.Infrastructe is selected as your default project.   PM&gt; Add-Migration initial PM&gt; Update-Database -Verbose    ","categories": ["ASP.NET Core","C#","EF","Troubleshooting"],
        "tags": ["csharp","aspnetcore","ef","troubleshooting"],
        "url": "http://localhost:4000/maintain-dbcontext-class-in-a-seperate-project/",
        "teaser":null},{
        "title": "Create a sentiment analysis app using ML.NET",
        "excerpt":"  Application overview  ML.NET is a free, open source and cross platform machine learning framework. It is easily integrated with .NET development environment. ML.NET allows you to train, build, and ship custom machine learning models using C# and some other languages. Here a simple sentiment analysis application will be created using ML.NET and C#. Let’s start.   Tools and Technology used  The following tools and technologies has been used for this application     Visual Studio 2019   Visual C#   Step 1: Create a console application     Create a new project using visual studio 2019   Choose the C# Console App (.NET Core) project template   Change the project and solution name as “SentimentAnalysis”   Click create button to create the project.   Step 2: Enable the ML.NET Model Builder preview feature Press right button on the project file -&gt; Add -&gt; Machine learning You will see the following pop up message. Enable it.   Would you like to enable the ML.NET Model Builder preview feature so you can add Machine Learning to your .NET projects? Enable   Step 3: Select model builder scenario     Press right button on the project -&gt; Add -&gt; Machine Learning   Select Text classification   Keep the Local Environment and click on data (to move data step)     Step 4: Download and add data     Download the Sentiment Labelled Sentences datasets from the UCI Machine Learning Repository   Unzip the file and keep the “yelp_labelled.txt” file to Data folder   The first column of this file represents the comments and the second column represent the sentiment of the text (0 for negative and 1 for positive)   Add data     In this form, select File as the input data source type   Browse file yelp_labelled.txt. Once you are selected, you will see the preview of the data.   Select “col1” for Column to predict (Label) as the image below   Now click Train button to move to the train step      Step 5: Train your model     Time to train set automatically based on data. But you can manually set it.   Click start training button. You will see the following point the screen.   Best accuracy - Percentage of accuracy of the current model   Best model - This shows you which algorithm performed the best during Model Builder’s exploration.  Training time - Total times taken to run training Models explored (total) - This shows you the total number of models explored by Model Builder in the given amount of time.   Source : Microsoft docs      Now click Evaluate to move to the evaluate step   Step 6: Evaluate your model     Type a sentence in Try your model section.   I Typed “This is a fantastic place” and it shows positive is 98% and negative 2%      Step 7: Add project in to the solution     Click Add Project Button   Model builder will add machine learning model and the project for training   ModelBuilder.cs in the console application is used to build/train the model   Program.cs in the console application is used to test run the model   ModelInput.cs and ModelOutput.cs in Model library is the input and output class for the model training.   ConsumeModel.cs in Model library contains the method for model consumption   Solution structure will be like as follows      Step 8: Consume your model     Set SentimentAnalysisML.ConsoleApp as startup project   Modify a bit of Program.cs in SentimentAnalysisML.ConsoleApp as follows       class Program     {         static void Main(string[] args)         {             // Create single instance of sample data from first line of dataset for model input             ModelInput sampleData = new ModelInput()             {                 Col0 = @\"The food of Hotel Sonargaon was awesome\",             };              // Make a single prediction on the sample data and print results             var predictionResult = ConsumeModel.Predict(sampleData);              Console.WriteLine(\"Using model to make single prediction -- Comparing actual Col1 with predicted Col1 from sample data...\\n\\n\");             Console.WriteLine($\"Col0: {sampleData.Col0}\");             Console.WriteLine($\"\\n\\nPredicted Col1 value {predictionResult.Prediction} \\nPredicted Col1 scores: [{String.Join(\",\", predictionResult.Score)}]\\n\");              string sentiment = predictionResult.Prediction == \"1\" ? \"Positive\" : \"Negative\";             Console.WriteLine($\"Sentiment: {sentiment} \\n\");              Console.WriteLine(\"=============== End of process, hit any key to finish ===============\");             Console.ReadKey();         }     }    Step 9: Build and run the application Now build and run the application. You will see the sentiment output of the sentence “The food of Hotel Sonargaon was awesome”.   Source Code    ","categories": ["AI","Machine Learning","C#"],
        "tags": ["ai","machinelearning","csharp"],
        "url": "http://localhost:4000/create-a-sentiment-analysis-app-using-ml-dot-net-for-future-test/",
        "teaser":null},{
        "title": "How to inject a DbContext instance into an IHostedService",
        "excerpt":"  Problem Statement   Few days back, I was working on a class which implemented IHostedService. I was working on asp.net core project. I tried to use DbContext class using constructor. But, it shows the following error -   Cannot consume scoped service 'Microsoft.EntityFrameworkCore.DbContextOptions' from singleton 'Microsoft.Extensions.Hosting.IHostedService'.  I tried it several way but I failed.   Solution  Step 1: I have injected IserviceScopeFactory and solve the problem as like below.   using Microsoft.Extensions.DependencyInjection; using Microsoft.Extensions.Hosting; using Newtonsoft.Json; using Ordering.API.Db; using Plain.RabbitMQ; using Shared.Models; using System.Collections.Generic; using System.Linq; using System.Threading; using System.Threading.Tasks;  namespace Ordering.API {     public class CatalogResponseListener : IHostedService     {         private ISubscriber _subscriber;         private readonly IServiceScopeFactory _scopeFactory;         public CatalogResponseListener(ISubscriber subscripber, IServiceScopeFactory scopeFactory)         {             this._subscriber = subscripber;             this._scopeFactory = scopeFactory;         }         public Task StartAsync(CancellationToken cancellationToken)         {             _subscriber.Subscribe(Subscribe);             return Task.CompletedTask;         }          private bool Subscribe(string message, IDictionary&lt;string, object&gt; header)         {             var response = JsonConvert.DeserializeObject&lt;CatalogResponse&gt;(message);              if(!response.IsSuccess)             {                 using (var scope = _scopeFactory.CreateScope())                 {                     var _orderingContext = scope.ServiceProvider.GetRequiredService&lt;OrderingContext&gt;();                     // Remove ordering item                     var orderItem = _orderingContext.OrderItems.Where(o =&gt; o.ProductId == response.CatalogId).FirstOrDefault();                     _orderingContext.OrderItems.Remove(orderItem);                     _orderingContext.SaveChanges();                 }             }             return true;         }          public Task StopAsync(CancellationToken cancellationToken)         {             return Task.CompletedTask;         }     } }     ","categories": ["ASP.NET Core","C#","Troubleshooting"],
        "tags": ["csharp","aspnetcore","troubleshooting"],
        "url": "http://localhost:4000/how-to-inject-a-dbcontext-instance-into-an-IHostedService/",
        "teaser":null},{
        "title": "Playing with dapper using asp.net core",
        "excerpt":"  Introduction  Dapper is mostly used, speedy and high performance ORM tools for Microsoft.NET platform. It is free and open source software. It is very easy to handle sql query using fewer lines of code. Here I will show you CRUD operation using inline query and stored procedure with an asp.net core web api project. So, let’s begin.   Tools and technologies used      Visual Studio 2019   SQL Server 2019   Dapper 2.0.90   ASP.NET Core Web API   Implementation   Step 1: Create database, table and stored procedure.     Create a databse in sql server name - OrderingDB   Run the following script to create table and stored procedure.   USE [OrderingDB] GO /****** Object:  Table [dbo].[Customers]    Script Date: 9/16/2021 11:44:55 AM ******/ SET ANSI_NULLS ON GO SET QUOTED_IDENTIFIER ON GO CREATE TABLE [dbo].[Customers]( \t[Id] [bigint] IDENTITY(1,1) NOT NULL, \t[FirstName] [nvarchar](max) NULL, \t[LastName] [nvarchar](max) NULL, \t[Email] [nvarchar](max) NULL, \t[ContactNumber] [nvarchar](max) NULL, \t[Address] [nvarchar](max) NULL,  CONSTRAINT [PK_Customers] PRIMARY KEY CLUSTERED  ( \t[Id] ASC )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY] ) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY] GO /****** Object:  StoredProcedure [dbo].[spGetCustomersByEmail]    Script Date: 9/16/2021 11:44:55 AM ******/ SET ANSI_NULLS ON GO SET QUOTED_IDENTIFIER ON GO -- EXEC dbo.[spGetCustomersByEmail] @Email = 'mahedee.hasan@gmail.com' CREATE PROCEDURE [dbo].[spGetCustomersByEmail] \t@Email Varchar(100) AS BEGIN \t-- SET NOCOUNT ON added to prevent extra result sets from \tSET NOCOUNT ON; \tSELECT * FROM Customers WHERE Email = @Email END GO    Step 2: Create an API project     Create an asp.net web api project name Ordering.API   Step 3: Install nuget packages     Install the following nuget packages in Ordering.API project.     Install-Package Dapper Install-Package Microsoft.Data.SqlClient           Step 4: Add connection string     Add connection string in appsettings.json appsettings.json   {   \"Logging\": {     \"LogLevel\": {       \"Default\": \"Information\",       \"Microsoft\": \"Warning\",       \"Microsoft.Hosting.Lifetime\": \"Information\"     }   },    \"ConnectionStrings\": {     \"DefaultConnection\": \"Data Source=localhost;Initial Catalog=OrderingDB;User ID=sa;Password=yourdbpassword\"   },    \"AllowedHosts\": \"*\" }    Step 5: Create Entity classes     Create BaseEntity and Customer entity class in Entities folder as follows.   BaseEntity.cs  using System;  namespace Ordering.API.Entities {     public abstract class BaseEntity     {         public Int64 Id { get; set; }     } }   Customer.cs   using System;  namespace Ordering.API.Entities {     public class Customer : BaseEntity     {         public string FirstName { get; set; }         public string LastName { get; set; }         public string Email { get; set; }         public string ContactNumber { get; set; }         public string Address { get; set; }     } }    Step 6: Create DbConnector and Repository classes     Create DbConnector class in Repositories folder to connect with database   DbConnector.cs   using Microsoft.Data.SqlClient; using Microsoft.Extensions.Configuration; using System.Data;  namespace Ordering.API.Repositories {     public class DbConnector     {         private readonly IConfiguration _configuration;          protected DbConnector(IConfiguration configuration)         {             _configuration = configuration;         }          protected IDbConnection CreateConnection()         {             return new SqlConnection(_configuration.GetConnectionString(\"DefaultConnection\"));         }     } }       Create Repository interfaces and concrete class in Repositories folder   IGenericRepository.cs   using System; using System.Collections.Generic; using System.Threading.Tasks;  namespace Ordering.API.Repositories {     public interface IGenericRepository&lt;T&gt;     {         Task&lt;List&lt;T&gt;&gt; GetAllAsync();         Task&lt;T&gt; GetByIdAsync(Int64 id);         Task&lt;int&gt; CreateAsync(T entity);         Task&lt;int&gt; UpdateAsync(T entity);         Task&lt;int&gt; DeleteAsync(T entity);     } }    ICustomerRepository.cs   using Ordering.API.Entities; using System.Collections.Generic; using System.Threading.Tasks;  namespace Ordering.API.Repositories {     public interface ICustomerRepository : IGenericRepository&lt;Customer&gt;     {         Task&lt;List&lt;Customer&gt;&gt; GetAllByEmailId(string email);     } }    CustomerRepository.cs   using Dapper; using Microsoft.Extensions.Configuration; using Ordering.API.Entities; using System; using System.Collections.Generic; using System.Data; using System.Linq; using System.Threading.Tasks;  namespace Ordering.API.Repositories {     public class CustomerRepository : DbConnector, ICustomerRepository     {         public CustomerRepository(IConfiguration configuration)             : base(configuration)         {          }          public async Task&lt;int&gt; CreateAsync(Customer entity)         {             try             {                 var query = \"INSERT INTO CUSTOMERS (FIRSTNAME, LASTNAME, EMAIL, CONTACTNUMBER, ADDRESS) \" +                     \"VALUES (@FIRSTNAME, @LASTNAME, @EMAIL, @CONTACTNUMBER, @ADDRESS)\";                  var parameters = new DynamicParameters();                 parameters.Add(\"FIRSTNAME\", entity.FirstName);                 parameters.Add(\"LASTNAME\", entity.LastName);                 parameters.Add(\"EMAIL\", entity.Email);                 parameters.Add(\"CONTACTNUMBER\", entity.ContactNumber);                 parameters.Add(\"ADDRESS\", entity.Address);                  using (var connection = CreateConnection())                 {                     return (await connection.ExecuteAsync(query, parameters));                 }             }             catch(Exception exp)             {                 throw new Exception(exp.Message, exp);             }         }          public async Task&lt;int&gt; DeleteAsync(Customer entity)         {             try             {                 var query = \"DELETE FROM CUSTOMERS WHERE Id = @Id\";                  var parameters = new DynamicParameters();                 parameters.Add(\"Id\", entity.Id, DbType.Int64);                  using (var connection = CreateConnection())                 {                     return (await connection.ExecuteAsync(query, parameters));                 }             }             catch(Exception exp)             {                 throw new Exception(exp.Message, exp);             }         }          public async Task&lt;List&lt;Customer&gt;&gt; GetAllAsync()         {             try             {                 var query = \"SELECT * FROM CUSTOMERS\";                 using (var connection = CreateConnection())                 {                     return (await connection.QueryAsync&lt;Customer&gt;(query)).ToList();                 }             }             catch(Exception exp)             {                 throw new Exception(exp.Message, exp);             }         }           public async Task&lt;List&lt;Customer&gt;&gt; GetAllByEmailId(string email)         {             try             {                 var procedure = \"spGetCustomersByEmail\";                 DynamicParameters parameters = new DynamicParameters();                 parameters.Add(\"@Email\", email);                 using (var connection = CreateConnection())                 {                     return (await connection.QueryAsync&lt;Customer&gt;(procedure, parameters, commandType: CommandType.StoredProcedure)).ToList();                 }              }             catch(Exception exp)             {                 throw new Exception(exp.Message, exp);             }         }          public async Task&lt;Customer&gt; GetByIdAsync(Int64 id)         {             try             {                 var query = \"SELECT * FROM CUSTOMERS WHERE Id = @Id\";                 var parameters = new DynamicParameters();                 parameters.Add(\"Id\", id, DbType.Int32);                  using (var connection = CreateConnection())                 {                     return (await connection.QueryFirstOrDefaultAsync&lt;Customer&gt;(query, parameters));                 }             }             catch(Exception exp)             {                 throw new Exception(exp.Message, exp);             }         }          public async Task&lt;int&gt; UpdateAsync(Customer entity)         {             try             {                 var query = \"UPDATE CUSTOMERS SET FIRSTNAME = @FIRSTNAME, LASTNAME = @LASTNAME, EMAIL = @EMAIL, CONTACTNUMBER = @CONTACTNUMBER, ADDRESS = @ADDRESS WHERE ID = @ID \";                 var parameters = new DynamicParameters();                 parameters.Add(\"FIRSTNAME\", entity.FirstName, DbType.String);                 parameters.Add(\"LASTNAME\", entity.LastName, DbType.String);                 parameters.Add(\"CONTACTNUMBER\", entity.ContactNumber, DbType.String);                 parameters.Add(\"ADDRESS\", entity.Address, DbType.String);                 parameters.Add(\"EMAIL\", entity.Email, DbType.String);                 parameters.Add(\"ID\", entity.Id, DbType.Int64);                  using (var connection = CreateConnection())                 {                     return (await connection.ExecuteAsync(query, parameters));                 }             }             catch(Exception exp)             {                 throw new Exception(exp.Message, exp);             }         }     } }   Step 7: Create Service class and interface      Create ICustomerService interface and CustomerService class in Services folder   ICustomerService.cs   using Ordering.API.Entities; using System; using System.Collections.Generic; using System.Threading.Tasks;  namespace Ordering.API.Services {     public interface ICustomerService     {         Task&lt;List&lt;Customer&gt;&gt; GetAllCustomer();         Task&lt;List&lt;Customer&gt;&gt; GetAllAsync();         Task&lt;Customer&gt; GetByIdAsync(Int64 id);         Task&lt;List&lt;Customer&gt;&gt; GetAllByEmailId(string email);         Task&lt;int&gt; CreateAsync(Customer entity);         Task&lt;int&gt; UpdateAsync(Customer entity);         Task&lt;int&gt; DeleteAsync(Customer entity);      } }   CustomerService.cs   using Ordering.API.Entities; using Ordering.API.Repositories; using System; using System.Collections.Generic; using System.Threading.Tasks;  namespace Ordering.API.Services {     public class CustomerService : ICustomerService     {         private readonly ICustomerRepository _customerRepository;          public CustomerService(ICustomerRepository customerRepository)         {             _customerRepository = customerRepository;         }          public async Task&lt;int&gt; CreateAsync(Customer entity)         {             return await _customerRepository.CreateAsync(entity);         }          public async Task&lt;int&gt; DeleteAsync(Customer entity)         {             return await _customerRepository.DeleteAsync(entity);         }          public async Task&lt;List&lt;Customer&gt;&gt; GetAllAsync()         {             return await _customerRepository.GetAllAsync();         }          public async Task&lt;List&lt;Customer&gt;&gt; GetAllByEmailId(string email)         {             return await _customerRepository.GetAllByEmailId(email);         }          public async Task&lt;List&lt;Customer&gt;&gt; GetAllCustomer()         {             return await _customerRepository.GetAllAsync();         }          public async Task&lt;Customer&gt; GetByIdAsync(Int64 id)         {             return await _customerRepository.GetByIdAsync(id);         }          public async Task&lt;int&gt; UpdateAsync(Customer entity)         {             return await _customerRepository.UpdateAsync(entity);         }     } }    Step 8: Create controller class      Create CustomerController in controllers folder   CustomerService.cs   using Ordering.API.Entities; using Ordering.API.Repositories; using System; using System.Collections.Generic; using System.Threading.Tasks;  namespace Ordering.API.Services {     public class CustomerService : ICustomerService     {         private readonly ICustomerRepository _customerRepository;          public CustomerService(ICustomerRepository customerRepository)         {             _customerRepository = customerRepository;         }          public async Task&lt;int&gt; CreateAsync(Customer entity)         {             return await _customerRepository.CreateAsync(entity);         }          public async Task&lt;int&gt; DeleteAsync(Customer entity)         {             return await _customerRepository.DeleteAsync(entity);         }          public async Task&lt;List&lt;Customer&gt;&gt; GetAllAsync()         {             return await _customerRepository.GetAllAsync();         }          public async Task&lt;List&lt;Customer&gt;&gt; GetAllByEmailId(string email)         {             return await _customerRepository.GetAllByEmailId(email);         }          public async Task&lt;List&lt;Customer&gt;&gt; GetAllCustomer()         {             return await _customerRepository.GetAllAsync();         }          public async Task&lt;Customer&gt; GetByIdAsync(Int64 id)         {             return await _customerRepository.GetByIdAsync(id);         }          public async Task&lt;int&gt; UpdateAsync(Customer entity)         {             return await _customerRepository.UpdateAsync(entity);         }     } }   Step 9: Now run the application. You will see the output in swagger. Try CRUD operation using swagger.   Source code  ","categories": ["ASP.NET Core","C#","Dapper","ORM"],
        "tags": ["csharp","aspnetcore","dapper","orm"],
        "url": "http://localhost:4000/playing-with-dapper-with-aspnet-core/",
        "teaser":null},{
        "title": "Getting started with Angular",
        "excerpt":"  Introduction  Angular is a TypeScript-based free and open-source web application framework. It is maintained by Google and open-source community individuals.   Getting started      Download and install Node.Js windows installer            You can check your installed node.js version using following command         node -v                  or          node --version                           Install Angular CLI            To install Angular CLI, open a windows terminal and run the following command          npm install -g @angular/cli                           Create an application            Run the following CLI command to create an application name my-project            ng new my-client-app                 The ng new command prompts you for several information. For simplicity just keep default or press enter.           Run application            Navigate to the workspace folder as follows          cd my-client-app                       Now run the following command to run application            ng serve -open           ng serve -o          Your application automatically run to http://localhost:4200/       For more information visit angular official site: https://angular.io/  ","categories": ["Angular","Javascript"],
        "tags": ["angular","javascript"],
        "url": "http://localhost:4000/getting-started-with-angular/",
        "teaser":null},{
        "title": "Distributed transaction using SAGA pattern, RabbitMQ and asp.net core",
        "excerpt":"Distributed transaction is one that spans multiple databases across the network while preserving ACID properties. It is very important in Microservices because of its distributed nature. To manage data consistency we may use SAGA design pattern. In this article, I will show you distributed transaction using SAGA pattern, RabbitMQ and asp.net core.   Saga Pattern   A saga is a sequence of local transactions. Each local transaction updates the local database and publishes a messages or event to message broker for updating next corresponding database. If next database transaction fails, a series of transactions will occur to undo the changes.   Saga is implemented in two ways -     Choreography   Orchestration   Choreography In choreography, participants exchange events without a centralized control.      Fig - Choreography saga (Collected)   Orchestration In orchestration, participants exchange events with a centralized control.      Fig - Orchestration saga (Collected)   Implementation of Choregraphy Pattern   Tools and technology used     Visual studio 2019   SQLite   ASP.NET Core   RabbitMQ   Step 1: Run docker container for RabbitMQ      Run the following command to run rabbitmq in a container   docker run -d --hostname host-rabbit --name ecommerce-rabbit -p 15672:15672 -p 5672:5672 rabbitmq:3-management   Step 2: Create two web api application     Create a solution name Ecommerece.sln   Create a web api application name - Catalog.API and add add it to the solution.   Create another web api application name - Order.API and add it to the solution.   Create a class library name - Shared and add it to the solution.   Step 3: Create Shared model classes     Create following two model classes in Shared-&gt;Models folder   OrderRequest.cs   namespace Shared.Models {     public class OrderRequest     {         public int OrderId { get; set; }         public int CatalogId { get; set; }         public int Units { get; set; }         public string Name { get; set; }     } }    CatalogResponse.cs   namespace Shared.Models {     public class CatalogResponse     {         public int OrderId { get; set; }         public int CatalogId { get; set; }         public bool IsSuccess { get; set; }     } }   Organize Ordering.API   Step 4: Install nuget packages in Ordering.API Project     Install following nuget packages in Catalog.API Project   Microsoft.EntityFrameworkCore Microsoft.EntityFrameworkCore.Sqlite Microsoft.EntityFrameworkCore.Tools Plain.RabbitMQ   Step 5: Create CatalogResponseListener class in Ordering.API project      Create CatalogResponseListener class in Ordering.API as follows   CatalogResponseListener.cs   using Microsoft.Extensions.DependencyInjection; using Microsoft.Extensions.Hosting; using Newtonsoft.Json; using Ordering.API.Db; using Plain.RabbitMQ; using Shared.Models; using System.Collections.Generic; using System.Linq; using System.Threading; using System.Threading.Tasks;  namespace Ordering.API {     public class CatalogResponseListener : IHostedService     {         private ISubscriber _subscriber;         private readonly IServiceScopeFactory _scopeFactory;         public CatalogResponseListener(ISubscriber subscripber, IServiceScopeFactory scopeFactory)         {             this._subscriber = subscripber;             this._scopeFactory = scopeFactory;         }         public Task StartAsync(CancellationToken cancellationToken)         {             _subscriber.Subscribe(Subscribe);             return Task.CompletedTask;         }          private bool Subscribe(string message, IDictionary&lt;string, object&gt; header)         {             var response = JsonConvert.DeserializeObject&lt;CatalogResponse&gt;(message);              if(!response.IsSuccess)             {                 using (var scope = _scopeFactory.CreateScope())                 {                     var _orderingContext = scope.ServiceProvider.GetRequiredService&lt;OrderingContext&gt;();                                          // If transaction is not successful, Remove ordering item                     var orderItem = _orderingContext.OrderItems.Where(o =&gt; o.ProductId == response.CatalogId &amp;&amp; o.OrderId == response.OrderId).FirstOrDefault();                     _orderingContext.OrderItems.Remove(orderItem);                     _orderingContext.SaveChanges();                 }             }             return true;         }          public Task StopAsync(CancellationToken cancellationToken)         {             return Task.CompletedTask;         }     } }    Step 6: Change connection string     Add connection string for SQLite in appsettings.json   {   \"Logging\": {     \"LogLevel\": {       \"Default\": \"Information\",       \"Microsoft\": \"Warning\",       \"Microsoft.Hosting.Lifetime\": \"Information\"     }   },   \"ConnectionStrings\": {     \"DefaultConnection\": \"Data Source=db/ordering.db\"   },    \"AllowedHosts\": \"*\" }    Step 7: Configure Database, listener and RabbitMQ     Configure SQLite, listener and RabbitMQ in Startup class   Startup.cs   using Microsoft.AspNetCore.Builder; using Microsoft.AspNetCore.Hosting; using Microsoft.EntityFrameworkCore; using Microsoft.Extensions.Configuration; using Microsoft.Extensions.DependencyInjection; using Microsoft.Extensions.Hosting; using Microsoft.OpenApi.Models; using Ordering.API.Db; using Plain.RabbitMQ; using RabbitMQ.Client;  namespace Ordering.API {     public class Startup     {         public Startup(IConfiguration configuration)         {             Configuration = configuration;         }          public IConfiguration Configuration { get; }          // This method gets called by the runtime. Use this method to add services to the container.         public void ConfigureServices(IServiceCollection services)         {              services.AddControllers();             services.AddSwaggerGen(c =&gt;             {                 c.SwaggerDoc(\"v1\", new OpenApiInfo { Title = \"Ordering.API\", Version = \"v1\" });             });              // Configure database             services.AddDbContext&lt;OrderingContext&gt;(options =&gt; options.UseSqlite(Configuration.GetConnectionString(\"DefaultConnection\")));               //Configure rabbitmq             services.AddSingleton&lt;IConnectionProvider&gt;(new ConnectionProvider(\"amqp://guest:guest@localhost:5672\"));              services.AddSingleton&lt;IPublisher&gt;(p =&gt; new Publisher(p.GetService&lt;IConnectionProvider&gt;(),                 \"order_exchange\", // exchange name                 ExchangeType.Topic));              services.AddSingleton&lt;ISubscriber&gt;(s =&gt; new Subscriber(s.GetService&lt;IConnectionProvider&gt;(),                 \"catalog_exchange\", // Exchange name                 \"catalog_response_queue\", //queue name                 \"catalog_response_routingkey\", // routing key                 ExchangeType.Topic));              services.AddHostedService&lt;CatalogResponseListener&gt;();         }          // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.         public void Configure(IApplicationBuilder app, IWebHostEnvironment env)         {             if (env.IsDevelopment())             {                 app.UseDeveloperExceptionPage();                 app.UseSwagger();                 app.UseSwaggerUI(c =&gt; c.SwaggerEndpoint(\"/swagger/v1/swagger.json\", \"Ordering.API v1\"));             }              app.UseHttpsRedirection();              app.UseRouting();              app.UseAuthorization();              app.UseEndpoints(endpoints =&gt;             {                 endpoints.MapControllers();             });         }     } }     Step 8: Create a OrderItem model class      Create OrderItem model class in Models folder   OrderItem.cs   using System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema;  namespace Ordering.API.Models {     public class OrderItem     {         [Key]         [DatabaseGenerated(DatabaseGeneratedOption.Identity)]         public int Id { get; set; }         public int OrderId { get; set; }         public int ProductId { get; set; }         public string ProductName { get; set; }         public decimal UnitPrice { get; set; }         public int Units { get; set; }     } }    Step 9: Create a database context class      Create OrderingContext in Db folder   OrderingContext.cs   using Microsoft.EntityFrameworkCore; using Ordering.API.Models;  namespace Ordering.API.Db {     public class OrderingContext : DbContext     {         public OrderingContext(DbContextOptions&lt;OrderingContext&gt; options) : base(options)         {          }          public DbSet&lt;OrderItem&gt; OrderItems { get; set; }     } }    Step 10: Create controller class      Create a controller class and api endpoint in controllers folder   OrderItemsController.cs   using Microsoft.AspNetCore.Mvc; using Microsoft.EntityFrameworkCore; using Newtonsoft.Json; using Ordering.API.Db; using Ordering.API.Models; using Plain.RabbitMQ; using Shared.Models; using System.Collections.Generic; using System.Threading.Tasks;  namespace Ordering.API.Controllers {     [Route(\"api/[controller]\")]     [ApiController]     public class OrderItemsController : ControllerBase     {         private readonly OrderingContext _context;         private readonly IPublisher _publisher;          public OrderItemsController(OrderingContext context, IPublisher publisher)         {             _context = context;             _publisher = publisher;         }          // GET: api/OrderItems         [HttpGet]         public async Task&lt;ActionResult&lt;IEnumerable&lt;OrderItem&gt;&gt;&gt; GetOrderItems()         {             return await _context.OrderItems.ToListAsync();         }          // GET: api/OrderItems/5         [HttpGet(\"{id}\")]         public async Task&lt;ActionResult&lt;OrderItem&gt;&gt; GetOrderItem(int id)         {             var orderItem = await _context.OrderItems.FindAsync(id);              if (orderItem == null)             {                 return NotFound();             }              return orderItem;         }                   // POST: api/OrderItems         // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754         [HttpPost]         public async Task PostOrderItem(OrderItem orderItem)         {             _context.OrderItems.Add(orderItem);             await _context.SaveChangesAsync();              // New inserted identity value             int id = orderItem.Id;               _publisher.Publish(JsonConvert.SerializeObject(new OrderRequest             {                 OrderId = orderItem.OrderId,                 CatalogId = orderItem.ProductId,                 Units = orderItem.Units,                 Name = orderItem.ProductName             }),             \"order_created_routingkey\", // Routing key             null);         }     } }    Step 11: Add migration in the application      Run the following command in the package manager console   PM&gt; Add-Migration initmig PM&gt; Update-Database -Verbose   Organize Catalog.API   Step 12: Install nuget packages in Catalog.API     Install following nuget packages in Catalog.API project   Microsoft.EntityFrameworkCore Microsoft.EntityFrameworkCore.Sqlite Microsoft.EntityFrameworkCore.Tools Plain.RabbitMQ   Step 13: Create CatalogItem model class     Create CatalogItem model class in Models folder   CatalogItem.cs   using System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema;  namespace Catalog.API.Models {     public class CatalogItem     {         [Key]         [DatabaseGenerated(DatabaseGeneratedOption.Identity)]         public int Id { get; set; }         public string Name { get; set; }         public string Description { get; set; }         public decimal Price { get; set; }         public int AvailableStock { get; set; }         public int MaxStockThreshold { get; set; }     } }    Step 14: Configure connectionstring     Configure connectionstring in appsettings.json is as follows   {   \"Logging\": {     \"LogLevel\": {       \"Default\": \"Information\",       \"Microsoft\": \"Warning\",       \"Microsoft.Hosting.Lifetime\": \"Information\"     }   },   \"ConnectionStrings\": {     \"DefaultConnection\": \"Data Source=db/catalog.db\"   },   \"AllowedHosts\": \"*\" }    Step 15: Add context class in Db folder     Add DbContext class in Db folder   CatalogContext.cs   using Catalog.API.Models; using Microsoft.EntityFrameworkCore;  namespace Catalog.API.Db {     public class CatalogContext : DbContext     {         public CatalogContext(DbContextOptions&lt;CatalogContext&gt; options) : base(options)         {          }          public DbSet&lt;CatalogItem&gt; CatalogItems { get; set; }     } }    Step 16: Add OrderCreatedListener class     OrderCreatedListener class in Catalog.API project   OrderCreatedListener.cs   using Catalog.API.Db; using Catalog.API.Models; using Microsoft.EntityFrameworkCore; using Microsoft.Extensions.DependencyInjection; using Microsoft.Extensions.Hosting; using Newtonsoft.Json; using Plain.RabbitMQ; using Shared.Models; using System; using System.Collections.Generic; using System.Threading; using System.Threading.Tasks;  namespace Catalog.API {     public class OrderCreatedListener : IHostedService     {         private readonly ISubscriber _subscribe;         private readonly IPublisher _publisher;         private readonly IServiceScopeFactory _scopeFactory;         public OrderCreatedListener(ISubscriber subscriber, IPublisher publisher, IServiceScopeFactory scopeFactory)         {             _subscribe = subscriber;             _publisher = publisher;             _scopeFactory = scopeFactory;         }         public Task StartAsync(CancellationToken cancellationToken)         {             _subscribe.Subscribe(Subscribe);             return Task.CompletedTask;         }          private bool Subscribe(string message, IDictionary&lt;string, object&gt; header)         {             var response = JsonConvert.DeserializeObject&lt;OrderRequest&gt;(message);              using (var scope = _scopeFactory.CreateScope())             {                 var _context = scope.ServiceProvider.GetRequiredService&lt;CatalogContext&gt;();                 try                 {                     CatalogItem catalogItem = _context.CatalogItems.Find(response.CatalogId);                      if (catalogItem == null || catalogItem.AvailableStock &lt; response.Units)                         throw new Exception();                      catalogItem.AvailableStock = catalogItem.AvailableStock - response.Units;                     _context.Entry(catalogItem).State = EntityState.Modified;                     _context.SaveChanges();                      _publisher.Publish(JsonConvert.SerializeObject(                             new CatalogResponse { OrderId = response.OrderId, CatalogId = response.CatalogId, IsSuccess = true }                         ), \"catalog_response_routingkey\", null);                 }                 catch (Exception)                 {                     _publisher.Publish(JsonConvert.SerializeObject(                     new CatalogResponse { OrderId = response.OrderId, CatalogId = response.CatalogId, IsSuccess = false }                 ), \"catalog_response_routingkey\", null);                 }             }              return true;         }          public Task StopAsync(CancellationToken cancellationToken)         {             return Task.CompletedTask;         }     } }    Step 17: Register database, rabbitmq and listener in Startup class   Startup.cs   using Catalog.API.Db; using Microsoft.AspNetCore.Builder; using Microsoft.AspNetCore.Hosting; using Microsoft.EntityFrameworkCore; using Microsoft.Extensions.Configuration; using Microsoft.Extensions.DependencyInjection; using Microsoft.Extensions.Hosting; using Microsoft.OpenApi.Models; using Plain.RabbitMQ; using RabbitMQ.Client;  namespace Catalog.API {     public class Startup     {         public Startup(IConfiguration configuration)         {             Configuration = configuration;         }          public IConfiguration Configuration { get; }          // This method gets called by the runtime. Use this method to add services to the container.         public void ConfigureServices(IServiceCollection services)         {              services.AddControllers();             services.AddSwaggerGen(c =&gt;             {                 c.SwaggerDoc(\"v1\", new OpenApiInfo { Title = \"Catalog.API\", Version = \"v1\" });             });              // Configure Sqlite             services.AddDbContext&lt;CatalogContext&gt;(options =&gt; options.UseSqlite(Configuration.GetConnectionString(\"DefaultConnection\")));              services.AddSingleton&lt;IConnectionProvider&gt;(new ConnectionProvider(\"amqp://guest:guest@localhost:5672\"));             services.AddSingleton&lt;IPublisher&gt;(p =&gt; new Publisher(p.GetService&lt;IConnectionProvider&gt;(),                 \"catalog_exchange\",                 ExchangeType.Topic));              services.AddSingleton&lt;ISubscriber&gt;(s =&gt; new Subscriber(s.GetService&lt;IConnectionProvider&gt;(),                 \"order_exchange\",                 \"order_response_queue\",                 \"order_created_routingkey\",                 ExchangeType.Topic                 ));              services.AddHostedService&lt;OrderCreatedListener&gt;();         }          // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.         public void Configure(IApplicationBuilder app, IWebHostEnvironment env)         {             if (env.IsDevelopment())             {                 app.UseDeveloperExceptionPage();                 app.UseSwagger();                 app.UseSwaggerUI(c =&gt; c.SwaggerEndpoint(\"/swagger/v1/swagger.json\", \"Catalog.API v1\"));             }              app.UseHttpsRedirection();              app.UseRouting();              app.UseAuthorization();              app.UseEndpoints(endpoints =&gt;             {                 endpoints.MapControllers();             });         }     } }   Step 18: Add migration in the application      Run the following command in the package manager console   PM&gt; Add-Migration initmig PM&gt; Update-Database -Verbose     Run both project and place an order using swagger. Observe what happen when transaction fails. Thanks for your patience.   Source code    ","categories": ["ASP.NET Core","Microservices","RabbitMQ","Design Pattern"],
        "tags": ["aspnetcore","microservices","rabbitmq","designpattern"],
        "url": "http://localhost:4000/distributed-transaction-using-saga-rabbitmq-aspnetcore/",
        "teaser":null},{
        "title": "Uses of Configuration Provider and Options Pattern in ASP.NET Core",
        "excerpt":"  Application overview  In ASP.NET core, we often use application settings from different configuration files and load to a some files. Application settings can be in the appsettings.json or docker-compose.yml or .env or any other configuration file. We can use IOptions to read these settings using C#. Here is a sample code to retrieve application setting from appsettings.json, docker-compose.yml and .env file.   Tools and Technology used  The following tools and technologies has been used for this application     Visual Studio 2019   Visual C#   ASP.NET Core Web API   .NET Framework 5.0   Step 1: Create a asp.net core web api project     Create a new project using visual studio 2019   Choose the C# ASP.NET Web API (.NET Core) project template   Create a web api project name - “Catalog.API”   Step 2: Add docker and docker compose file     Click right button on project -&gt; Add Docker Support -&gt; Linux   Click right button on project -&gt; Container Orchestrator Support -&gt; Linux   Step 3: Modify appsettings.json     Modify appsettings.json as follows   {   \"Logging\": {     \"LogLevel\": {       \"Default\": \"Information\",       \"Microsoft\": \"Warning\",       \"Microsoft.Hosting.Lifetime\": \"Information\"     }   },    \"ConnectionString\": \"Server=(localdb)\\\\mssqllocaldb;Database=CatalogDB;Trusted_Connection=True;MultipleActiveResultSets=true\",   \"ServiceName\" :  \"Catalog.API\",   //\"Server\": \"LocalSQLServer\",   \"Port\": 112233,    \"DatabaseSettings\": {     \"Server\": \"localhost\",     \"Provider\": \"SQL Server\",     \"Database\": \"DemoDb\",     \"Port\": 1234,     \"UserName\": \"sa\",     \"Password\": \"mahedee123\"   },   \"AllowedHosts\": \"*\" }    Step 4: Add .env file in the root directory     Add .env file int root directory and modify as follows   # PORT = 4444  CONFIG_STORAGE_CATALOG_URL=http://host.docker.internal:5202/c/api/v1/catalog/items/[0]/pic/ NAME = Md. Mahedee Hasan DBNAME = ContainerDB PORT = 4545 #AZURE_CATALOG_DB=&lt;YourAzureSQLDBCatalogDBConnString&gt;    Step 5: Modify docker-compose.override.yml     Modify docker-compose.override.yml as follows   version: '3.4'  services:   catalog.api:     environment:       - ASPNETCORE_ENVIRONMENT=Development       - ASPNETCORE_URLS=https://+:443;http://+:80       - ConnectionString=${AZURE_CATALOG_DB:-Server=sqldata;Database=Microsoft.eShopOnContainers.Services.CatalogDb;User Id=sa;Password=Pass@word}       - PATH_BASE=/catalog-api       - PicBaseUrl=${CONFIG_STORAGE_CATALOG_URL}       - Name=${NAME}       #- DbName=${DBNAME}       - Port=${PORT}     ports:       - \"80\"       - \"443\"     volumes:       - ${APPDATA}/Microsoft/UserSecrets:/root/.microsoft/usersecrets:ro       - ${APPDATA}/ASP.NET/Https:/root/.aspnet/https:ro    Step 6: Add DatabaseSettings and CatalogSettings model class  DatabaseSettings  namespace Catalog.API {     public class DatabaseSettings     {         public string Server { get; set; }         public string Provider { get; set; }         public string Database { get; set; }         public int Port { get; set; }         public string UserName { get; set; }         public string Password { get; set; }     } }   CatalogSettings.cs  namespace Catalog.API {     public class CatalogSettings     {         public string ConnectionString { get; set; }         public string ServiceName { get; set; }         public string PicBaseUrl { get; set; }         public string PATH_BASE { get; set; }          public DatabaseSettings DatabaseSettings { get; set; }     } }   Step 7: Modify Program class  Program.cs   using Catalog.API; using Microsoft.AspNetCore; using Microsoft.AspNetCore.Hosting; using Microsoft.Extensions.Configuration; using Microsoft.Extensions.Hosting; using Microsoft.Extensions.Logging; using System; using System.IO;  // Using top-level programming Console.WriteLine(\"Entering into Main method ... \"); var configuration = GetConfiguration();  IConfiguration GetConfiguration() {     var builder = new ConfigurationBuilder()         .SetBasePath(Directory.GetCurrentDirectory())         .AddJsonFile(\"appsettings.json\", optional: false, reloadOnChange: true)         .AddEnvironmentVariables();      return builder.Build(); }  try {     Console.WriteLine(\"Configuring web host {0}...\", Program.AppName);     var host = CreateHostBuilder(configuration, args);     host.Run();      return 0; } catch (Exception exp) {     return 1; } finally {     //finally block }  IWebHost CreateHostBuilder(IConfiguration configuration, string[] args) =&gt;   WebHost.CreateDefaultBuilder(args)       .ConfigureAppConfiguration(x =&gt; x.AddConfiguration(configuration))       .CaptureStartupErrors(false)       .UseStartup&lt;Startup&gt;()       .Build();  public static class Program {     public static string Namespace = typeof(Startup).Namespace;     public static string AppName = Namespace.Substring(Namespace.LastIndexOf('.', Namespace.LastIndexOf('.') - 1) + 1); }   8. Modify Startup class   Starup.cs   using Microsoft.AspNetCore.Builder; using Microsoft.AspNetCore.Hosting; using Microsoft.Extensions.Configuration; using Microsoft.Extensions.DependencyInjection; using Microsoft.Extensions.Hosting; using Microsoft.OpenApi.Models;  namespace Catalog.API {     public class Startup     {         public Startup(IConfiguration configuration)         {             Configuration = configuration;         }          public IConfiguration Configuration { get; }          // This method gets called by the runtime. Use this method to add services to the container.         public void ConfigureServices(IServiceCollection services)         {              services.AddControllers();             // Use option pattern             services.Configure&lt;CatalogSettings&gt;(Configuration);              services.AddSwaggerGen(c =&gt;             {                 c.SwaggerDoc(\"v1\", new OpenApiInfo { Title = \"Catalog.API\", Version = \"v1\" });             });         }          // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.         public void Configure(IApplicationBuilder app, IWebHostEnvironment env)         {             // Debug and Check some configuration             var pathBase = Configuration[\"PATH_BASE\"];             var picBaseURL = Configuration[\"PicBaseUrl\"];             var name = Configuration[\"name\"];              if (env.IsDevelopment())             {                 app.UseDeveloperExceptionPage();                 app.UseSwagger();                 app.UseSwaggerUI(c =&gt; c.SwaggerEndpoint(\"/swagger/v1/swagger.json\", \"Catalog.API v1\"));             }              app.UseHttpsRedirection();              app.UseRouting();              app.UseAuthorization();              app.UseEndpoints(endpoints =&gt;             {                 endpoints.MapControllers();             });         }     } }    Step 9: Create a Controller class for testing     Create Controller name CatalogController as follows CatalogController.cs   using Microsoft.AspNetCore.Mvc; using Microsoft.Extensions.Options;  namespace Catalog.API.Controllers {     [Route(\"api/[controller]\")]     [ApiController]     public class CatalogController : ControllerBase     {         private CatalogSettings _settings;          public CatalogController(IOptions&lt;CatalogSettings&gt; settings)         {             _settings = settings.Value;         }         // GET: api/&lt;CatalogController&gt;         [HttpGet]         public CatalogSettings Get()         {             return _settings;         }     } }    Step 10: Build and run the application Now build and run the application. You will see the swagger ui and test CatalogController to test settings.   Source Code    ","categories": ["ASP.NET","ASP.NET Core","C#"],
        "tags": ["aspnet","aspnetcore","csharp"],
        "url": "http://localhost:4000/uses-of-configuration-provider-and-options-pattern-in-asp.net-core/",
        "teaser":null},{
        "title": "Integrate logging in a asp.net core application using Serilog and Seq",
        "excerpt":"  Overview  Serilog is a newer logging framework for .NET and now has been the most used and preferred framework for .NET Application. Seq is the intelligent search, analysis, and alerting server built specifically for modern structured log data. Here I will show you a how to integrate serilog and seq in a simple asp.net core application.   Tools and Technology used  The following tools and technologies has been used for this application     Visual Studio 2019   Visual C#   ASP.NET Core Web API   .NET Framework 5.0   Serilog   Seq   Step 1: Create a asp.net core web api project     Create a new project using visual studio 2019   Choose the C# ASP.NET Web API (.NET Core) project template   Create a web api project name - “Catalog.API”   For Cosole Logging   Step 2: Install nuget package Serilog.Asp.NetCore   Install-Package Serilog.AspNetCore   Step 3: Enable console logging   Modify Program.cs as follows   using Microsoft.AspNetCore.Hosting; using Microsoft.Extensions.Hosting; using Serilog;  namespace Catalog.API {     public class Program     {         public static void Main(string[] args)         {             Log.Logger = new LoggerConfiguration()                 .Enrich.FromLogContext() // To get some key information like user id/request id                  .WriteTo.Console()                 .CreateLogger();              CreateHostBuilder(args).Build().Run();         }          public static IHostBuilder CreateHostBuilder(string[] args) =&gt;             Host.CreateDefaultBuilder(args)             .UseSerilog()                 .ConfigureWebHostDefaults(webBuilder =&gt;                 {                     webBuilder.UseStartup&lt;Startup&gt;();                 });     } }    Step 4: Modify appsettings.json  Modify appsettings.json as follows, if required.   {     \"AllowedHosts\": \"*\"   }  Step 5: Add logging information in WeatherForecastController   Modify default WeatherForecastController as follows for logging   using Microsoft.AspNetCore.Mvc; using Microsoft.Extensions.Logging; using System; using System.Collections.Generic; using System.Linq;  namespace Catalog.API.Controllers {     [ApiController]     [Route(\"[controller]\")]     public class WeatherForecastController : ControllerBase     {         private static readonly string[] Summaries = new[]         {             \"Freezing\", \"Bracing\", \"Chilly\", \"Cool\", \"Mild\", \"Warm\", \"Balmy\", \"Hot\", \"Sweltering\", \"Scorching\"         };          private readonly ILogger&lt;WeatherForecastController&gt; _logger;          public WeatherForecastController(ILogger&lt;WeatherForecastController&gt; logger)         {             _logger = logger;         }          [HttpGet]         public IEnumerable&lt;WeatherForecast&gt; Get()         {             _logger.LogInformation(\"HTTP GET: Called get method of WeatherForecast contorller\");             var rng = new Random();             return Enumerable.Range(1, 5).Select(index =&gt; new WeatherForecast             {                 Date = DateTime.Now.AddDays(index),                 TemperatureC = rng.Next(-20, 55),                 Summary = Summaries[rng.Next(Summaries.Length)]             })             .ToArray();         }     } }    Step 6: Run your application to see the log     Run the application (not in iis express)   You will see the log in console window.   Note:  If you want to change the output format to JSON. Just change  .WriteTo.Console(new RenderedCompactJsonFormatter())     File Logging   Step 7: Install Package Serilog.Sinks.File  PM&gt; Install-Package Serilog.Sinks.File   Step 8: Modify Main method of Program class as follows Program.cs  using Microsoft.AspNetCore.Hosting; using Microsoft.Extensions.Hosting; using Serilog; using Serilog.Formatting.Compact; using System;  namespace Catalog.API {     public class Program     {         public static void Main(string[] args)         {             Log.Logger = new LoggerConfiguration()                 .Enrich.FromLogContext() // To get some key information like user id/request id                  .WriteTo.Console(new RenderedCompactJsonFormatter())                 .WriteTo.Debug(outputTemplate: DateTime.Now.ToString())                 .WriteTo.File(\"catalogLog.txt\", rollingInterval: RollingInterval.Day)                 .CreateLogger();              CreateHostBuilder(args).Build().Run();         }          public static IHostBuilder CreateHostBuilder(string[] args) =&gt;             Host.CreateDefaultBuilder(args)             .UseSerilog()                 .ConfigureWebHostDefaults(webBuilder =&gt;                 {                     webBuilder.UseStartup&lt;Startup&gt;();                 });     } }    Step 9: Run your application to see the log in file     Run the application (not in iis express)   You will see the log in file name catalogLogYYYYMMDD.txt in the root folder   View log in Seq  Step 10: Run docker image for Seq     Start docker in your machine   Run the following command to pull and run Seq in docker   docker pull datalust/seq docker run --name seq -d --restart unless-stopped -e ACCEPT_EULA=Y -p 6171:80 datalust/seq:latest      Browse http://localhost:6171/ to see Seq is running or not   _Step 11: Install Serilog.Sinks.Seq   PM&gt; Install-Package Serilog.Sinks.Seq     Step 12: Configure Seq   Now configure Seq end point in Program class as follows   using Microsoft.AspNetCore.Hosting; using Microsoft.Extensions.Hosting; using Serilog; using Serilog.Formatting.Compact; using System;  namespace Catalog.API {     public class Program     {         public static void Main(string[] args)         {             Log.Logger = new LoggerConfiguration()                 .Enrich.FromLogContext() // To get some key information like user id/request id                  .WriteTo.Console(new RenderedCompactJsonFormatter())                 .WriteTo.Debug(outputTemplate: DateTime.Now.ToString())                 .WriteTo.File(\"catalogLog.txt\", rollingInterval: RollingInterval.Day)                 .WriteTo.Seq(\"http://localhost:6171/\")                 .CreateLogger();              CreateHostBuilder(args).Build().Run();         }          public static IHostBuilder CreateHostBuilder(string[] args) =&gt;             Host.CreateDefaultBuilder(args)             .UseSerilog()                 .ConfigureWebHostDefaults(webBuilder =&gt;                 {                     webBuilder.UseStartup&lt;Startup&gt;();                 });     } }    Step 13: Run your application to see the log in Seq      Run the application (not in iis express)   Browse http://localhost:6171/#/events   You will see the log in Seq.   Details logging   Step 14: Add a model class name CatalogItem in Model folder   CatalogItem.cs   namespace Catalog.API.Model {     public class CatalogItem     {         public int Id { get; set; }          public string Name { get; set; }          public string Description { get; set; }          public decimal Price { get; set; }          // Quantity in stock         public int AvailableStock { get; set; }          // Available stock at which we should reorder         public int RestockThreshold { get; set; }      } }    Step 15: Add a Controller class name CatalogContoller  CatalogController.cs  using Catalog.API.Model; using Microsoft.AspNetCore.Mvc; using Microsoft.Extensions.Logging; using System; using System.Collections.Generic; using System.Linq; using System.Text;  namespace Catalog.API.Controllers {     [Route(\"api/[controller]\")]     [ApiController]     public class CatalogController : ControllerBase     {         private readonly ILogger&lt;CatalogController&gt; _logger;          public CatalogController(ILogger&lt;CatalogController&gt; logger)         {             _logger = logger;         }         //GET api/&lt;CatalogController&gt;/1/110         [HttpGet(\"{catalogId}/{quantity}\")]         public string GetItem(int catalogId, int quantity)         {             try             {                 CatalogItem item = GetItems(catalogId);                  if (item.AvailableStock &lt; quantity)                 {                     _logger.LogInformation(\"Stock quantity {0} is lower than requested quantity {1}\", item.AvailableStock, quantity);                     return \"Stock quantity is lower than requested quantity.\";                 }             }             catch(Exception exp)             {                 var logMsg = new StringBuilder();                 logMsg.AppendLine($\"Error message:{exp.Message}\");                 logMsg.AppendLine($\"Error stack trace:{exp.StackTrace}\");                 _logger.LogError(logMsg.ToString());             }             return \"Your order has been submitted\";         }           private CatalogItem GetItems(int catalogId)         {             List&lt;CatalogItem&gt; catalogRepository = new List&lt;CatalogItem&gt;();             catalogRepository.Add(new CatalogItem { Id = 1, Name = \"Asus ZenBook\", Price = 150000, AvailableStock = 25, RestockThreshold = 5 });             catalogRepository.Add(new CatalogItem { Id = 2, Name = \"Dell 4345\", Price = 110000, AvailableStock = 25, RestockThreshold = 5 });             catalogRepository.Add(new CatalogItem { Id = 3, Name = \"Lenovo ThinkPad\", Price = 180000, AvailableStock = 25, RestockThreshold = 5 });             catalogRepository.Add(new CatalogItem { Id = 4, Name = \"Microsoft Surface\", Price = 250000, AvailableStock = 25, RestockThreshold = 5 });              CatalogItem item = new CatalogItem();             try             {                 item = catalogRepository.Where(p =&gt; p.Id == catalogId).FirstOrDefault();             }             catch(Exception exp)             {                 throw new Exception(exp.Message);             }              return item;         }     } }    Step 16: Again run your application to see the log in Seq     Run the application (not in iis express)   Browse your application as http://localhost:5000/api/Catalog/1/110   Browse Seq http://localhost:6171/#/events   You will see the log in Seq.   Now cheers   Source Code   ","categories": ["ASP.NET","ASP.NET Core","C#","Serilog","Seq","Logging"],
        "tags": ["aspnet","aspnetcore","csharp","serilog","seq","Logging"],
        "url": "http://localhost:4000/integrate-logging-in-a-asp.net-core-application-using-serilog-and-seq/",
        "teaser":null},{
        "title": "Playing with Clean Architecture and CQRS pattern using asp.net core, EF and Dapper",
        "excerpt":"  Introduction   Clean architecute was created by Robert C. Martin known as Uncle Bob. It’s now mostly used software architecute especially in microservice architecture. In this article, I will discuss about clean architecute a bit and then implement the concept using clean architecture and CQRS pattern using asp.net core, entity framework core and dapper. The main concept of clean architecture is that the core logic of the application is changed rarely so it will be independent and considered it as core.      Fig - The Clean Architecture (Picture collected from internet)   In clean architecture, based on the picture, the domain and application layers remain in the center of the design which is known as core of the application. The domain layer contains enterprise logic and the application layer contains business logic. Generally, business logic is not sharable, it is for that particualr business only but enterprise logic can be shared across many related system.   Advantages      Highly maintainable - It’s follows seperation of concern.   UI Independent - It is loosely coupled with UI layer. So, you can change UI without changing the core buisness.   Highly Testable - Apps built using this approach, and especially the core domain model and its business rules, are extremely testable.   Framework Independent - You can use any langulage like C#, Java, Python to implement clean architecture.   Scalable - Can implement CQRS pattern. So, it is highly scalable.   CQRS Pattern   CQRS stands for Command and Query Responsibility Segregation. Main concern of this pattern is seperation of concern. It seperates read and command (insert, update, delete) operations. It is mostly used for performance and scalability.   Now, I will show you a sample project in which I have implemented Clean Architecture with CQRS pattern.   Tools and technologies used     Clean Architecture   CQRS Pattern   Visual Studio 2019   .NET 5.0   SQLite   Dapper   Entity Framework   AutoMapper   MediatR   ASP.NET Core Web API   C#   Implementation   Step 1: Create solution and projects.           Create a solution name Ecommerce using the following command.         dotnet new sln -o Ecommerce                Now the following 3 projects in Ecommerce\\Services\\Ordering folder. Ordering.API is a webapi project. Rest of the projects are class library.         dotnet new webapi -o Ordering.API            dotnet new classlib -o Ordering.Application            dotnet new classlib -o Ordering.Core            dotnet new classlib -o Ordering.Infrastructure                Go to Ecommerce folder and open terminal. Add all project to the solutions using the following command.        dotnet sln .\\Ecommerce.sln add .\\Services\\Ordering\\Ordering.API\\Ordering.API.csproj .\\Services\\Ordering\\Ordering.Application\\Ordering.Application.csproj .\\Services\\Ordering\\Ordering.Core\\Ordering.Core.csproj .\\Services\\Ordering\\Ordering.Infrastructure\\Ordering.Infrastructure.csproj     Your initial application structure is a follows.      Step 2: Install nuget packages.      Install following nuget packages in Ordering.Infrastructure Project   PM&gt; Install-Package Dapper PM&gt; Install-Package Microsoft.Data.Sqlite.Core PM&gt; Install-Package Microsoft.EntityFrameworkCore PM&gt; Install-Package Microsoft.EntityFrameworkCore.Design PM&gt; Install-Package Microsoft.EntityFrameworkCore.Relational PM&gt; Install-Package Microsoft.EntityFrameworkCore.Tools PM&gt; Install-Package Microsoft.Extensions.Configuration.Abstractions      Install following nuget packages in Ordering.Application Project   PM&gt; Install-Package AutoMapper PM&gt; Install-Package MediatR      Install following nuget packages in Ordering.API Project   PM&gt; Install-Package AutoMapper.Extensions.Microsoft.DependencyInjection PM&gt; Install-Package MediatR PM&gt; Install-Package MediatR.Extensions.Microsoft.DependencyInjection PM&gt; Install-Package Microsoft.EntityFrameworkCore.Design PM&gt; Install-Package Microsoft.EntityFrameworkCore.Sqlite PM&gt; Install-Package Microsoft.EntityFrameworkCore.Tools   Step 3: Create Entity class  in Ordering.Core project      Create BaseEntity in Ordering.Core/Entities/Base folder   Create Customer in Ordering.Core/Entities folder   BaseEntity.cs   using System; using System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema;  namespace Ordering.Core.Entities.Base {     public class BaseEntity     {         [Key]         [DatabaseGenerated(DatabaseGeneratedOption.Identity)]         public Int64 Id { get; set; }         public DateTime CreatedDate { get; set; }          public DateTime ModifiedDate { get; private set; }          public BaseEntity()         {             this.ModifiedDate = DateTime.Now;         }     } }   Customer.cs   using Ordering.Core.Entities.Base;  namespace Ordering.Core.Entities {     public class Customer : BaseEntity     {         public string FirstName { get; set; }         public string LastName { get; set; }         public string Email { get; set; }         public string ContactNumber { get; set; }         public string Address { get; set; }     } }    Step 4: Create Command and Query Interface in Ordering.Core project      Create ICommandRepository in Ordering.Core/Repositories/Command/Base folder   Create ICommandCustomerRepository in Ordering.Core/Repositories/Command folder   Create IQueryRepository in Ordering.Core/Repositories/Query/Base folder   Create ICustomerQueryRepository in Ordering.Core/Repositories/Query folder   ICommandRepository.cs  using System.Threading.Tasks;  namespace Ordering.Core.Repositories.Command.Base {     public interface ICommandRepository&lt;T&gt; where T : class     {         Task&lt;T&gt; AddAsync(T entity);         Task UpdateAsync(T entity);         Task DeleteAsync(T entity);     } }    ICustomerCommandRepository.cs   using Ordering.Core.Entities; using Ordering.Core.Repositories.Command.Base;  namespace Ordering.Core.Repositories.Command {     public interface ICustomerCommandRepository : ICommandRepository&lt;Customer&gt;     {      } }  IQueryRepository.cs   namespace Ordering.Core.Repositories.Query.Base {     public interface IQueryRepository &lt;T&gt; where T : class     {         // Generic repository for all if any     } }   ICustomerQueryRepository.cs   using Ordering.Core.Entities; using Ordering.Core.Repositories.Query.Base; using System; using System.Collections.Generic; using System.Threading.Tasks;  namespace Ordering.Core.Repositories.Query {     public interface ICustomerQueryRepository : IQueryRepository&lt;Customer&gt;     {         //Custom operation which is not generic         Task&lt;IReadOnlyList&lt;Customer&gt;&gt; GetAllAsync();         Task&lt;Customer&gt; GetByIdAsync(Int64 id);         Task&lt;Customer&gt; GetCustomerByEmail(string email);     } }    Step 5: Create DbConnector and OrderingContext in Ordering.Infrastructure project      Create DbConnector class in Ordering.Infrastructure/Data folder for SQLite connection for query.   DbConnector.cs   using Microsoft.Data.Sqlite; using Microsoft.Extensions.Configuration; using System.Data;  namespace Ordering.Infrastructure.Data {     public class DbConnector     {         private readonly IConfiguration _configuration;          protected DbConnector(IConfiguration configuration)         {             _configuration = configuration;         }          public IDbConnection CreateConnection()         {             string _connectionString = _configuration.GetConnectionString(\"DefaultConnection\");             return new SqliteConnection(_connectionString);         }     } }      Create OrderingContext class in Ordering.Infrastructure/Data folder for command.   OrderingContext.cs   using Microsoft.EntityFrameworkCore; using Ordering.Core.Entities;  namespace Ordering.Infrastructure.Data {     public class OrderingContext : DbContext     {         public OrderingContext(DbContextOptions&lt;OrderingContext&gt; options) : base (options)         {          }          public DbSet&lt;Customer&gt; Customers { get; set; }     } }    Step 6: Create Command and Query Repository in Ordering.Infrastructure project      Create CommandRepository in Ordering.Infrastructure/Repositories/Command/Base folder   CommandRepository.cs   using Microsoft.EntityFrameworkCore; using Ordering.Core.Repositories.Command.Base; using Ordering.Infrastructure.Data; using System.Threading.Tasks;  namespace Ordering.Infrastructure.Repository.Command.Base {     public class CommandRepository&lt;T&gt; : ICommandRepository&lt;T&gt; where T : class     {         protected readonly OrderingContext _context;          public CommandRepository(OrderingContext context)         {             _context = context;         }         public async Task&lt;T&gt; AddAsync(T entity)         {             await _context.Set&lt;T&gt;().AddAsync(entity);             await _context.SaveChangesAsync();             return entity;         }          public async Task UpdateAsync(T entity)         {             _context.Entry(entity).State = EntityState.Modified;             await _context.SaveChangesAsync();         }          public async Task DeleteAsync(T entity)         {             _context.Set&lt;T&gt;().Remove(entity);             await _context.SaveChangesAsync();         }     } }       Create CommandCustomerRepository in Ordering.Infrastructure/Repositories/Command folder   CustomerCommandRepository.cs   using Ordering.Core.Entities; using Ordering.Core.Repositories.Command; using Ordering.Infrastructure.Data; using Ordering.Infrastructure.Repository.Command.Base;  namespace Ordering.Infrastructure.Repository.Command {      public class CustomerCommandRepository : CommandRepository&lt;Customer&gt;, ICustomerCommandRepository     {         public CustomerCommandRepository(OrderingContext context) : base(context)         {          }     } }      Create QueryRepository in Ordering.Infrastructure/Repositories/Query/Base folder   QueryRepository.cs   using Microsoft.Extensions.Configuration; using Ordering.Core.Repositories.Query.Base; using Ordering.Infrastructure.Data;  namespace Ordering.Infrastructure.Repository.Query.Base {     public class QueryRepository&lt;T&gt; : DbConnector,  IQueryRepository&lt;T&gt; where T : class     {         public QueryRepository(IConfiguration configuration)             : base(configuration)         {          }     } }      Create CustomerQueryRepository in Ordering.Infrastructure/Repositories/Query folder   CustomerQueryRepository.cs   using Dapper; using Microsoft.Extensions.Configuration; using Ordering.Core.Entities; using Ordering.Core.Repositories.Query; using Ordering.Infrastructure.Repository.Query.Base; using System; using System.Collections.Generic; using System.Data; using System.Linq; using System.Threading.Tasks;  namespace Ordering.Infrastructure.Repository.Query {     public class CustomerQueryRepository : QueryRepository&lt;Customer&gt;, ICustomerQueryRepository     {         public CustomerQueryRepository(IConfiguration configuration)              : base(configuration)         {          }          public async Task&lt;IReadOnlyList&lt;Customer&gt;&gt; GetAllAsync()         {             try             {                 var query = \"SELECT * FROM CUSTOMERS\";                  using (var connection = CreateConnection())                 {                     return (await connection.QueryAsync&lt;Customer&gt;(query)).ToList();                 }             }             catch (Exception exp)             {                 throw new Exception(exp.Message, exp);             }         }          public async Task&lt;Customer&gt; GetByIdAsync(long id)         {             try             {                 var query = \"SELECT * FROM CUSTOMERS WHERE Id = @Id\";                 var parameters = new DynamicParameters();                 parameters.Add(\"Id\", id, DbType.Int64);                  using (var connection = CreateConnection())                 {                     return (await connection.QueryFirstOrDefaultAsync&lt;Customer&gt;(query, parameters));                 }             }             catch (Exception exp)             {                 throw new Exception(exp.Message, exp);             }         }          public async Task&lt;Customer&gt; GetCustomerByEmail(string email)         {             try             {                 var query = \"SELECT * FROM CUSTOMERS WHERE Email = @email\";                 var parameters = new DynamicParameters();                 parameters.Add(\"Email\", email, DbType.String);                  using (var connection = CreateConnection())                 {                     return (await connection.QueryFirstOrDefaultAsync&lt;Customer&gt;(query, parameters));                 }             }             catch (Exception exp)             {                 throw new Exception(exp.Message, exp);             }         }     } }    Step 7: Now organize Ordering.Application layer      Create CustomerResponse class in Ordering.Application/Response folder   CustomerResponse.cs   using System;  namespace Ordering.Application.Response {     public class CustomerResponse     {         public Int64 Id { get; set; }         public string FirstName { get; set; }         public string LastName { get; set; }         public string Email { get; set; }         public string ContactNumber { get; set; }         public string Address { get; set; }     } }      Create Create, Edit and Delete customer command in Ordering.Application/Commands folder   CreateCustomerCommand.cs  using MediatR; using Ordering.Application.Response; using System;  namespace Ordering.Application.Commands {     public class CreateCustomerCommand : IRequest&lt;CustomerResponse&gt;     {         public string FirstName { get; set; }         public string LastName { get; set; }         public string Email { get; set; }         public string ContactNumber { get; set; }         public string Address { get; set; }         public DateTime CreatedDate { get; set; }          public CreateCustomerCommand()         {             this.CreatedDate = DateTime.Now;         }     } }    EditCustomerCommand.cs  using MediatR; using Ordering.Application.Response; using System;  namespace Ordering.Application.Commands {     public class EditCustomerCommand : IRequest&lt;CustomerResponse&gt;     {          public Int64 Id { get; set; }         public string FirstName { get; set; }         public string LastName { get; set; }         public string Email { get; set; }         public string ContactNumber { get; set; }         public string Address { get; set; }     } }    DeleteCustomerCommand  using MediatR; using System;  namespace Ordering.Application.Commands {     public class DeleteCustomerCommand : IRequest&lt;String&gt;     {         public Int64 Id { get; private set; }          public DeleteCustomerCommand(Int64 Id)         {             this.Id = Id;         }     } }       Create Query class in Ordering.Application/Queries folder   GetAllCustomerQuery.cs   using MediatR; using Ordering.Core.Entities; using System.Collections.Generic;  namespace Ordering.Application.Queries {     public record GetAllCustomerQuery : IRequest&lt;List&lt;Customer&gt;&gt;     {      } }    GetCustomerByEmailQuery.cs  using MediatR; using Ordering.Core.Entities;  namespace Ordering.Application.Queries {      public class GetCustomerByEmailQuery: IRequest&lt;Customer&gt;     {         public string Email { get; private set; }                  public GetCustomerByEmailQuery(string email)         {             this.Email = email;         }      } }    GetCustomerByIdQuery.cs   using MediatR; using Ordering.Core.Entities; using System;  namespace Ordering.Application.Queries {      public class GetCustomerByIdQuery: IRequest&lt;Customer&gt;     {         public Int64 Id { get; private set; }                  public GetCustomerByIdQuery(Int64 Id)         {             this.Id = Id;         }      } }       Create CustomerMapper and OrderingMappingProfile class in Ordering.Application/Mapper folder   CustomerMapper.cs   using AutoMapper; using System;  namespace Ordering.Application.Mapper {     public class CustomerMapper     {         private static readonly Lazy&lt;IMapper&gt; Lazy = new Lazy&lt;IMapper&gt;(()=&gt;         {             var config = new MapperConfiguration(cfg =&gt;             {                 cfg.ShouldMapProperty = p =&gt; p.GetMethod.IsPublic || p.GetMethod.IsAssembly;                 cfg.AddProfile&lt;OrderingMappingProfile&gt;();             });              var mapper = config.CreateMapper();             return mapper;         });          public static IMapper Mapper =&gt; Lazy.Value;     } }  OrderingMappingProfile.cs    using AutoMapper; using Ordering.Application.Commands; using Ordering.Application.Response; using Ordering.Core.Entities;  namespace Ordering.Application.Mapper {     public class OrderingMappingProfile : Profile     {         public OrderingMappingProfile()         {             CreateMap&lt;Customer, CustomerResponse&gt;().ReverseMap();             CreateMap&lt;Customer, CreateCustomerCommand&gt;().ReverseMap();             CreateMap&lt;Customer, EditCustomerCommand&gt;().ReverseMap();         }     } }      Create CommandHandler classes in Ordering.Application/Handlers/CommandHandlers folder   CreateCustomerHandler.cs   using MediatR; using Ordering.Application.Commands; using Ordering.Application.Mapper; using Ordering.Application.Response; using Ordering.Core.Entities; using Ordering.Core.Repositories.Command; using System; using System.Threading; using System.Threading.Tasks;  namespace Ordering.Application.Handlers.CommandHandler {     public class CreateCustomerHandler : IRequestHandler&lt;CreateCustomerCommand, CustomerResponse&gt;     {         private readonly ICustomerCommandRepository _customerCommandRepository;         public CreateCustomerHandler(ICustomerCommandRepository customerCommandRepository)         {             _customerCommandRepository = customerCommandRepository;         }         public async Task&lt;CustomerResponse&gt; Handle(CreateCustomerCommand request, CancellationToken cancellationToken)         {             var customerEntity = CustomerMapper.Mapper.Map&lt;Customer&gt;(request);              if(customerEntity is null)             {                 throw new ApplicationException(\"There is a problem in mapper\");             }              var newCustomer = await _customerCommandRepository.AddAsync(customerEntity);             var customerResponse = CustomerMapper.Mapper.Map&lt;CustomerResponse&gt;(newCustomer);             return customerResponse;         }     } }    DeleteCustomerHandler.cs   using MediatR; using Ordering.Application.Commands; using Ordering.Core.Repositories.Command; using Ordering.Core.Repositories.Query; using System; using System.Threading; using System.Threading.Tasks;  namespace Ordering.Application.Handlers.CommandHandler {     public class DeleteCustomerHandler : IRequestHandler&lt;DeleteCustomerCommand, String&gt;     {         private readonly ICustomerCommandRepository _customerCommandRepository;         private readonly ICustomerQueryRepository _customerQueryRepository;         public DeleteCustomerHandler(ICustomerCommandRepository customerRepository, ICustomerQueryRepository customerQueryRepository)         {             _customerCommandRepository = customerRepository;             _customerQueryRepository = customerQueryRepository;         }          public async Task&lt;string&gt; Handle(DeleteCustomerCommand request, CancellationToken cancellationToken)         {             try             {                 var customerEntity = await _customerQueryRepository.GetByIdAsync(request.Id);                  await _customerCommandRepository.DeleteAsync(customerEntity);             }             catch(Exception exp)             {                 throw (new ApplicationException(exp.Message));             }              return \"Customer information has been deleted!\";         }     } }    EditCustomerHandler.cs   using MediatR; using Ordering.Application.Commands; using Ordering.Application.Mapper; using Ordering.Application.Response; using Ordering.Core.Entities; using Ordering.Core.Repositories.Command; using Ordering.Core.Repositories.Query; using System; using System.Threading; using System.Threading.Tasks;  namespace Ordering.Application.Handlers.CommandHandler {     public class EditCustomerHandler : IRequestHandler&lt;EditCustomerCommand, CustomerResponse&gt;     {         private readonly ICustomerCommandRepository _customerCommandRepository;         private readonly ICustomerQueryRepository _customerQueryRepository;         public EditCustomerHandler(ICustomerCommandRepository customerRepository, ICustomerQueryRepository customerQueryRepository)         {             _customerCommandRepository = customerRepository;             _customerQueryRepository = customerQueryRepository;         }         public async Task&lt;CustomerResponse&gt; Handle(EditCustomerCommand request, CancellationToken cancellationToken)         {             var customerEntity = CustomerMapper.Mapper.Map&lt;Customer&gt;(request);              if (customerEntity is null)             {                 throw new ApplicationException(\"There is a problem in mapper\");             }              try             {                 await _customerCommandRepository.UpdateAsync(customerEntity);             }             catch (Exception exp)             {                 throw new ApplicationException(exp.Message);             }              var modifiedCustomer = await _customerQueryRepository.GetByIdAsync(request.Id);             var customerResponse = CustomerMapper.Mapper.Map&lt;CustomerResponse&gt;(modifiedCustomer);              return customerResponse;         }     } }       Create QueryHandler classes in Ordering.Application/Handlers/QueryHandlers folder   GetAllCustomerHandler.cs   using MediatR; using Ordering.Application.Queries; using Ordering.Core.Entities; using Ordering.Core.Repositories.Query; using System.Collections.Generic; using System.Threading; using System.Threading.Tasks;  namespace Ordering.Application.Handlers.QueryHandlers {     public class GetAllCustomerHandler : IRequestHandler&lt;GetAllCustomerQuery, List&lt;Customer&gt;&gt;     {         private readonly ICustomerQueryRepository _customerQueryRepository;          public GetAllCustomerHandler(ICustomerQueryRepository customerQueryRepository)         {             _customerQueryRepository = customerQueryRepository;         }         public async Task&lt;List&lt;Customer&gt;&gt; Handle(GetAllCustomerQuery request, CancellationToken cancellationToken)         {             return (List&lt;Customer&gt;)await _customerQueryRepository.GetAllAsync();         }     } }    GetCustomerByEmailHandler.cs   using MediatR; using Ordering.Application.Queries; using Ordering.Core.Entities; using System.Linq; using System.Threading; using System.Threading.Tasks;  namespace Ordering.Application.Handlers.QueryHandlers {     public class GetCustomerByEmailHandler : IRequestHandler&lt;GetCustomerByEmailQuery, Customer&gt;     {         private readonly IMediator _mediator;          public GetCustomerByEmailHandler(IMediator mediator)         {             _mediator = mediator;         }         public async Task&lt;Customer&gt; Handle(GetCustomerByEmailQuery request, CancellationToken cancellationToken)         {             var customers = await _mediator.Send(new GetAllCustomerQuery());             var selectedCustomer = customers.FirstOrDefault(x =&gt; x.Email.ToLower().Contains(request.Email.ToLower()));             return selectedCustomer;         }     } }    GetCustomerByIdHandler.cs   using MediatR; using Ordering.Application.Queries; using Ordering.Core.Entities; using System.Linq; using System.Threading; using System.Threading.Tasks;  namespace Ordering.Application.Handlers.QueryHandlers {     public class GetCustomerByIdHandler : IRequestHandler&lt;GetCustomerByIdQuery, Customer&gt;     {         private readonly IMediator _mediator;          public GetCustomerByIdHandler(IMediator mediator)         {             _mediator = mediator;         }         public async Task&lt;Customer&gt; Handle(GetCustomerByIdQuery request, CancellationToken cancellationToken)         {             var customers = await _mediator.Send(new GetAllCustomerQuery());             var selectedCustomer = customers.FirstOrDefault(x =&gt; x.Id == request.Id);             return selectedCustomer;         }     } }    Step 8: Orgnaize Ordering.API project. This is an web api project.      Create CustomerController in Ordering.API/Controllers folder   CustomerController.cs   using MediatR; using Microsoft.AspNetCore.Http; using Microsoft.AspNetCore.Mvc; using Ordering.Application.Commands; using Ordering.Application.Queries; using Ordering.Application.Response; using Ordering.Core.Entities; using System; using System.Collections.Generic; using System.Threading.Tasks;  namespace Ordering.API.Controllers {     [Route(\"api/[controller]\")]     [ApiController]     public class CustomerController : ControllerBase     {         private readonly IMediator _mediator;         public CustomerController(IMediator mediator)         {             _mediator = mediator;         }           [HttpGet]         [ProducesResponseType(StatusCodes.Status200OK)]         public async Task&lt;List&lt;Customer&gt;&gt; Get()         {             return await _mediator.Send(new GetAllCustomerQuery());         }          [HttpGet(\"{id}\")]         [ProducesResponseType(StatusCodes.Status200OK)]         public async Task&lt;Customer&gt; Get(Int64 id)         {             return await _mediator.Send(new GetCustomerByIdQuery(id));         }          [HttpGet(\"email\")]         [ProducesResponseType(StatusCodes.Status200OK)]         public async Task&lt;Customer&gt; GetByEmail(string email)         {             return await _mediator.Send(new GetCustomerByEmailQuery(email));         }          [HttpPost]         [ProducesResponseType(StatusCodes.Status200OK)]         public async Task&lt;ActionResult&lt;CustomerResponse&gt;&gt; CreateCustomer([FromBody] CreateCustomerCommand command)         {             var result = await _mediator.Send(command);             return Ok(result);         }           [HttpPut(\"EditCustomer/{id}\")]         public async Task&lt;ActionResult&gt; EditCustomer(int id, [FromBody] EditCustomerCommand command)         {             try             {                 if (command.Id == id)                 {                     var result = await _mediator.Send(command);                     return Ok(result);                 }                 else                 {                     return BadRequest();                 }             }             catch (Exception exp)             {                 return BadRequest(exp.Message);             }           }          [HttpDelete(\"DeleteCustomer/{id}\")]         public async Task&lt;ActionResult&gt; DeleteCustomer(int id)         {             try             {                 string result = string.Empty;                 result = await _mediator.Send(new DeleteCustomerCommand(id));                 return Ok(result);             }             catch (Exception exp)             {                 return BadRequest(exp.Message);             }         }      } }       Set connection string in appsettings.json file. I have used here SQLite database for simplicity.   appsettings.json   {   \"Logging\": {     \"LogLevel\": {       \"Default\": \"Information\",       \"Microsoft\": \"Warning\",       \"Microsoft.Hosting.Lifetime\": \"Information\"     }   },   \"ConnectionStrings\": {     \"DefaultConnection\": \"Data Source=db/ordering.db\"   },   \"AllowedHosts\": \"*\" }       Modify configure connection string and register concrete class in Startup class as follows.   Startup.cs   using MediatR; using Microsoft.AspNetCore.Builder; using Microsoft.AspNetCore.Hosting; using Microsoft.EntityFrameworkCore; using Microsoft.Extensions.Configuration; using Microsoft.Extensions.DependencyInjection; using Microsoft.Extensions.Hosting; using Microsoft.OpenApi.Models; using Ordering.Application.Handlers.CommandHandler; using Ordering.Core.Repositories.Command.Base; using Ordering.Core.Repositories.Query; using Ordering.Core.Repositories.Query.Base; using Ordering.Infrastructure.Data; using Ordering.Infrastructure.Repository.Command; using Ordering.Infrastructure.Repository.Command.Base; using Ordering.Infrastructure.Repository.Query; using Ordering.Infrastructure.Repository.Query.Base; using System.Reflection;  namespace Ordering.API {     public class Startup     {         public Startup(IConfiguration configuration)         {             Configuration = configuration;         }          public IConfiguration Configuration { get; }          // This method gets called by the runtime. Use this method to add services to the container.         public void ConfigureServices(IServiceCollection services)         {               services.AddControllers();              // Configure for Sqlite             services.AddDbContext&lt;OrderingContext&gt;(options =&gt; options.UseSqlite(Configuration.GetConnectionString(\"DefaultConnection\")));              services.AddSwaggerGen(c =&gt;             {                 c.SwaggerDoc(\"v1\", new OpenApiInfo { Title = \"Ordering.API\", Version = \"v1\" });             });              // Register dependencies             services.AddAutoMapper(typeof(Startup));             services.AddMediatR(typeof(CreateCustomerHandler).GetTypeInfo().Assembly);             services.AddScoped(typeof(IQueryRepository&lt;&gt;), typeof(QueryRepository&lt;&gt;));             services.AddTransient&lt;ICustomerQueryRepository, CustomerQueryRepository&gt;();             services.AddScoped(typeof(ICommandRepository&lt;&gt;), typeof(CommandRepository&lt;&gt;));             services.AddTransient&lt;Core.Repositories.Command.ICustomerCommandRepository, CustomerCommandRepository&gt;();          }          // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.         public void Configure(IApplicationBuilder app, IWebHostEnvironment env)         {             if (env.IsDevelopment())             {                 app.UseDeveloperExceptionPage();                 app.UseSwagger();                 app.UseSwaggerUI(c =&gt; c.SwaggerEndpoint(\"/swagger/v1/swagger.json\", \"Ordering.API v1\"));             }              app.UseHttpsRedirection();              app.UseRouting();              app.UseAuthorization();              app.UseEndpoints(endpoints =&gt;             {                 endpoints.MapControllers();             });         }     } }    Step 9: Run migration command on package manager console      In package manager console select Oredering.Infrastructure as defult project.   Run the following command   PM&gt; Add-Migration initialsqlmig PM&gt; Update-Database -Verbose   Step 10: Now run your application and test using swagger. The overall solution structure is look like as following.      Source code  ","categories": ["Design Pattern","Software Architecture","Microservices","Web API","ASP.NET Core","C#","Dapper","EF","ORM"],
        "tags": ["designpattern","softwarearchitecture","microservices","webapi","aspnetcore","csharp","ef","dapper","orm","cleanarchitecture","cqrs"],
        "url": "http://localhost:4000/playing-with-clean-architecture-and-cqrs-pattern-using-asp.net-core-ef-and-dapper/",
        "teaser":null},{
        "title": "Export and Import Docker images and container with asp.net core application",
        "excerpt":"Sometimes we need to work in a disconnected environment. In that situation, we need to export/import docker images and container. Here I will show how to export and import images and container.   Save and load docker images  Step 1: Create a sample asp.net core application - name CatalogApp   Step 2: Containerize CatalogApp     Add a dockerfile in the root directory - here dockerfile and sln file exists in the same directory.   You see how to Containerize a .NET Core app   # https://hub.docker.com/_/microsoft-dotnet FROM mcr.microsoft.com/dotnet/sdk:5.0 AS build WORKDIR /source  # copy csproj and restore as distinct layers COPY *.sln . COPY CatalogApp/*.csproj ./CatalogApp/ RUN dotnet restore  # copy everything else and build app COPY CatalogApp/. ./CatalogApp/ WORKDIR /source/CatalogApp RUN dotnet publish -c release -o /app --no-restore  # final stage/image FROM mcr.microsoft.com/dotnet/aspnet:5.0 WORKDIR /app COPY --from=build /app ./ ENTRYPOINT [\"dotnet\", \"CatalogApp.dll\"]   Step 3: Run in linux container     Navigate to the Dockerfile folder   Run the following commands to build the application in docker     docker build -t catalogapp .           Now you will see an image name catalogapp is created. To check images, run the following command.     docker images           If you want to run the application (images) in docker, run the following command     docker run -it --rm -p 5000:80 --name catalogapp_container catalogapp           Browse application at http://localhost:5000/ to see output   Step 3: Save docker images     To export “catalogapp” image run the following command     docker save -o D:\\Images\\catalogapp.tar catalogapp           You will see a catalogapp.tar file in D:\\Images\\ directory   Step 4: Now load docker images     You may run the following command to remove all docker images     docker rmi $(docker images -q)           Go to to the directory D:\\Images\\   Run the following command to load images. You will see two images is created with dev and latest tag.     PS D:\\Images&gt; docker load -i catalogapp.tar           Run loaded image     Now run the following command to run the catalogapp images with latest tag.     docker run -it --rm -p 5000:80 --name catalogapp_container catalogapp:latest           Browse application at http://localhost:5000/ to see output   Export and import docker container  Step 1: Create a sample asp.net core application as before - name CatalogApp   Step 2: Containerize CatalogApp     Add a dockerfile in the root directory - here dockerfile and sln file exists in the same directory.   You see how to Containerize a .NET Core app   # https://hub.docker.com/_/microsoft-dotnet FROM mcr.microsoft.com/dotnet/sdk:5.0 AS build WORKDIR /source  # copy csproj and restore as distinct layers COPY *.sln . COPY CatalogApp/*.csproj ./CatalogApp/ RUN dotnet restore  # copy everything else and build app COPY CatalogApp/. ./CatalogApp/ WORKDIR /source/CatalogApp RUN dotnet publish -c release -o /app --no-restore  # final stage/image FROM mcr.microsoft.com/dotnet/aspnet:5.0 WORKDIR /app COPY --from=build /app ./ ENTRYPOINT [\"dotnet\", \"CatalogApp.dll\"]   Step 3: Run in linux container     Navigate to the Dockerfile folder   Run the following commands to build the application in docker     docker build -t catalogapp .           Now you will see an image name catalogapp is created. To check images, run the following command.     docker images           If you want to run the application (images) in docker, run the following command     docker run -it --rm -p 5000:80 --name catalogapp_container catalogapp           Browse application at http://localhost:5000/ to see output   Step 3: Export docker container     To export “catalogapp_container” container run the following command     docker export -o D:\\Containers\\catalogapp_container.tar catalogapp_container           You will see a catalogapp_container file in D:\\Containers\\ directory   Step 4: Now import docker container     You may run the following command to remove all docker images     docker rmi $(docker images -q)           Go to to the directory D:\\Containers\\   Run the following command to load images. You will see two images is created with dev and latest tag.     PS D:\\Containers&gt; docker import catalogapp_container.tar catalogapp:imp           Run Imported image     Now run the following command to run the catalogapp images with latest tag.     docker run -it --rm -p 5000:80 --name catalogapp_container catalogapp:imp           Browse application at http://localhost:5000/ to see output   Summary  Let’s summarize the idea of image and container export and import.     Image load is just copying and container import is just like turn container to image.   To export and import images, use docker save and load command.   To export and import container, use docker export and import command.   Exported tar file is smaller than saved tar file. Because the exported file is a container, when the export file is imported, all the history of the image (that is, the information of each layer) cannot be retained, and the rollback operation cannot be performed. And save is based on the mirror image, so you can completely retain the information of each layer when importing.   It’s not possible to rename loaded images but you can do it for imported image like catalogapp:imp   Source Code    ","categories": ["Docker","ASP.NET Core","Microservices"],
        "tags": ["aspnetcore","docker","microservices"],
        "url": "http://localhost:4000/Export-and-Import-Docker-images-and-container-with-asp.net-core-application/",
        "teaser":null},{
        "title": "Configure kubernetes single node cluster and deploy an asp.net core application using docker hub",
        "excerpt":"  Overview  Kubernetes is an open-source container orchestration system for automating software deployment, scaling, and management. Google orignially designed Kubernetes, but the Cloud Native Computing Foundation (CNCF) now maintains the project. In this article, I will show you how to configure kubernetese single node cluster on local environment and deploy an asp.net core application using docker hub.   Tools and Technology used   The following tools and technologies has been used for this application      Visual Studio 2022   Visual C#   ASP.NET Core Web API   Docker Desktop   Step 1: Install &amp; Setup Hyper-V      Go to Control Panel   On your left panel, click on Programs   Then click Programs and Features followed by Turn Windows features on and off.   Check Hyper-V and Windows Hypervisor Platform   Click OK         Run the following command as Administrator on powershell and verify if Hyper-V is installed successfully on your machine:   Get-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V   Note: The above command didn’t work after installed WSL2 on Docker desktop. You may skip this step if you want to install latest version of Docker with WSL 2.   Step 2: Install Docker Desktop for Windows      Download and install docker desktop on windows   Step 3: Install Kubectl     Install and Set Up kubectl on Windows   If you have installed Docker Desktop before, you have installed kubectl and Docker Desktop for windows added it to the PATH.   Check installed kubectl version using the following command   kubectl version --short   Step 4: Install Kubernetes on Windows      Right-click on the Docker tray icon   Click “Settings”   On the left panel click “Kubernetes”   Check Enable Kubernetes and click “Apply &amp; Restart”         Notes: Some commands you can check -   docker info  kubectl cluster-info  docker container ls  kubectl get nodes\t//shows list of nodes   Step 5: Login on docker hub      Got docker hub and create and account it’s free.   Login to your account from docker desktop.   Step 6: Create an ASP.NET core Web API Project           Open Visual Studio and Create an Web API Project. Ex. Catalog.API            Install the following packages in the project.       Install-Package Microsoft.EntityFrameworkCore Install-Package Microsoft.EntityFrameworkCore.SqlServer Install-Package Microsoft.EntityFrameworkCore.Tools Install-Package Microsoft.VisualStudio.Web.CodeGeneration.Design      Add Connection String on appsettings.json as follows   {   \"Logging\": {     \"LogLevel\": {       \"Default\": \"Information\",       \"Microsoft.AspNetCore\": \"Warning\"     }   },   \"AllowedHosts\": \"*\",   \"ConnectionStrings\": {     \"DefaultConnection\": \"Server=192.168.7.154;Database=Demo.CustomerDB;User Id=sa;Password=yourPassword;\"   } }       Create a model class name - Product Model in Models folder   Product.cs   using System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema;  namespace Catalog.API.Models {     public class Product     {         [Key]         [DatabaseGenerated(DatabaseGeneratedOption.Identity)]         public int Id { get; set; }         public string Name { get; set; }          public string Description { get; set; }          public decimal Price { get; set; }          public int AvailableStock { get; set; }          public int RestockThreshold { get; set; }     } }       Add CatalogDbContext class in Db folder as follows   CatalogDbContext.cs    using Microsoft.EntityFrameworkCore;  namespace Catalog.API.Db {     public class CatalogDbContext : DbContext     {         public CatalogDbContext(DbContextOptions&lt;CatalogDbContext&gt; options) : base(options)         {          }         public DbSet&lt;Catalog.API.Models.Product&gt; Product { get; set; }     } }       Create a Contoller class name ProductsController as follows   ProductsController.cs   #nullable disable using Catalog.API.Db; using Catalog.API.Models; using Microsoft.AspNetCore.Mvc; using Microsoft.EntityFrameworkCore;  namespace Catalog.API.Controllers {     [Route(\"api/[controller]\")]     [ApiController]     public class ProductsController : ControllerBase     {         private readonly CatalogDbContext _context;          public ProductsController(CatalogDbContext context)         {             _context = context;         }          // GET: api/Products         [HttpGet]         public async Task&lt;ActionResult&lt;IEnumerable&lt;Product&gt;&gt;&gt; GetProduct()         {             return await _context.Product.ToListAsync();         }          // GET: api/Products/5         [HttpGet(\"{id}\")]         public async Task&lt;ActionResult&lt;Product&gt;&gt; GetProduct(int id)         {             var product = await _context.Product.FindAsync(id);              if (product == null)             {                 return NotFound();             }              return product;         }          // PUT: api/Products/5         // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754         [HttpPut(\"{id}\")]         public async Task&lt;IActionResult&gt; PutProduct(int id, Product product)         {             if (id != product.Id)             {                 return BadRequest();             }              _context.Entry(product).State = EntityState.Modified;              try             {                 await _context.SaveChangesAsync();             }             catch (DbUpdateConcurrencyException)             {                 if (!ProductExists(id))                 {                     return NotFound();                 }                 else                 {                     throw;                 }             }              return NoContent();         }          // POST: api/Products         // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754         [HttpPost]         public async Task&lt;ActionResult&lt;Product&gt;&gt; PostProduct(Product product)         {             _context.Product.Add(product);             await _context.SaveChangesAsync();              return CreatedAtAction(\"GetProduct\", new { id = product.Id }, product);         }          // DELETE: api/Products/5         [HttpDelete(\"{id}\")]         public async Task&lt;IActionResult&gt; DeleteProduct(int id)         {             var product = await _context.Product.FindAsync(id);             if (product == null)             {                 return NotFound();             }              _context.Product.Remove(product);             await _context.SaveChangesAsync();              return NoContent();         }          private bool ProductExists(int id)         {             return _context.Product.Any(e =&gt; e.Id == id);         }     } }       Run the following command to add migration and update database   PM&gt; Add-Migration init-mig PM&gt; Update-Database -Verbose      Add a docker file in the root directory with the following code.   Dockerfile   #See https://aka.ms/containerfastmode to understand how Visual Studio uses this Dockerfile to build your images for faster debugging.  FROM mcr.microsoft.com/dotnet/aspnet:6.0 AS base WORKDIR /app EXPOSE 80 EXPOSE 443  EXPOSE 8011 ENV ASPNETCORE_URLS http://*:8011    ENV ASPNETCORE_ENVIRONMENT=Development   FROM mcr.microsoft.com/dotnet/sdk:6.0 AS build WORKDIR /src COPY [\"/Catalog.API.csproj\", \"Catalog.API/\"] RUN dotnet restore \"Catalog.API/Catalog.API.csproj\"  WORKDIR \"/src/Catalog.API\" COPY . . WORKDIR \"/src/Catalog.API\" RUN dotnet build \"Catalog.API.csproj\" -c Release -o /app/build  FROM build AS publish RUN dotnet publish \"Catalog.API.csproj\" -c Release -o /app/publish  FROM base AS final WORKDIR /app COPY --from=publish /app/publish . ENTRYPOINT [\"dotnet\", \"Catalog.API.dll\"]    Step 7: Push image to docker hub      Go to the project root directory where docker file exists.   Login to docker desktop.   Use the following command to check login status.   docker login      Use the following command to build container image.    docker image build -t mahedee/catalog:1.0.4 .  Format: docker image build -t {username}/{imagename}:{tag} .   Note: There is a dot at the end of the command.      Use the following command to check already created image   docker images      Push image to docker hub using following command.     docker image push mahedee/catalog:1.0.4          Format: docker image push {username}/{imagename}:{tag}       Now login to hub.docker.com and you will see new image inside repository (https://hub.docker.com/repositories)   Step 8: Configure Pod for Kubernetes      Create a pod manifest file name pod.yml in deploy/k8s folder with below code.   apiVersion: v1 kind: Pod metadata:   name: catalog-pod   labels:     app: web-api  spec:   containers:     - name: web-ctr       image: mahedee/catalog:1.0.4       ports:         - containerPort: 8011       Go to the the directory where pod.yml file resides and run the below command.   kubectl apply -f pod.yml   Output:  pod/catalog-pod created      State of the created pods can be checked by the below command.   kubectl get pods --watch      If you need to delete a pod write below command    kubectl delete pod catalog-pod  or   kubectl delete -f pod.yml   Step 9: Expose kubernetes service      Create a service pod using the following command   kubectl expose pod catalog-pod --name=catalog-svc --type=NodePort --port=8011   Output   service/catalog-svc exposed      Check created services using following command   kubectl get svc      To see the details of the service, use the following command   kubectl describe svc catalog-svc   Output:   Name:                     catalog-svc Namespace:                default Labels:                   app=web-api Annotations:              &lt;none&gt; Selector:                 app=web-api Type:                     NodePort IP Family Policy:         SingleStack IP Families:              IPv4 IP:                       10.101.161.222 IPs:                      10.101.161.222 LoadBalancer Ingress:     localhost Port:                     &lt;unset&gt;  8011/TCP TargetPort:               8011/TCP NodePort:                 &lt;unset&gt;  32461/TCP Endpoints:                10.1.0.10:8011 Session Affinity:         None External Traffic Policy:  Cluster Events:                   &lt;none&gt;      From the above output, you can see the node port is exposed on 32461 port.   Now browse the application using the following URL: http://localhost:32461/swagger/index.html   Step 10: Configure Kubernetes dashboard      Dashboard UI is not configured by default. To configure, run the following command.   kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.3.1/aio/deploy/recommended.yaml      You can check the namespaces with the below command.   kubectl get ns   Output:   NAME                   STATUS   AGE default                Active   4d5h kube-node-lease        Active   4d5h kube-public            Active   4d5h kube-system            Active   4d5h kubernetes-dashboard   Active   123m   If you see the above output, we can see a new namespace name - kubernetes-dashboard.      You can check if any pods are running on newly created namespace with the below command.   kubectl -n kubernetes-dashboard get pods -o wide      Check service type with the following command.   kubectl -n kubernetes-dashboard get svc   Default service type is ClusterIP and it cannot be access from outside the cluster. We don’t need to modify Service file because we are not going to expose the cluster to the outside world.      Create a file name - dashboard-adminuser.yaml and add the following code in dashboard-adminuser.yaml   dashboard-adminuser.yaml   apiVersion: v1 kind: Namespace metadata:   name: kubernetes-dashboard --- apiVersion: v1 kind: ServiceAccount metadata:   name: admin-user   namespace: kubernetes-dashboard --- apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRoleBinding metadata:   name: admin-user roleRef:   apiGroup: rbac.authorization.k8s.io   kind: ClusterRole   name: cluster-admin subjects: - kind: ServiceAccount   name: admin-user   namespace: kubernetes-dashboard      As we are using new cluster binding so we need to delete the existing Cluster Binding section from kubernetes-dashboard file, otherwise an error will return. Use below command to delete.   kubectl delete clusterrolebinding kubernetes-dashboard      Go to the directory where dashboard-adminuser.yaml is resides and execute the following command.   kubectl apply -f dashboard-adminuser.yaml      Now we need to find token we can use to log in. Execute following command:   kubectl -n kubernetes-dashboard get secret $(kubectl -n kubernetes-dashboard get sa/admin-user -o jsonpath=\"{.secrets[0].name}\") -o go-template=\"\"      Copy the genereted token and open another terminal type the following command.   kubectl proxy           Now, use below URL to access the dashboard. http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/            Select token of the UI and pest copied token and click sign in. You will see the dashboard screen.       Some Kubectl commands   kubectl version --short // Check Kubectl version  docker info  kubectl cluster-info  docker container ls  kubectl get nodes\t//shows list of nodes  kubectl apply -f pod.yml  kubectl get pods --watch  kubectl get pods -o wide  kubectl describe pods my-pod // to see the details about pod  kubectl delete -f pod.yml // delete already created pod by pod.yml  kubectl delete pod mypod // delete particular pod  kubectl delete svc mysvc // delete particular service  kubectl expose pod my-pod --name=my-svc --type=NodePort // create a service pod  kubectl get svc // check created services  // deploy kubernetes dashboard using the following command kubectl apply -f .\\recommended.yaml.txt  // Verify the running pod kubectl.exe get -f .\\recommended.yaml.txt  // Generate token for the dashboard  ((kubectl -n kube-system describe secret default | Select-String \"token:\") -split \" +\")[1]  kubectl proxy.    Some Docker commands   docker login  docker image build -t mahedee/demoapp:1.0.0 .  docker image push mahedee/demoapp:1.0.0 .  docker images  docker images ls    Source Code    ","categories": ["ASP.NET","ASP.NET Core","C#","Kubernetes"],
        "tags": ["aspnet","aspnetcore","csharp","kubernetes"],
        "url": "http://localhost:4000/kubernetes-single-node-asp.net-docker-hub/",
        "teaser":null},{
        "title": "Configure kubernetes multi-node cluster using containerd and deploy an asp.net core application using docker hub",
        "excerpt":"  Overview  Kubernetes is an open-source container orchestration system for automating software deployment, scaling, and management. Google orignially designed Kubernetes, but the Cloud Native Computing Foundation (CNCF) now maintains the project. In this article, I will show you how to configure kubernetese multi-node cluster using containerd and deploy an asp.net core application using docker hub.   Prerequisite   In this article, I am going to describe the procedure of installation and configuration of Kubernetes on Virtual Machine. Here, I have used VMWare workstation and created 3 VM using the following requirements.   System Requirements     Linux (Ubuntu 21.04)   CPU 2/4 Core   Ram 3/6 GB   Hardisk 15 GB   Container Runtime - Containerd   Make sure swap is disabled on the system.   Note: Kubernetes version 1.20, Docker was the container runtime used. In version 1.20, Docker was deprecated and will be removed in 1.23, or later.   Assumption for Network     We need network connectivity between all nodes in the cluster.   Ensure each system has unique Hostname.   Unique Mac Address for each system.   Required Packages     Containerd - Uses for container runtime   Kubelet - Drive the work on individual nodes in a cluster.   Kubeadm - Kubeadm is a tool which is responsible for bootstraping a cluster and getting the cluster component up, running and configured. This tool also use to join additional nodes to a cluster.   Kubectl - This is the primary command line tool touse to administrate the workloads in a cluster.   I will install all of the above packages in all nodes.   Step 1: Environment setup      Install Ubuntu on 3 VMs to build kubernetes cluster with one control plane node/Master ndoe and two worker nodes.   I have used ubuntu-21.04-desktop-amd64.iso to configure Master and worker nodes.              Resources for Master Node              Linux (Ubuntu 21.04)       CPU 2 Core       Memory 3 GB       Disk Space 15 GB                Resources for Worker Node 1 and 2              Linux (Ubuntu 21.04)       CPU 2 Core       Memory 3 GB       Disk Space 15 GB           Here, I am going to configure each of virtual machine with below hostname and static IP. You can use your static IP based on your network setup. Main thing is that each VM has to access internet and has to connect one another through LAN.                      Machine Name       Host Name       IP Address                       Master       mh-master       192.168.233.10                 Node 1       mh-n1       192.168.233.11                 Node 2       mh-n2       192.168.233.12           Step 2: Configure Master Node           Assume that you have already installed Ubuntu on the VM with the above configuration for Master node.       Configure Static IP on Master Node            Go to to right corner of desktop -&gt; Wired Connection -&gt;Wired Settings -&gt; Setting of Wired Tab -&gt; Ipv4 -&gt; Set the IP, Gateway and DNS as below.             Restart and Login in to the Master VM   Open Terminal and write the below command to update the host name.   sudo nano /etc/hostname  A text editor will open. Update the name to mh-master, save and exit.         Write below command to get the name of ethernet interface   ip link  Output   1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000     link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP mode DEFAULT group default qlen 1000     link/ether 00:0c:29:fa:a6:42 brd ff:ff:ff:ff:ff:ff     altname enp2s1   From the above output, we can see that the ethernet interface name is ens33.      Write the below command on terminal to assign static IP address on the network interface.   sudo nano /etc/netplan/01-network-manager-all.yaml      Update the yml file with the below code.   # Let NetworkManager manage all devices on this system network:   version: 2   renderer: NetworkManager   ethernets:     ens33:       dhcp4: false       addresses: [192.168.233.10/16]       gateway4: 192.168.233.2       nameservers:         addresses: [192.168.233.2,8.8.8.8]     Save and exit.   Apply the changes by running the following command on the terminal.   sudo netplan apply      Now we are going to update hosts file, as we have decided earlier about the host name and IP addresses of each Node. Write below command to open the hosts editor.   sudo nano /etc/hosts      Update the page with below text. Hosts file includes name to IP mapping for VMs.   192.168.233.10  mh-master 192.168.233.11  mh-n1 192.168.233.12  mh-n2        Save and exit.   Reboot the system.   Step 3: Installation of OpenSSH-Server      Run the following command to install openssh-server.   sudo apt-get install openssh-server    Step 4: Turn off Swap Space      Write below command on terminal to swapoff.   sudo swapoff -a      Open fstab file and delete or comment swap line as below, I have commented the swapfile line. Write below command to open fstab file.   sudo nano /etc/fstab        Save and exit.   Reboot the system.   Step 5: Install and configure Containerd   We need to load the two modules and configure them to load on boot before start installing Containerd.      Write the below commands to load modules.   sudo modprobe overlay sudo modprobe br_netfilter      Write below command to make sure loaded modules are set on boot.   cat &lt;&lt;EOF | sudo tee /etc/modules-load.d/containerd.conf overlay br_netfilter EOF      Now we need to Setup required sysctl parameters which persist across reboots. Write below command.   cat &lt;&lt;EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf net.bridge.bridge-nf-call-iptables  = 1 net.ipv4.ip_forward                 = 1 net.bridge.bridge-nf-call-ip6tables = 1 EOF      Apply sysctl parameters without reboot with below command.   sudo sysctl --system      Now is the time to install containerd. Write below commands to install containerd.   sudo apt-get update sudo apt-get install -y containerd   It will take some time to install containerd.      Create a directory for containerd configuration file using following command.   sudo mkdir -p /etc/containerd      Set the cgroup driver for containerd to systemd which is required for the kubelet. Write the following command to open the config.toml file.   sudo nano /etc/containerd/config.toml      Write the following command to generate default configuration file and write the generated output to config.toml file.   sudo containerd config default | sudo tee /etc/containerd/config.toml      Now we are going to set the cgroup driver for containerd to systemd which is required for the kubelet. Write below command to open the config.toml file.   sudo nano /etc/containerd/config.toml      In the config.toml file, update SystemdCgroup. change it from SystemdCgroup = false to SystemdCgroup = true   Note: Ctrl + w for search.         Save and Exit.   Restart containerd with the new configuration. Write below command.   sudo systemctl restart containerd   Step 6: Install and Configure Kubeadm, Kubelet and Kubectl      Install curl using following command   sudo apt install curl   Or   sudo apt-get install -y curl   Note: If you see any process locking message. Restart the VM.      First we need to add Google’s apt repository gpg key to our system so that we can trust the repository. Write below command   curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add --   Output:   Warning: apt-key is deprecated. Manage keyring files in trusted.gpg.d instead (see apt-key(8)). OK      Add the Kubernetes apt repository and that going to configure that local apt repository to our local system. Write below command.   sudo bash -c 'cat &lt;&lt;EOF &gt;/etc/apt/sources.list.d/kubernetes.list deb https://apt.kubernetes.io/ kubernetes-xenial main EOF'      Update the package list and use apt-cache policy to inspect versions available in the repository. Write below command.   sudo apt-get update apt-cache policy kubelet | head -n 20      Now we are going to Install the required packages, if needed we can request a specific version.   VERSION=1.21.0-00 sudo apt-get install -y kubelet=$VERSION kubeadm=$VERSION kubectl=$VERSION      Write below command to mark all four packages hold and this will prevent these packages from being updated.   sudo apt-mark hold kubelet kubeadm kubectl containerd      Check the status of kubelet with below command. The kubelet will enter a crashloop until a cluster is created or the node is joined to an existing cluster.   sudo systemctl status kubelet.service      Check the status of Containerd with below command.   sudo systemctl status containerd.service   If you see the containerd is active and running, it means it is up and loaded and in a proper state.      Ensure Kubelet and Containerd are set to start when the system starts up. Write below command to execute.   sudo systemctl enable kubelet.service sudo systemctl enable containerd.service   Step 7:Install and configure control plane / Master node   Creating a Cluster      Write the below command to download calico.yaml file.   wget https://docs.projectcalico.org/manifests/calico.yaml      Open calico.yaml and find the setting for Pod Network IP address range CALICO_IPV4POOL_CIDR, adjust if needed for your infrastructure to ensure that the Pod network IP, range doesn’t overlap with other networks in our infrastructure.   sudo nano calico.yaml      As you can see the value for CALICO_IPV4POOL_CIDR is 192.168.0.0/16. All pods are going to be allocated IP’s from that network range. We need to make sure that the network range should not overlap with other network in our infracture. Exit without update anything in this page.      Generate a default kubeadm init configuration file. This defines the settings of the cluster being built. Write below command to create kubeconfig init configuration file. This configuration file is going to define the settings of the cluster that kubeadm going to built for us.   kubeadm config print init-defaults | tee ClusterConfiguration.yaml     advertiseAddress is the IP address of the API Server and we are going to update that to our IP address of our Control Plane Node which is our cluster going to be 192.168.254.10. we are also going to update criSocket from dockershim to container runtime we are using which is containerd.      Change the address of the localAPIEndpoint.advertiseAddress to the Control Plane Node’s IP address. Write below command.   sed -i 's/  advertiseAddress: 1.2.3.4/  advertiseAddress: 192.168.233.10/' ClusterConfiguration.yaml      Set the CRI Socket to point to containerd with below command.   sed -i 's/  criSocket: \\/var\\/run\\/dockershim\\.sock/  criSocket: \\/run\\/containerd\\/containerd\\.sock/' ClusterConfiguration.yaml      Added configuration to set the node name for the control plane node to the actual hostname.   sed -i 's/  name: node/  name: mh-master/' ClusterConfiguration.yaml      Set the cgroupDriver to system for the kubelet. This configuration is not exist default that generated by kubeadm so we are going to add that to our cluster configuration file. Write below command.   cat &lt;&lt;EOF | cat &gt;&gt;  ClusterConfiguration.yaml --- apiVersion: kubelet.config.k8s.io/v1beta1 kind: KubeletConfiguration cgroupDriver: systemd EOF      Review the Cluster configuration file, update the version to match what you’ve installed. Write below command.   cat ClusterConfiguration.yaml         Now we are going to bootstrap our cluster and going to add CRI socket since there’s a check for docker in the kubeadm init process.   sudo kubeadm init \\     --config=ClusterConfiguration.yaml \\     --cri-socket /run/containerd/containerd.sock      Configure our account on the Control Plane Node to have admin access to the API server from a non-privileged account. Create a directory by below command.   mkdir -p $HOME/.kube      Now copy that admin.conf file into our users home directory so we can use that to connect to kubernetes.   sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config      We are now going to change the permissions on that so regular user can access the file.   sudo chown $(id -u):$(id -g) $HOME/.kube/config   Step 8: Creating a Pod Network      Deploy yaml file for pod network References with below command.   kubectl apply -f calico.yaml      Look for the all the system pods and calico pods to change to Running. The DNS pod won’t start (pending) until the Pod network is deployed and Running.   kubectl get pods --all-namespaces   Output:   NAMESPACE     NAME                                       READY   STATUS    RESTARTS   AGE kube-system   calico-kube-controllers-6fd7b9848d-vhjxp   1/1     Running   0          113s kube-system   calico-node-zbtrv                          1/1     Running   0          113s kube-system   coredns-558bd4d5db-njgwh                   1/1     Running   0          9m23s kube-system   coredns-558bd4d5db-w2rx7                   1/1     Running   0          9m23s kube-system   etcd-mh-master                             1/1     Running   0          9m30s kube-system   kube-apiserver-mh-master                   1/1     Running   0          9m30s kube-system   kube-controller-manager-mh-master          1/1     Running   0          9m30s kube-system   kube-proxy-bbrh9                           1/1     Running   0          9m23s kube-system   kube-scheduler-mh-master                   1/1     Running   0          9m30s    All pods are running.           Control plane pods:              etcd-mh-master       kube-apiserver-mh-master       kube-controller-manager-mh-master       kube-scheduler-mh-master           Kube proxy Pod:            kube-proxy-bbrh9 (This pod is going to implement service networking on individual nodes)           Core DNS Pods:            coredns-558bd4d5db-njgwh       coredns-558bd4d5db-w2rx7           Calico Pods:            calico-kube-controllers-6fd7b9848d-vhjxp       calico-node-zbtrv           You can also check with below command for continuous iteration status of each pods.   kubectl get pods --all-namespaces --watch      Get a list of our current nodes with below command   kubectl get nodes      Check out the systemd unit and it’s no longer crash looping because it has static pods to start.   sudo systemctl status kubelet.service   You can exit by pressing ( ctrl+c );   Step 9: Static Pod manifests      Check static pod manifests on the Control Plane Node with below command.   ls /etc/kubernetes/manifests   Output:   etcd.yaml  kube-apiserver.yaml  kube-controller-manager.yaml  kube-scheduler.yaml      You can also look more closely at API server and etcd’s manifest with below command.   sudo more /etc/kubernetes/manifests/etcd.yaml sudo more /etc/kubernetes/manifests/kube-apiserver.yaml      Check out the directory where the kubeconfig files live for each of the control plane pods.   ls /etc/kubernetes   Output:   admin.conf  controller-manager.conf  kubelet.conf  manifests  pki  scheduler.conf   Configure Worker Nodes 1   Step 10: Configure Host name, Hosts file and define a static IP address           Assume that you have already installed Ubuntu on the VM with the mentioned configuration for the Node1.       Configure Static IP on Master Node            Go to to right corner of desktop -&gt; Wired Connection -&gt;Wired Settings -&gt; Setting of Wired Tab -&gt; Ipv4 -&gt; Set the IP, Gateway and DNS as below.             Login into Node1 VM and open Terminal.   Write below command to update the host name.   sudo nano /etc/hostname   A text editor will open and update the name to mh-n1 and save and exit.         Write below command to identify the name of the Ethernet interface.   ip link   Output:   1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000     link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP mode DEFAULT group default qlen 1000     link/ether 00:0c:29:32:3d:0f brd ff:ff:ff:ff:ff:ff     altname enp2s1   As we can see that our ethernet interface name is ens33.     To assign a static IP address on the network interface, open the YAML configuration file with a text editor with below command.   sudo nano /etc/netplan/01-network-manager-all.yaml      Update the page with below code.   network:   version: 2   renderer: NetworkManager   ethernets:     ens33:       dhcp4: false       addresses: [192.168.233.11/16]       gateway4: 192.168.233.2       nameservers:         addresses: [192.168.233.2,8.8.8.8]      Save and exit   Apply the changes by running the following command.   sudo netplan apply      Now we are going to update hosts file, as we have decided earlier about the host name and IP addresses of each Node. Write below command to open the hosts editor.   sudo nano /etc/hosts      Hosts file includes name to IP mappings for VMs. Update the page with below text.   192.168.233.10  mh-master 192.168.233.11  mh-n1 192.168.233.12  mh-n2          Save and exit.   Reboot the system.   Step 11: Installation of OpenSSH-Server      Now we have to install openshh-server. Run the following command:   sudo apt-get install openssh-server     Step 12: Turn off swap space      We need disable swap before we start doing any other process. Write below command to swapoff.   sudo swapoff -a      Open fstab file and delete or comment swap line as below, I have commented the swapfile line. Write below command to open fstab file.   sudo nano /etc/fstab      Save and exit.   Reboot the system.   Step 13: Installation and Configuration of Containerd   We are going to load two modules and configure them to load on boot before start installing Containerd. The process of installing containerd is same as we did for Master Node.      Write below commands to load modules.   sudo modprobe overlay sudo modprobe br_netfilter      Write below command to make sure loaded modules are set on boot.   cat &lt;&lt;EOF | sudo tee /etc/modules-load.d/containerd.conf overlay br_netfilter EOF       Now we need to Setup, required sysctl parameters which persist across reboots. Write below command.   cat &lt;&lt;EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf net.bridge.bridge-nf-call-iptables  = 1 net.ipv4.ip_forward                 = 1 net.bridge.bridge-nf-call-ip6tables = 1 EOF       Apply sysctl parameters without reboot with below command.   sudo sysctl --system      Now is the time to install containerd. Write below commands to install containerd.   sudo apt-get update sudo apt-get install -y containerd      We need to apply some configuration specific to containerd, first we will create a directory for a containerd configuration file to keep, then we will use containerd command to generate default configuration file and write the generated output to config.toml file with below commands.   sudo mkdir -p /etc/containerd  sudo containerd config default | sudo tee /etc/containerd/config.toml      Now we are going to set the cgroup driver for containerd to systemd which is required for the kubelet. Write below command to open the config.toml file.   sudo nano /etc/containerd/config.toml      In the config.toml file, update SystemdCgroup. change it from SystemdCgroup = false to SystemdCgroup = true              Save &amp; Exit.            Restart containerd with the new configuration. Write below command.       sudo systemctl restart containerd   Step 14: Install and Configure Kubeadm, Kubelet and Kubectl      Now we are going to Install Kubernetes packages - kubeadm, kubelet and kubectl.  First we need to add Google’s apt repository gpg key to our system so that we can trust the repository. Write below command. (please install curl if not installed)   sudo apt-get install -y curl  curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -    Output:   Warning: apt-key is deprecated. Manage keyring files in trusted.gpg.d instead (see apt-key(8)). OK      Add the Kubernetes apt repository and that going to configure that local apt repository to our local system. Write below command.   sudo bash -c 'cat &lt;&lt;EOF &gt;/etc/apt/sources.list.d/kubernetes.list deb https://apt.kubernetes.io/ kubernetes-xenial main EOF'      Update the package list and use apt-cache policy to inspect versions available in the repository. Write below command.   sudo apt-get update apt-cache policy kubelet | head -n 20   Output:   kubelet:   Installed: (none)   Candidate: 1.23.5-00   Version table:      1.23.5-00 500         500 https://apt.kubernetes.io kubernetes-xenial/main amd64 Packages      1.23.4-00 500         500 https://apt.kubernetes.io kubernetes-xenial/main amd64 Packages      1.23.3-00 500         500 https://apt.kubernetes.io kubernetes-xenial/main amd64 Packages      1.23.2-00 500         500 https://apt.kubernetes.io kubernetes-xenial/main amd64 Packages      1.23.1-00 500         500 https://apt.kubernetes.io kubernetes-xenial/main amd64 Packages      1.23.0-00 500         500 https://apt.kubernetes.io kubernetes-xenial/main amd64 Packages      1.22.8-00 500         500 https://apt.kubernetes.io kubernetes-xenial/main amd64 Packages      1.22.7-00 500         500 https://apt.kubernetes.io kubernetes-xenial/main amd64 Packages  In the output, we can see different versions of kubelet that are available as packages in the repository.      Now we are going to Install the required packages, if needed we can request a specific version.   VERSION=1.21.0-00  sudo apt-get install -y kubelet=$VERSION kubeadm=$VERSION kubectl=$VERSION      Write below command to mark all four packages hold and this will prevent these packages from being updated.   sudo apt-mark hold kubelet kubeadm kubectl containerd      Check the status of kubelet with below command. The kubelet will enter a crashloop until a cluster is created or the node is joined to an existing cluster.   sudo systemctl status kubelet.service          You can exit by pressing ( ctrl+c )            Check the status of Containerd with below command.       sudo systemctl status containerd.service  We can see that Containerd is active and running, so it is up and loaded and in a proper state.      Ensure Kubelet and Containerd are set to start when the system starts up. Write below command to execute.   sudo systemctl enable kubelet.service  sudo systemctl enable containerd.service   Step 15: Configure Worker Nodes 2      Please follow the same instruction to configure Node 2, except update the IP address to 192.168.233.12 and Host name to mh-n2   Step 16: Join the Node to the Cluster   As we have already configured Master and worker nodes, now is the time to connect Nodes with cluster. We going to need both bootstrap token and also the CA Cert hash to join nodes with cluster. We can copy these information from the output of kubeadm init. Bootstrap token is a timed ticket and it has 24 hours lifecyle which means a new token need to be generate after 24 hours.      Login into Master Node and write below command to check if any token is active or not.   sudo kubeadm token list   As we can see, we did not get any result because we don’t have any created token or token has been timed out or expired. In your case, you might get a token if you check after kubeadm init process.      Now we are going to generate a new token with below command.   kubeadm token create   Output:   w8fovt.svvzo8jntyrdqzph   We can see that a new token has been created. If you check token list now, a new token will be found on the list.   kubeadm token list      We can find CA Cert Hash on the Control Plane Node with below command.   openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2&gt;/dev/null | openssl dgst -sha256 -hex | sed 's/^.* //'  Output:   318fba0270967d24200c9eaf21857a7d90bce44a857aa8ea397337e8afe7c18d   Now we can take all of these information and make the join command with kubeadm joins by specifying the bootstrap token and CA Cert Hash but there is another way to connect nodes with cluster. We are going to join nodes with cluster with command.      We can also use print-join-command to generate token and print the join command in the proper format. Write below command and generate the join command.   kubeadm token create --print-join-command   Output:   kubeadm join 192.168.233.10:6443 --token xgsdjp.1u45r4zhk6uhuv43 --discovery-token-ca-cert-hash sha256:318fba0270967d24200c9eaf21857a7d90bce44a857aa8ea397337e8afe7c18d    We can see above well-formatted join command with the proper parameters and values including the location of the API Server, the Bootstrap token and CA Cert Hash.   Now we are going to copy the above generated command and going to use this command on Worker nodes to connect with cluster.      Login into Node1 and use previously generated command from master node. In my case, generated command is below which I am going to use in Node1 and Node2.   sudo kubeadm join 192.168.233.10:6443 –token xgsdjp.1u45r4zhk6uhuv43 –discovery-token-ca-cert-hash sha256:318fba0270967d24200c9eaf21857a7d90bce44a857aa8ea397337e8afe7c18d   ***Note: Above command will be different in your case. Use your generated command instead of using above command.      On the above output we can see, it executes the preflight checks first and then wait for the kubelet to perform the TLS Bootstrap process. We can also see from the bottom output that the node has been joined to the cluster.  We have use the same command on Node 2, in my case mh-n2.         Login back to Control Plane or Master Node, write below command to verify all connected nodes.   kubectl get nodes   Output:   NAME        STATUS   ROLES                  AGE     VERSION mh-master   Ready    control-plane,master   31h     v1.21.0 mh-n1       Ready    &lt;none&gt;                 2m47s   v1.21.0 mh-n2       Ready    &lt;none&gt;                 92s     v1.21.0   ***Note: Above output might say Not Ready until the networking pod is created on the new node. From the above output we can see both nodes are connected on the cluster and status is ready.      On the Control Plane Node, watch for the calico pod and the kube-proxy to change to Running on the newly added nodes by below command.   kubectl get pods --all-namespaces --watch   Step 17: Deploying the Dashboard UI   Dashboard is a web-based Kubernetes user interface which we can use to deploy containerized applications to a Kubernetes cluster, troubleshoot the containerized application, and manage the cluster resources. Dashboard also provides information on the state of Kubernetes resources in the cluster and on any errors that may have occurred.      The Dashboard UI is not deployed by default. To deploy it, run the following command on master node.   kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.3.1/aio/deploy/recommended.yaml   Output:   namespace/kubernetes-dashboard created serviceaccount/kubernetes-dashboard created service/kubernetes-dashboard created secret/kubernetes-dashboard-certs created secret/kubernetes-dashboard-csrf created secret/kubernetes-dashboard-key-holder created configmap/kubernetes-dashboard-settings created role.rbac.authorization.k8s.io/kubernetes-dashboard created clusterrole.rbac.authorization.k8s.io/kubernetes-dashboard created rolebinding.rbac.authorization.k8s.io/kubernetes-dashboard created clusterrolebinding.rbac.authorization.k8s.io/kubernetes-dashboard created deployment.apps/kubernetes-dashboard created service/dashboard-metrics-scraper created deployment.apps/dashboard-metrics-scraper created       Let’s check the namespaces with below command.   kubectl get ns   Output:   NAME                   STATUS   AGE default                Active   47h kube-node-lease        Active   47h kube-public            Active   47h kube-system            Active   47h kubernetes-dashboard   Active   79s   On the above output, we can see a new namesapce - kubernetes-dashboard in the list.      Now is the time to check if any pods are running on newly created namespaces with below command.   kubectl -n kubernetes-dashboard get pods -o wide   Output:   NAME                                         READY   STATUS    RESTARTS   AGE     IP               NODE    NOMINATED NODE   READINESS GATES dashboard-metrics-scraper-856586f554-dvmvg   1/1     Running   0          3m59s   172.16.191.193   mh-n1   &lt;none&gt;           &lt;none&gt; kubernetes-dashboard-67484c44f6-sbgbf        1/1     Running   0          3m59s   172.16.96.129    mh-n2   &lt;none&gt;           &lt;none&gt;  We can see that two pods are running within above namespace.      Check the service type with below command.   kubectl -n kubernetes-dashboard get svc   Output:   NAME                        TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE dashboard-metrics-scraper   ClusterIP   10.111.160.160   &lt;none&gt;        8000/TCP   5m58s kubernetes-dashboard        ClusterIP   10.101.169.107   &lt;none&gt;        443/TCP    5m59s  Default service type is ClusterIP and it cannot be access from outside the cluster. We don’t need to modify Service file because we are not going to expose the cluster to the outside world.           Create a file and name the file dashboard-adminuser.yaml with below command. cat &gt; dashboard-adminuser.yaml            Copy and paste following code on dashboard-adminuser.yaml file.       apiVersion: v1 kind: Namespace metadata:   name: kubernetes-dashboard --- apiVersion: v1 kind: ServiceAccount metadata:   name: admin-user   namespace: kubernetes-dashboard --- apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRoleBinding metadata:   name: admin-user roleRef:   apiGroup: rbac.authorization.k8s.io   kind: ClusterRole   name: cluster-admin subjects: - kind: ServiceAccount   name: admin-user   namespace: kubernetes-dashboard  ```ps  Note: Ctrl + C to exit  * You can check the pasted code on dashboard-adminuser.yaml file using following command.  ```ps sudo nano dashboard-adminuser.yaml      As we are using new cluster binding so we need to delete the existing Cluster Binding section from kubernetes-dashboard file, otherwise an error will return. Use below command to delete.   kubectl delete clusterrolebinding kubernetes-dashboard      Now we are going to execute newly created file with below command.   kubectl apply -f dashboard-adminuser.yaml   Output:   namespace/kubernetes-dashboard unchanged serviceaccount/admin-user created clusterrolebinding.rbac.authorization.k8s.io/admin-user created     Now we need to find token we can use to log in. Execute following command:   kubectl -n kubernetes-dashboard get secret $(kubectl -n kubernetes-dashboard get sa/admin-user -o jsonpath=\"{.secrets[0].name}\") -o go-template=\"\"      From the above output we can see a new token has been generated, we can copy the above output token to login into dashboard.      Use following command to enable the access to the Dashboard using the kubectl command-line tool.   kubectl proxy   Output:   Starting to serve on 127.0.0.1:8001      Use below URL to access the dashboard.   http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/      Use above created token and click sign in button.      Workload section will show empty because we have not deployed any containerized pod yet. You can click cluster tab on left pane and will find list of cluster roles, Namespaces, Nodes and Storage Classes. You will find two nodes in the list of Nodes.      Deploy an asp.net core application in a pod to the target node   Step 18: Assign level to the nodes   Now we are going to deploy a containerized pod to target node. Before we assign the pod we are going to set a label for node.      Check current label of nodes with below command in master node terminal.   kubectl get nodes --show-labels   Output:   NAME        STATUS   ROLES                  AGE     VERSION   LABELS mh-master   Ready    control-plane,master   2d10h   v1.21.0   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=mh-master,kubernetes.io/os=linux,node-role.kubernetes.io/control-plane=,node-role.kubernetes.io/master=,node.kubernetes.io/exclude-from-external-load-balancers= mh-n1       Ready    &lt;none&gt;                 27h     v1.21.0   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=mh-n1,kubernetes.io/os=linux mh-n2       Ready    &lt;none&gt;                 27h     v1.21.0   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=mh-n2,kubernetes.io/os=linux       Now we are going to set custom label for nodes. I have decided to set the label for mh-n1 will be env=dev and mh-n2 will be env=prod. Use below commands to set labels for nodes.   kubectl label nodes mh-n1 env=dev kubectl label nodes mh-n2 env=prod      We can recheck label name again with below command.   kubectl get nodes --show-labels   Output:   NAME        STATUS   ROLES                  AGE     VERSION   LABELS mh-master   Ready    control-plane,master   2d10h   v1.21.0   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=mh-master,kubernetes.io/os=linux,node-role.kubernetes.io/control-plane=,node-role.kubernetes.io/master=,node.kubernetes.io/exclude-from-external-load-balancers= mh-n1       Ready    &lt;none&gt;                 27h     v1.21.0   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,env=dev,kubernetes.io/arch=amd64,kubernetes.io/hostname=mh-n1,kubernetes.io/os=linux mh-n2       Ready    &lt;none&gt;                 27h     v1.21.0   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,env=prod,kubernetes.io/arch=amd64,kubernetes.io/hostname=mh-n2,kubernetes.io/os=linux   Step 19: Deploying Resources Declaratively   Now we are going to deploy pod declaratively with YAML file.      We are going to use dry-run=client to create a yaml manifest file for deployment with a container image. We could write the yaml by hand, but we can use dry-run=client to build it for us. Write below command to generate yaml manifest file.   kubectl create deployment hrm \\      --image=docker.io/mahedee/hrm:1.0.1 \\      --dry-run=client -o yaml | more   Output:   apiVersion: apps/v1 kind: Deployment metadata:   creationTimestamp: null   labels:     app: hrm   name: hrm spec:   replicas: 1   selector:     matchLabels:       app: hrm   strategy: {}   template:     metadata:       creationTimestamp: null       labels:         app: hrm     spec:       containers:       - image: docker.io/mahedee/hrm:1.0.1         name: hrm         resources: {} status: {}        Let’s write this deployment yaml out to file. We are now redirecting previously generated output to deployment.yaml file.   kubectl create deployment hrm \\      --image=docker.io/mahedee/hrm:1.0.1 \\      --dry-run=client -o yaml &gt; deployment.yaml      Edit deployment.yaml file to set a node label. Use below command to edit the file.   sudo nano deployment.yaml      Update the file with below text.   piVersion: apps/v1 kind: Deployment metadata:   creationTimestamp: null   labels:     app: hrm   name: hrm spec:   replicas: 1   selector:     matchLabels:       app: hrm   strategy: {}   template:     metadata:       creationTimestamp: null       labels:         app: hrm     spec:       containers:       - image: docker.io/mahedee/hrm:1.0.1         name: hrm         ports:         - containerPort: 8011         resources: {} status: {}      Use below command to execute the deployment.yaml manifest file.   kubectl apply -f deployment.yaml  Output:   deployment.apps/hrm created      Now generate the yaml for the service with below command.   kubectl expose deployment hrm \\      --port=80 --target-port=8011 \\      --dry-run=client -o yaml | more      Write the service yaml manifest to a file. Target port is 8011. Because image internal port is 8011   kubectl expose deployment hrm        –port=80 –target-port=8011        –dry-run=client -o yaml &gt; service.yaml      Modify the service using the following command.   sudo nano service.yaml   piVersion: v1 kind: Service metadata:   creationTimestamp: null   labels:     app: hrm   name: hrm spec:   type: NodePort   ports:   - port: 80     protocol: TCP     targetPort: 8011   selector:     app: hrm status:   loadBalancer: {}           Save and Exit            Use below command to execute the service yaml file declaratively.       kubectl apply -f service.yaml   Output:   service/hrm created      Check out our current state, Deployment, ReplicaSet, Pod and a Service.   kubectl get pod -o wide  Output:   NAME                   READY   STATUS    RESTARTS   AGE   IP              NODE    NOMINATED NODE   READINESS GATES hrm-697468d799-t48rb   1/1     Running   0          25m   172.16.96.133   mh-n2   &lt;none&gt;           &lt;none&gt;   In the above, we see pod is running on mh-n2 means node 2   kubectl get all -o wide   Output:    NAME                       READY   STATUS    RESTARTS   AGE   IP              NODE    NOMINATED NODE   READINESS GATES pod/hrm-697468d799-t48rb   1/1     Running   0          27m   172.16.96.133   mh-n2   &lt;none&gt;           &lt;none&gt;  NAME                 TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE    SELECTOR service/hrm          NodePort    10.103.252.75   &lt;none&gt;        80:32614/TCP   24m    app=hrm service/kubernetes   ClusterIP   10.96.0.1       &lt;none&gt;        443/TCP        5d4h   &lt;none&gt;  NAME                  READY   UP-TO-DATE   AVAILABLE   AGE   CONTAINERS   IMAGES                        SELECTOR deployment.apps/hrm   1/1     1            1           27m   hrm          docker.io/mahedee/hrm:1.0.1   app=hrm  NAME                             DESIRED   CURRENT   READY   AGE   CONTAINERS   IMAGES                        SELECTOR replicaset.apps/hrm-697468d799   1         1         1       27m   hrm          docker.io/mahedee/hrm:1.0.1   app=hrm,pod-template-hash=697468d799    We can see recent deployed pod and service from the above output and running without error. hrm pod has been deployed to mh-n2 node as per configuration of label. See first row.      Kubectl create deployment we executed, it created a deployment for us. Let’s look more closely at that deployment.   kubectl get deployment hrm   Output:   NAME   READY   UP-TO-DATE   AVAILABLE   AGE hrm    1/1     1            1           13m      Deployments are made of ReplicaSets and ReplicaSets create Pods!   kubectl get replicaset kubectl get pods   Output:   mh-master@mhmaster-virtual-machine:~$ kubectl get replicaset NAME             DESIRED   CURRENT   READY   AGE hrm-697468d799   1         1         1       29m mh-master@mhmaster-virtual-machine:~$ kubectl get pods NAME                   READY   STATUS    RESTARTS   AGE hrm-697468d799-t48rb   1/1     Running   0          30m       Check running service using the following command.   kubectl get svc   Output:   NAME         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE hrm          NodePort    10.103.252.75   &lt;none&gt;        80:32614/TCP   27m kubernetes   ClusterIP   10.96.0.1       &lt;none&gt;        443/TCP        5d5h      Check service information using following command.   kubectl get svc hrm  Output:  NAME   TYPE       CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE hrm    NodePort   10.103.252.75   &lt;none&gt;        80:32614/TCP   33m      Acces the service inside the cluster using curl command.   curl http://10.103.252.75:80/swagger/index.html      We can also get that information from using describe.   kubectl describe service hrm   Output:   Name:                     hrm Namespace:                default Labels:                   app=hrm Annotations:              &lt;none&gt; Selector:                 app=hrm Type:                     NodePort IP Family Policy:         SingleStack IP Families:              IPv4 IP:                       10.103.252.75 IPs:                      10.103.252.75 Port:                     &lt;unset&gt;  80/TCP TargetPort:               8011/TCP NodePort:                 &lt;unset&gt;  32614/TCP Endpoints:                172.16.96.133:8011 Session Affinity:         None External Traffic Policy:  Cluster Events:                   &lt;none&gt;      Access the service using the following URL on the browser.   http://localhost:32614/swagger/index.html   Output:      Step 20: Verify with Dashboard UI      Log back to dashboard UI to verify the current state. (Follow step -17)         From the above image, I see pod is running on node 2 and everything running health.   Thanks for your long patients   Source Code   ","categories": ["ASP.NET","ASP.NET Core","C#","Kubernetes","Microservices","Docker"],
        "tags": ["aspnet","aspnetcore","csharp","kubernetes","microservices","docker"],
        "url": "http://localhost:4000/configure-kubernetes-multi-node-cluster/",
        "teaser":null},{
        "title": "Authentication and authorization using JWT in asp.net core application",
        "excerpt":"  Introduction   Authentication and authorization is a key part of an application. Sometimes we struggle to implement authentication and authorization in a web api application. In this article I will show you, how to implement authentication and authorization using JWT in an asp.net core web application.   Tools and technologies used     Clean Architecture   CQRS Pattern   Visual Studio 2022   .NET 6.0   SQLite   Dapper   Entity Framework   AutoMapper   MediatR   ASP.NET Core Web API   C#   Implementation   Step 1: Create solution and projects.      Create a solution name Ecommerce   Add a new web api project, name - Ordering.API in the solution.   Add 3 class library project, name - Ordering.Application, Odering.Core and Ordering.Infrastructure in the solution.   Step 2: Install nuget packages.      Install following nuget packages in Ordering.Infrastructure Project   PM&gt; Install-Package Dapper PM&gt; Install-Package Microsoft.Data.Sqlite.Core PM&gt; Install-Package Microsoft.EntityFrameworkCore PM&gt; Install-Package Microsoft.EntityFrameworkCore.Design PM&gt; Install-Package Microsoft.EntityFrameworkCore.Relational PM&gt; Install-Package Microsoft.EntityFrameworkCore.Tools PM&gt; Install-Package Microsoft.Extensions.Configuration.Abstractions PM&gt; Install-Package Microsoft.AspNetCore.Identity PM&gt; Install-Package Microsoft.AspNetCore.Identity.EntityFrameworkCore PM&gt; Install-Package Microsoft.EntityFrameworkCore.Sqlite       Install following nuget packages in Ordering.Application Project   PM&gt; Install-Package AutoMapper PM&gt; Install-Package MediatR PM&gt; Install-Package FluentValidation PM&gt; Install-Package FluentValidation.DependencyInjectionExtensions PM&gt; Install-Package Microsoft.Extensions.DependencyInjection.Abstractions PM&gt; Install-Package Microsoft.Extensions.Identity.Core PM&gt; Install-Package Microsoft.IdentityModel.Tokens PM&gt; Install-Package System.IdentityModel.Tokens.Jwt      Install following nuget packages in Ordering.API Project   PM&gt; Install-Package AutoMapper.Extensions.Microsoft.DependencyInjection PM&gt; Install-Package MediatR PM&gt; Install-Package MediatR.Extensions.Microsoft.DependencyInjection PM&gt; Install-Package Microsoft.EntityFrameworkCore.Design PM&gt; Install-Package Microsoft.EntityFrameworkCore.Sqlite PM&gt; Install-Package Microsoft.EntityFrameworkCore.Tools PM&gt; Install-Package Microsoft.AspNetCore.Authentication.JwtBearer PM&gt; Install-Package System.Configuration.ConfigurationManager   Step 3: Create Entity class  in Ordering.Core project      Create BaseEntity in Ordering.Core/Entities/Base folder   Create Customer in Ordering.Core/Entities folder   BaseEntity.cs   using System; using System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema;  namespace Ordering.Core.Entities.Base {     public class BaseEntity     {         [Key]         [DatabaseGenerated(DatabaseGeneratedOption.Identity)]         public Int64 Id { get; set; }         public DateTime CreatedDate { get; set; }          public DateTime ModifiedDate { get; private set; }          public BaseEntity()         {             this.ModifiedDate = DateTime.Now;         }     } }   Customer.cs   using Ordering.Core.Entities.Base;  namespace Ordering.Core.Entities {     public class Customer : BaseEntity     {         public string FirstName { get; set; }         public string LastName { get; set; }         public string Email { get; set; }         public string ContactNumber { get; set; }         public string Address { get; set; }     } }    Step 4: Create Command and Query Interface in Ordering.Core project      Create ICommandRepository in Ordering.Core/Repositories/Command/Base folder   Create ICommandCustomerRepository in Ordering.Core/Repositories/Command folder   Create IQueryRepository in Ordering.Core/Repositories/Query/Base folder   Create ICustomerQueryRepository in Ordering.Core/Repositories/Query folder   ICommandRepository.cs  using System.Threading.Tasks;  namespace Ordering.Core.Repositories.Command.Base {     public interface ICommandRepository&lt;T&gt; where T : class     {         Task&lt;T&gt; AddAsync(T entity);         Task UpdateAsync(T entity);         Task DeleteAsync(T entity);     } }    ICustomerCommandRepository.cs   using Ordering.Core.Entities; using Ordering.Core.Repositories.Command.Base;  namespace Ordering.Core.Repositories.Command {     public interface ICustomerCommandRepository : ICommandRepository&lt;Customer&gt;     {      } }  IQueryRepository.cs   namespace Ordering.Core.Repositories.Query.Base {     public interface IQueryRepository &lt;T&gt; where T : class     {         // Generic repository for all if any     } }   ICustomerQueryRepository.cs   using Ordering.Core.Entities; using Ordering.Core.Repositories.Query.Base; using System; using System.Collections.Generic; using System.Threading.Tasks;  namespace Ordering.Core.Repositories.Query {     public interface ICustomerQueryRepository : IQueryRepository&lt;Customer&gt;     {         //Custom operation which is not generic         Task&lt;IReadOnlyList&lt;Customer&gt;&gt; GetAllAsync();         Task&lt;Customer&gt; GetByIdAsync(Int64 id);         Task&lt;Customer&gt; GetCustomerByEmail(string email);     } }    Step 5: Create DbConnector and OrderingContext in Ordering.Infrastructure project      Create DbConnector class in Ordering.Infrastructure/Data folder for SQLite connection for query.   DbConnector.cs   using Microsoft.Data.Sqlite; using Microsoft.Extensions.Configuration; using System.Data;  namespace Ordering.Infrastructure.Data {     public class DbConnector     {         private readonly IConfiguration _configuration;          protected DbConnector(IConfiguration configuration)         {             _configuration = configuration;         }          public IDbConnection CreateConnection()         {             string _connectionString = _configuration.GetConnectionString(\"DefaultConnection\");             return new SqliteConnection(_connectionString);         }     } }      Create OrderingContext class in Ordering.Infrastructure/Data folder for command.   OrderingContext.cs   using Microsoft.EntityFrameworkCore; using Ordering.Core.Entities;  namespace Ordering.Infrastructure.Data {     public class OrderingContext : DbContext     {         public OrderingContext(DbContextOptions&lt;OrderingContext&gt; options) : base (options)         {          }          public DbSet&lt;Customer&gt; Customers { get; set; }     } }    Step 6: Create Command and Query Repository in Ordering.Infrastructure project      Create CommandRepository in Ordering.Infrastructure/Repositories/Command/Base folder   CommandRepository.cs   using Microsoft.EntityFrameworkCore; using Ordering.Core.Repositories.Command.Base; using Ordering.Infrastructure.Data; using System.Threading.Tasks;  namespace Ordering.Infrastructure.Repository.Command.Base {     public class CommandRepository&lt;T&gt; : ICommandRepository&lt;T&gt; where T : class     {         protected readonly OrderingContext _context;          public CommandRepository(OrderingContext context)         {             _context = context;         }         public async Task&lt;T&gt; AddAsync(T entity)         {             await _context.Set&lt;T&gt;().AddAsync(entity);             await _context.SaveChangesAsync();             return entity;         }          public async Task UpdateAsync(T entity)         {             _context.Entry(entity).State = EntityState.Modified;             await _context.SaveChangesAsync();         }          public async Task DeleteAsync(T entity)         {             _context.Set&lt;T&gt;().Remove(entity);             await _context.SaveChangesAsync();         }     } }       Create CommandCustomerRepository in Ordering.Infrastructure/Repositories/Command folder   CustomerCommandRepository.cs   using Ordering.Core.Entities; using Ordering.Core.Repositories.Command; using Ordering.Infrastructure.Data; using Ordering.Infrastructure.Repository.Command.Base;  namespace Ordering.Infrastructure.Repository.Command {      public class CustomerCommandRepository : CommandRepository&lt;Customer&gt;, ICustomerCommandRepository     {         public CustomerCommandRepository(OrderingContext context) : base(context)         {          }     } }      Create QueryRepository in Ordering.Infrastructure/Repositories/Query/Base folder   QueryRepository.cs   using Microsoft.Extensions.Configuration; using Ordering.Core.Repositories.Query.Base; using Ordering.Infrastructure.Data;  namespace Ordering.Infrastructure.Repository.Query.Base {     public class QueryRepository&lt;T&gt; : DbConnector,  IQueryRepository&lt;T&gt; where T : class     {         public QueryRepository(IConfiguration configuration)             : base(configuration)         {          }     } }      Create CustomerQueryRepository in Ordering.Infrastructure/Repositories/Query folder   CustomerQueryRepository.cs   using Dapper; using Microsoft.Extensions.Configuration; using Ordering.Core.Entities; using Ordering.Core.Repositories.Query; using Ordering.Infrastructure.Repository.Query.Base; using System; using System.Collections.Generic; using System.Data; using System.Linq; using System.Threading.Tasks;  namespace Ordering.Infrastructure.Repository.Query {     public class CustomerQueryRepository : QueryRepository&lt;Customer&gt;, ICustomerQueryRepository     {         public CustomerQueryRepository(IConfiguration configuration)              : base(configuration)         {          }          public async Task&lt;IReadOnlyList&lt;Customer&gt;&gt; GetAllAsync()         {             try             {                 var query = \"SELECT * FROM CUSTOMERS\";                  using (var connection = CreateConnection())                 {                     return (await connection.QueryAsync&lt;Customer&gt;(query)).ToList();                 }             }             catch (Exception exp)             {                 throw new Exception(exp.Message, exp);             }         }          public async Task&lt;Customer&gt; GetByIdAsync(long id)         {             try             {                 var query = \"SELECT * FROM CUSTOMERS WHERE Id = @Id\";                 var parameters = new DynamicParameters();                 parameters.Add(\"Id\", id, DbType.Int64);                  using (var connection = CreateConnection())                 {                     return (await connection.QueryFirstOrDefaultAsync&lt;Customer&gt;(query, parameters));                 }             }             catch (Exception exp)             {                 throw new Exception(exp.Message, exp);             }         }          public async Task&lt;Customer&gt; GetCustomerByEmail(string email)         {             try             {                 var query = \"SELECT * FROM CUSTOMERS WHERE Email = @email\";                 var parameters = new DynamicParameters();                 parameters.Add(\"Email\", email, DbType.String);                  using (var connection = CreateConnection())                 {                     return (await connection.QueryFirstOrDefaultAsync&lt;Customer&gt;(query, parameters));                 }             }             catch (Exception exp)             {                 throw new Exception(exp.Message, exp);             }         }     } }       Add a property in ApplicationUser class in Ordering.Infrastructure/Identity/   ApplicationUser.cs    using Microsoft.AspNetCore.Identity;  namespace Ordering.Infrastructure.Identity {     public class ApplicationUser : IdentityUser     {         public string? FullName { get; set; }     } }       Add IdentityService and TokenGenerator class in Ordering.Infrastructure/Services/   IdentityService.cs   using Microsoft.AspNetCore.Identity; using Microsoft.EntityFrameworkCore; using Ordering.Application.Common.Exceptions; using Ordering.Application.Common.Interfaces; using Ordering.Infrastructure.Identity;  namespace Ordering.Infrastructure.Services {     public class IdentityService : IIdentityService     {         private readonly UserManager&lt;ApplicationUser&gt; _userManager;         private readonly SignInManager&lt;ApplicationUser&gt; _signInManager;         private readonly RoleManager&lt;IdentityRole&gt; _roleManager;          public IdentityService(UserManager&lt;ApplicationUser&gt; userManager, SignInManager&lt;ApplicationUser&gt; signInManager, RoleManager&lt;IdentityRole&gt; roleManager)         {             _userManager = userManager;             _signInManager = signInManager;             _roleManager = roleManager;             _roleManager = roleManager;         }          public async Task&lt;bool&gt; AssignUserToRole(string userName, IList&lt;string&gt; roles)         {             var user = await _userManager.Users.FirstOrDefaultAsync(x =&gt; x.UserName == userName);             if (user == null)             {                 throw new NotFoundException(\"User not found\");             }              var result = await _userManager.AddToRolesAsync(user, roles);             return result.Succeeded;         }          public async Task&lt;bool&gt; CreateRoleAsync(string roleName)         {             var result = await _roleManager.CreateAsync(new IdentityRole(roleName));             if(!result.Succeeded)             {                 throw new ValidationException(result.Errors);             }             return result.Succeeded;         }           // Return multiple value         public async Task&lt;(bool isSucceed, string userId)&gt; CreateUserAsync(string userName, string password, string email, string fullName, List&lt;string&gt; roles)         {             var user = new ApplicationUser()             {                 FullName = fullName,                 UserName = userName,                 Email = email             };              var result = await _userManager.CreateAsync(user, password);              if (!result.Succeeded)             {                 throw new ValidationException(result.Errors);             }              var addUserRole = await _userManager.AddToRolesAsync(user, roles);             if (!addUserRole.Succeeded)             {                 throw new ValidationException(addUserRole.Errors);             }             return (result.Succeeded, user.Id);         }          public async Task&lt;bool&gt; DeleteRoleAsync(string roleId)         {             var roleDetails = await _roleManager.FindByIdAsync(roleId);             if (roleDetails == null)             {                 throw new NotFoundException(\"Role not found\");             }              if (roleDetails.Name == \"Administrator\")             {                 throw new BadRequestException(\"You can not delete Administrator Role\");             }             var result = await _roleManager.DeleteAsync(roleDetails);             if (!result.Succeeded)             {                 throw new ValidationException(result.Errors);             }             return result.Succeeded;         }          public async Task&lt;bool&gt; DeleteUserAsync(string userId)         {             var user = await _userManager.Users.FirstOrDefaultAsync(x =&gt; x.Id == userId);             if (user == null)             {                 throw new NotFoundException(\"User not found\");                 //throw new Exception(\"User not found\");             }              if (user.UserName == \"system\" || user.UserName == \"admin\")             {                 throw new Exception(\"You can not delete system or admin user\");                 //throw new BadRequestException(\"You can not delete system or admin user\");             }             var result = await _userManager.DeleteAsync(user);             return result.Succeeded;         }          public async Task&lt;List&lt;(string id, string fullName, string userName, string email)&gt;&gt; GetAllUsersAsync()         {             var users = await _userManager.Users.Select(x =&gt; new             {                 x.Id,                 x.FullName,                 x.UserName,                 x.Email             }).ToListAsync();              return users.Select(user =&gt; (user.Id, user.FullName, user.UserName, user.Email)).ToList();         }          public Task&lt;List&lt;(string id, string userName, string email, IList&lt;string&gt; roles)&gt;&gt; GetAllUsersDetailsAsync()         {             throw new NotImplementedException();              //var roles = await _userManager.GetRolesAsync(user);             //return (user.Id, user.UserName, user.Email, roles);              //var users = _userManager.Users.ToListAsync();         }          public async Task&lt;List&lt;(string id, string roleName)&gt;&gt; GetRolesAsync()         {             var roles = await _roleManager.Roles.Select(x =&gt; new             {                 x.Id,                 x.Name             }).ToListAsync();              return roles.Select(role =&gt; (role.Id, role.Name)).ToList();         }          public async Task&lt;(string userId, string fullName, string UserName, string email, IList&lt;string&gt; roles)&gt; GetUserDetailsAsync(string userId)         {             var user = await _userManager.Users.FirstOrDefaultAsync(x =&gt; x.Id == userId);             if (user == null)             {                 throw new NotFoundException(\"User not found\");                          }             var roles = await _userManager.GetRolesAsync(user);             return (user.Id, user.FullName, user.UserName, user.Email, roles);         }          public async Task&lt;(string userId, string fullName, string UserName, string email, IList&lt;string&gt; roles)&gt; GetUserDetailsByUserNameAsync(string userName)         {             var user = await _userManager.Users.FirstOrDefaultAsync(x =&gt; x.UserName == userName);             if (user == null)             {                 throw new NotFoundException(\"User not found\");             }             var roles = await _userManager.GetRolesAsync(user);             return (user.Id, user.FullName, user.UserName, user.Email, roles);         }          public async Task&lt;string&gt; GetUserIdAsync(string userName)         {             var user = await _userManager.Users.FirstOrDefaultAsync(x =&gt; x.UserName == userName);             if (user == null)             {                 throw new NotFoundException(\"User not found\");                 //throw new Exception(\"User not found\");             }             return await _userManager.GetUserIdAsync(user);         }          public async Task&lt;string&gt; GetUserNameAsync(string userId)         {             var user = await _userManager.Users.FirstOrDefaultAsync(x =&gt; x.Id == userId);             if (user == null)             {                 throw new NotFoundException(\"User not found\");                 //throw new Exception(\"User not found\");             }             return await _userManager.GetUserNameAsync(user);         }          public async Task&lt;List&lt;string&gt;&gt; GetUserRolesAsync(string userId)         {             var user = await _userManager.Users.FirstOrDefaultAsync(x =&gt; x.Id == userId);             if (user == null)             {                 throw new NotFoundException(\"User not found\");             }             var roles = await _userManager.GetRolesAsync(user);             return roles.ToList();         }          public async Task&lt;bool&gt; IsInRoleAsync(string userId, string role)         {             var user = await _userManager.Users.FirstOrDefaultAsync(x =&gt; x.Id == userId);              if(user == null)             {                 throw new NotFoundException(\"User not found\");             }             return await _userManager.IsInRoleAsync(user, role);         }          public async Task&lt;bool&gt; IsUniqueUserName(string userName)         {             return await _userManager.FindByNameAsync(userName) == null;         }          public async Task&lt;bool&gt; SigninUserAsync(string userName, string password)         {             var result = await _signInManager.PasswordSignInAsync(userName, password, true, false);             return result.Succeeded;           }          public async Task&lt;bool&gt; UpdateUserProfile(string id, string fullName, string email, IList&lt;string&gt; roles)         {             var user = await _userManager.FindByIdAsync(id);             user.FullName = fullName;             user.Email = email;             var result = await _userManager.UpdateAsync(user);              return result.Succeeded;         }          public async Task&lt;(string id, string roleName)&gt; GetRoleByIdAsync(string id)         {             var role = await _roleManager.FindByIdAsync(id);             return (role.Id, role.Name);         }          public async Task&lt;bool&gt; UpdateRole(string id, string roleName)         {             if (roleName != null)             {                 var role = await _roleManager.FindByIdAsync(id);                 role.Name = roleName;                 var result = await _roleManager.UpdateAsync(role);                 return result.Succeeded;             }             return false;         }          public async Task&lt;bool&gt; UpdateUsersRole(string userName, IList&lt;string&gt; usersRole)         {             var user =  await _userManager.FindByNameAsync(userName);             var existingRoles = await _userManager.GetRolesAsync(user);             var result = await _userManager.RemoveFromRolesAsync(user, existingRoles);             result = await _userManager.AddToRolesAsync(user, usersRole);              return result.Succeeded;         }     } }   TokenGenerator.cs    using Microsoft.IdentityModel.Tokens; using Ordering.Application.Common.Interfaces; using System.IdentityModel.Tokens.Jwt; using System.Security.Claims; using System.Text;  namespace Ordering.Infrastructure.Services {     public class TokenGenerator : ITokenGenerator     {          private readonly string _key;         private readonly string _issuer;         private readonly string _audience;         private readonly string _expiryMinutes;          public TokenGenerator(string key, string issueer, string audience, string expiryMinutes)         {             _key = key;             _issuer = issueer;             _audience = audience;             _expiryMinutes = expiryMinutes;         }          public string GenerateJWTToken((string userId, string userName, IList&lt;string&gt; roles) userDetails)         {             var securityKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_key));             var signingCredentials = new SigningCredentials(securityKey, SecurityAlgorithms.HmacSha256);              var (userId, userName, roles) = userDetails;              var claims = new List&lt;Claim&gt;()             {                 new Claim(JwtRegisteredClaimNames.Sub, userName),                 new Claim(JwtRegisteredClaimNames.Jti, userId),                 new Claim(ClaimTypes.Name, userName),                 new Claim(\"UserId\", userId)             };             claims.AddRange(roles.Select(role =&gt; new Claim(ClaimTypes.Role, role)));               var token = new JwtSecurityToken(                 issuer: _issuer,                 audience: _audience,                 claims: claims,                 expires: DateTime.Now.AddMinutes(Convert.ToDouble(_expiryMinutes)),                 signingCredentials: signingCredentials            );              var encodedToken = new JwtSecurityTokenHandler().WriteToken(token);             return encodedToken;         }     } }       Create DependencyInjection class in Ordering.Application root folder   DependencyInjection.cs    using Microsoft.AspNetCore.Identity; using Microsoft.EntityFrameworkCore; using Microsoft.Extensions.Configuration; using Microsoft.Extensions.DependencyInjection; using Ordering.Application.Common.Interfaces; using Ordering.Core.Repositories.Command; using Ordering.Core.Repositories.Command.Base; using Ordering.Core.Repositories.Query; using Ordering.Core.Repositories.Query.Base; using Ordering.Infrastructure.Data; using Ordering.Infrastructure.Identity; using Ordering.Infrastructure.Repository.Command; using Ordering.Infrastructure.Repository.Command.Base; using Ordering.Infrastructure.Repository.Query; using Ordering.Infrastructure.Repository.Query.Base; using Ordering.Infrastructure.Services;  namespace Ordering.Infrastructure {     public static class DependencyInjection     {         public static IServiceCollection AddInfrastructure(this IServiceCollection services,             IConfiguration configuration)         {             services.AddDbContext&lt;OrderingContext&gt;(options =&gt; options.UseSqlite(configuration.GetConnectionString(\"DefaultConnection\"),                 b =&gt; b.MigrationsAssembly(typeof(OrderingContext).Assembly.FullName)                 ));              services.AddIdentity&lt;ApplicationUser, IdentityRole&gt;()             .AddEntityFrameworkStores&lt;OrderingContext&gt;()             .AddDefaultTokenProviders();              services.Configure&lt;IdentityOptions&gt;(options =&gt;             {                 // Default Lockout settings.                 options.Lockout.DefaultLockoutTimeSpan = TimeSpan.FromMinutes(5);                 options.Lockout.MaxFailedAccessAttempts = 5;                 options.Lockout.AllowedForNewUsers = true;                 // Default Password settings.                 options.Password.RequireDigit = false;                 options.Password.RequireLowercase = true;                 options.Password.RequireNonAlphanumeric = false; // For special character                 options.Password.RequireUppercase = false;                 options.Password.RequiredLength = 6;                 options.Password.RequiredUniqueChars = 1;                 // Default SignIn settings.                 options.SignIn.RequireConfirmedEmail = false;                 options.SignIn.RequireConfirmedPhoneNumber = false;                 options.User.RequireUniqueEmail = true;             });               services.AddScoped&lt;IIdentityService, IdentityService&gt;();              services.AddScoped(typeof(IQueryRepository&lt;&gt;), typeof(QueryRepository&lt;&gt;));             services.AddTransient&lt;ICustomerQueryRepository, CustomerQueryRepository&gt;();             services.AddScoped(typeof(ICommandRepository&lt;&gt;), typeof(CommandRepository&lt;&gt;));             services.AddTransient&lt;ICustomerCommandRepository, CustomerCommandRepository&gt;();               return services;         }     } }    Step 7: Now organize Ordering.Application layer      Create DTO classes in Ordering.Application/DTOs folder   AuthResponseDTO.cs   namespace Ordering.Application.DTOs {     public class AuthResponseDTO     {         public string UserId { get; set; }         public string Name { get; set; }         public string Token { get; set; }     } }    CustomerResponse.cs   namespace Ordering.Application.DTOs {     // Customer response or DTO class     public class CustomerResponse     {         public Int64 Id { get; set; }         public string FirstName { get; set; }         public string LastName { get; set; }         public string Email { get; set; }         public string ContactNumber { get; set; }         public string Address { get; set; }     } }    RoleResponseDTO.cs   namespace Ordering.Application.DTOs {     // Customer response or DTO class     public class CustomerResponse     {         public Int64 Id { get; set; }         public string FirstName { get; set; }         public string LastName { get; set; }         public string Email { get; set; }         public string ContactNumber { get; set; }         public string Address { get; set; }     } }    UserDetailsResponseDTO.cs   namespace Ordering.Application.DTOs {     public class UserDetailsResponseDTO     {         public string Id { get; set; }         public string FullName { get; set; }         public string UserName { get; set; }         public string Email { get; set; }         public IList&lt;string&gt; Roles { get; set; }     } }    UserResponseDTO.cs   namespace Ordering.Application.DTOs {     public class UserResponseDTO     {         public string Id { get; set; }         public string FullName { get; set; }         public string UserName { get; set; }         public string Email { get; set; }     } }       Create Custom Exceptions classes in Ordering.Application/Common/Exceptions folder   BadRequestException.cs   namespace Ordering.Application.Common.Exceptions {     public class BadRequestException : Exception     {         public BadRequestException() : base()         {          }          public BadRequestException(string message) : base(message)         {          }          public BadRequestException(string message, Exception exp) : base(message, exp)         {          }     } }    ForbiddenAccessException.cs   namespace Ordering.Application.Common.Exceptions {     public class ForbiddenAccessException : Exception     {         public ForbiddenAccessException() : base() { }     } }    NotFoundException.cs   namespace Ordering.Application.Common.Exceptions {     public class NotFoundException : Exception     {         public NotFoundException() : base()         {          }          public NotFoundException(string message) : base(message)         {          }          public NotFoundException(string message, Exception exp) : base(message, exp)         {          }          public NotFoundException(string name, object key)             : base($\"Entity \\\"{name}\\\" ({key}) was not found.\")         {          }     } }    ValidationException.cs    using FluentValidation.Results; using Microsoft.AspNetCore.Identity;  namespace Ordering.Application.Common.Exceptions {     public class ValidationException : Exception     {         public ValidationException()             : base(\"One or more validation failures have occurred.\")         {             Errors = new Dictionary&lt;string, string[]&gt;();         }          public ValidationException(IEnumerable&lt;ValidationFailure&gt; failures)             : this()         {             Errors = failures                 .GroupBy(e =&gt; e.PropertyName, e =&gt; e.ErrorMessage)                 .ToDictionary(failureGroup =&gt; failureGroup.Key, failureGroup =&gt; failureGroup.ToArray());         }          public ValidationException(IEnumerable&lt;IdentityError&gt; errors) : this()         {             Errors = errors                 .GroupBy(e =&gt; e.Code, e =&gt; e.Description)                 .ToDictionary(failureGroup =&gt; failureGroup.Key, failureGroup =&gt; failureGroup.ToArray());         }          public IDictionary&lt;string, string[]&gt; Errors { get; }     } }       Create some interface in Ordering.Application/Common/Interfaces   IIdentityService.cs   namespace Ordering.Application.Common.Interfaces {     public interface IIdentityService     {         // User section         Task&lt;(bool isSucceed, string userId)&gt; CreateUserAsync(string userName, string password, string email, string fullName, List&lt;string&gt; roles);         Task&lt;bool&gt; SigninUserAsync(string userName, string password);         Task&lt;string&gt; GetUserIdAsync(string userName);         Task&lt;(string userId, string fullName, string UserName, string email, IList&lt;string&gt; roles)&gt; GetUserDetailsAsync(string userId);         Task&lt;(string userId, string fullName, string UserName, string email, IList&lt;string&gt; roles)&gt; GetUserDetailsByUserNameAsync(string userName);         Task&lt;string&gt; GetUserNameAsync(string userId);         Task&lt;bool&gt; DeleteUserAsync(string userId);         Task&lt;bool&gt; IsUniqueUserName(string userName);         Task&lt;List&lt;(string id, string fullName, string userName, string email)&gt;&gt; GetAllUsersAsync();         Task&lt;List&lt;(string id, string userName, string email, IList&lt;string&gt; roles)&gt;&gt; GetAllUsersDetailsAsync();         Task&lt;bool&gt; UpdateUserProfile(string id, string fullName, string email, IList&lt;string&gt; roles);          // Role Section         Task&lt;bool&gt; CreateRoleAsync(string roleName);         Task&lt;bool&gt; DeleteRoleAsync(string roleId);         Task&lt;List&lt;(string id, string roleName)&gt;&gt; GetRolesAsync();         Task&lt;(string id, string roleName)&gt; GetRoleByIdAsync(string id);         Task&lt;bool&gt; UpdateRole(string id, string roleName);          // User's Role section         Task&lt;bool&gt; IsInRoleAsync(string userId, string role);         Task&lt;List&lt;string&gt;&gt; GetUserRolesAsync(string userId);         Task&lt;bool&gt; AssignUserToRole(string userName, IList&lt;string&gt; roles);         Task&lt;bool&gt; UpdateUsersRole(string userName, IList&lt;string&gt; usersRole);       } }    ITokenGenerator.cs   namespace Ordering.Application.Common.Interfaces {     public interface ITokenGenerator     {         //public string GenerateToken(string userName, string password);         public string GenerateJWTToken((string userId, string userName, IList&lt;string&gt; roles) userDetails);     } }       Create Auth Command and Command Handler in Ordering.Application/Commands/Auth folder   AuthCommand.cs    using MediatR; using Ordering.Application.Common.Exceptions; using Ordering.Application.Common.Interfaces; using Ordering.Application.DTOs;  namespace Ordering.Application.Commands.Auth {     public class AuthCommand : IRequest&lt;AuthResponseDTO&gt;     {         public string UserName { get; set; }         public string Password { get; set; }     }      public class AuthCommandHandler : IRequestHandler&lt;AuthCommand, AuthResponseDTO&gt;     {         private readonly ITokenGenerator _tokenGenerator;         private readonly IIdentityService _identityService;          public AuthCommandHandler(IIdentityService identityService, ITokenGenerator tokenGenerator)         {             _identityService = identityService;             _tokenGenerator = tokenGenerator;         }          public async Task&lt;AuthResponseDTO&gt; Handle(AuthCommand request, CancellationToken cancellationToken)         {             var result = await _identityService.SigninUserAsync(request.UserName, request.Password);              if (!result)             {                 throw new BadRequestException(\"Invalid username or password\");             }              var (userId, fullName, userName, email, roles) = await _identityService.GetUserDetailsAsync(await _identityService.GetUserIdAsync(request.UserName));              string token = _tokenGenerator.GenerateJWTToken((userId: userId, userName: userName, roles: roles));              return new AuthResponseDTO()             {                 UserId = userId,                 Name = userName,                 Token = token             };         }     } }        Create CreateCustomerCommand and Handler in Ordering.Application/Commands/Customers/Create folder   CreateCustomerCommand.cs   using MediatR; using Ordering.Application.DTOs; using Ordering.Application.Mapper; using Ordering.Core.Entities; using Ordering.Core.Repositories.Command;  namespace Ordering.Application.Commands.Customers.Create {     // Customer create command with CustomerResponse     public class CreateCustomerCommand : IRequest&lt;CustomerResponse&gt;     {         public string FirstName { get; set; }         public string LastName { get; set; }         public string Email { get; set; }         public string ContactNumber { get; set; }         public string Address { get; set; }         public DateTime CreatedDate { get; set; }          public CreateCustomerCommand()         {             this.CreatedDate = DateTime.Now;         }     }      public class CreateCustomerCommandHandler : IRequestHandler&lt;CreateCustomerCommand, CustomerResponse&gt;     {         private readonly ICustomerCommandRepository _customerCommandRepository;         public CreateCustomerCommandHandler(ICustomerCommandRepository customerCommandRepository)         {             _customerCommandRepository = customerCommandRepository;         }         public async Task&lt;CustomerResponse&gt; Handle(CreateCustomerCommand request, CancellationToken cancellationToken)         {             var customerEntity = CustomerMapper.Mapper.Map&lt;Customer&gt;(request);              if (customerEntity is null)             {                 throw new ApplicationException(\"There is a problem in mapper\");             }              var newCustomer = await _customerCommandRepository.AddAsync(customerEntity);             var customerResponse = CustomerMapper.Mapper.Map&lt;CustomerResponse&gt;(newCustomer);             return customerResponse;         }     } }       Create EditCustomerCommand and Handler in Ordering.Application/Commands/Customers/Update folder   EditCustomerCommand.cs   using MediatR; using Ordering.Application.DTOs; using Ordering.Application.Mapper; using Ordering.Core.Entities; using Ordering.Core.Repositories.Command; using Ordering.Core.Repositories.Query;  namespace Ordering.Application.Commands.Customers.Update {     // Customer create command with CustomerResponse     public class EditCustomerCommand : IRequest&lt;CustomerResponse&gt;     {          public Int64 Id { get; set; }         public string FirstName { get; set; }         public string LastName { get; set; }         public string Email { get; set; }         public string ContactNumber { get; set; }         public string Address { get; set; }     }      public class EditCustomerCommandHandler : IRequestHandler&lt;EditCustomerCommand, CustomerResponse&gt;     {         private readonly ICustomerCommandRepository _customerCommandRepository;         private readonly ICustomerQueryRepository _customerQueryRepository;         public EditCustomerCommandHandler(ICustomerCommandRepository customerRepository, ICustomerQueryRepository customerQueryRepository)         {             _customerCommandRepository = customerRepository;             _customerQueryRepository = customerQueryRepository;         }         public async Task&lt;CustomerResponse&gt; Handle(EditCustomerCommand request, CancellationToken cancellationToken)         {             var customerEntity = CustomerMapper.Mapper.Map&lt;Customer&gt;(request);              if (customerEntity is null)             {                 throw new ApplicationException(\"There is a problem in mapper\");             }              try             {                 await _customerCommandRepository.UpdateAsync(customerEntity);             }             catch (Exception exp)             {                 throw new ApplicationException(exp.Message);             }              var modifiedCustomer = await _customerQueryRepository.GetByIdAsync(request.Id);             var customerResponse = CustomerMapper.Mapper.Map&lt;CustomerResponse&gt;(modifiedCustomer);              return customerResponse;         }     } }       Create DeleteCustomerCommand and Handler in Ordering.Application/Commands/Customers/Delete folder   DeleteCustomerCommand.cs   using MediatR; using Ordering.Core.Repositories.Command; using Ordering.Core.Repositories.Query;  namespace Ordering.Application.Commands.Customers.Delete {     // Customer create command with string response     public class DeleteCustomerCommand : IRequest&lt;String&gt;     {         public Int64 Id { get; private set; }          public DeleteCustomerCommand(Int64 Id)         {             this.Id = Id;         }     }      // Customer delete command handler with string response as output     public class DeleteCustomerCommmandHandler : IRequestHandler&lt;DeleteCustomerCommand, String&gt;     {         private readonly ICustomerCommandRepository _customerCommandRepository;         private readonly ICustomerQueryRepository _customerQueryRepository;         public DeleteCustomerCommmandHandler(ICustomerCommandRepository customerRepository, ICustomerQueryRepository customerQueryRepository)         {             _customerCommandRepository = customerRepository;             _customerQueryRepository = customerQueryRepository;         }          public async Task&lt;string&gt; Handle(DeleteCustomerCommand request, CancellationToken cancellationToken)         {             try             {                 var customerEntity = await _customerQueryRepository.GetByIdAsync(request.Id);                  await _customerCommandRepository.DeleteAsync(customerEntity);             }             catch (Exception exp)             {                 throw (new ApplicationException(exp.Message));             }              return \"Customer information has been deleted!\";         }     } }       Create RoleCreateCommand and Handler in Ordering.Application/Commands/Role/Create folder   RoleCreateCommand.cs   using MediatR; using Ordering.Application.Common.Interfaces;  namespace Ordering.Application.Commands.Role.Create {     public class RoleCreateCommand : IRequest&lt;int&gt;     {         public string RoleName { get; set; }     }      public class RoleCreateCommandHandler : IRequestHandler&lt;RoleCreateCommand, int&gt;     {         private readonly IIdentityService _identityService;          public RoleCreateCommandHandler(IIdentityService identityService)         {             _identityService = identityService;         }         public async Task&lt;int&gt; Handle(RoleCreateCommand request, CancellationToken cancellationToken)         {             var result = await _identityService.CreateRoleAsync(request.RoleName);             return result ? 1 : 0;         }     } }       Create DeleteRoleCommand and Handler in Ordering.Application/Commands/Role/Delete folder   DeleteRoleCommand.cs    using MediatR; using Ordering.Application.Common.Interfaces;  namespace Ordering.Application.Commands.Role.Delete {     public class DeleteRoleCommand : IRequest&lt;int&gt;     {         public string RoleId { get; set; }     }      public class DeleteRoleCommandHandler : IRequestHandler&lt;DeleteRoleCommand, int&gt;     {         private readonly IIdentityService _identityService;          public DeleteRoleCommandHandler(IIdentityService identityService)         {             _identityService = identityService;         }         public async Task&lt;int&gt; Handle(DeleteRoleCommand request, CancellationToken cancellationToken)         {             var result = await _identityService.DeleteRoleAsync(request.RoleId);             return result ? 1 : 0;         }     } }        Create UpdateRoleCommand and Handler in Ordering.Application/Commands/Role/Update folder   UpdateRoleCommand.cs   using MediatR; using Ordering.Application.Common.Interfaces; using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks;  namespace Ordering.Application.Commands.Role.Update {     public class UpdateRoleCommand : IRequest&lt;int&gt;     {         public string Id { get; set; }         public string RoleName { get; set; }     }      public class UpdateRoleCommandHandler : IRequestHandler&lt;UpdateRoleCommand, int&gt;     {         private readonly IIdentityService _identityService;          public UpdateRoleCommandHandler(IIdentityService identityService)         {             _identityService = identityService;         }         public async Task&lt;int&gt; Handle(UpdateRoleCommand request, CancellationToken cancellationToken)         {             var result = await _identityService.UpdateRole(request.Id, request.RoleName);             return result ? 1 : 0;         }     } }       Create CreateUserCommand and Handler in Ordering.Application/Commands/User/Create folder   CreateUserCommand.cs   using MediatR; using Ordering.Application.Common.Interfaces;  namespace Ordering.Application.Commands.User.Create {     public class CreateUserCommand : IRequest&lt;int&gt;     {         public string FullName { get; set; }         public string UserName { get; set; }         public string Email { get; set; }         public string Password { get; set; }         public string ConfirmationPassword { get; set; }         public List&lt;string&gt; Roles { get; set; }     }      public class CreateUserCommandHandler : IRequestHandler&lt;CreateUserCommand, int&gt;     {         private readonly IIdentityService _identityService;         public CreateUserCommandHandler(IIdentityService identityService)         {             _identityService = identityService;         }         public async Task&lt;int&gt; Handle(CreateUserCommand request, CancellationToken cancellationToken)         {             var result = await _identityService.CreateUserAsync(request.UserName, request.Password, request.Email, request.FullName, request.Roles);             return result.isSucceed ? 1 : 0;         }     } }       Create DeleteUserCommandd and Handler in Ordering.Application/Commands/User/Delete folder   DeleteUserCommand.cs   using MediatR; using Ordering.Application.Common.Interfaces;  namespace Ordering.Application.Commands.User.Delete {     public class DeleteUserCommand : IRequest&lt;int&gt;     {         public string Id { get; set; }     }      public class DeleteUserCommandHandler : IRequestHandler&lt;DeleteUserCommand, int&gt;     {         private readonly IIdentityService _identityService;          public DeleteUserCommandHandler(IIdentityService identityService)         {             _identityService = identityService;         }         public async Task&lt;int&gt; Handle(DeleteUserCommand request, CancellationToken cancellationToken)         {             var result = await _identityService.DeleteUserAsync(request.Id);              return result ? 1 : 0;         }     } }       Create AssignUsersRoleCommand, EditUserProfileCommand, UpdateUserRolesCommand and Handler in Ordering.Application/Commands/User/Update folder   AssignUsersRoleCommand.cs   using MediatR; using Ordering.Application.Common.Interfaces; using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks;  namespace Ordering.Application.Commands.User.Update {     public class AssignUsersRoleCommand : IRequest&lt;int&gt;     {         public string UserName { get; set; }         public IList&lt;string&gt; Roles { get; set;}     }      public class AssignUsersRoleCommandHandler : IRequestHandler&lt;AssignUsersRoleCommand, int&gt;     {         private readonly IIdentityService _identityService;          public AssignUsersRoleCommandHandler(IIdentityService identityService)         {             _identityService = identityService;         }         public async Task&lt;int&gt; Handle(AssignUsersRoleCommand request, CancellationToken cancellationToken)         {             var result = await _identityService.AssignUserToRole(request.UserName, request.Roles);             return result ? 1 : 0;         }     } }   EditUserProfileCommand.cs   using MediatR; using Ordering.Application.Common.Interfaces;  namespace Ordering.Application.Commands.User.Update {     public class EditUserProfileCommand : IRequest&lt;int&gt;     {         public string Id { get; set; }         public string FullName { get; set; }         public string Email { get; set; }         public List&lt;string&gt; Roles { get; set; }     }      public class EditUserProfileCommandHandler : IRequestHandler&lt;EditUserProfileCommand, int&gt;     {         private readonly IIdentityService _identityService;          public EditUserProfileCommandHandler(IIdentityService identityService)         {             _identityService = identityService;         }         public async Task&lt;int&gt; Handle(EditUserProfileCommand request, CancellationToken cancellationToken)         {             var result = await _identityService.UpdateUserProfile(request.Id, request.FullName, request.Email, request.Roles);             return result ? 1 : 0;         }     } }   UpdateUserRolesCommand.cs   using MediatR; using Ordering.Application.Common.Interfaces;  namespace Ordering.Application.Commands.User.Update {     public class UpdateUserRolesCommand : IRequest&lt;int&gt;     {         public string userName { get; set; }         public IList&lt;string&gt; Roles { get; set;}     }      public class UpdateUserRolesCommandHandler : IRequestHandler&lt;UpdateUserRolesCommand, int&gt;     {         private readonly IIdentityService _identityService;          public UpdateUserRolesCommandHandler(IIdentityService identityService)         {             _identityService = identityService;         }         public async Task&lt;int&gt; Handle(UpdateUserRolesCommand request, CancellationToken cancellationToken)         {             var result = await _identityService.UpdateUsersRole(request.userName, request.Roles);             return result ? 1 : 0;         }     } }       Create Customers Query classes and Handlers in Ordering.Application/Queries/Customers folder   GetAllCustomerQuery.cs   using MediatR; using Ordering.Core.Entities; using Ordering.Core.Repositories.Query;  namespace Ordering.Application.Queries.Customers {     // Customer query with List&lt;Customer&gt; response     public record GetAllCustomerQuery : IRequest&lt;List&lt;Customer&gt;&gt;     {      }      public class GetAllCustomerHandler : IRequestHandler&lt;GetAllCustomerQuery, List&lt;Customer&gt;&gt;     {         private readonly ICustomerQueryRepository _customerQueryRepository;          public GetAllCustomerHandler(ICustomerQueryRepository customerQueryRepository)         {             _customerQueryRepository = customerQueryRepository;         }         public async Task&lt;List&lt;Customer&gt;&gt; Handle(GetAllCustomerQuery request, CancellationToken cancellationToken)         {             return (List&lt;Customer&gt;)await _customerQueryRepository.GetAllAsync();         }     } }     GetCustomerByEmailQuery.cs  using MediatR; using Ordering.Core.Entities;  namespace Ordering.Application.Queries.Customers {     // Customer GetCustomerByEmailQuery with Customer response     public class GetCustomerByEmailQuery: IRequest&lt;Customer&gt;     {         public string Email { get; private set; }                  public GetCustomerByEmailQuery(string email)         {             this.Email = email;         }      }      public class GetCustomerByEmailHandler : IRequestHandler&lt;GetCustomerByEmailQuery, Customer&gt;     {         private readonly IMediator _mediator;          public GetCustomerByEmailHandler(IMediator mediator)         {             _mediator = mediator;         }         public async Task&lt;Customer&gt; Handle(GetCustomerByEmailQuery request, CancellationToken cancellationToken)         {             var customers = await _mediator.Send(new GetAllCustomerQuery());             var selectedCustomer = customers.FirstOrDefault(x =&gt; x.Email.ToLower().Contains(request.Email.ToLower()));             return selectedCustomer;         }     } }    GetCustomerByIdQuery.cs   using MediatR; using Ordering.Core.Entities; using System;  namespace Ordering.Application.Queries.Customers {     // Customer GetCustomerByIdQuery with Customer response     public class GetCustomerByIdQuery: IRequest&lt;Customer&gt;     {         public Int64 Id { get; private set; }                  public GetCustomerByIdQuery(Int64 Id)         {             this.Id = Id;         }      }      public class GetCustomerByIdHandler : IRequestHandler&lt;GetCustomerByIdQuery, Customer&gt;     {         private readonly IMediator _mediator;          public GetCustomerByIdHandler(IMediator mediator)         {             _mediator = mediator;         }         public async Task&lt;Customer&gt; Handle(GetCustomerByIdQuery request, CancellationToken cancellationToken)         {             var customers = await _mediator.Send(new GetAllCustomerQuery());             var selectedCustomer = customers.FirstOrDefault(x =&gt; x.Id == request.Id);             return selectedCustomer;         }     } }        Create Role Query classes and Handlers in Ordering.Application/Queries/Role folder   GetRoleByIdQuery.cs   using MediatR; using Ordering.Application.Common.Interfaces; using Ordering.Application.DTOs;  namespace Ordering.Application.Queries.Role {     public class GetRoleByIdQuery : IRequest&lt;RoleResponseDTO&gt;     {         public string RoleId { get; set; }     }      public class GetRoleQueryByIdHandler : IRequestHandler&lt;GetRoleByIdQuery, RoleResponseDTO&gt;     {         private readonly IIdentityService _identityService;          public GetRoleQueryByIdHandler(IIdentityService identityService)         {             _identityService = identityService;         }         public async Task&lt;RoleResponseDTO&gt; Handle(GetRoleByIdQuery request, CancellationToken cancellationToken)         {             var role = await _identityService.GetRoleByIdAsync(request.RoleId);             return new RoleResponseDTO() { Id = role.id, RoleName = role.roleName};         }     } }    GetRoleQuery.cs   using MediatR; using Ordering.Application.Common.Interfaces; using Ordering.Application.DTOs;  namespace Ordering.Application.Queries.Role {     public class GetRoleQuery : IRequest&lt;IList&lt;RoleResponseDTO&gt;&gt;     {      }      public class GetRoleQueryHandler : IRequestHandler&lt;GetRoleQuery, IList&lt;RoleResponseDTO&gt;&gt;     {         private readonly IIdentityService _identityService;          public GetRoleQueryHandler(IIdentityService identityService)         {             _identityService = identityService;         }         public async Task&lt;IList&lt;RoleResponseDTO&gt;&gt; Handle(GetRoleQuery request, CancellationToken cancellationToken)         {             var roles = await _identityService.GetRolesAsync();             return roles.Select(role =&gt; new RoleResponseDTO() { Id = role.id, RoleName = role.roleName}).ToList();         }     } }       Create Users Query classes and Handlers in Ordering.Application/Queries/User folder   GetAllUsersDetailsQuery.cs    using MediatR; using Ordering.Application.Common.Interfaces; using Ordering.Application.DTOs;  namespace Ordering.Application.Queries.User {     public class GetAllUsersDetailsQuery : IRequest&lt;List&lt;UserDetailsResponseDTO&gt;&gt;     {         //public string UserId { get; set; }     }      public class GetAllUsersDetailsQueryHandler : IRequestHandler&lt;GetAllUsersDetailsQuery, List&lt;UserDetailsResponseDTO&gt;&gt;     {         private readonly IIdentityService _identityService;          public GetAllUsersDetailsQueryHandler(IIdentityService identityService)         {             _identityService = identityService;         }          public async Task&lt;List&lt;UserDetailsResponseDTO&gt;&gt; Handle(GetAllUsersDetailsQuery request, CancellationToken cancellationToken)         {                           var users = await _identityService.GetAllUsersAsync();             var userDetails = users.Select(x =&gt; new UserDetailsResponseDTO()             {                 Id = x.id,                 Email = x.email,                 UserName = x.userName                 //Roles = (IList&lt;string&gt;)_identityService.GetUserRolesAsync(x.id) // Converstion problem             }).ToList();              foreach (var user in userDetails)             {                 user.Roles = await _identityService.GetUserRolesAsync(user.Id);             }             return userDetails;         }     } }   GetUserDetailsByUserNameQuery.cs   using MediatR; using Ordering.Application.Common.Interfaces; using Ordering.Application.DTOs;  namespace Ordering.Application.Queries.User {     public class GetUserDetailsByUserNameQuery : IRequest&lt;UserDetailsResponseDTO&gt;     {         public string UserName { get; set; }     }      public class GetUserDetailsByUserNameQueryHandler : IRequestHandler&lt;GetUserDetailsByUserNameQuery, UserDetailsResponseDTO&gt;     {         private readonly IIdentityService _identityService;          public GetUserDetailsByUserNameQueryHandler(IIdentityService identityService)         {             _identityService = identityService;         }         public async Task&lt;UserDetailsResponseDTO&gt; Handle(GetUserDetailsByUserNameQuery request, CancellationToken cancellationToken)         {             var (userId, fullName, userName, email, roles ) = await _identityService.GetUserDetailsByUserNameAsync(request.UserName);             return new UserDetailsResponseDTO() { Id = userId, FullName = fullName, UserName = userName, Email = email, Roles = roles };         }     } }    GetUserDetailsQuery.cs   using MediatR; using Ordering.Application.Common.Interfaces; using Ordering.Application.DTOs;  namespace Ordering.Application.Queries.User {     public class GetUserDetailsQuery : IRequest&lt;UserDetailsResponseDTO&gt;     {         public string UserId { get; set; }     }      public class GetUserDetailsQueryHandler : IRequestHandler&lt;GetUserDetailsQuery, UserDetailsResponseDTO&gt;     {         private readonly IIdentityService _identityService;          public GetUserDetailsQueryHandler(IIdentityService identityService)         {             _identityService = identityService;         }         public async Task&lt;UserDetailsResponseDTO&gt; Handle(GetUserDetailsQuery request, CancellationToken cancellationToken)         {             var (userId, fullName, userName, email, roles ) = await _identityService.GetUserDetailsAsync(request.UserId);             return new UserDetailsResponseDTO() { Id = userId, FullName = fullName, UserName = userName, Email = email, Roles = roles };         }     } }   GetUserQuery.cs   using MediatR; using Ordering.Application.Common.Interfaces; using Ordering.Application.DTOs;  namespace Ordering.Application.Queries.User {     public class GetUserQuery : IRequest&lt;List&lt;UserResponseDTO&gt;&gt;     {     }      public class GetUserQueryHandler : IRequestHandler&lt;GetUserQuery, List&lt;UserResponseDTO&gt;&gt;     {         private readonly IIdentityService _identityService;          public GetUserQueryHandler(IIdentityService identityService)         {             _identityService = identityService;         }          public async Task&lt;List&lt;UserResponseDTO&gt;&gt; Handle(GetUserQuery request, CancellationToken cancellationToken)         {             var users = await _identityService.GetAllUsersAsync();             return users.Select(x =&gt; new UserResponseDTO()             {                 Id = x.id,                 FullName = x.fullName,                 UserName = x.userName,                 Email = x.email             }).ToList();         }     } }       Create CustomerMapper and OrderingMappingProfile class in Ordering.Application/Mapper folder   CustomerMapper.cs   using AutoMapper; using System;  namespace Ordering.Application.Mapper {     public class CustomerMapper     {         private static readonly Lazy&lt;IMapper&gt; Lazy = new Lazy&lt;IMapper&gt;(()=&gt;         {             var config = new MapperConfiguration(cfg =&gt;             {                 cfg.ShouldMapProperty = p =&gt; p.GetMethod.IsPublic || p.GetMethod.IsAssembly;                 cfg.AddProfile&lt;OrderingMappingProfile&gt;();             });              var mapper = config.CreateMapper();             return mapper;         });          public static IMapper Mapper =&gt; Lazy.Value;     } }  OrderingMappingProfile.cs    using AutoMapper; using Ordering.Application.Commands; using Ordering.Application.Response; using Ordering.Core.Entities;  namespace Ordering.Application.Mapper {     public class OrderingMappingProfile : Profile     {         public OrderingMappingProfile()         {             CreateMap&lt;Customer, CustomerResponse&gt;().ReverseMap();             CreateMap&lt;Customer, CreateCustomerCommand&gt;().ReverseMap();             CreateMap&lt;Customer, EditCustomerCommand&gt;().ReverseMap();         }     } }    Step 8: Orgnaize Ordering.API project. This is an web api project.      Create AuthController in Ordering.API/Controllers folder   AuthController.cs   using MediatR; using Microsoft.AspNetCore.Mvc; using Ordering.Application.Commands.Auth; using Ordering.Application.DTOs;   namespace Ordering.API.Controllers {     [Route(\"api/[controller]\")]     [ApiController]     public class AuthController : ControllerBase     {         private readonly IMediator _mediator;          public AuthController(IMediator mediator)         {             _mediator = mediator;         }           [HttpPost(\"Login\")]         [ProducesDefaultResponseType(typeof(AuthResponseDTO))]         public async Task&lt;IActionResult&gt; Login([FromBody] AuthCommand command)         {             return Ok(await _mediator.Send(command));         }     } }       Create CustomerController in Ordering.API/Controllers folder   CustomerController.cs   using MediatR; using Microsoft.AspNetCore.Authentication.JwtBearer; using Microsoft.AspNetCore.Authorization; using Microsoft.AspNetCore.Cors; using Microsoft.AspNetCore.Mvc; using Ordering.Application.Commands.Customers.Create; using Ordering.Application.Commands.Customers.Delete; using Ordering.Application.Commands.Customers.Update; using Ordering.Application.DTOs; using Ordering.Application.Queries.Customers; using Ordering.Core.Entities;  namespace Ordering.API.Controllers {     [EnableCors(\"CorsPolicy\")]     [Route(\"api/[controller]\")]     [ApiController]     //[Authorize(Roles = \"Admin,Member\")]     //[Authorize]     //[Authorize(AuthenticationSchemes = Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerDefaults.AuthenticationScheme, Roles = \"Admin,Member\")]      // Authorize with a specific scheme     //[Authorize(AuthenticationSchemes = JwtBearerDefaults.AuthenticationScheme, Roles = \"Admin,Member,User\")]     [Authorize(AuthenticationSchemes = JwtBearerDefaults.AuthenticationScheme)]     public class CustomerController : ControllerBase     {         private readonly IMediator _mediator;         public CustomerController(IMediator mediator)         {             _mediator = mediator;         }           [HttpGet(\"GetAll\")]         [ProducesResponseType(StatusCodes.Status200OK)]         public async Task&lt;List&lt;Customer&gt;&gt; Get()         {             return await _mediator.Send(new GetAllCustomerQuery());         }          [HttpGet(\"{id}\")]         [ProducesResponseType(StatusCodes.Status200OK)]         public async Task&lt;Customer&gt; Get(Int64 id)         {             return await _mediator.Send(new GetCustomerByIdQuery(id));         }          [HttpGet(\"email\")]         [ProducesResponseType(StatusCodes.Status200OK)]         public async Task&lt;Customer&gt; GetByEmail(string email)         {             return await _mediator.Send(new GetCustomerByEmailQuery(email));         }          [HttpPost(\"Create\")]         [ProducesResponseType(StatusCodes.Status200OK)]         public async Task&lt;ActionResult&lt;CustomerResponse&gt;&gt; CreateCustomer([FromBody] CreateCustomerCommand command)         {             var result = await _mediator.Send(command);             return Ok(result);         }           [HttpPut(\"Edit/{id}\")]         public async Task&lt;ActionResult&gt; Edit(int id, [FromBody] EditCustomerCommand command)         {             try             {                 if (command.Id == id)                 {                     var result = await _mediator.Send(command);                     return Ok(result);                 }                 else                 {                     return BadRequest();                 }             }             catch (Exception exp)             {                 return BadRequest(exp.Message);             }         }           [Authorize(Roles = \"Admin, Management\")]         [HttpDelete(\"Delete/{id}\")]         public async Task&lt;ActionResult&gt; DeleteCustomer(int id)         {             try             {                 string result = string.Empty;                 result = await _mediator.Send(new DeleteCustomerCommand(id));                 return Ok(result);             }             catch (Exception exp)             {                 return BadRequest(exp.Message);             }         }      } }        Create RoleController in Ordering.API/Controllers folder   RoleController.cs    using MediatR; using Microsoft.AspNetCore.Authentication.JwtBearer; using Microsoft.AspNetCore.Authorization; using Microsoft.AspNetCore.Mvc; using Ordering.Application.Commands.Role.Create; using Ordering.Application.Commands.Role.Delete; using Ordering.Application.Commands.Role.Update; using Ordering.Application.DTOs; using Ordering.Application.Queries.Role;  namespace Ordering.API.Controllers {     [Route(\"api/[controller]\")]     [ApiController]     [Authorize(AuthenticationSchemes = JwtBearerDefaults.AuthenticationScheme)]     [Authorize(Roles = \"Admin, Management\")]     public class RoleController : ControllerBase     {         public readonly IMediator _mediator;          public RoleController(IMediator mediator)         {             _mediator = mediator;         }          [HttpPost(\"Create\")]         [ProducesDefaultResponseType(typeof(int))]          public async Task&lt;ActionResult&gt; CreateRoleAsync(RoleCreateCommand command)         {             return Ok(await _mediator.Send(command));         }          [HttpGet(\"GetAll\")]         [ProducesDefaultResponseType(typeof(List&lt;RoleResponseDTO&gt;))]         public async Task&lt;IActionResult&gt; GetRoleAsync()         {             return Ok(await _mediator.Send(new GetRoleQuery()));         }           [HttpGet(\"{id}\")]         [ProducesDefaultResponseType(typeof(RoleResponseDTO))]         public async Task&lt;IActionResult&gt; GetRoleByIdAsync(string id)         {             return Ok(await _mediator.Send(new GetRoleByIdQuery() { RoleId = id }));         }          [HttpDelete(\"Delete/{id}\")]         [ProducesDefaultResponseType(typeof(int))]         public async Task&lt;IActionResult&gt; DeleteRoleAsync(string id)         {             return Ok(await _mediator.Send(new DeleteRoleCommand()             {                 RoleId = id             }));         }          [HttpPut(\"Edit/{id}\")]         [ProducesDefaultResponseType(typeof(int))]         public async Task&lt;ActionResult&gt; EditRole(string id, [FromBody] UpdateRoleCommand command)         {             if (id == command.Id)             {                 var result = await _mediator.Send(command);                 return Ok(result);             }             else             {                 return BadRequest();             }         }      } }        Create UserController in Ordering.API/Controllers folder   UserController.cs   using MediatR; using Microsoft.AspNetCore.Authentication.JwtBearer; using Microsoft.AspNetCore.Authorization; using Microsoft.AspNetCore.Mvc; using Ordering.Application.Commands.User.Create; using Ordering.Application.Commands.User.Delete; using Ordering.Application.Commands.User.Update; using Ordering.Application.DTOs; using Ordering.Application.Queries.User;  // For more information on enabling Web API for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860  namespace Ordering.API.Controllers {     [Route(\"api/[controller]\")]     [ApiController]      [Authorize(AuthenticationSchemes = JwtBearerDefaults.AuthenticationScheme)]     [Authorize(Roles = \"Admin, Management\")]     public class UserController : ControllerBase     {         private readonly IMediator _mediator;          public UserController(IMediator mediator)         {             _mediator = mediator;         }          [HttpPost(\"Create\")]         [ProducesDefaultResponseType(typeof(int))]         public async Task&lt;ActionResult&gt; CreateUser(CreateUserCommand command)         {             return Ok(await _mediator.Send(command));         }          [HttpGet(\"GetAll\")]         [ProducesDefaultResponseType(typeof(List&lt;UserResponseDTO&gt;))]         public async Task&lt;IActionResult&gt; GetAllUserAsync()         {             return Ok(await _mediator.Send(new GetUserQuery()));         }          [HttpDelete(\"Delete/{userId}\")]         [ProducesDefaultResponseType(typeof(int))]         public async Task&lt;IActionResult&gt; DeleteUser(string userId)         {             var result = await _mediator.Send(new DeleteUserCommand() { Id = userId});             return Ok(result);         }          [HttpGet(\"GetUserDetails/{userId}\")]         [ProducesDefaultResponseType(typeof(UserDetailsResponseDTO))]         public async Task&lt;IActionResult&gt; GetUserDetails(string userId)         {             var result = await _mediator.Send(new GetUserDetailsQuery() { UserId = userId });             return Ok(result);         }          [HttpGet(\"GetUserDetailsByUserName/{userName}\")]         [ProducesDefaultResponseType(typeof(UserDetailsResponseDTO))]         public async Task&lt;IActionResult&gt; GetUserDetailsByUserName(string userName)         {             var result = await _mediator.Send(new GetUserDetailsByUserNameQuery() { UserName = userName });             return Ok(result);         }          [HttpPost(\"AssignRoles\")]         [ProducesDefaultResponseType(typeof(int))]          public async Task&lt;ActionResult&gt; AssignRoles(AssignUsersRoleCommand command)         {             var result = await _mediator.Send(command);             return Ok(result);         }          [HttpPut(\"EditUserRoles\")]         [ProducesDefaultResponseType(typeof(int))]          public async Task&lt;ActionResult&gt; EditUserRoles(UpdateUserRolesCommand command)         {             var result = await _mediator.Send(command);             return Ok(result);         }          [HttpGet(\"GetAllUserDetails\")]         [ProducesDefaultResponseType(typeof(UserDetailsResponseDTO))]         public async Task&lt;IActionResult&gt; GetAllUserDetails()         {             var result = await _mediator.Send(new GetAllUsersDetailsQuery());             return Ok(result);         }           [HttpPut(\"EditUserProfile/{id}\")]         [ProducesDefaultResponseType(typeof(int))]         public async Task&lt;ActionResult&gt; EditUserProfile(string id, [FromBody]EditUserProfileCommand command)         {             if (id == command.Id)             {                 var result = await _mediator.Send(command);                 return Ok(result);             }             else             {                 return BadRequest();             }         }      } }       Set connection string in appsettings.json file. I have used here SQLite database for simplicity.   appsettings.json   {   \"Logging\": {     \"LogLevel\": {       \"Default\": \"Information\",       \"Microsoft.AspNetCore\": \"Warning\"     }   },   \"ConnectionStrings\": {     \"DefaultConnection\": \"Data Source=db/ordering.db\"   },   \"Jwt\": {     \"Key\": \"$ecret@Key$shouldbeEncrypted!\",     \"Issuer\": \"jwt\",     \"Audience\": \"jwt\",     \"ExpiryMinutes\": 120   },    \"AllowedHosts\": \"*\" }       Modify the Program Class as follows   Program.cs   using MediatR; using Microsoft.AspNetCore.Authentication.JwtBearer; using Microsoft.IdentityModel.Tokens; using Microsoft.OpenApi.Models; using Ordering.Application.Commands.Customers.Create; using Ordering.Application.Commands.User.Create; using Ordering.Application.Common.Interfaces; using Ordering.Infrastructure; using Ordering.Infrastructure.Services; using System.Reflection; using System.Text;   var builder = WebApplication.CreateBuilder(args);    builder.Services.AddControllers();  // For authentication var _key = builder.Configuration[\"Jwt:Key\"]; var _issuer = builder.Configuration[\"Jwt:Issuer\"]; var _audience = builder.Configuration[\"Jwt:Audience\"]; var _expirtyMinutes = builder.Configuration[\"Jwt:ExpiryMinutes\"];   // Configuration for token builder.Services.AddAuthentication(x =&gt; {     x.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;     x.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;     x.DefaultScheme = JwtBearerDefaults.AuthenticationScheme; }).AddJwtBearer(x =&gt; {     x.RequireHttpsMetadata = false;     x.SaveToken = true;     x.TokenValidationParameters = new TokenValidationParameters()     {         ValidateIssuer = true,         ValidateAudience = true,         ValidateLifetime = true,         ValidateIssuerSigningKey = true,         ValidAudience = _audience,         ValidIssuer = _issuer,         IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_key)),         ClockSkew = TimeSpan.FromMinutes(Convert.ToDouble(_expirtyMinutes))      }; });   // Dependency injection with key builder.Services.AddSingleton&lt;ITokenGenerator&gt;(new TokenGenerator(_key, _issuer, _audience, _expirtyMinutes));   // Include Infrastructur Dependency builder.Services.AddInfrastructure(builder.Configuration);    // Configuration for Sqlite //builder.Services.AddDbContext&lt;OrderingContext&gt;(options =&gt; options.UseSqlite(builder.Configuration.GetConnectionString(\"DefaultConnection\")));  // Register dependencies builder.Services.AddMediatR(typeof(CreateCustomerCommandHandler).GetTypeInfo().Assembly); builder.Services.AddMediatR(typeof(CreateUserCommandHandler).GetTypeInfo().Assembly);    builder.Services.AddCors(c =&gt; {     c.AddPolicy(\"CorsPolicy\", options =&gt; options.AllowAnyOrigin().AllowAnyMethod().AllowAnyHeader()); });    // Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle builder.Services.AddEndpointsApiExplorer();  builder.Services.AddSwaggerGen(c =&gt; {      // To enable authorization using swagger (Jwt)     c.AddSecurityDefinition(\"Bearer\", new OpenApiSecurityScheme()     {         Name = \"Authorization\",         Type = SecuritySchemeType.ApiKey,         Scheme = \"Bearer\",         BearerFormat = \"JWT\",         In = ParameterLocation.Header,         Description = \"JWT Authorization header using the Bearer scheme. \\r\\n\\r\\n Enter 'Bearer' [space] and then your token in the text input below.\\r\\n\\r\\nExample: \\\"Bearer {token}\\\"\",     });      c.AddSecurityRequirement(new OpenApiSecurityRequirement     {         {             new OpenApiSecurityScheme                 {                             Reference = new OpenApiReference                             {                                 Type = ReferenceType.SecurityScheme,                                 Id = \"Bearer\"                             }                         },                         new string[] {}                      }                 });  });  var app = builder.Build();  // Configure the HTTP request pipeline. if (app.Environment.IsDevelopment()) {     app.UseSwagger();     app.UseSwaggerUI(); }  app.UseHttpsRedirection();  // Must be betwwen app.UseRouting() and app.UseEndPoints() // maintain middleware order app.UseCors(\"CorsPolicy\");  // Added for authentication // Maintain middleware order app.UseAuthentication();  app.UseAuthorization();  app.MapControllers();  app.Run();    Step 9: Run migration command on package manager console      In package manager console select Oredering.Infrastructure as defult project.   Run the following command   PM&gt; Add-Migration initialsqlmig PM&gt; Update-Database -Verbose   Step 10: Now run your application and test using swagger.   Source code  ","categories": ["Web API","ASP.NET Core","C#","Dapper","EF","JWT","Auth"],
        "tags": ["webapi","aspnetcore","csharp","ef","dapper","jwt","auth"],
        "url": "http://localhost:4000/authentication-and-authorization-using-JWT-in-asp.net-core-application/",
        "teaser":null},{
        "title": "Authentication and authorization using react.js and asp.net core",
        "excerpt":"  In the previous article, I have shown you how to create a back end application for authentication and authorization using JWT and .net core. In this article, I will design UI using react.js. I will also show you how to maintain authentication and authorization from front end.   Step 1: Create a sample react application     Create a react app name - ecommerce.client using the following command.     npx create-react-app my-app           Apply required bootstrap theme on it.   Step 2: Create config.js in public/assets folder   config.js   var baseURL = \"https://localhost:7142/\";   Step 3: Include config.js in public/index.html file   index.html   &lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt;   &lt;head&gt;     &lt;meta charset=\"utf-8\" /&gt;     &lt;link rel=\"icon\" href=\"%PUBLIC_URL%/favicon.ico\" /&gt;     &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" /&gt;     &lt;meta name=\"theme-color\" content=\"#000000\" /&gt;     &lt;meta       name=\"description\"       content=\"Web site created using create-react-app\"     /&gt;     &lt;link rel=\"apple-touch-icon\" href=\"%PUBLIC_URL%/logo192.png\" /&gt;     &lt;!--       manifest.json provides metadata used when your web app is installed on a       user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/     --&gt;     &lt;link rel=\"manifest\" href=\"%PUBLIC_URL%/manifest.json\" /&gt;     &lt;!--       Notice the use of %PUBLIC_URL% in the tags above.       It will be replaced with the URL of the `public` folder during the build.       Only files inside the `public` folder can be referenced from the HTML.        Unlike \"/favicon.ico\" or \"favicon.ico\", \"%PUBLIC_URL%/favicon.ico\" will       work correctly both with client-side routing and a non-root public URL.       Learn how to configure a non-root public URL by running `npm run build`.     --&gt;     &lt;title&gt;React::Auth&lt;/title&gt;   &lt;/head&gt;   &lt;body&gt;     &lt;noscript&gt;You need to enable JavaScript to run this app.&lt;/noscript&gt;     &lt;div id=\"root\"&gt;&lt;/div&gt;     &lt;!--       This HTML file is a template.       If you open it directly in the browser, you will see an empty page.        You can add webfonts, meta tags, or analytics to this file.       The build step will place the bundled scripts into the &lt;body&gt; tag.        To begin the development, run `npm start` or `yarn start`.       To create a production bundle, use `npm run build` or `yarn build`.     --&gt;      &lt;script src=\"%PUBLIC_URL%/assets/config.js\"&gt;&lt;/script&gt;   &lt;/body&gt; &lt;/html&gt;    Step 4: Create components in src folder      Create AccessAPI and Settings Components in src-&gt;components-&gt;services folder   Settings.js   export const BASE_URL = window.baseURL;    AccessAPI.js    import SessionManager from \"../Auth/SessionManager\"; import { BASE_URL } from \"./Settings\";   export function getData(endPoint) {      let token=SessionManager.getToken();      let payload = {         method: 'GET',         headers: {                \"access-control-allow-origin\" : \"*\",              'Accept': 'application/json',             'Content-Type': 'application/json',             'Authorization': 'Bearer ' + token          },     }     return fetch(BASE_URL + endPoint, payload)     .then(function(response) {         if (!response.ok) {             throw Error(response.statusText);         }         return response.json();     }).then(function(result) {         return result;     }).catch(function(error) {         console.log(error);     }); }  export function postDataForLogin(type, userData) {     //let BaseURL = \"https://localhost:7142/\";     let payload = {         method: 'POST',         headers: {                \"access-control-allow-origin\" : \"*\",             'Content-Type': 'application/json'          },         body: JSON.stringify(userData)      }     return fetch(BASE_URL + type, payload)     .then(function(response) {         return response.json();     }).then(function(result) {         return result;     }).catch(function(error) {         console.log(error);     }); }  export function postData(endPoint, inputObj) {     let token=SessionManager.getToken();     let payload = {         method: 'POST',         headers: {                \"access-control-allow-origin\" : \"*\",              'Accept': 'application/json',             'Content-Type': 'application/json',             'Authorization': 'Bearer ' + token         },         body: JSON.stringify(inputObj)      }     return fetch(BASE_URL + endPoint, payload)     .then(function(response) {         return response.json();     }).then(function(result) {         return result;     }).catch(function(error) {         console.log(error);     }); }  export function deleteData(endPoint) {     let token=SessionManager.getToken();     let payload = {         method: 'DELETE',         headers: {                \"access-control-allow-origin\" : \"*\",              'Accept': 'application/json',             'Content-Type': 'application/json',             'Authorization': 'Bearer ' + token          },     }     return fetch(BASE_URL + endPoint, payload)     .then(function(response) {         if (!response.ok) {             throw Error(response.statusText);         }         return response.json();     }).then(function(result) {         return result;     }).catch(function(error) {         console.log(error);     }); }  export function putData(endPoint, obj) {     let token=SessionManager.getToken();     let payload = {         method: 'PUT',         headers: {                \"access-control-allow-origin\" : \"*\",              'Accept': 'application/json',             'Content-Type': 'application/json',             'Authorization': 'Bearer ' + token         },         body: JSON.stringify(obj)      }     return fetch(BASE_URL + endPoint, payload)     .then(function(response) {         return response.json();     }).then(function(result) {         return result;     }).catch(function(error) {         console.log(error);     }); }      Create Login, Logout and SessionManager component in src-&gt;components-&gt;Auth folder   Login.js   import { Component } from \"react\"; import { toast, ToastContainer } from \"react-toastify\"; import 'react-toastify/dist/ReactToastify.css'; import { Container } from \"reactstrap\"; import LoginMenu from \"../LoginMenu\"; import { postDataForLogin } from \"../services/AccessAPI\"; import SessionManager from \"./SessionManager\";   export default class Login extends Component {     constructor() {         super();         this.state = {             userName: \"\",             password: \"\",             loading: false,             failed: false,             error: ''         };          this.login = this.login.bind(this);         this.onChange = this.onChange.bind(this);     }       onChange(e) {         this.setState({ [e.target.name]: e.target.value });     }      onKeyDown = (e) =&gt; {         if (e.key === 'Enter') {             this.login();         }     }      login() {         let userInfo = this.state;         this.setState({             loading: true         });          //console.log(\"login info: \" + userInfo.password);         postDataForLogin('api/Auth/Login', userInfo).then((result) =&gt; {             if (result?.token) {                  SessionManager.setUserSession(result.userName, result.token, result.userId, result.usersRole)                  if (SessionManager.getToken()) {                     this.setState({                         loading: false                     });                      // &lt;LoginMenu menuText = 'Logout' menuURL = '/logout' /&gt;                      // If login successful and get token                     // redirect to dashboard                     window.location.href = \"/home\";                 }             }              else {                 let errors = '';                 for (const key in result?.errors) {                     if (Object.hasOwnProperty.call(result.errors, key)) {                         errors += result.errors[key];                      }                 }                 errors = errors === '' ? 'Login is unsuccessfull!' : errors;                 toast.error(errors, {                     position: \"top-right\",                     autoClose: 5000,                     hideProgressBar: true,                     closeOnClick: true,                     pauseOnHover: true,                     draggable: true                 });                  this.setState({                     errors: \"Login failed!\",                     loading: false                 });             }          });     }      registration(){         window.location.href = \"/admin/user/register\";      }      render() {         let content;         if (this.state.loading) {             content = &lt;div&gt;Loading...&lt;/div&gt;;         }          return (             &lt;div className=\"row\" style=&gt;             &lt;div className=\"login-box col-md-4\"&gt;                 &lt;div className=\"login-logo\"&gt;                     &lt;a href=\"/\"&gt;&lt;b&gt;ECommerce&lt;/b&gt;&lt;/a&gt;                 &lt;/div&gt;                 &lt;div className=\"login-box-body\"&gt;                     &lt;p className=\"login-box-msg\"&gt;Sign in to access the application&lt;/p&gt;                      &lt;div className=\"form-group has-feedback\"&gt;                         &lt;input                             type=\"text\"                             className=\"form-control\"                             placeholder=\"Please Enter Username\"                             name=\"userName\"                             onChange={this.onChange}                             onKeyDown={this.onKeyDown}                         /&gt;                         &lt;span className=\"glyphicon glyphicon-user form-control-feedback\" /&gt;                     &lt;/div&gt;                     &lt;div className=\"form-group has-feedback\"&gt;                         &lt;input type=\"password\" className=\"form-control\" placeholder=\"Please Enter Password\" name=\"password\"                             onChange={this.onChange} onKeyDown={this.onKeyDown}                         /&gt;                         &lt;span className=\"glyphicon glyphicon-lock form-control-feedback\" /&gt;                     &lt;/div&gt;                     &lt;div className=\"row\"&gt;                         &lt;div className=\"col-md-4\"&gt;                             &lt;button className=\"btn btn-primary btn-block\" onClick={this.login}&gt;                                 Sign In                             &lt;/button&gt;                         &lt;/div&gt;                         &lt;div className=\"col-md-6\"&gt;                             &lt;button className=\"btn btn-primary btn-block\" onClick={this.registration}&gt;                                 Create an account                             &lt;/button&gt;                         &lt;/div&gt;                         &lt;div className=\"col-md-2\"&gt;                             {content}                         &lt;/div&gt;                     &lt;/div&gt;                     &lt;div className=\"row\"&gt;                         &lt;div className=\"col-md-8\" style=&gt;                             &lt;strong className=\"has-error\" style=&gt;{this.state.errorMsg}&lt;/strong&gt;                         &lt;/div&gt;                         &lt;div className=\"col-md-4\"&gt;                             &lt;ToastContainer&gt;&lt;/ToastContainer&gt;                         &lt;/div&gt;                     &lt;/div&gt;                 &lt;/div&gt;             &lt;/div&gt;              &lt;/div&gt;         );     } }   Logout.js    import { Component } from \"react\"; import SessionManager from \"./SessionManager\";  export default class Logout extends Component{     constructor(){         super();         this.state = {          }     }      componentDidMount(){         console.log(\"component did mount for logout\");         SessionManager.removeUserSession();         window.location.href = \"/login\";     }      render(){         return(             &lt;div&gt;&lt;/div&gt;         );     }  }    SessionManager.js    const SessionManager = {      getToken() {         const token = sessionStorage.getItem('token');         if (token) return token;         else return null;     },      setUserSession(userName, token, userId, usersRole) {         sessionStorage.setItem('userName', userName);         sessionStorage.setItem('token', token);         sessionStorage.setItem('userId', userId);         sessionStorage.setItem('usersRole', usersRole);     },      removeUserSession(){         sessionStorage.removeItem('userName');         sessionStorage.removeItem('token');         sessionStorage.removeItem('userId');         sessionStorage.removeItem('usersRole');     } }  export default SessionManager;       Create customers components in src-&gt;components-&gt;Customer folder   Create.jsx   import React, { Component } from \"react\"; import { postData } from \"../services/AccessAPI\";  export class Create extends Component {      constructor(props) {         super(props);         this.state = {             firstName: '',             lastName: '',             email: '',             contactNumber: '',             address: ''         }          this.onChange = this.onChange.bind(this);         this.onSubmit = this.onSubmit.bind(this);     }      onChange(e) {         this.setState({ [e.target.name]: e.target.value });     }       onSubmit(e) {         e.preventDefault();         const { history } = this.props;          let customerObj = {             firstName: this.state.firstName,             lastName: this.state.lastName,             email: this.state.email,             contactNumber: this.state.contactNumber,             address: this.state.address         }           postData('api/Customer/Create', customerObj).then((result) =&gt; {             let responseJson = result;             if (responseJson) {                 history.push('/banking/customers');             }         });     }      render() {         return (             &lt;div className=\"row\"&gt;                 &lt;div className=\"col-md-4\"&gt;                     &lt;h3&gt;Add new customer&lt;/h3&gt;                     &lt;form onSubmit={this.onSubmit}&gt;                         &lt;div className=\"form-group\"&gt;                             &lt;label className=\"control-label\"&gt;First Name: &lt;/label&gt;                             &lt;input className=\"form-control\" type=\"text\" name=\"firstName\" value={this.state.firstName} onChange={this.onChange}&gt;&lt;/input&gt;                         &lt;/div&gt;                          &lt;div className=\"form-group\"&gt;                             &lt;label className=\"control-label\"&gt;Last Name: &lt;/label&gt;                             &lt;input className=\"form-control\" type=\"text\" name=\"lastName\" value={this.state.lastName} onChange={this.onChange}&gt;&lt;/input&gt;                         &lt;/div&gt;                          &lt;div className=\"form-group\"&gt;                             &lt;label className=\"control-label\"&gt;Email: &lt;/label&gt;                             &lt;input className=\"form-control\" type=\"text\" name=\"email\" value={this.state.email} onChange={this.onChange}&gt;&lt;/input&gt;                         &lt;/div&gt;                          &lt;div className=\"form-group\"&gt;                             &lt;label className=\"control-label\"&gt;Contact Number: &lt;/label&gt;                             &lt;input className=\"form-control\" type=\"text\" name=\"contactNumber\" value={this.state.contactNumber} onChange={this.onChange}&gt;&lt;/input&gt;                         &lt;/div&gt;                          &lt;div className=\"form-group\"&gt;                             &lt;label className=\"control-label\"&gt;Address:  &lt;/label&gt;                             &lt;input className=\"form-control\" type=\"text\" name=\"address\" value={this.state.address} onChange={this.onChange}&gt;&lt;/input&gt;                         &lt;/div&gt;                          &lt;div className=\"form-group\"&gt;                             &lt;input type=\"submit\" value=\"Add Customer\" className=\"btn btn-primary\"&gt;&lt;/input&gt;                         &lt;/div&gt;                      &lt;/form&gt;                  &lt;/div&gt;             &lt;/div&gt;         )     }  }    Customers.jsx    import React, { Component } from 'react'; import { getData } from '../services/AccessAPI';  // export keyword is a new feature in ES6 let export your functions ,  // variables so you can get access to them in other js files  export class Customers extends Component {     //“Props” is a special keyword in React, which stands for properties and is being used for passing data from one component to another.     constructor(props) {          //If you do not call super(props) method, this. props will be undefined          super(props);          this.OncustomerEdit = this.OncustomerEdit.bind(this);         this.OncustomerDelete = this.OncustomerDelete.bind(this);         this.onCustomerCreate = this.onCustomerCreate.bind(this);          this.state = {             customers: [],             loading: true,             failed: false,             error: ''         }     }      /*Lifecycle Method: The componentDidMount() method runs after      the component output has been rendered to the DOM.*/      componentDidMount() {         this.populateCustomersData();     }      // Event handler for create button     onCustomerCreate() {         const { history } = this.props;         history.push('/banking/customer/create');     }      // Event handler for edit button     OncustomerEdit(id) {         const { history } = this.props;         history.push('/banking/customer/edit/' + id);     }      // Event handler for delete button     OncustomerDelete(id) {         const { history } = this.props;         history.push('/banking/customer/delete/' + id);     }      populateCustomersData() {          getData(`api/Customer/getall`).then(             (result) =&gt; {                 let responseJson = result;                 if (responseJson) {                     this.setState({                         customers: responseJson,                         loading: false                     });                 }             }         );     }      renderAllCustomersTable(customers) {         return (             &lt;table className=\"table table-striped\"&gt;                 &lt;thead&gt;                     &lt;tr&gt;                         &lt;th&gt;First Name&lt;/th&gt;                         &lt;th&gt;Last Name&lt;/th&gt;                         &lt;th&gt;Email&lt;/th&gt;                         &lt;th&gt;Contact Number&lt;/th&gt;                         &lt;th&gt;Address&lt;/th&gt;                         &lt;th&gt;Actions&lt;/th&gt;                     &lt;/tr&gt;                 &lt;/thead&gt;                 &lt;tbody&gt;                     {                         customers.map(customer =&gt; (                             &lt;tr key={customer.id}&gt;                                 &lt;td&gt;{customer.firstName}&lt;/td&gt;                                 &lt;td&gt;{customer.lastName}&lt;/td&gt;                                 &lt;td&gt;{customer.email}&lt;/td&gt;                                 &lt;td&gt;{customer.contactNumber}&lt;/td&gt;                                 &lt;td&gt;{customer.address}&lt;/td&gt;                                 &lt;td&gt;&lt;button onClick={() =&gt; this.OncustomerEdit(customer.id)} className=\"btn btn-success\"&gt;Edit&lt;/button&gt; ||                                     &lt;button onClick={() =&gt; this.OncustomerDelete(customer.id)} className=\"btn btn-danger\"&gt;Delete&lt;/button&gt;&lt;/td&gt;                             &lt;/tr&gt;                         ))                     }                 &lt;/tbody&gt;             &lt;/table&gt;         );     }      render() {          let content = this.state.loading ? (             &lt;p&gt;                 &lt;em&gt;Loading...&lt;/em&gt;             &lt;/p&gt;         ) : (             this.renderAllCustomersTable(this.state.customers)         )          return (             &lt;div&gt;                 &lt;h2&gt;Customer&lt;/h2&gt;                 &lt;button onClick={() =&gt; this.onCustomerCreate()} className=\"btn btn-primary\"&gt;Create&lt;/button&gt;                 {content}             &lt;/div&gt;         );     }  }    _Edit.jsx   import React, { Component } from \"react\"; import { getData, putData } from \"../services/AccessAPI\";  export class Edit extends Component {     constructor(props) {         super(props);          this.onChangeFirstName = this.onChangeFirstName.bind(this);         this.onChangeLastName = this.onChangeLastName.bind(this);         this.onChangeEmail = this.onChangeEmail.bind(this);         this.onChangeContactNumber = this.onChangeContactNumber.bind(this);         this.onChangeAddress = this.onChangeAddress.bind(this);         this.onSubmit = this.onSubmit.bind(this);          this.state = {             id: '',             firstName: '',             lastName: '',             email: '',             contactNumber: '',             address: ''         }     }      componentDidMount() {         const { id } = this.props.match.params;         this.getCustomer(id);     }      getCustomer(id) {         getData('api/Customer/' + id).then(             (result) =&gt; {                 if (result) {                     this.setState({                         id: result.id,                         firstName: result.firstName,                         lastName: result.lastName,                         email: result.email,                         contactNumber: result.contactNumber,                         address: result.address                         //loading: false                     });                 }             }         );     }      onChangeFirstName(e) {         this.setState({             firstName: e.target.value         });     }      onChangeLastName(e) {         this.setState({             lastName: e.target.value         });     }      onChangeEmail(e) {         this.setState({             email: e.target.value         });     }      onChangeContactNumber(e) {         this.setState({             contactNumber: e.target.value         });      }      onChangeAddress(e) {         this.setState({             address: e.target.value         });     }       onUpdateCancel() {         const { history } = this.props;         history.push('/banking/customers');     }      onSubmit(e) {          e.preventDefault();         const { history } = this.props;         const { id } = this.props.match.params;         let customerObj = {             id: this.state.id,             firstName: this.state.firstName,             lastName: this.state.lastName,             contactNumber: this.state.contactNumber,             email: this.state.email,             address: this.state.address         }          putData('api/Customer/Edit/' + id, customerObj).then((result) =&gt; {             let responseJson = result;             if (responseJson) {                 console.log(responseJson);                 history.push('/banking/customers');             }         }          );     }      render() {         return (             &lt;div className=\"row\"&gt;                 &lt;div className=\"col-md-4\"&gt;                     &lt;h3&gt;Edit Customer&lt;/h3&gt;                     &lt;form onSubmit={this.onSubmit}&gt;                         &lt;div className=\"form-group\"&gt;                             &lt;label className=\"control-label\"&gt;First Name: &lt;/label&gt;                             &lt;input className=\"form-control\" type=\"text\" value={this.state.firstName} onChange={this.onChangeFirstName}&gt;&lt;/input&gt;                         &lt;/div&gt;                          &lt;div className=\"form-group\"&gt;                             &lt;label className=\"control-label\"&gt;Last Name: &lt;/label&gt;                             &lt;input className=\"form-control\" type=\"text\" value={this.state.lastName} onChange={this.onChangeLastName}&gt;&lt;/input&gt;                         &lt;/div&gt;                          &lt;div className=\"form-group\"&gt;                             &lt;label className=\"control-label\"&gt;Email: &lt;/label&gt;                             &lt;input className=\"form-control\" type=\"text\" value={this.state.email} onChange={this.onChangeEmail}&gt;&lt;/input&gt;                         &lt;/div&gt;                          &lt;div className=\"form-group\"&gt;                             &lt;label className=\"control-label\"&gt;Contact Number: &lt;/label&gt;                             &lt;input className=\"form-control\" type=\"text\" value={this.state.contactNumber} onChange={this.onChangeContactNumber}&gt;&lt;/input&gt;                         &lt;/div&gt;                          &lt;div className=\"form-group\"&gt;                             &lt;label className=\"control-label\"&gt;Address: &lt;/label&gt;                             &lt;input className=\"form-control\" type=\"text\" value={this.state.address} onChange={this.onChangeAddress}&gt;&lt;/input&gt;                         &lt;/div&gt;                          &lt;div className=\"form-group\"&gt;                             &lt;button onClick={this.onUpdateCancel} className=\"btn btn-default\"&gt;Cancel&lt;/button&gt;                             &lt;input type=\"submit\" value=\"Edit\" className=\"btn btn-primary\"&gt;&lt;/input&gt;                         &lt;/div&gt;                      &lt;/form&gt;                  &lt;/div&gt;             &lt;/div&gt;         )     } }    Delete.jsx    import React, { Component } from \"react\"; import { deleteData, getData } from \"../services/AccessAPI\";  export class Delete extends Component {     constructor(props) {         super(props);          this.onCancel = this.onCancel.bind(this);         this.onConfirmation = this.onConfirmation.bind(this);          this.state = {             firstName: '',             lastName: '',             email: '',             contactNumber: '',             address: ''         }     }      componentDidMount() {         const { id } = this.props.match.params;         this.getCustomer(id);     }      getCustomer(id) {         getData('api/Customer/' + id).then(             (result) =&gt; {                 if (result) {                     this.setState({                         id: result.id,                         firstName: result.firstName,                         lastName: result.lastName,                         email: result.email,                         contactNumber: result.contactNumber,                         address: result.address                         //loading: false                     });                 }             }         );     }      onCancel() {         const { history } = this.props;         history.push('/banking/customers');     }      onConfirmation(e) {         e.preventDefault();          const { id } = this.props.match.params;         const { history } = this.props;          deleteData('api/Customer/Delete/' + id).then((result) =&gt; {             let responseJson = result;             if (responseJson) {                 history.push('/banking/customers');             }         }         );     }       render() {         return (             &lt;div&gt;                 &lt;h2&gt;Delete&lt;/h2&gt;                 &lt;h3&gt;Are you sure you want to delete this?&lt;/h3&gt;                 &lt;div&gt;                     &lt;h4&gt;Customer&lt;/h4&gt;                     &lt;dl class=\"row\"&gt;                         &lt;dt class=\"col-sm-2\"&gt;                             First Name:                         &lt;/dt&gt;                         &lt;dd class=\"col-sm-10\"&gt;                             {this.state.firstName}                         &lt;/dd&gt;                         &lt;dt class=\"col-sm-2\"&gt;                             Last Name:                         &lt;/dt&gt;                         &lt;dd class=\"col-sm-10\"&gt;                             {this.state.lastName}                         &lt;/dd&gt;                         &lt;dt class=\"col-sm-2\"&gt;                             Email:                         &lt;/dt&gt;                         &lt;dd class=\"col-sm-10\"&gt;                             {this.state.email}                         &lt;/dd&gt;                         &lt;dt class=\"col-sm-2\"&gt;                             Contact Number:                         &lt;/dt&gt;                         &lt;dd class=\"col-sm-10\"&gt;                             {this.state.contactNumber}                         &lt;/dd&gt;                          &lt;dt class=\"col-sm-2\"&gt;                             Address:                         &lt;/dt&gt;                         &lt;dd class=\"col-sm-10\"&gt;                             {this.state.address}                         &lt;/dd&gt;                      &lt;/dl&gt;                      &lt;form onSubmit={this.onConfirmation}&gt;                         &lt;input type=\"hidden\" asp-for=\"Id\" /&gt;                         &lt;button type=\"submit\" class=\"btn btn-danger\"&gt;Delete&lt;/button&gt; |                         &lt;button onClick={this.onCancel} className=\"btn btn-primary\"&gt;Back to List&lt;/button&gt;                     &lt;/form&gt;                 &lt;/div&gt;             &lt;/div&gt;         )     } }       Create roles components in src-&gt;components-&gt;Role folder   CreateRole.js   import { Component } from \"react\"; import { postData } from \"../services/AccessAPI\";  export default class CreateRole extends Component{     constructor(props){         super(props);         this.state = {             roleName: '',             loading: true         };          this.onSubmit = this.onSubmit.bind(this);         this.onChange = this.onChange.bind(this);      }      onSubmit(e){         e.preventDefault();         const{history} = this.props;          let roleObj = {             roleName: this.state.roleName         }          postData('api/Role/Create', roleObj).then((result) =&gt; {             let responseJson = result;              if(responseJson){                 history.push('/admin/roles');             }         });     }      onChange(e){         this.setState({[e.target.name]: e.target.value});     }      render(){         return(             &lt;div className=\"row\"&gt;             &lt;div className=\"col-md-4\"&gt;                 &lt;h3&gt;Create new role&lt;/h3&gt;                 &lt;form onSubmit={this.onSubmit}&gt;                     &lt;div className=\"form-group\"&gt;                         &lt;label className=\"control-label\"&gt;Role Name: &lt;/label&gt;                         &lt;input className=\"form-control\" type=\"text\" name=\"roleName\" value={this.state.roleName} onChange={this.onChange}&gt;&lt;/input&gt;                     &lt;/div&gt;                     &lt;div className=\"form-group\"&gt;                         &lt;input type=\"submit\" value=\"Add Role\" className=\"btn btn-primary\"&gt;&lt;/input&gt;                     &lt;/div&gt;                  &lt;/form&gt;              &lt;/div&gt;         &lt;/div&gt;         );     } }   DeleteRole.js    import React, { Component } from \"react\"; import { deleteData, getData } from \"../services/AccessAPI\";  export class DeleteRole extends Component {     constructor(props) {         super(props);          this.onCancel = this.onCancel.bind(this);         this.onConfirmation = this.onConfirmation.bind(this);          this.state = {             roleName: '',             loading: true         }     }      componentDidMount() {         const { id } = this.props.match.params;          getData('api/Role/' + id).then(             (result) =&gt; {                 console.log(\"Role for edit: \");                 console.log(result);                 if (result) {                     this.setState({                         id: result.id,                         roleName: result.roleName,                         loading: false                     });                 }             }         );     }      onCancel() {         const { history } = this.props;         history.push('/admin/roles');     }      onConfirmation(e) {         e.preventDefault();          const { id } = this.props.match.params;         const { history } = this.props;          deleteData('api/Role/Delete/' + id).then((result) =&gt; {             let responseJson = result;             if (responseJson) {                 console.log(responseJson);                 history.push('/admin/roles');             }         }         );      }       render() {         return (             &lt;div&gt;                 &lt;h2&gt;::Delete role::&lt;/h2&gt;                 &lt;h3&gt;Are you sure you want to delete this?&lt;/h3&gt;                 &lt;div&gt;                     &lt;h4&gt;Role Information&lt;/h4&gt;                     &lt;dl class=\"row\"&gt;                         &lt;dt class=\"col-sm-2\"&gt;                             Role Name:                         &lt;/dt&gt;                         &lt;dd class=\"col-sm-10\"&gt;                             {this.state.roleName}                         &lt;/dd&gt;                     &lt;/dl&gt;                      &lt;form onSubmit={this.onConfirmation}&gt;                         &lt;input type=\"hidden\" asp-for=\"Id\" /&gt;                         &lt;button type=\"submit\" class=\"btn btn-danger\"&gt;Delete&lt;/button&gt; |                         &lt;button onClick={this.onCancel} className=\"btn btn-primary\"&gt;Back to List&lt;/button&gt;                     &lt;/form&gt;                 &lt;/div&gt;             &lt;/div&gt;         )     } }    EditRole.js   import { Component } from \"react\"; import { getData, putData } from \"../services/AccessAPI\";  export default class EditRole extends Component {     constructor(props) {         super(props);         this.state = {             id: '',             roleName: '',         };          this.onChange = this.onChange.bind(this);         this.onSubmit = this.onSubmit.bind(this);      }      onChange(e) {         this.setState({ [e.target.name]: e.target.value });     }        componentDidMount() {         const { id } = this.props.match.params;         getData('api/Role/' + id).then(             (result) =&gt; {                 if (result) {                     this.setState({                         id: result.id,                         roleName: result.roleName,                         loading: false                     });                 }             }         );     }      onSubmit(e) {         e.preventDefault();         const { history } = this.props;         const { id } = this.props.match.params;          let roleObj = {             id: this.state.id,             roleName: this.state.roleName         }          putData('api/Role/Edit/' + id, roleObj).then((result) =&gt; {             let responseJson = result;             //console.log(\"update response: \");             if (responseJson) {                 console.log(responseJson);                 history.push('/admin/roles');             }         }          );     }      render() {         return (             &lt;div className=\"row\"&gt;                 &lt;div className=\"col-md-4\"&gt;                     &lt;h3&gt;Edit Role&lt;/h3&gt;                     &lt;form onSubmit={this.onSubmit}&gt;                         &lt;div className=\"form-group\"&gt;                             &lt;label className=\"control-label\"&gt;Role Name: &lt;/label&gt;                             &lt;input className=\"form-control\" type=\"text\" value={this.state.roleName} onChange={this.onChange} name=\"roleName\"                                 onKeyDown={this.onKeyDown} &gt;&lt;/input&gt;                         &lt;/div&gt;                          &lt;div className=\"form-group\"&gt;                             &lt;button onClick={this.onUpdateCancel} className=\"btn btn-default\"&gt;Cancel&lt;/button&gt;                             &lt;input type=\"submit\" value=\"Edit\" className=\"btn btn-primary\"&gt;&lt;/input&gt;                         &lt;/div&gt;                      &lt;/form&gt;                  &lt;/div&gt;             &lt;/div&gt;         );     } }   Roles.js   import { Component } from \"react\"; import { getData } from \"../services/AccessAPI\";  export default class Roles extends Component {     constructor(props) {         super(props);         this.state = {             roles: [],             loading: true         };          this.onRoleCreate = this.onRoleCreate.bind(this);         this.onRoleEdit = this.onRoleEdit.bind(this);         this.onRoleDelete = this.onRoleDelete.bind(this);      }      onRoleCreate(){         const { history } = this.props;         history.push('/admin/role/create');     }      onRoleEdit(id){         const {history} = this.props;         history.push('/admin/role/edit/' + id);     }      onRoleDelete(id){         const{history} = this.props;         history.push('/admin/role/delete/' + id);     }      componentDidMount() {         this.getAllRoles();     }      getAllRoles() {         getData('api/Role/GetAll').then(             (result) =&gt; {                 if (result) {                     this.setState({                         roles: result,                         loading: false                     });                 }             }         );     }      populateRolesTable(roles) {         return (             &lt;table className=\"table table-striped\"&gt;                 &lt;thead&gt;                     &lt;tr&gt;                         &lt;th&gt;Roles&lt;/th&gt;                         &lt;th&gt;Actions&lt;/th&gt;                     &lt;/tr&gt;                 &lt;/thead&gt;                 &lt;tbody&gt;                     {                         roles.map(role =&gt; (                             &lt;tr key={role.id}&gt;                                 &lt;td&gt;{role.roleName}&lt;/td&gt;                                 &lt;td&gt;&lt;button onClick={() =&gt; this.onRoleEdit(role.id)} className=\"btn btn-success\"&gt;Edit&lt;/button&gt; ||                                     &lt;button onClick={() =&gt; this.onRoleDelete(role.id)} className=\"btn btn-danger\"&gt;Delete&lt;/button&gt;&lt;/td&gt;                             &lt;/tr&gt;                         ))                     }                 &lt;/tbody&gt;             &lt;/table&gt;         );     }      render() {         let contnet = this.state.loading ? (             &lt;p&gt;                 &lt;em&gt;Loading ... &lt;/em&gt;             &lt;/p&gt;          ) : (             this.populateRolesTable(this.state.roles)         )         return (             &lt;div&gt;                 &lt;h4&gt;List of roles&lt;/h4&gt;                 &lt;button onClick={() =&gt; this.onRoleCreate()} className=\"btn btn-primary\"&gt;Create new role&lt;/button&gt;                 {contnet}             &lt;/div&gt;         );     } }       Create User’s components in src-&gt;components-&gt;User   CreateUser.js   import { Component } from \"react\"; import SessionManager from \"../Auth/SessionManager\"; import { postData } from \"../services/AccessAPI\";  export default class CreateUser extends Component {     constructor(props) {         super(props);         this.state = {             fullName: '',             email: '',             userName: '',             password: '',             confirmationPassword: '',             roles: [],             loading: true         };          this.onSubmit = this.onSubmit.bind(this);         this.onChange = this.onChange.bind(this);         this.onClickBack = this.onClickBack.bind(this);      }      onSubmit(e) {         e.preventDefault();         const { history } = this.props;          if (this.state.password !== this.state.confirmationPassword) {             alert(\"Password and confirm password are not same\");             return;         }          let userObj = {             fullName: this.state.userName,             email: this.state.email,             userName: this.state.userName,             password: this.state.password,             confirmationPassword: this.state.confirmationPassword,             roles: []         }          postData('api/User/Create', userObj).then((result) =&gt; {             let responseJson = result;             if (responseJson) {                 history.push('/admin/users');             }         });     }      onClickBack(e){         e.preventDefault();         const { history } = this.props;          if(SessionManager.getToken()){             history.push('/admin/users');         }else{             history.push('/login');         }        }      onChange(e) {         this.setState({ [e.target.name]: e.target.value });     }      render() {         return (             &lt;div className=\"row\"&gt;                 &lt;div className=\"col-md-4\"&gt;                     &lt;h3&gt;Create new user&lt;/h3&gt;                     &lt;form onSubmit={this.onSubmit}&gt;                         &lt;div className=\"form-group\"&gt;                             &lt;label className=\"control-label\"&gt;Full Name: &lt;/label&gt;                             &lt;input className=\"form-control\" type=\"text\" name=\"fullName\" value={this.state.fullName} onChange={this.onChange}&gt;&lt;/input&gt;                         &lt;/div&gt;                          &lt;div className=\"form-group\"&gt;                             &lt;label className=\"control-label\"&gt;Email: &lt;/label&gt;                             &lt;input className=\"form-control\" type=\"text\" name=\"email\" value={this.state.email} onChange={this.onChange}&gt;&lt;/input&gt;                         &lt;/div&gt;                          &lt;div className=\"form-group\"&gt;                             &lt;label className=\"control-label\"&gt;User Name: &lt;/label&gt;                             &lt;input className=\"form-control\" type=\"text\" name=\"userName\" value={this.state.userName} onChange={this.onChange}&gt;&lt;/input&gt;                         &lt;/div&gt;                          &lt;div className=\"form-group\"&gt;                             &lt;label className=\"control-label\"&gt;Password: &lt;/label&gt;                             &lt;input className=\"form-control\" type=\"password\" name=\"password\" value={this.state.password} onChange={this.onChange}&gt;&lt;/input&gt;                         &lt;/div&gt;                          &lt;div className=\"form-group\"&gt;                             &lt;label className=\"control-label\"&gt;Confirm Password: &lt;/label&gt;                             &lt;input className=\"form-control\" type=\"password\" name=\"confirmationPassword\" value={this.state.confirmationPassword} onChange={this.onChange}&gt;&lt;/input&gt;                         &lt;/div&gt;                           &lt;div className=\"form-group\"&gt;                             &lt;input type=\"submit\" value=\"Create User\" className=\"btn btn-primary\"&gt;&lt;/input&gt; &amp;nbsp; &amp;nbsp;                              &lt;input type=\"button\" value=\"Back\" onClick={this.onClickBack} className=\"btn btn-primary\"&gt;&lt;/input&gt;                         &lt;/div&gt;                      &lt;/form&gt;                  &lt;/div&gt;             &lt;/div&gt;         );     } }   DeleteUser.js   import React, { Component } from \"react\"; import { deleteData, getData } from \"../services/AccessAPI\";  export class DeleteUser extends Component {     constructor(props) {         super(props);          this.state = {             fullName: '',             userName: '',             email: '',             roles: [],             loading: true         }          this.onCancel = this.onCancel.bind(this);         this.onConfirmation = this.onConfirmation.bind(this);     }      componentDidMount() {         const { id } = this.props.match.params;          getData('api/User/GetUserDetails/' + id).then(             (result) =&gt; {                 console.log(\"Role for edit: \");                 console.log(result);                 if (result) {                     this.setState({                         fullName: result.fullName,                         userName: result.userName,                         email: result.email,                         roles: result.roles,                         loading: false                     });                 }             }         );     }      onCancel() {         const { history } = this.props;         history.push('/admin/users');     }      onConfirmation(e) {         e.preventDefault();          const { id } = this.props.match.params;         const { history } = this.props;          deleteData('api/User/Delete/' + id).then((result) =&gt; {             let responseJson = result;             if (responseJson) {                 history.push('/admin/users');             }         }         );      }       render() {         return (             &lt;div&gt;                 &lt;h2&gt;::Delete user::&lt;/h2&gt;                 &lt;h3&gt;Are you sure you want to delete this?&lt;/h3&gt;                 &lt;div&gt;                     &lt;h4&gt;User Information&lt;/h4&gt;                     &lt;dl class=\"row\"&gt;                         &lt;dt class=\"col-sm-2\"&gt;                             Full Name:                         &lt;/dt&gt;                         &lt;dd class=\"col-sm-10\"&gt;                             {this.state.fullName}                         &lt;/dd&gt;                     &lt;/dl&gt;                      &lt;dl class=\"row\"&gt;                         &lt;dt class=\"col-sm-2\"&gt;                             User Name:                         &lt;/dt&gt;                         &lt;dd class=\"col-sm-10\"&gt;                             {this.state.userName}                         &lt;/dd&gt;                     &lt;/dl&gt;                      &lt;dl class=\"row\"&gt;                         &lt;dt class=\"col-sm-2\"&gt;                             Email:                         &lt;/dt&gt;                         &lt;dd class=\"col-sm-10\"&gt;                             {this.state.email}                         &lt;/dd&gt;                     &lt;/dl&gt;                      &lt;form onSubmit={this.onConfirmation}&gt;                         &lt;input type=\"hidden\" asp-for=\"Id\" /&gt;                         &lt;button type=\"submit\" class=\"btn btn-danger\"&gt;Delete&lt;/button&gt; |                         &lt;button onClick={this.onCancel} className=\"btn btn-primary\"&gt;Back to List&lt;/button&gt;                     &lt;/form&gt;                 &lt;/div&gt;             &lt;/div&gt;         )     } }  UpdateUser.js    import { Component } from \"react\"; import { getData, putData } from \"../services/AccessAPI\";  export default class UpdateUser extends Component{     constructor(props){         super(props);         this.state = {             id: '',             fullName: '',             userName: '',             email: '',             roles: []         };          this.onChange = this.onChange.bind(this);         this.onSubmit = this.onSubmit.bind(this);      }      onChange(e) {         this.setState({ [e.target.name]: e.target.value });     }      onKeyDown = (e) =&gt; {         if (e.key === 'Enter') {             this.update(false);         }     }       componentDidMount(){         const {id} = this.props.match.params;         getData('api/User/GetUserDetails/' + id).then(             (result) =&gt; {                 //let responseJson = result;                 console.log(\"user for edit: \");                 console.log(result);                 if (result) {                     this.setState({                         //users: result,                         id: result.id,                         fullName: result.fullName,                         userName: result.userName,                         email: result.email,                         loading: false                     });                 }             }         );     }      onSubmit(e){         e.preventDefault();         const {history} = this.props;         const {id} = this.props.match.params;          let userProfile = {             id: this.state.id,             fullName: this.state.fullName,             email: this.state.email,             roles: this.state.roles         }          putData('api/User/EditUserProfile/' + id, userProfile).then((result) =&gt; {             let responseJson = result;             console.log(\"update response: \");                          if(responseJson){                 console.log(responseJson);                 history.push('/admin/users');             }         }          );     }      render(){         return(             &lt;div className=\"row\"&gt;                 &lt;div className=\"col-md-4\"&gt;                     &lt;h3&gt;Edit User&lt;/h3&gt;                     &lt;form onSubmit={this.onSubmit}&gt;                         &lt;div className=\"form-group\"&gt;                             &lt;label className=\"control-label\"&gt;Full Name: &lt;/label&gt;                             &lt;input className=\"form-control\" type=\"text\" value={this.state.fullName} onChange={this.onChange} name=\"fullName\"                             onKeyDown={this.onKeyDown} &gt;&lt;/input&gt;                         &lt;/div&gt;                          &lt;div className=\"form-group\"&gt;                             &lt;label className=\"control-label\"&gt;User Name: &lt;/label&gt;                             &lt;input className=\"form-control\" type=\"text\" value={this.state.userName} disabled = {true} readOnly = {true}&gt;&lt;/input&gt;                         &lt;/div&gt;                          &lt;div className=\"form-group\"&gt;                             &lt;label className=\"control-label\"&gt;Email: &lt;/label&gt;                             &lt;input className=\"form-control\" type=\"text\" value={this.state.email} onChange={this.onChange} name=\"email\"                             onKeyDown={this.onKeyDown}&gt;&lt;/input&gt;                         &lt;/div&gt;                          &lt;div className=\"form-group\"&gt;                             &lt;button onClick={this.onUpdateCancel} className=\"btn btn-default\"&gt;Cancel&lt;/button&gt;                             &lt;input type=\"submit\" value=\"Edit\" className=\"btn btn-primary\"&gt;&lt;/input&gt;                         &lt;/div&gt;                      &lt;/form&gt;                  &lt;/div&gt;             &lt;/div&gt;         );     } }   Users.js    import { Component } from \"react\"; import { getData } from \"../services/AccessAPI\";  export default class Users extends Component {     constructor(props) {         super(props);         this.state = {             users: [],             loading: true         };          this.onUserCreate = this.onUserCreate.bind(this);         this.onUserDelete = this.onUserDelete.bind(this);     }       componentDidMount() {         this.getAllUsersData();     }      onUserCreate(){         const{history} = this.props;         history.push('/admin/user/create');     }       onUserEdit(id){         const { history } = this.props;         history.push('/admin/user/edit/' + id);     }      onUserDelete(id){         const {history} = this.props;         history.push('/admin/user/delete/' + id);     }      getAllUsersData() {         getData('api/User/GetAll').then(             (result) =&gt; {                 if (result) {                     this.setState({                         users: result,                         loading: false                     });                 }             }         );      }      renderAllUsersTable(users) {         return (             &lt;table className=\"table table-striped\"&gt;                 &lt;thead&gt;                     &lt;tr&gt;                         &lt;th&gt;Full Name&lt;/th&gt;                         &lt;th&gt;User Name&lt;/th&gt;                         &lt;th&gt;Email&lt;/th&gt;                         &lt;th&gt;Actions&lt;/th&gt;                     &lt;/tr&gt;                 &lt;/thead&gt;                 &lt;tbody&gt;                     {                         users.map(user =&gt; (                             &lt;tr key={user.id}&gt;                                 &lt;td&gt;{user.fullName}&lt;/td&gt;                                 &lt;td&gt;{user.userName}&lt;/td&gt;                                 &lt;td&gt;{user.email}&lt;/td&gt;                                 &lt;td&gt;&lt;button onClick={() =&gt; this.onUserEdit(user.id)} className=\"btn btn-success\"&gt;Edit&lt;/button&gt; ||                                     &lt;button onClick={() =&gt; this.onUserDelete(user.id)} className=\"btn btn-danger\"&gt;Delete&lt;/button&gt;&lt;/td&gt;                             &lt;/tr&gt;                         ))                     }                 &lt;/tbody&gt;             &lt;/table&gt;         );     }      render() {         let content = this.state.loading ? (             &lt;p&gt;                 &lt;em&gt;Loading...&lt;/em&gt;             &lt;/p&gt;         ) : (             this.renderAllUsersTable(this.state.users)         )          return (             &lt;div&gt;                 &lt;h3&gt;List of Users&lt;/h3&gt;                 &lt;button onClick={() =&gt; this.onUserCreate()} className=\"btn btn-primary\"&gt;Create new user&lt;/button&gt;                 {content}             &lt;/div&gt;         );     } }      Create UsersRole components in src-&gt;components-&gt;UsersRoles folder   RoleList.js   const RoleList = (props) =&gt; {      //debugger;     const roles = props.roles;     const userRoles = props.userRoles;       function isExists(roleName) {         if (userRoles.length &lt;= 0) return false;         return userRoles.includes(roleName);     }      const roleList = (         &lt;div&gt;             &lt;ul className=\"checkBoxList\"&gt;                 {                     roles.map((role, index) =&gt; (                          &lt;li key={index}&gt;                             &lt;input type=\"checkbox\" checked={isExists(role.roleName)} value={role.roleName} onChange={props.onChange} &gt;&lt;/input&gt;                             &lt;span class=\"input-group-addon\"&gt;&amp;nbsp;&lt;/span&gt;                             &lt;label&gt;{role.roleName}&lt;/label&gt;                         &lt;/li&gt;                     )                     )                 }             &lt;/ul&gt;         &lt;/div&gt;     );      return roleList; }  export default RoleList;   UsersRoles.js   import { Component } from \"react\"; import { getData, putData } from \"../services/AccessAPI\"; import RoleList from \"./RoleList\";  export default class UsersRole extends Component {     constructor(props) {         super(props);         this.state = {             userId: '',             fullName: '',             userName: '',             userRoles: [],             roles: [],             msg: '',             loading: true         };          this.onSearch = this.onSearch.bind(this);         this.onChange = this.onChange.bind(this);         this.onSubmit = this.onSubmit.bind(this);         this.handleCheckboxChange = this.handleCheckboxChange.bind(this);     }      onSubmit(e) {         e.preventDefault();         let userRoles = {             userName: this.state.userName,             roles: this.state.userRoles         }         putData('api/User/EditUserRoles', userRoles).then((result) =&gt; {             let responseJson = result;             if (responseJson) {                 this.setState({ msg: \"User's roles updated successfully!\" });             }         }          );     }      handleCheckboxChange = (event) =&gt; {          if (event.target.checked) {             if (!this.state.userRoles.includes(event.target.value)) {                 this.setState(prevState =&gt; ({ userRoles: [...prevState.userRoles, event.target.value] }));             }         } else {             this.setState(prevState =&gt; ({ userRoles: prevState.userRoles.filter(roleName =&gt; roleName !== event.target.value) }));         }      }      onChange(e) {         this.setState({ [e.target.name]: e.target.value });     }       componentDidMount() {         this.getAllRoles();     }       onSearch(userName) {         getData('api/User/GetUserDetailsByUserName/' + userName).then(             (result) =&gt; {                 if (result) {                     this.setState({                         userRoles: result.roles,                         fullName: result.fullName,                         userName: result.userName,                         loading: false                     });                 }             }         );     }      getAllRoles() {         //debugger;         getData('api/Role/GetAll').then(             (result) =&gt; {                 if (result) {                     this.setState({                         roles: result,                         loading: false                     });                 }             }         );     }       renderRoleList() {         return (             &lt;RoleList roles={this.state.roles} userRoles={this.state.userRoles} onChange={this.handleCheckboxChange} /&gt;         );     };       render() {          let renderCheckbox = this.renderRoleList();           return (             &lt;div&gt;                 &lt;h3&gt;Users Role&lt;/h3&gt;                 &lt;div className=\"input-group\"&gt;                     &lt;input className=\"col-md-3\" type=\"text\" name=\"userName\" placeholder=\"Enter user name\" value={this.state.userName} onChange={this.onChange}&gt;&lt;/input&gt;                     &lt;span class=\"input-group-addon\"&gt;&amp;nbsp;&lt;/span&gt;                     &lt;button className=\"btn btn-primary\" onClick={() =&gt; this.onSearch(this.state.userName)}&gt;                         Search                     &lt;/button&gt;                 &lt;/div&gt;                 &lt;label&gt;Full Name: {this.state.fullName}&lt;/label&gt;                 &lt;label className=\"col-md-4\"&gt;User Name: {this.state.userName}&lt;/label&gt;                 &lt;hr&gt;&lt;/hr&gt;                    &lt;form onSubmit={this.onSubmit}&gt;                     &lt;div className=\"form-group\"&gt;                         {renderCheckbox}                     &lt;/div&gt;                     &lt;div className=\"form-group\"&gt;                         &lt;input type=\"submit\" value=\"Save\" className=\"btn btn-primary\"&gt;&lt;/input&gt;                     &lt;/div&gt;                 &lt;/form&gt;                 &lt;label&gt;{this.state.msg}&lt;/label&gt;             &lt;/div&gt;         );     } }    Step 5: Add Route in App.js     Modify App.js as follows   Here I have define route for employees, create, edit, delete   App.js   import React, { Component } from 'react'; import { Route } from 'react-router'; import { Layout } from './components/Layout'; import { Home } from './components/Home'; import { FetchData } from './components/FetchData'; import { Counter } from './components/Counter';  import './custom.css'   import { Customers } from './components/Customer/Customers'; import { Create } from './components/Customer/Create'; import { Edit } from './components/Customer/Edit'; import { Delete } from './components/Customer/Delete';  import Login from './components/Auth/Login'; import Logout from './components/Auth/Logout'; import Registration from './components/Auth/Registration'; import Users from './components/User/Users'; import UpdateUser from './components/User/UpdateUser'; import Roles from './components/Role/Roles'; import CreateRole from './components/Role/CreateRole'; import EditRole from './components/Role/EditRole'; import { DeleteRole } from './components/Role/DeleteRole'; import CreateUser from './components/User/CreateUser'; import { DeleteUser } from './components/User/DeleteUser'; import UsersRole from './components/UsersRoles/UsersRoles'; import SessionManager from './components/Auth/SessionManager';  export default class App extends Component {   static displayName = App.name;     render() {     return (       //if(SessionManager.getToken())       SessionManager.getToken() ? (         &lt;Layout&gt;           &lt;Route exact path='/home' component={Home} /&gt;            &lt;Route path='/logout' component={Logout} /&gt;           &lt;Route path='/registration' component={Registration} /&gt;             &lt;Route path='/banking/customers' component={Customers} /&gt;           &lt;Route path='/banking/customer/create' component={Create} /&gt;           &lt;Route path='/banking/customer/edit/:id' component={Edit}&gt;&lt;/Route&gt;           &lt;Route path='/banking/customer/delete/:id' component={Delete}&gt;&lt;/Route&gt;              &lt;Route path='/counter' component={Counter} /&gt;           &lt;Route path='/fetch-data' component={FetchData} /&gt;            &lt;Route path='/admin/users' component={Users}&gt;&lt;/Route&gt;           &lt;Route path='/admin/user/edit/:id' component={UpdateUser}&gt;&lt;/Route&gt;           &lt;Route path='/admin/user/delete/:id' component={DeleteUser}&gt;&lt;/Route&gt;            &lt;Route path='/admin/roles' component={Roles}&gt;&lt;/Route&gt;           &lt;Route path='/admin/role/create' component={CreateRole}&gt;&lt;/Route&gt;           &lt;Route path='/admin/role/edit/:id' component={EditRole}&gt;&lt;/Route&gt;           &lt;Route path='/admin/role/delete/:id' component={DeleteRole}&gt;&lt;/Route&gt;            &lt;Route path='/admin/usersroles' component={UsersRole}&gt;&lt;/Route&gt;           &lt;Route path='/admin/user/create' component={CreateUser}&gt;&lt;/Route&gt;          &lt;/Layout&gt;        ) : (          &lt;&gt;           &lt;Layout&gt;             &lt;Route path={'/', \"/login\"} component={Login} /&gt;             &lt;Route path='/admin/user/register' component={CreateUser}&gt;&lt;/Route&gt;           &lt;/Layout&gt;         &lt;/&gt;        )      );   } }   Step 6: Add required menu     Change NavMenu.js as follows in src-&gt;components   NavMenu.js   import React, { Component } from 'react'; import {     Collapse, Container, Navbar, NavbarBrand, NavbarToggler, NavItem, NavLink, UncontrolledDropdown,     DropdownToggle,     DropdownMenu,     DropdownItem, } from 'reactstrap';  import { Link } from 'react-router-dom'; import './NavMenu.css'; import LoginMenu from './LoginMenu'; //import { TempDropdown } from './TempDropdown';   export class NavMenu extends Component {     static displayName = NavMenu.name;      constructor(props) {         super(props);          this.toggleNavbar = this.toggleNavbar.bind(this);         this.state = {             collapsed: true         };     }      toggleNavbar() {         this.setState({             collapsed: !this.state.collapsed         });     }      render() {         return (             &lt;header&gt;                 &lt;Navbar className=\"navbar-expand-sm navbar-toggleable-sm ng-white border-bottom box-shadow mb-3\" light&gt;                     &lt;Container&gt;                         &lt;NavbarBrand tag={Link} to=\"/\"&gt;Auth&lt;/NavbarBrand&gt;                         &lt;NavbarToggler onClick={this.toggleNavbar} className=\"mr-2\" /&gt;                         &lt;Collapse className=\"d-sm-inline-flex flex-sm-row-reverse\" isOpen={!this.state.collapsed} navbar&gt;                             &lt;ul className=\"navbar-nav flex-grow\"&gt;                                 &lt;NavItem&gt;                                     &lt;NavLink tag={Link} className=\"text-dark\" to=\"/home\"&gt;Home&lt;/NavLink&gt;                                 &lt;/NavItem&gt;                                  &lt;UncontrolledDropdown nav inNavbar&gt;                                     &lt;DropdownToggle nav caret&gt;                                         Banking                                     &lt;/DropdownToggle&gt;                                     &lt;DropdownMenu right&gt;                                         &lt;DropdownItem&gt;                                             &lt;NavLink tag={Link} className=\"text-dark\" to=\"/banking/customers\"&gt;Customer&lt;/NavLink&gt;                                         &lt;/DropdownItem&gt;                                     &lt;/DropdownMenu&gt;                                 &lt;/UncontrolledDropdown&gt;                                  &lt;UncontrolledDropdown nav inNavbar&gt;                                     &lt;DropdownToggle nav caret&gt;                                         Admin                                     &lt;/DropdownToggle&gt;                                     &lt;DropdownMenu right&gt;                                         &lt;DropdownItem&gt;                                             &lt;NavLink tag={Link} className=\"text-dark\" to=\"/admin/users\"&gt;Users&lt;/NavLink&gt;                                         &lt;/DropdownItem&gt;                                         &lt;DropdownItem divider /&gt;                                         &lt;DropdownItem&gt;                                             &lt;NavLink tag={Link} className=\"text-dark\" to=\"/admin/roles\"&gt;Roles&lt;/NavLink&gt;                                         &lt;/DropdownItem&gt;                                          &lt;DropdownItem&gt;                                             &lt;NavLink tag={Link} className=\"text-dark\" to=\"/admin/usersroles\"&gt;Users Roles&lt;/NavLink&gt;                                         &lt;/DropdownItem&gt;                                       &lt;/DropdownMenu&gt;                                 &lt;/UncontrolledDropdown&gt;                                  {/* &lt;NavItem&gt;                                     &lt;NavLink tag={Link} className='text-dark' to=\"/login\"&gt;Login&lt;/NavLink&gt;                                 &lt;/NavItem&gt; */}                                  &lt;NavItem&gt;                                     &lt;NavLink tag={Link} className='text-dark' to=\"/logout\"&gt;Logout&lt;/NavLink&gt;                                 &lt;/NavItem&gt;                               &lt;/ul&gt;                         &lt;/Collapse&gt;                     &lt;/Container&gt;                 &lt;/Navbar&gt;             &lt;/header&gt;         );     } }    Step 7: Run and test the application     Run backend asp.net core application using visual studio   Go to the root directory of react application and run client application using the following command   npm start -o      Register user first then login and try to get customers list   Download Source Code  ","categories": ["ASP.NET","ASP.NET Core","C#","React","Auth"],
        "tags": ["csharp","aspnet","react","auth"],
        "url": "http://localhost:4000/authentication-and-authorization-using-react.js-and-asp.net-core/",
        "teaser":null},{
        "title": "Application health monitoring using asp.net core",
        "excerpt":"  Introduction   Health monitoring provides real-time information about the state of the application. It’s a very crucial part for large distributed application. Especially, microservies based application. In this article, I will show you how to monitor application’s health in different ways.   Tools and technologies used     Visual Studio 2022   .NET 6.0   SQL Server   Entity Framework   ASP.NET Core Web API   C#   Implementation   Step 1: Create solution and projects.      Create a solution name HealthCheck   Add 4 new web api project, name - Admin.API, Customer.API, Location.API and WebStatus in the solution.   Here WebStatus project will monitor health of Admin.API, Customer.API and Location.API project and display result on watchdog.   Step 2: Install nuget packages.      Install following nuget package in Admin.API Project   PM&gt; Install-Package AspNetCore.HealthChecks.UI.Client      Install following nuget packages in Customer.API Project   PM&gt; Install-Package AspNetCore.HealthChecks.SqlServer PM&gt; Install-Package AspNetCore.HealthChecks.UI.Client PM&gt; Install-Package Microsoft.EntityFrameworkCore.SqlServer PM&gt; Install-Package Newtonsoft.Json PM&gt; Install-Package Microsoft.Extensions.Diagnostics.HealthChecks.EntityFrameworkCore PM&gt; Install-Package System.Data.SqlClient       Install following nuget packages in Location.API Project   PM&gt; Install-Package AspNetCore.HealthChecks.UI.Client PM&gt; Install-Package Microsoft.EntityFrameworkCore PM&gt; Install-Package Microsoft.EntityFrameworkCore.SqlServer PM&gt; Install-Package Microsoft.Extensions.Diagnostics.HealthChecks.EntityFrameworkCore PM&gt; Install-Package AspNetCore.HealthChecks.SqlServer       Install following nuget packages in WebStatus Project   PM&gt; Install-Package AspNetCore.HealthChecks.UI PM&gt; Install-Package AspNetCore.HealthChecks.UI.InMemory.Storage   Step 3: Configure Admin.API project for health check      Modify Program.cs file is as follows   using HealthChecks.UI.Client; using Microsoft.AspNetCore.Diagnostics.HealthChecks;  var builder = WebApplication.CreateBuilder(args);  // Add services to the container.  builder.Services.AddControllers();  // Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle builder.Services.AddEndpointsApiExplorer(); builder.Services.AddSwaggerGen();  // Register required services for health checks builder.Services.AddHealthChecks();   var app = builder.Build();  // Configure the HTTP request pipeline. if (app.Environment.IsDevelopment()) {     app.UseSwagger();     app.UseSwaggerUI(); }  app.UseHttpsRedirection();  app.UseAuthorization();  app.MapControllers();  // Cofigure for health check app.MapHealthChecks(\"/hc\", new HealthCheckOptions() {     Predicate = _ =&gt; true,     ResponseWriter = UIResponseWriter.WriteHealthCheckUIResponse, });  //a basic health probe configuration that reports the app's availability to process requests (liveness) is sufficient to discover the status of the app. app.MapHealthChecks(\"/liveness\", new HealthCheckOptions() {     Predicate = r =&gt; r.Name.Contains(\"self\"), });  app.Run();       Here, Registered healthcheck service using   builder.Services.AddHealthChecks();      Added healthcheck end point using following code     // Cofigure for health check app.MapHealthChecks(\"/hc\", new HealthCheckOptions() {     Predicate = _ =&gt; true,     ResponseWriter = UIResponseWriter.WriteHealthCheckUIResponse, });  //a basic health probe configuration that reports the app's availability to process requests (liveness) is sufficient to discover the status of the app. app.MapHealthChecks(\"/liveness\", new HealthCheckOptions() {     Predicate = r =&gt; r.Name.Contains(\"self\"), });             Now you can run and check the application health using the following URL       https://localhost:7147/hc       https://localhost:7147/liveness       Step 4: Configure Customer.API project for health check      Add ConnectionString in appsettings.json file as follows   {   \"Logging\": {     \"LogLevel\": {       \"Default\": \"Information\",       \"Microsoft.AspNetCore\": \"Warning\"     }   },   \"ConnectionStrings\": {     \"CustomerDBConnection\": \"Server=localhost;Database=Demo.CustomerDB;User Id=sa;Password=secret@pass;\"   },   \"AllowedHosts\": \"*\" }       Add CustomerDbContext class in Customer.API/Db folder CustomerDbContext.cs    using Microsoft.EntityFrameworkCore;  namespace Customer.API.Db {     public class CustomerDbContext : DbContext     {         public CustomerDbContext(DbContextOptions&lt;CustomerDbContext&gt; options) : base(options)         {          }     } }        Add DatabaseHealthCheck and HealthCheckResponse class in Customer.API/Utility folder   DatabaseHealthCheck.cs    using Microsoft.Extensions.Diagnostics.HealthChecks; using System.Data.SqlClient;  namespace Customer.API.Utility {     public class DatabaseHealthCheck : IHealthCheck     {         private IConfiguration _configuration;         public DatabaseHealthCheck(IConfiguration configuration)         {             _configuration = configuration;         }         public async Task&lt;HealthCheckResult&gt; CheckHealthAsync(HealthCheckContext context, CancellationToken cancellationToken = default)         {                          string _connectionString = _configuration.GetConnectionString(\"CustomerDBConnection\");              using (var connection = new SqlConnection(_connectionString))             {                 try                 {                     connection.Open();                 }                 catch (SqlException)                 {                     // return HealthCheckResult.Healthy();                     return await Task.FromResult(new HealthCheckResult(context.Registration.FailureStatus, \"Cannot connect to Demo.CustomerDB\"));                 }             }              return HealthCheckResult.Healthy();         }     } }    HealthCheckResponse.cs   using HealthChecks.UI.Client; using Microsoft.Extensions.Diagnostics.HealthChecks; using Newtonsoft.Json;  namespace Customer.API.Utility {     public class HealthCheckResponse     {         public static Task CustomResponseWriter(HttpContext context, HealthReport healthReport)         {              context.Response.ContentType = \"application/json\";              var result = JsonConvert.SerializeObject(new             {                 status = healthReport.Status.ToString(),                 errors = healthReport.Entries.Select(e =&gt; new {                     key = e.Key,                     value = e.Value.Status.ToString()                 })             });              return UIResponseWriter.WriteHealthCheckUIResponse(context, healthReport);             //return context.Response.WriteAsync(result);         }     } }       Modify Program.cs file is as follows   using Customer.API.Db; using Customer.API.Utility; using HealthChecks.UI.Client; using Microsoft.AspNetCore.Diagnostics.HealthChecks; using Microsoft.EntityFrameworkCore; using Microsoft.Extensions.Diagnostics.HealthChecks;  var builder = WebApplication.CreateBuilder(args);   // Add services to the container.  builder.Services.AddControllers();  // Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle builder.Services.AddEndpointsApiExplorer(); builder.Services.AddSwaggerGen();  // Sql server health check with name \"customersql\" with custom healtcheck builder.Services.AddHealthChecks()     .AddCheck&lt;DatabaseHealthCheck&gt;(\"customersql\");   // Create DbContext builder.Services.AddDbContext&lt;CustomerDbContext&gt;(options =&gt;        options.UseSqlServer(            builder.Configuration.GetConnectionString(\"CustomerDBConnection\"))     );  builder.Services.AddHealthChecks()     .AddDbContextCheck&lt;CustomerDbContext&gt;(\"customerdbcontext\");  var app = builder.Build();  // Configure the HTTP request pipeline. if (app.Environment.IsDevelopment()) {     app.UseSwagger();     app.UseSwaggerUI(); }  app.UseHttpsRedirection();  app.UseAuthorization();  app.MapControllers();  var options = new HealthCheckOptions(); options.ResultStatusCodes[HealthStatus.Healthy] = StatusCodes.Status200OK; options.ResultStatusCodes[HealthStatus.Degraded] = StatusCodes.Status200OK; options.ResultStatusCodes[HealthStatus.Unhealthy] = StatusCodes.Status503ServiceUnavailable; options.ResponseWriter = HealthCheckResponse.CustomResponseWriter; options.Predicate = healthcheck =&gt; healthcheck.Name == \"customersql\";  app.UseHealthChecks(\"/customersql\", options); //.RequireAuthorization();   app.UseHealthChecks(\"/customerdbcontext\", new HealthCheckOptions() {     // Supress cache headers     AllowCachingResponses = false,      // Customize the HTTP Status code     ResultStatusCodes =     {         [HealthStatus.Healthy] = StatusCodes.Status200OK,         [HealthStatus.Degraded] = StatusCodes.Status200OK,         [HealthStatus.Unhealthy]= StatusCodes.Status503ServiceUnavailable     },      // filters the health checks so that only those tagged with sql     Predicate = healthCheck =&gt; healthCheck.Name == \"customerdbcontext\",      ResponseWriter = UIResponseWriter.WriteHealthCheckUIResponse, });   // Cofigure for health check app.MapHealthChecks(\"/hc\", new HealthCheckOptions() {     //Predicate = _ =&gt; true,     Predicate = r =&gt; r.Name.Contains(\"self\"),     ResponseWriter = UIResponseWriter.WriteHealthCheckUIResponse, });  //a basic health probe configuration that reports the app's availability //to process requests (liveness) is sufficient to discover the status of the app. app.MapHealthChecks(\"/liveness\", new HealthCheckOptions() {     Predicate = r =&gt; r.Name.Contains(\"self\"), });  app.Run();       Here, Checking sql server’s health with a name customersql using following code    builder.Services.AddHealthChecks()     .AddCheck&lt;DatabaseHealthCheck&gt;(\"customersql\");      Here, Checking sql server’s health using dbcontext of EF using following code    builder.Services.AddDbContext&lt;CustomerDbContext&gt;(options =&gt;        options.UseSqlServer(            builder.Configuration.GetConnectionString(\"CustomerDBConnection\"))     );  builder.Services.AddHealthChecks()     .AddDbContextCheck&lt;CustomerDbContext&gt;(\"customerdbcontext\");       Added healthcheck end point for different services seperatedly using the following code    var options = new HealthCheckOptions(); options.ResultStatusCodes[HealthStatus.Healthy] = StatusCodes.Status200OK; options.ResultStatusCodes[HealthStatus.Degraded] = StatusCodes.Status200OK; options.ResultStatusCodes[HealthStatus.Unhealthy] = StatusCodes.Status503ServiceUnavailable; options.ResponseWriter = HealthCheckResponse.CustomResponseWriter; options.Predicate = healthcheck =&gt; healthcheck.Name == \"customersql\";  app.UseHealthChecks(\"/customersql\", options); //.RequireAuthorization();   app.UseHealthChecks(\"/customerdbcontext\", new HealthCheckOptions() {     // Supress cache headers     AllowCachingResponses = false,      // Customize the HTTP Status code     ResultStatusCodes =     {         [HealthStatus.Healthy] = StatusCodes.Status200OK,         [HealthStatus.Degraded] = StatusCodes.Status200OK,         [HealthStatus.Unhealthy]= StatusCodes.Status503ServiceUnavailable     },      // filters the health checks so that only those tagged with sql     Predicate = healthCheck =&gt; healthCheck.Name == \"customerdbcontext\",      ResponseWriter = UIResponseWriter.WriteHealthCheckUIResponse, });   // Cofigure for health check app.MapHealthChecks(\"/hc\", new HealthCheckOptions() {     //Predicate = _ =&gt; true,     Predicate = r =&gt; r.Name.Contains(\"self\"),     ResponseWriter = UIResponseWriter.WriteHealthCheckUIResponse, });  //a basic health probe configuration that reports the app's availability //to process requests (liveness) is sufficient to discover the status of the app. app.MapHealthChecks(\"/liveness\", new HealthCheckOptions() {     Predicate = r =&gt; r.Name.Contains(\"self\"), });            Now you can run and check the application health using the following URL       https://localhost:7145/hc       https://localhost:7145/customersql       https://localhost:7145/customerdbcontext       https://localhost:7145/liveness       Step 5: Configure Location.API project for health check      Add ConnectionString in appsettings.json file as follows   {   \"Logging\": {     \"LogLevel\": {       \"Default\": \"Information\",       \"Microsoft.AspNetCore\": \"Warning\"     }   },   \"ConnectionStrings\": {     \"CustomerDBConnection\": \"Server=localhost;Database=Demo.LocationDB;User Id=sa;Password=secret@pass;\"   },   \"AllowedHosts\": \"*\" }       Add CustomerDbContext class in Customer.API/Persistence folder   LocationDbContext.cs    using Microsoft.EntityFrameworkCore;   namespace Location.API.Persistence {     public class LocationDbContext : DbContext     {         public LocationDbContext(DbContextOptions&lt;LocationDbContext&gt; options) : base(options)         {          }     } }         Modify Program.cs file is as follows   using HealthChecks.UI.Client; using Location.API.Persistence; using Microsoft.AspNetCore.Diagnostics.HealthChecks; using Microsoft.EntityFrameworkCore;  var builder = WebApplication.CreateBuilder(args);  // Add services to the container.  builder.Services.AddControllers(); // Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle builder.Services.AddEndpointsApiExplorer(); builder.Services.AddSwaggerGen();   // Sql server health check  builder.Services.AddHealthChecks()     .AddSqlServer(         builder.Configuration.GetConnectionString(\"LocationDBConnection\"));  // Create DbContext builder.Services.AddDbContext&lt;LocationDbContext&gt;(options =&gt;        options.UseSqlServer(            builder.Configuration.GetConnectionString(\"LocationDBConnection\"))     );  // DbContext health check for EF core builder.Services.AddHealthChecks()     .AddDbContextCheck&lt;LocationDbContext&gt;(\"locationdbcontext\");  var app = builder.Build();  // Configure the HTTP request pipeline. if (app.Environment.IsDevelopment()) {     app.UseSwagger();     app.UseSwaggerUI(); }  app.UseHttpsRedirection();  app.UseAuthorization();  app.MapControllers();  // Cofigure for health check app.MapHealthChecks(\"/hc\", new HealthCheckOptions() {     Predicate = _ =&gt; true,     ResponseWriter = UIResponseWriter.WriteHealthCheckUIResponse, });  //a basic health probe configuration that reports the app's availability to process requests (liveness) is sufficient to discover the status of the app. app.MapHealthChecks(\"/liveness\", new HealthCheckOptions() {     Predicate = r =&gt; r.Name.Contains(\"self\"), });  app.Run();       Here, Checking sql server’s health using following code    builder.Services.AddHealthChecks()     .AddSqlServer(         builder.Configuration.GetConnectionString(\"LocationDBConnection\"));       Here, Checking sql server’s health using dbcontext of EF using following code    builder.Services.AddDbContext&lt;LocationDbContext&gt;(options =&gt;        options.UseSqlServer(            builder.Configuration.GetConnectionString(\"LocationDBConnection\"))     );  // DbContext health check for EF core builder.Services.AddHealthChecks()     .AddDbContextCheck&lt;LocationDbContext&gt;(\"locationdbcontext\");        Added healthcheck end point to check the application health   Here application will be healthy when both sql server and application is up and running. Otherwise, it will be un healthy.   Program.cs   using HealthChecks.UI.Client; using Location.API.Persistence; using Microsoft.AspNetCore.Diagnostics.HealthChecks; using Microsoft.EntityFrameworkCore;  var builder = WebApplication.CreateBuilder(args);  // Add services to the container.  builder.Services.AddControllers(); // Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle builder.Services.AddEndpointsApiExplorer(); builder.Services.AddSwaggerGen();   // Sql server health check  builder.Services.AddHealthChecks()     .AddSqlServer(         builder.Configuration.GetConnectionString(\"LocationDBConnection\"));  // Create DbContext builder.Services.AddDbContext&lt;LocationDbContext&gt;(options =&gt;        options.UseSqlServer(            builder.Configuration.GetConnectionString(\"LocationDBConnection\"))     );  // DbContext health check for EF core builder.Services.AddHealthChecks()     .AddDbContextCheck&lt;LocationDbContext&gt;(\"locationdbcontext\");  var app = builder.Build();  // Configure the HTTP request pipeline. if (app.Environment.IsDevelopment()) {     app.UseSwagger();     app.UseSwaggerUI(); }  app.UseHttpsRedirection();  app.UseAuthorization();  app.MapControllers();  // Cofigure for health check app.MapHealthChecks(\"/hc\", new HealthCheckOptions() {     Predicate = _ =&gt; true,     ResponseWriter = UIResponseWriter.WriteHealthCheckUIResponse, });  //a basic health probe configuration that reports the app's availability to process requests (liveness) is sufficient to discover the status of the app. app.MapHealthChecks(\"/liveness\", new HealthCheckOptions() {     Predicate = r =&gt; r.Name.Contains(\"self\"), });  app.Run();             Now you can run and check the application health using the following URL       https://localhost:7232/hc       https://localhost:7232/liveness       Step 6: Configure WebStatus project for to monitors others 3 application’s health      Configure HealthCheckUI in appsettings.json file as follows   {   \"HealthChecksUI\": {     \"HealthChecks\": [       {         \"Name\": \"Admin.API\",         \"Uri\": \"https://localhost:7147/hc\"       },       {         \"Name\": \"Customer.API\",         \"Uri\": \"https://localhost:7145/hc\"       },       {         \"Name\": \"Customer.API -&gt; CustomerDB\",         \"Uri\": \"https://localhost:7145/customersql\"       },       {         \"Name\": \"Customer.API -&gt; CustomerDbContext\",         \"Uri\": \"https://localhost:7145/customerdbcontext\"       },        //Location service       {         \"Name\": \"Location.API\",         \"Uri\": \"https://localhost:7232/hc\"       }     ],      \"EvaluationTimeInSeconds\": 10,     \"MinimumSecondsBetweenFailureNotifications\": 60   },    \"Logging\": {     \"LogLevel\": {       \"Default\": \"Information\",       \"Microsoft.AspNetCore\": \"Warning\"     }   },   \"AllowedHosts\": \"*\" }        Modify Program.cs file is as follows    var builder = WebApplication.CreateBuilder(args);  // Add services to the container.  builder.Services.AddControllers(); // Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle builder.Services.AddEndpointsApiExplorer(); builder.Services.AddSwaggerGen();  // Configure service for healthcheck builder.Services.AddHealthChecksUI().AddInMemoryStorage();  var app = builder.Build();  // Configure the HTTP request pipeline. if (app.Environment.IsDevelopment()) {     app.UseSwagger();     app.UseSwaggerUI(); }  app.UseHttpsRedirection();  app.UseAuthorization();  // Cofigure methods for healthcheck app.MapHealthChecksUI();  app.MapControllers();  app.Run();        Here, Added HealthCheckUI using the following code   // Configure service for healthcheck builder.Services.AddHealthChecksUI().AddInMemoryStorage(); . . . . // Cofigure methods for healthcheck app.MapHealthChecksUI();            Now now all(multiple) projects at a time and monitor all application’s       https://localhost:7188/healthchecks-ui#/healthchecks       Source code  ","categories": ["Web API","ASP.NET Core","C#"],
        "tags": ["webapi","aspnetcore","csharp"],
        "url": "http://localhost:4000/Application-health-monitoring-using-asp.net-core/",
        "teaser":null},{
        "title": "API gateway using ocelot in asp.net core application",
        "excerpt":"  Introduction   API Gateway is an API management tools that sits between a client application and backend application. It agregates different services, maintain load balancing and work as reverse proxy. Ocelot is an api managment tool which is very powerful and best fit for .net application.   Tools and technologies used     Visual Studio 2022   .NET 6.0   In Memory Database   Entity Framework   ASP.NET Core Web API   C#   Ocelot   Implementation   Step 1: Create solution and projects.      Create a solution name APIGateway   Add 4 new web api project, name - Catalog.API, Location.API, Ordering.API and BFF.Web in the solution.   Here, BFF.Web project will act as API Gateway.   Step 2: Install nuget packages.      Install following nuget package in Catalog.API Project   PM&gt; Install-Package Microsoft.EntityFrameworkCore.InMemory PM&gt; Install-Package Microsoft.EntityFrameworkCore.SqlServer PM&gt; Install-Package Microsoft.EntityFrameworkCore.Tools      Install following nuget package in Ordering.API Project   PM&gt; Install-Package Microsoft.EntityFrameworkCore PM&gt; Install-Package Microsoft.EntityFrameworkCore.InMemory PM&gt; Install-Package Microsoft.EntityFrameworkCore.SqlServer PM&gt; Install-Package Microsoft.EntityFrameworkCore.Tools      Install following nuget packages in BFF.Web Project   PM&gt; Install-Package Ocelot PM&gt; Install-Package Ocelot.Cache.CacheManager   Step 3: Organize Catalog.API Project      Create a Product model class in Catalog.API/Model folder   Product.cs    using System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema;  namespace Catalog.API.Model {     public class Product     {         [Key]         [DatabaseGenerated(DatabaseGeneratedOption.Identity)]         public int Id { get; set; }         public string Name { get; set; }          public string Description { get; set; }          public decimal Price { get; set; }          public int AvailableStock { get; set; }          public int RestockThreshold { get; set; }     } }       Create a CatalogContext class in Catalog.API/Db folder   CatalogContext.cs    using Catalog.API.Model; using Microsoft.EntityFrameworkCore;  namespace Catalog.API.Db {     public class CatalogContext : DbContext     {         public CatalogContext(DbContextOptions&lt;CatalogContext&gt; options) : base(options)         {          }          protected override void OnModelCreating(ModelBuilder modelBuilder)         {          }          protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)         {             base.OnConfiguring(optionsBuilder);         }          public DbSet&lt;Product&gt; Products { get; set; }     } }       Modify Program.cs file as follows    using Catalog.API.Db; using Microsoft.EntityFrameworkCore;  var builder = WebApplication.CreateBuilder(args);  // Add services to the container.  builder.Services.AddControllers();  builder.Services.AddDbContext&lt;CatalogContext&gt;(opt =&gt; opt.UseInMemoryDatabase(\"CatalogDB\"));  // Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle builder.Services.AddEndpointsApiExplorer(); builder.Services.AddSwaggerGen();  var app = builder.Build();  // Configure the HTTP request pipeline. if (app.Environment.IsDevelopment()) {     app.UseSwagger();     app.UseSwaggerUI(); }  app.UseHttpsRedirection();  app.UseAuthorization();  app.MapControllers();  app.Run();       Create a conroller class name ProductsController in Catalog.API/Controllers folder   CatalogContoller.cs   #nullable disable using System; using System.Collections.Generic; using System.Linq; using System.Threading.Tasks; using Microsoft.AspNetCore.Http; using Microsoft.AspNetCore.Mvc; using Microsoft.EntityFrameworkCore; using Catalog.API.Db; using Catalog.API.Model;  namespace Catalog.API.Controllers {     [Route(\"api/[controller]\")]     [ApiController]     public class ProductsController : ControllerBase     {         private readonly CatalogContext _context;          public ProductsController(CatalogContext context)         {             _context = context;         }          // GET: api/Products         [HttpGet(\"GetAll\")]         public async Task&lt;ActionResult&lt;IEnumerable&lt;Product&gt;&gt;&gt; GetProducts()         {             return await _context.Products.ToListAsync();         }          // GET: api/Products/5         [HttpGet(\"{id}\")]         public async Task&lt;ActionResult&lt;Product&gt;&gt; GetProduct(int id)         {             var product = await _context.Products.FindAsync(id);              if (product == null)             {                 return NotFound();             }              return product;         }          // PUT: api/Products/5         // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754         [HttpPut(\"Edit/{id}\")]         public async Task&lt;IActionResult&gt; PutProduct(int id, Product product)         {             if (id != product.Id)             {                 return BadRequest();             }              _context.Entry(product).State = EntityState.Modified;              try             {                 await _context.SaveChangesAsync();             }             catch (DbUpdateConcurrencyException)             {                 if (!ProductExists(id))                 {                     return NotFound();                 }                 else                 {                     throw;                 }             }              return NoContent();         }          // POST: api/Products         // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754         [HttpPost(\"Add\")]         public async Task&lt;ActionResult&lt;Product&gt;&gt; PostProduct(Product product)         {             _context.Products.Add(product);             await _context.SaveChangesAsync();              return CreatedAtAction(\"GetProduct\", new { id = product.Id }, product);         }          // DELETE: api/Products/5         [HttpDelete(\"Delete/{id}\")]         public async Task&lt;IActionResult&gt; DeleteProduct(int id)         {             var product = await _context.Products.FindAsync(id);             if (product == null)             {                 return NotFound();             }              _context.Products.Remove(product);             await _context.SaveChangesAsync();              return NoContent();         }          private bool ProductExists(int id)         {             return _context.Products.Any(e =&gt; e.Id == id);         }     } }    Step 4: Organize Ordering.API Project      Create a Order model class in Ordering.API/Model folder   Order.cs    namespace Ordering.API.Models {     public class Order     {         public int Id { get; set; }         public string Address { get; set; }          public DateTime OrderDate { get; set; }          public string Comments { get; set; }     } }        Create a OrderingContext class in Ordering.API/Db folder   OrderingContext.cs    using Microsoft.EntityFrameworkCore; using Ordering.API.Models;  namespace Ordering.API.Db {     public class OrderingContext : DbContext     {         public OrderingContext(DbContextOptions&lt;OrderingContext&gt; options) : base(options)         {          }         public DbSet&lt;Ordering.API.Models.Order&gt; Order { get; set; }     } }        Modify Program.cs file as follows    using Microsoft.EntityFrameworkCore; using Ordering.API.Db;  var builder = WebApplication.CreateBuilder(args);  // Add services to the container.  builder.Services.AddControllers();  builder.Services.AddDbContext&lt;OrderingContext&gt;(opt =&gt; opt.UseInMemoryDatabase(\"CatalogDB\"));  // Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle builder.Services.AddEndpointsApiExplorer(); builder.Services.AddSwaggerGen();  var app = builder.Build();  // Configure the HTTP request pipeline. if (app.Environment.IsDevelopment()) {     app.UseSwagger();     app.UseSwaggerUI(); }  app.UseHttpsRedirection();  app.UseAuthorization();  app.MapControllers();  app.Run();       Create a conroller class name OrdersController in Ordering.API/Controllers folder   OrdersController.cs   #nullable disable using System; using System.Collections.Generic; using System.Linq; using System.Threading.Tasks; using Microsoft.AspNetCore.Http; using Microsoft.AspNetCore.Mvc; using Microsoft.EntityFrameworkCore; using Ordering.API.Db; using Ordering.API.Models;  namespace Ordering.API.Controllers {     [Route(\"api/[controller]\")]     [ApiController]     public class OrdersController : ControllerBase     {         private readonly OrderingContext _context;          public OrdersController(OrderingContext context)         {             _context = context;         }          // GET: api/Orders         [HttpGet(\"GetAll\")]         public async Task&lt;ActionResult&lt;IEnumerable&lt;Order&gt;&gt;&gt; GetOrder()         {             return await _context.Order.ToListAsync();         }          // GET: api/Orders/5         [HttpGet(\"{id}\")]         public async Task&lt;ActionResult&lt;Order&gt;&gt; GetOrder(int id)         {             var order = await _context.Order.FindAsync(id);              if (order == null)             {                 return NotFound();             }              return order;         }          // PUT: api/Orders/5         // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754         [HttpPut(\"Edit/{id}\")]         public async Task&lt;IActionResult&gt; PutOrder(int id, Order order)         {             if (id != order.Id)             {                 return BadRequest();             }              _context.Entry(order).State = EntityState.Modified;              try             {                 await _context.SaveChangesAsync();             }             catch (DbUpdateConcurrencyException)             {                 if (!OrderExists(id))                 {                     return NotFound();                 }                 else                 {                     throw;                 }             }              return NoContent();         }          // POST: api/Orders         // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754         [HttpPost(\"Add\")]         public async Task&lt;ActionResult&lt;Order&gt;&gt; PostOrder(Order order)         {             _context.Order.Add(order);             await _context.SaveChangesAsync();              return CreatedAtAction(\"GetOrder\", new { id = order.Id }, order);         }          // DELETE: api/Orders/5         [HttpDelete(\"Delete/{id}\")]         public async Task&lt;IActionResult&gt; DeleteOrder(int id)         {             var order = await _context.Order.FindAsync(id);             if (order == null)             {                 return NotFound();             }              _context.Order.Remove(order);             await _context.SaveChangesAsync();              return NoContent();         }          private bool OrderExists(int id)         {             return _context.Order.Any(e =&gt; e.Id == id);         }     } }    Step 5: Organize Location.API Project      Create CountriesController in Location.API/Controllers folder    using Microsoft.AspNetCore.Mvc;  namespace Location.API.Controllers {     [ApiController]     [Route(\"api/[controller]\")]     public class CountriesController : ControllerBase     {       [HttpGet(\"GetAll\")]       public IEnumerable&lt;string&gt; Get()         {             return new string[] {\"America\",\"Bangladesh\", \"Canada\" };         }     } }    Step 6: Organize BFF.Web (API Gateway)  Project      Add a configuraton file for api gateway. I keep this file name - ocelot.json. Add this file in the root directory.   ocelot.json   {   //---Location Service: Start ----------//   \"Routes\": [     {       \"DownstreamPathTemplate\": \"/api/Countries/GetAll\",       \"DownstreamScheme\": \"https\",       \"DownstreamHostAndPorts\": [         {           \"Host\": \"localhost\",           \"Port\": 7003         }       ],        // Configure caching       // the cache will expire after 30 seconds.       \"FileCacheOptions\": {         \"TtlSeconds\": 30,         \"Region\": \"countriescaching\"       },        \"UpstreamPathTemplate\": \"/Countries/GetAll\",       \"UpstreamHttpMethod\": [ \"Get\" ],        // Enable case sensative Routing/URL       \"RouteIsCaseSensitive\": true     },      //---Location Service: End ----------//      // Catalog Services     //------------------//     {       \"DownstreamPathTemplate\": \"/api/Products/GetAll\",       \"DownstreamScheme\": \"https\",       \"DownstreamHostAndPorts\": [         {           \"Host\": \"localhost\",           \"Port\": 7282         }       ],        // Implement rate limiting       // maximum admitted 1 per 5s.       \"RateLimitOptions\": {         \"ClientWhitelist\": [           // This is an array used to specify the clients that should not be affected by the rate-limiting         ],         \"EnableRateLimiting\": true,         \"Period\": \"5s\",         \"PeriodTimespan\": 1,         \"Limit\": 1       },        \"UpstreamPathTemplate\": \"/Products/GetAll\",       \"UpstreamHttpMethod\": [ \"Get\" ]     },     {       \"DownstreamPathTemplate\": \"/api/Products/Add\",       \"DownstreamScheme\": \"https\",       \"DownstreamHostAndPorts\": [         {           \"Host\": \"localhost\",           \"Port\": 7282         }       ],        \"UpstreamPathTemplate\": \"/Products/Add\",       \"UpstreamHttpMethod\": [ \"Post\" ]     },      {       \"DownstreamPathTemplate\": \"/api/Products/{id}\",       \"DownstreamScheme\": \"https\",       \"DownstreamHostAndPorts\": [         {           \"Host\": \"localhost\",           \"Port\": 7282         }       ],        \"UpstreamPathTemplate\": \"/Products/{id}\",       \"UpstreamHttpMethod\": [ \"Get\" ]     },      {       \"DownstreamPathTemplate\": \"/api/Products/Edit/{id}\",       \"DownstreamScheme\": \"https\",       \"DownstreamHostAndPorts\": [         {           \"Host\": \"localhost\",           \"Port\": 7282         }       ],        \"UpstreamPathTemplate\": \"/Products/Edit/{id}\",       \"UpstreamHttpMethod\": [ \"Put\" ]     },      {       \"DownstreamPathTemplate\": \"/api/Products/Delete/{id}\",       \"DownstreamScheme\": \"https\",       \"DownstreamHostAndPorts\": [         {           \"Host\": \"localhost\",           \"Port\": 7282         }       ],        \"UpstreamPathTemplate\": \"/Products/Delete/{id}\",       \"UpstreamHttpMethod\": [ \"Delete\" ]     },      //---Catalog service : End ------------//      //---Ordering Service: Start ----------//     // Catch All Routing     {       \"DownstreamPathTemplate\": \"/{url}\",       \"DownstreamScheme\": \"https\",       \"DownstreamHostAndPorts\": [         {           \"Host\": \"localhost\",           \"Port\": 7126         }       ],        \"UpstreamPathTemplate\": \"/{url}\",       \"UpstreamHttpMethod\": [ \"Get\", \"Post\", \"Put\", \"Delete\" ]     }    ],    //---Ordering Service: End ----------//    //https://localhost:7282/api/Products/GetAll    \"GlobalConfiguration\": {     // enable request correleation id to capture request information     \"RequestIdKey\": \"X-Correlation-Id\",     \"BaseUrl\": \"https://localhost:7205/\"   } }       Modify Program.cs file as follows   Program.cs   using Ocelot.DependencyInjection; using Ocelot.Middleware; using Ocelot.Cache.CacheManager;   var builder = WebApplication.CreateBuilder(args);   var environment = Environment.GetEnvironmentVariable(\"ASPNETCORE_ENVIRONMENT\"); builder.Configuration.SetBasePath(Directory.GetCurrentDirectory())     .AddJsonFile(\"ocelot.json\", optional: false, reloadOnChange: true)     .AddEnvironmentVariables();   // Add services to the container.  builder.Services.AddControllers(); // Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle builder.Services.AddEndpointsApiExplorer();  // Swagger for ocelot //builder.Services.AddSwaggerForOcelot(builder.Configuration); //builder.Services.AddSwaggerForOcelot(); builder.Services.AddSwaggerGen();  //For ocelot builder.Services.AddOcelot()          // Added for caching     .AddCacheManager(x =&gt; {         x.WithDictionaryHandle();     });  var app = builder.Build();  // Configure the HTTP request pipeline. if (app.Environment.IsDevelopment()) {     app.UseSwagger();     app.UseSwaggerUI();     //app.UseSwaggerForOcelotUI(); }  app.UseOcelot();  app.UseHttpsRedirection();  app.UseAuthorization();  app.MapControllers();  app.Run();    Step 7: Run and Test application      Now run multiple (all) projects and test application using postman.   You have to check application using api gateway.   For Location service, test using https://localhost:7205/Countries/GetAll   For Catalog service, test using https://localhost:7205/Products/{endpoints}   For Ordering service, test using https://localhost:7205/api/Orders/{endpoints}   Note:   Configure caching in api gateway      Added the following section in ocelot.json file.    \"FileCacheOptions\": { \"TtlSeconds\": 30, \"Region\": \"countriescaching\" }       Added the following code block in the  the Program.cs file as follows   //For ocelot builder.Services.AddOcelot()          // Added for caching     .AddCacheManager(x =&gt; {         x.WithDictionaryHandle();     });    Enable case sensative URL      Add following blocks in ocelot.json for case sensative URL         // Enable case sensative Routing/URL       \"RouteIsCaseSensitive\": true   Implement rate limiting      Add following blocks in ocelot.json for rate limiting    // Implement rate limiting // maximum admitted 1 per 5s. \"RateLimitOptions\": { \"ClientWhitelist\": [     // This is an array used to specify the clients that should not be affected by the rate-limiting ], \"EnableRateLimiting\": true, \"Period\": \"5s\", \"PeriodTimespan\": 1, \"Limit\": 1 }    Catch all routing      Add following blocks in ocelot.json for catch all routing    {     \"DownstreamPathTemplate\": \"/{url}\",     \"DownstreamScheme\": \"https\",     \"DownstreamHostAndPorts\": [     {         \"Host\": \"localhost\",         \"Port\": 7126     }     ],      \"UpstreamPathTemplate\": \"/{url}\",     \"UpstreamHttpMethod\": [ \"Get\", \"Post\", \"Put\", \"Delete\" ] }    Source code  ","categories": ["Web API","ASP.NET Core","C#"],
        "tags": ["webapi","aspnetcore","csharp"],
        "url": "http://localhost:4000/API-gateway-using-ocelot-in-asp.net-core-application/",
        "teaser":null},{
        "title": "Configure service mesh using Istio with asp.net core applications on Kubernetes",
        "excerpt":"Overview   A service mesh is a configurable infrustructure layer. It have capabilities to handle service-to-service communication, resilency, and many cross-cutting concerns. Proxy is a key component of service mesh. Sidecar proxy is injected in each services in this concept. Here I will show you service mesh communication using Istio with asp.net core applications on Kubernetes environment.   Istio is an open platform for providing a uniform way to integrate microservices, manage traffic flow accross microservices, enforce policies and aggregate telemetry data. Istio uses following tools -      Prometheus: It monitors everything in the cluster.   Grafana: Data visualization tools.   Jaeger: It’s used for distributed tracing.   Tools and Technology used  The following tools and technologies used to configure Istio     Visual Studio 2022   Visual C#   ASP.NET Core Web API   Ocelot   Docker desktop   Kubernetes   Istio   Let’s configure Istio on asp.net core web api applications.   Step 1: Download Istio     Go to the link below and download “istio-1.12.2-win.zip”  https://github.com/istio/istio/releases/tag/1.12.2   or download and extract the latest release automatically (Linux or macOS): curl -L https://istio.io/downloadIstio | sh -           Extract zip file and move to the Istio Package directory. For example, istio-1.12.2.            Then installation directory contains:             Sample applications in sample/directory       The istioctl client binary in the bin/directory           Step 2: Add istioctl client to your path      Use the following command in git bash to add istioctl client to your path.   export PATH=$PWD/bin:$PATH   Note: The above command doesn’t run on powershell. So, use git bash. If you close the git bash, istioctl doesn’t work. You have to run the above command again.      To check istioctl client use the following command in git bash.   istioctl   Step 3: Install Istio      For installation, we use the demo configuration profile. It’s selected to have a good set of defaults for testing, but there are other profiles for production or performance testing. Use below command to install Istio.   istioctl install --set profile=demo -y     Use the following command to verify Istio.   kubectl get all -n istio-system   Output:   NAME                                        READY   STATUS    RESTARTS   AGE pod/istio-egressgateway-c9cbbd99f-wk265     1/1     Running   0          87s pod/istio-ingressgateway-7c8bc47b49-xpvvc   1/1     Running   0          86s pod/istiod-765596f7ff-2p72v                 1/1     Running   0          3m13s  NAME                           TYPE           CLUSTER-IP       EXTERNAL-IP   PORT(S)                                                                      AGE service/istio-egressgateway    ClusterIP      10.101.157.106   &lt;none&gt;        80/TCP,443/TCP                                                               85s service/istio-ingressgateway   LoadBalancer   10.109.205.109   localhost     15021:32149/TCP,80:30563/TCP,443:30960/TCP,31400:32369/TCP,15443:32309/TCP   85s service/istiod                 ClusterIP      10.109.211.149   &lt;none&gt;        15010/TCP,15012/TCP,443/TCP,15014/TCP                                        3m12s  NAME                                   READY   UP-TO-DATE   AVAILABLE   AGE deployment.apps/istio-egressgateway    1/1     1            1           87s deployment.apps/istio-ingressgateway   1/1     1            1           86s deployment.apps/istiod                 1/1     1            1           3m13s  NAME                                              DESIRED   CURRENT   READY   AGE replicaset.apps/istio-egressgateway-c9cbbd99f     1         1         1       87s replicaset.apps/istio-ingressgateway-7c8bc47b49   1         1         1       86s replicaset.apps/istiod-765596f7ff                 1         1         1       3m13s   Step 4: Configure for auto proxy injection      Add a namespace label to instruct Istio to automatically inject Envoy sidecar proxies when you deploy your application later. Use below command to configure default namespance with Istio sidecar proxy.   kubectl label namespace default istio-injection=enabled      Check label by using below command   kubectl describe namespace default   Step 5: Create asp.net core applications      Create 4 asp.net core web api projects.   Projects names are Catalog.API, Location.API, Ordering.API and BFF.Web.   Step 6: Organize Catalog.API Project      Add the following nuget packages in the project.   Install-Package Microsoft.EntityFrameworkCore.InMemory Install-Package Microsoft.EntityFrameworkCore.SqlServer Install-Package Microsoft.EntityFrameworkCore.Tools      Add a model class name Product in the model folder.   Product.cs   using System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema;  namespace Catalog.API.Model {     public class Product     {         [Key]         [DatabaseGenerated(DatabaseGeneratedOption.Identity)]         public int Id { get; set; }         public string Name { get; set; }          public string Description { get; set; }          public decimal Price { get; set; }          public int AvailableStock { get; set; }          public int RestockThreshold { get; set; }     } }       Add CatalogContext class in Db folder.   CatalogContext.cs   using Catalog.API.Model; using Microsoft.EntityFrameworkCore;  namespace Catalog.API.Db {     public class CatalogContext : DbContext     {         public CatalogContext(DbContextOptions&lt;CatalogContext&gt; options) : base(options)         {          }         protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)         {             base.OnConfiguring(optionsBuilder);         }          public DbSet&lt;Product&gt; Products { get; set; }     } }       Configure InMemory database and modify Program class as follows.   Program.cs   using Catalog.API.Db; using Microsoft.EntityFrameworkCore;  var builder = WebApplication.CreateBuilder(args);  // Add services to the container.  builder.Services.AddControllers();  builder.Services.AddDbContext&lt;CatalogContext&gt;(opt =&gt; opt.UseInMemoryDatabase(\"CatalogDB\"));  // Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle builder.Services.AddEndpointsApiExplorer(); builder.Services.AddSwaggerGen();  var app = builder.Build();  // Configure the HTTP request pipeline. if (app.Environment.IsDevelopment()) {     app.UseSwagger();     app.UseSwaggerUI(); }  app.UseHttpsRedirection();  app.UseAuthorization();  app.MapControllers();  app.Run();       Create ProductsController in Controllers folder   ProductsController.cs   #nullable disable using Catalog.API.Db; using Catalog.API.Model; using Microsoft.AspNetCore.Mvc; using Microsoft.EntityFrameworkCore;  namespace Catalog.API.Controllers {     [Route(\"api/[controller]\")]     [ApiController]     public class ProductsController : ControllerBase     {         private readonly CatalogContext _context;          public ProductsController(CatalogContext context)         {             _context = context;         }          // GET: api/Products         [HttpGet(\"GetAll\")]         public async Task&lt;ActionResult&lt;IEnumerable&lt;Product&gt;&gt;&gt; GetProducts()         {             return await _context.Products.ToListAsync();         }          // GET: api/Products/5         [HttpGet(\"{id}\")]         public async Task&lt;ActionResult&lt;Product&gt;&gt; GetProduct(int id)         {             var product = await _context.Products.FindAsync(id);              if (product == null)             {                 return NotFound();             }              return product;         }          // PUT: api/Products/5         // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754         [HttpPut(\"Edit/{id}\")]         public async Task&lt;IActionResult&gt; PutProduct(int id, Product product)         {             if (id != product.Id)             {                 return BadRequest();             }              _context.Entry(product).State = EntityState.Modified;              try             {                 await _context.SaveChangesAsync();             }             catch (DbUpdateConcurrencyException)             {                 if (!ProductExists(id))                 {                     return NotFound();                 }                 else                 {                     throw;                 }             }              return NoContent();         }          // POST: api/Products         // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754         [HttpPost(\"Add\")]         public async Task&lt;ActionResult&lt;Product&gt;&gt; PostProduct(Product product)         {             _context.Products.Add(product);             await _context.SaveChangesAsync();              return CreatedAtAction(\"GetProduct\", new { id = product.Id }, product);         }          // DELETE: api/Products/5         [HttpDelete(\"Delete/{id}\")]         public async Task&lt;IActionResult&gt; DeleteProduct(int id)         {             var product = await _context.Products.FindAsync(id);             if (product == null)             {                 return NotFound();             }              _context.Products.Remove(product);             await _context.SaveChangesAsync();              return NoContent();         }          private bool ProductExists(int id)         {             return _context.Products.Any(e =&gt; e.Id == id);         }     } }       Add Dockerfile in the Catalog.API Project   Dockerfile    FROM mcr.microsoft.com/dotnet/aspnet:6.0 AS base WORKDIR /app EXPOSE 80 EXPOSE 443  FROM mcr.microsoft.com/dotnet/sdk:6.0 AS build WORKDIR /src COPY [\"/Catalog.API.csproj\", \"Catalog.API/\"] RUN dotnet restore \"Catalog.API/Catalog.API.csproj\" WORKDIR \"/src/Catalog.API\" COPY . . WORKDIR \"/src/Catalog.API\" RUN dotnet build \"Catalog.API.csproj\" -c Release -o /app/build  FROM build AS publish RUN dotnet publish \"Catalog.API.csproj\" -c Release -o /app/publish  FROM base AS final WORKDIR /app COPY --from=publish /app/publish . ENTRYPOINT [\"dotnet\", \"Catalog.API.dll\"]       Go to director where dockerfile reside and run the following command to build docker image.   docker image build -t mahedee/catalog:1.0.1 .   Note: Don’t forgot to add . at the end of the command.      To configure pod add the following to file with code in Deploy/k8s folder   deployment.yml    # Configure Deployment apiVersion: apps/v1 kind: Deployment metadata:   name: catalogapi-deployment spec:   selector:     matchLabels:       app: catalogapi-pod   template:     metadata:       labels:         app: catalogapi-pod     spec:       containers:       - name: catalogapi-container         image: mahedee/catalog:1.0.1         resources:           limits:             memory: \"128Mi\" # 128 mili bytes             cpu: \"500m\"     # 500 mili cpu         ports:         - containerPort: 80     service.yml    # Configure service apiVersion: v1 kind: Service metadata:   name: catalogapi-service spec:   selector:     app: catalogapi-pod   ports:   - port: 8001     targetPort: 80   type: LoadBalancer # use LoadBalancer if you want to accesss out side of pod       Go to the Deploy/k8s directory and run the following commands.   kubectl apply -f .\\deployment.yml  kubectl apply -f .\\service.yml   Step 7: Check pods have proxy auto-injected      By default istio will be injected automatically under this namespace.   Use the following command to check pods have proxy auto-injected.   kubectl get pods   // To check pods  Output:   NAME                                      READY   STATUS    RESTARTS   AGE catalogapi-deployment-68d56ccddd-sqfnj    2/2     Running   0          14m      Show the catalogapi proxy setup using the following command   kubectl describe pods catalogapi-deployment-68d56ccddd-sqfnj       Find all proxy container using the following command   docker container ls --filter name=istio-proxy_*      Check proxy processes for the catalogapi   docker container ls --filter name=istio-proxy_catalogapi-deployment* -q   Step 8: Organize Location.API      Create a Controller name CountriesController in the Controllers folder as follows.   CountriesController.cs   using Microsoft.AspNetCore.Mvc;  namespace Location.API.Controllers {     [ApiController]     [Route(\"api/[controller]\")]     public class CountriesController : ControllerBase     {       [HttpGet(\"GetAll\")]       public IEnumerable&lt;string&gt; Get()         {             return new string[] {\"America\",\"Bangladesh\", \"Canada\" };         }     } }       Add docker file in the project root directory as follows.   Dockerfile    FROM mcr.microsoft.com/dotnet/aspnet:6.0 AS base WORKDIR /app EXPOSE 80 EXPOSE 443  ENV ASPNETCORE_URLS=http://*:80; ENV ASPNETCORE_ENVIRONMENT=Development  FROM mcr.microsoft.com/dotnet/sdk:6.0 AS build WORKDIR /src  COPY [\"/Location.API.csproj\", \"Location.API/\"] RUN dotnet restore \"Location.API/Location.API.csproj\"  WORKDIR \"/src/Location.API\" COPY . . WORKDIR \"/src/Location.API\" RUN dotnet build \"Location.API.csproj\" -c Release -o /app/build  FROM build AS publish RUN dotnet publish \"Location.API.csproj\" -c Release -o /app/publish  FROM base AS final WORKDIR /app COPY --from=publish /app/publish . ENTRYPOINT [\"dotnet\", \"Location.API.dll\"]      Go to the root directory where Dockerfile reside and run the following command to build docker image.   docker image build -t mahedee/location:1.0.1 .      To configure pod add the following to file with code in Deploy/k8s folder   deployment.yml   apiVersion: apps/v1 kind: Deployment metadata:   name: locationapi-deployment spec:   selector:     matchLabels:       app: locationapi-pod   template:     metadata:       labels:         app: locationapi-pod     spec:       containers:       - name: locationapi-container         image: mahedee/location:1.0.1         resources:           limits:             memory: \"128Mi\" # 128 mili bytes             cpu: \"500m\"     # 500 mili cpu         ports:         - containerPort: 80    service.yml   apiVersion: v1 kind: Service metadata:   name: locationapi-service spec:   selector:     app: locationapi-pod   ports:   - port: 8002     targetPort: 80   #type: LoadBalancer      Go to the Deploy/k8s directory and run the following commands.   kubectl apply -f .\\deployment.yml  kubectl apply -f .\\service.yml   Step 9: Organize Ordering.API      Add the following nuget packages in the project.   Install-Package Microsoft.EntityFrameworkCore.InMemory Install-Package Microsoft.EntityFrameworkCore.SqlServer Install-Package Microsoft.EntityFrameworkCore.Tools      Create Order class in Models folders as follows.   Order.cs   namespace Ordering.API.Models {     public class Order     {         public int Id { get; set; }         public string Address { get; set; }          public DateTime OrderDate { get; set; }          public string Comments { get; set; }     } }       Create Ordering OrderingContext class in Db folder.   OrderingContext.cs   using Microsoft.EntityFrameworkCore; using Ordering.API.Models;  namespace Ordering.API.Db {     public class OrderingContext : DbContext     {         public OrderingContext(DbContextOptions&lt;OrderingContext&gt; options) : base(options)         {          }         public DbSet&lt;Ordering.API.Models.Order&gt; Order { get; set; }     } }       Modify Program.cs to add dbcontext.   Program.cs   using Microsoft.EntityFrameworkCore; using Ordering.API.Db;  var builder = WebApplication.CreateBuilder(args);  // Add services to the container.  builder.Services.AddControllers();  builder.Services.AddDbContext&lt;OrderingContext&gt;(opt =&gt; opt.UseInMemoryDatabase(\"CatalogDB\"));  // Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle builder.Services.AddEndpointsApiExplorer(); builder.Services.AddSwaggerGen();  var app = builder.Build();  // Configure the HTTP request pipeline. if (app.Environment.IsDevelopment()) {     app.UseSwagger();     app.UseSwaggerUI(); }  app.UseHttpsRedirection();  app.UseAuthorization();  app.MapControllers();  app.Run();       Create OrdersController in Controllers folder as follows.   #nullable disable using Microsoft.AspNetCore.Mvc; using Microsoft.EntityFrameworkCore; using Ordering.API.Db; using Ordering.API.Models;  namespace Ordering.API.Controllers {     [Route(\"api/[controller]\")]     [ApiController]     public class OrdersController : ControllerBase     {         private readonly OrderingContext _context;          public OrdersController(OrderingContext context)         {             _context = context;         }          // GET: api/Orders         [HttpGet(\"GetAll\")]         public async Task&lt;ActionResult&lt;IEnumerable&lt;Order&gt;&gt;&gt; GetOrder()         {             return await _context.Order.ToListAsync();         }          // GET: api/Orders/5         [HttpGet(\"{id}\")]         public async Task&lt;ActionResult&lt;Order&gt;&gt; GetOrder(int id)         {             var order = await _context.Order.FindAsync(id);              if (order == null)             {                 return NotFound();             }              return order;         }          // PUT: api/Orders/5         // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754         [HttpPut(\"Edit/{id}\")]         public async Task&lt;IActionResult&gt; PutOrder(int id, Order order)         {             if (id != order.Id)             {                 return BadRequest();             }              _context.Entry(order).State = EntityState.Modified;              try             {                 await _context.SaveChangesAsync();             }             catch (DbUpdateConcurrencyException)             {                 if (!OrderExists(id))                 {                     return NotFound();                 }                 else                 {                     throw;                 }             }              return NoContent();         }          // POST: api/Orders         // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754         [HttpPost(\"Add\")]         public async Task&lt;ActionResult&lt;Order&gt;&gt; PostOrder(Order order)         {             _context.Order.Add(order);             await _context.SaveChangesAsync();              return CreatedAtAction(\"GetOrder\", new { id = order.Id }, order);         }          // DELETE: api/Orders/5         [HttpDelete(\"Delete/{id}\")]         public async Task&lt;IActionResult&gt; DeleteOrder(int id)         {             var order = await _context.Order.FindAsync(id);             if (order == null)             {                 return NotFound();             }              _context.Order.Remove(order);             await _context.SaveChangesAsync();              return NoContent();         }          private bool OrderExists(int id)         {             return _context.Order.Any(e =&gt; e.Id == id);         }     } }       Create Docker file in the root directory   Dockerfile   FROM mcr.microsoft.com/dotnet/aspnet:6.0 AS base WORKDIR /app EXPOSE 80 EXPOSE 443  ENV ASPNETCORE_URLS=http://*:80; ENV ASPNETCORE_ENVIRONMENT=Development  FROM mcr.microsoft.com/dotnet/sdk:6.0 AS build WORKDIR /src COPY [\"/Ordering.API.csproj\", \"Ordering.API/\"] RUN dotnet restore \"Ordering.API/Ordering.API.csproj\" WORKDIR \"/src/Ordering.API\" COPY . . WORKDIR \"/src/Ordering.API\" RUN dotnet build \"Ordering.API.csproj\" -c Release -o /app/build  FROM build AS publish RUN dotnet publish \"Ordering.API.csproj\" -c Release -o /app/publish  FROM base AS final WORKDIR /app COPY --from=publish /app/publish . ENTRYPOINT [\"dotnet\", \"Ordering.API.dll\"]      Go to the directory where docker file exists and run the following command to build docker image.   docker image build -t mahedee/ordering:1.0.1 .      To configure pod add the following to file with code in Deploy/k8s folder   deployment.yml   apiVersion: apps/v1 kind: Deployment metadata:   name: locationapi-deployment spec:   selector:     matchLabels:       app: locationapi-pod   template:     metadata:       labels:         app: locationapi-pod     spec:       containers:       - name: locationapi-container         image: mahedee/location:1.0.1         resources:           limits:             memory: \"128Mi\" # 128 mili bytes             cpu: \"500m\"     # 500 mili cpu         ports:         - containerPort: 80    service.yml   apiVersion: v1 kind: Service metadata:   name: orderingapi-service spec:   selector:     app: orderingapi-pod   ports:   - port: 8003     targetPort: 80   type: LoadBalancer      Go to the Deploy/k8s directory and run the following commands.   kubectl apply -f .\\deployment.yml  kubectl apply -f .\\service.yml   Step 10: Organize API Gateway BFF.Web      Install the following nuget packages in the project.   Install-Package Ocelot Install-Package Ocelot.Cache.CacheManager Install-Package MMLib.SwaggerForOcelot Install-Package Ocelot.Provider.Polly      Create a folder name Routes/Routes.dev and add the following files in that folder   ocelot.catalog.api.json   {   \"Routes\": [     {       \"DownstreamPathTemplate\": \"/{everything}\",       \"DownstreamScheme\": \"https\",       \"SwaggerKey\": \"catalog\",       \"DownstreamHostAndPorts\": [         {           \"Host\": \"localhost\",           \"Port\": \"7282\"         }       ],       \"UpstreamPathTemplate\": \"/catalog/{everything}\",       \"UpstreamHttpMethod\": [         \"GET\",         \"POST\",         \"PUT\",         \"DELETE\"       ]     }   ] }    ocelot.location.api.json   {   \"Routes\": [     {       \"DownstreamPathTemplate\": \"/{everything}\",       \"DownstreamScheme\": \"https\",       \"SwaggerKey\": \"location\",       \"DownstreamHostAndPorts\": [         {           \"Host\": \"localhost\",           \"Port\": \"7003\"         }       ],       \"UpstreamPathTemplate\": \"/location/{everything}\",       \"UpstreamHttpMethod\": [         \"GET\",         \"POST\",         \"PUT\",         \"DELETE\"       ]     }   ] }   ocelot.ordering.api.json   {   \"Routes\": [     {       \"DownstreamPathTemplate\": \"/{everything}\",       \"DownstreamScheme\": \"https\",       \"SwaggerKey\": \"ordering\",       \"DownstreamHostAndPorts\": [         {           \"Host\": \"localhost\",           \"Port\": \"7126\"         }       ],       \"UpstreamPathTemplate\": \"/ordering/{everything}\",       \"UpstreamHttpMethod\": [         \"GET\",         \"POST\",         \"PUT\",         \"DELETE\"       ]     }   ] }    ocelot.global.json   {   \"GlobalConfiguration\": {     \"BaseUrl\": \"http://localhost:5205\"   } }   ocelot.SwaggerEndPoints.json   {   \"SwaggerEndPoints\": [     {       \"Key\": \"bffweb\",       \"TransformByOcelotConfig\": false,       \"Config\": [         {           \"Name\": \"BFF.Web\",           \"Version\": \"1.0\",           \"Url\": \"http://localhost:5205/swagger/v1/swagger.json\"         }       ]     },     {       \"Key\": \"location\",       \"TransformByOcelotConfig\": true,       \"Config\": [         {           \"Name\": \"Location.API\",           \"Version\": \"1.0\",           \"Url\": \"http://localhost:5205/location/swagger/v1/swagger.json\"         }       ]     },     {       \"Key\": \"catalog\",       \"TransformByOcelotConfig\": true,       \"Config\": [         {           \"Name\": \"Catalog.API\",           \"Version\": \"1.0\",           \"Url\": \"http://localhost:5205/catalog/swagger/v1/swagger.json\"         }       ]     },     {       \"Key\": \"ordering\",       \"TransformByOcelotConfig\": true,       \"Config\": [         {           \"Name\": \"Ordering.API\",           \"Version\": \"1.0\",           \"Url\": \"http://localhost:5205/ordering/swagger/v1/swagger.json\"         }       ]     }   ] }      Create a folder name Routes/Routes.prod and add the following files in that folder   ocelot.catalog.api.json   {   \"Routes\": [     {       \"DownstreamPathTemplate\": \"/{everything}\",       \"DownstreamScheme\": \"http\",       \"SwaggerKey\": \"catalog\",       \"DownstreamHostAndPorts\": [         {           \"Host\": \"catalogapi-service\",           \"Port\": \"8001\"         }       ],       \"UpstreamPathTemplate\": \"/catalog/{everything}\",       \"UpstreamHttpMethod\": [         \"GET\",         \"POST\",         \"PUT\",         \"DELETE\"       ]     }   ] }     ocelot.location.api.json   {   \"Routes\": [     {       \"DownstreamPathTemplate\": \"/{everything}\",       \"DownstreamScheme\": \"http\",       \"SwaggerKey\": \"location\",       \"DownstreamHostAndPorts\": [         {           \"Host\": \"locationapi-service\",           \"Port\": \"8002\"         }       ],       \"UpstreamPathTemplate\": \"/location/{everything}\",       \"UpstreamHttpMethod\": [         \"GET\",         \"POST\",         \"PUT\",         \"DELETE\"       ]     }   ] }    ocelot.ordering.api.json   {   \"Routes\": [     {       \"DownstreamPathTemplate\": \"/{everything}\",       \"DownstreamScheme\": \"http\",       \"SwaggerKey\": \"ordering\",       \"DownstreamHostAndPorts\": [         {           \"Host\": \"orderingapi-service\",           \"Port\": \"8003\"         }       ],       \"UpstreamPathTemplate\": \"/ordering/{everything}\",       \"UpstreamHttpMethod\": [         \"GET\",         \"POST\",         \"PUT\",         \"DELETE\"       ]     }   ] }     ocelot.global.json   {   \"GlobalConfiguration\": {     \"BaseUrl\": \"http://bffweb-service:8011\"   } }    ocelot.SwaggerEndPoints.json   {   \"SwaggerEndPoints\": [     {       \"Key\": \"bffweb\",       \"TransformByOcelotConfig\": false,       \"Config\": [         {           \"Name\": \"BFF.Web\",           \"Version\": \"1.0\",           \"Url\": \"http://bffweb-service:8011/swagger/v1/swagger.json\"         }       ]     },     {       \"Key\": \"location\",       \"TransformByOcelotConfig\": true,       \"Config\": [         {           \"Name\": \"Location.API\",           \"Version\": \"1.0\",           \"Url\": \"http://bffweb-service:8011/location/swagger/v1/swagger.json\"         }       ]     },     {       \"Key\": \"catalog\",       \"TransformByOcelotConfig\": true,       \"Config\": [         {           \"Name\": \"Catalog.API\",           \"Version\": \"1.0\",           \"Url\": \"http://bffweb-service:8011/catalog/swagger/v1/swagger.json\"         }       ]     },     {       \"Key\": \"ordering\",       \"TransformByOcelotConfig\": true,       \"Config\": [         {           \"Name\": \"Ordering.API\",           \"Version\": \"1.0\",           \"Url\": \"http://bffweb-service:8011/catalog/swagger/v1/swagger.json\"         }       ]     }   ] }       Add AlterUpstream Class in Config Folder   AlterUpstream.cs   using Newtonsoft.Json; using Newtonsoft.Json.Linq;  namespace BFF.Web.Config {     public class AlterUpstream     {         public static string AlterUpstreamSwaggerJson(HttpContext context, string swaggerJson)         {             var swagger = JObject.Parse(swaggerJson);             // ... alter upstream json             return swagger.ToString(Formatting.Indented);         }     } }      Modify Program.cs to configure ocelot   Program.cs    using Catalog.API.Db; using Microsoft.EntityFrameworkCore;  var builder = WebApplication.CreateBuilder(args);  // Add services to the container.  builder.Services.AddControllers();  builder.Services.AddDbContext&lt;CatalogContext&gt;(opt =&gt; opt.UseInMemoryDatabase(\"CatalogDB\"));  // Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle builder.Services.AddEndpointsApiExplorer(); builder.Services.AddSwaggerGen();  var app = builder.Build();  // Configure the HTTP request pipeline. if (app.Environment.IsDevelopment()) {     app.UseSwagger();     app.UseSwaggerUI(); }  app.UseHttpsRedirection();  app.UseAuthorization();  app.MapControllers();  app.Run();       Add docker file in the root directory.   Dockerfile   #See https://aka.ms/containerfastmode to understand how Visual Studio uses this Dockerfile to build your images for faster debugging.  FROM mcr.microsoft.com/dotnet/aspnet:6.0 AS base WORKDIR /app EXPOSE 80 EXPOSE 443  ENV ASPNETCORE_URLS=http://*:80; ENV ASPNETCORE_ENVIRONMENT=Development  FROM mcr.microsoft.com/dotnet/sdk:6.0 AS build WORKDIR /src COPY [\"/BFF.Web.csproj\", \"BFF.Web/\"] RUN dotnet restore \"BFF.Web/BFF.Web.csproj\"  WORKDIR \"/src/BFF.Web\" COPY . . WORKDIR \"/src/BFF.Web\" RUN dotnet build \"BFF.Web.csproj\" -c Release -o /app/build  FROM build AS publish RUN dotnet publish \"BFF.Web.csproj\" -c Release -o /app/publish  FROM base AS final WORKDIR /app COPY --from=publish /app/publish . ENTRYPOINT [\"dotnet\", \"BFF.Web.dll\"]      Go to director where dockerfile reside and run the following command to build docker image.   docker image build -t mahedee/bff.web:1.0.1 .      To configure pod and service add the following yml file with code in Deploy/k8s folder   deployment.yml    apiVersion: apps/v1 kind: Deployment metadata:   name: bffweb-deployment spec:   selector:     matchLabels:       app: bffweb-pod   template:     metadata:       labels:         app: bffweb-pod     spec:       containers:       - name: bffweb-container         image: mahedee/bff.web:1.0.1         resources:           limits:             memory: \"128Mi\"             cpu: \"500m\"         ports:         - containerPort: 80  ---  apiVersion: v1 kind: Service metadata:   name: bffweb-service spec:   selector:     app: bffweb-pod   ports:   - port: 8011     targetPort: 80   type: LoadBalancer        Go to the Deploy/k8s directory and run the following commands.   kubectl apply -f .\\deployment.yml      Now you can running services using in the kubernetes using the following command   kubectl get svc   Output:    NAME                  TYPE           CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGE bffweb-service        LoadBalancer   10.111.186.235   localhost     8011:31690/TCP   10m catalogapi-service    LoadBalancer   10.101.130.94    localhost     8001:30710/TCP   138m kubernetes            ClusterIP      10.96.0.1        &lt;none&gt;        443/TCP          3d20h locationapi-service   ClusterIP      10.100.204.33    &lt;none&gt;        8002/TCP         7m57s orderingapi-service   LoadBalancer   10.96.12.11      localhost     8003:31264/TCP   15m            You can now access catalog api, location api and ordering api using bffweb’s swagger defination            Check all end point using api gateway and swagger using the following URL       http://localhost:8011/swagger/index.html   Select Swagger definition from top right corner of BFF   Visualizing Service Mesh   Step 11: Install Kiali dashboard      Go to the Istio’s directory. Install Kiali and other addons and wait for them to be deployed. Execute below command inside Istio folder. Use Git bash instead of powershell.   kubectl apply -f samples/addons      Execute below command and wait till get success roll out message.   kubectl rollout status deployment/kiali -n istio-system   Note: If there are errors trying to install the addons, try running the command again. There may be some timing issues which will be resolved when the command is run again.      Verify the deployment with below command.   kubectl get po -n istio-system   Output:   NAME                                    READY   STATUS    RESTARTS   AGE grafana-6ccd56f4b6-sc894                1/1     Running   0          13m istio-egressgateway-c9cbbd99f-wk265     1/1     Running   0          87m istio-ingressgateway-7c8bc47b49-xpvvc   1/1     Running   0          87m istiod-765596f7ff-2p72v                 1/1     Running   0          89m jaeger-5d44bc5c5d-g2wcl                 1/1     Running   0          13m kiali-79b86ff5bc-cqwrp                  1/1     Running   0          13m prometheus-64fd8ccd65-lglld             2/2     Running   0          13m      Now run the Kiali dashboard using the below command   istioctl dashboard kiali  Kiali dashboard will be open.   Hit the gateway URL. Use the following URL and hit several times and you will get the reflect in kiali dashbaord as below.   http://localhost:8011/swagger/index.html   Select Swagger definition from top right corner of BFF      Step 12: Monitoring with Prometheus &amp; Grafana      Check Prometheus and Grafana is running using the following command.   kubectl get po -n istio-system      Run Prometheus dashboard using the following command   istioctl dashboard prometheus   View graph in diffrent ways like -      Select istio_requests_total.   Switch to Graph.   Check Status/Targets - Kubernetes service discovery.         Run Grafana dashboard using the following command   istioctl dashboard grafana     Go to Dashboar-&gt;Manage-&gt;Istio and see the dashboar as below.      Step 13: Distributed Tracing using Jaegar UI      Run Jaeger UI using the following command   istioctl dashboard jaeger      Step 14: Logging from Istio and Envoy      Create a YAML file and name the file elasticsearch.yaml  and write below code.   elasticsearch.yaml   # Logging Namespace. All below are a part of this namespace. apiVersion: v1 kind: Namespace metadata:   name: logging --- # Elasticsearch Service apiVersion: v1 kind: Service metadata:   name: elasticsearch   namespace: logging   labels:     app: elasticsearch spec:   ports:   - port: 9200     protocol: TCP     targetPort: db   selector:     app: elasticsearch --- # Elasticsearch Deployment apiVersion: apps/v1 kind: Deployment metadata:   name: elasticsearch   namespace: logging   labels:     app: elasticsearch spec:   replicas: 1   selector:     matchLabels:       app: elasticsearch   template:     metadata:       labels:         app: elasticsearch       annotations:         sidecar.istio.io/inject: \"false\"     spec:       containers:       - image: docker.elastic.co/elasticsearch/elasticsearch-oss:6.1.1         name: elasticsearch         resources:           # need more cpu upon initialization, therefore burstable class           limits:             cpu: 1000m           requests:             cpu: 100m         env:           - name: discovery.type             value: single-node         ports:         - containerPort: 9200           name: db           protocol: TCP         - containerPort: 9300           name: transport           protocol: TCP         volumeMounts:         - name: elasticsearch           mountPath: /data       volumes:       - name: elasticsearch         emptyDir: {}      Create a YAML file and name the file kibana.yaml  and write below code.   kibana.yaml   # Kibana Service apiVersion: v1 kind: Service metadata:   name: kibana   namespace: logging   labels:     app: kibana spec:   ports:   - port: 5601     protocol: TCP     targetPort: ui   selector:     app: kibana --- # Kibana Deployment apiVersion: apps/v1 kind: Deployment metadata:   name: kibana   namespace: logging   labels:     app: kibana spec:   replicas: 1   selector:     matchLabels:       app: kibana   template:     metadata:       labels:         app: kibana       annotations:         sidecar.istio.io/inject: \"false\"     spec:       containers:       - name: kibana         image: docker.elastic.co/kibana/kibana-oss:6.1.1         resources:           # need more cpu upon initialization, therefore burstable class           limits:             cpu: 1000m           requests:             cpu: 100m         env:           - name: ELASTICSEARCH_URL             value: http://elasticsearch:9200         ports:         - containerPort: 5601           name: ui           protocol: TCP --- apiVersion: networking.istio.io/v1alpha3 kind: Gateway metadata:   name: kibana-gateway   namespace: logging spec:   selector:     istio: ingressgateway   servers:   - port:       number: 15033       name: http-kibana       protocol: HTTP     hosts:     - \"*\" --- apiVersion: networking.istio.io/v1alpha3 kind: VirtualService metadata:   name: kibana-vs   namespace: logging spec:   hosts:   - \"*\"   gateways:   - kibana-gateway   http:   - match:     - port: 15033     route:     - destination:         host: kibana         port:           number: 5601       Create a YAML file and name the file fluentd.yaml  and write below code.   fluentd.yaml    apiVersion: v1 kind: ServiceAccount metadata:   name: fluentd   namespace: kube-system --- apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRole metadata:   name: fluentd   namespace: kube-system rules:   - apiGroups:       - \"\"     resources:       - pods       - namespaces     verbs:       - get       - list       - watch --- kind: ClusterRoleBinding apiVersion: rbac.authorization.k8s.io/v1 metadata:   name: fluentd roleRef:   kind: ClusterRole   name: fluentd   apiGroup: rbac.authorization.k8s.io subjects:   - kind: ServiceAccount     name: fluentd     namespace: kube-system --- # Fluentd Service apiVersion: v1 kind: Service metadata:   name: fluentd-es   namespace: kube-system   labels:     app: fluentd-es spec:   ports:     - name: fluentd-tcp       port: 24224       protocol: TCP       targetPort: 24224     - name: fluentd-udp       port: 24224       protocol: UDP       targetPort: 24224   selector:     k8s-app: fluentd-logging --- apiVersion: apps/v1 kind: DaemonSet metadata:   name: fluentd   namespace: kube-system   labels:     k8s-app: fluentd-logging     version: v1     kubernetes.io/cluster-service: \"true\" spec:   selector:     matchLabels:       k8s-app: fluentd-logging   template:     metadata:       labels:         k8s-app: fluentd-logging         version: v1         kubernetes.io/cluster-service: \"true\"     spec:       serviceAccount: fluentd       serviceAccountName: fluentd       tolerations:         - key: node-role.kubernetes.io/master           effect: NoSchedule       containers:         - name: fluentd           image: fluent/fluentd-kubernetes-daemonset:v1.3-debian-elasticsearch           env:             - name: FLUENT_ELASTICSEARCH_HOST               value: \"elasticsearch.logging\"             - name: FLUENT_ELASTICSEARCH_PORT               value: \"9200\"             - name: FLUENT_ELASTICSEARCH_SCHEME               value: \"http\"             - name: FLUENT_UID               value: \"0\"           resources:             limits:               memory: 200Mi             requests:               cpu: 100m               memory: 200Mi           volumeMounts:             - name: varlog               mountPath: /var/log             - name: varlibdockercontainers               mountPath: /var/lib/docker/containers               readOnly: true       terminationGracePeriodSeconds: 30       volumes:         - name: varlog           hostPath:             path: /var/log         - name: varlibdockercontainers           hostPath:             path: /var/lib/docker/containers        Now execute all above file with below commands.   kubectl apply -f elasticsearch.yaml  kubectl apply -f kibana.yaml  kubectl apply -f fluentd.yaml  kubectl get pods -n logging       If you are using docker desktop you can use below command to port forward.   kubectl port-forward svc/kibana 8099:5601 -n logging      Now browse kibana using http://localhost:8099/      Step 15: Configure Istio to Log to Fluentd   Now we are going to configure Istio to use the same FluentD instance, and send proxy logs through FluentD into Elasticsearch. It will be actual adapter configuration that I mentioned earler.      Create a YAMl file and name the file fluentd-istio.yaml and write below code.   fluentd-istio.yaml   # Configuration for logentry instances apiVersion: config.istio.io/v1alpha2 kind: instance metadata:   name: newlog   namespace: istio-system spec:   compiledTemplate: logentry   params:     severity: '\"info\"'     timestamp: request.time     variables:       source: source.labels[\"app\"] | source.workload.name | \"unknown\"       user: source.user | \"unknown\"       destination: destination.labels[\"app\"] | destination.workload.name | \"unknown\"       responseCode: response.code | 0       responseSize: response.size | 0       latency: response.duration | \"0ms\"     monitored_resource_type: '\"UNSPECIFIED\"' --- # Configuration for a Fluentd handler apiVersion: config.istio.io/v1alpha2 kind: handler metadata:   name: handler   namespace: istio-system spec:   compiledAdapter: fluentd   params:     address: \"fluentd-es.kube-system:24224\" --- # Rule to send logentry instances to the Fluentd handler apiVersion: config.istio.io/v1alpha2 kind: rule metadata:   name: newlogtofluentd   namespace: istio-system spec:   match: \"true\" # match for all requests   actions:    - handler: handler      instances:      - newlog ---       Apply the below command   kubectl apply -f fluentd-istio.yaml      Filter on search with kubernetes.container.name is istio-proxy  and we will see logs fron istio proxy.   Some commands you may need   Kubectl Commands   kubectl get ns                   // Get all namesapces  kubectl get svc -n istio-system   // Get services under istio-system name space  kubectl get all -n istio-system   // Get all under istio-system name space  kubectl delete ns istio-system    // Delete namespace name istio-system  kubectl get all                   // Get everything in the kubernetes  kubectl delete --all pods         // Delete all pods  kubectl delete --all pods --namespace=foo  // Delete all pods under the namespace foo  kubectl delete --all deployments --namespace=foo // Delete all deployments under the namespace foo  kubectl delete --all namespaces  // Delete all name spaces  kubectl delete --all svc           // Delete all services  kubectl delete --all deployments    // Delete all deployments    Docker Commands   docker rm -vf $(docker ps -aq)     // To delete all containers including its volumes use  docker rmi -f $(docker images -aq)  // To delete all the images  docker images                       // To check docker images  docker image build -t mahedee/location:1.0.1 .  // create a docker image name mahedee/location:1.0.1     Source Code   ","categories": ["ASP.NET","ASP.NET Core","Web API","Docker","Istio","Kubernetes","Microservices"],
        "tags": ["aspnet","csharp"],
        "url": "http://localhost:4000/configure-service-mesh-using-istio-with-asp.net-core-and-kubernetes/",
        "teaser":null},{
        "title": "Configure Swagger on api gateway using ocelot in asp.net core application",
        "excerpt":"  Introduction   Swagger configuration on API gateway is not as simple as you are configure normal application. You have to configure it in different way. In this article I will create an API gateway using ocelot and asp.net core application and show you how to configure swagger on API gateway.   Tools and technologies used     Visual Studio 2022   .NET 6.0   In Memory Database   Entity Framework   ASP.NET Core Web API   C#   Ocelot and   MMLib.SwaggerForOcelot   Implementation   Step 1: Create solution and projects.      Create a solution name APIGateway   Add 4 new web api project, name - Catalog.API, Location.API, Ordering.API and BFF.Web in the solution.   Here, BFF.Web project will act as API Gateway.   Step 2: Install nuget packages.      Install following nuget package in Catalog.API Project   PM&gt; Install-Package Microsoft.EntityFrameworkCore.InMemory PM&gt; Install-Package Microsoft.EntityFrameworkCore.SqlServer PM&gt; Install-Package Microsoft.EntityFrameworkCore.Tools      Install following nuget package in Ordering.API Project   PM&gt; Install-Package Microsoft.EntityFrameworkCore PM&gt; Install-Package Microsoft.EntityFrameworkCore.InMemory PM&gt; Install-Package Microsoft.EntityFrameworkCore.SqlServer PM&gt; Install-Package Microsoft.EntityFrameworkCore.Tools      Install following nuget packages in BFF.Web Project   PM&gt; Install-Package Ocelot PM&gt; Install-Package Ocelot.Provider.Polly PM&gt; Install-Package Ocelot.Cache.CacheManager PM&gt; Install-Package MMLib.SwaggerForOcelot   Step 3: Organize Catalog.API Project      Create a Product model class in Catalog.API/Model folder   Product.cs    using System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema;  namespace Catalog.API.Model {     public class Product     {         [Key]         [DatabaseGenerated(DatabaseGeneratedOption.Identity)]         public int Id { get; set; }         public string Name { get; set; }          public string Description { get; set; }          public decimal Price { get; set; }          public int AvailableStock { get; set; }          public int RestockThreshold { get; set; }     } }       Create a CatalogContext class in Catalog.API/Db folder   CatalogContext.cs    using Catalog.API.Model; using Microsoft.EntityFrameworkCore;  namespace Catalog.API.Db {     public class CatalogContext : DbContext     {         public CatalogContext(DbContextOptions&lt;CatalogContext&gt; options) : base(options)         {          }          protected override void OnModelCreating(ModelBuilder modelBuilder)         {          }          protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)         {             base.OnConfiguring(optionsBuilder);         }          public DbSet&lt;Product&gt; Products { get; set; }     } }       Modify Program.cs file as follows    using Catalog.API.Db; using Microsoft.EntityFrameworkCore;  var builder = WebApplication.CreateBuilder(args);  // Add services to the container.  builder.Services.AddControllers();  builder.Services.AddDbContext&lt;CatalogContext&gt;(opt =&gt; opt.UseInMemoryDatabase(\"CatalogDB\"));  // Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle builder.Services.AddEndpointsApiExplorer(); builder.Services.AddSwaggerGen();  var app = builder.Build();  // Configure the HTTP request pipeline. if (app.Environment.IsDevelopment()) {     app.UseSwagger();     app.UseSwaggerUI(); }  app.UseHttpsRedirection();  app.UseAuthorization();  app.MapControllers();  app.Run();       Create a conroller class name ProductsController in Catalog.API/Controllers folder   CatalogController.cs   #nullable disable using System; using System.Collections.Generic; using System.Linq; using System.Threading.Tasks; using Microsoft.AspNetCore.Http; using Microsoft.AspNetCore.Mvc; using Microsoft.EntityFrameworkCore; using Catalog.API.Db; using Catalog.API.Model;  namespace Catalog.API.Controllers {     [Route(\"api/[controller]\")]     [ApiController]     public class ProductsController : ControllerBase     {         private readonly CatalogContext _context;          public ProductsController(CatalogContext context)         {             _context = context;         }          // GET: api/Products         [HttpGet(\"GetAll\")]         public async Task&lt;ActionResult&lt;IEnumerable&lt;Product&gt;&gt;&gt; GetProducts()         {             return await _context.Products.ToListAsync();         }          // GET: api/Products/5         [HttpGet(\"{id}\")]         public async Task&lt;ActionResult&lt;Product&gt;&gt; GetProduct(int id)         {             var product = await _context.Products.FindAsync(id);              if (product == null)             {                 return NotFound();             }              return product;         }          // PUT: api/Products/5         // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754         [HttpPut(\"Edit/{id}\")]         public async Task&lt;IActionResult&gt; PutProduct(int id, Product product)         {             if (id != product.Id)             {                 return BadRequest();             }              _context.Entry(product).State = EntityState.Modified;              try             {                 await _context.SaveChangesAsync();             }             catch (DbUpdateConcurrencyException)             {                 if (!ProductExists(id))                 {                     return NotFound();                 }                 else                 {                     throw;                 }             }              return NoContent();         }          // POST: api/Products         // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754         [HttpPost(\"Add\")]         public async Task&lt;ActionResult&lt;Product&gt;&gt; PostProduct(Product product)         {             _context.Products.Add(product);             await _context.SaveChangesAsync();              return CreatedAtAction(\"GetProduct\", new { id = product.Id }, product);         }          // DELETE: api/Products/5         [HttpDelete(\"Delete/{id}\")]         public async Task&lt;IActionResult&gt; DeleteProduct(int id)         {             var product = await _context.Products.FindAsync(id);             if (product == null)             {                 return NotFound();             }              _context.Products.Remove(product);             await _context.SaveChangesAsync();              return NoContent();         }          private bool ProductExists(int id)         {             return _context.Products.Any(e =&gt; e.Id == id);         }     } }    Step 4: Organize Ordering.API Project      Create a Order model class in Ordering.API/Model folder   Order.cs    namespace Ordering.API.Models {     public class Order     {         public int Id { get; set; }         public string Address { get; set; }          public DateTime OrderDate { get; set; }          public string Comments { get; set; }     } }        Create a OrderingContext class in Ordering.API/Db folder   OrderingContext.cs    using Microsoft.EntityFrameworkCore; using Ordering.API.Models;  namespace Ordering.API.Db {     public class OrderingContext : DbContext     {         public OrderingContext(DbContextOptions&lt;OrderingContext&gt; options) : base(options)         {          }         public DbSet&lt;Ordering.API.Models.Order&gt; Order { get; set; }     } }        Modify Program.cs file as follows    using Microsoft.EntityFrameworkCore; using Ordering.API.Db;  var builder = WebApplication.CreateBuilder(args);  // Add services to the container.  builder.Services.AddControllers();  builder.Services.AddDbContext&lt;OrderingContext&gt;(opt =&gt; opt.UseInMemoryDatabase(\"CatalogDB\"));  // Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle builder.Services.AddEndpointsApiExplorer(); builder.Services.AddSwaggerGen();  var app = builder.Build();  // Configure the HTTP request pipeline. if (app.Environment.IsDevelopment()) {     app.UseSwagger();     app.UseSwaggerUI(); }  app.UseHttpsRedirection();  app.UseAuthorization();  app.MapControllers();  app.Run();       Create a conroller class name OrdersController in Ordering.API/Controllers folder   OrdersController.cs   #nullable disable using System; using System.Collections.Generic; using System.Linq; using System.Threading.Tasks; using Microsoft.AspNetCore.Http; using Microsoft.AspNetCore.Mvc; using Microsoft.EntityFrameworkCore; using Ordering.API.Db; using Ordering.API.Models;  namespace Ordering.API.Controllers {     [Route(\"api/[controller]\")]     [ApiController]     public class OrdersController : ControllerBase     {         private readonly OrderingContext _context;          public OrdersController(OrderingContext context)         {             _context = context;         }          // GET: api/Orders         [HttpGet(\"GetAll\")]         public async Task&lt;ActionResult&lt;IEnumerable&lt;Order&gt;&gt;&gt; GetOrder()         {             return await _context.Order.ToListAsync();         }          // GET: api/Orders/5         [HttpGet(\"{id}\")]         public async Task&lt;ActionResult&lt;Order&gt;&gt; GetOrder(int id)         {             var order = await _context.Order.FindAsync(id);              if (order == null)             {                 return NotFound();             }              return order;         }          // PUT: api/Orders/5         // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754         [HttpPut(\"Edit/{id}\")]         public async Task&lt;IActionResult&gt; PutOrder(int id, Order order)         {             if (id != order.Id)             {                 return BadRequest();             }              _context.Entry(order).State = EntityState.Modified;              try             {                 await _context.SaveChangesAsync();             }             catch (DbUpdateConcurrencyException)             {                 if (!OrderExists(id))                 {                     return NotFound();                 }                 else                 {                     throw;                 }             }              return NoContent();         }          // POST: api/Orders         // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754         [HttpPost(\"Add\")]         public async Task&lt;ActionResult&lt;Order&gt;&gt; PostOrder(Order order)         {             _context.Order.Add(order);             await _context.SaveChangesAsync();              return CreatedAtAction(\"GetOrder\", new { id = order.Id }, order);         }          // DELETE: api/Orders/5         [HttpDelete(\"Delete/{id}\")]         public async Task&lt;IActionResult&gt; DeleteOrder(int id)         {             var order = await _context.Order.FindAsync(id);             if (order == null)             {                 return NotFound();             }              _context.Order.Remove(order);             await _context.SaveChangesAsync();              return NoContent();         }          private bool OrderExists(int id)         {             return _context.Order.Any(e =&gt; e.Id == id);         }     } }    Step 5: Organize Location.API Project      Create CountriesController in Location.API/Controllers folder    using Microsoft.AspNetCore.Mvc;  namespace Location.API.Controllers {     [ApiController]     [Route(\"api/[controller]\")]     public class CountriesController : ControllerBase     {       [HttpGet(\"GetAll\")]       public IEnumerable&lt;string&gt; Get()         {             return new string[] {\"America\",\"Bangladesh\", \"Canada\" };         }     } }    Step 6: Organize BFF.Web (API Gateway)  Project      Create a folder name Routes and add the following files in that folder   ocelot.catalog.api.json    {   \"Routes\": [     {       \"DownstreamPathTemplate\": \"/{everything}\",       \"DownstreamScheme\": \"https\",       \"SwaggerKey\": \"catalog\",       \"DownstreamHostAndPorts\": [         {           \"Host\": \"localhost\",           \"Port\": \"7282\"         }       ],       \"UpstreamPathTemplate\": \"/catalog/{everything}\",       \"UpstreamHttpMethod\": [         \"GET\",         \"POST\",         \"PUT\",         \"DELETE\"       ]     }   ] }    ocelot.location.api.json   {   \"Routes\": [     {       \"DownstreamPathTemplate\": \"/{everything}\",       \"DownstreamScheme\": \"https\",       \"SwaggerKey\": \"location\",       \"DownstreamHostAndPorts\": [         {           \"Host\": \"localhost\",           \"Port\": \"7003\"         }       ],       \"UpstreamPathTemplate\": \"/location/{everything}\",       \"UpstreamHttpMethod\": [         \"GET\",         \"POST\",         \"PUT\",         \"DELETE\"       ]     }   ] }    ocelot.ordering.api.json   {   \"Routes\": [     {       \"DownstreamPathTemplate\": \"/{everything}\",       \"DownstreamScheme\": \"https\",       \"SwaggerKey\": \"ordering\",       \"DownstreamHostAndPorts\": [         {           \"Host\": \"localhost\",           \"Port\": \"7126\"         }       ],       \"UpstreamPathTemplate\": \"/ordering/{everything}\",       \"UpstreamHttpMethod\": [         \"GET\",         \"POST\",         \"PUT\",         \"DELETE\"       ]     }   ] }    ocelot.global.json   {   \"GlobalConfiguration\": {     \"BaseUrl\": \"http://localhost:5205\"   } }   ocelot.SwaggerEndPoints.json   {   \"SwaggerEndPoints\": [     {       \"Key\": \"bffweb\",       \"TransformByOcelotConfig\": false,       \"Config\": [         {           \"Name\": \"BFF.Web\",           \"Version\": \"1.0\",           \"Url\": \"http://localhost:5205/swagger/v1/swagger.json\"         }       ]     },     {       \"Key\": \"location\",       \"TransformByOcelotConfig\": true,       \"Config\": [         {           \"Name\": \"Location.API\",           \"Version\": \"1.0\",           \"Url\": \"http://localhost:5205/location/swagger/v1/swagger.json\"         }       ]     },     {       \"Key\": \"catalog\",       \"TransformByOcelotConfig\": true,       \"Config\": [         {           \"Name\": \"Catalog.API\",           \"Version\": \"1.0\",           \"Url\": \"http://localhost:5205/catalog/swagger/v1/swagger.json\"         }       ]     },     {       \"Key\": \"ordering\",       \"TransformByOcelotConfig\": true,       \"Config\": [         {           \"Name\": \"Ordering.API\",           \"Version\": \"1.0\",           \"Url\": \"http://localhost:5205/catalog/swagger/v1/swagger.json\"         }       ]     }   ] }      Add AlterUpstream Class in Config Folder   AlterUpstream.cs   using Newtonsoft.Json; using Newtonsoft.Json.Linq;  namespace BFF.Web.Config {     public class AlterUpstream     {         public static string AlterUpstreamSwaggerJson(HttpContext context, string swaggerJson)         {             var swagger = JObject.Parse(swaggerJson);             // ... alter upstream json             return swagger.ToString(Formatting.Indented);         }     } }      Modify Program.cs file as follows   Program.cs   using BFF.Web.Config; using MMLib.SwaggerForOcelot.DependencyInjection; using Ocelot.DependencyInjection; using Ocelot.Middleware; using Ocelot.Provider.Polly;  var builder = WebApplication.CreateBuilder(args);  var routes = \"Routes\";  builder.Configuration.AddOcelotWithSwaggerSupport(options =&gt; {     options.Folder = routes; });  builder.Services.AddOcelot(builder.Configuration).AddPolly(); builder.Services.AddSwaggerForOcelot(builder.Configuration);  var environment = Environment.GetEnvironmentVariable(\"ASPNETCORE_ENVIRONMENT\"); builder.Configuration.SetBasePath(Directory.GetCurrentDirectory())     .AddOcelot(routes, builder.Environment)     .AddEnvironmentVariables();   // Add services to the container.  builder.Services.AddControllers(); // Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle builder.Services.AddEndpointsApiExplorer();  // Swagger for ocelot builder.Services.AddSwaggerGen();  var app = builder.Build();  // Configure the HTTP request pipeline. if (app.Environment.IsDevelopment()) {     app.UseSwagger(); }   app.UseHttpsRedirection();  app.UseAuthorization();  app.UseSwaggerForOcelotUI(options =&gt; {     options.PathToSwaggerGenerator = \"/swagger/docs\";     options.ReConfigureUpstreamSwaggerJson = AlterUpstream.AlterUpstreamSwaggerJson;  }).UseOcelot().Wait();  app.MapControllers();  app.Run();    Step 7: Run and Test application      Now run multiple (all) projects and test application using postman.   Check all end point using api gateway and swagger using the following URL   https://localhost:7205/swagger/index.html      Select Swagger definition from top right corner of BFF   Source code  ","categories": ["Web API","ASP.NET Core","C#","Ocelot"],
        "tags": ["webapi","aspnetcore","csharp","ocelot"],
        "url": "http://localhost:4000/configure-swagger-on-api-gateway-using-ocelot-in-asp.net-core-application/",
        "teaser":null},{
        "title": "Configure CI/CD pipeline with Jenkins and Github using an asp.net core application",
        "excerpt":"Overview   Jenkins is an open source automation server to facilitate CI/CD. It helps to automate software development jobs like building, testing, and deploying. In this article we are going to show you how to configure CI/CD pipeline with Jenkins and Github for an ASP.NET Core Web API application.   Tools and Technology used  The following tools and technologies are used to configure CI/CD      Visual Studio 2022   Visual C#   ASP.NET Core Web API   Jenkins   Github   IIS   Let’s configure Jenkins for an asp.net core web api applications.   Step 1: Download and install Java   Jenkin is developed by Java. So it needs Java runtime to run. Download and install latest version of Java SDK from here   Step 2: Download Jenkins      Download Jenkins from here   Click Download -&gt; Download Jenkins 2.332.1 LTS for: -&gt; Windows   Step 3: Install Jenkins on Windows      Double click on Jenkins.msi file and Click Next   Choose Logon Type (I have choosen Run Service as LocalSystem) and clik next.   Type a port number or keep default 8080 (I have choosen 8080). Click Test port and Next.   Once the installation is done. Navigate to the URL http://localhost:8080/ . You will get an screen mentioned Unlock Jenkins.   Go to the file mentioned in the screen and copy and pest the password on Andminstrator Password text box and click continue.   Now you will get the following screen and click on Install suggested plugins.         Wait untill all plugins are installed. If any plugins installation is failed, try again. Once installation is done, you will see the following screen.         Fill up the form, type user name and passwrod, and click Save &amp; Continue.   You will get the another screen, clik Save &amp; Finish.   Now our jenkins is ready. Click Start using Jenkins.   Step 4: To avoid a login each time do the following      Navigate Manage Jenkins -&gt; Configure Global Security   Mark “Allow anonymous read access” as below      Step 5: Install some custom plugins      Navigate to “Manage Jenkins” -&gt; “Manage Plugins”   Click “Available” tab   Install MSBuild, MSTest, MSTestRunner, PowerShell, VSTestRunner and Git plugin if those are not already installed.   You can use search field to find out the plugins.   Now click Install without restart.   Step 6: Create an asp.net core web api project   Step 6.1: Create an Web api project      Create a ASP.NET Core Web API Project Name HRM.API. Keep Solution name as HRM.   Step 6.2: Install the nuget packages      Install the following nuget packages on HRM.API project.   PM&gt; Install-Package Microsoft.EntityFrameworkCore 6.0.3 PM&gt; Install-Package Microsoft.EntityFrameworkCore.InMemory 6.0.3   Step 6.3: Create model class      Create a model class name - Employee in Models folder.   Employee.cs   namespace HRM.API.Models {     public class Employee     {         public int Id { get; set; }         public string Name { get; set; }         public string Designation { get; set; }         public string FathersName { get; set; }         public string MothersName { get; set; }         public DateTime DateOfBirth { get; set; }     } }    Step 6.4: Create Context and Seed data generator class in Db folder   HRMContext.cs   using HRM.API.Models; using Microsoft.EntityFrameworkCore;  namespace HRM.API.Db {     public class HRMContext : DbContext     {         public HRMContext(DbContextOptions&lt;HRMContext&gt; options) : base(options)         {          }         public DbSet&lt;Employee&gt; Employees { get; set; }     } }    SeedDataGenerator.cs   using HRM.API.Models; using Microsoft.EntityFrameworkCore;  namespace HRM.API.Db {     public class SeedDataGenerator     {         public static void Initialize(IServiceProvider serviceProvider)         {             using (var context = new HRMContext(                 serviceProvider.GetRequiredService&lt;DbContextOptions&lt;HRMContext&gt;&gt;()))             {                 // Check any employee exists                  if (context.Employees.Any())                 {                     return; // Data already exists no need to generate                 }                  context.Employees.AddRange(                     new Employee                     {                         Name = \"Md. Mahedee Hasan\",                         Designation = \"Head of Software Development\",                         FathersName = \"Yeasin Bhuiyan\",                         MothersName = \"Moriom Begum\",                         DateOfBirth = new DateTime(1984, 12, 19, 00, 00, 00)                     },                      new Employee                     {                         Name = \"Khaleda Islam\",                         Designation = \"Software Engineer\",                         FathersName = \"Shahidul Islam\",                         MothersName = \"Momtaz Begum\",                         DateOfBirth = new DateTime(1990, 10, 29, 00, 00, 00)                     },                      new Employee                     {                         Name = \"Tahiya Hasan Arisha\",                         Designation = \"Jr. Software Engineer\",                         FathersName = \"Md. Mahedee Hasan\",                         MothersName = \"Khaleda Islam\",                         DateOfBirth = new DateTime(2017, 09, 17, 00, 00, 00)                     },                      new Employee                     {                         Name = \"Humaira Hasan\",                         Designation = \"Jr. Software Engineer\",                         FathersName = \"Md. Mahedee Hasan\",                         MothersName = \"Khaleda Islam\",                         DateOfBirth = new DateTime(2021, 03, 17, 00, 00, 00)                     }                 );                 context.SaveChanges();              }         }     } }   Step 6.5:Create Repository and It’s Interface in Repository folder   IEmployeeRepository.cs   using HRM.API.Models;  namespace HRM.API.Repository {     public interface IEmployeeRepository     {         public Task&lt;IEnumerable&lt;Employee&gt;&gt; SelectAllEmployees();         public Task&lt;Employee&gt; SelectEmployee(int id);         public Task&lt;string&gt; UpdateEmployee(int id, Employee employee);         public Task&lt;string&gt; SaveEmployee(Employee employee);         public Task&lt;string&gt; DeleteEmployee(int id);     } }   EmployeeRepository.cs   using HRM.API.Db; using HRM.API.Models; using Microsoft.EntityFrameworkCore;  namespace HRM.API.Repository {     public class EmployeeRepository : IEmployeeRepository     {         private readonly HRMContext _context;          public EmployeeRepository(HRMContext context)         {             _context = context;         }          public async Task&lt;IEnumerable&lt;Employee&gt;&gt; SelectAllEmployees()         {             try             {                 var allemployess = _context.Employees.ToListAsync();                 return await allemployess;             }             catch (Exception exp)             {                 throw (exp);             }         }          public async Task&lt;Employee&gt; SelectEmployee(int id)         {             try             {                 var employee = _context.Employees.FindAsync(id);                 return await employee;             }             catch (Exception exp)             {                 throw (exp);             }         }          public async Task&lt;string&gt; UpdateEmployee(int id, Employee employee)         {             if (id != employee.Id)             {                 return \"Cannot be updated!\";             }              _context.Entry(employee).State = EntityState.Modified;              try             {                 await _context.SaveChangesAsync();                 return \"Data updated successfully!\";             }             catch (DbUpdateConcurrencyException exp)             {                 if (!EmployeeExists(id))                 {                     return \"Data not found!\";                 }                 else                 {                     throw (exp);                 }             }         }          public async Task&lt;string&gt; SaveEmployee(Employee employee)         {             _context.Employees.Add(employee);             try             {                 await _context.SaveChangesAsync();                 return \"Data saved successfully!\";             }             catch (Exception exp)             {                 throw (exp);             }         }          public async Task&lt;string&gt; DeleteEmployee(int id)         {             var employee = await _context.Employees.FindAsync(id);             if (employee == null)             {                 return \"Data not found!\";             }              _context.Employees.Remove(employee);             await _context.SaveChangesAsync();              return \"Data deleted successfully!\";         }          private bool EmployeeExists(int id)         {             return _context.Employees.Any(e =&gt; e.Id == id);         }      } }    Step 6.6: Create Employee Service class and it’s interface in Services folder   IEmployeeService   using HRM.API.Models;  namespace HRM.API.Services {     public interface IEmployeeService     {         public Task&lt;IEnumerable&lt;Employee&gt;&gt; GetEmployees();         public Task&lt;Employee&gt; GetEmployee(int id);         public Task&lt;string&gt; EditEmployee(int id, Employee employee);         public Task&lt;string&gt; AddEmployee(Employee employee);         public Task&lt;string&gt; RemoveEmployee(int id);     } }    EmployeeService.cs   using HRM.API.Models; using HRM.API.Repository;  namespace HRM.API.Services {     public class EmployeeService : IEmployeeService     {         IEmployeeRepository _employeeRepository;         public EmployeeService(IEmployeeRepository repository)         {             _employeeRepository = repository;         }          public async Task&lt;IEnumerable&lt;Employee&gt;&gt; GetEmployees()         {             try             {                 return await _employeeRepository.SelectAllEmployees();             }             catch (Exception exp)             {                 throw (exp);             }         }          public async Task&lt;Employee&gt; GetEmployee(int id)         {             try             {                 return await _employeeRepository.SelectEmployee(id);             }             catch (Exception exp)             {                 throw (exp);             }         }          public async Task&lt;string&gt; EditEmployee(int id, Employee employee)         {             try             {                 return await _employeeRepository.UpdateEmployee(id, employee);             }             catch (Exception exp)             {                 throw (exp);             }         }          public async Task&lt;string&gt; AddEmployee(Employee employee)         {             try             {                 return await _employeeRepository.SaveEmployee(employee);             }             catch (Exception exp)             {                 throw (exp);             }         }          public async Task&lt;string&gt; RemoveEmployee(int id)         {             try             {                 return await _employeeRepository.DeleteEmployee(id);             }             catch (Exception exp)             {                 throw (exp);             }         }      } }    Step 6.7: Modify Program.cs file      Modify Program.cs file for InMemory database and Enable Swagger for both dev and release.   Program.cs   using HRM.API.Db; using HRM.API.Repository; using HRM.API.Services; using Microsoft.EntityFrameworkCore;  var builder = WebApplication.CreateBuilder(args);  // Add services to the container.  // Configure in memory database builder.Services.AddDbContext&lt;HRMContext&gt;(opt =&gt; opt.UseInMemoryDatabase(\"HRMDB\"));  builder.Services.AddControllers(); // Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle builder.Services.AddEndpointsApiExplorer(); builder.Services.AddSwaggerGen();   //Register DI builder.Services.AddScoped&lt;IEmployeeRepository, EmployeeRepository&gt;(); builder.Services.AddScoped&lt;IEmployeeService, EmployeeService&gt;();   var app = builder.Build();   // 2. Find the service within the scope to use using (var scope = app.Services.CreateScope()) {     // 3. Get the instance of HRMContext in our service layer     var services = scope.ServiceProvider;     var context = services.GetRequiredService&lt;HRMContext&gt;();      // 4. Call the SeedDataGenerator to generate seed data     SeedDataGenerator.Initialize(services); }    // Configure the HTTP request pipeline. if (app.Environment.IsDevelopment()) {     //app.UseSwagger();     //app.UseSwaggerUI(); }  // To show both development and deployment app.UseSwagger(); app.UseSwaggerUI();  app.UseHttpsRedirection();  app.UseAuthorization();  app.MapControllers();  app.Run();    Step 7: Create a publish profile on our application      Click right button on the HRM.API Project -&gt; Click Publish.   Click ‘+’ sign to create a profile.   Select Folder and click Next.   Release location is like - bin\\Release\\net6.0\\publish\\   Click Finish   From “more action” rename the profile as - JenkinsProfile        You will see two folders are created in Properties -&gt; PublishProfiles folder. Their name is - JenkinsProfile.pubxml and JenkinsProfile.pubxml.user       Modify the pubxml file in Properties/PublishProfiles/JnekinsProfile.pubxml   Change WebPublishMethod to Package from FileSystem as like below.   &lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt; &lt;!-- https://go.microsoft.com/fwlink/?LinkID=208121.  --&gt; &lt;Project ToolsVersion=\"4.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\"&gt;   &lt;PropertyGroup&gt;     &lt;DeleteExistingFiles&gt;False&lt;/DeleteExistingFiles&gt;     &lt;ExcludeApp_Data&gt;False&lt;/ExcludeApp_Data&gt;     &lt;LaunchSiteAfterPublish&gt;True&lt;/LaunchSiteAfterPublish&gt;     &lt;LastUsedBuildConfiguration&gt;Release&lt;/LastUsedBuildConfiguration&gt;     &lt;LastUsedPlatform&gt;Any CPU&lt;/LastUsedPlatform&gt;     &lt;PublishProvider&gt;FileSystem&lt;/PublishProvider&gt;     &lt;PublishUrl&gt;bin\\Release\\net6.0\\publish\\&lt;/PublishUrl&gt;     &lt;WebPublishMethod&gt;Package&lt;/WebPublishMethod&gt;   &lt;/PropertyGroup&gt; &lt;/Project&gt;      Commit and push this changes on the github.   Step 8: Create a test project name HRM.Test on the same solution      Add necessary test cases for HRM.API   Step 9: Build and Run Unit Test cases localy      To build the application locally. Go to the directory of the HRM.API applycation where solution file exists.   Run the following command on terminal to build the application.   PS D:\\Projects\\Github\\code-sample02\\jenkins-demo\\HRM&gt; dotnet build .\\HRM.sln      To Run unit test locally go the directory where test project file exists and run the following command.   PS D:\\Projects\\Github\\code-sample02\\jenkins-demo\\HRM\\HRM.Test&gt; dotnet test .\\HRM.Test.csproj   Step 10: Install Microsoft Web Deploy      Download and install latest version of Microsoft web deploy, if it is not already installed. In my case, it is already installed with visual studio 2022.   Step 11: Create Credentials Id      Navigate to “Manage Jenkins” -&gt; Manage Credentials -&gt; Click Jenkins -&gt; Click Global Credentials (Unrestricted) -&gt; Click Adding some credentials.         In this case, I have given my Github user name and password.   Fill the form and click OK   Id will be generated automatically.   Back to Global credentials (unrestricted) and click Update. You will get ID here.   Step 12: Create Pipeline using Jenkins      Click “Create a job” on the Jenkins home page.         Select Pipeline of the next screen, give a name of the pipeline, I am giving the name of pipeline is “HRMPipelines” and Click Ok.         Now add follwoing script on Pipleline section as mentioned below.      pipeline {    agent any    environment {     dotnet = 'C:\\\\Program Files\\\\dotnet\\\\dotnet.exe'    }    stages {     stage('Checkout') {      steps {        git credentialsId: 'aee7d65a-33a7-4616-ab5e-4a1598289b1b', url: 'https://github.com/mahedee/code-sample02.git', branch: 'main'    }     }    stage('Build') {      steps {       bat 'dotnet build %WORKSPACE%\\\\jenkins-demo\\\\HRM\\\\HRM.sln --configuration Release'      //bat 'dotnet build C:\\\\ProgramData\\\\Jenkins\\\\.jenkins\\\\workspace\\\\HRMPipelines\\\\jenkins-demo\\\\HRM\\\\HRM.sln --configuration Release'      }     }     stage('Test') {      steps {       bat 'dotnet test %WORKSPACE%\\\\jenkins-demo\\\\HRM\\\\HRM.Test\\\\HRM.Test.csproj --logger:trx'      }     }      stage(\"Release\"){       steps {       bat 'dotnet build  %WORKSPACE%\\\\jenkins-demo\\\\HRM\\\\HRM.sln /p:PublishProfile=\" %WORKSPACE%\\\\jenkins-demo\\\\HRM\\\\HRM.API\\\\Properties\\\\PublishProfiles\\\\JenkinsProfile.pubxml\" /p:Platform=\"Any CPU\" /p:DeployOnBuild=true /m'     }   }      stage('Deploy') {     steps {     // Stop IIS     bat 'net stop \"w3svc\"'          // Deploy package to IIS     bat '\"C:\\\\Program Files (x86)\\\\IIS\\\\Microsoft Web Deploy V3\\\\msdeploy.exe\" -verb:sync -source:package=\"%WORKSPACE%\\\\jenkins-demo\\\\HRM\\\\HRM.API\\\\bin\\\\Debug\\\\net6.0\\\\HRM.API.zip\" -dest:auto -setParam:\"IIS Web Application Name\"=\"HRM.Web\" -skip:objectName=filePath,absolutePath=\".\\\\\\\\PackageTmp\\\\\\\\Web.config$\" -enableRule:DoNotDelete -allowUntrusted=true'          // Start IIS again     bat 'net start \"w3svc\"'     }  }   }   }    This is the sequential script for the pipeline to execute the stages one by one. Here we used 5 steps - Checkout, Build, Test, Release, Deploy   Stage 1 - Checkout: In this stage, we provide the URL and Git repository, branch as main and git credentials id. Which I have created on step 10. I pull the source code to workspace. Default workspace is - C:\\ProgramData\\Jenkins.jenkins\\workspace   Stage 2 - Build: In this stage, I have build the specific project. Here HRM.API. Keep in mind you have to direct the location where sln file exists.   Stage 3 - Test : In this stage, I have run test project providing test project link.   Stage 4 - Release: In this stage, A release package HRM.zip is created in the mentioned location which is provided on JenkinsProfile.pubxml. You may check each steps output using console after executing pipeline.   Stage 5 - Deploy: In this tage, first stop IIS. Then deploy package to IIS and then Start IIS again. So, I have used three bat command here.   Step 13: Configure Build Triggers      Navigate to HRMPipelines -&gt; Build Triggers   Mark GitHub hook trigger for GITScm polling and Pool SCM   Type schedule as * * * * *  which means, keep checking the Git repository and as soon as commit/check-in is done, trigger the build process. Note: there is a space after each star.              You can use  */15 * * * * if you want to run pipeline after 15 minutes of push on main.            Click Save       Step 14: Run pipeline manually      Go to the dashboard   Click HRMPipelines   Click Build Now and you will see the following screen. It means, build and deployment completed sucessfully.      Step 15: Change application and see output      Change a little bit on your application   Commit and push it to the Github   Wait a bit and you will see the build and deployed successfully.   Now test your application using the following URL:   http://localhost:8012/swagger/index.html      Here I have hosted the application on 8012 port on IIS.   Source Code   ","categories": ["ASP.NET","ASP.NET Core","Web API","CI/CD","Jenkins","Github","IIS"],
        "tags": ["aspnet","csharp"],
        "url": "http://localhost:4000/configure-ci-cd-pipeline-with-jenkins-github-and-asp.net-core/",
        "teaser":null},{
        "title": "Dot net command at a glance",
        "excerpt":"   Verify the dotnet version   dotnet --version      You can see all the SDKs and runtimes installed by entering   dotnet --info      To see a list of project templates currently available   dotnet new --list      Create a console application hame helloworld   mkdir helloworld cd helloworld dotnet new console  or   dotnet new console --name myhelloworld      Create a web application hame myhelloweb   mkdir helloweb cd helloweb dotnet new mvc --name myhelloweb      To restore dot net dependencies   dotnet restore      To build dot net application   dotnet build      Run the application, go to the project directory   dotnet run      To publish the application, go to the project directory   dotnet publish      To install dotnet package   Syntax: $ dotnet add package &lt;PackageName&gt;  Example: $ dotnet add package MailKit       Create a new webapi project   dotnet new webapi --name mywebapi dotnet run      Create dotnet Razor Page Project   dotnet new razor      Create Razor Page. Go into the Pages folder and create anew folder name Employees and enter the following command   dotnet new page -n Index  ","categories": ["Commands",".NET"],
        "tags": ["dotnet","commands","vscode"],
        "url": "http://localhost:4000/dotnet-command-at-a-glance/",
        "teaser":null},{
        "title": "How to connect SQL Server from docker container using SSMS",
        "excerpt":"Sometimes we need to access database which is running in container. It’s simple but sometimes we cannot remember. Here, I will show you how to connect SQL Server from docker container using SQL Server Management Studio.   Sample docker-compose.yml     sqldbsaga:    image: mcr.microsoft.com/mssql/server:2019-latest    docker-compose.override.yml     sqldbsaga:    environment:     - SA_PASSWORD=MyPass@word     - ACCEPT_EULA=Y    ports:     - \"5533:1433\"    volumes:     - kyc-saga-sqldb:/var/opt/mssql  Now connect using SSMS     Run docker compose file   Run SQL server management studio   Server name should be - localhos, port name   Password would be MyPass@word as below image      Then, click Connect.  ","categories": ["Docker","SQL Server"],
        "tags": ["Docker","sqlserver"],
        "url": "http://localhost:4000/how-to-connet-sql-server-from-docker-using-ssms/",
        "teaser":null},{
        "title": "Tips and tricks for docker",
        "excerpt":"Most used docker commands for everyday      Docker help   $ docker -h      To check docker version   $ docker --version      Login to docker   $ docker login       To see list of images   $ docker image ls      List of Containers   $ docker container ls      See list of running containers   docker ps      Restart a container   docker restart &lt;container name&gt;      To stop docker container   $ docker stop &lt;container id&gt;      Remove all docker images     docker rmi $(docker images -q)           Stop all docker containers   docker stop $(docker ps -a -q)  Remove all docker containers  docker rm $(docker ps -a -q)   Deleting no longer needed containers (stopped)  docker container prune   Deleting no longer needed images  docker image prune   Delete all volumes, which are not used by any existing container  docker volume prune  Same for unused networks  docker network prune      To run docker composer   $ docker-compose up      Build a docker image   Syntax: $ docker build -t &lt;any tag name&gt; &lt;directory of the docker file&gt; Example: $ docker build -t aspnetcore/generator .    Explanation:  Here aspnetcore/generator is tag name and '.' means current directory      To run a docker image   docker run --rm -it -p 8000:80 mcr.microsoft.com/dotnet/core/samples:aspnetapp   The sample asp.net core application will run on http://localhost:8000. Here, 8000 is host machine port and 80 is container port.      SSH into container   docker exec -it &lt;container-id&gt; sh &gt;&gt;ls (Type ls to see all files and directory) &gt;&gt;exit (type exit to return from the container)      View information about your container using command     PS C:\\Users\\mahedee&gt; docker exec -it b73cb9467f5a sh # cd .. # ls app  bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  remote_debugger  root  run  sbin  src  srv  sys  tmp  usr  var # cd app # ls Controllers  Dockerfile  HRM.API.csproj  HRM.API.csproj.user  Program.cs  Properties  WeatherForecast.cs  appsettings.Development.json  appsettings.json  bin  obj # cd .. # ls app  bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  remote_debugger  root  run  sbin  src  srv  sys  tmp  usr  var # cd src # ls HRM.API  HRM.API.sln  bin  docker-compose.dcproj  docker-compose.override.yml  docker-compose.yml  obj # cd bin # ls Debug # cd debug # ls HRM.API.deps.json  HRM.API.exe  HRM.API.runtimeconfig.json  Swashbuckle.AspNetCore.Swagger.dll     Swashbuckle.AspNetCore.SwaggerUI.dll  appsettings.json HRM.API.dll        HRM.API.pdb  Microsoft.OpenApi.dll       Swashbuckle.AspNetCore.SwaggerGen.dll  appsettings.Development.json #           Run a command in a running container   docker exec [OPTIONS] CONTAINER COMMAND [ARG...]  Example $ docker exec -ti 34717 sh -c \"echo a &amp;&amp; echo b\" or $ docker exec -ti my_container sh -c \"echo a &amp;&amp; echo b\" or  $ docker exec -ti my_container sh -c \"dir\"      To run bash in a container   Syntax:   $ docker exec -it &lt;container id&gt; bas Example: $ docker exec -it 2f7 bash   View information about your container user Visual Studio      Use Ctrl+Q to activate Visual Studio Search Box, and type containers.   Or, Go to View &gt; Other Windows &gt; Containers.      For more information see Use the Containers window      Mounting a folder name ‘api’ into the container   $ docker run --rm -it -v ${PWD}:C:\\api mcr.microsoft.com/dotnet/core/runtime:3.1  Here ${PWD} means current directory of host machine map to the directory C:\\api into the container      To inspect network and other information of a container   $ docker inspect &lt;container id&gt;      Run a docker image   Syntax: $ docker run --rm -it -p &lt;host port&gt;:&lt;image port&gt; &lt;any tag name&gt; Example: $ docker run --rm -it -p 8777:80 test2   Explanation:  Here test2 is tag name of the image which already running      Login to docker and push an image   $ docker login  $ docker push mahedee/simpleapi   Explanation:  Here mahedee/simpleapi is the tag name of the image      Setting the API Port with an Environment Variable inside a container   $ export ASPNETCORE_URLS=http://+:80      To see docker event in json format   $ docker events --format ''  Tips: Run this command in another windows      To detach docker compose file   $ docker-compose up -d     To see the log while running docker compose file   $ docker-compose logs -f      Stop and remove containers, networks, images, and volumes   $ docker-compose down      Remove one or more images   $ docker image rm &lt;repository&gt;:&lt;tag&gt; Example: $ docker image rm mahedee/webapi:build     __  ","categories": ["Docker","Commands"],
        "tags": ["commands","docker"],
        "url": "http://localhost:4000/docker-tips-and-tricks/",
        "teaser":null},{
        "title": "How to create SSH fingerprint for Azure DevOps",
        "excerpt":"Azure DevOps is a cloud-based platform provided by Microsoft that offers a set of development tools and services for software development teams. It provides a comprehensive set of features to plan, develop, test, and deliver applications efficiently. Azure DevOps integrates with popular development tools and provides a seamless end-to-end experience for managing the entire software development lifecycle.   The core components of Azure DevOps include:           Azure Boards: This component provides agile project management capabilities, including work item tracking, backlog management, sprint planning, and reporting. It allows teams to plan, track, and discuss work across the entire development process.            Azure Repos: Azure Repos is a version control system that supports both Git and Team Foundation Version Control (TFVC). It provides reliable and scalable repository management for source code, enabling collaboration, branching, merging, and pull request workflows.            Azure Pipelines: Azure Pipelines is a powerful continuous integration and continuous delivery (CI/CD) platform. It allows teams to automate build, test, and deployment processes for applications across different platforms and environments. It supports a wide range of languages, platforms, and deployment targets.            Azure Test Plans: This component provides comprehensive testing tools for manual and exploratory testing. It enables teams to plan, track, and manage test cases and provides rich reporting capabilities to measure test coverage and identify issues.            Azure Artifacts: Azure Artifacts is a package management system that allows teams to create, host, and share NuGet, npm, and Maven packages within the organization. It provides a centralized location to manage and distribute dependencies and artifacts across the development pipeline.       On the other hand, SSH, which stands for Secure Shell, is a network protocol that provides a secure and encrypted way to access and manage remote systems over an unsecured network. It is commonly used for remote administration of servers, secure file transfers, and secure tunneling of network services.   Here are some key aspects of SSH:           Secure Communication: SSH provides a secure channel over an insecure network by encrypting all the data exchanged between the client and the server. This ensures that sensitive information, such as login credentials and data transfers, is protected from eavesdropping and tampering.            Authentication: SSH uses various methods for user authentication, including password-based authentication and public-key authentication. Public-key authentication is generally considered more secure and involves generating a key pair consisting of a private key (kept on the client) and a public key (uploaded to the server).            Port Forwarding and Tunneling: SSH allows for port forwarding, also known as SSH tunneling, which enables the secure forwarding of network connections from a local computer to a remote server or vice versa. This feature is useful for accessing services on remote machines or bypassing firewall restrictions.            Remote Shell Access: SSH provides a secure command-line interface (CLI) or shell access to remote systems. This allows system administrators and users to execute commands, manage files, and perform administrative tasks on remote servers as if they were directly interacting with the local machine.            Secure File Transfer: SSH includes the Secure File Transfer Protocol (SFTP) and Secure Copy (SCP) utilities, which allow secure file transfers between the client and the server. These utilities provide encryption and integrity checks to ensure the confidentiality and integrity of transferred files.       Creating an SSH fingerprint and connecting to Azure DevOps or GitHub may appear straightforward at first, but occasionally, we encounter challenging issues. In this step-by-step guide, I will demonstrate the process of generating an SSH fingerprint for Azure DevOps and cloning a repository.   Step 1:Create SSH Keys      Create a folder if not exists - name .ssh in the following directory.   C:\\Users\\mahedee           Go to run and type: %userprofile%\\.ssh            Run the powershell command in the following directory.       C:\\Users\\mahedee\\.ssh      Run the follwing command on powershell.   ssh-keygen -C \"test-git-dev-azure.com\"      Step 2: Add the public key to Azure DevOps      Now go to the Azure DevOps web portal. Go to the avatar on the upper right corner. Select SSH public keys.         Select + New Key button on the upper right corner.         Copy the key from C:\\Users\\mahedee\\.ssh\\id_rsa.pub . The content of the id_rsa.pub file that you have already generated and pest the content on Public Key Data text box as belows.         Now click add button.   Step 3: Clone your repository      Now run powershell command and clone a repository using SSH as bellows.   git clone git@ssh.dev.azure.com:v3/yourorganization/yourrepository   Troubleshooting   Problem   After configuring SSH, I got the following error while tried to clone repository.   git clone git@ssh.dev.azure.com:v3/yourorganization/yourrepository   I was getting the following message:   git@ssh.dev.azure.com's password:   I have tried all using all sorts of password but failed.   Solution      OpenSSH Authentication Agent was disabled on my PC. I started the service.         SSH.exe was not added on environment varaible. I have added it on environment variable.      Then I tried to clone the repository and It was working fine.  ","categories": ["Command","Source Control"],
        "tags": ["command","sourcecontrol"],
        "url": "http://localhost:4000/how-to-create-ssh-fingerprint-for-azure-devops/",
        "teaser":null},{
        "title": "Configure QoS in API Gateway using ocelot and Polly",
        "excerpt":"Introduction  API Gateway is an entry point for backend application. It maintains routing, authentication, logging, service discovery etc. Ocelot is used to design and develop API gateway for .net based application. QoS is generally configured in API gateway which provides different priorities for different applications, users or traffic. In this article, we will configure and discuss Quality of Services (QoS) using ocelot and Polly on ASP.NET Core web API project.   What is Quality of Service (QoS)?  QoS provides different priorities to different applications, users or data flow. We have already mentioned, Ocelot is used to design API Gateway and Ocelot uses Polly to achieve QoS.   The QoSOptions node contains three important properties.          ExceptionsAllowedBeforeBreaking  This value must greater than 0. It means that the circuit breaker will break after a certain number of exceptions occur. For example:            DurationOfBreak  This value specifies how long the circuit breaker will stay open after it is tripped. The unit of this value is milliseconds. For example: 5000 means 5 seconds            TimeoutValue  This value specifies that a request will automatically be timed out if it takes more than this value. The unit of this value is milliseconds as well. For example: 3000 means 3 seconds.       Tools and Technology used     Visual Studio 2022   .NET 6.0   In Memory Database   Entity Framework   ASP.NET Core Web API   Visual C#   Ocelot and   MMLib.SwaggerForOcelot   Implementation   Step 1: Create solution and projects.      Create a solution name QoS.   Add 2 new web api projects, name – Catalog.API, BFF.Web  Here, BFF.Web project will act as API Gateway.   Step 2: Install nuget packages.      Install following nuget packages in Catalog.API   PM&gt; Install-Package Microsoft.EntityFrameworkCore.InMemory PM&gt; Install-Package Microsoft.EntityFrameworkCore.SqlServer PM&gt; Install-Package Microsoft.EntityFrameworkCore.Tools PM&gt; Install-Package Microsoft.VisualStudio.Web.CodeGeneration.Design      Install following nuget packages in BFF.Web   PM&gt; Install-Package MMLib.SwaggerForOcelot PM&gt; Install-Package Ocelot PM&gt; Install-Package Ocelot.Provider.Polly   Step 3: Organize Catalog.API      Create CatalogItem model in Model folder   CatalogItem.cs   using System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema;  namespace Catalog.API.Model {     public class CatalogItem     {         [Key]         [DatabaseGenerated(DatabaseGeneratedOption.Identity)]         public int Id { get; set; }         public string Name { get; set; }          public string Description { get; set; }          public decimal Price { get; set; }          public int AvailableStock { get; set; }          public int RestockThreshold { get; set; }     } }       Create DbContext class as CatalogContext in Db folder   CatalogContext.cs   using Catalog.API.Model; using Microsoft.EntityFrameworkCore;  namespace Catalog.API.Db {     public class CatalogContext : DbContext     {         public CatalogContext(DbContextOptions&lt;CatalogContext&gt; options) : base(options)         {          }          protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)         {             base.OnConfiguring(optionsBuilder);         }          public DbSet&lt;CatalogItem&gt; CatalogItems { get; set; }     } }       Create SeedDataProvider class in Db folder   SeedDataProvider.cs   using Catalog.API.Model;  namespace Catalog.API.Db {     public class SeedDataProvider     {         public static void Initialize(CatalogContext catalogContext)         {             if(!catalogContext.CatalogItems.Any())             {                 var catalogs = new List&lt;CatalogItem&gt;                 {                     new CatalogItem                     {                         Name = \"T-Shirt\",                         Description = \"Cats Eye T-Shirt\",                         Price = 1000,                         AvailableStock = 100,                         RestockThreshold = 10                     },                      new CatalogItem                     {                         Name = \"Samsung Mobile\",                         Description = \"Samsung A30\",                         Price = 30000,                         AvailableStock = 100,                         RestockThreshold = 5                     },                      new CatalogItem                     {                         Name = \"Meril Beauty Soap\",                         Description = \"Beauty Soap\",                         Price = 40,                         AvailableStock = 500,                         RestockThreshold = 20                     }                 };                  catalogContext.CatalogItems.AddRange(catalogs);                 catalogContext.SaveChanges();             }         }     } }       Modify Program class as follows.   Program.cs    using Catalog.API.Db; using Microsoft.EntityFrameworkCore;  var builder = WebApplication.CreateBuilder(args);  // Add services to the container.  builder.Services.AddControllers();  builder.Services.AddDbContext&lt;CatalogContext&gt;(opt =&gt; opt.UseInMemoryDatabase(\"CatalogDB\"));  // Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle builder.Services.AddEndpointsApiExplorer(); builder.Services.AddSwaggerGen();  var app = builder.Build();  // For Seed data generation using(var scope = app.Services.CreateScope()) {     var services = scope.ServiceProvider;     var db = services.GetRequiredService&lt;CatalogContext&gt;();     SeedDataProvider.Initialize(db); }  // Configure the HTTP request pipeline. if (app.Environment.IsDevelopment()) {     app.UseSwagger();     app.UseSwaggerUI(); }  app.UseHttpsRedirection();  app.UseAuthorization();  app.MapControllers();  app.Run();    Here, the following line is used to configure in memory database   builder.Services.AddDbContext&lt;CatalogContext&gt;(opt =&gt; opt.UseInMemoryDatabase(\"CatalogDB\"));   The following code snippet is used to initialize seed data   using(var scope = app.Services.CreateScope()) {     var services = scope.ServiceProvider;     var db = services.GetRequiredService&lt;CatalogContext&gt;();     SeedDataProvider.Initialize(db); }       Add CatalogItemsController class in Controllers folder as follows.   CatalogItemsController.cs    using Catalog.API.Db; using Catalog.API.Model; using Microsoft.AspNetCore.Mvc; using Microsoft.EntityFrameworkCore;  namespace Catalog.API.Controllers {     [Route(\"api/[controller]\")]     [ApiController]     public class CatalogItemsController : ControllerBase     {         private readonly CatalogContext _context;         private static int _count = 0;          public CatalogItemsController(CatalogContext context)         {             _context = context;         }          // GET: api/CatalogItems         [HttpGet]         public async Task&lt;ActionResult&lt;IEnumerable&lt;CatalogItem&gt;&gt;&gt; GetCatalogItems()         {             _count++;             if(_count &lt;= 3)             {                 // Sleep for 4 seconds                 Thread.Sleep(4000);             }              if (_context.CatalogItems == null)             {                 return NotFound();             }             return await _context.CatalogItems.ToListAsync();         }          // GET: api/CatalogItems/5         [HttpGet(\"{id}\")]         public async Task&lt;ActionResult&lt;CatalogItem&gt;&gt; GetCatalogItem(int id)         {             if (_context.CatalogItems == null)             {                 return NotFound();             }             var catalogItem = await _context.CatalogItems.FindAsync(id);              if (catalogItem == null)             {                 return NotFound();             }              return catalogItem;         }          // PUT: api/CatalogItems/5         // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754         [HttpPut(\"{id}\")]         public async Task&lt;IActionResult&gt; PutCatalogItem(int id, CatalogItem catalogItem)         {             if (id != catalogItem.Id)             {                 return BadRequest();             }              _context.Entry(catalogItem).State = EntityState.Modified;              try             {                 await _context.SaveChangesAsync();             }             catch (DbUpdateConcurrencyException)             {                 if (!CatalogItemExists(id))                 {                     return NotFound();                 }                 else                 {                     throw;                 }             }              return NoContent();         }          // POST: api/CatalogItems         // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754         [HttpPost]         public async Task&lt;ActionResult&lt;CatalogItem&gt;&gt; PostCatalogItem(CatalogItem catalogItem)         {             if (_context.CatalogItems == null)             {                 return Problem(\"Entity set 'CatalogContext.CatalogItems'  is null.\");             }             _context.CatalogItems.Add(catalogItem);             await _context.SaveChangesAsync();              return CreatedAtAction(\"GetCatalogItem\", new { id = catalogItem.Id }, catalogItem);         }          // DELETE: api/CatalogItems/5         [HttpDelete(\"{id}\")]         public async Task&lt;IActionResult&gt; DeleteCatalogItem(int id)         {             if (_context.CatalogItems == null)             {                 return NotFound();             }             var catalogItem = await _context.CatalogItems.FindAsync(id);             if (catalogItem == null)             {                 return NotFound();             }              _context.CatalogItems.Remove(catalogItem);             await _context.SaveChangesAsync();              return NoContent();         }          private bool CatalogItemExists(int id)         {             return (_context.CatalogItems?.Any(e =&gt; e.Id == id)).GetValueOrDefault();         }     } }    Step 4: Organize BFF.Web   In this stage, we are going to configure a gateway to communicate with other services using ocelot.           Create a folder name - Routes.dev in root directory and add the following files.  ocelot.catalog-api.json, ocelot.global.json, ocelot.SwaggerEndPoints.json in Routes.dev folder.            Now modify the json files as follows.       ocelot.catalog-api.json    {   \"Routes\": [     {       \"DownstreamPathTemplate\": \"/{everything}\",       \"DownstreamScheme\": \"https\",       \"SwaggerKey\": \"catalog-api\",       \"DownstreamHostAndPorts\": [         {           \"Host\": \"localhost\",           \"Port\": \"7282\"         }       ],       \"UpstreamPathTemplate\": \"/catalog/{everything}\",       \"UpstreamHttpMethod\": [         \"GET\",         \"POST\",         \"PUT\",         \"DELETE\"       ],        \"QoSOptions\": {         \"ExceptionsAllowedBeforeBreaking\": 2,         \"DurationOfBreak\": 5000,         \"TimeoutValue\": 3000       }      }   ] }    QoSOptions section of the above file basically configure QoS for Catalog service. The above configuration means that if the server does not response for 3 minutes, it will throw timeout exception. If the server throws two exceptions, it will not be accessible for five minutes.   ocelot.global.json    {   \"GlobalConfiguration\": {     \"BaseUrl\": \"https://localhost:7205\"     //\"ServiceDiscoveryProvider\": {      //  \"Host\": \"localhost\",     //  \"Port\": 7205     //}   } }   ocelot.SwaggerEndPoints.json    {   \"SwaggerEndPoints\": [     {       \"Key\": \"bffweb\",       \"TransformByOcelotConfig\": false,       \"Config\": [         {           \"Name\": \"BFF.Web\",           \"Version\": \"1.0\",           \"Url\": \"https://localhost:7205/swagger/v1/swagger.json\"         }       ]     },      {       \"Key\": \"catalog-api\",       \"TransformByOcelotConfig\": true,       \"Config\": [         {           \"Name\": \"Catalog.API\",           \"Version\": \"1.0\",           \"Url\": \"https://localhost:7205/catalog/swagger/v1/swagger.json\"         }       ]     }   ] }     Note: I have added the following code block in CatalogItemController to produce timeout manually.           [HttpGet]         public async Task&lt;ActionResult&lt;IEnumerable&lt;CatalogItem&gt;&gt;&gt; GetCatalogItems()         {             _count++;             if(_count &lt;= 3)             {                 // Sleep for 4 seconds                 Thread.Sleep(4000);             }              if (_context.CatalogItems == null)             {                 return NotFound();             }             return await _context.CatalogItems.ToListAsync();         }    Step 5: Run and test the application   Now run both web projects. In the BFF.Web, select Catalog.API-1.0 from swagger definition (“Select a definition on the top right corner”) and execute the api (CatalogItems) as follows.      When we visit the first time (or quickly second time), it tells us that circuit is breaking for 5000 ms. Look at the console of BFF.Web.      Then, the second time (quickly) it tells us that the circuit is open, and we cannot visit the service for 3 seconds as follows.      After 3 seconds, the service is accessible. If you execute now, you will see the output like below.      Source code  ","categories": ["C#","ASP.NET Core","Web API","Microservices","Ocelot","Poly"],
        "tags": ["csharp","aspnetcore","webapi","microservices","ocelot","poly"],
        "url": "http://localhost:4000/Configure-QoS-in-API-Gateway-using-ocelot-and-Polly/",
        "teaser":null},{
        "title": "How to host .net core NuGet Packages in GitHub Packages Registry",
        "excerpt":"Introduction   GitHub packages registries is most popular now a days. It offers different packages registries for most used package managers, such as NuGet, npm, Docker etc. In this article, I will show you how to host a .net core NuGet Package in GitHub Packages Registry.   Tools and Technology uses     Visual Studio 2022   .NET 6   Visual C#   GitHub   Implementation   Step 1: Create a personal access token (PAT) from GitHub      Login into you GitHub   Go to settings -&gt; Developer Settings -&gt; Personal Access Tokens   Click “Generate new token” button   Type Note for the token, expiration days        Select scope for the token – here I have selected repo, write:packages, delete:packages as shown below.              Now click “Generate Toke” at the bottom of the panel   Copy the token and store the token for further use because you cannot find it later      Step – 2: Add Nuget Source in visual studio     Type the following command to add source   dotnet nuget add source https://nuget.pkg.github.com/mahedee/index.json --name github-mahedee --username mahedee --password &lt;Your personal Access Token&gt;           You will see a source is added in C:\\Users\\mahedee\\AppData\\Roaming\\NuGet\\NuGet.Config file       Optional: You can also add source from visual studio Tools -&gt; Options -&gt; NuGet Package Manager -&gt; Package Sources   Restart visual studio to get new nuget package source   Step – 3: Create a class library to publish in GitHub Packages     Create a class library name – ‘CryptoEngine”   Create a class CryptoGenerator as follows    using System.Security.Cryptography; using System.Text;  namespace CryptoEngine {     public class CryptoGenerator     {         public static string GenerateSha256Hash(string plainText)         {             // Create a SHA256                using (SHA256 sha256Hash = SHA256.Create())             {                 // ComputeHash - returns byte array                   byte[] bytes = sha256Hash.ComputeHash(Encoding.UTF8.GetBytes(plainText));                  // Convert byte array to a string                    StringBuilder builder = new StringBuilder();                 for (int i = 0; i &lt; bytes.Length; i++)                 {                     builder.Append(bytes[i].ToString(\"x2\"));                 }                 return builder.ToString();             }         }     } }       Click right button on class library project -&gt; Package -&gt; General   Mark “Produce a package file during build operations”   Type Package ID, Package Version, Authors, Company, Product, Description   Type repository URL – A github repository and save   Now you will see the csproj file as follows   CryptoEngine.csproj   &lt;Project Sdk=\"Microsoft.NET.Sdk\"&gt;    &lt;PropertyGroup&gt;     &lt;TargetFramework&gt;net6.0&lt;/TargetFramework&gt;     &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;     &lt;Nullable&gt;enable&lt;/Nullable&gt;     &lt;GeneratePackageOnBuild&gt;True&lt;/GeneratePackageOnBuild&gt;     &lt;PackageId&gt;Mahedee.CryptoEngine&lt;/PackageId&gt;     &lt;Version&gt;1.0.0&lt;/Version&gt;     &lt;Authors&gt;Mahedee hasan&lt;/Authors&gt;     &lt;Company&gt;Mahedee.NET&lt;/Company&gt;     &lt;Product&gt;CryptoEngine&lt;/Product&gt;     &lt;Description&gt;Chipper text generator&lt;/Description&gt;     &lt;RepositoryUrl&gt;https://github.com/mahedee/public-packages&lt;/RepositoryUrl&gt;   &lt;/PropertyGroup&gt;  &lt;/Project&gt;    Step 4: Create a NuGet Package      Click right button on project and select Pack   A NuGet package will be generated in bin/Debug folder – In this case the nuget package name is Mahedee.CryptoEngine.1.0.0.nupkg   Or, Go to the directory where .csproj file exists and right the following command to generate nuget package   dotnet pack   Step 5: Push NuGet package to GitHub Package Registry      Go to the directory where package generated – bin/Debug in this case.   Type following command   dotnet nuget push .\\Mahedee.CryptoEngine.1.0.0.nupkg --api-key &lt;your github access token&gt; --source github-mahedee   Here github-mahedee is my nuget source name for visual studio. Already added in step – 2.      Now login to your Github account and go to Packages tab, you will see a package is uploaded. In this case package name is Mahedee.CryptoEngine   Step 6: Use already uploaded package in a project     If Nuget package source is not added, add it using step – 2   Go to package manager console   Select Package Source as “github-mahedee” and type following command   PM&gt; Install-Package Mahedee.CryptoEngine      Or right button on project -&gt; Manage Nuget Packages   Select Package source “github-mahedee”   Browse and install package Mahedee.CryptoEngine   Source code  ","categories": ["C#","ASP.NET Core","GitHub","NuGet","Packages"],
        "tags": ["csharp","aspnetcore","github","nuget","packages"],
        "url": "http://localhost:4000/How-to-host-dot-net-core-NuGet-Packages-in-GitHub-Packages-Registry/",
        "teaser":null},{
        "title": "Service Discovery using Eureka, Ocelot and ASP.net core",
        "excerpt":"Introduction   Service discovery is a process in microservice architecture that enables dynamic registration and lookup of services in a network environment. It allows microservices to discover each other, establish communication, and collaborate to complete a task. This helps to improve resilience, scalability, and flexibility of microservice-based systems. In this article, I will show you how to configure service discovery with ocelot in API gateway.   Service discovery implementations within microservices architecture discovery includes both:      a central server (or servers) that maintain a global view of addresses.   clients that connect to the central server to update and retrieve addresses.   It is always hard to manage lots of micro services as well as had to maintain tens or hundreds of LB’s and DNS records. In a microservice architecture, service lifespan is measured in seconds and minutes. With microservices, addresses are added and changed constantly as new hosts are added, ports are changed, or services are terminated. The highly transient nature of microservices is again pushing the limits of today’s technologies, and we see different organizations adopting different strategies.      Fig – Real world problem (Collected from internet)      Fig – Service discovery pattern (Collected from internet)   What is Eureka Server?  Eureka is a popular, open-source service registry software used to implement the service discovery pattern in microservice architecture. It is actually Netflix OSS product, and spring cloud offers a declarative way to register and invoke services by Java annotation. It provides a centralized registry of microservices, enabling services to dynamically discover each other without hardcoding the addresses. In a typical setup, microservices register themselves with the Eureka server, providing information such as their hostname and IP address. Other microservices can then query the Eureka server to discover the endpoint of the microservice they need to communicate with.  Eureka also provides some additional features such as load balancing, failover, and health checks to ensure high availability and reliability of the microservices.   Implementation   Let’s implement Service Discovery using Ocelot and asp.net core   Tools and Technologies Used     Visual Studio 2022   .NET 6.0   ASP.NET Core Web API   Visual C#   Eureka   Step 1: Create solution and projects      Create a solution name SDDemo.sln   Add four Web Api Projects name BFF.Web, Customer.API, Location.API, Product.API   Here BFF.Web is an api gateway   Step 2: Install nuget packages      Install following nuget packages in BFF.Web project    PM&gt; Install-Package MMLib.SwaggerForOcelot PM&gt; Install-Package Ocelot PM&gt; Install-Package Ocelot.Provider.Eureka PM&gt; Install-Package Ocelot.Provider.Polly PM&gt; Install-Package Steeltoe.Discovery.Eureka       Install following nuget packages in Customer.API project   PM&gt; Install-Package Steeltoe.Discovery.ClientCore PM&gt; Install-Package Steeltoe.Discovery.Eureka      Install following nuget packages in Location.API project   PM&gt; Install-Package Steeltoe.Discovery.ClientCore PM&gt; Install-Package Steeltoe.Discovery.Eureka      Install following nuget packages in Product.API project   PM&gt; Install-Package Steeltoe.Discovery.ClientCore PM&gt; Install-Package Steeltoe.Discovery.Eureka   Step 3: Organize Customer.API projects      Register Eureka and modify program.cs as follows.   Program.cs    using Steeltoe.Discovery.Client; using Steeltoe.Discovery.Eureka;  var builder = WebApplication.CreateBuilder(args);  // Add services to the container.  builder.Services.AddServiceDiscovery(o =&gt; o.UseEureka());  builder.Services.AddControllers(); // Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle builder.Services.AddEndpointsApiExplorer(); builder.Services.AddSwaggerGen();  var app = builder.Build();  // Configure the HTTP request pipeline. if (app.Environment.IsDevelopment()) {     app.UseSwagger();     app.UseSwaggerUI(); }  //app.UseHttpsRedirection();  app.UseAuthorization();  app.MapControllers();  app.Run();       Create a controller name CustomerController in Controllers folder and modify get method as follows.   CustomerController.cs    using Microsoft.AspNetCore.Mvc;  // For more information on enabling Web API for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860  namespace Customer.API.Controllers {     [Route(\"api/[controller]\")]     [ApiController]     public class CustomerController : ControllerBase     {         // GET: api/&lt;CustomerController&gt;         [HttpGet(\"GetAll\")]         public IEnumerable&lt;string&gt; Get()         {             return new string[] { \"Md. Mahedee Hasan\", \"Khaleda Islam\", \"Tahiya Hasan\", \"Humaira Hasan\" };         }      } }       Modify appsettings.json to connect to the service registry.   appsettings.json    {   \"Logging\": {     \"LogLevel\": {       \"Default\": \"Information\",       \"Microsoft.AspNetCore\": \"Warning\",       \"Microsoft.Hosting.Lifetime\": \"Information\"     }   },     \"Spring\": {     \"Application\": {       \"Name\": \"SERVICE.CUSTOMERAPI\"     }   },   \"Eureka\": {     \"Client\": {       \"ServiceUrl\": \"http://localhost:8761/eureka/\",       \"ValidateCertificates\": false,       \"ShouldRegisterWithEureka\": true     },      \"Instance\": {       //\"port\": 9001,       \"NonSecurePort\": 9002,       \"HostName\": \"localhost\",       \"InstanceId\": \"Customer.API,Port:9002\",       \"StatusPageUrlPath\": \"/swagger/index.html\",       \"HealthCheckUrlPath\": \"/api/values/healthcheck\"       //\"StatusPageUrlPath\": \"/api/values/status\"     },      \"AllowedHosts\": \"*\"   }  }    Step 4: Organize Location.API project      Register Eureka and modify program.cs as follows.   Program.cs    using Steeltoe.Discovery.Client; using Steeltoe.Discovery.Eureka;  var builder = WebApplication.CreateBuilder(args);  // Add services to the container.  //builder.Services.AddDiscoveryClient(builder.Configuration); builder.Services.AddServiceDiscovery(o =&gt; o.UseEureka());  builder.Services.AddControllers(); // Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle builder.Services.AddEndpointsApiExplorer(); builder.Services.AddSwaggerGen();  var app = builder.Build();  // Configure the HTTP request pipeline. if (app.Environment.IsDevelopment()) {     app.UseSwagger();     app.UseSwaggerUI(); }  //app.UseHttpsRedirection();  app.UseAuthorization();  app.MapControllers();  app.Run();       Create a controller name DistrictController in Controllers folder and modify get method as follows.   DistrictController.cs    using Microsoft.AspNetCore.Mvc;  // For more information on enabling Web API for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860  namespace Location.API.Controllers {     [Route(\"api/[controller]\")]     [ApiController]     public class DistrictController : ControllerBase     {         // GET: api/&lt;DistrictController&gt;         [HttpGet(\"GetAll\")]         public IEnumerable&lt;string&gt; Get()         {             return new string[] { \"Dhaka\", \"Chittagong\", \"Chandpur\", \"Barisal\", \"Noakhali\" };         }      } }       Modify appsettings.json to connect to the service registry.   appsettings.json   {   \"Logging\": {     \"LogLevel\": {       \"Default\": \"Information\",       \"Microsoft.AspNetCore\": \"Warning\",       \"Microsoft.Hosting.Lifetime\": \"Information\"     }   },     \"Spring\": {     \"Application\": {       \"Name\": \"SERVICE.LOCATIONAPI\"     }   },   \"Eureka\": {     \"Client\": {       ////\"serviceUrl\": \"http://192.168.0.107:8761/eureka/\",       \"ServiceUrl\": \"http://localhost:8761/eureka/\",       \"ValidateCertificates\": false,       \"ShouldRegisterWithEureka\": true     },      \"Instance\": {       \"NonSecurePort\": 9001,       \"HostName\": \"localhost\",       \"InstanceId\": \"Location.API,Port:9001\",       \"StatusPageUrlPath\": \"/swagger/index.html\",       \"HealthCheckUrlPath\": \"/api/values/healthcheck\"       //\"StatusPageUrlPath\": \"/api/values/status\"     },      \"AllowedHosts\": \"*\"   }  }    Step 5: Organize Product.API      Register Eureka and modify program.cs as follows.   Program.cs    using Steeltoe.Discovery.Client; using Steeltoe.Discovery.Eureka;  var builder = WebApplication.CreateBuilder(args);  // Add services to the container.  //builder.Services.AddDiscoveryClient(builder.Configuration); builder.Services.AddServiceDiscovery(o =&gt; o.UseEureka());  builder.Services.AddControllers(); // Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle builder.Services.AddEndpointsApiExplorer(); builder.Services.AddSwaggerGen();  var app = builder.Build();  // Configure the HTTP request pipeline. if (app.Environment.IsDevelopment()) {     app.UseSwagger();     app.UseSwaggerUI(); }  //app.UseHttpsRedirection();  app.UseAuthorization();  app.MapControllers();  app.Run();       Create a controller name ProductsController in Controllers folder and modify get method as follows.   ProductsController.cs    using Microsoft.AspNetCore.Mvc;  // For more information on enabling Web API for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860  namespace Product.API.Controllers {     [Route(\"api/[controller]\")]     [ApiController]     public class ProductsController : ControllerBase     {         // GET: api/&lt;ProductsController&gt;         [HttpGet(\"GetAll\")]         public IEnumerable&lt;string&gt; Get()         {             return new string[] { \"T-Shirt\", \"Casual Shirt\", \"Socks\", \"Shampo\", \"Business Bag\" };         }     } }       Modify appsettings.json to connect to the service registry.   appsettings.json    {   \"Logging\": {     \"LogLevel\": {       \"Default\": \"Information\",       \"Microsoft.AspNetCore\": \"Warning\"     }   },   \"AllowedHosts\": \"*\",      \"Spring\": {     \"Application\": {       \"Name\": \"SERVICE.PRODUCTAPI\"     }   },   \"Eureka\": {     \"Client\": {       \"ServiceUrl\": \"http://localhost:8761/eureka/\",       \"ValidateCertificates\": false,       \"ShouldRegisterWithEureka\": true     },      \"Instance\": {       //\"port\": 9001,       \"NonSecurePort\": 9003,       \"HostName\": \"localhost\",       \"InstanceId\": \"Product.API,Port:9003\",       \"StatusPageUrlPath\": \"/swagger/index.html\",       \"HealthCheckUrlPath\": \"/api/values/healthcheck\"       //\"StatusPageUrlPath\": \"/api/values/status\"     }   } }    Step 6: Organize BFF.Web   In this stage, we are going to configure a gateway to communicate with other services using ocelot.           Create a folder name - Routes.dev in root directory and add the following files. ocelot.customer.api.json, ocelot.global.json, ocelot.location.api.json, ocelot.product.api.json, ocelot.SwaggerEndPoints.json in Routes.dev folder.            Now modify the json files as follows.       ocelot.customer.api.json    {   \"Routes\": [     {       \"DownstreamPathTemplate\": \"/{everything}\",       \"DownstreamScheme\": \"http\",       \"SwaggerKey\": \"customer\",       \"UseServiceDiscovery\": true,       \"ServiceName\": \"SERVICE.CUSTOMERAPI\",       \"UpstreamPathTemplate\": \"/customer/{everything}\",       \"UpstreamHttpMethod\": [         \"GET\",         \"POST\",         \"PUT\",         \"DELETE\"       ],        /*         LeastConnection - tracks which services are dealing with requests and sends new requests to service with least existing requests. The algorythm state is not distributed across a cluster of Ocelot’s.         RoundRobin - loops through available services and sends requests. The algorythm state is not distributed across a cluster of Ocelot’s.         NoLoadBalancer - takes the first available service from config or service discovery.         CookieStickySessions - uses a cookie to stick all requests to a specific server       */        \"LoadBalancerOptions\": {         \"Type\": \"LeastConnection\"       }      }   ] }    ocelot.location.api.json   {   \"Routes\": [     {       \"DownstreamPathTemplate\": \"/{everything}\",       \"DownstreamScheme\": \"http\",       \"SwaggerKey\": \"location\",       \"UseServiceDiscovery\": true,       \"ServiceName\": \"SERVICE.LOCATIONAPI\",       \"UpstreamPathTemplate\": \"/location/{everything}\",       \"UpstreamHttpMethod\": [         \"GET\",         \"POST\",         \"PUT\",         \"DELETE\"       ],        \"LoadBalancerOptions\": {         \"Type\": \"LeastConnection\"       }      }   ] }    ocelot.product.api.json   {   \"Routes\": [     {       \"DownstreamPathTemplate\": \"/{everything}\",       \"DownstreamScheme\": \"http\",       \"SwaggerKey\": \"product\",       \"UseServiceDiscovery\": true,       \"ServiceName\": \"SERVICE.PRODUCTAPI\",       \"UpstreamPathTemplate\": \"/product/{everything}\",       \"UpstreamHttpMethod\": [         \"GET\",         \"POST\",         \"PUT\",         \"DELETE\"       ],         /*         LeastConnection - tracks which services are dealing with requests and sends new requests to service with least existing requests. The algorythm state is not distributed across a cluster of Ocelot’s.         RoundRobin - loops through available services and sends requests. The algorythm state is not distributed across a cluster of Ocelot’s.         NoLoadBalancer - takes the first available service from config or service discovery.         CookieStickySessions - uses a cookie to stick all requests to a specific server       */        \"LoadBalancerOptions\": {         \"Type\": \"LeastConnection\"       }      }   ] }    ocelot.global.json    {   \"GlobalConfiguration\": {     \"RequestIdKey\": \"OcRequestId\",     \"DownstreamScheme\": \"http\",     \"UseServiceDiscovery\": true,     \"ServiceDiscoveryProvider\": {       \"Host\": \"localhost\",       \"Port\": 8001,       //Type can be Consul, Eureka       \"Type\": \"Eureka\"     }   } }    ocelot.SwaggerEndPoints.json   {   \"SwaggerEndPoints\": [     {       \"Key\": \"bff.web\",       \"TransformByOcelotConfig\": false,       \"Config\": [         {           \"Name\": \"BFF.Web\",           \"Version\": \"1.0\",           \"Url\": \"http://localhost:8001/swagger/v1/swagger.json\"         }       ]     },     {       \"Key\": \"location\",       \"TransformByOcelotConfig\": true,       \"Config\": [         {           \"Name\": \"Location.API\",           \"Version\": \"1.0\",           \"Url\": \"http://localhost:8001/location/swagger/v1/swagger.json\"         }       ]     },     {       \"Key\": \"customer\",       \"TransformByOcelotConfig\": true,       \"Config\": [         {           \"Name\": \"Customer.API\",           \"Version\": \"1.0\",           \"Url\": \"http://localhost:8001/customer/swagger/v1/swagger.json\"         }       ]     },     {       \"Key\": \"product\",       \"TransformByOcelotConfig\": true,       \"Config\": [         {           \"Name\": \"Product.API\",           \"Version\": \"1.0\",           \"Url\": \"http://localhost:8001/product/swagger/v1/swagger.json\"         }       ]     }   ] }       Add AlterUpstream class in Config folder   AlterUpstream.cs    using Newtonsoft.Json; using Newtonsoft.Json.Linq;  namespace BFF.Web.Config {     public class AlterUpstream     {         public static string AlterUpstreamSwaggerJson(HttpContext context, string swaggerJson)         {             var swagger = JObject.Parse(swaggerJson);             // ... alter upstream json             return swagger.ToString(Formatting.Indented);         }     } }       Modify Program.cs file as follows   Program.cs    using BFF.Web.Config; using MMLib.SwaggerForOcelot.DependencyInjection; using Ocelot.DependencyInjection; using Ocelot.Middleware; using Ocelot.Provider.Eureka; using Ocelot.Provider.Polly; using Steeltoe.Discovery.Client; using Steeltoe.Discovery.Eureka;  var builder = WebApplication.CreateBuilder(args);  // Add services to the container.  var routes = \"\"; #if DEBUG routes = \"Routes.dev\"; #else routes = \"Routes.prod\"; #endif ;  builder.Configuration.AddOcelotWithSwaggerSupport(options =&gt; {     options.Folder = routes; });  builder.Services.AddOcelot(builder.Configuration).AddEureka().AddPolly();  builder.Services.AddSwaggerForOcelot(builder.Configuration);  // Register service discovery - Eureka builder.Services.AddServiceDiscovery(o =&gt; o.UseEureka());  builder.Host.ConfigureAppConfiguration((hostingContext, config) =&gt; {     config.SetBasePath(Directory.GetCurrentDirectory())     .AddJsonFile(\"appsettings.json\", optional: false, reloadOnChange: true)     .AddJsonFile($\"appsettings.local.json\", optional: true, reloadOnChange: true)     .AddJsonFile($\"appsettings.{hostingContext.HostingEnvironment.EnvironmentName}.json\", optional: true)     .AddOcelot(routes, builder.Environment)     .AddEnvironmentVariables(); });  builder.Services.AddControllers(); // Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle builder.Services.AddEndpointsApiExplorer(); builder.Services.AddSwaggerGen();  var app = builder.Build();  // Configure the HTTP request pipeline. if (app.Environment.IsDevelopment()) {     app.UseSwagger();     //app.UseSwaggerUI(); }    //app.UseHttpsRedirection();  app.UseAuthorization();  app.UseSwaggerForOcelotUI(options =&gt; {     options.PathToSwaggerGenerator = \"/swagger/docs\";     options.ReConfigureUpstreamSwaggerJson = AlterUpstream.AlterUpstreamSwaggerJson;  }).UseOcelot().Wait();  app.MapControllers();  app.Run();       Now modify appsettings.json for BFF.Web   Appsettings.json    {   \"Logging\": {     \"LogLevel\": {       \"Default\": \"Information\",       \"Microsoft.AspNetCore\": \"Warning\",       \"Microsoft.Hosting.Lifetime\": \"Information\"     }   },     \"Spring\": {     \"Application\": {       \"Name\": \"SERVICE.BFF.Web\"     }   },   \"Eureka\": {     \"Client\": {       \"ServiceUrl\": {         \"DefaultZone\": \"http://localhost:8761/eureka/\"       },       \"ValidateCertificates\": false,       \"ShouldRegisterWithEureka\": true     },      \"Instance\": {       \"NonSecurePort\": 8001,       \"HostName\": \"localhost\",       \"InstanceId\": \"BFF.Web\",       \"StatusPageUrlPath\": \"/swagger/index.html\"     },      \"AllowedHosts\": \"*\"   }  }    Step 7: Run Eureka server on docker.      Run the following command on powershell to run eureka server   docker run --rm -it -p 8761:8761 steeltoeoss/eureka-server      Now open your browser and visit http://localhost:8761/   Step 8: Now run the applications     Run all projects at a time   Browse other services throw BFF.Web – In this case your are calling services by service name not host name.   You will see Eureka server as follows .      Source code  ","categories": ["C#","ASP.NET Core","Eureka","Microservices","Software Architecture"],
        "tags": ["csharp","aspnetcore","eureka","microservices","softwarearchitecture"],
        "url": "http://localhost:4000/Service-Discovery-using-Eureka-Ocelot-and-ASPnet-core/",
        "teaser":null},{
        "title": "How to handle Idempotentcy in distributed system using asp.net core",
        "excerpt":"Introduction   In a distributed application, idempotent operation or idempotency refers to the property of an operation such that multiple identical requests have the same effect as a single request. This is useful in situations where a request may be lost or a response may be delayed, as it allows the client to retry the request without worrying about producing unintended side effects.   For example, consider a distributed system that allows users to transfer money between accounts. If a client sends a request to transfer $100 from account A to account B, but the request is lost before it is received by the server, the client may not know whether the transfer was successful or not. If the transfer operation is idempotent, the client can simply retry the request, and the server will ensure that the transfer is performed only once, regardless of the number of times the request is received.   There are several approaches to solving idempotency in distributed systems:   1. Versioning: As mentioned earlier, versioning is a technique where the server stores a version number for each resource and only performs an operation if the version number has not changed since the client’s last request. This allows the server to detect and ignore duplicate requests.   2. Request IDs:   Another approach is to assign a unique request ID to each request and store a record of all request IDs that have been processed by the server. If the server receives a request with a request ID that it has already processed, it can simply ignore the request.   3. Locking:   In some cases, it may be necessary to use locks to ensure that only one instance of an operation is in progress at a time. For example, a distributed lock could be used to prevent multiple clients from concurrently transferring money from the same account.   4. State reconciliation:   In a distributed system, it is possible for the state of a resource to become inconsistent due to lost or delayed requests. One way to solve this problem is to use state reconciliation, where the server periodically checks the state of all resources and reconciles any inconsistencies.   In this article I will show you how to handle idempotent operation using asp.net core. Here, I have created a request Id (idempotencyKey here) and check whether it is already exists within a time period.   Implementation:  Let’s implement idempotency using asp.net core.   Tools and Technologies used:     Visual Studio 2022   Visual C#   SQL Server   Redis   .NET 6.0   ASP.NET Core Web API   Step 1: Setup and run Redis in docker container.      Run Redis docker image using the following command.   docker run -d -p 6379:6379 --name myredis --network redisnet redis      You can use Redis desktop manager as client of Redis   Step 2: Create solution and project      Create a solution name IdempotentDemo using visual studio   Create a new web api project name Accounting.API   Step 3: Install nuget packages      Install following nuget packages in Accounting.API   PM&gt; Install-Package Microsoft.EntityFrameworkCore PM&gt; Install-Package Microsoft.EntityFrameworkCore.SqlServer PM&gt; Install-Package Microsoft.EntityFrameworkCore.Tools PM&gt; Install-Package Microsoft.Extensions.Caching.StackExchangeRedis   Step 4: Add connection string for SQL server and Redis      Modify appsettings.json as follows   appsettings.json   {   \"Logging\": {     \"LogLevel\": {       \"Default\": \"Information\",       \"Microsoft.AspNetCore\": \"Warning\"     }   },   \"AllowedHosts\": \"*\",   \"ConnectionStrings\": {     \"AccountingDBConnection\": \"Server=localhost;Database=AccountingDB;User Id=sa;Password=yourdbserverpassword;\"   },   //Redis Server   \"Redis\": {     \"Server\": \"localhost:6379\"   } }    Step 5: Create model TransactionDetails class in Models folder   TransactionDetails.cs    namespace Accounting.API.Models {     public class TransactionDetails     {         public Int64 Id { get; set; }          // Master transaction Id         public Int64 TransactionId { get; set; }                  // Id against GL Code         public int AccountId { get; set; }           public decimal DrAmount { get; set; }         public decimal CrAmount { get; set; }          // Cash = 1, Cheque = 2         public int TransactionType { get; set; }          // Any note         public string Description { get; set; }      } }    Step 6: Create DbContext class in Db folder as follows.   AccountingContext.cs   using Accounting.API.Models; using Microsoft.EntityFrameworkCore;  namespace Accounting.API.Db {     public class AccountingContext : DbContext     {         public AccountingContext(DbContextOptions&lt;AccountingContext&gt; options) : base(options)         {          }          public DbSet&lt;TransactionDetails&gt; TransactionDetails { get; set; }     } }    Step 7: Register Redis Caching server and SQL server in Program.cs file as follows.   Program.cs    using Accounting.API.Db; using Microsoft.EntityFrameworkCore;  var builder = WebApplication.CreateBuilder(args);  // Add services to the container.  // Configuration for SQL Server connection builder.Services.AddDbContext&lt;AccountingContext&gt;(options =&gt; {     options.UseSqlServer(builder.Configuration.GetConnectionString(\"AccountingDBConnection\")); });   // Register Redis caching server builder.Services.AddStackExchangeRedisCache(options =&gt; {     options.Configuration = builder.Configuration[\"Redis:Server\"]; });  builder.Services.AddControllers(); // Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle builder.Services.AddEndpointsApiExplorer(); builder.Services.AddSwaggerGen();  var app = builder.Build();  // Configure the HTTP request pipeline. if (app.Environment.IsDevelopment()) {     app.UseSwagger();     app.UseSwaggerUI(); }  app.UseHttpsRedirection();  app.UseAuthorization();  app.MapControllers();  app.Run();    Step 8: Add Migration     Got to package manager console and run the following command   PM&gt; Add-Migration init-mig PM&gt; Update-Database -Verbose   Step 9: Create Hashgenerator class in Utility folder to create hash.   HashGenerator.cs   using System.Security.Cryptography; using System.Text;  namespace Accounting.API.Utility {     public class HashGenerator     {          public static string GetHash(string plainText)         {             string hashText = string.Empty;             hashText = ComputeSha256Hash(plainText);             return hashText;         }          static string ComputeSha256Hash(string rawData)         {             // Create a SHA256                using (SHA256 sha256Hash = SHA256.Create())             {                 // ComputeHash - returns byte array                   byte[] bytes = sha256Hash.ComputeHash(Encoding.UTF8.GetBytes(rawData));                  // Convert byte array to a string                    StringBuilder builder = new StringBuilder();                 for (int i = 0; i &lt; bytes.Length; i++)                 {                     builder.Append(bytes[i].ToString(\"x2\"));                 }                 return builder.ToString();             }         }     } }    Step 10: Create TransactionDetailsController  controller class in Controllers folder as follows.   TransactionDetailsController.cs    using Accounting.API.Db; using Accounting.API.Models; using Accounting.API.Utility; using Microsoft.AspNetCore.Mvc; using Microsoft.EntityFrameworkCore; using Microsoft.Extensions.Caching.Distributed; using Newtonsoft.Json; using System.Text;  namespace Accounting.API.Controllers {     [Route(\"api/[controller]\")]     [ApiController]     public class TransactionDetailsController : ControllerBase     {         private readonly AccountingContext _context;         private readonly IDistributedCache _distributedCache;          public TransactionDetailsController(AccountingContext context, IDistributedCache distributedCache)         {             _context = context;             _distributedCache = distributedCache;          }          // GET: api/TransactionDetails         [HttpGet]         public async Task&lt;ActionResult&lt;IEnumerable&lt;TransactionDetails&gt;&gt;&gt; GetTransactionDetails()         {             if (_context.TransactionDetails == null)             {                 return NotFound();             }             return await _context.TransactionDetails.ToListAsync();         }          // GET: api/TransactionDetails/5         [HttpGet(\"{id}\")]         public async Task&lt;ActionResult&lt;TransactionDetails&gt;&gt; GetTransactionDetails(long id)         {             if (_context.TransactionDetails == null)             {                 return NotFound();             }             var transactionDetails = await _context.TransactionDetails.FindAsync(id);              if (transactionDetails == null)             {                 return NotFound();             }              return transactionDetails;         }          // PUT: api/TransactionDetails/5         // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754         [HttpPut(\"{id}\")]         public async Task&lt;IActionResult&gt; PutTransactionDetails(long id, TransactionDetails transactionDetails)         {             if (id != transactionDetails.Id)             {                 return BadRequest();             }              _context.Entry(transactionDetails).State = EntityState.Modified;              try             {                 await _context.SaveChangesAsync();             }             catch (DbUpdateConcurrencyException)             {                 if (!TransactionDetailsExists(id))                 {                     return NotFound();                 }                 else                 {                     throw;                 }             }              return NoContent();         }          // POST: api/TransactionDetails         // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754         [HttpPost]         public async Task&lt;ActionResult&lt;TransactionDetails&gt;&gt; PostTransactionDetails(TransactionDetails transactionDetails)         {             // Create a hash key using transaction id, dr and cr amount             string idempotencyKey = HashGenerator.GetHash(transactionDetails.TransactionId.ToString()                  + transactionDetails.DrAmount.ToString() + transactionDetails.CrAmount.ToString());               // check hash key is exists in the redis cache             var isCached = await _distributedCache.GetAsync(idempotencyKey).ConfigureAwait(false);              if(isCached is not null)             {                 // if same value is already exists in the cache then return existing value.                  var decodedResult = JsonConvert.DeserializeObject&lt;TransactionDetails&gt;(Encoding.UTF8.GetString(isCached));                 //var employeeDecodedResult = _mapper.Map&lt;EmployeeResponseDTO&gt;(decodedResult);                 return decodedResult;             }              // if input object is null return with a problem             if (_context.TransactionDetails == null)             {                 return Problem(\"Entity set 'AccountingContext.TransactionDetails'  is null.\");             }               // Save into database             _context.TransactionDetails.Add(transactionDetails);             await _context.SaveChangesAsync();              // Set value into cache after save             // value will be removed after 10 mins             // It will be removed after 2 mins, if it is not requested within 2 mins              var options = new DistributedCacheEntryOptions().SetAbsoluteExpiration(DateTime.Now.AddMinutes(10)).SetSlidingExpiration(TimeSpan.FromMinutes(2));             await _distributedCache.SetAsync(idempotencyKey,                 Encoding.UTF8.GetBytes(JsonConvert.SerializeObject(transactionDetails)), options);               return CreatedAtAction(\"GetTransactionDetails\", new { id = transactionDetails.Id }, transactionDetails);         }          // DELETE: api/TransactionDetails/5         [HttpDelete(\"{id}\")]         public async Task&lt;IActionResult&gt; DeleteTransactionDetails(long id)         {             if (_context.TransactionDetails == null)             {                 return NotFound();             }             var transactionDetails = await _context.TransactionDetails.FindAsync(id);             if (transactionDetails == null)             {                 return NotFound();             }              _context.TransactionDetails.Remove(transactionDetails);             await _context.SaveChangesAsync();              return NoContent();         }          private bool TransactionDetailsExists(long id)         {             return (_context.TransactionDetails?.Any(e =&gt; e.Id == id)).GetValueOrDefault();         }     } }    Step 10: Now run application and save data using swagger UI.      Try to save same data twice or more   Check database, you will see data will save one once   Now look at the PostTransactionDetails class. Here I have created idempotencyKey (a hash key) using transaction id, debit amount and credit amount. In this case, idempotencyKey is actually request key. When we save any data, we are storing a request key of corresponding input in redis cache. Whenever, we are going to save data we are checking hash key of existing input. If it is existing then it will not save and consider as idempotent operation.   DistributedCacheEntryOptions           SetAbsoluteExpiration: Here you can set the expiration time of the cached object.            SetSlidingExpiration: This is similar to Absolute Expiration. It expires as a cached object if it not being requested for a defined amount of time period. Note that Sliding Expiration should always be set lower than the absolute expiration       Note: In distributed caching, cache is not stored in to an individual web server’s memory. Cache data is centrally managed and the same data is available to all the app servers. The distributed caching has several advantages, as shown below. The cache is stored centrally, so all the users get the same data and data is not dependent on which web server handles its request. The cache data is not impacted if any problem happens with the web server; i.e.,  restart, new server is added, a server is removed.   Source code  ","categories": ["C#","ASP.NET Core","Redis","Microservices","Software Architecture"],
        "tags": ["csharp","aspnetcore","redis","Microservices","softwarearchitecture"],
        "url": "http://localhost:4000/How-to-handle-Idempotentcy-in-distributed-system-using-aspnet-core/",
        "teaser":null},{
        "title": "What and why IValidatebleObject in C#",
        "excerpt":"IValidatableObject is an interface in C# that defines a method named Validate, which enables an object to perform custom validation logic. When you implement this interface in a class, you can add custom validation logic to that class.   The Validate method defined in IValidatableObject takes no parameters and returns an IEnumerable. The method can perform any validation logic and return an enumerable collection of ValidationResult objects that represent the validation errors or warnings. If the object is valid, the Validate method should return an empty collection.   The Validate method is called automatically when you use the Validator class to validate an object. You can also call the Validate method directly if you want to perform custom validation logic.   Here is an example of a class that implements IValidatableObject.   Step 1: Create a console application and a class name Employee as follows.   Employee.cs    using System.ComponentModel.DataAnnotations;  namespace IValidatebleObjectDemo {     public class Employee : IValidatableObject     {         public int Id { get; set; }         public string Name { get; set; }         public bool Status { get; set; }         public int DesignationId { get; set; }          public IEnumerable&lt;ValidationResult&gt; Validate(ValidationContext validationContext)         {             if(Id &lt;= 0)             {                 yield return new ValidationResult(\"Employee Id is a required filed!\", new[] {\"Id\"});             }              if (String.IsNullOrEmpty(Name))             {                 yield return new ValidationResult(\"Employee Name is a required field!\", new[] { \"Name\" });             }         }     } }    The above code defines an Employee class that implements the IValidatableObject interface in C#. The Employee class has four properties - Id, Name, Status, and DesignationId.   The Validate method is used to perform custom validation logic on the Employee object. The method checks if the Id property is less than or equal to zero and if the Name property is null or empty. If either of these conditions is true, the method returns a ValidationResult object that contains an error message and the name of the property that failed validation.   The ValidationResult class is part of the System.ComponentModel.DataAnnotations namespace, which provides a set of validation attributes and classes that can be used to validate data in a .NET application. In this case, the ValidationResult class is used to represent the result of a validation check, and the yield return statement is used to return the ValidationResult object to the caller. By using yield return instead of adding the validation results to a collection and returning the collection at the end of the method, the Validate method can return the validation results one at a time as they are generated, without needing to generate the entire sequence of results up front.   Step 2: Validate Employee class using the following code.   Program.cs    using IValidatebleObjectDemo; using System.ComponentModel.DataAnnotations;  var result = new List&lt;ValidationResult&gt;(); bool validateAllProperties = false; bool isValid = false;  var employee = new Employee() {     Id = 1,     Name = \"Mahedee Hasan\",     Status = true,     DesignationId = 1 };   isValid = Validator.TryValidateObject(employee, new ValidationContext(employee, null, null),      result, validateAllProperties);  var employee2 = new Employee() {     Id = -1,     Name = null,     Status = true,     DesignationId = 1 };  isValid = Validator.TryValidateObject(employee2, new ValidationContext(employee2, null, null),      result, validateAllProperties);       The code block of step 2 performs object validation using the Validator.TryValidateObject method from the System.ComponentModel.DataAnnotations namespace.   Here, List object is created to store any validation errors that are generated during the validation process.   The Validator.TryValidateObject method is then called with the employee object, a new instance of ValidationContext, the result list, and the validateAllProperties boolean variable. This method attempts to validate the employee object based on the validation rules defined in the Employee class’s Validate method. Here you will see employee object is valid and there is no element in result list and isValid is ture.   But, second instance of the Employee class with some invalid data and calls the Validator.TryValidateObject method again with this object. You will see two error in the result list and isValid is false.   Overall, this code demonstrates how to use IValidatebleObject to perform object validation in C# application using validation rules defined in the object’s validation method.   Source code  ","categories": ["C#"],
        "tags": ["csharp"],
        "url": "http://localhost:4000/What-and-why-IValidatebleObject-in-C-sharp/",
        "teaser":null},{
        "title": "How to create .Net custom template using GitHub Packages Registry",
        "excerpt":"Introduction   .NET gives us opportunity to create custom template for future use and GitHub packages registry is most popular now a days to host custom template. In this article, I will show you how to create .net custom template using GitHub packages registry.   Tools and Technology uses     Visual Studio 2022   .NET 6   Visual C#   GitHub   Implementation   Step 1: Create a personal access token (PAT) from GitHub      Login into you GitHub   Go to settings -&gt; Developer Settings -&gt; Personal Access Tokens   Click “Generate new token” button   Type Note for the token, expiration days   Select scope for the token – here I have selected repo, write:packages, delete:packages as shown below.         Now click “Generate Token” at the bottom of the panel   Copy the token and store the token for further use because you cannot find it later      Step – 2: Add Nuget Source in visual studio      Type the following command to add source   dotnet nuget add source https://nuget.pkg.github.com/mahedee/index.json --name github-mahedee --username mahedee --password &lt;Your personal Access Token&gt;           You will see a source is added in C:\\Users\\mahedee\\AppData\\Roaming\\NuGet\\NuGet.Config file       You can add source from visual studio Tools -&gt; Options -&gt; NuGet Package Manager -&gt; Package Sources   Restart visual studio to get new nuget package source   Step – 3: Create template for your application     Create a project or multiple projects using a solution file.   Here, I have created a clean architecture template with a solution file and  multiple projects   Create a folder name – “.template.config” in the root directory of your application.         Create a file template.json in .template.config folder.   Add the following content to template.json file   template.json    {   \"$schema\": \"http://json.schemastore.org/template\",   \"author\": \"Mahedee Hasan\",   \"classifications\": [     \"dotnet\",     \"CleanArchitecture\"   ],   \"name\": \"Clean Architecture project template\",   \"description\": \"Project template to create project using Clean Architecture\",   \"identity\": \"CleanArchitecture\",   \"shortName\": \"CleanArchitecture\",   \"sourceName\": \"CleanArch\",   \"tags\": {     \"language\": \"C#\",     \"type\": \"project\"   },   \"symbols\": {     \"Framework\": {       \"type\": \"parameter\",       \"description\": \"The target framework for the project.\",       \"datatype\": \"choice\",       \"choices\": [         {           \"choice\": \"net6.0\"         },         {           \"choice\": \"net5.0\"       }       ],       \"defaultValue\": \"net6.0\",       \"replaces\": \"{TargetFramework}\"     }   } }    Step -4: Install and create template locally (Optional)      Go to one where “.template.config” folder exists.   Now run the following command. Don’t forgot to add space “.” at the end.   dotnet new --install .      You will see in the output that template is created. You will see Short Name of template which is used to install template.   Now go to the directory where you want to install template and type the following command.   dotnet new CleanArchitecture or, dotnet new CleanArchitecture --force   Here CleanArchitecture is short name of the template      To create template by another name type as follows.   dotnet new CleanArchitecture -o Location   Now projects name will be Location instead of CleanArch as mentioned in the previous json file.      Now go to the same directory to uninstall the template and type the following command.   dotnet new --uninstall .   Step - 5: Packing a template into a NuGet Package (nupkg file)      Create a .csproj file one directory up of “.template.config” folder.        In my case the folder structure as follows              Add the following content in TemplatePack.csproj project.   TemplatePack.csproj    &lt;Project Sdk=\"Microsoft.NET.Sdk\"&gt;     &lt;PropertyGroup&gt;       &lt;PackageType&gt;Template&lt;/PackageType&gt;       &lt;PackageVersion&gt;1.0.0&lt;/PackageVersion&gt;       &lt;PackageId&gt;Mahedee.CleanArchitecture.Templates&lt;/PackageId&gt;       &lt;Title&gt;Clean Architecture Template&lt;/Title&gt;       &lt;Authors&gt;Mahedee Hasan&lt;/Authors&gt;       &lt;Description&gt;Clean Architecture Template&lt;/Description&gt;       &lt;PackageTags&gt;dotnet-new;templates;clean-architecture&lt;/PackageTags&gt;       &lt;TargetFramework&gt;netstandard2.0&lt;/TargetFramework&gt;       &lt;IncludeContentInPack&gt;true&lt;/IncludeContentInPack&gt;       &lt;IncludeBuildOutput&gt;false&lt;/IncludeBuildOutput&gt;       &lt;ContentTargetFolders&gt;content&lt;/ContentTargetFolders&gt;       &lt;NoWarn&gt;$(NoWarn);NU5128&lt;/NoWarn&gt;       &lt;NoDefaultExcludes&gt;true&lt;/NoDefaultExcludes&gt;      &lt;RepositoryUrl&gt;https://github.com/mahedee/public-packages&lt;/RepositoryUrl&gt;    &lt;/PropertyGroup&gt;     &lt;ItemGroup&gt;      &lt;Content Include=\"CleanArchitecture\\**\\*\" Exclude=\"CleanArchitecture\\**\\bin\\**;CleanArchitecture\\**\\obj\\**\" /&gt;      &lt;Compile Remove=\"..\\**\\*\" /&gt;     &lt;/ItemGroup&gt;      &lt;/Project&gt;        To create package go to the directory where TemplatePack.csproj file exists and type the following command.   dotnet pack      You will Mahedee.CleanArchitecture.Templates.1.0.0.nupkg file is created in bin/Debug folder.   Step 6: Now push the package to github package registry     Go to the directory where Mahedee.CleanArchitecture.Templates.1.0.0.nupkg is exists.   Type the following command to push the package in github package registry   dotnet nuget push .\\Mahedee.CleanArchitecture.Templates.1.0.0.nupkg --api-key &lt;Your personal access token&gt; --source github-mahedee      Here, “github-mahedee” is a github source which we have added in step – 2.   Now login your github and you will see a template is uploaded to your package registry.   Step 7: Download template and install in local machine      Run the following command to install in local machine   dotnet new --install  Mahedee.CleanArchitecture.Templates  Mahedee.CleanArchitecture.Templates is package Id.   output:   The following template packages will be installed:    Mahedee.CleanArchitecture.Templates  Success: Mahedee.CleanArchitecture.Templates::1.0.0 installed the following templates: Template Name                        Short Name         Language  Tags -----------------------------------  -----------------  --------  ------------------------ Clean Architecture project template  CleanArchitecture  [C#]      dotnet/CleanArchitecture       Now go to the directory where you want to regenerate the template and type the following command.   dotnet new CleanArchitecture   Here CleanArchitecture is the short name of the template   Note     To see installed template in locally use the following command. You will also see how to uninstall the particular template.   dotnet new --uninstall      To uninstall a particular template from local machine, use the following command.   dotnet new --uninstall Mahedee.CleanArchitecture.Templates dotnet new –uninstall &lt;package id&gt;    Source code  ","categories": ["C#","ASP.NET Core","GitHub","NuGet","Packages"],
        "tags": ["csharp","aspnetcore","github","nuget","packages"],
        "url": "http://localhost:4000/How-to-create-Net-custom-template-using-GitHub-Packages-Registry/",
        "teaser":null},{
        "title": "Application of Event Sourcing using asp.net core, DDD, EF, EventStoreDB and SQL Server",
        "excerpt":"Introduction   Event sourcing is a most important pattern to design a microservice based application. If you are working with multiple services in a microservice based application, you have to use event driven architecture. In this article I will discuss and apply event sourcing using asp.net core, DDD and EventStoreDB.   Domain Driven Design (DDD)_  Domain-driven design (DDD) is a major software design approach, focusing on modeling software to match a domain according to input from that domain’s experts.  Under domain-driven design, the structure and language of software code (class names, class methods, class variables) should match the business domain. (Wikipedia)   Event Sourcing  Event sourcing is a technique to store all events of an Object to get all of its versions. Event sourcing pattern is used to implement microservice based application.  Using this pattern, we can track the changes of an object in its lifecycle.   EventStoreDB  EventStoreDB specially built for Event Sourcing. It is a NoSQL database. This is a one-way database – we can only insert data into database.   Implementation  Let’s implement Event Sourcing using DDD and EventStoreDB.   Tools and Technologies Used      Visual Studio 2022   .NET 6.0   ASP.NET Core Web API   Visual C#   DDD   EventStoreDB   SQL Server   Step 1: Install EventStoreDB           You can install EventStoreDB using EventStoreDB documentation. Visit the following link : https://developers.eventstore.com/server/v20.10/installation.html#quick-start            Or, you can run docker image of EventStoreDB as below.       docker run --name esdb-node -it -p 2113:2113 -p 1113:1113 eventstore/eventstore:latest --insecure --run-projections=All --enable-external-tcp --enable-atom-pub-over-http      Here I used docker images for EventStoreDB. After running the above command, browse EventStoreDB using the following link.   http://localhost:2113/web/index.html#/dashboard   Step 2: Create solution and projects      Create a solution name EventSourcing.   Add a new web api projects name -  Catalog.API   Add three class library projects name – Application, Domain, Infrastructure   Step 3: Install nuget packages      Install following nuget packages in Catalog.API   PM&gt; Install-Package Microsoft.EntityFrameworkCore.Tools     Install following nuget packages in Application   PM&gt; Install-Package MediatR PM&gt; Install-Package MediatR.Extensions.Microsoft.DependencyInjection PM&gt; Install-Package Microsoft.Extensions.DependencyInjection.Abstractions PM&gt; Install-Package Newtonsoft.Json      Install following nuget packages in Infrastructure   PM&gt; Install-Package EventStore.Client.Grpc.Streams PM&gt; Install-Package Microsoft.EntityFrameworkCore PM&gt; Install-Package Microsoft.Extensions.Configuration.Abstractions PM&gt; Install-Package Microsoft.Extensions.DependencyInjection.Abstractions PM&gt; Install-Package Newtonsoft.Json   Step 4: Organize Domain      Create IBaseEntity interface for Base entity in Entities-&gt;Common folder.   IBaseEntity.cs   namespace Domain.Entities.Common {     /// Ref: Coverience in C#     /// &lt;summary&gt;     /// Interface for Base Entity     /// &lt;/summary&gt;     /// &lt;typeparam name=\"TKey\"&gt;&lt;/typeparam&gt;     public interface IBaseEntity&lt;out TKey&gt;     {         TKey Id { get; }     } }       Create IDomainEvent interface for domain event in Entities-&gt;Common folder   IDomainEvent.cs   namespace Domain.Entities.Common {      /// &lt;summary&gt;     /// Interface for Domain Event     /// &lt;/summary&gt;     /// &lt;typeparam name=\"TKey\"&gt;&lt;/typeparam&gt;     public interface IDomainEvent&lt;out TKey&gt;     {         public long AggregateVersion { get; }         TKey AggregateId { get; }         DateTime TimeStamp { get; }     } }       Create IAggregateRoot interface for Aggregate Root in Entities-&gt;Common folder. IAggregateRoot is the combination of IBaseEntity and IAggregateRoot   IAggregateRoot.cs   namespace Domain.Entities.Common {     /// &lt;summary&gt;     /// Interface for AggregateRoot     /// IAggregateRoot is the combination of IBaseEntity and IAggregateRoot     /// &lt;/summary&gt;     /// &lt;typeparam name=\"TKey\"&gt;&lt;/typeparam&gt;     public interface IAggregateRoot&lt;out TKey&gt; : IBaseEntity&lt;TKey&gt;     {         long Version { get; }         IReadOnlyCollection&lt;IDomainEvent&lt;TKey&gt;&gt; Events { get;  }         void ClearEvents();     } }       Create BaseEntity class for Base Aggregate Root in Entities-&gt;Common folder. BaseEntity’s properties is shared in all entity classes.   BaseEntity.cs   namespace Domain.Entities.Common {     /// &lt;summary&gt;     /// Base class for BaseAggregateRoot class     /// Shared for all entities     /// &lt;/summary&gt;     /// &lt;typeparam name=\"TKey\"&gt;&lt;/typeparam&gt;     public abstract class BaseEntity&lt;TKey&gt; : IBaseEntity&lt;TKey&gt;     {         protected BaseEntity() { }         protected BaseEntity(TKey id) =&gt; Id = id;          //Implementation of interface         public TKey Id { get; protected set; }     } }       Create BaseDomainEvent class for all domain event class in Entities-&gt;Common folder.   BaseDomainEvent.cs   namespace Domain.Entities.Common {     /// &lt;summary&gt;     /// Base domain event for all domain event     /// &lt;/summary&gt;     /// &lt;typeparam name=\"TA\"&gt;&lt;/typeparam&gt;     /// &lt;typeparam name=\"TKey\"&gt;&lt;/typeparam&gt;     public class BaseDomainEvent&lt;TA, TKey&gt; : IDomainEvent&lt;TKey&gt; where TA : IAggregateRoot&lt;TKey&gt;     {         protected BaseDomainEvent() { }         public BaseDomainEvent(TA aggregateRoot)         {             if(aggregateRoot is null)             {                 throw new ArgumentNullException(nameof(aggregateRoot));             }              AggregateId = aggregateRoot.Id;             AggregateVersion = aggregateRoot.Version;             TimeStamp = DateTime.Now;         }         //Implementation of IDomainEvent         public long AggregateVersion { get; private set; }          //Implementation of IDomainEvent         public TKey AggregateId { get; private set; }          //Implementation of IDomainEvent         public DateTime TimeStamp { get; private set; }     } }       Create BaseAggregateRoot class for all aggregate root in Entities-&gt;Common folder. Here _event queue is used to queue all events of the aggregate root. AddEvent method used to add new event.   BaseAggregateRoot.cs    using System.Collections.Immutable; using System.Reflection;  namespace Domain.Entities.Common {     public abstract class BaseAggregateRoot&lt;TA, TKey&gt; : BaseEntity&lt;TKey&gt;, IAggregateRoot&lt;TKey&gt; where TA : IAggregateRoot&lt;TKey&gt;     {          // Queuing all events         private readonly Queue&lt;IDomainEvent&lt;TKey&gt;&gt; _events = new Queue&lt;IDomainEvent&lt;TKey&gt;&gt;();          protected BaseAggregateRoot() { }         protected BaseAggregateRoot(TKey id) : base(id)         {          }          protected void AddEvent(IDomainEvent&lt;TKey&gt; @event)         {             if(@event == null)             {                 throw new ArgumentNullException(nameof(@event));             }              _events.Enqueue(@event);             Apply(@event);             Version++;         }          /// &lt;summary&gt;         /// This method is implemented in the derived class         /// Apply this method to implement different events         /// &lt;/summary&gt;         /// &lt;param name=\"event\"&gt;&lt;/param&gt;                  protected abstract void Apply(IDomainEvent&lt;TKey&gt; @event);          // Implementation of IAggregateRoot         // Aggregate version         public long Version{ get; private set; }          // Implementation of IAggregateRoot         public IReadOnlyCollection&lt;IDomainEvent&lt;TKey&gt;&gt; Events =&gt; _events.ToImmutableArray();          // Implementation of IAggregateRoot         public void ClearEvents()         {             _events.Clear();         }          #region Factory          private static readonly ConstructorInfo CTor;          static BaseAggregateRoot()         {             var aggregateType = typeof(TA);             CTor = aggregateType.GetConstructor(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public,                 null, new Type[0], new ParameterModifier[0]);             if (null == CTor)                 throw new InvalidOperationException($\"Unable to find required private parameterless constructor for Aggregate of type '{aggregateType.Name}'\");         }           /// &lt;summary&gt;         /// Create Base Aggregate root when Rehydrate all Events         /// &lt;/summary&gt;         /// &lt;param name=\"events\"&gt;&lt;/param&gt;         /// &lt;returns&gt;&lt;/returns&gt;         /// &lt;exception cref=\"ArgumentNullException\"&gt;&lt;/exception&gt;         public static TA Create(IEnumerable&lt;IDomainEvent&lt;TKey&gt;&gt; events)         {             if (null == events || !events.Any())                 throw new ArgumentNullException(nameof(events));             var result = (TA)CTor.Invoke(new object[0]);              // Problem is in here             var baseAggregate = result as BaseAggregateRoot&lt;TA, TKey&gt;;              if (baseAggregate != null)                 foreach (var @event in events)                     baseAggregate.AddEvent(@event);              result.ClearEvents();              return result;         }          #endregion       } }       Create CatalogItemCreated  Event class in Events-&gt;CatalogItem folder   CatalogItemCreated.cs    using Domain.Entities.Common;  namespace Domain.Events.CatalogItem {     /// &lt;summary&gt;     /// Catalog item created event     /// &lt;/summary&gt;     public class CatalogItemCreated: BaseDomainEvent&lt;Entities.CatalogItem, Guid&gt;     {          private CatalogItemCreated()         {          }         public CatalogItemCreated(Entities.CatalogItem catalogItem) : base(catalogItem)         {             //Id = catalogItem.Id;             Name = catalogItem.Name;             Description = catalogItem.Description;             Price = catalogItem.Price;             AvailableStock = catalogItem.AvailableStock;             RestockThreshold = catalogItem.RestockThreshold;             MaxStockThreshold = catalogItem.MaxStockThreshold;             OnReorder = catalogItem.OnReorder;             IsDeleted = catalogItem.IsDeleted;                      }          //public Guid Id { get; set; }          public string Name { get; private set; }          public string Description { get; private set; }         public double Price { get; private set; }         // Quantity in stock         public int AvailableStock { get; private set; }         // Available stock at which we should reorder         public int RestockThreshold { get; private set; }         // Maximum number of units that can be in-stock at any time (due to physicial/logistical constraints in warehouses)         public int MaxStockThreshold { get; private set; }         /// &lt;summary&gt;         /// True if item is on reorder         /// &lt;/summary&gt;         public bool OnReorder { get; private set; }          public bool IsDeleted { get; private set; }      } }        Create CatalogItemDeleted Event class in Events-&gt;CatalogItem folder   CatalogItemDeleted.cs    using Domain.Entities.Common;  namespace Domain.Events.CatalogItem {     /// &lt;summary&gt;     /// Catalog item created event     /// &lt;/summary&gt;     public class CatalogItemDeleted: BaseDomainEvent&lt;Entities.CatalogItem, Guid&gt;     {          private CatalogItemDeleted()         {          }         public CatalogItemDeleted(Entities.CatalogItem catalogItem) : base(catalogItem)         {             IsDeleted = catalogItem.IsDeleted;         }         public bool IsDeleted { get; private set; }      } }        Create CatalogItemUpdated Event class in Events-&gt;CatalogItem folder   CatalogItemUpdated.cs   using Domain.Entities.Common;  namespace Domain.Events.CatalogItem {     /// &lt;summary&gt;     /// Catalog item created event     /// &lt;/summary&gt;     public class CatalogItemUpdated: BaseDomainEvent&lt;Entities.CatalogItem, Guid&gt;     {          private CatalogItemUpdated()         {          }         public CatalogItemUpdated(Entities.CatalogItem catalogItem) : base(catalogItem)         {             //Id = catalogItem.Id;             Name = catalogItem.Name;             Description = catalogItem.Description;             Price = catalogItem.Price;             AvailableStock = catalogItem.AvailableStock;             RestockThreshold = catalogItem.RestockThreshold;             MaxStockThreshold = catalogItem.MaxStockThreshold;             OnReorder = catalogItem.OnReorder;         }          //public Guid Id { get; set; }         public string Name { get; private set; }          public string Description { get; private set; }         public double Price { get; private set; }         // Quantity in stock         public int AvailableStock { get; private set; }         // Available stock at which we should reorder         public int RestockThreshold { get; private set; }         // Maximum number of units that can be in-stock at any time (due to physicial/logistical constraints in warehouses)         public int MaxStockThreshold { get; private set; }         /// &lt;summary&gt;         /// True if item is on reorder         /// &lt;/summary&gt;         public bool OnReorder { get; private set; }      } }       Create CatalogItem Aggregate Root class in Entities folder.  Here we used DDD so CatalogItem is the main domain class here. Create, update, delete is performed using this class.   CatalogItem.cs   using Domain.Entities.Common; using Domain.Events.CatalogItem;  namespace Domain.Entities {     public class CatalogItem : BaseAggregateRoot&lt;CatalogItem, Guid&gt;     {         private CatalogItem()         {          }          public CatalogItem(Guid id, string name, string description, double price, int availableStock,              int restockThreshold, int maxStockThreshold, bool onReorder) : base(id)         {             Id = id;             Name = name;             Description = description;             Price = price;             AvailableStock = availableStock;             RestockThreshold = restockThreshold;             MaxStockThreshold = maxStockThreshold;             OnReorder = onReorder;              if (Version &gt; 0)             {                 throw new Exception(\"Catalog item already created\");             }              if (string.IsNullOrEmpty(name))             {                 //Validation Exception will be placed here                 throw new Exception(\"Name Can not be Empty\");             }              if (price &lt;= 0)             {                 //Validation Exception will be placed here                 throw new Exception(\"Price must be positive value\");             }              // Add CatalogItem Event Here to create             AddEvent(new CatalogItemCreated(this));         }          public string Name { get; private set; }          public string Description { get; private set; }          public double Price { get; private set; }          // Quantity in stock         public int AvailableStock { get; private set; }          // Available stock at which we should reorder         public int RestockThreshold { get; private set; }          // Maximum number of units that can be in-stock at any time (due to physicial/logistical constraints in warehouses)         public int MaxStockThreshold { get; private set; }          /// &lt;summary&gt;         /// True if item is on reorder         /// &lt;/summary&gt;         public bool OnReorder { get; private set; }         public bool IsDeleted { get; private set; } = false;          public static CatalogItem Create(string name, string description, double price, int availableStock,              int restockThreshold, int maxStockThreshold, bool onReorder)         {             return new CatalogItem(Guid.NewGuid(), name, description, price, availableStock, restockThreshold, maxStockThreshold, onReorder); ;         }          public void Update(Guid id, string name, string description, double price, int availableStock,          int restockThreshold, int maxStockThreshold, bool onReorder)         {             Id = id;             Name = name;             Description = description;             Price = price;             AvailableStock = availableStock;             RestockThreshold = restockThreshold;             MaxStockThreshold = maxStockThreshold;             OnReorder = onReorder;              AddEvent(new CatalogItemUpdated(this));         }          public void Delete(Guid id)         {             Id = id;             IsDeleted = true;             AddEvent(new CatalogItemDeleted(this));         }            protected override void Apply(IDomainEvent&lt;Guid&gt; @event)         {             switch (@event)             {                 case CatalogItemCreated catalogItemCreated: OnCatalogItemCreated(catalogItemCreated); break;                 case CatalogItemUpdated catalogItemUpdated: OnCatalogItemUpdated(catalogItemUpdated); break;                 case CatalogItemDeleted catalogItemDeleted:                      IsDeleted = catalogItemDeleted.IsDeleted;                     break;              }         }          // On Catalog Item Created Event         private void OnCatalogItemCreated(CatalogItemCreated catalogItemCreated)         {              Id = catalogItemCreated.AggregateId; // Must have ID             Name = catalogItemCreated.Name;             Description= catalogItemCreated.Description;             Price = catalogItemCreated.Price;             AvailableStock = catalogItemCreated.AvailableStock;             RestockThreshold = catalogItemCreated.RestockThreshold;             MaxStockThreshold = catalogItemCreated.MaxStockThreshold;             OnReorder = catalogItemCreated.OnReorder;         }          // On Catalog Item Updated Event         private void OnCatalogItemUpdated(CatalogItemUpdated catalogItemUpdated)         {             Name = catalogItemUpdated.Name;             Description = catalogItemUpdated.Description;             Price = catalogItemUpdated.Price;             AvailableStock = catalogItemUpdated.AvailableStock;             RestockThreshold = catalogItemUpdated.RestockThreshold;             MaxStockThreshold = catalogItemUpdated.MaxStockThreshold;             OnReorder = catalogItemUpdated.OnReorder;         }     } }   Step 5: Organize Application      Add domain as a reference project in Application project. You may add using project file as follows.     &lt;ItemGroup&gt;     &lt;ProjectReference Include=\"..\\Domain\\Domain.csproj\" /&gt;   &lt;/ItemGroup&gt;      Create CreateCatalogItemDTO class in Common-&gt;DTOs folder   CreateCatalogItemDTO.cs    namespace Application.Common.DTOs {     public class CreateCatalogItemDTO     {         public int Id { get; set; }          public string Name { get; set; }          public string Description { get; set; }          public double Price { get; set; }          // Quantity in stock         public int AvailableStock { get; set; }          // Available stock at which we should reorder         public int RestockThreshold { get; set; }          // Maximum number of units that can be in-stock at any time (due to physicial/logistical constraints in warehouses)         public int MaxStockThreshold { get; set; }          /// &lt;summary&gt;         /// True if item is on reorder         /// &lt;/summary&gt;         public bool OnReorder { get; set; }     } }       Create UpdateCatalogItemDTO class in Common-&gt;DTOs folder   UpdateCatalogItemDTO.cs    namespace Application.Common.DTOs {     public class UpdateCatalogItemDTO     {         public Guid Id { get; private set; }          public string Name { get; set; }          public string Description { get; set; }          public double Price { get; set; }          // Quantity in stock         public int AvailableStock { get; set; }          // Available stock at which we should reorder         public int RestockThreshold { get; set; }          // Maximum number of units that can be in-stock at any time (due to physicial/logistical constraints in warehouses)         public int MaxStockThreshold { get; set; }          /// &lt;summary&gt;         /// True if item is on reorder         /// &lt;/summary&gt;         public bool OnReorder { get; set; }     } }       Create IAggregateRepository Interface in Common-&gt;Interfaces folder. This interface is used for event sourcing. Here,  AppendAsync method is used to append events to store in event store database, RehydreateAsync method is used to read all events using aggregate id and ReadEventsAsync method is used to read events as a log and return in to dictionary.   IAggregateRepository.cs   using Domain.Entities.Common;  namespace Application.Common.Interfaces {     public interface IAggregateRepository&lt;TA, TKey&gt; where TA : class, IAggregateRoot&lt;TKey&gt;     {         // Append events to store in event store database         Task AppendAsync(TA aggregate, CancellationToken cancellationToken = default);          // Read all events using aggregate ID         Task&lt;TA?&gt; RehydreateAsync(TKey aggregateId, CancellationToken cancellationToken = default);          // Read events as a log and return into a dictionary         Task&lt;Dictionary&lt;int, object&gt;&gt; ReadEventsAsync(TKey aggregateId, CancellationToken cancellationToken = default);     } }       Create ICatalogItemRepository interface to insert and update into sql server. Since, we use soft delete so here delete means update of isDelete filed to 1.   ICatalogItemRepository.cs    using Domain.Entities;  namespace Application.Common.Interfaces {     public interface ICatalogItemRepository     {         Task AddAsync(CatalogItem catalogItem);         Task UpdateAsync(CatalogItem catalogItem);     } }       Create PrivateSetterContractResolver class in Common-&gt;Resolvers folder. This is a Custom Contract Resolver to Set Private property when Rehydrate Events   PrivateSetterContractResolver.cs    using Newtonsoft.Json; using Newtonsoft.Json.Serialization; using System.Reflection;  namespace Application.Common.Resolvers {     /// &lt;summary&gt;     /// Custom Contract Resolver to Set Private property when Rehydrate Events     /// &lt;/summary&gt;     public class PrivateSetterContractResolver : DefaultContractResolver     {         protected override JsonProperty CreateProperty(MemberInfo member, MemberSerialization memberSerialization)         {             var jsonProperty = base.CreateProperty(member, memberSerialization);              if(jsonProperty.Writable)                 return jsonProperty;              if(member is PropertyInfo propertyInfo)             {                 var setter = propertyInfo.GetSetMethod(true);                 jsonProperty.Writable = setter != null;             }              return jsonProperty;         }         //EnvironmentVariableTarget jsonProperty = base.CreateProperty();     } }       Create CreateCatalogItemCommand and CreateCatalogItemCommandHandler class in Commands-&gt;CatalogItems folder.   CreateCatalogItemCommand.cs    using Application.Common.Interfaces; using Domain.Entities; using MediatR;  namespace Application.Commands.CatalogItems {     public class CreateCatalogItemCommand : INotification     {         public CreateCatalogItemCommand(string name, string description, double price, int availableStock, int restockThreshold,              int maxStockThreshold, bool onReorder)         {             Name = name;             Description = description;             Price = price;             AvailableStock = availableStock;             RestockThreshold = restockThreshold;             MaxStockThreshold = maxStockThreshold;             OnReorder = onReorder;         }           public string Name { get; private set; }          public string Description { get; private set; }          public double Price { get; private set; }          // Quantity in stock         public int AvailableStock { get; private set; }          // Available stock at which we should reorder         public int RestockThreshold { get; private set; }          // Maximum number of units that can be in-stock at any time (due to physicial/logistical constraints in warehouses)         public int MaxStockThreshold { get; private set; }          /// &lt;summary&gt;         /// True if item is on reorder         /// &lt;/summary&gt;         public bool OnReorder { get; private set; }     }      public class CreateCatalogItemCommandHandler : INotificationHandler&lt;CreateCatalogItemCommand&gt;     {         private readonly IAggregateRepository&lt;CatalogItem, Guid&gt; _aggregateRepository;         private readonly ICatalogItemRepository _catalogItemRepository;          public CreateCatalogItemCommandHandler(IAggregateRepository&lt;CatalogItem, Guid&gt; aggregateRepository,              ICatalogItemRepository catalogItemRepository)         {             _aggregateRepository = aggregateRepository;             _catalogItemRepository = catalogItemRepository;         }          public async Task Handle(CreateCatalogItemCommand notification, CancellationToken cancellationToken)         {                    // Insert event into eventstore db             var catalogItem = CatalogItem.Create(notification.Name, notification.Description, notification.Price, notification.AvailableStock,                 notification.RestockThreshold, notification.MaxStockThreshold, notification.OnReorder);             await _aggregateRepository.AppendAsync(catalogItem);              // Save data into database             //await _catalogItemAggregateRepository.SaveAsync(catalogItem.Events.FirstOrDefault());             await _catalogItemRepository.AddAsync(catalogItem);              // Dispatch events to any event/service bus to do next actions             // We can also register EventStore db Subscription to receive Event Notification         }     } }       Create UpdateCatalogItemCommand and UpdateCatalogItemCommandHandler class in Commands-&gt;CatalogItems folder.   UpdateCatalogItemCommand.cs    using Application.Common.Interfaces; using Domain.Entities; using MediatR;  namespace Application.Commands.CatalogItems {     public class UpdateCatalogItemCommand : INotification     {         // Update Catalog Item Command         public UpdateCatalogItemCommand(Guid id, string name, string description, double price, int availableStock, int restockThreshold,             int maxStockThreshold, bool onReorder)         {             CatalogItemId = id;             Name = name;             Description = description;             Price = price;             AvailableStock = availableStock;             RestockThreshold = restockThreshold;             MaxStockThreshold = maxStockThreshold;             OnReorder = onReorder;         }          public Guid CatalogItemId { get; private set; }          public string Name { get; private set; }          public string Description { get; private set; }          public double Price { get; private set; }          // Quantity in stock         public int AvailableStock { get; private set; }          // Available stock at which we should reorder         public int RestockThreshold { get; private set; }          // Maximum number of units that can be in-stock at any time (due to physicial/logistical constraints in warehouses)         public int MaxStockThreshold { get; private set; }          /// &lt;summary&gt;         /// True if item is on reorder         /// &lt;/summary&gt;         public bool OnReorder { get; private set; }      }      public class UpdateCatalogItemCommandHandler: INotificationHandler&lt;UpdateCatalogItemCommand&gt;     {         private readonly IAggregateRepository&lt;CatalogItem, Guid&gt; _aggregateRepository;         private readonly ICatalogItemRepository _catalogItemRepository;         public UpdateCatalogItemCommandHandler(IAggregateRepository&lt;CatalogItem, Guid&gt; aggregateRepository,              ICatalogItemRepository catalogItemRepository)         {              _aggregateRepository = aggregateRepository;             _catalogItemRepository = catalogItemRepository;         }          #region INotificationHandler implementation         public async Task Handle(UpdateCatalogItemCommand notification, CancellationToken cancellationToken)         {             var catalogItem = await _aggregateRepository.RehydreateAsync(notification.CatalogItemId, cancellationToken);              if(catalogItem == null)             {                 throw new Exception(\"Invalide catalog item information\");             }              catalogItem.Update(notification.CatalogItemId, notification.Name, notification.Description, notification.Price,                 notification.AvailableStock, notification.RestockThreshold, notification.MaxStockThreshold, notification.OnReorder);              await _aggregateRepository.AppendAsync(catalogItem, cancellationToken);              // Save data into database              await _catalogItemRepository.UpdateAsync(catalogItem);           }          #endregion     }   }       Create DeleteCatalogItemCommand and DeleteCatlogItemCommandHandler class in Commands-&gt;CatalogItems folder.   DeleteCatalogItemCommand.cs    using Application.Common.Interfaces; using Domain.Entities; using MediatR;  namespace Application.Commands.CatalogItems {     public class DeleteCatalogItemCommand : INotification     {         public DeleteCatalogItemCommand(Guid id)         {             Id = id;         }         public Guid Id { get; private set; }     }      public class DeleteCatlogItemCommandHandler : INotificationHandler&lt;DeleteCatalogItemCommand&gt;     {         private readonly IAggregateRepository&lt;CatalogItem, Guid&gt; _aggregateRepository;         private readonly ICatalogItemRepository _catalogItemRepository;          public DeleteCatlogItemCommandHandler(IAggregateRepository&lt;CatalogItem, Guid&gt; agrregateRepository             , ICatalogItemRepository catalogItemRepository)         {             _aggregateRepository = agrregateRepository;             _catalogItemRepository = catalogItemRepository;         }         public async Task Handle(DeleteCatalogItemCommand notification, CancellationToken cancellationToken)         {             var catalogItem = await _aggregateRepository.RehydreateAsync(notification.Id, cancellationToken);             if (catalogItem == null)             {                 throw new Exception(\"Invalid Catalog Item information\");             }              catalogItem.Delete(catalogItem.Id);             await _aggregateRepository.AppendAsync(catalogItem, cancellationToken);              // Save data into database             await _catalogItemRepository.UpdateAsync(catalogItem);         }     } }       Create GetCatalogItemLogByIdQuery and GetCatalogItemLogByIdQueryHandler class in Queries-&gt;CatalogItems folder   GetCatalogItemLogByIdQuery.cs    using Application.Common.Interfaces; using Domain.Entities; using MediatR;  namespace Application.Queries.CatalogItems {     public class GetCatalogItemLogByIdQuery : IRequest&lt;List&lt;object&gt;&gt;     {         public GetCatalogItemLogByIdQuery(Guid catalogItemId)         {             CatalogItemId = catalogItemId;         }          public Guid CatalogItemId { get; private set; }     }      public class GetCatalogItemLogByIdQueryHandler : IRequestHandler&lt;GetCatalogItemLogByIdQuery, List&lt;object&gt;&gt;     {         private readonly IAggregateRepository&lt;CatalogItem, Guid&gt; _aggregateRepository;          public GetCatalogItemLogByIdQueryHandler(IAggregateRepository&lt;CatalogItem, Guid&gt; aggregateRepository)         {             _aggregateRepository = aggregateRepository;         }          public async Task&lt;List&lt;object&gt;&gt; Handle(GetCatalogItemLogByIdQuery request, CancellationToken cancellationToken)         {             var data = await _aggregateRepository.ReadEventsAsync(request.CatalogItemId, cancellationToken);             return data.Values.ToList();         }     } }       Create service collection extension method in root directory.   DependencyInjection.cs    using MediatR; using Microsoft.Extensions.DependencyInjection; using System.Reflection;  namespace Application {     public static class DependencyInjection     {         public static IServiceCollection AddApplication(this IServiceCollection services)         {             //Add MediatR to the Pipe line             services.AddMediatR(Assembly.GetExecutingAssembly());             return services;         }     } }    Step 6: Organize Infrastructure      Add Domain and Application project as reference in the Infrastructure project.   You may add in the project file as follows.      &lt;ItemGroup&gt;     &lt;ProjectReference Include=\"..\\Application\\Application.csproj\" /&gt;     &lt;ProjectReference Include=\"..\\Domain\\Domain.csproj\" /&gt;   &lt;/ItemGroup&gt;       Create ApplicationDbContext class in Persistance folder   ApplicationDbContext.cs    using Domain.Entities; using Microsoft.EntityFrameworkCore; using System.Reflection;  namespace Infrastructure.Persistance {     public class ApplicationDbContext : DbContext     {         public ApplicationDbContext(DbContextOptions&lt;ApplicationDbContext&gt; options) : base(options)         {          }          public DbSet&lt;CatalogItem&gt; CatalogItems { get; set; }          protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)         {          }          protected override void OnModelCreating(ModelBuilder builder)         {             base.OnModelCreating(builder);             builder.ApplyConfigurationsFromAssembly(Assembly.GetExecutingAssembly());         }     } }        Create CatalogItemRepository class in Persistance folder for insert and update in the sql server.   CatalogItemRepository.cs    using Application.Common.Interfaces; using Domain.Entities;  namespace Infrastructure.Persistance {     public class CatalogItemRepository : ICatalogItemRepository     {         private readonly ApplicationDbContext _context;          public CatalogItemRepository(ApplicationDbContext applicationDbContext)         {             _context = applicationDbContext;         }         public async Task AddAsync(CatalogItem catalogItem)         {             await _context.AddAsync(catalogItem);             await _context.SaveChangesAsync();         }          public async Task UpdateAsync(CatalogItem catalogItem)         {             _context.Entry(catalogItem).State = Microsoft.EntityFrameworkCore.EntityState.Modified;             await _context.SaveChangesAsync();         }     } }       Create AggregateRepository class in Persistance for inserting into event store db.   AggregateRepository.cs    using Application.Common.Interfaces; using Application.Common.Resolvers; using Domain.Entities.Common; using EventStore.Client; using Newtonsoft.Json; using System.Text; using System.Text.Json; using System.Text.Json.Serialization; using JsonSerializer = System.Text.Json.JsonSerializer;  namespace Infrastructure.Persistance {     public class AggregateRepository&lt;TA, TKey&gt; : IAggregateRepository&lt;TA, TKey&gt; where TA : class, IAggregateRoot&lt;TKey&gt;     {         private readonly EventStoreClient _eventStoreClient;         private readonly string _stramBaseName;          public AggregateRepository(EventStoreClient eventStoreClient)         {             _eventStoreClient = eventStoreClient;             var aggregateType = typeof(TA);             _stramBaseName = aggregateType.Name;         }         public async Task AppendAsync(TA aggregate, CancellationToken cancellationToken = default)         {             if (null == aggregate)                 throw new ArgumentNullException(nameof(aggregate));             if (!aggregate.Events.Any())                 return;              var streamName = GetStreamName(aggregate.Id);              var eventList = aggregate.Events.Select(Map).ToArray();              var result = await _eventStoreClient.AppendToStreamAsync(streamName, StreamState.Any,                 eventList.ToArray(), cancellationToken: cancellationToken);         }          public async Task&lt;Dictionary&lt;int, object&gt;&gt; ReadEventsAsync(TKey aggregateId, CancellationToken cancellationToken = default)         {             var streamName = GetStreamName(aggregateId);             var result = _eventStoreClient.ReadStreamAsync(Direction.Forwards, streamName, StreamPosition.Start);              var events = new Dictionary&lt;int, object&gt;();             var index = 0;              foreach (var data in await result.ToListAsync(cancellationToken: cancellationToken))             {                 // Read event metadata to get type information of an event                 var eventMetaData = JsonSerializer.Deserialize&lt;EventMeta&gt;(Encoding.UTF8.GetString(data.Event.Metadata.ToArray()));                 Type? typeInfo = Type.GetType(eventMetaData.EventType);                 if(typeInfo is null)                 {                     throw new Exception($\"Invalid type {eventMetaData.EventType}\");                 }                  var jsonData = Encoding.UTF8.GetString(data.Event.Data.ToArray());                 var eventInfo = JsonConvert.DeserializeObject(jsonData, typeInfo, new JsonSerializerSettings()                 {                     ConstructorHandling = ConstructorHandling.AllowNonPublicDefaultConstructor,                     ContractResolver = new PrivateSetterContractResolver()                 });                  events.Add(index, new                 {                     Events = eventInfo,                     EventType = data.OriginalEvent.EventType                 });                  index++;              }              return events;         }           /// &lt;summary&gt;         /// Read all events using Aggregate ID         /// &lt;/summary&gt;         /// &lt;param name=\"aggregateId\"&gt;&lt;/param&gt;         /// &lt;param name=\"cancellationToken\"&gt;&lt;/param&gt;         /// &lt;returns&gt;&lt;/returns&gt;         /// &lt;exception cref=\"NotImplementedException\"&gt;&lt;/exception&gt;         public async Task&lt;TA?&gt; RehydreateAsync(TKey key, CancellationToken cancellationToken = default)         {             try             {                  var streamName = GetStreamName(key);                  var events = new List&lt;IDomainEvent&lt;TKey&gt;&gt;();                  var result = _eventStoreClient.ReadStreamAsync(Direction.Forwards, streamName, StreamPosition.Start);                   foreach (var data in await result.ToListAsync(cancellationToken))                 {                     //Read Event Metadata to get Type Information of an event                     var eventMetaData = JsonSerializer.Deserialize&lt;EventMeta&gt;                         (Encoding.UTF8.GetString(data.Event.Metadata.ToArray()));                      Type? typeInfo = Type.GetType(eventMetaData.EventType);                      if (typeInfo == null)                     {                         throw new Exception($\"Invalid type {eventMetaData.EventType}\");                     }                      var jsonData = Encoding.UTF8.GetString(data.Event.Data.ToArray());                     var eventInfo = JsonConvert.DeserializeObject(jsonData, typeInfo, new JsonSerializerSettings()                     {                         ConstructorHandling = ConstructorHandling.AllowNonPublicDefaultConstructor,                         ContractResolver = new PrivateSetterContractResolver()                     });                       events.Add((IDomainEvent&lt;TKey&gt;)eventInfo);                 }                  if (!events.Any())                     return null;                  var aggregateResult = BaseAggregateRoot&lt;TA, TKey&gt;.Create(events.OrderBy(x =&gt; x.AggregateVersion));                  return aggregateResult;             }             catch (Exception e)             {                 Console.WriteLine(e);                 throw;             }         }          // Techical: Expression-bodied member         // Generate stream name format         private string GetStreamName(TKey aggregateKey)             =&gt; $\"{_stramBaseName}_{aggregateKey}\";          // Map domain event to event data         private static EventData Map(IDomainEvent&lt;TKey&gt; @event)         {             var meta = new EventMeta()             {                 EventType = @event.GetType().AssemblyQualifiedName             };              var metaJson = System.Text.Json.JsonSerializer.Serialize(meta);             var metadata = Encoding.UTF8.GetBytes(metaJson);              var eventData = new EventData(                 Uuid.NewUuid(),                 @event.GetType().Name,                 JsonSerializer.SerializeToUtf8Bytes(@event, @event.GetType(), new JsonSerializerOptions()                 {                     ReferenceHandler = ReferenceHandler.IgnoreCycles                 }),                 metadata                 );             return eventData;         }          /// &lt;summary&gt;         ///  Meta data information for an event which will also saved into each Event Payload         /// &lt;/summary&gt;         internal struct EventMeta         {             public string EventType { get; set; }         }     } }       Add service collection extension method in the root directory. Here sql server, event store db and dependency injection is configured.   DependencyInjection.cs    using Application.Common.Interfaces; using Domain.Entities; using Domain.Entities.Common; using EventStore.Client; using Infrastructure.Persistance; using Microsoft.EntityFrameworkCore; using Microsoft.Extensions.Configuration; using Microsoft.Extensions.DependencyInjection;  namespace Infrastructure {     public static class DependencyInjection     {         public static IServiceCollection AddEventStore(this IServiceCollection services, IConfiguration configuration)         {             // Event store database connection             var settings = EventStoreClientSettings                 .Create(\"esdb://127.0.0.1:2113?tls=false&amp;keepAliveTimeout=10000&amp;keepAliveInterval=10000\");              var client = new EventStoreClient(settings);             services.AddSingleton(client);              // Register DbContext for SQL Server              services.AddDbContext&lt;ApplicationDbContext&gt;(options =&gt;             {                 options.UseSqlServer(                     configuration.GetConnectionString(\"DefaultConnection\"),                     sqlServerOptionsAction: sqlOptions =&gt;                     {                     });             });              services.AddScoped&lt;ICatalogItemRepository, CatalogItemRepository&gt;();             services.AddEventsRepository&lt;CatalogItem, Guid&gt;();              return services;          }           private static IServiceCollection AddEventsRepository&lt;TA, TK&gt;(this IServiceCollection services)     where TA : class, IAggregateRoot&lt;TK&gt;         {             return services.AddSingleton(typeof(IAggregateRepository&lt;TA, TK&gt;), typeof(AggregateRepository&lt;TA, TK&gt;));         }     } }    Step 7: Organize Catalog.API      Add connection string in the appsettings.json file as follows.   appsettings.json    {   \"Logging\": {     \"LogLevel\": {       \"Default\": \"Information\",       \"Microsoft.AspNetCore\": \"Warning\"     }   },   \"AllowedHosts\": \"*\",   \"ConnectionStrings\": {     \"DefaultConnection\": \"Data Source=localhost;Initial Catalog=CatalogDB;Persist Security Info=False;User ID=sa; Password = yourpassword;Pooling=False;MultipleActiveResultSets=False;Encrypt=False;TrustServerCertificate=False\"   } }       Add CatalogItemController class in Controllers folder as follows.   CatalogItemController.cs    using Application.Commands.CatalogItems; using Application.Common.DTOs; using Application.Queries.CatalogItems; using MediatR; using Microsoft.AspNetCore.Mvc;  namespace Catalog.API.Controllers {     [Route(\"api/[controller]\")]     [ApiController]     public class CatalogItemController : ControllerBase     {          private readonly IMediator _mediator;          public CatalogItemController(IMediator mediator)         {             _mediator = mediator;         }          [HttpPost(\"Create\")]         public async Task&lt;IActionResult&gt; CreateCatalogItemAsync([FromBody] CreateCatalogItemDTO? dto)         {             if (dto == null)                 return BadRequest();              var command = new CreateCatalogItemCommand(dto.Name, dto.Description, dto.Price, dto.AvailableStock, dto.RestockThreshold,                 dto.MaxStockThreshold, dto.OnReorder);             await _mediator.Publish(command);              return Ok(command);         }          [HttpPatch(\"update/{id:guid}\")]         public async Task&lt;IActionResult&gt; UpdateCatalogItem(Guid id, [FromBody] UpdateCatalogItemDTO? dto)         {             if (dto == null)                 return BadRequest();              var updateCommand = new UpdateCatalogItemCommand(id, dto.Name, dto.Description, dto.Price, dto.AvailableStock,                 dto.RestockThreshold, dto.MaxStockThreshold, dto.OnReorder);             await _mediator.Publish(updateCommand);              return Ok(updateCommand);         }          /// &lt;summary&gt;         /// Delete a catalog item which is soft delete not hard delete         /// &lt;/summary&gt;         /// &lt;param name=\"id\"&gt;&lt;/param&gt;         /// &lt;returns&gt;&lt;/returns&gt;         [HttpDelete(\"delete/{id:guid}\")]         public async Task&lt;IActionResult&gt; DeleteCatalogItem(Guid id)         {             var deleteCatalogCommand = new DeleteCatalogItemCommand(id);              await _mediator.Publish(deleteCatalogCommand);             return Ok();         }          [HttpGet(\"log/{id:guid}\")]         public async Task&lt;IActionResult&gt; GetLog(Guid id)         {             return Ok(await _mediator.Send(new GetCatalogItemLogByIdQuery(id)));         }     } }       Modify Program.cs as follows.   Program.cs    using Application; using Infrastructure;  var builder = WebApplication.CreateBuilder(args);  // Add services to the container.  var environment = Environment.GetEnvironmentVariable(\"ASPNETCORE_ENVIRONMENT\"); builder.Configuration.SetBasePath(Directory.GetCurrentDirectory())     .AddJsonFile(\"appsettings.json\", optional: false, reloadOnChange: true)     .AddJsonFile($\"appsettings.{environment}.json\", optional: true)     .AddEnvironmentVariables();  //Register Application layer and Event Store layer from Infrastructure here builder.Services.AddApplication().AddEventStore(builder.Configuration);    builder.Services.AddControllers(); // Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle builder.Services.AddEndpointsApiExplorer(); builder.Services.AddSwaggerGen();  var app = builder.Build();  // Configure the HTTP request pipeline. if (app.Environment.IsDevelopment()) {     app.UseSwagger();     app.UseSwaggerUI(); }  app.UseHttpsRedirection();  app.UseAuthorization();  app.MapControllers();  app.Run();    Step 8: Add Migration      Set Catalog.API as startup project and go to package manager console.   Select Infrastructure as Default project and run the following commands.   PM&gt; Add-Migration init-mig PM&gt; Update-Database -Verbose   Step 9: Run application and perform CRUD operation using swagger.  See the impact in sql server and EventStoreDB as follows.   Swagger UI: Create, update and delete CatalogItem using SwaggerUI      EventStoreDB UI: Browse event store db to see the impact      Source code  ","categories": ["C#","ASP.NET Core","DDD","EventStoreDB","Microservices","Software Architecture"],
        "tags": ["csharp","aspnetcore","ddd","eventstoredb","microservices","softwarearchitecture"],
        "url": "http://localhost:4000/Application-of-Event-Sourcing-using-aspnet-core-DDD-EF-EventStoreDB-and-SQL-Server/",
        "teaser":null},{
        "title": "Configure Load Balancer using Eureka and ocelot with asp.net core and docker",
        "excerpt":"Introduction   A load balancer is a component that distributes incoming network traffic across multiple servers to optimize resource utilization, maximize throughput, minimize response time, and avoid overloading any single server.   Eureka is a service discovery tool provided by Netflix OSS, it can be used to solve load balancing by registering all instances of a service with Eureka and having the load balancer forward traffic to those instances. The Eureka server maintains a registry of all available instances of a service, and clients of the service query the registry to obtain a list of available service instances. The load balancer can then use this information to distribute incoming requests to the available service instances.   In this article, I will show you how to configure load balancer using Eureka and ocelot in API gateway.      Fig – Load balancing architecture (Collected from internet)   Here, I am skipping service discovery. If you want to know more about service discovery, please read the article - Service Discovery with Ocelot and ASP.net core   Implementation   Let’s configure Load Balancer using Eureka, Ocelot   Tools and Technologies Used      Visual Studio 2022   .NET 6.0   ASP.NET Core Web API   Visual C#   Eureka   Ocelot   Docker   Step 1: Create solution and projects      Create a solution name SDDemoDocker.sln   Add four Web Api Projects name BFF.Web, LocationA.API, LocationB.API, LocationC.API   Here BFF.Web is an api gateway   Step 2: Install nuget packages      Install following nuget packages in BFF.Web project   PM&gt; Install-Package MMLib.SwaggerForOcelot PM&gt; Install-Package Ocelot PM&gt; Install-Package Ocelot.Provider.Eureka PM&gt; Install-Package Ocelot.Provider.Kubernetes PM&gt; Install-Package Ocelot.Provider.Polly PM&gt; Install-Package Steeltoe.Discovery.Eureka      Install following nuget packages in LocationA.API project   PM&gt; Install-Package Steeltoe.Discovery.ClientCore PM&gt; Install-Package Steeltoe.Discovery.Eureka PM&gt; Install-Package Microsoft.VisualStudio.Azure.Containers.Tools.Targets      Install following nuget packages in LocationB.API project   PM&gt; Install-Package Steeltoe.Discovery.ClientCore PM&gt; Install-Package Steeltoe.Discovery.Eureka PM&gt; Install-Package Microsoft.VisualStudio.Azure.Containers.Tools.Targets      Install following nuget packages in LocationC.API project   PM&gt; Install-Package Steeltoe.Discovery.ClientCore PM&gt; Install-Package Steeltoe.Discovery.Eureka PM&gt; Install-Package Microsoft.VisualStudio.Azure.Containers.Tools.Targets   Step 3: Organize LocationA.API projects      Register Eureka and modify program.cs as follows.   Program.cs    using Steeltoe.Discovery.Client; using Steeltoe.Discovery.Eureka;  var builder = WebApplication.CreateBuilder(args);  // Add services to the container.  // Add or register service discovery to your application builder.Services.AddServiceDiscovery(o =&gt; o.UseEureka());  builder.Services.AddControllers(); // Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle builder.Services.AddEndpointsApiExplorer(); builder.Services.AddSwaggerGen();  var app = builder.Build();  // Configure the HTTP request pipeline. if (app.Environment.IsDevelopment()) {     app.UseSwagger();     app.UseSwaggerUI(); }  //app.UseHttpsRedirection();  app.UseAuthorization();  app.MapControllers();  app.Run();       Create a controller name DistrictController in Controllers folder and modify get method as follows.   DistrictController.cs    using Microsoft.AspNetCore.Mvc;  // For more information on enabling Web API for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860  namespace LocationA.API.Controllers {     [Route(\"api/[controller]\")]     [ApiController]     public class DistrictController : ControllerBase     {         // GET: api/&lt;DistrictController&gt;         [HttpGet(\"GetAll\")]         public IEnumerable&lt;string&gt; Get()         {             return new string[] { \"Serivce:LocationA.API-&gt;\", \"Dhaka\", \"Chittagong\", \"Chandpur\", \"Barisal\", \"Noakhali\" };         }      } }    Modify appsettings.json to connect to the service registry   appsettings.json    {   \"Logging\": {     \"LogLevel\": {       \"Default\": \"Information\",       \"Microsoft.AspNetCore\": \"Warning\"     }   },   \"AllowedHosts\": \"*\",      \"Spring\": {     \"Application\": {       \"Name\": \"SERVICE.LOCATIONAPI\"     }   },   \"Eureka\": {     \"Client\": {       \"ServiceUrl\": \"http://eureka-server:8761/eureka/\",       \"ValidateCertificates\": false,       \"ShouldRegisterWithEureka\": true     },          // No docke instance added     \"Instance\": {       //\"port\": 9001,       \"NonSecurePort\": 80,       \"HostName\": \"locationa.api\",       \"InstanceId\": \"LocationA.API,Port:80\",       \"StatusPageUrlPath\": \"/swagger/index.html\"       //\"HealthCheckUrlPath\": \"/api/values/healthcheck\"     }   } }       Add docker file in the project   Dockerfile   #See https://aka.ms/containerfastmode to understand how Visual Studio uses this Dockerfile to build your images for faster debugging.  FROM mcr.microsoft.com/dotnet/aspnet:6.0 AS base WORKDIR /app EXPOSE 80 EXPOSE 443  FROM mcr.microsoft.com/dotnet/sdk:6.0 AS build WORKDIR /src COPY [\"LocationA.API/LocationA.API.csproj\", \"Location.API/\"] RUN dotnet restore \"LocationA.API/LocationA.API.csproj\" COPY . . WORKDIR \"/src/LocationA.API\" RUN dotnet build \"LocationA.API.csproj\" -c Release -o /app/build  FROM build AS publish RUN dotnet publish \"LocationA.API.csproj\" -c Release -o /app/publish  FROM base AS final WORKDIR /app COPY --from=publish /app/publish . ENTRYPOINT [\"dotnet\", \"LocationA.API.dll\"]   Step 4: Organize LocationB.API project      Register Eureka and modify program.cs as follows.   Program.cs    using Steeltoe.Discovery.Client; using Steeltoe.Discovery.Eureka;  var builder = WebApplication.CreateBuilder(args);  // Add services to the container.  // Add or register service discovery to your application builder.Services.AddServiceDiscovery(o =&gt; o.UseEureka());  builder.Services.AddControllers(); // Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle builder.Services.AddEndpointsApiExplorer(); builder.Services.AddSwaggerGen();  var app = builder.Build();  // Configure the HTTP request pipeline. if (app.Environment.IsDevelopment()) {     app.UseSwagger();     app.UseSwaggerUI(); }  //app.UseHttpsRedirection();  app.UseAuthorization();  app.MapControllers();  app.Run();       Create a controller name DistrictController in Controllers folder and modify get method as follows.   DistrictController.cs    using Microsoft.AspNetCore.Mvc;  namespace LocationB.API.Controllers {     [Route(\"api/[controller]\")]     [ApiController]     public class DistrictController : ControllerBase     {         // GET: api/&lt;DistrictController&gt;         [HttpGet(\"GetAll\")]         public IEnumerable&lt;string&gt; Get()         {             return new string[] { \"Serivce:LocationB.API-&gt;\", \"Kumilla\", \"Bogura\", \"Natore\", \"Kurigram\", \"Natore\" };         }      } }       Modify appsettings.json to connect to the service registry.   appsettings.json   {   \"Logging\": {     \"LogLevel\": {       \"Default\": \"Information\",       \"Microsoft.AspNetCore\": \"Warning\"     }   },   \"AllowedHosts\": \"*\",      \"Spring\": {     \"Application\": {       \"Name\": \"SERVICE.LOCATIONAPI\"     }   },   \"Eureka\": {     \"Client\": {       \"ServiceUrl\": \"http://eureka-server:8761/eureka/\",       \"ValidateCertificates\": false,       \"ShouldRegisterWithEureka\": true     },      // No docke instance added     \"Instance\": {       //\"port\": 9001,       \"NonSecurePort\": 80,       \"HostName\": \"locationb.api\",       \"InstanceId\": \"LocationB.API,Port:80\",       \"StatusPageUrlPath\": \"/swagger/index.html\"     }   } }       Add Dockerfile in the project   Dockerfile    #See https://aka.ms/containerfastmode to understand how Visual Studio uses this Dockerfile to build your images for faster debugging.  FROM mcr.microsoft.com/dotnet/aspnet:6.0 AS base WORKDIR /app EXPOSE 80  FROM mcr.microsoft.com/dotnet/sdk:6.0 AS build WORKDIR /src COPY [\"LocationB.API/LocationB.API.csproj\", \"LocationB.API/\"] RUN dotnet restore \"LocationB.API/LocationB.API.csproj\" COPY . . WORKDIR \"/src/LocationB.API\" RUN dotnet build \"LocationB.API.csproj\" -c Release -o /app/build  FROM build AS publish RUN dotnet publish \"LocationB.API.csproj\" -c Release -o /app/publish  FROM base AS final WORKDIR /app COPY --from=publish /app/publish . ENTRYPOINT [\"dotnet\", \"LocationB.API.dll\"]   Step 5: Organize LocationC.API      Register Eureka and modify program.cs as follows.   Program.cs    using Steeltoe.Discovery.Client; using Steeltoe.Discovery.Eureka;  var builder = WebApplication.CreateBuilder(args);  // Add services to the container.  // Add or register service discovery to your application builder.Services.AddServiceDiscovery(o =&gt; o.UseEureka());  builder.Services.AddControllers(); // Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle builder.Services.AddEndpointsApiExplorer(); builder.Services.AddSwaggerGen();  var app = builder.Build();  // Configure the HTTP request pipeline. if (app.Environment.IsDevelopment()) {     app.UseSwagger();     app.UseSwaggerUI(); }  //app.UseHttpsRedirection();  app.UseAuthorization();  app.MapControllers();  app.Run();       Create a controller name DistrictController in Controllers folder and modify get method as follows.   DistrictController.cs    using Microsoft.AspNetCore.Mvc;  namespace LocationC.API.Controllers {     [Route(\"api/[controller]\")]     [ApiController]     public class DistrictController : ControllerBase     {         // GET: api/&lt;DistrictController&gt;         [HttpGet(\"GetAll\")]         public IEnumerable&lt;string&gt; Get()         {             return new string[] {\"Serivce:LocationC.API-&gt;\",\"Kustia\", \"Norail\", \"Kurigram\", \"Netrokona\"};         }     } }       Modify appsettings.json to connect to the service registry.   appsettings.json    {   \"Logging\": {     \"LogLevel\": {       \"Default\": \"Information\",       \"Microsoft.AspNetCore\": \"Warning\"     }   },   \"AllowedHosts\": \"*\",      \"Spring\": {     \"Application\": {       \"Name\": \"SERVICE.LOCATIONAPI\"     }   },   \"Eureka\": {     \"Client\": {       \"ServiceUrl\": \"http://eureka-server:8761/eureka/\",       \"ValidateCertificates\": false,       \"ShouldRegisterWithEureka\": true     },      // No docke instance added     \"Instance\": {       //\"port\": 9001,       \"NonSecurePort\": 80,       \"HostName\": \"locationc.api\",       \"InstanceId\": \"LocationC.API,Port:80\",       \"StatusPageUrlPath\": \"/swagger/index.html\"     }   } }       Add Dockerfile in the project   Dockerfile    #See https://aka.ms/containerfastmode to understand how Visual Studio uses this Dockerfile to build your images for faster debugging.  FROM mcr.microsoft.com/dotnet/aspnet:6.0 AS base WORKDIR /app EXPOSE 80  FROM mcr.microsoft.com/dotnet/sdk:6.0 AS build WORKDIR /src COPY [\"LocationC.API/LocationC.API.csproj\", \"LocationC.API/\"] RUN dotnet restore \"LocationC.API/LocationC.API.csproj\" COPY . . WORKDIR \"/src/LocationC.API\" RUN dotnet build \"LocationC.API.csproj\" -c Release -o /app/build  FROM build AS publish RUN dotnet publish \"LocationC.API.csproj\" -c Release -o /app/publish  FROM base AS final WORKDIR /app COPY --from=publish /app/publish . ENTRYPOINT [\"dotnet\", \"LocationC.API.dll\"]    Step 6: Organize BFF.Web   In this stage, we are going to configure a gateway to communicate with other services using ocelot.      Create two folder name - Routes.dev and Routes.Prod  in root directory and add the following files ocelot.global.json, ocelot.location.api.json, ocelot.SwaggerEndPoints.json in Routes.dev and Routes.Prod folder.   *Now modify the json files as follows.   ocelot.location.api.json    {   \"Routes\": [     {       \"DownstreamPathTemplate\": \"/{everything}\",       \"DownstreamScheme\": \"http\",       \"SwaggerKey\": \"location\",       \"UseServiceDiscovery\": true,       \"ServiceName\": \"SERVICE.LOCATIONAPI\",       \"UpstreamPathTemplate\": \"/location/{everything}\",       \"UpstreamHttpMethod\": [         \"GET\",         \"POST\",         \"PUT\",         \"DELETE\"       ],        /*         LeastConnection - tracks which services are dealing with requests and sends new requests to service with least existing requests. The algorythm state is not distributed across a cluster of Ocelot’s.         RoundRobin - loops through available services and sends requests. The algorythm state is not distributed across a cluster of Ocelot’s.         NoLoadBalancer - takes the first available service from config or service discovery.         CookieStickySessions - uses a cookie to stick all requests to a specific server       */        \"LoadBalancerOptions\": {         \"Type\": \"RoundRobin\"       }     }   ] }    ocelot.product.api.json    {   \"Routes\": [     {       \"DownstreamPathTemplate\": \"/{everything}\",       \"DownstreamScheme\": \"http\",       \"SwaggerKey\": \"product\",       \"UseServiceDiscovery\": true,       \"ServiceName\": \"SERVICE.PRODUCTAPI\",       \"UpstreamPathTemplate\": \"/product/{everything}\",       \"UpstreamHttpMethod\": [         \"GET\",         \"POST\",         \"PUT\",         \"DELETE\"       ],         /*         LeastConnection - tracks which services are dealing with requests and sends new requests to service with least existing requests. The algorythm state is not distributed across a cluster of Ocelot’s.         RoundRobin - loops through available services and sends requests. The algorythm state is not distributed across a cluster of Ocelot’s.         NoLoadBalancer - takes the first available service from config or service discovery.         CookieStickySessions - uses a cookie to stick all requests to a specific server       */        \"LoadBalancerOptions\": {         \"Type\": \"LeastConnection\"       }      }   ] }    ocelot.global.json    {   \"GlobalConfiguration\": {     \"RequestIdKey\": \"OcRequestId\",     \"DownstreamScheme\": \"http\",     \"UseServiceDiscovery\": true,     \"ServiceDiscoveryProvider\": {       \"Host\": \"bff.web\",       \"Port\": 80,       //Type can be Consul, Eureka       \"Type\": \"Eureka\"      }   } }    ocelot.SwaggerEndPoints.json    {   \"SwaggerEndPoints\": [     {       \"Key\": \"bff.web\",       \"TransformByOcelotConfig\": false,       \"Config\": [         {           \"Name\": \"BFF.Web\",           \"Version\": \"1.0\",           \"Url\": \"http://bff.web:80/swagger/v1/swagger.json\"         }       ]     },     {       \"Key\": \"location\",       \"TransformByOcelotConfig\": true,       \"Config\": [         {           \"Name\": \"Location.API\",           \"Version\": \"1.0\",           \"Url\": \"http://bff.web:80/location/swagger/v1/swagger.json\"         }       ]     }   ] }       Add AlterUpstream class in Config folder   AlterUpstream.cs    using Newtonsoft.Json; using Newtonsoft.Json.Linq;  namespace BFF.Web.Config {     public class AlterUpstream     {         public static string AlterUpstreamSwaggerJson(HttpContext context, string swaggerJson)         {             var swagger = JObject.Parse(swaggerJson);             // ... alter upstream json             return swagger.ToString(Formatting.Indented);         }     } }       Modify Program.cs file as follows   Program.cs    using BFF.Web.Config; using MMLib.SwaggerForOcelot.DependencyInjection; using Ocelot.DependencyInjection; using Ocelot.Middleware; using Ocelot.Provider.Eureka; using Ocelot.Provider.Polly; using Steeltoe.Discovery.Client; using Steeltoe.Discovery.Eureka;  var builder = WebApplication.CreateBuilder(args);  // Add services to the container.  var routes = \"\"; #if DEBUG routes = \"Routes.dev\"; #else routes = \"Routes.prod\"; #endif ;  builder.Configuration.AddOcelotWithSwaggerSupport(options =&gt; {     options.Folder = routes; });  // Configure ocelot builder.Services.AddOcelot(builder.Configuration).AddEureka().AddPolly();  //builder.Services.AddOcelot(builder.Configuration).AddPolly(); builder.Services.AddSwaggerForOcelot(builder.Configuration);  // Add or register service discovery to your application builder.Services.AddServiceDiscovery(o =&gt; o.UseEureka());  builder.Host.ConfigureAppConfiguration((hostingContext, config) =&gt; {     config.SetBasePath(Directory.GetCurrentDirectory())     .AddJsonFile(\"appsettings.json\", optional: false, reloadOnChange: true)     .AddJsonFile($\"appsettings.local.json\", optional: true, reloadOnChange: true)     .AddJsonFile($\"appsettings.{hostingContext.HostingEnvironment.EnvironmentName}.json\", optional: true)     .AddOcelot(routes, builder.Environment)     .AddEnvironmentVariables(); });  builder.Services.AddControllers(); // Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle builder.Services.AddEndpointsApiExplorer(); builder.Services.AddSwaggerGen();  var app = builder.Build();  // Configure the HTTP request pipeline. if (app.Environment.IsDevelopment()) {     app.UseSwagger();     //app.UseSwaggerUI(); }    //app.UseHttpsRedirection();  //app.UseOcelot(); app.UseAuthorization();  app.UseSwaggerForOcelotUI(options =&gt; {     options.PathToSwaggerGenerator = \"/swagger/docs\";     options.ReConfigureUpstreamSwaggerJson = AlterUpstream.AlterUpstreamSwaggerJson;  }).UseOcelot().Wait();  app.MapControllers();  app.Run();       Now modify appsettings.json for BFF.Web   Appsettings.json    {   \"Logging\": {     \"LogLevel\": {       \"Default\": \"Information\",       \"Microsoft.AspNetCore\": \"Warning\",       \"Microsoft.Hosting.Lifetime\": \"Information\"     }   },     \"Spring\": {     \"Application\": {       \"Name\": \"SERVICE.BFF.Web\"     }   },   \"Eureka\": {     \"Client\": {       \"ServiceUrl\": \"http://eureka-server:8761/eureka/\",       \"ValidateCertificates\": false,       \"ShouldRegisterWithEureka\": true     },      \"Instance\": {       \"NonSecurePort\": 80,       \"HostName\": \"bff.web\",       \"InstanceId\": \"BFF.Web\",       \"StatusPageUrlPath\": \"/swagger/index.html\"       //\"HealthCheckUrlPath\": \"/api/values/healthcheck\"       //\"StatusPageUrlPath\": \"/api/values/status\"     },      \"AllowedHosts\": \"*\"   }  }    Step 7: Configure docker-compose      Add docker-compose file in the project and modify as follows   docker-compose.yml    version: '3.4'  services:    eureka-server:     container_name: eureka-server     image: steeltoeoss/eurekaserver:latest     restart: on-failure     hostname: eureka-server     networks:       - backend_network     #ports:     # - \"8761:8761\"    locationa.api:     container_name: locationa.api     image: ${DOCKER_REGISTRY-}locationaapi     restart: on-failure     hostname: locationa.api     build:       context: .       dockerfile: Locationa.API/Dockerfile     networks:       - backend_network    locationb.api:     container_name: locationb.api     image: ${DOCKER_REGISTRY-}locationbapi     restart: on-failure     hostname: locationb.api     build:       context: .       dockerfile: LocationB.API/Dockerfile     networks:       - backend_network    locationc.api:     container_name: locationc.api     image: ${DOCKER_REGISTRY-}locationcapi     restart: on-failure     hostname: locationc.api     build:       context: .       dockerfile: LocationC.API/Dockerfile     networks:       - backend_network     bff.web:     container_name: bff.web     image: ${DOCKER_REGISTRY-}bffweb     restart: on-failure     hostname: bff.web     build:       context: .       dockerfile: BFF.Web/Dockerfile     networks:       - backend_network   networks:     backend_network:    docker-compose.override.yml    version: '3.4'  services:   eureka-server:     environment:       - EUREKA_SERVER_ENABLE_SELF_PRESERVATION=false     ports:       - 8761:8761      locationa.api:     environment:       - ASPNETCORE_ENVIRONMENT=Development       #- ASPNETCORE_URLS=https://+:443;http://+:80       - ASPNETCORE_URLS=http://+:80       - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka     ports:       - \"9001:80\"       #- \"4001:443\"     volumes:       - ${APPDATA}/Microsoft/UserSecrets:/root/.microsoft/usersecrets:ro       - ${APPDATA}/ASP.NET/Https:/root/.aspnet/https:ro     depends_on:       - eureka-server    locationb.api:     environment:       - ASPNETCORE_ENVIRONMENT=Development       - ASPNETCORE_URLS=http://+:80       - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka     ports:       - \"9002:80\"     volumes:       - ${APPDATA}/Microsoft/UserSecrets:/root/.microsoft/usersecrets:ro       - ${APPDATA}/ASP.NET/Https:/root/.aspnet/https:ro     depends_on:       - eureka-server     locationc.api:     environment:       - ASPNETCORE_ENVIRONMENT=Development       - ASPNETCORE_URLS=http://+:80       - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka     ports:       - \"9003:80\"     depends_on:       - eureka-server    bff.web:     environment:       - ASPNETCORE_ENVIRONMENT=Development       - ASPNETCORE_URLS=http://+:80       - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka     ports:       - \"8001:80\"     volumes:       - ${APPDATA}/Microsoft/UserSecrets:/root/.microsoft/usersecrets:ro       - ${APPDATA}/ASP.NET/Https:/root/.aspnet/https:ro     depends_on:       - eureka-server       - locationa.api       - locationb.api       - locationc.api       Now open your browser and visit http://localhost:8761/ to see Eureka server   Step 8: Now run the applications      Set docker-compose as start up project   Now run the application   Now browse location service using BFF. You will get different data from different service as round robin basis   You will see Eureka server as follows.      Source code  ","categories": ["C#","ASP.NET Core","Eureka","Microservices","Software Architecture","Load Balancer"],
        "tags": ["csharp","aspnetcore","eureka","microservices","softwarearchitecture","lb"],
        "url": "http://localhost:4000/Configure-Load-Balancer-using-Eureka-and-ocelot-with-aspnet-core/",
        "teaser":null},{
        "title": "Introduction to the Yield Statement",
        "excerpt":"Introduction   The yield statement is a powerful construct in C# that allows you to create custom iterators. It allows you to define a method that returns a sequence of values, but instead of returning all of the values at once, it can return them one at a time as requested. This is particularly useful when working with large data sets or when you want to avoid loading all of the data into memory at once.   The yield statement works by suspending the method’s execution and returning a value to the caller. When the method is called again, it continues executing from where it left off, remembering its previous state.   Basic Usage of the Yield Statement   To use the yield statement, you need to define a method that returns an IEnumerable&lt;T&gt; or IEnumerator&lt;T&gt; object. Inside the method, you can use the yield return statement to return a value from the sequence.   Here’s an example of a method that returns a sequence of integers using the yield statement:   public static IEnumerable&lt;int&gt; GetNumbers() {     yield return 1;     yield return 2;     yield return 3;     yield return 4;     yield return 5; }    In this example, the GetNumbers() method defines a sequence of integers by using five yield return statements. When this method is called, it will return an IEnumerable&lt;int&gt; object that represents the sequence of integers.   You can use a foreach loop to iterate over the sequence and retrieve each value:   foreach (int num in GetNumbers()) {     Console.WriteLine(num); }   This code will output the following:   1 2 3 4 5   Advanced Usage of the Yield Statement   The yield statement can also be used with the yield break statement to stop the sequence early. Here’s an example of a method that returns a sequence of integers up to a specified limit:   public static IEnumerable&lt;int&gt; GetNumbersUpTo(int limit) {     for (int i = 1; i &lt;= limit; i++)     {         yield return i;     }      yield break; }   In this example, the GetNumbersUpTo() method defines a sequence of integers up to a specified limit. It uses a for loop to generate the sequence, and then it uses the yield break statement to stop the sequence early.   You can call this method and pass in a limit to get the sequence:   foreach (int num in GetNumbersUpTo(3)) {     Console.WriteLine(num); }   This code will output the following:   1 2 3   Conclusion  The yield statement is a powerful feature in C# that allows you to define custom iterators that can return sequences of values. It can be used to create efficient and memory-friendly code when working with large data sets or when you need to retrieve data on-demand. By using the yield return and yield break statements, you can define complex sequences and stop them early when necessary.  ","categories": ["C#"],
        "tags": ["csharp"],
        "url": "http://localhost:4000/introduction-to-the-yield-statement/",
        "teaser":null},{
        "title": "Extension Methods in C# - An Introduction with Examples and Output",
        "excerpt":"Introduction   Extension methods are a powerful feature in C# that allows developers to add new functionality to existing classes without modifying the original source code. This article will provide an introduction to extension methods, along with some examples and output to demonstrate how they work.   What are Extension Methods?   An extension method is a static method that is used to extend the functionality of an existing class without modifying the original class definition. Extension methods are defined in a static class and must be marked with the “this” keyword before the first parameter. This tells the compiler that the method is an extension method and can be called as if it were a member of the extended class.   Extension methods are typically used to add functionality to classes that cannot be modified directly, such as classes in the .NET Framework. They are also useful for creating reusable code that can be shared across multiple projects.   Example of Extension Method   Here’s an example of how to create an extension method that adds a new method to the String class:   public static class StringExtensions {     public static bool IsNullOrEmpty(this string value)     {         return string.IsNullOrEmpty(value);     } }    In this example, the “IsNullOrEmpty” method is added to the String class as an extension method. The method checks whether the string is null or empty and returns a boolean value.   To use the extension method, simply call it as if it were a member of the String class:   string str = null; bool result = str.IsNullOrEmpty();   In this example, the “IsNullOrEmpty” method is called on a null string. Because it is an extension method, it can be called even though the String class does not have a method with this name.   Output of the Extension Method Example   The output of the above code will be “true”, since the string “str” is null and the “IsNullOrEmpty” method returns true for null strings.   Here’s another example that demonstrates how to create an extension method that calculates the sum of an array of integers:   public static class IntExtensions {     public static int Sum(this int[] values)     {         int sum = 0;         foreach (int value in values)         {             sum += value;         }         return sum;     } }  To use the extension method, simply call it as if it were a member of the int array:  ```csharp int[] values = { 1, 2, 3, 4, 5 }; int sum = values.Sum();    In this example, the “Sum” method is called on an int array. Because it is an extension method, it can be called even though the int class does not have a method with this name.   Output of the Extension Method Example   The output of the above code will be “15”, since the “Sum” method calculates the sum of the values in the array.   Another Example    using System;  namespace ExtensionMethodsExample {     public static class MathExtensions     {         public static double RoundTo(this double number, int decimalPlaces)         {             double multiplier = Math.Pow(10, decimalPlaces);             return Math.Round(number * multiplier) / multiplier;         }          public static int Factorial(this int number)         {             if (number == 0 || number == 1)             {                 return 1;             }             else             {                 return number * Factorial(number - 1);             }         }     }      class Program     {         static void Main(string[] args)         {             double pi = 3.141592653589793;             double roundedPi = pi.RoundTo(4);             Console.WriteLine($\"Pi rounded to 4 decimal places: {roundedPi}\");              int num = 5;             int factorial = num.Factorial();             Console.WriteLine($\"Factorial of {num}: {factorial}\");         }     } }    In this example, we have created a static class called “MathExtensions” that contains two extension methods: “RoundTo” and “Factorial”.   The “RoundTo” method takes a double number and an integer number of decimal places, and returns the number rounded to the specified number of decimal places.   The “Factorial” method takes an integer number and calculates its factorial.   In the Main method, we have created a double variable “pi” and called the “RoundTo” method on it to round it to 4 decimal places. We have also created an integer variable “num” and called the “Factorial” method on it to calculate its factorial.   The output of this code will be:   Pi rounded to 4 decimal places: 3.1416 Factorial of 5: 120   This advanced example demonstrates how extension methods can be used to add complex functionality to existing classes, such as calculating the factorial of an integer or rounding a double to a specified number of decimal places.   Conclusion   Extension methods are a powerful feature in C# that allow developers to add new functionality to existing classes without modifying the original source code. They are defined in a static class and must be marked with the “this” keyword before the first parameter. Extension methods are typically used to add functionality to classes that cannot be modified directly, such as classes in the .NET Framework. They are also useful for creating reusable code that can be shared across multiple projects.  ","categories": ["C#"],
        "tags": ["csharp"],
        "url": "http://localhost:4000/extension-method-in-csharp/",
        "teaser":null},{
        "title": "JavaScript setInterval method with some example",
        "excerpt":"Introduction   JavaScript provides a built-in method called setInterval that allows you to execute a function or a piece of code repeatedly at a specified time interval. This can be useful for a variety of tasks, such as updating the content of a webpage, polling a server for new data, or animating an element on the page.   Examples   To use setInterval, you simply need to pass a function or a code block as the first argument, and the time interval (in milliseconds) as the second argument. Here’s a simple example:   setInterval(() =&gt; {   console.log(\"Hello, world!\"); }, 1000);    In this example, the setInterval method will execute the arrow function every 1000 milliseconds (or 1 second), logging the message “Hello, world!” to the console.   You can also pass a regular function as the first argument to setInterval, like this:   function sayHello() {   console.log(\"Hello, world!\"); } setInterval(sayHello, 1000);   This code will have the same effect as the previous example, but using a named function instead of an arrow function.   Another useful feature of setInterval is that it returns a unique ID that you can use to stop the interval using the clearInterval method. Here’s an example:   const intervalID = setInterval(() =&gt; {   console.log(\"Hello, world!\"); }, 1000);  setTimeout(() =&gt; {   clearInterval(intervalID); }, 5000);   In this code, we store the interval ID returned by setInterval in a variable called intervalID. Then, after 5 seconds (5000 milliseconds) have elapsed, we use the clearInterval method to stop the interval by passing the intervalID variable as an argument.   Finally, you can also pass arguments to the function being executed by setInterval. Here’s an example:   let count = 0; function incrementCount(step) {   count += step;   console.log(`Count is now ${count}`); }  setInterval(incrementCount, 1000, 2);   In this example, we’re using the incrementCount function to increment a count variable by a specified step. We pass the value 2 as the third argument to setInterval, which is then passed as the step argument to incrementCount.   These are just a few examples of how you can use the setInterval method in JavaScript to execute code at a specified time interval. Whether you’re updating the content of a webpage or animating an element, setInterval is a powerful tool that can help you achieve your goals.   ","categories": ["JavaScript"],
        "tags": ["javascript"],
        "url": "http://localhost:4000/some-example-of-javascript-setInterval-method/",
        "teaser":null},{
        "title": "Singleton design pattern using C#",
        "excerpt":"Design Pattern   A software design pattern is a general, reusable solution to a commonly occurring problem in software design. Design patterns are typically documented in a standardized format, making it easy for developers to understand and apply them to their own software projects. It is like a template to solve a problem.   Singleton Design Pattern   The Singleton pattern is a design pattern that restrict to create object more than once and provides a global point of access to that instance. This pattern is useful when you want to ensure that only one instance of a class is created and used throughout the entire application.   The Singleton pattern is used when you want to:      Ensure that only one instance of a class is created.   Provide a single point of access to that instance.   Manage a shared resource.   Some downside of implementing the Singleton Pattern are      It can make unit testing more challenging since it introduces a global state to the application.   It limiting potential parallelism in the program through the use of locking.   In C#, there are several methods to implement a singleton pattern. The singleton pattern commonly includes the following attributes:      A single constructor that is private and has no parameters.   A sealed class.   A static variable that holds a reference to the single instance that is created.   A public and static method that provides access to the created instance.   Implementation of Singleton by C#   Step 1: Create EmployeeInfo class   This poco class is to hold employee information.        public class Employee     {         public int Id { get; set; }         public string Name { get; set; }         public int Age { get; set; }     }   Step 2: Create a singleton class   Here EmployeeService is a singleton class. Constructor of this class is private so that nobody can create its instance from outside.  Instance() is a static method which creates instance of the singleton class. It actually forces that only one instance of the object will be created. Lock() is used to create instance of the singleton pattern in thread safe manner in multi threaded environment. The other two methods are used to add employee information in list and get employee salary. These two are as usual method.Don’t mix up Singleton class and Static class. Keep in mind; in static class everything must be static like Method, constructor, properties. But in singleton class it is not required. Hope, you will be clear after the following example.       public sealed class SingletonEmployeeService     {         // singleton static object         private static SingletonEmployeeService instance;          // an object to use in a singleton class         private List&lt;Employee&gt; employees = null;          // Restrict to create object of singleton class         private SingletonEmployeeService()         {             if(employees == null)             {                 employees = new List&lt;Employee&gt;();             }         }          // The static method to provide global access to the singleton object         // Get singleton object of SingletonEmployeeService class         public static SingletonEmployeeService GetInstance()         {             if (instance == null)             {                 // Thread safe singleton                 lock (typeof(SingletonEmployeeService))                 {                     instance = new SingletonEmployeeService();                 }             }             return instance;         }          // Add employee to the employees list         public void AddEmployee(Employee employee)         {             employees.Add(employee);         }          // Get name of the employee by Id          public string GetEmployeeName(int id) {                      string name = employees.Where(p =&gt; p.Id == id).First().Name;             return name;         }      }   Here’s how the code works:      The class is marked as “sealed”, which means it cannot be inherited.   The class has a private static object named “instance”, which holds the reference to the single instance of the class.   The class also has a private List of Employee objects, which is the actual data that this class is managing.   The constructor of the class is marked as private, which means that it can only be called from within the class itself. This ensures that no other code can create an instance of the class.   The only way to access the singleton instance of the class is through the public static method named “GetInstance()”, which checks whether the instance has been created already. If not, it creates a new instance of the class in a thread-safe manner using a lock statement.   lock() is used to create instance of the singleton pattern in thread safe manner in multi threaded environment.   The class has two public methods, “AddEmployee()” and “GetEmployeeName()”, which can be used to add an employee to the employees list and to get the name of an employee by their ID, respectively.   Step 3: Access the singleton class   This class creates an instance of singleton class by EmployeeService objEmployeeService = EmployeeService.Instance(); and access singleton class.       public class Program     {         static void Main(string[] args)         {              Employee emp1 = new Employee { Id = 1, Name = \"John\", Age = 30 };             Employee emp2 = new Employee { Id = 2, Name = \"Abraham\", Age = 40};                           // Create singleton instance using GetInstance method not new             SingletonEmployeeService singletonEmployeeService = SingletonEmployeeService.GetInstance();                          singletonEmployeeService.AddEmployee(emp1);             singletonEmployeeService.AddEmployee(emp2);              Console.WriteLine(singletonEmployeeService.GetEmployeeName(2));              Console.ReadKey();         }     }      // Output:     // Abraham    This C# code shows an example of how to use the SingletonEmployeeService class to manage employee data. The main() method creates two Employee objects and adds them to the singleton instance of the SingletonEmployeeService class using the AddEmployee() method. It then retrieves the name of the employee with ID=2 using the GetEmployeeName() method and prints it to the console.   The key thing to note here is that the SingletonEmployeeService class is accessed using the GetInstance() method, rather than creating a new instance using the “new” keyword. This ensures that there is only one instance of the SingletonEmployeeService class in the application and that it is globally accessible.   The code creates two Employee objects with different ID, Name, and Age values and adds them to the employees list of the singleton instance using the AddEmployee() method. Then, it retrieves the name of the employee with ID=2 using the GetEmployeeName() method, which returns the name of the employee as “Abraham” and prints it to the console using the Console.WriteLine() method.   Overall, this code demonstrates how the Singleton pattern can be used to ensure that there is only one instance of a class in the application and how this instance can be accessed globally to manage data in a centralized manner.   Source code  ","categories": ["OOP","C#","Design Pattern"],
        "tags": ["OOP","csharp","designpattern"],
        "url": "http://localhost:4000/singleton-design-pattern/",
        "teaser":null},{
        "title": "Simplified Sample Application: Building with Redux Toolkit, React.js, and ASP.NET Core",
        "excerpt":"Introduction   Redux is a popular state management library for JavaScript applications. It is commonly used with front-end frameworks like React, Angular, and Vue, but can also be used with other frameworks or even vanilla JavaScript. At its core, Redux provides a predictable state container for managing the state of an application. It helps you manage the data that needs to be shared across different components in a more organized and efficient way. The main concept behind Redux is that the entire state of an application is stored in a single JavaScript object, known as the “store.” The Redux store is immutable, which means that you cannot directly modify the state. Instead, to make changes to the state, you dispatch actions. An action is a plain JavaScript object that describes what should change in the state. These actions are processed by pure functions called “reducers,” which take the current state and the dispatched action and return a new state. The unidirectional data flow in Redux ensures that the state changes are predictable and easy to debug, as every state mutation is explicitly defined by actions and reducers.   Redux Toolkit   Redux Toolkit is an official package from the Redux team that simplifies and streamlines the process of working with Redux. It provides a set of utilities and best practices to make Redux development more efficient, maintainable, and less boilerplate-heavy. Before Redux Toolkit, working with Redux required writing a significant amount of code to set up the store, define actions, and write reducers. Redux Toolkit abstracts away much of this boilerplate code and provides a more intuitive and standardized way of using Redux.   Key features of Redux Toolkit include:      Configuration Simplicity: Redux Toolkit provides a function called configureStore that creates a Redux store with default configurations. It includes sensible defaults for setting up the store, applying middleware, and enabling Redux DevTools for debugging.   Reduces Boilerplate: With Redux Toolkit, you can define “slice” reducers using the createSlice function. A slice is a single part of the Redux store that includes both the reducer and its related actions. This reduces the need to write separate action creators and action types manually.   Immutability and Immer Integration: Redux Toolkit leverages the immer library to handle state immutability in a more convenient way. This allows you to write reducers that look like they are directly mutating the state while Redux Toolkit takes care of creating a new immutable state behind the scenes.   Thunk Simplification: Redux Toolkit provides the createAsyncThunk function to simplify the creation of thunks for handling asynchronous actions. It makes it easier to write async logic, such as API calls, by dispatching pending, fulfilled, and rejected actions automatically.   Easy Migration: If you already have an existing Redux application, Redux Toolkit provides a smooth migration path. It offers compatibility with standard Redux code, allowing you to gradually transition your codebase to the new approach.   Objective:  In this article I will show you how to build a front-end application using redux toolkit with react and asp.net core. Here I am going to create a backend application and a front-end application. Backend application is simple asp.net core application which exposes API. Front end application consumes the api, perform CRUD operation and manage state using redux toolkit. Let’s start.   Tools and Technology Used      ASP.net core Web API   Visual C#   React.js   Redux Toolkit   Axios   Bootstrap   react-toastify   Step 1: Create a asp.net core web api project name Ecommerce.API   Step 2: Install the following nuget packages in the project.   Microsoft.EntityFrameworkCore Microsoft.EntityFrameworkCore.InMemory Microsoft.EntityFrameworkCore.SqlServer Microsoft.EntityFrameworkCore.Tools Microsoft.VisualStudio.Web.CodeGeneration.Design   Step 3: Create two Model class name Product and Customer in Models folder.   Product.cs   namespace ECommerce.API.Models {     public class Product     {         public int Id { get; set; }         public string? Name { get; set; }         public string? Description { get; set; }         public decimal Price { get; set; }         public int StockQuantity { get; set; }     } }    Customer.cs    namespace ECommerce.API.Models {     public class Customer     {         public int Id { get; set; }         public string? FirstName { get; set; }         public string? LastName { get; set; }         public string? Email { get; set; }         public string? Phone { get; set; }         public DateTime BirthDate { get; set; }      } }     Step 4: Create a Context class name ECommerceContext for data access in Db folder.   ECommerceContext.cs   using ECommerce.API.Models; using Microsoft.EntityFrameworkCore;  namespace ECommerce.API.Db { public class ECommerceContext : DbContext { public ECommerceContext(DbContextOptions&lt;ECommerceContext&gt; options) : base(options) {          }         public DbSet&lt;Product&gt; Products { get;set; }         public DbSet&lt;Customer&gt; Customers { get; set; }     }  }    Step 5: Create a Seed Generator class name SeedGenerator in Db folder.   SeedGenerator.cs   using ECommerce.API.Models;  namespace ECommerce.API.Db {     public class SeedGenerator     {         public static void SeedData(WebApplication app)         {             using (var scope = app.Services.CreateScope())             {                 var context = scope.ServiceProvider.GetService&lt;ECommerceContext&gt;();                   if (!context.Products.Any())                 {                      context.Products.AddRange(                         new Product                         {                             Name = \"Smartphone\",                             Description = \"A powerful and sleek smartphone with advanced features.\",                             Price = 699.99m,                             StockQuantity = 50                         },                         new Product                         {                             Name = \"Laptop\",                             Description = \"A high-performance laptop for both work and entertainment.\",                             Price = 1299.99m,                             StockQuantity = 25                         },                         new Product                         {                             Name = \"Wireless Earbuds\",                             Description = \"Premium wireless earbuds with noise-canceling technology.\",                             Price = 149.99m,                             StockQuantity = 100                         },                         new Product                         {                             Name = \"Smart Watch\",                             Description = \"A stylish smartwatch with fitness tracking and app notifications.\",                             Price = 199.99m,                             StockQuantity = 30                         });                 }                   if (!context.Customers.Any())                 {                     context.Customers.AddRange(                         new Customer                         {                             Id = 1,                             FirstName = \"John\",                             LastName = \"Doe\",                             Email = \"john@example.com\",                             Phone = \"555-1234\",                             BirthDate = new DateTime(1990, 5, 15)                         },                         new Customer                         {                             Id = 2,                             FirstName = \"Jane\",                             LastName = \"Smith\",                             Email = \"jane@example.com\",                             Phone = \"555-5678\",                             BirthDate = new DateTime(1985, 8, 22)                         },                         new Customer                         {                             Id = 3,                             FirstName = \"Michael\",                             LastName = \"Johnson\",                             Email = \"michael@example.com\",                             Phone = \"555-9876\",                             BirthDate = new DateTime(1992, 10, 10)                         });                 }                     context.SaveChanges();              }         }     } }     Step 6: Configure Program class as follows.   Program.cs    using ECommerce.API.Db; using Microsoft.EntityFrameworkCore;  var builder = WebApplication.CreateBuilder(args);  // Add services to the container.  builder.Services.AddDbContext&lt;ECommerceContext&gt;(opt =&gt; opt.UseInMemoryDatabase(\"ECommerceDB\"));  builder.Services.AddControllers(); // Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle builder.Services.AddEndpointsApiExplorer(); builder.Services.AddSwaggerGen();  var app = builder.Build();  //For seeding data SeedGenerator.SeedData(app);  // Configure the HTTP request pipeline. if (app.Environment.IsDevelopment()) {     app.UseSwagger();     app.UseSwaggerUI();      // Enable CORS     app.UseCors(x =&gt; x     .AllowAnyMethod()     .AllowAnyHeader()     .SetIsOriginAllowed(origin =&gt; true) // allow any origin     .AllowCredentials()); // allow credentials }  app.UseHttpsRedirection();  app.UseAuthorization();  app.MapControllers();  app.Run();    Step 7: Create two Controller class name ProductsController and CustomersController in Controllers folder.   ProductsController.cs   using ECommerce.API.Db; using ECommerce.API.Models; using Microsoft.AspNetCore.Mvc; using Microsoft.EntityFrameworkCore;  namespace ECommerce.API.Controllers {     [Route(\"api/[controller]\")]     [ApiController]     public class ProductsController : ControllerBase     {         private readonly ECommerceContext _context;          public ProductsController(ECommerceContext context)         {             _context = context;         }          // GET: api/Products         [HttpGet]         public async Task&lt;ActionResult&lt;IEnumerable&lt;Product&gt;&gt;&gt; GetProducts()         {           if (_context.Products == null)           {               return NotFound();           }             return await _context.Products.ToListAsync();         }          // GET: api/Products/5         [HttpGet(\"{id}\")]         public async Task&lt;ActionResult&lt;Product&gt;&gt; GetProduct(int id)         {           if (_context.Products == null)           {               return NotFound();           }             var product = await _context.Products.FindAsync(id);              if (product == null)             {                 return NotFound();             }              return product;         }          // PUT: api/Products/5         // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754         [HttpPut(\"{id}\")]         public async Task&lt;IActionResult&gt; PutProduct(int id, Product product)         {             if (id != product.Id)             {                 return BadRequest();             }              _context.Entry(product).State = EntityState.Modified;              try             {                 await _context.SaveChangesAsync();             }             catch (DbUpdateConcurrencyException)             {                 if (!ProductExists(id))                 {                     return NotFound();                 }                 else                 {                     throw;                 }             }              return NoContent();         }          // POST: api/Products         // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754         [HttpPost]         public async Task&lt;ActionResult&lt;Product&gt;&gt; PostProduct(Product product)         {           if (_context.Products == null)           {               return Problem(\"Entity set 'ECommerceContext.Products'  is null.\");           }             _context.Products.Add(product);             await _context.SaveChangesAsync();              return CreatedAtAction(\"GetProduct\", new { id = product.Id }, product);         }          // DELETE: api/Products/5         [HttpDelete(\"{id}\")]         public async Task&lt;IActionResult&gt; DeleteProduct(int id)         {             if (_context.Products == null)             {                 return NotFound();             }             var product = await _context.Products.FindAsync(id);             if (product == null)             {                 return NotFound();             }              _context.Products.Remove(product);             await _context.SaveChangesAsync();              return NoContent();         }          private bool ProductExists(int id)         {             return (_context.Products?.Any(e =&gt; e.Id == id)).GetValueOrDefault();         }     } }    CustomersController.cs    using ECommerce.API.Db; using ECommerce.API.Models; using Microsoft.AspNetCore.Mvc; using Microsoft.EntityFrameworkCore;  namespace ECommerce.API.Controllers {     [Route(\"api/[controller]\")]     [ApiController]     public class CustomersController : ControllerBase     {         private readonly ECommerceContext _context;          public CustomersController(ECommerceContext context)         {             _context = context;         }          // GET: api/Customers         [HttpGet]         public async Task&lt;ActionResult&lt;IEnumerable&lt;Customer&gt;&gt;&gt; GetCustomers()         {           if (_context.Customers == null)           {               return NotFound();           }             return await _context.Customers.ToListAsync();         }          // GET: api/Customers/5         [HttpGet(\"{id}\")]         public async Task&lt;ActionResult&lt;Customer&gt;&gt; GetCustomer(int id)         {           if (_context.Customers == null)           {               return NotFound();           }             var customer = await _context.Customers.FindAsync(id);              if (customer == null)             {                 return NotFound();             }              return customer;         }          // PUT: api/Customers/5         // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754         [HttpPut(\"{id}\")]         public async Task&lt;IActionResult&gt; PutCustomer(int id, Customer customer)         {             if (id != customer.Id)             {                 return BadRequest();             }              _context.Entry(customer).State = EntityState.Modified;              try             {                 await _context.SaveChangesAsync();             }             catch (DbUpdateConcurrencyException)             {                 if (!CustomerExists(id))                 {                     return NotFound();                 }                 else                 {                     throw;                 }             }              return NoContent();         }          // POST: api/Customers         // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754         [HttpPost]         public async Task&lt;ActionResult&lt;Customer&gt;&gt; PostCustomer(Customer customer)         {           if (_context.Customers == null)           {               return Problem(\"Entity set 'ECommerceContext.Customers'  is null.\");           }             _context.Customers.Add(customer);             await _context.SaveChangesAsync();              return CreatedAtAction(\"GetCustomer\", new { id = customer.Id }, customer);         }          // DELETE: api/Customers/5         [HttpDelete(\"{id}\")]         public async Task&lt;IActionResult&gt; DeleteCustomer(int id)         {             if (_context.Customers == null)             {                 return NotFound();             }             var customer = await _context.Customers.FindAsync(id);             if (customer == null)             {                 return NotFound();             }              _context.Customers.Remove(customer);             await _context.SaveChangesAsync();              return NoContent();         }          [HttpGet(\"SearchCustomers\")]         public async Task&lt;ActionResult&lt;IEnumerable&lt;Customer&gt;&gt;&gt; SearchCustomers(string name)         {             if (_context.Customers == null)             {                 return NotFound();             }             List&lt;Customer&gt; customers;             if (name != \"all\")             {                 customers = await _context.Customers.Where(p =&gt; p.FirstName.Contains(name) || p.LastName.Contains(name)).ToListAsync();             }             else             {                 customers = await _context.Customers.ToListAsync();             }             return customers;         }          private bool CustomerExists(int id)         {             return (_context.Customers?.Any(e =&gt; e.Id == id)).GetValueOrDefault();         }     } }    Now our back-end application is ready. You can run and check the application using swagger.   Step 8: Create a react application name - redux-app. Run the following command in your power shell terminal.   npx create-react-app redux-app   Step 9: Install the following packages in the react project   npm install bootstrap@4.6.0 npm install react-router-dom npm install react-toastify npm install react-redux @reduxjs/toolkit npm install axios   Step 10: Create Conversion.js file in src-&gt;utils folder.   Conversion.js   export const convertDateFormat = (date) =&gt; {   let convertedDate = new Date(date);   return convertedDate.toDateString(); };  export const ConvertDateISOString = (date) =&gt; {   return new Date(date).toISOString().slice(0, 10); };   Step 11: Create ToastifyMessage.js file in src-&gt;helper folder.   ToastifyMessage.js   import { toast } from \"react-toastify\";  export const SuccessToastify = (message) =&gt; {   toast.success(message, {     position: toast.POSITION.TOP_CENTER,     autoClose: 3000, // auto close after 30 seconds   }); };  export const WarningTostify = (message) =&gt; {   toast.warning(message, {     position: toast.POSITION.TOP_RIGHT,     autoClose: 3000, // auto close after 30 seconds   }); };  export const ErrorToastify = (message) =&gt; {   toast.error(message, {     position: toast.POSITION.TOP_RIGHT,     autoClose: 3000, // auto close after 30 seconds   }); };  export const InfoToastify = (message) =&gt; {   toast.info(message, {     position: toast.POSITION.TOP_RIGHT,     autoClose: 3000, // auto close after 30 seconds   }); };   Step 12: Configure Http connection using axios      Create BaseURL.js in src-&gt;config folder to set the base URL for API   BaseURL.js   export const Base_URL = \"https://localhost:7288/api\";      Create http-common.js in src-&gt;config folder  http-common.js   import axios from \"axios\"; import { Base_URL } from \"./BaseURL\";  export default axios.create({   baseURL: Base_URL,   headers: {     \"Content-type\": \"application/json\",   }, });   Step 13: Create Service Components      Create ProductService.js in src-&gt;services folder.   ProductService.js   //ProductDataService to make asynchronous HTTP requests import http from \"../config/http-common\";  const getAll = () =&gt; {   return http.get(\"/Products\"); };  const get = (id) =&gt; {   return http.get(`/Products/${id}`); };  const create = (data) =&gt; {   return http.post(\"/Products\", data); };  const update = (id, data) =&gt; {   return http.put(`/Products/${id}`, data); };  const remove = (id) =&gt; {   return http.delete(`/Products/${id}`); }; const ProductDataService = {   getAll,   get,   create,   update,   remove, };  export default ProductDataService;      Create CustomerService.js in src-&gt;services folder.   CustomerService.js   //CustomerDataService to make asynchronous HTTP requests import http from \"../config/http-common\";  const getAll = () =&gt; {   return http.get(\"/Customers\"); };  const get = (id) =&gt; {   return http.get(`/Customers/${id}`); };  const create = (data) =&gt; {   return http.post(\"/Customers\", data); };  const update = (id, data) =&gt; {   return http.put(`/Customers/${id}`, data); };  const remove = (id) =&gt; {   return http.delete(`/Customers/${id}`); };  const findByName = (name) =&gt; {   return http.get(`/Customers/SearchCustomers?name=${name}`); };  const CustomerDataService = {   getAll,   get,   create,   update,   remove,   findByName, };  export default CustomerDataService;   Step 14: Configure Redux      Create Slice, Reducer and Actions : Instead of creating many folders and files for Redux (actions, reducers, types,…), with redux-toolkit we just need all-in-one: slice. A slice is a collection of Redux reducer logic and actions for a single feature.   To create a slice, you only need to define the following:      A name to identify the slice.   The initial state value.   One or more reducer functions to specify how the state can be updated.   Once you’ve created a slice, you can effortlessly export the generated Redux action creators and the reducer function for the entire slice. Redux Toolkit simplifies this process with the createSlice() function, which automatically generates action types and action creators based on the reducer function names you provide.      Create slice for Product state. Create productsSlice.js in src-&gt;redux-&gt;slice folder.   productsSlice.js   import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\"; import ProductDataService from \"../../services/ProductService\";  const initialState = [];  export const createProduct = createAsyncThunk(   \"products/create\",   async (inputData) =&gt; {     const res = await ProductDataService.create(inputData);     return res.data;   } );  export const retrieveProducts = createAsyncThunk(   \"products/retrieve\",   async () =&gt; {     const res = await ProductDataService.getAll();     return res.data;   } );  export const updateProduct = createAsyncThunk(   \"products/update\",   async ({ id, data }) =&gt; {     debugger;     const res = await ProductDataService.update(id, data);     return res.data;   } );  export const deleteProduct = createAsyncThunk(\"products/delete\", async (id) =&gt; {   debugger;   await ProductDataService.remove(id);   return { id }; });  const productSlice = createSlice({   name: \"product\",   initialState,   extraReducers: {     [createProduct.fulfilled]: (state, action) =&gt; {       state.push(action.payload);     },      [retrieveProducts.fulfilled]: (state, action) =&gt; {       return [...action.payload];     },      [updateProduct.fulfilled]: (state, action) =&gt; {       const index = state.findIndex(         (tutorial) =&gt; tutorial.id === action.payload.id       );       state[index] = {         ...state[index],         ...action.payload,       };     },      [deleteProduct.fulfilled]: (state, action) =&gt; {       let index = state.findIndex(({ id }) =&gt; id === action.payload.id);       state.splice(index, 1);     },   }, });  const { reducer } = productSlice; export default reducer;      Create slice for Customer state. Create customersSlice.js in src-&gt;redux-&gt;slice folder.   customersSlice.js   import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\"; import CustomerDataService from \"../../services/CustomerService\";  const initialState = [];  export const createCustomer = createAsyncThunk(   \"customers/create\",   async (inputData) =&gt; {     const response = await CustomerDataService.create(inputData);     return response.data;   } );  export const retrieveCustomers = createAsyncThunk(   \"customers/retrieve\",   async () =&gt; {     debugger;     const res = await CustomerDataService.getAll();     return res.data;   } );  export const updateCustomer = createAsyncThunk(   \"customers/update\",   async ({ id, data }) =&gt; {     const res = await CustomerDataService.update(id, data);     return res.data;   } );  export const deleteCustomer = createAsyncThunk(   \"customers/delete\",   async (id) =&gt; {     await CustomerDataService.remove(id);     return { id };   } );  export const deleteAllCustomer = createAsyncThunk(   \"customers/deleteAll\",   async () =&gt; {     const res = await CustomerDataService.removeAll();     return res.data;   } );  export const findCustomerByName = createAsyncThunk(   \"customers/findByName\",   async ({ name }) =&gt; {     name = name === null || name === \"\" ? \"all\" : name;     const res = await CustomerDataService.findByName(name);     return res.data;   } );  const customerSlice = createSlice({   name: \"customer\",   initialState,   extraReducers: {     [createCustomer.fulfilled]: (state, action) =&gt; {       state.push(action.payload);     },      [retrieveCustomers.fulfilled]: (state, action) =&gt; {       return [...action.payload];     },      [updateCustomer.fulfilled]: (state, action) =&gt; {       const index = state.findIndex(         (tutorial) =&gt; tutorial.id === action.payload.id       );       state[index] = {         ...state[index],         ...action.payload,       };     },      [deleteCustomer.fulfilled]: (state, action) =&gt; {       let index = state.findIndex(({ id }) =&gt; id === action.payload.id);       state.splice(index, 1);     },     [deleteAllCustomer.fulfilled]: (state, action) =&gt; {       return [];     },     [findCustomerByName.fulfilled]: (state, action) =&gt; {       return [...action.payload];     },   }, });  // destructure reducer from customerSlice // name mustbe reducer const { reducer } = customerSlice; export default reducer;      Create Redux Store in src-&gt;redux folder name store.js   Store.js   // This Store will bring Actions and Reducers together and hold the Application state.  import { configureStore } from \"@reduxjs/toolkit\"; import productReducer from \"./slices/productsSlice\"; import customerReducer from \"./slices/customersSlice\";  const reducer = {   products: productReducer,   customers: customerReducer, };  const store = configureStore({   reducer: reducer,   devTools: true, });  export default store;   Note:  The Store is the central entity that combines Actions and Reducers, responsible for managing the entire application state.   With the help of the configureStore() function from Redux Toolkit, you can enjoy the following automated benefits:      It enables the Redux DevTools Extension out of the box, providing powerful debugging capabilities.   The thunk middleware is automatically set up, allowing you to start writing thunks without any additional configuration.   Step 15: Make state available to React components.      Modify the index.js as follows. Here, we are wrapping the entire application in a  component to make store available to its child components.   Index.js   import \"react-toastify/dist/ReactToastify.css\"; import React from \"react\"; import ReactDOM from \"react-dom/client\"; import \"./index.css\"; import App from \"./App\"; import reportWebVitals from \"./reportWebVitals\"; import { Provider } from \"react-redux\"; import store from \"./redux/store\";  const root = ReactDOM.createRoot(document.getElementById(\"root\")); root.render(   &lt;React.StrictMode&gt;     {/* Now we want our entire React App to access the store */}     &lt;Provider store={store}&gt;       &lt;App /&gt;     &lt;/Provider&gt;   &lt;/React.StrictMode&gt; );  // If you want to start measuring performance in your app, pass a function // to log results (for example: reportWebVitals(console.log)) // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals reportWebVitals();   Step 16: Create a Component for Nav bar name TopNav.js in src-&gt;layout folder.   TopNav.js   import React from \"react\"; import { Link } from \"react-router-dom\";  const TopNav = () =&gt; {   return (     &lt;nav className=\"navbar navbar-expand navbar-dark bg-dark\"&gt;       &lt;a href=\"/products\" className=\"navbar-brand\"&gt;         Mahedee.net       &lt;/a&gt;       &lt;div className=\"navbar-nav mr-auto\"&gt;         &lt;li className=\"nav-item\"&gt;           &lt;Link to={\"/products\"} className=\"nav-link\"&gt;             Products           &lt;/Link&gt;         &lt;/li&gt;          &lt;li className=\"nav-item\"&gt;           &lt;Link to={\"/customers\"} className=\"nav-link\"&gt;             Customers           &lt;/Link&gt;         &lt;/li&gt;       &lt;/div&gt;     &lt;/nav&gt;   ); };  export default TopNav;   Step 17: Create components for CRUD operation for Product in src-&gt;components-&gt;product.      Create ProductList.js file for ProductList component.   ProductList.js   import { useCallback, useEffect, useState } from \"react\"; import { useDispatch, useSelector } from \"react-redux\"; import { Link } from \"react-router-dom\"; import {   deleteProduct,   retrieveProducts, } from \"../../redux/slices/productsSlice\"; import { WarningTostify } from \"../../helper/ToastifyMessage\";  const ProductList = () =&gt; {   const products = useSelector((state) =&gt; state.products);   const dispatch = useDispatch();    const initFetch = useCallback(() =&gt; {     dispatch(retrieveProducts());   }, [dispatch]);    useEffect(() =&gt; {     initFetch();   }, [initFetch]);    function onDeleteProduct(id) {     debugger;     dispatch(deleteProduct(id))       .then((response) =&gt; {         WarningTostify(`Product with id: ${id} has been deleted.`);       })       .catch((e) =&gt; {         console.log(e);       });   }    return (     &lt;div className=\"card\"&gt;       &lt;div className=\"card-body\"&gt;         &lt;div&gt;           &lt;h3&gt;Product List&lt;/h3&gt;           &lt;Link to={\"/add-product/\"}&gt;             &lt;button className=\"btn btn-primary\"&gt;Create&lt;/button&gt;           &lt;/Link&gt;            &lt;table className=\"table table-stripped\"&gt;             &lt;thead&gt;               &lt;tr&gt;                 &lt;th&gt;Id&lt;/th&gt;                 &lt;th&gt;Name&lt;/th&gt;                 &lt;th&gt;Price&lt;/th&gt;                 &lt;th&gt;Stock Quantity&lt;/th&gt;                 &lt;th&gt;Actions&lt;/th&gt;               &lt;/tr&gt;             &lt;/thead&gt;             &lt;tbody&gt;               {products &amp;&amp;                 products.map((product) =&gt; (                   &lt;tr key={product.id}&gt;                     &lt;td&gt;{product.id}&lt;/td&gt;                     &lt;td&gt;{product.name}&lt;/td&gt;                     &lt;td&gt;{product.price}&lt;/td&gt;                     &lt;td&gt;{product.stockQuantity}&lt;/td&gt;                     &lt;td&gt;                       {\" \"}                       &lt;Link                         to={\"/edit-product/\" + product.id}                         className=\"badge badge-warning\"                       &gt;                         Edit                       &lt;/Link&gt;                       ||                       &lt;Link                         onClick={() =&gt; onDeleteProduct(product.id)}                         className=\"badge badge-danger\"                       &gt;                         Delete                       &lt;/Link&gt;                     &lt;/td&gt;                   &lt;/tr&gt;                 ))}             &lt;/tbody&gt;           &lt;/table&gt;         &lt;/div&gt;       &lt;/div&gt;     &lt;/div&gt;   ); };  export default ProductList;      Create AddProduct.js file for AddProduct component.   AddProduct.js   import { useState } from \"react\"; import { useDispatch } from \"react-redux\"; import { createProduct } from \"../../redux/slices/productsSlice\"; import { useNavigate } from \"react-router-dom\"; import { SuccessToastify } from \"../../helper/ToastifyMessage\";  const AddProduct = () =&gt; {   const initialProductState = {     id: 0,     name: \"\",     description: \"\",     price: 0,     stockQuantity: 0,   };    const [product, setProduct] = useState(initialProductState);   const navigate = useNavigate();    const dispatch = useDispatch();    const handleInputChange = (event) =&gt; {     const { name, value } = event.target;      setProduct({ ...product, [name]: value });   };    const saveProduct = () =&gt; {     dispatch(createProduct(product))       .unwrap()       .then((data) =&gt; {         console.log(data);         setProduct({           id: data.id,           name: data.title,           description: data.description,           price: data.price,           stockQuantity: data.stockQuantity,         });         SuccessToastify(\"Product information saved successfully!!\");         navigate(\"/products\");       })       .catch((e) =&gt; {         console.log(e);       });   };    const handleBackToList = () =&gt; {     navigate(\"/products\");   };    return (     &lt;div className=\"card\"&gt;       &lt;div className=\"card-body\"&gt;         &lt;div className=\"row\"&gt;           &lt;div className=\"col-md-3\"&gt;             &lt;h3&gt;Create Product&lt;/h3&gt;             &lt;div&gt;               &lt;div className=\"form-group\"&gt;                 &lt;label htmlFor=\"name\"&gt;Name&lt;/label&gt;                 &lt;input                   type=\"text\"                   className=\"form-control\"                   id=\"name\"                   required                   value={product.name || \"\"}                   onChange={handleInputChange}                   name=\"name\"                 /&gt;               &lt;/div&gt;               &lt;div className=\"form-group\"&gt;                 &lt;label htmlFor=\"description\"&gt;Description&lt;/label&gt;                 &lt;input                   type=\"text\"                   className=\"form-control\"                   id=\"description\"                   required                   value={product.description || \"\"}                   onChange={handleInputChange}                   name=\"description\"                 /&gt;               &lt;/div&gt;               &lt;div className=\"form-group\"&gt;                 &lt;label htmlFor=\"price\"&gt;Price&lt;/label&gt;                 &lt;input                   type=\"text\"                   className=\"form-control\"                   id=\"price\"                   required                   value={product.price || \"\"}                   onChange={handleInputChange}                   name=\"price\"                 /&gt;               &lt;/div&gt;               &lt;div className=\"form-group\"&gt;                 &lt;label htmlFor=\"stockQuantity\"&gt;Stock Quantity&lt;/label&gt;                 &lt;input                   type=\"text\"                   className=\"form-control\"                   id=\"stockQuantity\"                   required                   value={product.stockQuantity || \"\"}                   onChange={handleInputChange}                   name=\"stockQuantity\"                 /&gt;               &lt;/div&gt;               &lt;button                 type=\"button\"                 onClick={saveProduct}                 className=\"btn btn-success\"               &gt;                 Submit               &lt;/button&gt;               ||               &lt;button                 type=\"button\"                 className=\"btn btn-info\"                 onClick={handleBackToList}               &gt;                 Back to List               &lt;/button&gt;             &lt;/div&gt;           &lt;/div&gt;         &lt;/div&gt;       &lt;/div&gt;     &lt;/div&gt;   ); };  export default AddProduct;      Create EditProduct.js file for EditProduct component.   EditProduct.js   import { useNavigate, useParams } from \"react-router-dom\";  import React, { useEffect, useState } from \"react\"; import { useDispatch } from \"react-redux\"; import ProductDataService from \"../../services/ProductService\"; import { updateProduct } from \"../../redux/slices/productsSlice\"; import { SuccessToastify } from \"../../helper/ToastifyMessage\";  const EditProduct = () =&gt; {   const { id } = useParams();   let navigate = useNavigate();    const initialProductState = {     id: 0,     name: \"\",     description: \"\",     price: 0,     stockQuantity: 0,   };    const [productObj, setProductObj] = useState(initialProductState);   const dispatch = useDispatch();    const getProduct = (id) =&gt; {     ProductDataService.get(id)       .then((response) =&gt; {         setProductObj(response.data);       })       .catch((e) =&gt; {         console.log(e);       });   };    useEffect(() =&gt; {     if (id) {       getProduct(id);     }   }, [id]);    const handleInputChange = (event) =&gt; {     const { name, value } = event.target;     setProductObj({ ...productObj, [name]: value });   };    const updateProductContent = () =&gt; {     dispatch(updateProduct({ id: productObj.id, data: productObj }))       .unwrap()       .then((response) =&gt; {         SuccessToastify(\"Product information has been updated successfully!\");         navigate(\"/products\");       })       .catch((e) =&gt; {         console.log(e);       });   };    const backtoList = () =&gt; {     navigate(\"/products\");   };    return (     &lt;div className=\"card\"&gt;       &lt;div className=\"card-body\"&gt;         &lt;div className=\"row\"&gt;           &lt;div className=\"col-md-3\"&gt;             &lt;h3&gt;Edit Product&lt;/h3&gt;             &lt;form&gt;               &lt;div className=\"form-group\"&gt;                 &lt;label htmlFor=\"name\"&gt;Name&lt;/label&gt;                 &lt;input                   type=\"text\"                   className=\"form-control\"                   id=\"name\"                   name=\"name\"                   value={productObj.name}                   onChange={handleInputChange}                 /&gt;               &lt;/div&gt;               &lt;div className=\"form-group\"&gt;                 &lt;label htmlFor=\"description\"&gt;Description&lt;/label&gt;                 &lt;input                   type=\"text\"                   className=\"form-control\"                   id=\"description\"                   name=\"description\"                   value={productObj.description}                   onChange={handleInputChange}                 /&gt;               &lt;/div&gt;                &lt;div className=\"form-group\"&gt;                 &lt;label htmlFor=\"price\"&gt;Price&lt;/label&gt;                 &lt;input                   type=\"text\"                   className=\"form-control\"                   id=\"price\"                   name=\"price\"                   value={productObj.price}                   onChange={handleInputChange}                 /&gt;               &lt;/div&gt;                &lt;div className=\"form-group\"&gt;                 &lt;label htmlFor=\"stockQuantity\"&gt;Stock Quantity&lt;/label&gt;                 &lt;input                   type=\"text\"                   className=\"form-control\"                   id=\"stockQuantity\"                   name=\"stockQuantity\"                   value={productObj.stockQuantity}                   onChange={handleInputChange}                 /&gt;               &lt;/div&gt;             &lt;/form&gt;             &lt;div className=\"form-group\"&gt;               &lt;input                 type=\"button\"                 value=\"Edit\"                 className=\"btn btn-primary\"                 onClick={updateProductContent}               &gt;&lt;/input&gt;               ||               &lt;input                 type=\"button\"                 value=\"Back to List\"                 className=\"btn btn-primary\"                 onClick={backtoList}               &gt;&lt;/input&gt;             &lt;/div&gt;           &lt;/div&gt;         &lt;/div&gt;       &lt;/div&gt;     &lt;/div&gt;   ); };  export default EditProduct;   Step 18: Create components for CRUD operation for Customer in src-&gt;components-&gt;customer.      Create CustomerList.js file for CustomerList component.   CustomerList.js   import { useCallback, useEffect, useState } from \"react\"; import { useDispatch, useSelector } from \"react-redux\"; import { Link } from \"react-router-dom\"; import {   deleteCustomer,   findCustomerByName,   retrieveCustomers, } from \"../../redux/slices/customersSlice\"; import { ConvertDateISOString } from \"../../utils/Conversion\"; import { WarningTostify } from \"../../helper/ToastifyMessage\";  const CustomerList = () =&gt; {   const [searchCustomer, setSearchCustomer] = useState(\"\");    const customers = useSelector((state) =&gt; state.customers);   const dispatch = useDispatch();   const initFetch = useCallback(() =&gt; {     dispatch(retrieveCustomers());   }, [dispatch]);    useEffect(() =&gt; {     initFetch();   }, [initFetch]);    function onDeleteCustomer(id) {     dispatch(deleteCustomer(id))       .then((response) =&gt; {         console.log(response);         WarningTostify(\"Customer has been deleted\");       })       .catch((e) =&gt; {         console.log(e);       });   }    const onChangeSearchCustomer = (e) =&gt; {     const searchCustomer = e.target.value;      setSearchCustomer(searchCustomer);   };    const findByCustomerName = () =&gt; {     dispatch(findCustomerByName({ name: searchCustomer }));   };    return (     &lt;div className=\"card\"&gt;       &lt;div className=\"card-body\"&gt;         &lt;div&gt;           &lt;h3&gt;Customer List&lt;/h3&gt;           &lt;Link to={\"/add-customer/\"}&gt;             &lt;button className=\"btn btn-primary\"&gt;Create&lt;/button&gt;           &lt;/Link&gt;            &lt;br&gt;&lt;/br&gt;           &lt;br&gt;&lt;/br&gt;           &lt;div className=\"input-group mb-3\"&gt;             &lt;input               type=\"text\"               placeholder=\"Search by customer name\"               className=\"form-control\"               value={searchCustomer}               onChange={onChangeSearchCustomer}             /&gt;             &lt;div className=\"input-group-append\"&gt;               &lt;button                 className=\"btn btn-info \"                 type=\"button\"                 onClick={findByCustomerName}               &gt;                 Search               &lt;/button&gt;             &lt;/div&gt;           &lt;/div&gt;            &lt;table className=\"table table-stripped\"&gt;             &lt;thead&gt;               &lt;tr&gt;                 &lt;th&gt;Id&lt;/th&gt;                 &lt;th&gt;First Name&lt;/th&gt;                 &lt;th&gt;Last Name&lt;/th&gt;                 &lt;th&gt;Email&lt;/th&gt;                 &lt;th&gt;Phone&lt;/th&gt;                 &lt;th&gt;Birth Date&lt;/th&gt;                 &lt;th&gt;Actions&lt;/th&gt;               &lt;/tr&gt;             &lt;/thead&gt;             &lt;tbody&gt;               {customers &amp;&amp;                 customers.map((customer) =&gt; (                   &lt;tr key={customer.id}&gt;                     &lt;td&gt;{customer.id}&lt;/td&gt;                     &lt;td&gt;{customer.firstName}&lt;/td&gt;                     &lt;td&gt;{customer.lastName}&lt;/td&gt;                     &lt;td&gt;{customer.email}&lt;/td&gt;                     &lt;td&gt;{customer.phone}&lt;/td&gt;                     &lt;td&gt;{ConvertDateISOString(customer.birthDate)}&lt;/td&gt;                     &lt;td&gt;                       {\" \"}                       &lt;Link                         to={\"/edit-customer/\" + customer.id}                         className=\"badge badge-warning\"                       &gt;                         Edit                       &lt;/Link&gt;                       ||                       &lt;Link                         onClick={() =&gt; onDeleteCustomer(customer.id)}                         className=\"badge badge-danger\"                       &gt;                         Delete                       &lt;/Link&gt;                     &lt;/td&gt;                   &lt;/tr&gt;                 ))}             &lt;/tbody&gt;           &lt;/table&gt;         &lt;/div&gt;       &lt;/div&gt;     &lt;/div&gt;   ); };  export default CustomerList;      Create AddCustomer.js file for AddCustomer component.   AddCustomer.js   import { useState } from \"react\"; import { useDispatch } from \"react-redux\"; import { useNavigate } from \"react-router-dom\"; import { createCustomer } from \"../../redux/slices/customersSlice\"; import { SuccessToastify } from \"../../helper/ToastifyMessage\";  const AddCustomer = () =&gt; {   const initialCustomerState = {     id: 0,     firstName: \"\",     lastName: \"\",     email: \"\",     phone: \"\",     birthDate: \"\",   };    const [customer, setCustomer] = useState(initialCustomerState);   const navigate = useNavigate();    const dispatch = useDispatch();    const handleInputChange = (event) =&gt; {     const { name, value } = event.target;      setCustomer({ ...customer, [name]: value });   };    const saveCustomer = () =&gt; {     dispatch(createCustomer(customer))       .unwrap()       .then((data) =&gt; {         SuccessToastify(\"Customer has been created successfully!\");         setCustomer({           id: data.id,           firstName: data.firstName,           lastName: data.lastName,           email: data.email,           phone: data.phone,           birthDate: data.birthDate,         });         navigate(\"/customers\");       })       .catch((e) =&gt; {         console.log(e);       });   };    const backToList = () =&gt; {     navigate(\"/customers\");   };    return (     &lt;div className=\"card\"&gt;       &lt;div className=\"card-body\"&gt;         &lt;div className=\"row\"&gt;           &lt;div className=\"col-md-3\"&gt;             &lt;h3&gt;Create Customer&lt;/h3&gt;             &lt;div&gt;               &lt;div className=\"form-group\"&gt;                 &lt;label htmlFor=\"firstName\"&gt;First Name&lt;/label&gt;                 &lt;input                   type=\"text\"                   className=\"form-control\"                   id=\"firstName\"                   required                   value={customer.firstName || \"\"}                   onChange={handleInputChange}                   name=\"firstName\"                 /&gt;               &lt;/div&gt;               &lt;div className=\"form-group\"&gt;                 &lt;label htmlFor=\"description\"&gt;Last Name&lt;/label&gt;                 &lt;input                   type=\"text\"                   className=\"form-control\"                   id=\"lastName\"                   required                   value={customer.lastName || \"\"}                   onChange={handleInputChange}                   name=\"lastName\"                 /&gt;               &lt;/div&gt;               &lt;div className=\"form-group\"&gt;                 &lt;label htmlFor=\"email\"&gt;Email&lt;/label&gt;                 &lt;input                   type=\"text\"                   className=\"form-control\"                   id=\"email\"                   required                   value={customer.email || \"\"}                   onChange={handleInputChange}                   name=\"email\"                 /&gt;               &lt;/div&gt;               &lt;div className=\"form-group\"&gt;                 &lt;label htmlFor=\"phone\"&gt;Phone&lt;/label&gt;                 &lt;input                   type=\"text\"                   className=\"form-control\"                   id=\"phone\"                   required                   value={customer.phone || \"\"}                   onChange={handleInputChange}                   name=\"phone\"                 /&gt;               &lt;/div&gt;               &lt;div className=\"form-group\"&gt;                 &lt;label htmlFor=\"birthDate\"&gt;Birth Date&lt;/label&gt;                 &lt;input                   type=\"date\"                   className=\"form-control\"                   id=\"birthDate\"                   required                   value={customer.birthDate || \"\"}                   onChange={handleInputChange}                   name=\"birthDate\"                 /&gt;               &lt;/div&gt;               &lt;button onClick={saveCustomer} className=\"btn btn-success\"&gt;                 Submit               &lt;/button&gt;               ||               &lt;button className=\"btn btn-success\" onClick={backToList}&gt;                 Back to List               &lt;/button&gt;             &lt;/div&gt;           &lt;/div&gt;         &lt;/div&gt;       &lt;/div&gt;     &lt;/div&gt;   ); };  export default AddCustomer;      Create EditCustomer.js file for EditCustomer component.   EditCustomer.js   import React, { useEffect, useState } from \"react\"; import { useDispatch } from \"react-redux\"; import { useNavigate, useParams } from \"react-router-dom\"; import CustomerDataService from \"../../services/CustomerService\"; import { updateCustomer } from \"../../redux/slices/customersSlice\"; import { SuccessToastify } from \"../../helper/ToastifyMessage\"; import { ConvertDateISOString } from \"../../utils/Conversion\";  const EditCustomer = () =&gt; {   const { id } = useParams();   let navigate = useNavigate();    const initialCustomerState = {     id: 0,     firstName: \"\",     lastName: \"\",     email: \"\",     phone: \"\",     birthDate: null,   };    const [customerObj, setCustomerObj] = useState(initialCustomerState);    const dispatch = useDispatch();    const getCustomer = (id) =&gt; {     CustomerDataService.get(id)       .then((response) =&gt; {         setCustomerObj(response.data);       })       .catch((e) =&gt; {         console.log(e);       });   };    useEffect(() =&gt; {     if (id) {       getCustomer(id);     }   }, [id]);    const handleInputChange = (event) =&gt; {     const { name, value } = event.target;     setCustomerObj({ ...customerObj, [name]: value });   };    const backtoList = () =&gt; {     navigate(\"/customers\");   };    const onSubmit = () =&gt; {     console.log(\"Clicked submit button\");      dispatch(updateCustomer({ id: customerObj.id, data: customerObj }))       .unwrap()       .then((response) =&gt; {         console.log(response);         SuccessToastify(\"Customer has been updated successfully!\");         navigate(\"/customers\");       })       .catch((e) =&gt; {         console.log(e);       });   };    return (     &lt;div className=\"card\"&gt;       &lt;div className=\"card-body\"&gt;         &lt;div className=\"row\"&gt;           &lt;div className=\"col-md-3\"&gt;             &lt;h3&gt;Edit Customer&lt;/h3&gt;             &lt;form&gt;               &lt;div className=\"form-group\"&gt;                 &lt;label className=\"control-label\"&gt;First Name: &lt;/label&gt;                 &lt;input                   className=\"form-control\"                   type=\"text\"                   id=\"firstName\"                   name=\"firstName\"                   value={customerObj.firstName}                   onChange={handleInputChange}                 &gt;&lt;/input&gt;               &lt;/div&gt;                &lt;div className=\"form-group\"&gt;                 &lt;label className=\"control-label\"&gt;Last Name: &lt;/label&gt;                 &lt;input                   className=\"form-control\"                   type=\"text\"                   id=\"lastName\"                   name=\"lastName\"                   value={customerObj.lastName}                   onChange={handleInputChange}                 &gt;&lt;/input&gt;               &lt;/div&gt;                &lt;div className=\"form-group\"&gt;                 &lt;label className=\"control-label\"&gt;Email: &lt;/label&gt;                 &lt;input                   className=\"form-control\"                   type=\"text\"                   id=\"email\"                   name=\"email\"                   value={customerObj.email}                   onChange={handleInputChange}                 &gt;&lt;/input&gt;               &lt;/div&gt;                &lt;div className=\"form-group\"&gt;                 &lt;label className=\"control-label\"&gt;Phone: &lt;/label&gt;                 &lt;input                   className=\"form-control\"                   type=\"text\"                   id=\"phone\"                   name=\"phone\"                   value={customerObj.phone}                   onChange={handleInputChange}                 &gt;&lt;/input&gt;               &lt;/div&gt;                &lt;div className=\"form-group\"&gt;                 &lt;label className=\"control-label\"&gt;Birth Date: &lt;/label&gt;                 &lt;input                   className=\"form-control\"                   type=\"date\"                   id=\"birthDate\"                   name=\"birthDate\"                   value={ConvertDateISOString(customerObj.birthDate)}                   onChange={handleInputChange}                 &gt;&lt;/input&gt;               &lt;/div&gt;             &lt;/form&gt;              &lt;div className=\"form-group\"&gt;               &lt;input                 type=\"button\"                 value=\"Edit Customer\"                 className=\"btn btn-primary\"                 onClick={onSubmit}               &gt;&lt;/input&gt;               ||               &lt;input                 type=\"button\"                 value=\"Back to List\"                 className=\"btn btn-primary\"                 onClick={backtoList}               &gt;&lt;/input&gt;             &lt;/div&gt;           &lt;/div&gt;         &lt;/div&gt;       &lt;/div&gt;     &lt;/div&gt;   ); };  export default EditCustomer;   Step 19: Modify App.js and configure route as follows.   App.js   import logo from \"./logo.svg\"; import \"./App.css\"; import { BrowserRouter, Route, Routes } from \"react-router-dom\"; import \"bootstrap/dist/css/bootstrap.min.css\"; import EditProduct from \"./components/product/EditProduct\"; import TopNav from \"./layout/TopNav\"; import CustomerList from \"./components/customer/CustomerList\"; import AddCustomer from \"./components/customer/AddCustomer\"; import EditCustomer from \"./components/customer/EditCustomer\"; import { ToastContainer } from \"react-toastify\"; import ProductList from \"./components/product/ProductsList\"; import AddProduct from \"./components/product/AddProduct\";  function App() {   return (     &lt;BrowserRouter&gt;       &lt;TopNav /&gt;       &lt;Routes&gt;         &lt;Route path=\"/\" element={&lt;ProductList /&gt;} /&gt;         &lt;Route path=\"/products\" element={&lt;ProductList /&gt;} /&gt;         &lt;Route path=\"/add-product\" element={&lt;AddProduct /&gt;} /&gt;         &lt;Route path=\"/edit-product/:id\" element={&lt;EditProduct /&gt;} /&gt;         &lt;Route path=\"/customers\" element={&lt;CustomerList /&gt;} /&gt;         &lt;Route path=\"/add-customer\" element={&lt;AddCustomer /&gt;} /&gt;         &lt;Route path=\"/edit-customer/:id\" element={&lt;EditCustomer /&gt;} /&gt;       &lt;/Routes&gt;       &lt;ToastContainer /&gt;     &lt;/BrowserRouter&gt;   ); }  export default App;   Step 20: Fixed port to run front-end application.      Create a file .env in root directory.   Write the following code to fix the port. Now, application will run on 3002 port.   .env   PORT=3002   Step 21: Run front end application using the following command.   npm start   Run backend application and you will see the following screen. Now you can perform CRUD operation for both Product and Customer.      Source code  ","categories": ["React","Redux","ASP.NET","C#"],
        "tags": ["react","csharp","redux","aspnet"],
        "url": "http://localhost:4000/sample-application-redux-react-aspnet-core/",
        "teaser":null},{
        "title": "Unleashing Micro Frontends with React and ASP.NET Core: A Step-by-Step Implementation Approach",
        "excerpt":"Introduction  Micro frontends are an architectural pattern and approach for building modern web applications. Similar to microservices on the backend, micro frontends focus on breaking down the user interface (UI) into smaller, self-contained, and independently deployable parts.   In traditional monolithic frontend architectures, the entire UI is developed as a single codebase, making it difficult to scale, maintain, and iterate on different parts of the application independently. Micro frontends aim to address these challenges by allowing teams to develop and deploy UI components or features as separate entities.   Each micro frontend typically represents a distinct business capability or user journey and can be developed using different technologies or frameworks. This enables teams to choose the most suitable technology stack for their specific needs. For example, one micro frontend may be built using React, while another may use Angular or Vue.js.   Micro frontends communicate with each other and the backend through well-defined APIs or events, enabling them to work together seamlessly as a cohesive application. This approach promotes modularization, scalability, and reusability, as teams can develop, test, and deploy their micro frontends independently.   By adopting micro frontends, organizations can effectively distribute development efforts among multiple teams, enabling faster delivery, easier maintenance, and better isolation of components. This approach also facilitates technology diversity, allowing teams to leverage different tools and frameworks within the same application.      Fig: Micro frontend Architecture. (Source: Internet)   Objective  In this article I will show you how to build Micro front end application using react and asp.net core. Here I am going to create four react applications. One is Master or Container service and other three will be child project or service. Master service will be master-frontend application and other three service will be header-frontend, product-frontend and customer-frontend. I will create two api project using asp.net core for product-frontend and customer-frontend. At the end you will see a complete micro frontend application up and running.   Step 1: Create four react projects.      Open a terminal or bash, write below commands to create four React projects.   npx create-react-app master-frontend npx create-react-app header-frontend npx create-react-app product-frontend npx create-react-app customer-frontend   Step 2: Configure “header-frontend” react project      Now we are going to configure header-frontend project to use inside our Master Project as a service.   Go to header-frontend project   Open the terminal and install below libraries with below command.     npm install react-router-dom npm install react-bootstrap bootstrap@5.1.3 npm install react-app-rewired history           Inside the src directory, create a folder and name the folder components.   Inside components folder create a file and name the file Header.js   Write below code in src-&gt;components-&gt;Header.js   import React from \"react\"; import { Container } from \"react-bootstrap\";  const Header = () =&gt; {   return (     &lt;Container fluid className=\"App-header\"&gt;       &lt;p&gt;Micro Frontend using React.js&lt;/p&gt;     &lt;/Container&gt;   ); };  export default Header;      Open App.js file and replace with below code.   import logo from \"./logo.svg\"; import \"./App.css\"; import { BrowserRouter } from \"react-router-dom\"; import Header from \"./components/Header\";  function App() {   return (     &lt;BrowserRouter&gt;       &lt;Header /&gt;     &lt;/BrowserRouter&gt;   ); }  export default App;      Open App.css file and replace the file with below code.   .App-header {   background-color: #4d739e;   min-height: 3vh;   display: flex;   flex-direction: column;   align-items: center;   justify-content: center;   font-size: calc(10px + 2vmin);   color: white;    box-shadow: rgba(0, 0, 0, 0.25) 0px 5px 15px; }      Create another file inside src folder, name the file setupProxy.js and write below code for cors policy.   module.exports = (app) =&gt; {   app.use((req, res, next) =&gt; {     res.header(\"Access-Control-Allow-Origin\", \"*\");     next();   }); };      Open index.js file and replace with below code.   import React from \"react\"; import ReactDOM from \"react-dom/client\"; import \"./index.css\"; import \"bootstrap/dist/css/bootstrap.min.css\"; import App from \"./App\"; import reportWebVitals from \"./reportWebVitals\";  window.renderHeader = (masterId, history) =&gt; {   const root = ReactDOM.createRoot(document.getElementById(masterId));    root.render(     &lt;React.StrictMode&gt;       &lt;App history={history} /&gt;     &lt;/React.StrictMode&gt;   ); };  window.unmountHeader = (masterId) =&gt; {   ReactDOM.unmountComponentAtNode(document.getElementById(masterId)); };  if (!document.getElementById(\"Header-master\")) {   const root = ReactDOM.createRoot(document.getElementById(\"root\"));   root.render(     &lt;React.StrictMode&gt;       &lt;App /&gt;     &lt;/React.StrictMode&gt;   ); }  // If you want to start measuring performance in your app, pass a function // to log results (for example: reportWebVitals(console.log)) // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals reportWebVitals();      Create a file inside root directory and name the file config-overrides.js and write below code. Below code will override webpack of react.   module.exports = {   webpack: (config, env) =&gt; {     config.optimization.runtimeChunk = false;     config.optimization.splitChunks = {       cacheGroups: {         default: false,       },     };      config.output.filename = \"static/js/[name].js\";      config.plugins[5].options.filename = \"static/css/[name].css\";     config.plugins[5].options.moduleFilename = () =&gt; \"static/css/main.css\";     return config;   }, };      Open package.json and replace “scripts” section with below code. This project going to be open on 3001 port because we set PORT = 3001 in script section.   \"scripts\": { \"start\": \"set PORT=3001 &amp;&amp; react-app-rewired start\", \"build\": \"react-app-rewired build\", \"test\": \"react-app-rewired test\", \"eject\": \"react-scripts eject\" },       Now open the terminal and start the project with below command.   npm start      Browser output should look like below. If you see below output, means our header frontend project is ready.      Step 3: Create Product.API Backend Project      Create a web api project name Product.API   Install following Nuget packages in the project   Microsoft.EntityFrameworkCore Microsoft.EntityFrameworkCore.InMemory Microsoft.EntityFrameworkCore.SqlServer Microsoft.EntityFrameworkCore.Tools Microsoft.VisualStudio.Web.CodeGeneration.Design       Create following two model class in Model folder   Product.cs   namespace Product.API.Model {     public class Product     {         public int Id { get; set; }         public string? Name { get; set; }         public string? ShortName { get; set;}         public double Price { get; set; }         public DateTime? ManufactureDate { get; set; }         public DateTime? ExpiryDate { get; set; }     } }    Category.cs   namespace Product.API.Model {     public class Category     {         public int Id { get; set; }         public string? Name { get; set; }         public string? DisplayName { get; set;}     } }       Add following DbContext and SeedGenerator class in Db folder   ProductContext.cs   using Microsoft.EntityFrameworkCore; using Product.API.Model;  namespace Product.API.Db { public class ProductContext : DbContext { public ProductContext(DbContextOptions&lt;ProductContext&gt; options) : base(options) {          }         public DbSet&lt;Product.API.Model.Product&gt; Products { get; set; }         public DbSet&lt;Category&gt; Categories { get; set; }     }  }    SeedGenerator.cs   using Product.API.Model;  namespace Product.API.Db {     public class SeedGenerator     {         public static void SeedData(WebApplication app)         {             using (var scope = app.Services.CreateScope())             {                 var context = scope.ServiceProvider.GetService&lt;ProductContext&gt;();                 if (!context.Products.Any())                 {                     context.Products.AddRange(                         new Product.API.Model.Product                         {                             Name = \"Cat's Shirt \",                             ShortName = \"Shirt\",                             Price = 1200,                             ManufactureDate = DateTime.Today,                             ExpiryDate = DateTime.Now.AddYears(5)                         },                          new Product.API.Model.Product                          {                              Name = \"Lipton Tea Bag\",                              ShortName = \"Tea\",                              Price = 150,                              ManufactureDate = DateTime.Today,                              ExpiryDate = DateTime.Now.AddYears(2)                          }                          );                     context.SaveChanges();                 }                  if (!context.Categories.Any())                 {                     context.Categories.AddRange(                         new Category                         {                             Name = \"Beverages\",                             DisplayName = \"Beverages\"                         },                         new Category                         {                             Name = \"Grossery\",                             DisplayName = \"Grossery\"                         });                     context.SaveChanges();                 }               }         }     } }       Modify Program.cs file to configure in memory database and seed data as follows.   Program.cs   //using Microsoft.AspNetCore.Http.Connections; using Microsoft.EntityFrameworkCore; using Product.API.Db;  var builder = WebApplication.CreateBuilder(args);  // Add services to the container. builder.Services.AddDbContext&lt;ProductContext&gt;(opt =&gt; opt.UseInMemoryDatabase(\"ProductDB\"));  builder.Services.AddControllers();  // Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle builder.Services.AddEndpointsApiExplorer(); builder.Services.AddSwaggerGen();  var app = builder.Build();  //For seeding data SeedGenerator.SeedData(app);  // Configure the HTTP request pipeline. if (app.Environment.IsDevelopment()) { app.UseSwagger(); app.UseSwaggerUI();      // Enable CORS     app.UseCors(x =&gt; x     .AllowAnyMethod()     .AllowAnyHeader()     .SetIsOriginAllowed(origin =&gt; true) // allow any origin     .AllowCredentials()); // allow credentials  }  app.UseHttpsRedirection();  app.UseAuthorization();  app.UseRouting(); app.MapControllers();  app.Run();       Create two controller class name ProductsController and CategoriesController in Controllers folder   ProductsController.cs   using Microsoft.AspNetCore.Mvc; using Microsoft.EntityFrameworkCore; using Product.API.Db;  namespace Product.API.Controllers { [Route(\"api/[controller]\")] [ApiController] public class ProductsController : ControllerBase { private readonly ProductContext \\_context;          public ProductsController(ProductContext context)         {             _context = context;         }          // GET: api/Products         [HttpGet]         public async Task&lt;ActionResult&lt;IEnumerable&lt;Product.API.Model.Product&gt;&gt;&gt; GetProducts()         {             return await _context.Products.ToListAsync();         }          // GET: api/Products/5         [HttpGet(\"{id}\")]         public async Task&lt;ActionResult&lt;Product.API.Model.Product&gt;&gt; GetProduct(int id)         {             var product = await _context.Products.FindAsync(id);              if (product == null)             {                 return NotFound();             }              return product;         }          // PUT: api/Products/5         // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754         [HttpPut(\"{id}\")]         public async Task&lt;IActionResult&gt; PutProduct(int id, Product.API.Model.Product product)         {             if (id != product.Id)             {                 return BadRequest();             }              _context.Entry(product).State = EntityState.Modified;              try             {                 await _context.SaveChangesAsync();             }             catch (DbUpdateConcurrencyException)             {                 if (!ProductExists(id))                 {                     return NotFound();                 }                 else                 {                     throw;                 }             }              return NoContent();         }          // POST: api/Products         // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754         [HttpPost]         public async Task&lt;ActionResult&lt;Product.API.Model.Product&gt;&gt; PostProduct(Product.API.Model.Product product)         {             _context.Products.Add(product);             await _context.SaveChangesAsync();              return CreatedAtAction(\"GetProduct\", new { id = product.Id }, product);         }          // DELETE: api/Products/5         [HttpDelete(\"{id}\")]         public async Task&lt;IActionResult&gt; DeleteProduct(int id)         {             var product = await _context.Products.FindAsync(id);             if (product == null)             {                 return NotFound();             }              _context.Products.Remove(product);             await _context.SaveChangesAsync();              return NoContent();         }          private bool ProductExists(int id)         {             return _context.Products.Any(e =&gt; e.Id == id);         }     }  }   CategoriesController.cs   using Microsoft.AspNetCore.Mvc; using Microsoft.EntityFrameworkCore; using Product.API.Db; using Product.API.Model;  namespace Product.API.Controllers { [Route(\"api/[controller]\")] [ApiController] public class CategoriesController : ControllerBase { private readonly ProductContext \\_context;          public CategoriesController(ProductContext context)         {             _context = context;         }          // GET: api/Categories         [HttpGet]         public async Task&lt;ActionResult&lt;IEnumerable&lt;Category&gt;&gt;&gt; GetCategories()         {           if (_context.Categories == null)           {               return NotFound();           }             return await _context.Categories.ToListAsync();         }          // GET: api/Categories/5         [HttpGet(\"{id}\")]         public async Task&lt;ActionResult&lt;Category&gt;&gt; GetCategory(int id)         {           if (_context.Categories == null)           {               return NotFound();           }             var category = await _context.Categories.FindAsync(id);              if (category == null)             {                 return NotFound();             }              return category;         }          // PUT: api/Categories/5         // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754         [HttpPut(\"{id}\")]         public async Task&lt;IActionResult&gt; PutCategory(int id, Category category)         {             if (id != category.Id)             {                 return BadRequest();             }              _context.Entry(category).State = EntityState.Modified;              try             {                 await _context.SaveChangesAsync();             }             catch (DbUpdateConcurrencyException)             {                 if (!CategoryExists(id))                 {                     return NotFound();                 }                 else                 {                     throw;                 }             }              return NoContent();         }          // POST: api/Categories         // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754         [HttpPost]         public async Task&lt;ActionResult&lt;Category&gt;&gt; PostCategory(Category category)         {           if (_context.Categories == null)           {               return Problem(\"Entity set 'AdminContext.Categories'  is null.\");           }             _context.Categories.Add(category);             await _context.SaveChangesAsync();              return CreatedAtAction(\"GetCategory\", new { id = category.Id }, category);         }          // DELETE: api/Categories/5         [HttpDelete(\"{id}\")]         public async Task&lt;IActionResult&gt; DeleteCategory(int id)         {             if (_context.Categories == null)             {                 return NotFound();             }             var category = await _context.Categories.FindAsync(id);             if (category == null)             {                 return NotFound();             }              _context.Categories.Remove(category);             await _context.SaveChangesAsync();              return NoContent();         }          private bool CategoryExists(int id)         {             return (_context.Categories?.Any(e =&gt; e.Id == id)).GetValueOrDefault();         }     }  }       Now run the application and access the endpoints using swagger.   Step 4: Configure product-frontend React Project   Now we are going to configure product-frontend project to use inside our Master Project as a service.      Open the Terminal and install below libraries with below command.   npm install react-router-dom npm install react-bootstrap bootstrap@5.1.3 npm install react-app-rewired npm install axios history npm install react-data-table-component npm install @mui/material @emotion/react @emotion/styled npm install @mui/material @mui/styled-engine-sc styled-components npm install @mui/icons-material       Inside the src directory, create a folder and name the folder utils.   Inside utils folder create a file and name the file BaseUrl.js   Write below code because our product api is running on 7155 port   BaseUrl.js   export const Base_URL_Product = \"https://localhost:7155/api\";      Create another js file inside the utils directory and name the file Conversions.js, write below code.   Conversions.js   export const convertDateFormat = (date) =&gt; {   let convertedDate = new Date(date);   return convertedDate.toDateString(); };      Inside the src directory, create a folder and name the folder services.   Inside services folder create a file and name the file ProductService.js   Write below code in src-&gt;services-&gt; ProductService.js   ProductService.js   import axios from \"axios\"; import { Base_URL_Product } from \"../utils/BaseUrl\";  export const GetAllProducts = () =&gt; {   try {     const response = axios.get(Base_URL_Product + `/Products`);     console.log(\"response\", response);     return response;   } catch (er) {     throw er;   } };  export const GetAllCategory = () =&gt; {   try {     const response = axios.get(Base_URL_Product + `/Categories`);     return response;   } catch (er) {     throw er;   } };      Inside the src directory, create a folder and name the folder components.   Inside components folder create another folder and name the folder ProductComponent.   Inside ProductComponent folder create a file and name the file DataTableComponent.js   Write below code in src -&gt; components -&gt; ProductComponent -&gt; DataTableComponent.js   DataTableComponent.js   import React from \"react\"; import { Card } from \"@mui/material\"; import SortIcon from \"@mui/icons-material/ArrowDownward\"; import DataTable from \"react-data-table-component\"; import { convertDateFormat } from \"../../utils/Conversions\";  const DataTableComponent = ({ data }) =&gt; {   console.log(data);   const columns = [     {       id: 1,       name: \"Name\",       selector: (row) =&gt; row.name,       sortable: true,       reorder: true,     },     {       id: 2,       name: \"Short Name\",       selector: (row) =&gt; row.shortName,       sortable: true,       right: true,       reorder: true,     },     {       id: 3,       name: \"Price\",       selector: (row) =&gt; row.price,       sortable: true,       right: true,       reorder: true,     },      {       id: 4,       name: \"Manufacture Date\",       selector: (row) =&gt; convertDateFormat(row.manufactureDate),       sortable: true,       right: true,       reorder: true,     },     {       id: 5,       name: \"Expiry Date\",       selector: (row) =&gt; convertDateFormat(row.expiryDate),       sortable: true,       right: true,       reorder: true,     },   ];   return (     &lt;div className=\"data-table\"&gt;       &lt;Card&gt;         &lt;DataTable           title=\"Product List\"           columns={columns}           data={data}           defaultSortFieldId={4}           sortIcon={&lt;SortIcon /&gt;}           pagination           selectableRows           paginationPerPage={5}           paginationRowsPerPageOptions={[5, 10, 15, 20]}         /&gt;       &lt;/Card&gt;     &lt;/div&gt;   ); };  export default DataTableComponent;      Now Inside ProductComponent folder create another file and name the file ProductListComponent.js   Write below code in src-&gt;components-&gt;ProductComponent-&gt; ProductListComponent.js   ProductListComponent.js   import React, { useEffect, useState } from \"react\"; import { GetAllProducts } from \"../../services/ProductService\"; import DataTableComponent from \"./DataTableComponent\";  const ProductListComponent = () =&gt; {   const [state, setState] = useState([]);    useEffect(() =&gt; {     GetAllProducts().then((res) =&gt; {       console.log(res.data);       setState(res.data);     });   }, []);    return (     &lt;div style=&gt;       &lt;DataTableComponent data={state} /&gt;     &lt;/div&gt;   ); };  export default ProductListComponent;      Inside components folder create another folder and name the folder CategoryComponent.   Inside CategoryComponent folder create a file and name the file DataTableComponent.js   Write below code in src-&gt;components-&gt; CategoryComponent-&gt; DataTableComponent.js DataTableComponent.js   import React from \"react\"; import { Card } from \"@mui/material\"; import SortIcon from \"@mui/icons-material/ArrowDownward\"; import DataTable from \"react-data-table-component\";  const DataTableComponent = ({ data }) =&gt; {   const columns = [     {       id: 1,       name: \"Name\",       selector: (row) =&gt; row.name,       sortable: true,       reorder: true,     },     {       id: 2,       name: \"Display Name\",       selector: (row) =&gt; row.displayName,       sortable: true,       right: true,       reorder: true,     },   ];   return (     &lt;div className=\"data-table\"&gt;       &lt;Card&gt;         &lt;DataTable           title=\"Product Category List\"           columns={columns}           data={data}           defaultSortFieldId={4}           sortIcon={&lt;SortIcon /&gt;}           pagination           selectableRows         /&gt;       &lt;/Card&gt;     &lt;/div&gt;   ); };  export default DataTableComponent;      Inside CategoryComponentfolder create a file and name the file CategoryListComponent.js   Write below code in src-&gt;components-&gt; CategoryComponent-&gt;CategoryListComponent.js CategoryListComponent.js   import React, { useEffect, useState } from \"react\"; import { GetAllCategory } from \"../../services/ProductService\"; import DataTableComponent from \"./DataTableComponent\";  const CategoryListComponent = () =&gt; {   const [state, setState] = useState([]);    useEffect(() =&gt; {     GetAllCategory().then((res) =&gt; {       console.log(\"category\", res.data);       setState(res.data);     });   }, []);    return (     &lt;div style=&gt;       &lt;DataTableComponent data={state} /&gt;     &lt;/div&gt;   ); };  export default CategoryListComponent;      Inside the src directory, create a folder and name the folder pages.   Inside pages folder create a js file and name the file ProductsPage.js and write below code.   import React from \"react\"; import ProductListComponent from \"../components/ProductComponent/ProductListComponent\";  const ProductsPage = () =&gt; {   return (     &lt;&gt;       &lt;ProductListComponent /&gt;     &lt;/&gt;   ); };  export default ProductsPage;      Inside pages folder create a js file and name the file CategoriesPage.js and write below code.   import React from \"react\"; import GroupTypesListComponent from \"../components/CategoryComponent/CategoryListComponent\";  const CategoriesPage = () =&gt; {   return (     &lt;&gt;       &lt;GroupTypesListComponent /&gt;     &lt;/&gt;   ); };  export default CategoriesPage;      Open App.css file and replace with below code.   .data-table {   box-shadow: rgba(0, 0, 0, 0.25) 5px 5px 15px 0px; }      Open App.js file and replace with below code.   import logo from \"./logo.svg\"; import \"./App.css\"; import { BrowserRouter, Routes, Route } from \"react-router-dom\"; import ProductsPage from \"./pages/ProductsPage\"; import CategoriesPage from \"./pages/CategoriesPage\"; import { createBrowserHistory } from \"history\";  const defaultHistory = createBrowserHistory();  function App({ history = defaultHistory }) {   return (     &lt;BrowserRouter&gt;       &lt;Routes&gt;         &lt;Route path=\"/\" element={&lt;ProductsPage /&gt;} /&gt;         &lt;Route path=\"/product-list\" element={&lt;ProductsPage /&gt;} /&gt;         &lt;Route path=\"/product-categories\" element={&lt;CategoriesPage /&gt;} /&gt;       &lt;/Routes&gt;     &lt;/BrowserRouter&gt;   ); }  export default App;      Open index.js file and replace with below code.   import React from \"react\"; import ReactDOM from \"react-dom/client\"; //import ReactDOM from \"react-dom\"; import \"./index.css\"; import App from \"./App\"; import reportWebVitals from \"./reportWebVitals\";  window.renderProduct = (masterId, history) =&gt; {   const root = ReactDOM.createRoot(document.getElementById(masterId));    root.render(     &lt;React.StrictMode&gt;       &lt;App history={history} /&gt;     &lt;/React.StrictMode&gt;   ); };  window.unmountProduct = (masterId) =&gt; {   const root = document.getElementById(masterId);   //root.unmount();   //root.remove(); };  if (!document.getElementById(\"Product-master\")) {   const root = ReactDOM.createRoot(document.getElementById(\"root\"));   root.render(     &lt;React.StrictMode&gt;       &lt;App /&gt;     &lt;/React.StrictMode&gt;   ); }  // If you want to start measuring performance in your app, pass a function // to log results (for example: reportWebVitals(console.log)) // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals reportWebVitals();      Create another file inside src folder, name the file setupProxy.js and write below code for cors policy.   module.exports = (app) =&gt; {   app.use((req, res, next) =&gt; {     res.header(\"Access-Control-Allow-Origin\", \"*\");     next();   }); };      Create a file inside root directory and name the file config-overrides.js and write below code. Below code will override webpack of react.   module.exports = {   webpack: (config, env) =&gt; {     config.optimization.runtimeChunk = false;     config.optimization.splitChunks = {       cacheGroups: {         default: false,       },     };      config.output.filename = \"static/js/[name].js\";      config.plugins[5].options.filename = \"static/css/[name].css\";     config.plugins[5].options.moduleFilename = () =&gt; \"static/css/main.css\";     return config;   }, };      Open package.json and replace “scripts” section with below code. This project going to be open on 3002 port.   \"scripts\": { \"start\": \"set PORT=3002 &amp;&amp; react-app-rewired start\", \"build\": \"react-app-rewired build\", \"test\": \"react-app-rewired test\", \"eject\": \"react-scripts eject\" },       Run Product.API back end application   Go to the directory of product-fronend and run the below command   npm start      Browser output should look like below.      • If you try using this url http://localhost:3002/product-categories. You will get the following output.         If You see the above output, it means it works fine.   Step 5: Create Customers.API Backend Project      Create a web api project name Customers.API   Install following Nuget packages in the project     Microsoft.EntityFrameworkCore   Microsoft.EntityFrameworkCore.InMemory   Microsoft.EntityFrameworkCore.SqlServer   Microsoft.EntityFrameworkCore.Tools   Microsoft.VisualStudio.Web.CodeGeneration.Design      Create following Customer model class in Model folder   Customer.cs    namespace Customers.API.Model {     public class Customer     {         public int Id { get; set; }         public string? Name { get; set; }         public string? PhoneNo { get; set;}         public string? EmailAddress { get; set;}         public DateTime? DOB { get; set; }     } }        Add following DbContext and SeedGenerator class in Db folder   CustomersContext.cs   using Customers.API.Model; using Microsoft.EntityFrameworkCore;  namespace Customers.API.Db { public class CustomersContext : DbContext { public CustomersContext(DbContextOptions&lt;CustomersContext&gt; options) : base(options) {          }         public DbSet&lt;Customer&gt; Customers { get; set; }     }  }    SeedGenerator.cs   using Customers.API.Model;  namespace Customers.API.Db {     public class SeedGenerator     {         public static void SeedData(WebApplication app)         {             using (var scope = app.Services.CreateScope())             {                 var context = scope.ServiceProvider.GetService&lt;CustomersContext&gt;();                   if (!context.Customers.Any())                 {                     context.Customers.AddRange(                         new Customer                         {                             Name = \"Scott Allen\",                             EmailAddress = \"scott@gmail.com\",                             PhoneNo = \"5068792493\",                             DOB = DateTime.Now.AddYears(-50),                         },                         new Customer                         {                             Name = \"Graham Bell\",                             EmailAddress = \"bell@outlook.com\",                             PhoneNo = \"5068792494\",                             DOB = DateTime.Now.AddYears(-54),                         },                         new Customer                         {                             Name = \"Adam Smith\",                             EmailAddress = \"smith@yahoo.com\",                             PhoneNo = \"5068792494\",                             DOB = DateTime.Now.AddYears(-54),                         }); ;                     context.SaveChanges();                 }              }         }     } }       Modify Program.cs file to configure in memory database and seed data as follows. Program.cs   //using Microsoft.AspNetCore.Http.Connections; using Microsoft.EntityFrameworkCore; using Product.API.Db;  var builder = WebApplication.CreateBuilder(args);  // Add services to the container. builder.Services.AddDbContext&lt;ProductContext&gt;(opt =&gt; opt.UseInMemoryDatabase(\"ProductDB\"));   builder.Services.AddControllers();   // Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle builder.Services.AddEndpointsApiExplorer(); builder.Services.AddSwaggerGen();  var app = builder.Build();  //For seeding data SeedGenerator.SeedData(app);  // Configure the HTTP request pipeline. if (app.Environment.IsDevelopment()) {     app.UseSwagger();     app.UseSwaggerUI();      // Enable CORS     app.UseCors(x =&gt; x     .AllowAnyMethod()     .AllowAnyHeader()     .SetIsOriginAllowed(origin =&gt; true) // allow any origin     .AllowCredentials()); // allow credentials }  app.UseHttpsRedirection();  app.UseAuthorization();  app.UseRouting(); app.MapControllers();  app.Run();       Create two controller class name CustomersController in Controllers folder   CustomersController.cs   using Customers.API.Db; using Customers.API.Model; using Microsoft.AspNetCore.Mvc; using Microsoft.EntityFrameworkCore;  namespace Customers.API.Controllers { [Route(\"api/[controller]\")] [ApiController] public class CustomersController : ControllerBase { private readonly CustomersContext \\_context;          public CustomersController(CustomersContext context)         {             _context = context;         }          // GET: api/Customers         [HttpGet]         public async Task&lt;ActionResult&lt;IEnumerable&lt;Customer&gt;&gt;&gt; GetCustomers()         {           if (_context.Customers == null)           {               return NotFound();           }             return await _context.Customers.ToListAsync();         }          // GET: api/Customers/5         [HttpGet(\"{id}\")]         public async Task&lt;ActionResult&lt;Customer&gt;&gt; GetCustomer(int id)         {           if (_context.Customers == null)           {               return NotFound();           }             var customer = await _context.Customers.FindAsync(id);              if (customer == null)             {                 return NotFound();             }              return customer;         }          // PUT: api/Customers/5         // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754         [HttpPut(\"{id}\")]         public async Task&lt;IActionResult&gt; PutCustomer(int id, Customer customer)         {             if (id != customer.Id)             {                 return BadRequest();             }              _context.Entry(customer).State = EntityState.Modified;              try             {                 await _context.SaveChangesAsync();             }             catch (DbUpdateConcurrencyException)             {                 if (!CustomerExists(id))                 {                     return NotFound();                 }                 else                 {                     throw;                 }             }              return NoContent();         }          // POST: api/Customers         // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754         [HttpPost]         public async Task&lt;ActionResult&lt;Customer&gt;&gt; PostCustomer(Customer customer)         {           if (_context.Customers == null)           {               return Problem(\"Entity set 'CustomersContext.Customers'  is null.\");           }             _context.Customers.Add(customer);             await _context.SaveChangesAsync();              return CreatedAtAction(\"GetCustomer\", new { id = customer.Id }, customer);         }          // DELETE: api/Customers/5         [HttpDelete(\"{id}\")]         public async Task&lt;IActionResult&gt; DeleteCustomer(int id)         {             if (_context.Customers == null)             {                 return NotFound();             }             var customer = await _context.Customers.FindAsync(id);             if (customer == null)             {                 return NotFound();             }              _context.Customers.Remove(customer);             await _context.SaveChangesAsync();              return NoContent();         }          private bool CustomerExists(int id)         {             return (_context.Customers?.Any(e =&gt; e.Id == id)).GetValueOrDefault();         }     }  }  //using Microsoft.AspNetCore.Http.Connections; using Microsoft.EntityFrameworkCore; using Product.API.Db;  var builder = WebApplication.CreateBuilder(args);  // Add services to the container. builder.Services.AddDbContext&lt;ProductContext&gt;(opt =&gt; opt.UseInMemoryDatabase(\"ProductDB\"));  builder.Services.AddControllers();  // Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle builder.Services.AddEndpointsApiExplorer(); builder.Services.AddSwaggerGen();  var app = builder.Build();  //For seeding data SeedGenerator.SeedData(app);  // Configure the HTTP request pipeline. if (app.Environment.IsDevelopment()) { app.UseSwagger(); app.UseSwaggerUI();      // Enable CORS     app.UseCors(x =&gt; x     .AllowAnyMethod()     .AllowAnyHeader()     .SetIsOriginAllowed(origin =&gt; true) // allow any origin     .AllowCredentials()); // allow credentials  }  app.UseHttpsRedirection();  app.UseAuthorization();  app.UseRouting(); app.MapControllers();  app.Run();       Now run the application and access the endpoints using swagger.   Step 6: Configure customer-frontend React Project      Now we are going to configure customer-frontend project to use inside our Master Project as a service.   Open the Terminal and install below libraries with below command in customer-frontend project   npm install react-router-dom npm install react-bootstrap bootstrap@5.1.3 npm install react-app-rewired npm install axios history npm install react-data-table-component npm install @mui/material @emotion/react @emotion/styled npm install @mui/material @mui/styled-engine-sc styled-components npm install @mui/icons-material       Inside the src directory, create a folder and name the folder utils.   Inside utils folder create a file and name the file BaseUrl.js   Write below code in src-&gt;utils-&gt;BaseUrl.js   BaseUrl.js   export const Base_URL_Customer = \"https://localhost:7154/api\";      Create another js file inside the utils directory and name the file Conversions.js   Write below code in src-&gt;utils-&gt; Conversions.js   Conversions.js   export const convertDateFormat = (date) =&gt; {   let convertedDate = new Date(date);   return convertedDate.toDateString(); };      Inside the src directory, create a folder and name the folder services.   Inside services folder create a file and name the file CustomerService.js   Write below code in src-&gt;services-&gt; CustomerService.js   CustomerService.js   import axios from \"axios\"; import { Base_URL_Customer } from \"../utils/BaseUrl\";  export const GetAllCustomers = (offset, pageSize, access_token) =&gt; {   try {     const response = axios.get(Base_URL_Customer + \"/Customers\");     return response;   } catch (error) {     throw error;   } };      Inside the src directory, create a folder and name the folder components.   Inside components folder create another folder and name the folder CustomerComponent.   Inside CustomerComponentfolder create a file and name the file DataTableComponent.js   Write below code in src-&gt;components-&gt; CustomerComponent-&gt; DataTableComponent.js   DataTableComponent.js   import React from \"react\"; import { Card } from \"@mui/material\"; import SortIcon from \"@mui/icons-material/ArrowDownward\"; import DataTable from \"react-data-table-component\"; import { convertDateFormat } from \"../../utils/Conversions\";  const DataTableComponent = ({ data }) =&gt; {   const columns = [     {       id: 1,       name: \"Name\",       selector: (row) =&gt; row.name,       sortable: true,       reorder: true,     },     {       id: 2,       name: \"Phone No\",       selector: (row) =&gt; row.phoneNo,       sortable: true,       right: true,       reorder: true,     },     {       id: 3,       name: \"Email Address\",       selector: (row) =&gt; row.emailAddress,       sortable: true,       right: true,       reorder: true,     },     {       id: 4,       name: \"Date of Birth\",       selector: (row) =&gt; convertDateFormat(row.dob),       sortable: true,       right: true,       reorder: true,     },   ];   return (     &lt;div className=\"data-table\"&gt;       &lt;Card&gt;         &lt;DataTable           title=\"Customers List\"           columns={columns}           data={data}           defaultSortFieldId={4}           sortIcon={&lt;SortIcon /&gt;}           pagination           selectableRows           paginationPerPage={5}           paginationRowsPerPageOptions={[5, 10, 15, 20]}         /&gt;       &lt;/Card&gt;     &lt;/div&gt;   ); };  export default DataTableComponent;      Inside CustomerComponent folder create a file and name the file CustomersListComponent.js   Write below code in src-&gt;components-&gt; CustomerComponent -&gt;CustomersListComponent.js   CustomersListComponent.js   import React, { useEffect, useState } from \"react\"; import { GetAllCustomers } from \"../../services/CustomerService\"; import DataTableComponent from \"./DataTableComponent\";  const CustomersListComponent = () =&gt; {   const [state, setState] = useState([]);    useEffect(() =&gt; {     GetAllCustomers().then((res) =&gt; {       setState(res.data);     });   }, []);    return (     &lt;div style=&gt;       &lt;DataTableComponent data={state} /&gt;     &lt;/div&gt;   ); };  export default CustomersListComponent;      Inside the src directory, create a folder and name the folder pages.   Inside pages folder create a js file and name the file CustomerPage.js   Write below code in src-&gt;pages-&gt;CustomerPage.js   CustomerPage.js   import React from \"react\"; import CustomersListComponent from \"../components/CustomerComponent/CustomersListComponent\";  const CustomerPage = () =&gt; {   return (     &lt;&gt;       &lt;CustomersListComponent /&gt;     &lt;/&gt;   ); };  export default CustomerPage;      Open App.css file and replace with below code.   .data-table {   box-shadow: rgba(0, 0, 0, 0.25) 5px 5px 15px 0px; }      Open App.js file and replace with below code.   import logo from \"./logo.svg\"; import \"./App.css\"; import \"./App.css\"; import { BrowserRouter, Route, Routes } from \"react-router-dom\"; import CustomerPage from \"./pages/CustomerPage\"; import { createBrowserHistory } from \"history\";  const defaultHistory = createBrowserHistory(); function App({ history = defaultHistory }) {   return (     &lt;BrowserRouter&gt;       &lt;Routes&gt;         &lt;Route path=\"/\" element={&lt;CustomerPage /&gt;} /&gt;         &lt;Route path=\"/customers\" element={&lt;CustomerPage /&gt;} /&gt;       &lt;/Routes&gt;     &lt;/BrowserRouter&gt;   ); }  export default App;      Open index.js file and replace with below code.   import React from \"react\"; import ReactDOM from \"react-dom/client\"; //import ReactDOM from \"react-dom\"; import \"./index.css\"; import App from \"./App\"; import reportWebVitals from \"./reportWebVitals\";  window.renderCustomer = (masterId, history) =&gt; {   const customerElement = ReactDOM.createRoot(     document.getElementById(masterId)   );    customerElement.render(     &lt;React.StrictMode&gt;       &lt;App history={history} /&gt;     &lt;/React.StrictMode&gt;   ); };  window.unmountCustomer = (masterId) =&gt; {   // unmount of remove component   //debugger;   //ReactDOM.unmountComponentAtNode(document.getElementById(masterId)); };  if (!document.getElementById(\"Customer-master\")) {   const root = ReactDOM.createRoot(document.getElementById(\"root\"));   root.render(     &lt;React.StrictMode&gt;       &lt;App /&gt;     &lt;/React.StrictMode&gt;   ); }  // If you want to start measuring performance in your app, pass a function // to log results (for example: reportWebVitals(console.log)) // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals reportWebVitals();      Create another file inside src folder, name the file setupProxy.js and write below code for cors policy.   module.exports = (app) =&gt; {   app.use((req, res, next) =&gt; {     res.header(\"Access-Control-Allow-Origin\", \"*\");     next();   }); };      Create a file inside root directory and name the file config-overrides.js and write below code. Below code will override webpack of react.   module.exports = {   webpack: (config, env) =&gt; {     config.optimization.runtimeChunk = false;     config.optimization.splitChunks = {       cacheGroups: {         default: false,       },     };      config.output.filename = \"static/js/[name].js\";      config.plugins[5].options.filename = \"static/css/[name].css\";     config.plugins[5].options.moduleFilename = () =&gt; \"static/css/main.css\";     return config;   }, };      Open package.json and replace “scripts” section with below code. This project going to be open on 3003 port.   \"scripts\": { \"start\": \"set PORT=3003 &amp;&amp; react-app-rewired start\", \"build\": \"react-app-rewired build\", \"test\": \"react-app-rewired test\", \"eject\": \"react-scripts eject\" },       Now run the backend Customer.API project   Go to the directory of customer-frontend application and run the following command.   npm start      You will see the below output. It means customer service works fine.      Step 7: Configure master-frontend React Project      Open the Terminal and install below libraries with below command.   npm install react-router-dom npm install react-bootstrap bootstrap@5.1.3 npm install @trendmicro/react-sidenav       Inside root directory create a file and name the file .env and write code.   REACT_APP_HEADER_HOST=http://localhost:3001 REACT_APP_PRODUCT_HOST=http://localhost:3002 REACT_APP_CUSTOMER_HOST=http://localhost:3003      Inside the src directory create a js file to handle micro-frontend services, name the file MicroFrontend.js and write below code.   MicroFrontend.js   import React, { useEffect } from \"react\";  function MicroFrontend({ name, host, history }) {   useEffect(() =&gt; {     const scriptId = `micro-frontend-script-${name}`;      const renderMicroFrontend = () =&gt; {       window[`render${name}`](`${name}-master`, history);     };      if (document.getElementById(scriptId)) {       renderMicroFrontend();       return;     }      fetch(`${host}/asset-manifest.json`)       .then((res) =&gt; res.json())       .then((manifest) =&gt; {         const script = document.createElement(\"script\");         script.id = scriptId;         script.crossOrigin = \"\";         script.src = `${host}${manifest.files[\"main.js\"]}`;         script.onload = () =&gt; {           renderMicroFrontend();         };         document.head.appendChild(script);       });      return () =&gt; {       window[`unmount${name}`] &amp;&amp; window[`unmount${name}`](`${name}-master`);     };   });    //debugger;   return &lt;main id={`${name}-master`} /&gt;; }  MicroFrontend.defaultProps = {   document,   window, };  export default MicroFrontend;      Inside src directory create following four folders.            assets       common       components       micro-services           Create a js file inside common folder for sidebar navigation and name the file SideNavbar.js and write below code.   import React from \"react\"; import { useLocation, useNavigate } from \"react-router-dom\"; import SideNav, { NavItem, NavIcon, NavText } from \"@trendmicro/react-sidenav\";  const SideNavbar = () =&gt; {   const location = useLocation();   const history = useNavigate();   return (     &lt;SideNav className=\"sidenav\"&gt;       &lt;SideNav         onSelect={(selected) =&gt; {           const to = \"/\" + selected;           if (location.pathname !== to) {             console.log(\"Path Name:\", location.pathname);             console.log(\"To:\", to);             history(to);           }         }}       &gt;         &lt;SideNav.Toggle /&gt;         &lt;SideNav.Nav defaultSelected=\"\"&gt;           &lt;NavItem eventKey=\"home\"&gt;             &lt;NavIcon&gt;               &lt;i className=\"fa fa-fw fa-home\" style= /&gt;             &lt;/NavIcon&gt;             &lt;NavText&gt;Dashboard&lt;/NavText&gt;           &lt;/NavItem&gt;            &lt;NavItem eventKey=\"product-list\"&gt;             &lt;NavIcon&gt;               &lt;i                 className=\"fa fa-fw fa-device\"                 style=               /&gt;             &lt;/NavIcon&gt;             &lt;NavText&gt;Product&lt;/NavText&gt;           &lt;/NavItem&gt;            &lt;NavItem eventKey=\"product-categories\"&gt;             &lt;NavIcon&gt;               &lt;i                 className=\"fa fa-fw fa-device\"                 style=               /&gt;             &lt;/NavIcon&gt;             &lt;NavText&gt;Categories&lt;/NavText&gt;           &lt;/NavItem&gt;            &lt;NavItem eventKey=\"customers\"&gt;             &lt;NavIcon&gt;               &lt;i                 className=\"fa fa-fw fa-device\"                 style=               /&gt;             &lt;/NavIcon&gt;             &lt;NavText&gt;Customers&lt;/NavText&gt;           &lt;/NavItem&gt;         &lt;/SideNav.Nav&gt;       &lt;/SideNav&gt;     &lt;/SideNav&gt;   ); };  export default SideNavbar;      Create a css file inside assets folder and name the file homeStyle.css and write below code.   @import url(\"https://fonts.googleapis.com/css2?family=Mulish:wght@200&amp;display=swap\");  /_ this is non resposive , please adjust for smaller screens before using_/  - {   padding: 0;   margin: 0;   }  .container { display: flex;      /* width: 100vw;  height: 100vh; \\*/ overflow: visible; }  .span1 { /_ border: rgb(149, 101, 228) solid 2px; _/ margin-top: 90px; width: 100px; height: 100px; position: fixed; border-radius: 50%; transform: rotate(30deg) scale(1.5); box-shadow: inset 10px 10px 10px rgba(0, 0, 0, 0.1), 15px 20px 20px rgba(0, 0, 0, 0.5), inset -25px -20px 20px rgba(255, 255, 255, 0.3); animation: anim 20s ease infinite; }  .span2 { /_ border: solid black 2px; _/ height: 100px; width: 200px; text-align: center; font-size: 12vh; color: rgb(193, 193, 218); justify-content: center; transform: translateX(300px) translateY(180px); letter-spacing: 10px; position: relative; }  .span2 .medtext { font-weight: 100; text-shadow: 5px 5px 20px rgba(19, 133, 179, 0.5), -10px 10px 20px rgba(255, 255, 255, 0.5); z-index: 10; }  .span2 .large { font-size: 30vh; font-weight: 200; text-shadow: 10px 10px 20px rgba(19, 133, 179, 0.5), -20px 20px 30px rgba(255, 255, 255, 0.5); }  .span3 { position: absolute; bottom: 10px; right: 20px;      height: 120px;     justify-content: center;  }  .span4 { transform: translateY(80px) rotate(90deg) translateX(300px); /_ border: solid red 2px; _/ height: 50px; justify-content: center; position: absolute; }  .span4 h2 { font-size: 80px; font-weight: 10; padding-bottom: 10px; color: rgb(86, 86, 206); text-shadow: 5px 5px 20px rgba(19, 133, 179, 0.5), -10px 10px 10px rgba(255, 255, 255, 0.5); }  .span3 h2 { color: rgb(86, 86, 206); }  .overflow { position: absolute; width: 85vh; height: 85vh;      background: rgba(117, 117, 224, 0.726);     z-index: 5;     top: 10vh;     left: 5vh;     border-radius: 50%;     animation: animate 5s ease infinite;     box-shadow: inset 10px -10px 30px rgba(0, 0, 0, 0.2),         15px -20px 30px rgba(255, 255, 255, 0.5),         inset -25px -20px 30px rgba(0, 0, 0, 0.3),         -20px 20px 30px rgba(255, 255, 255, 0.37);      display: flex;     align-items: center;     justify-content: center;  }  @keyframes animate { 0% { transform: scale(0); }      40% {         transform: scale(0.7);     }      60% {         transform: scale(0.8);     }      100% {         transform: scale(0);     }  }  .hero { color: rgb(49, 69, 185); font-size: 9vh; text-align: center; font-weight: 100; letter-spacing: 10px; }  .span5 { width: 70vh; height: 70vh; position: absolute; right: 0; border-bottom-left-radius: 100%; border-top-width: 0px; border-right-width: 0px; box-shadow: inset 10px 10px 10px rgba(0, 0, 0, 0.1), 15px 20px 20px rgba(0, 0, 0, 0.5), inset -25px -20px 20px rgba(255, 255, 255, 0.3); position: absolute; animation: anim 18s ease infinite; }  .span6 { width: 10vw; height: 10vw; position: absolute; left: 40vw; top: 20vh; border-radius: 50%; box-shadow: inset 10px 10px 10px rgba(0, 0, 0, 0.1), 15px 20px 20px rgba(0, 0, 0, 0.5), inset -25px -20px 20px rgba(255, 255, 255, 0.3); animation: anim 17s ease infinite; }  .span7 { width: 6vw; height: 6vw; position: absolute; left: 80vw; top: 80vh; border-radius: 50%; box-shadow: inset 10px 10px 10px rgba(0, 0, 0, 0.1), 15px 20px 20px rgba(0, 0, 0, 0.5), inset -25px -20px 20px rgba(255, 255, 255, 0.3); }  .body { height: 100%; background: turquoise; }  .span3 h2 { font-size: 50px; bottom: 10px; font-weight: 100; }  .span7 { animation: anim 10s ease infinite; }  @keyframes anim { 50% { transform: translateX(50px) scale(1.3) translateY(5px); } }       Inside the component folder, create a js file name the file Home.js.   Write below code in src -&gt; component -&gt; Home.js   import React from \"react\"; import \"../assets/homeStyle.css\";  export const Home = () =&gt; {   return (     &lt;&gt;       &lt;div style=&gt;         &lt;div className=\"container\"&gt;           &lt;div className=\"span1\"&gt;&lt;/div&gt;           &lt;div className=\"span2\"&gt;             &lt;h2 className=\"medtext\"&gt;Think&lt;/h2&gt;              &lt;h2 className=\"large\"&gt;Simple&lt;/h2&gt;           &lt;/div&gt;           &lt;div className=\"span3\"&gt;             &lt;h2&gt;MAHEDEE.NET&lt;/h2&gt;           &lt;/div&gt;           &lt;div className=\"span4\"&gt;             &lt;h2&gt;Learn&lt;/h2&gt;           &lt;/div&gt;            &lt;div className=\"span5\"&gt;&lt;/div&gt;           &lt;div className=\"span6\"&gt;&lt;/div&gt;           &lt;div className=\"span7\"&gt;&lt;/div&gt;         &lt;/div&gt;          &lt;div className=\"overflow\"&gt;           &lt;h1 className=\"hero\"&gt;MAHEDEE.NET&lt;/h1&gt;         &lt;/div&gt;       &lt;/div&gt;     &lt;/&gt;   ); };      Inside micro-services folder creates following js files.            ProductMicroServices.js       LayoutMicroServices.js       CustomerMicroServices.js           ProductMicroServices.js   import MicroFrontend from \"../MicroFrontend\";  const { REACT_APP_PRODUCT_HOST: productHost } = process.env;  export function ProductList({ history }) {   return &lt;MicroFrontend history={history} host={productHost} name=\"Product\" /&gt;; }  export function CategoryList({ history }) {   return &lt;MicroFrontend history={history} host={productHost} name=\"Product\" /&gt;; }   LayoutMicroServices.js   import MicroFrontend from \"../MicroFrontend\";  const { REACT_APP_HEADER_HOST: headerHost } = process.env;  export function Header({ history }) {   return &lt;MicroFrontend history={history} host={headerHost} name=\"Header\" /&gt;; }   CustomerMicroServices.js   import MicroFrontend from \"../MicroFrontend\";  const { REACT_APP_CUSTOMER_HOST: customerHost } = process.env;  export function CustomerList({ history }) {   return (     &lt;MicroFrontend history={history} host={customerHost} name=\"Customer\" /&gt;   ); }      Add following import inside index.js file.   import \"bootstrap/dist/css/bootstrap.min.css\"; import \"@trendmicro/react-sidenav/dist/react-sidenav.css\";      Add following css inside index.css file.   .sidenav---sidenav---\\_2tBP {   background-color: #375a83 !important; }      Update App.js file with following code.   import { BrowserRouter, Routes, Route } from \"react-router-dom\"; //import TopNav from \"./common/TopNav\"; import SideNavbar from \"./common/SideNavbar\"; import { Home } from \"./components/Home\"; import {   ProductList,   CategoryList, } from \"./micro-services/ProductMicroServices\"; import { Header } from \"./micro-services/LayoutMicroServices\"; import { CustomerList } from \"./micro-services/CustomerMicroServices\";  function App() {   return (     &lt;&gt;       &lt;BrowserRouter&gt;         &lt;Header /&gt;         &lt;SideNavbar /&gt;         &lt;div style=&gt;           &lt;Routes&gt;             &lt;Route path=\"/\" element={&lt;Home /&gt;} /&gt;             &lt;Route path=\"/home\" element={&lt;Home /&gt;} /&gt;             &lt;Route path=\"/product-list\" element={&lt;ProductList /&gt;} /&gt;             &lt;Route path=\"/product-categories\" element={&lt;CategoryList /&gt;} /&gt;             &lt;Route path=\"/customers\" element={&lt;CustomerList /&gt;} /&gt;           &lt;/Routes&gt;         &lt;/div&gt;       &lt;/BrowserRouter&gt;     &lt;/&gt;   ); }  export default App;      Now run all other backend and frontend application.   Now go inside of master-frontend application and run following command   Now the output (dashboard) look like following.         Now click on Product menu you will get the following output         Now click on Customer menu you will get the following output         Now click on Categories menu you will get the following output      It means. Micro front end works. Our master application is running on 3000 port and other 3 application is running on 3001, 3002 and 3003. Wow, we accomplished the journey of micro front end.   Source code  ","categories": ["React","Microservices","ASP.NET","C#"],
        "tags": ["react","csharp","Microservice","aspnet","microfrontend"],
        "url": "http://localhost:4000/micro-frontend-using-react-and-aspnet-core/",
        "teaser":null}]
