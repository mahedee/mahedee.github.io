<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="https://mahedee.net//feed.xml" rel="self" type="application/atom+xml" /><link href="https://mahedee.net//" rel="alternate" type="text/html" /><updated>2022-02-15T11:21:15+00:00</updated><id>https://mahedee.net//feed.xml</id><title type="html">Think Simple</title><subtitle>hi</subtitle><author><name>Mahedee Hasan</name></author><entry><title type="html">Authentication and authorization using JWT in asp.net core application</title><link href="https://mahedee.net//authentication-and-authorization-using-JWT-in-asp.net-core-application/" rel="alternate" type="text/html" title="Authentication and authorization using JWT in asp.net core application" /><published>2022-01-04T00:00:00+00:00</published><updated>2022-01-04T00:00:00+00:00</updated><id>https://mahedee.net//authentication-and-authorization-using-JWT-in-asp.net-core-application</id><content type="html" xml:base="https://mahedee.net//authentication-and-authorization-using-JWT-in-asp.net-core-application/"><![CDATA[<!-- ## Playing with Clean Architecture and CQRS pattern using asp.net core EF and Dapper -->

<p><strong>Introduction</strong></p>

<p>Authentication and authorization is a key part of an application. Sometimes we struggle to implement authentication and authorization in a web api application. In this article I will show you, how to implement authentication and authorization using JWT in an asp.net core web application.</p>

<p>Architecture with CQRS pattern.</p>

<p><strong>Tools and technologies used</strong></p>
<ul>
  <li>Clean Architecture</li>
  <li>CQRS Pattern</li>
  <li>Visual Studio 2022</li>
  <li>.NET 6.0</li>
  <li>SQLite</li>
  <li>Dapper</li>
  <li>Entity Framework</li>
  <li>AutoMapper</li>
  <li>MediatR</li>
  <li>ASP.NET Core Web API</li>
  <li>C#</li>
</ul>

<p><strong>Implementation</strong></p>

<p><strong>Step 1: Create solution and projects.</strong></p>

<ul>
  <li>Create a solution name Ecommerce</li>
  <li>Add a new web api project, name - Ordering.API in the solution.</li>
  <li>Add 3 class library project, name - Ordering.Application, Odering.Core and Ordering.Infrastructure in the solution.</li>
</ul>

<p><strong>Step 2: Install nuget packages.</strong></p>

<ul>
  <li>Install following nuget packages in Ordering.Infrastructure Project</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Dapper</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.Data.Sqlite.Core</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore.Design</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore.Relational</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore.Tools</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.Extensions.Configuration.Abstractions</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.AspNetCore.Identity</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.AspNetCore.Identity.EntityFrameworkCore</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore.Sqlite</span>

</code></pre></div></div>

<ul>
  <li>Install following nuget packages in Ordering.Application Project</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">AutoMapper</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">MediatR</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">FluentValidation</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">FluentValidation.DependencyInjectionExtensions</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.Extensions.DependencyInjection.Abstractions</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.Extensions.Identity.Core</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.IdentityModel.Tokens</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">System.IdentityModel.Tokens.Jwt</span>
</code></pre></div></div>

<ul>
  <li>Install following nuget packages in Ordering.API Project</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">AutoMapper.Extensions.Microsoft.DependencyInjection</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">MediatR</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">MediatR.Extensions.Microsoft.DependencyInjection</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore.Design</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore.Sqlite</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore.Tools</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.AspNetCore.Authentication.JwtBearer</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">System.Configuration.ConfigurationManager</span>
</code></pre></div></div>

<p><strong>Step 3: Create Entity class  in Ordering.Core project</strong></p>

<ul>
  <li>Create BaseEntity in Ordering.Core/Entities/Base folder</li>
  <li>Create Customer in Ordering.Core/Entities folder</li>
</ul>

<p><strong>BaseEntity.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.ComponentModel.DataAnnotations</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.ComponentModel.DataAnnotations.Schema</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Core.Entities.Base</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">BaseEntity</span>
    <span class="p">{</span>
        <span class="p">[</span><span class="n">Key</span><span class="p">]</span>
        <span class="p">[</span><span class="nf">DatabaseGenerated</span><span class="p">(</span><span class="n">DatabaseGeneratedOption</span><span class="p">.</span><span class="n">Identity</span><span class="p">)]</span>
        <span class="k">public</span> <span class="n">Int64</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="n">DateTime</span> <span class="n">CreatedDate</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="n">DateTime</span> <span class="n">ModifiedDate</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="nf">BaseEntity</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="n">ModifiedDate</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>Customer.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Ordering.Core.Entities.Base</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Core.Entities</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Customer</span> <span class="p">:</span> <span class="n">BaseEntity</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">FirstName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">LastName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Email</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">ContactNumber</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Address</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 4: Create Command and Query Interface in Ordering.Core project</strong></p>

<ul>
  <li>Create ICommandRepository in Ordering.Core/Repositories/Command/Base folder</li>
  <li>Create ICommandCustomerRepository in Ordering.Core/Repositories/Command folder</li>
  <li>Create IQueryRepository in Ordering.Core/Repositories/Query/Base folder</li>
  <li>Create ICustomerQueryRepository in Ordering.Core/Repositories/Query folder</li>
</ul>

<p><strong>ICommandRepository.cs</strong></p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System.Threading.Tasks</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Core.Repositories.Command.Base</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">interface</span> <span class="nc">ICommandRepository</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="k">where</span> <span class="n">T</span> <span class="p">:</span> <span class="k">class</span>
    <span class="err">{</span>
        <span class="nc">Task</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="nf">AddAsync</span><span class="p">(</span><span class="n">T</span> <span class="n">entity</span><span class="p">);</span>
        <span class="n">Task</span> <span class="nf">UpdateAsync</span><span class="p">(</span><span class="n">T</span> <span class="n">entity</span><span class="p">);</span>
        <span class="n">Task</span> <span class="nf">DeleteAsync</span><span class="p">(</span><span class="n">T</span> <span class="n">entity</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>ICustomerCommandRepository.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Ordering.Core.Entities</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Repositories.Command.Base</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Core.Repositories.Command</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">interface</span> <span class="nc">ICustomerCommandRepository</span> <span class="p">:</span> <span class="n">ICommandRepository</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span>
    <span class="p">{</span>

    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p><strong>IQueryRepository.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">Ordering.Core.Repositories.Query.Base</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">interface</span> <span class="nc">IQueryRepository</span> <span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="k">where</span> <span class="n">T</span> <span class="p">:</span> <span class="k">class</span>
    <span class="err">{</span>
        <span class="c1">// Generic repository for all if any</span>
    <span class="err">}</span>
<span class="err">}</span>
</code></pre></div></div>

<p><strong>ICustomerQueryRepository.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Ordering.Core.Entities</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Repositories.Query.Base</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Threading.Tasks</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Core.Repositories.Query</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">interface</span> <span class="nc">ICustomerQueryRepository</span> <span class="p">:</span> <span class="n">IQueryRepository</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="c1">//Custom operation which is not generic</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">IReadOnlyList</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;&gt;</span> <span class="nf">GetAllAsync</span><span class="p">();</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="nf">GetByIdAsync</span><span class="p">(</span><span class="n">Int64</span> <span class="n">id</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="nf">GetCustomerByEmail</span><span class="p">(</span><span class="kt">string</span> <span class="n">email</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 5: Create DbConnector and OrderingContext in Ordering.Infrastructure project</strong></p>

<ul>
  <li>Create DbConnector class in Ordering.Infrastructure/Data folder for SQLite connection for query.</li>
</ul>

<p><strong>DbConnector.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Microsoft.Data.Sqlite</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Extensions.Configuration</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Data</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Infrastructure.Data</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">DbConnector</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IConfiguration</span> <span class="n">_configuration</span><span class="p">;</span>

        <span class="k">protected</span> <span class="nf">DbConnector</span><span class="p">(</span><span class="n">IConfiguration</span> <span class="n">configuration</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_configuration</span> <span class="p">=</span> <span class="n">configuration</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">IDbConnection</span> <span class="nf">CreateConnection</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="kt">string</span> <span class="n">_connectionString</span> <span class="p">=</span> <span class="n">_configuration</span><span class="p">.</span><span class="nf">GetConnectionString</span><span class="p">(</span><span class="s">"DefaultConnection"</span><span class="p">);</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">SqliteConnection</span><span class="p">(</span><span class="n">_connectionString</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>Create OrderingContext class in Ordering.Infrastructure/Data folder for command.</li>
</ul>

<p><strong>OrderingContext.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Entities</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Infrastructure.Data</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">OrderingContext</span> <span class="p">:</span> <span class="n">DbContext</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">OrderingContext</span><span class="p">(</span><span class="n">DbContextOptions</span><span class="p">&lt;</span><span class="n">OrderingContext</span><span class="p">&gt;</span> <span class="n">options</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span> <span class="p">(</span><span class="n">options</span><span class="p">)</span>
        <span class="p">{</span>

        <span class="p">}</span>

        <span class="k">public</span> <span class="n">DbSet</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="n">Customers</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 6: Create Command and Query Repository in Ordering.Infrastructure project</strong></p>

<ul>
  <li>Create CommandRepository in Ordering.Infrastructure/Repositories/Command/Base folder</li>
</ul>

<p><strong>CommandRepository.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Repositories.Command.Base</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Infrastructure.Data</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Threading.Tasks</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Infrastructure.Repository.Command.Base</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CommandRepository</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="p">:</span> <span class="n">ICommandRepository</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="k">where</span> <span class="n">T</span> <span class="p">:</span> <span class="k">class</span>
    <span class="err">{</span>
        <span class="nc">protected</span> <span class="k">readonly</span> <span class="n">OrderingContext</span> <span class="n">_context</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">CommandRepository</span><span class="p">(</span><span class="n">OrderingContext</span> <span class="n">context</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_context</span> <span class="p">=</span> <span class="n">context</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="nf">AddAsync</span><span class="p">(</span><span class="n">T</span> <span class="n">entity</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Set</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;().</span><span class="nf">AddAsync</span><span class="p">(</span><span class="n">entity</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>
            <span class="k">return</span> <span class="n">entity</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span> <span class="nf">UpdateAsync</span><span class="p">(</span><span class="n">T</span> <span class="n">entity</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_context</span><span class="p">.</span><span class="nf">Entry</span><span class="p">(</span><span class="n">entity</span><span class="p">).</span><span class="n">State</span> <span class="p">=</span> <span class="n">EntityState</span><span class="p">.</span><span class="n">Modified</span><span class="p">;</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span> <span class="nf">DeleteAsync</span><span class="p">(</span><span class="n">T</span> <span class="n">entity</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_context</span><span class="p">.</span><span class="n">Set</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;().</span><span class="nf">Remove</span><span class="p">(</span><span class="n">entity</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create CommandCustomerRepository in Ordering.Infrastructure/Repositories/Command folder</li>
</ul>

<p><strong>CustomerCommandRepository.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Ordering.Core.Entities</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Repositories.Command</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Infrastructure.Data</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Infrastructure.Repository.Command.Base</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Infrastructure.Repository.Command</span>
<span class="p">{</span>

    <span class="k">public</span> <span class="k">class</span> <span class="nc">CustomerCommandRepository</span> <span class="p">:</span> <span class="n">CommandRepository</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;,</span> <span class="n">ICustomerCommandRepository</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">CustomerCommandRepository</span><span class="p">(</span><span class="n">OrderingContext</span> <span class="n">context</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">context</span><span class="p">)</span>
        <span class="p">{</span>

        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>Create QueryRepository in Ordering.Infrastructure/Repositories/Query/Base folder</li>
</ul>

<p><strong>QueryRepository.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Microsoft.Extensions.Configuration</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Repositories.Query.Base</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Infrastructure.Data</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Infrastructure.Repository.Query.Base</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">QueryRepository</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="p">:</span> <span class="n">DbConnector</span><span class="p">,</span>  <span class="n">IQueryRepository</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="k">where</span> <span class="n">T</span> <span class="p">:</span> <span class="k">class</span>
    <span class="err">{</span>
        <span class="nc">public</span> <span class="nf">QueryRepository</span><span class="p">(</span><span class="n">IConfiguration</span> <span class="n">configuration</span><span class="p">)</span>
            <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">configuration</span><span class="p">)</span>
        <span class="p">{</span>

        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>Create CustomerQueryRepository in Ordering.Infrastructure/Repositories/Query folder</li>
</ul>

<p><strong>CustomerQueryRepository.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Dapper</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Extensions.Configuration</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Entities</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Repositories.Query</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Infrastructure.Repository.Query.Base</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Data</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Linq</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Threading.Tasks</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Infrastructure.Repository.Query</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CustomerQueryRepository</span> <span class="p">:</span> <span class="n">QueryRepository</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;,</span> <span class="n">ICustomerQueryRepository</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">CustomerQueryRepository</span><span class="p">(</span><span class="n">IConfiguration</span> <span class="n">configuration</span><span class="p">)</span> 
            <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">configuration</span><span class="p">)</span>
        <span class="p">{</span>

        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IReadOnlyList</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;&gt;</span> <span class="nf">GetAllAsync</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="kt">var</span> <span class="n">query</span> <span class="p">=</span> <span class="s">"SELECT * FROM CUSTOMERS"</span><span class="p">;</span>

                <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">connection</span> <span class="p">=</span> <span class="nf">CreateConnection</span><span class="p">())</span>
                <span class="p">{</span>
                    <span class="k">return</span> <span class="p">(</span><span class="k">await</span> <span class="n">connection</span><span class="p">.</span><span class="n">QueryAsync</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;(</span><span class="n">query</span><span class="p">)).</span><span class="nf">ToList</span><span class="p">();</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exp</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">(</span><span class="n">exp</span><span class="p">.</span><span class="n">Message</span><span class="p">,</span> <span class="n">exp</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="nf">GetByIdAsync</span><span class="p">(</span><span class="kt">long</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="kt">var</span> <span class="n">query</span> <span class="p">=</span> <span class="s">"SELECT * FROM CUSTOMERS WHERE Id = @Id"</span><span class="p">;</span>
                <span class="kt">var</span> <span class="n">parameters</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">DynamicParameters</span><span class="p">();</span>
                <span class="n">parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"Id"</span><span class="p">,</span> <span class="n">id</span><span class="p">,</span> <span class="n">DbType</span><span class="p">.</span><span class="n">Int64</span><span class="p">);</span>

                <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">connection</span> <span class="p">=</span> <span class="nf">CreateConnection</span><span class="p">())</span>
                <span class="p">{</span>
                    <span class="k">return</span> <span class="p">(</span><span class="k">await</span> <span class="n">connection</span><span class="p">.</span><span class="n">QueryFirstOrDefaultAsync</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;(</span><span class="n">query</span><span class="p">,</span> <span class="n">parameters</span><span class="p">));</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exp</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">(</span><span class="n">exp</span><span class="p">.</span><span class="n">Message</span><span class="p">,</span> <span class="n">exp</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="nf">GetCustomerByEmail</span><span class="p">(</span><span class="kt">string</span> <span class="n">email</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="kt">var</span> <span class="n">query</span> <span class="p">=</span> <span class="s">"SELECT * FROM CUSTOMERS WHERE Email = @email"</span><span class="p">;</span>
                <span class="kt">var</span> <span class="n">parameters</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">DynamicParameters</span><span class="p">();</span>
                <span class="n">parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"Email"</span><span class="p">,</span> <span class="n">email</span><span class="p">,</span> <span class="n">DbType</span><span class="p">.</span><span class="n">String</span><span class="p">);</span>

                <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">connection</span> <span class="p">=</span> <span class="nf">CreateConnection</span><span class="p">())</span>
                <span class="p">{</span>
                    <span class="k">return</span> <span class="p">(</span><span class="k">await</span> <span class="n">connection</span><span class="p">.</span><span class="n">QueryFirstOrDefaultAsync</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;(</span><span class="n">query</span><span class="p">,</span> <span class="n">parameters</span><span class="p">));</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exp</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">(</span><span class="n">exp</span><span class="p">.</span><span class="n">Message</span><span class="p">,</span> <span class="n">exp</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Add a property in ApplicationUser class in Ordering.Infrastructure/Identity/</li>
</ul>

<p><strong>ApplicationUser.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Identity</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Infrastructure.Identity</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">ApplicationUser</span> <span class="p">:</span> <span class="n">IdentityUser</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">string</span><span class="p">?</span> <span class="n">FullName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Add IdentityService and TokenGenerator class in Ordering.Infrastructure/Services/</li>
</ul>

<p><strong>IdentityService.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Identity</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Common.Exceptions</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Common.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Infrastructure.Identity</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Infrastructure.Services</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">IdentityService</span> <span class="p">:</span> <span class="n">IIdentityService</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">UserManager</span><span class="p">&lt;</span><span class="n">ApplicationUser</span><span class="p">&gt;</span> <span class="n">_userManager</span><span class="p">;</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">SignInManager</span><span class="p">&lt;</span><span class="n">ApplicationUser</span><span class="p">&gt;</span> <span class="n">_signInManager</span><span class="p">;</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">RoleManager</span><span class="p">&lt;</span><span class="n">IdentityRole</span><span class="p">&gt;</span> <span class="n">_roleManager</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">IdentityService</span><span class="p">(</span><span class="n">UserManager</span><span class="p">&lt;</span><span class="n">ApplicationUser</span><span class="p">&gt;</span> <span class="n">userManager</span><span class="p">,</span> <span class="n">SignInManager</span><span class="p">&lt;</span><span class="n">ApplicationUser</span><span class="p">&gt;</span> <span class="n">signInManager</span><span class="p">,</span> <span class="n">RoleManager</span><span class="p">&lt;</span><span class="n">IdentityRole</span><span class="p">&gt;</span> <span class="n">roleManager</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_userManager</span> <span class="p">=</span> <span class="n">userManager</span><span class="p">;</span>
            <span class="n">_signInManager</span> <span class="p">=</span> <span class="n">signInManager</span><span class="p">;</span>
            <span class="n">_roleManager</span> <span class="p">=</span> <span class="n">roleManager</span><span class="p">;</span>
            <span class="n">_roleManager</span> <span class="p">=</span> <span class="n">roleManager</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">bool</span><span class="p">&gt;</span> <span class="nf">AssignUserToRole</span><span class="p">(</span><span class="kt">string</span> <span class="n">userName</span><span class="p">,</span> <span class="n">IList</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">roles</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">user</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_userManager</span><span class="p">.</span><span class="n">Users</span><span class="p">.</span><span class="nf">FirstOrDefaultAsync</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">UserName</span> <span class="p">==</span> <span class="n">userName</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">user</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">NotFoundException</span><span class="p">(</span><span class="s">"User not found"</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_userManager</span><span class="p">.</span><span class="nf">AddToRolesAsync</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="n">roles</span><span class="p">);</span>
            <span class="k">return</span> <span class="n">result</span><span class="p">.</span><span class="n">Succeeded</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">bool</span><span class="p">&gt;</span> <span class="nf">CreateRoleAsync</span><span class="p">(</span><span class="kt">string</span> <span class="n">roleName</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_roleManager</span><span class="p">.</span><span class="nf">CreateAsync</span><span class="p">(</span><span class="k">new</span> <span class="nf">IdentityRole</span><span class="p">(</span><span class="n">roleName</span><span class="p">));</span>
            <span class="k">if</span><span class="p">(!</span><span class="n">result</span><span class="p">.</span><span class="n">Succeeded</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">ValidationException</span><span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="n">Errors</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="n">result</span><span class="p">.</span><span class="n">Succeeded</span><span class="p">;</span>
        <span class="p">}</span>


        <span class="c1">// Return multiple value</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;(</span><span class="kt">bool</span> <span class="n">isSucceed</span><span class="p">,</span> <span class="kt">string</span> <span class="n">userId</span><span class="p">)&gt;</span> <span class="nf">CreateUserAsync</span><span class="p">(</span><span class="kt">string</span> <span class="n">userName</span><span class="p">,</span> <span class="kt">string</span> <span class="n">password</span><span class="p">,</span> <span class="kt">string</span> <span class="n">email</span><span class="p">,</span> <span class="kt">string</span> <span class="n">fullName</span><span class="p">,</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">roles</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">user</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">ApplicationUser</span><span class="p">()</span>
            <span class="p">{</span>
                <span class="n">FullName</span> <span class="p">=</span> <span class="n">fullName</span><span class="p">,</span>
                <span class="n">UserName</span> <span class="p">=</span> <span class="n">userName</span><span class="p">,</span>
                <span class="n">Email</span> <span class="p">=</span> <span class="n">email</span>
            <span class="p">};</span>

            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_userManager</span><span class="p">.</span><span class="nf">CreateAsync</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="n">password</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(!</span><span class="n">result</span><span class="p">.</span><span class="n">Succeeded</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">ValidationException</span><span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="n">Errors</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="kt">var</span> <span class="n">addUserRole</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_userManager</span><span class="p">.</span><span class="nf">AddToRolesAsync</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="n">roles</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(!</span><span class="n">addUserRole</span><span class="p">.</span><span class="n">Succeeded</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">ValidationException</span><span class="p">(</span><span class="n">addUserRole</span><span class="p">.</span><span class="n">Errors</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="n">Succeeded</span><span class="p">,</span> <span class="n">user</span><span class="p">.</span><span class="n">Id</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">bool</span><span class="p">&gt;</span> <span class="nf">DeleteRoleAsync</span><span class="p">(</span><span class="kt">string</span> <span class="n">roleId</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">roleDetails</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_roleManager</span><span class="p">.</span><span class="nf">FindByIdAsync</span><span class="p">(</span><span class="n">roleId</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">roleDetails</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">NotFoundException</span><span class="p">(</span><span class="s">"Role not found"</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">roleDetails</span><span class="p">.</span><span class="n">Name</span> <span class="p">==</span> <span class="s">"Administrator"</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">BadRequestException</span><span class="p">(</span><span class="s">"You can not delete Administrator Role"</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_roleManager</span><span class="p">.</span><span class="nf">DeleteAsync</span><span class="p">(</span><span class="n">roleDetails</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(!</span><span class="n">result</span><span class="p">.</span><span class="n">Succeeded</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">ValidationException</span><span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="n">Errors</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="n">result</span><span class="p">.</span><span class="n">Succeeded</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">bool</span><span class="p">&gt;</span> <span class="nf">DeleteUserAsync</span><span class="p">(</span><span class="kt">string</span> <span class="n">userId</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">user</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_userManager</span><span class="p">.</span><span class="n">Users</span><span class="p">.</span><span class="nf">FirstOrDefaultAsync</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">userId</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">user</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">NotFoundException</span><span class="p">(</span><span class="s">"User not found"</span><span class="p">);</span>
                <span class="c1">//throw new Exception("User not found");</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">user</span><span class="p">.</span><span class="n">UserName</span> <span class="p">==</span> <span class="s">"system"</span> <span class="p">||</span> <span class="n">user</span><span class="p">.</span><span class="n">UserName</span> <span class="p">==</span> <span class="s">"admin"</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">(</span><span class="s">"You can not delete system or admin user"</span><span class="p">);</span>
                <span class="c1">//throw new BadRequestException("You can not delete system or admin user");</span>
            <span class="p">}</span>
            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_userManager</span><span class="p">.</span><span class="nf">DeleteAsync</span><span class="p">(</span><span class="n">user</span><span class="p">);</span>
            <span class="k">return</span> <span class="n">result</span><span class="p">.</span><span class="n">Succeeded</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;(</span><span class="kt">string</span> <span class="n">id</span><span class="p">,</span> <span class="kt">string</span> <span class="n">fullName</span><span class="p">,</span> <span class="kt">string</span> <span class="n">userName</span><span class="p">,</span> <span class="kt">string</span> <span class="n">email</span><span class="p">)&gt;&gt;</span> <span class="nf">GetAllUsersAsync</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">users</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_userManager</span><span class="p">.</span><span class="n">Users</span><span class="p">.</span><span class="nf">Select</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="k">new</span>
            <span class="p">{</span>
                <span class="n">x</span><span class="p">.</span><span class="n">Id</span><span class="p">,</span>
                <span class="n">x</span><span class="p">.</span><span class="n">FullName</span><span class="p">,</span>
                <span class="n">x</span><span class="p">.</span><span class="n">UserName</span><span class="p">,</span>
                <span class="n">x</span><span class="p">.</span><span class="n">Email</span>
            <span class="p">}).</span><span class="nf">ToListAsync</span><span class="p">();</span>

            <span class="k">return</span> <span class="n">users</span><span class="p">.</span><span class="nf">Select</span><span class="p">(</span><span class="n">user</span> <span class="p">=&gt;</span> <span class="p">(</span><span class="n">user</span><span class="p">.</span><span class="n">Id</span><span class="p">,</span> <span class="n">user</span><span class="p">.</span><span class="n">FullName</span><span class="p">,</span> <span class="n">user</span><span class="p">.</span><span class="n">UserName</span><span class="p">,</span> <span class="n">user</span><span class="p">.</span><span class="n">Email</span><span class="p">)).</span><span class="nf">ToList</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;(</span><span class="kt">string</span> <span class="n">id</span><span class="p">,</span> <span class="kt">string</span> <span class="n">userName</span><span class="p">,</span> <span class="kt">string</span> <span class="n">email</span><span class="p">,</span> <span class="n">IList</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">roles</span><span class="p">)&gt;&gt;</span> <span class="nf">GetAllUsersDetailsAsync</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">NotImplementedException</span><span class="p">();</span>

            <span class="c1">//var roles = await _userManager.GetRolesAsync(user);</span>
            <span class="c1">//return (user.Id, user.UserName, user.Email, roles);</span>

            <span class="c1">//var users = _userManager.Users.ToListAsync();</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;(</span><span class="kt">string</span> <span class="n">id</span><span class="p">,</span> <span class="kt">string</span> <span class="n">roleName</span><span class="p">)&gt;&gt;</span> <span class="nf">GetRolesAsync</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">roles</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_roleManager</span><span class="p">.</span><span class="n">Roles</span><span class="p">.</span><span class="nf">Select</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="k">new</span>
            <span class="p">{</span>
                <span class="n">x</span><span class="p">.</span><span class="n">Id</span><span class="p">,</span>
                <span class="n">x</span><span class="p">.</span><span class="n">Name</span>
            <span class="p">}).</span><span class="nf">ToListAsync</span><span class="p">();</span>

            <span class="k">return</span> <span class="n">roles</span><span class="p">.</span><span class="nf">Select</span><span class="p">(</span><span class="n">role</span> <span class="p">=&gt;</span> <span class="p">(</span><span class="n">role</span><span class="p">.</span><span class="n">Id</span><span class="p">,</span> <span class="n">role</span><span class="p">.</span><span class="n">Name</span><span class="p">)).</span><span class="nf">ToList</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;(</span><span class="kt">string</span> <span class="n">userId</span><span class="p">,</span> <span class="kt">string</span> <span class="n">fullName</span><span class="p">,</span> <span class="kt">string</span> <span class="n">UserName</span><span class="p">,</span> <span class="kt">string</span> <span class="n">email</span><span class="p">,</span> <span class="n">IList</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">roles</span><span class="p">)&gt;</span> <span class="nf">GetUserDetailsAsync</span><span class="p">(</span><span class="kt">string</span> <span class="n">userId</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">user</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_userManager</span><span class="p">.</span><span class="n">Users</span><span class="p">.</span><span class="nf">FirstOrDefaultAsync</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">userId</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">user</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">NotFoundException</span><span class="p">(</span><span class="s">"User not found"</span><span class="p">);</span>             
            <span class="p">}</span>
            <span class="kt">var</span> <span class="n">roles</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_userManager</span><span class="p">.</span><span class="nf">GetRolesAsync</span><span class="p">(</span><span class="n">user</span><span class="p">);</span>
            <span class="k">return</span> <span class="p">(</span><span class="n">user</span><span class="p">.</span><span class="n">Id</span><span class="p">,</span> <span class="n">user</span><span class="p">.</span><span class="n">FullName</span><span class="p">,</span> <span class="n">user</span><span class="p">.</span><span class="n">UserName</span><span class="p">,</span> <span class="n">user</span><span class="p">.</span><span class="n">Email</span><span class="p">,</span> <span class="n">roles</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;(</span><span class="kt">string</span> <span class="n">userId</span><span class="p">,</span> <span class="kt">string</span> <span class="n">fullName</span><span class="p">,</span> <span class="kt">string</span> <span class="n">UserName</span><span class="p">,</span> <span class="kt">string</span> <span class="n">email</span><span class="p">,</span> <span class="n">IList</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">roles</span><span class="p">)&gt;</span> <span class="nf">GetUserDetailsByUserNameAsync</span><span class="p">(</span><span class="kt">string</span> <span class="n">userName</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">user</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_userManager</span><span class="p">.</span><span class="n">Users</span><span class="p">.</span><span class="nf">FirstOrDefaultAsync</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">UserName</span> <span class="p">==</span> <span class="n">userName</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">user</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">NotFoundException</span><span class="p">(</span><span class="s">"User not found"</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="kt">var</span> <span class="n">roles</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_userManager</span><span class="p">.</span><span class="nf">GetRolesAsync</span><span class="p">(</span><span class="n">user</span><span class="p">);</span>
            <span class="k">return</span> <span class="p">(</span><span class="n">user</span><span class="p">.</span><span class="n">Id</span><span class="p">,</span> <span class="n">user</span><span class="p">.</span><span class="n">FullName</span><span class="p">,</span> <span class="n">user</span><span class="p">.</span><span class="n">UserName</span><span class="p">,</span> <span class="n">user</span><span class="p">.</span><span class="n">Email</span><span class="p">,</span> <span class="n">roles</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="nf">GetUserIdAsync</span><span class="p">(</span><span class="kt">string</span> <span class="n">userName</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">user</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_userManager</span><span class="p">.</span><span class="n">Users</span><span class="p">.</span><span class="nf">FirstOrDefaultAsync</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">UserName</span> <span class="p">==</span> <span class="n">userName</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">user</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">NotFoundException</span><span class="p">(</span><span class="s">"User not found"</span><span class="p">);</span>
                <span class="c1">//throw new Exception("User not found");</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_userManager</span><span class="p">.</span><span class="nf">GetUserIdAsync</span><span class="p">(</span><span class="n">user</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="nf">GetUserNameAsync</span><span class="p">(</span><span class="kt">string</span> <span class="n">userId</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">user</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_userManager</span><span class="p">.</span><span class="n">Users</span><span class="p">.</span><span class="nf">FirstOrDefaultAsync</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">userId</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">user</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">NotFoundException</span><span class="p">(</span><span class="s">"User not found"</span><span class="p">);</span>
                <span class="c1">//throw new Exception("User not found");</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_userManager</span><span class="p">.</span><span class="nf">GetUserNameAsync</span><span class="p">(</span><span class="n">user</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;&gt;</span> <span class="nf">GetUserRolesAsync</span><span class="p">(</span><span class="kt">string</span> <span class="n">userId</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">user</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_userManager</span><span class="p">.</span><span class="n">Users</span><span class="p">.</span><span class="nf">FirstOrDefaultAsync</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">userId</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">user</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">NotFoundException</span><span class="p">(</span><span class="s">"User not found"</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="kt">var</span> <span class="n">roles</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_userManager</span><span class="p">.</span><span class="nf">GetRolesAsync</span><span class="p">(</span><span class="n">user</span><span class="p">);</span>
            <span class="k">return</span> <span class="n">roles</span><span class="p">.</span><span class="nf">ToList</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">bool</span><span class="p">&gt;</span> <span class="nf">IsInRoleAsync</span><span class="p">(</span><span class="kt">string</span> <span class="n">userId</span><span class="p">,</span> <span class="kt">string</span> <span class="n">role</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">user</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_userManager</span><span class="p">.</span><span class="n">Users</span><span class="p">.</span><span class="nf">FirstOrDefaultAsync</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">userId</span><span class="p">);</span>

            <span class="k">if</span><span class="p">(</span><span class="n">user</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">NotFoundException</span><span class="p">(</span><span class="s">"User not found"</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_userManager</span><span class="p">.</span><span class="nf">IsInRoleAsync</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="n">role</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">bool</span><span class="p">&gt;</span> <span class="nf">IsUniqueUserName</span><span class="p">(</span><span class="kt">string</span> <span class="n">userName</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_userManager</span><span class="p">.</span><span class="nf">FindByNameAsync</span><span class="p">(</span><span class="n">userName</span><span class="p">)</span> <span class="p">==</span> <span class="k">null</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">bool</span><span class="p">&gt;</span> <span class="nf">SigninUserAsync</span><span class="p">(</span><span class="kt">string</span> <span class="n">userName</span><span class="p">,</span> <span class="kt">string</span> <span class="n">password</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_signInManager</span><span class="p">.</span><span class="nf">PasswordSignInAsync</span><span class="p">(</span><span class="n">userName</span><span class="p">,</span> <span class="n">password</span><span class="p">,</span> <span class="k">true</span><span class="p">,</span> <span class="k">false</span><span class="p">);</span>
            <span class="k">return</span> <span class="n">result</span><span class="p">.</span><span class="n">Succeeded</span><span class="p">;</span>


        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">bool</span><span class="p">&gt;</span> <span class="nf">UpdateUserProfile</span><span class="p">(</span><span class="kt">string</span> <span class="n">id</span><span class="p">,</span> <span class="kt">string</span> <span class="n">fullName</span><span class="p">,</span> <span class="kt">string</span> <span class="n">email</span><span class="p">,</span> <span class="n">IList</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">roles</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">user</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_userManager</span><span class="p">.</span><span class="nf">FindByIdAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
            <span class="n">user</span><span class="p">.</span><span class="n">FullName</span> <span class="p">=</span> <span class="n">fullName</span><span class="p">;</span>
            <span class="n">user</span><span class="p">.</span><span class="n">Email</span> <span class="p">=</span> <span class="n">email</span><span class="p">;</span>
            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_userManager</span><span class="p">.</span><span class="nf">UpdateAsync</span><span class="p">(</span><span class="n">user</span><span class="p">);</span>

            <span class="k">return</span> <span class="n">result</span><span class="p">.</span><span class="n">Succeeded</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;(</span><span class="kt">string</span> <span class="n">id</span><span class="p">,</span> <span class="kt">string</span> <span class="n">roleName</span><span class="p">)&gt;</span> <span class="nf">GetRoleByIdAsync</span><span class="p">(</span><span class="kt">string</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">role</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_roleManager</span><span class="p">.</span><span class="nf">FindByIdAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
            <span class="k">return</span> <span class="p">(</span><span class="n">role</span><span class="p">.</span><span class="n">Id</span><span class="p">,</span> <span class="n">role</span><span class="p">.</span><span class="n">Name</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">bool</span><span class="p">&gt;</span> <span class="nf">UpdateRole</span><span class="p">(</span><span class="kt">string</span> <span class="n">id</span><span class="p">,</span> <span class="kt">string</span> <span class="n">roleName</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">roleName</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="kt">var</span> <span class="n">role</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_roleManager</span><span class="p">.</span><span class="nf">FindByIdAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
                <span class="n">role</span><span class="p">.</span><span class="n">Name</span> <span class="p">=</span> <span class="n">roleName</span><span class="p">;</span>
                <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_roleManager</span><span class="p">.</span><span class="nf">UpdateAsync</span><span class="p">(</span><span class="n">role</span><span class="p">);</span>
                <span class="k">return</span> <span class="n">result</span><span class="p">.</span><span class="n">Succeeded</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">bool</span><span class="p">&gt;</span> <span class="nf">UpdateUsersRole</span><span class="p">(</span><span class="kt">string</span> <span class="n">userName</span><span class="p">,</span> <span class="n">IList</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">usersRole</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">user</span> <span class="p">=</span>  <span class="k">await</span> <span class="n">_userManager</span><span class="p">.</span><span class="nf">FindByNameAsync</span><span class="p">(</span><span class="n">userName</span><span class="p">);</span>
            <span class="kt">var</span> <span class="n">existingRoles</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_userManager</span><span class="p">.</span><span class="nf">GetRolesAsync</span><span class="p">(</span><span class="n">user</span><span class="p">);</span>
            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_userManager</span><span class="p">.</span><span class="nf">RemoveFromRolesAsync</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="n">existingRoles</span><span class="p">);</span>
            <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_userManager</span><span class="p">.</span><span class="nf">AddToRolesAsync</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="n">usersRole</span><span class="p">);</span>

            <span class="k">return</span> <span class="n">result</span><span class="p">.</span><span class="n">Succeeded</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>TokenGenerator.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Microsoft.IdentityModel.Tokens</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Common.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.IdentityModel.Tokens.Jwt</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Security.Claims</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Text</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Infrastructure.Services</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">TokenGenerator</span> <span class="p">:</span> <span class="n">ITokenGenerator</span>
    <span class="p">{</span>

        <span class="k">private</span> <span class="k">readonly</span> <span class="kt">string</span> <span class="n">_key</span><span class="p">;</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="kt">string</span> <span class="n">_issuer</span><span class="p">;</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="kt">string</span> <span class="n">_audience</span><span class="p">;</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="kt">string</span> <span class="n">_expiryMinutes</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">TokenGenerator</span><span class="p">(</span><span class="kt">string</span> <span class="n">key</span><span class="p">,</span> <span class="kt">string</span> <span class="n">issueer</span><span class="p">,</span> <span class="kt">string</span> <span class="n">audience</span><span class="p">,</span> <span class="kt">string</span> <span class="n">expiryMinutes</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_key</span> <span class="p">=</span> <span class="n">key</span><span class="p">;</span>
            <span class="n">_issuer</span> <span class="p">=</span> <span class="n">issueer</span><span class="p">;</span>
            <span class="n">_audience</span> <span class="p">=</span> <span class="n">audience</span><span class="p">;</span>
            <span class="n">_expiryMinutes</span> <span class="p">=</span> <span class="n">expiryMinutes</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="kt">string</span> <span class="nf">GenerateJWTToken</span><span class="p">((</span><span class="kt">string</span> <span class="n">userId</span><span class="p">,</span> <span class="kt">string</span> <span class="n">userName</span><span class="p">,</span> <span class="n">IList</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">roles</span><span class="p">)</span> <span class="n">userDetails</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">securityKey</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">SymmetricSecurityKey</span><span class="p">(</span><span class="n">Encoding</span><span class="p">.</span><span class="n">UTF8</span><span class="p">.</span><span class="nf">GetBytes</span><span class="p">(</span><span class="n">_key</span><span class="p">));</span>
            <span class="kt">var</span> <span class="n">signingCredentials</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">SigningCredentials</span><span class="p">(</span><span class="n">securityKey</span><span class="p">,</span> <span class="n">SecurityAlgorithms</span><span class="p">.</span><span class="n">HmacSha256</span><span class="p">);</span>

            <span class="kt">var</span> <span class="p">(</span><span class="n">userId</span><span class="p">,</span> <span class="n">userName</span><span class="p">,</span> <span class="n">roles</span><span class="p">)</span> <span class="p">=</span> <span class="n">userDetails</span><span class="p">;</span>

            <span class="kt">var</span> <span class="n">claims</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Claim</span><span class="p">&gt;()</span>
            <span class="p">{</span>
                <span class="k">new</span> <span class="nf">Claim</span><span class="p">(</span><span class="n">JwtRegisteredClaimNames</span><span class="p">.</span><span class="n">Sub</span><span class="p">,</span> <span class="n">userName</span><span class="p">),</span>
                <span class="k">new</span> <span class="nf">Claim</span><span class="p">(</span><span class="n">JwtRegisteredClaimNames</span><span class="p">.</span><span class="n">Jti</span><span class="p">,</span> <span class="n">userId</span><span class="p">),</span>
                <span class="k">new</span> <span class="nf">Claim</span><span class="p">(</span><span class="n">ClaimTypes</span><span class="p">.</span><span class="n">Name</span><span class="p">,</span> <span class="n">userName</span><span class="p">),</span>
                <span class="k">new</span> <span class="nf">Claim</span><span class="p">(</span><span class="s">"UserId"</span><span class="p">,</span> <span class="n">userId</span><span class="p">)</span>
            <span class="p">};</span>
            <span class="n">claims</span><span class="p">.</span><span class="nf">AddRange</span><span class="p">(</span><span class="n">roles</span><span class="p">.</span><span class="nf">Select</span><span class="p">(</span><span class="n">role</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="nf">Claim</span><span class="p">(</span><span class="n">ClaimTypes</span><span class="p">.</span><span class="n">Role</span><span class="p">,</span> <span class="n">role</span><span class="p">)));</span>


            <span class="kt">var</span> <span class="n">token</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">JwtSecurityToken</span><span class="p">(</span>
                <span class="n">issuer</span><span class="p">:</span> <span class="n">_issuer</span><span class="p">,</span>
                <span class="n">audience</span><span class="p">:</span> <span class="n">_audience</span><span class="p">,</span>
                <span class="n">claims</span><span class="p">:</span> <span class="n">claims</span><span class="p">,</span>
                <span class="n">expires</span><span class="p">:</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">.</span><span class="nf">AddMinutes</span><span class="p">(</span><span class="n">Convert</span><span class="p">.</span><span class="nf">ToDouble</span><span class="p">(</span><span class="n">_expiryMinutes</span><span class="p">)),</span>
                <span class="n">signingCredentials</span><span class="p">:</span> <span class="n">signingCredentials</span>
           <span class="p">);</span>

            <span class="kt">var</span> <span class="n">encodedToken</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">JwtSecurityTokenHandler</span><span class="p">().</span><span class="nf">WriteToken</span><span class="p">(</span><span class="n">token</span><span class="p">);</span>
            <span class="k">return</span> <span class="n">encodedToken</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create DependencyInjection class in Ordering.Application root folder</li>
</ul>

<p><strong>DependencyInjection.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Identity</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Extensions.Configuration</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Extensions.DependencyInjection</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Common.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Repositories.Command</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Repositories.Command.Base</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Repositories.Query</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Repositories.Query.Base</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Infrastructure.Data</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Infrastructure.Identity</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Infrastructure.Repository.Command</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Infrastructure.Repository.Command.Base</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Infrastructure.Repository.Query</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Infrastructure.Repository.Query.Base</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Infrastructure.Services</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Infrastructure</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">DependencyInjection</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">static</span> <span class="n">IServiceCollection</span> <span class="nf">AddInfrastructure</span><span class="p">(</span><span class="k">this</span> <span class="n">IServiceCollection</span> <span class="n">services</span><span class="p">,</span>
            <span class="n">IConfiguration</span> <span class="n">configuration</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">services</span><span class="p">.</span><span class="n">AddDbContext</span><span class="p">&lt;</span><span class="n">OrderingContext</span><span class="p">&gt;(</span><span class="n">options</span> <span class="p">=&gt;</span> <span class="n">options</span><span class="p">.</span><span class="nf">UseSqlite</span><span class="p">(</span><span class="n">configuration</span><span class="p">.</span><span class="nf">GetConnectionString</span><span class="p">(</span><span class="s">"DefaultConnection"</span><span class="p">),</span>
                <span class="n">b</span> <span class="p">=&gt;</span> <span class="n">b</span><span class="p">.</span><span class="nf">MigrationsAssembly</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">OrderingContext</span><span class="p">).</span><span class="n">Assembly</span><span class="p">.</span><span class="n">FullName</span><span class="p">)</span>
                <span class="p">));</span>

            <span class="n">services</span><span class="p">.</span><span class="n">AddIdentity</span><span class="p">&lt;</span><span class="n">ApplicationUser</span><span class="p">,</span> <span class="n">IdentityRole</span><span class="p">&gt;()</span>
            <span class="p">.</span><span class="n">AddEntityFrameworkStores</span><span class="p">&lt;</span><span class="n">OrderingContext</span><span class="p">&gt;()</span>
            <span class="p">.</span><span class="nf">AddDefaultTokenProviders</span><span class="p">();</span>

            <span class="n">services</span><span class="p">.</span><span class="n">Configure</span><span class="p">&lt;</span><span class="n">IdentityOptions</span><span class="p">&gt;(</span><span class="n">options</span> <span class="p">=&gt;</span>
            <span class="p">{</span>
                <span class="c1">// Default Lockout settings.</span>
                <span class="n">options</span><span class="p">.</span><span class="n">Lockout</span><span class="p">.</span><span class="n">DefaultLockoutTimeSpan</span> <span class="p">=</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="nf">FromMinutes</span><span class="p">(</span><span class="m">5</span><span class="p">);</span>
                <span class="n">options</span><span class="p">.</span><span class="n">Lockout</span><span class="p">.</span><span class="n">MaxFailedAccessAttempts</span> <span class="p">=</span> <span class="m">5</span><span class="p">;</span>
                <span class="n">options</span><span class="p">.</span><span class="n">Lockout</span><span class="p">.</span><span class="n">AllowedForNewUsers</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
                <span class="c1">// Default Password settings.</span>
                <span class="n">options</span><span class="p">.</span><span class="n">Password</span><span class="p">.</span><span class="n">RequireDigit</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
                <span class="n">options</span><span class="p">.</span><span class="n">Password</span><span class="p">.</span><span class="n">RequireLowercase</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
                <span class="n">options</span><span class="p">.</span><span class="n">Password</span><span class="p">.</span><span class="n">RequireNonAlphanumeric</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span> <span class="c1">// For special character</span>
                <span class="n">options</span><span class="p">.</span><span class="n">Password</span><span class="p">.</span><span class="n">RequireUppercase</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
                <span class="n">options</span><span class="p">.</span><span class="n">Password</span><span class="p">.</span><span class="n">RequiredLength</span> <span class="p">=</span> <span class="m">6</span><span class="p">;</span>
                <span class="n">options</span><span class="p">.</span><span class="n">Password</span><span class="p">.</span><span class="n">RequiredUniqueChars</span> <span class="p">=</span> <span class="m">1</span><span class="p">;</span>
                <span class="c1">// Default SignIn settings.</span>
                <span class="n">options</span><span class="p">.</span><span class="n">SignIn</span><span class="p">.</span><span class="n">RequireConfirmedEmail</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
                <span class="n">options</span><span class="p">.</span><span class="n">SignIn</span><span class="p">.</span><span class="n">RequireConfirmedPhoneNumber</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
                <span class="n">options</span><span class="p">.</span><span class="n">User</span><span class="p">.</span><span class="n">RequireUniqueEmail</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
            <span class="p">});</span>


            <span class="n">services</span><span class="p">.</span><span class="n">AddScoped</span><span class="p">&lt;</span><span class="n">IIdentityService</span><span class="p">,</span> <span class="n">IdentityService</span><span class="p">&gt;();</span>

            <span class="n">services</span><span class="p">.</span><span class="nf">AddScoped</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">IQueryRepository</span><span class="p">&lt;&gt;),</span> <span class="k">typeof</span><span class="p">(</span><span class="n">QueryRepository</span><span class="p">&lt;&gt;));</span>
            <span class="n">services</span><span class="p">.</span><span class="n">AddTransient</span><span class="p">&lt;</span><span class="n">ICustomerQueryRepository</span><span class="p">,</span> <span class="n">CustomerQueryRepository</span><span class="p">&gt;();</span>
            <span class="n">services</span><span class="p">.</span><span class="nf">AddScoped</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">ICommandRepository</span><span class="p">&lt;&gt;),</span> <span class="k">typeof</span><span class="p">(</span><span class="n">CommandRepository</span><span class="p">&lt;&gt;));</span>
            <span class="n">services</span><span class="p">.</span><span class="n">AddTransient</span><span class="p">&lt;</span><span class="n">ICustomerCommandRepository</span><span class="p">,</span> <span class="n">CustomerCommandRepository</span><span class="p">&gt;();</span>


            <span class="k">return</span> <span class="n">services</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 7: Now organize Ordering.Application layer</strong></p>

<ul>
  <li>Create DTO classes in Ordering.Application/DTOs folder</li>
</ul>

<p><strong>AuthResponseDTO.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">Ordering.Application.DTOs</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">AuthResponseDTO</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">UserId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Token</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>CustomerResponse.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">Ordering.Application.DTOs</span>
<span class="p">{</span>
    <span class="c1">// Customer response or DTO class</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CustomerResponse</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="n">Int64</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">FirstName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">LastName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Email</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">ContactNumber</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Address</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>RoleResponseDTO.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">Ordering.Application.DTOs</span>
<span class="p">{</span>
    <span class="c1">// Customer response or DTO class</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CustomerResponse</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="n">Int64</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">FirstName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">LastName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Email</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">ContactNumber</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Address</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>UserDetailsResponseDTO.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">Ordering.Application.DTOs</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">UserDetailsResponseDTO</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">FullName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">UserName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Email</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="n">IList</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">Roles</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>UserResponseDTO.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">Ordering.Application.DTOs</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">UserResponseDTO</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">FullName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">UserName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Email</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create Custom Exceptions classes in Ordering.Application/Common/Exceptions folder</li>
</ul>

<p><strong>BadRequestException.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">Ordering.Application.Common.Exceptions</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">BadRequestException</span> <span class="p">:</span> <span class="n">Exception</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">BadRequestException</span><span class="p">()</span> <span class="p">:</span> <span class="k">base</span><span class="p">()</span>
        <span class="p">{</span>

        <span class="p">}</span>

        <span class="k">public</span> <span class="nf">BadRequestException</span><span class="p">(</span><span class="kt">string</span> <span class="n">message</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
        <span class="p">{</span>

        <span class="p">}</span>

        <span class="k">public</span> <span class="nf">BadRequestException</span><span class="p">(</span><span class="kt">string</span> <span class="n">message</span><span class="p">,</span> <span class="n">Exception</span> <span class="n">exp</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="n">exp</span><span class="p">)</span>
        <span class="p">{</span>

        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>ForbiddenAccessException.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">Ordering.Application.Common.Exceptions</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">ForbiddenAccessException</span> <span class="p">:</span> <span class="n">Exception</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">ForbiddenAccessException</span><span class="p">()</span> <span class="p">:</span> <span class="k">base</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>NotFoundException.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">Ordering.Application.Common.Exceptions</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">NotFoundException</span> <span class="p">:</span> <span class="n">Exception</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">NotFoundException</span><span class="p">()</span> <span class="p">:</span> <span class="k">base</span><span class="p">()</span>
        <span class="p">{</span>

        <span class="p">}</span>

        <span class="k">public</span> <span class="nf">NotFoundException</span><span class="p">(</span><span class="kt">string</span> <span class="n">message</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
        <span class="p">{</span>

        <span class="p">}</span>

        <span class="k">public</span> <span class="nf">NotFoundException</span><span class="p">(</span><span class="kt">string</span> <span class="n">message</span><span class="p">,</span> <span class="n">Exception</span> <span class="n">exp</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="n">exp</span><span class="p">)</span>
        <span class="p">{</span>

        <span class="p">}</span>

        <span class="k">public</span> <span class="nf">NotFoundException</span><span class="p">(</span><span class="kt">string</span> <span class="n">name</span><span class="p">,</span> <span class="kt">object</span> <span class="n">key</span><span class="p">)</span>
            <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="s">$"Entity \"</span><span class="p">{</span><span class="n">name</span><span class="p">}</span><span class="s">\" (</span><span class="p">{</span><span class="n">key</span><span class="p">}</span><span class="s">) was not found."</span><span class="p">)</span>
        <span class="p">{</span>

        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>ValidationException.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">FluentValidation.Results</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Identity</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Application.Common.Exceptions</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">ValidationException</span> <span class="p">:</span> <span class="n">Exception</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">ValidationException</span><span class="p">()</span>
            <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="s">"One or more validation failures have occurred."</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Errors</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">string</span><span class="p">[</span><span class="k">]&gt;</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="nf">ValidationException</span><span class="p">(</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">ValidationFailure</span><span class="p">&gt;</span> <span class="n">failures</span><span class="p">)</span>
            <span class="p">:</span> <span class="k">this</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">Errors</span> <span class="p">=</span> <span class="n">failures</span>
                <span class="p">.</span><span class="nf">GroupBy</span><span class="p">(</span><span class="n">e</span> <span class="p">=&gt;</span> <span class="n">e</span><span class="p">.</span><span class="n">PropertyName</span><span class="p">,</span> <span class="n">e</span> <span class="p">=&gt;</span> <span class="n">e</span><span class="p">.</span><span class="n">ErrorMessage</span><span class="p">)</span>
                <span class="p">.</span><span class="nf">ToDictionary</span><span class="p">(</span><span class="n">failureGroup</span> <span class="p">=&gt;</span> <span class="n">failureGroup</span><span class="p">.</span><span class="n">Key</span><span class="p">,</span> <span class="n">failureGroup</span> <span class="p">=&gt;</span> <span class="n">failureGroup</span><span class="p">.</span><span class="nf">ToArray</span><span class="p">());</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="nf">ValidationException</span><span class="p">(</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">IdentityError</span><span class="p">&gt;</span> <span class="n">errors</span><span class="p">)</span> <span class="p">:</span> <span class="k">this</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">Errors</span> <span class="p">=</span> <span class="n">errors</span>
                <span class="p">.</span><span class="nf">GroupBy</span><span class="p">(</span><span class="n">e</span> <span class="p">=&gt;</span> <span class="n">e</span><span class="p">.</span><span class="n">Code</span><span class="p">,</span> <span class="n">e</span> <span class="p">=&gt;</span> <span class="n">e</span><span class="p">.</span><span class="n">Description</span><span class="p">)</span>
                <span class="p">.</span><span class="nf">ToDictionary</span><span class="p">(</span><span class="n">failureGroup</span> <span class="p">=&gt;</span> <span class="n">failureGroup</span><span class="p">.</span><span class="n">Key</span><span class="p">,</span> <span class="n">failureGroup</span> <span class="p">=&gt;</span> <span class="n">failureGroup</span><span class="p">.</span><span class="nf">ToArray</span><span class="p">());</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">IDictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">string</span><span class="p">[</span><span class="k">]&gt;</span> <span class="n">Errors</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create some interface in Ordering.Application/Common/Interfaces</li>
</ul>

<p><strong>IIdentityService.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">Ordering.Application.Common.Interfaces</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">interface</span> <span class="nc">IIdentityService</span>
    <span class="p">{</span>
        <span class="c1">// User section</span>
        <span class="n">Task</span><span class="p">&lt;(</span><span class="kt">bool</span> <span class="n">isSucceed</span><span class="p">,</span> <span class="kt">string</span> <span class="n">userId</span><span class="p">)&gt;</span> <span class="nf">CreateUserAsync</span><span class="p">(</span><span class="kt">string</span> <span class="n">userName</span><span class="p">,</span> <span class="kt">string</span> <span class="n">password</span><span class="p">,</span> <span class="kt">string</span> <span class="n">email</span><span class="p">,</span> <span class="kt">string</span> <span class="n">fullName</span><span class="p">,</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">roles</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="kt">bool</span><span class="p">&gt;</span> <span class="nf">SigninUserAsync</span><span class="p">(</span><span class="kt">string</span> <span class="n">userName</span><span class="p">,</span> <span class="kt">string</span> <span class="n">password</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="nf">GetUserIdAsync</span><span class="p">(</span><span class="kt">string</span> <span class="n">userName</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;(</span><span class="kt">string</span> <span class="n">userId</span><span class="p">,</span> <span class="kt">string</span> <span class="n">fullName</span><span class="p">,</span> <span class="kt">string</span> <span class="n">UserName</span><span class="p">,</span> <span class="kt">string</span> <span class="n">email</span><span class="p">,</span> <span class="n">IList</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">roles</span><span class="p">)&gt;</span> <span class="nf">GetUserDetailsAsync</span><span class="p">(</span><span class="kt">string</span> <span class="n">userId</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;(</span><span class="kt">string</span> <span class="n">userId</span><span class="p">,</span> <span class="kt">string</span> <span class="n">fullName</span><span class="p">,</span> <span class="kt">string</span> <span class="n">UserName</span><span class="p">,</span> <span class="kt">string</span> <span class="n">email</span><span class="p">,</span> <span class="n">IList</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">roles</span><span class="p">)&gt;</span> <span class="nf">GetUserDetailsByUserNameAsync</span><span class="p">(</span><span class="kt">string</span> <span class="n">userName</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="nf">GetUserNameAsync</span><span class="p">(</span><span class="kt">string</span> <span class="n">userId</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="kt">bool</span><span class="p">&gt;</span> <span class="nf">DeleteUserAsync</span><span class="p">(</span><span class="kt">string</span> <span class="n">userId</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="kt">bool</span><span class="p">&gt;</span> <span class="nf">IsUniqueUserName</span><span class="p">(</span><span class="kt">string</span> <span class="n">userName</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;(</span><span class="kt">string</span> <span class="n">id</span><span class="p">,</span> <span class="kt">string</span> <span class="n">fullName</span><span class="p">,</span> <span class="kt">string</span> <span class="n">userName</span><span class="p">,</span> <span class="kt">string</span> <span class="n">email</span><span class="p">)&gt;&gt;</span> <span class="nf">GetAllUsersAsync</span><span class="p">();</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;(</span><span class="kt">string</span> <span class="n">id</span><span class="p">,</span> <span class="kt">string</span> <span class="n">userName</span><span class="p">,</span> <span class="kt">string</span> <span class="n">email</span><span class="p">,</span> <span class="n">IList</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">roles</span><span class="p">)&gt;&gt;</span> <span class="nf">GetAllUsersDetailsAsync</span><span class="p">();</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="kt">bool</span><span class="p">&gt;</span> <span class="nf">UpdateUserProfile</span><span class="p">(</span><span class="kt">string</span> <span class="n">id</span><span class="p">,</span> <span class="kt">string</span> <span class="n">fullName</span><span class="p">,</span> <span class="kt">string</span> <span class="n">email</span><span class="p">,</span> <span class="n">IList</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">roles</span><span class="p">);</span>

        <span class="c1">// Role Section</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="kt">bool</span><span class="p">&gt;</span> <span class="nf">CreateRoleAsync</span><span class="p">(</span><span class="kt">string</span> <span class="n">roleName</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="kt">bool</span><span class="p">&gt;</span> <span class="nf">DeleteRoleAsync</span><span class="p">(</span><span class="kt">string</span> <span class="n">roleId</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;(</span><span class="kt">string</span> <span class="n">id</span><span class="p">,</span> <span class="kt">string</span> <span class="n">roleName</span><span class="p">)&gt;&gt;</span> <span class="nf">GetRolesAsync</span><span class="p">();</span>
        <span class="n">Task</span><span class="p">&lt;(</span><span class="kt">string</span> <span class="n">id</span><span class="p">,</span> <span class="kt">string</span> <span class="n">roleName</span><span class="p">)&gt;</span> <span class="nf">GetRoleByIdAsync</span><span class="p">(</span><span class="kt">string</span> <span class="n">id</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="kt">bool</span><span class="p">&gt;</span> <span class="nf">UpdateRole</span><span class="p">(</span><span class="kt">string</span> <span class="n">id</span><span class="p">,</span> <span class="kt">string</span> <span class="n">roleName</span><span class="p">);</span>

        <span class="c1">// User's Role section</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="kt">bool</span><span class="p">&gt;</span> <span class="nf">IsInRoleAsync</span><span class="p">(</span><span class="kt">string</span> <span class="n">userId</span><span class="p">,</span> <span class="kt">string</span> <span class="n">role</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;&gt;</span> <span class="nf">GetUserRolesAsync</span><span class="p">(</span><span class="kt">string</span> <span class="n">userId</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="kt">bool</span><span class="p">&gt;</span> <span class="nf">AssignUserToRole</span><span class="p">(</span><span class="kt">string</span> <span class="n">userName</span><span class="p">,</span> <span class="n">IList</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">roles</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="kt">bool</span><span class="p">&gt;</span> <span class="nf">UpdateUsersRole</span><span class="p">(</span><span class="kt">string</span> <span class="n">userName</span><span class="p">,</span> <span class="n">IList</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">usersRole</span><span class="p">);</span>


    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>ITokenGenerator.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">Ordering.Application.Common.Interfaces</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">interface</span> <span class="nc">ITokenGenerator</span>
    <span class="p">{</span>
        <span class="c1">//public string GenerateToken(string userName, string password);</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="nf">GenerateJWTToken</span><span class="p">((</span><span class="kt">string</span> <span class="n">userId</span><span class="p">,</span> <span class="kt">string</span> <span class="n">userName</span><span class="p">,</span> <span class="n">IList</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">roles</span><span class="p">)</span> <span class="n">userDetails</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create Auth Command and Command Handler in Ordering.Application/Commands/Auth folder</li>
</ul>

<p><strong>AuthCommand.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Common.Exceptions</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Common.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.DTOs</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Application.Commands.Auth</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">AuthCommand</span> <span class="p">:</span> <span class="n">IRequest</span><span class="p">&lt;</span><span class="n">AuthResponseDTO</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">UserName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Password</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">class</span> <span class="nc">AuthCommandHandler</span> <span class="p">:</span> <span class="n">IRequestHandler</span><span class="p">&lt;</span><span class="n">AuthCommand</span><span class="p">,</span> <span class="n">AuthResponseDTO</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">ITokenGenerator</span> <span class="n">_tokenGenerator</span><span class="p">;</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IIdentityService</span> <span class="n">_identityService</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">AuthCommandHandler</span><span class="p">(</span><span class="n">IIdentityService</span> <span class="n">identityService</span><span class="p">,</span> <span class="n">ITokenGenerator</span> <span class="n">tokenGenerator</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_identityService</span> <span class="p">=</span> <span class="n">identityService</span><span class="p">;</span>
            <span class="n">_tokenGenerator</span> <span class="p">=</span> <span class="n">tokenGenerator</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">AuthResponseDTO</span><span class="p">&gt;</span> <span class="nf">Handle</span><span class="p">(</span><span class="n">AuthCommand</span> <span class="n">request</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_identityService</span><span class="p">.</span><span class="nf">SigninUserAsync</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">UserName</span><span class="p">,</span> <span class="n">request</span><span class="p">.</span><span class="n">Password</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(!</span><span class="n">result</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">BadRequestException</span><span class="p">(</span><span class="s">"Invalid username or password"</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="kt">var</span> <span class="p">(</span><span class="n">userId</span><span class="p">,</span> <span class="n">fullName</span><span class="p">,</span> <span class="n">userName</span><span class="p">,</span> <span class="n">email</span><span class="p">,</span> <span class="n">roles</span><span class="p">)</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_identityService</span><span class="p">.</span><span class="nf">GetUserDetailsAsync</span><span class="p">(</span><span class="k">await</span> <span class="n">_identityService</span><span class="p">.</span><span class="nf">GetUserIdAsync</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">UserName</span><span class="p">));</span>

            <span class="kt">string</span> <span class="n">token</span> <span class="p">=</span> <span class="n">_tokenGenerator</span><span class="p">.</span><span class="nf">GenerateJWTToken</span><span class="p">((</span><span class="n">userId</span><span class="p">:</span> <span class="n">userId</span><span class="p">,</span> <span class="n">userName</span><span class="p">:</span> <span class="n">userName</span><span class="p">,</span> <span class="n">roles</span><span class="p">:</span> <span class="n">roles</span><span class="p">));</span>

            <span class="k">return</span> <span class="k">new</span> <span class="nf">AuthResponseDTO</span><span class="p">()</span>
            <span class="p">{</span>
                <span class="n">UserId</span> <span class="p">=</span> <span class="n">userId</span><span class="p">,</span>
                <span class="n">Name</span> <span class="p">=</span> <span class="n">userName</span><span class="p">,</span>
                <span class="n">Token</span> <span class="p">=</span> <span class="n">token</span>
            <span class="p">};</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>


</code></pre></div></div>

<ul>
  <li>Create CreateCustomerCommand and Handler in Ordering.Application/Commands/Customers/Create folder</li>
</ul>

<p><strong>CreateCustomerCommand.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.DTOs</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Mapper</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Entities</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Repositories.Command</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Application.Commands.Customers.Create</span>
<span class="p">{</span>
    <span class="c1">// Customer create command with CustomerResponse</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CreateCustomerCommand</span> <span class="p">:</span> <span class="n">IRequest</span><span class="p">&lt;</span><span class="n">CustomerResponse</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">FirstName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">LastName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Email</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">ContactNumber</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Address</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="n">DateTime</span> <span class="n">CreatedDate</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="nf">CreateCustomerCommand</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="n">CreatedDate</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">class</span> <span class="nc">CreateCustomerCommandHandler</span> <span class="p">:</span> <span class="n">IRequestHandler</span><span class="p">&lt;</span><span class="n">CreateCustomerCommand</span><span class="p">,</span> <span class="n">CustomerResponse</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">ICustomerCommandRepository</span> <span class="n">_customerCommandRepository</span><span class="p">;</span>
        <span class="k">public</span> <span class="nf">CreateCustomerCommandHandler</span><span class="p">(</span><span class="n">ICustomerCommandRepository</span> <span class="n">customerCommandRepository</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_customerCommandRepository</span> <span class="p">=</span> <span class="n">customerCommandRepository</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">CustomerResponse</span><span class="p">&gt;</span> <span class="nf">Handle</span><span class="p">(</span><span class="n">CreateCustomerCommand</span> <span class="n">request</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">customerEntity</span> <span class="p">=</span> <span class="n">CustomerMapper</span><span class="p">.</span><span class="n">Mapper</span><span class="p">.</span><span class="n">Map</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;(</span><span class="n">request</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">customerEntity</span> <span class="k">is</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">ApplicationException</span><span class="p">(</span><span class="s">"There is a problem in mapper"</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="kt">var</span> <span class="n">newCustomer</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_customerCommandRepository</span><span class="p">.</span><span class="nf">AddAsync</span><span class="p">(</span><span class="n">customerEntity</span><span class="p">);</span>
            <span class="kt">var</span> <span class="n">customerResponse</span> <span class="p">=</span> <span class="n">CustomerMapper</span><span class="p">.</span><span class="n">Mapper</span><span class="p">.</span><span class="n">Map</span><span class="p">&lt;</span><span class="n">CustomerResponse</span><span class="p">&gt;(</span><span class="n">newCustomer</span><span class="p">);</span>
            <span class="k">return</span> <span class="n">customerResponse</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create EditCustomerCommand and Handler in Ordering.Application/Commands/Customers/Update folder</li>
</ul>

<p><strong>EditCustomerCommand.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.DTOs</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Mapper</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Entities</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Repositories.Command</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Repositories.Query</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Application.Commands.Customers.Update</span>
<span class="p">{</span>
    <span class="c1">// Customer create command with CustomerResponse</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">EditCustomerCommand</span> <span class="p">:</span> <span class="n">IRequest</span><span class="p">&lt;</span><span class="n">CustomerResponse</span><span class="p">&gt;</span>
    <span class="p">{</span>

        <span class="k">public</span> <span class="n">Int64</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">FirstName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">LastName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Email</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">ContactNumber</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Address</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">class</span> <span class="nc">EditCustomerCommandHandler</span> <span class="p">:</span> <span class="n">IRequestHandler</span><span class="p">&lt;</span><span class="n">EditCustomerCommand</span><span class="p">,</span> <span class="n">CustomerResponse</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">ICustomerCommandRepository</span> <span class="n">_customerCommandRepository</span><span class="p">;</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">ICustomerQueryRepository</span> <span class="n">_customerQueryRepository</span><span class="p">;</span>
        <span class="k">public</span> <span class="nf">EditCustomerCommandHandler</span><span class="p">(</span><span class="n">ICustomerCommandRepository</span> <span class="n">customerRepository</span><span class="p">,</span> <span class="n">ICustomerQueryRepository</span> <span class="n">customerQueryRepository</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_customerCommandRepository</span> <span class="p">=</span> <span class="n">customerRepository</span><span class="p">;</span>
            <span class="n">_customerQueryRepository</span> <span class="p">=</span> <span class="n">customerQueryRepository</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">CustomerResponse</span><span class="p">&gt;</span> <span class="nf">Handle</span><span class="p">(</span><span class="n">EditCustomerCommand</span> <span class="n">request</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">customerEntity</span> <span class="p">=</span> <span class="n">CustomerMapper</span><span class="p">.</span><span class="n">Mapper</span><span class="p">.</span><span class="n">Map</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;(</span><span class="n">request</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">customerEntity</span> <span class="k">is</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">ApplicationException</span><span class="p">(</span><span class="s">"There is a problem in mapper"</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">await</span> <span class="n">_customerCommandRepository</span><span class="p">.</span><span class="nf">UpdateAsync</span><span class="p">(</span><span class="n">customerEntity</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exp</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">ApplicationException</span><span class="p">(</span><span class="n">exp</span><span class="p">.</span><span class="n">Message</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="kt">var</span> <span class="n">modifiedCustomer</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_customerQueryRepository</span><span class="p">.</span><span class="nf">GetByIdAsync</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">Id</span><span class="p">);</span>
            <span class="kt">var</span> <span class="n">customerResponse</span> <span class="p">=</span> <span class="n">CustomerMapper</span><span class="p">.</span><span class="n">Mapper</span><span class="p">.</span><span class="n">Map</span><span class="p">&lt;</span><span class="n">CustomerResponse</span><span class="p">&gt;(</span><span class="n">modifiedCustomer</span><span class="p">);</span>

            <span class="k">return</span> <span class="n">customerResponse</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create DeleteCustomerCommand and Handler in Ordering.Application/Commands/Customers/Delete folder</li>
</ul>

<p><strong>DeleteCustomerCommand.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Repositories.Command</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Repositories.Query</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Application.Commands.Customers.Delete</span>
<span class="p">{</span>
    <span class="c1">// Customer create command with string response</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">DeleteCustomerCommand</span> <span class="p">:</span> <span class="n">IRequest</span><span class="p">&lt;</span><span class="n">String</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="n">Int64</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="nf">DeleteCustomerCommand</span><span class="p">(</span><span class="n">Int64</span> <span class="n">Id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="n">Id</span> <span class="p">=</span> <span class="n">Id</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// Customer delete command handler with string response as output</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">DeleteCustomerCommmandHandler</span> <span class="p">:</span> <span class="n">IRequestHandler</span><span class="p">&lt;</span><span class="n">DeleteCustomerCommand</span><span class="p">,</span> <span class="n">String</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">ICustomerCommandRepository</span> <span class="n">_customerCommandRepository</span><span class="p">;</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">ICustomerQueryRepository</span> <span class="n">_customerQueryRepository</span><span class="p">;</span>
        <span class="k">public</span> <span class="nf">DeleteCustomerCommmandHandler</span><span class="p">(</span><span class="n">ICustomerCommandRepository</span> <span class="n">customerRepository</span><span class="p">,</span> <span class="n">ICustomerQueryRepository</span> <span class="n">customerQueryRepository</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_customerCommandRepository</span> <span class="p">=</span> <span class="n">customerRepository</span><span class="p">;</span>
            <span class="n">_customerQueryRepository</span> <span class="p">=</span> <span class="n">customerQueryRepository</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="nf">Handle</span><span class="p">(</span><span class="n">DeleteCustomerCommand</span> <span class="n">request</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="kt">var</span> <span class="n">customerEntity</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_customerQueryRepository</span><span class="p">.</span><span class="nf">GetByIdAsync</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">Id</span><span class="p">);</span>

                <span class="k">await</span> <span class="n">_customerCommandRepository</span><span class="p">.</span><span class="nf">DeleteAsync</span><span class="p">(</span><span class="n">customerEntity</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exp</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="p">(</span><span class="k">new</span> <span class="nf">ApplicationException</span><span class="p">(</span><span class="n">exp</span><span class="p">.</span><span class="n">Message</span><span class="p">));</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="s">"Customer information has been deleted!"</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create RoleCreateCommand and Handler in Ordering.Application/Commands/Role/Create folder</li>
</ul>

<p><strong>RoleCreateCommand.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Common.Interfaces</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Application.Commands.Role.Create</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">RoleCreateCommand</span> <span class="p">:</span> <span class="n">IRequest</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">RoleName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">class</span> <span class="nc">RoleCreateCommandHandler</span> <span class="p">:</span> <span class="n">IRequestHandler</span><span class="p">&lt;</span><span class="n">RoleCreateCommand</span><span class="p">,</span> <span class="kt">int</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IIdentityService</span> <span class="n">_identityService</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">RoleCreateCommandHandler</span><span class="p">(</span><span class="n">IIdentityService</span> <span class="n">identityService</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_identityService</span> <span class="p">=</span> <span class="n">identityService</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="nf">Handle</span><span class="p">(</span><span class="n">RoleCreateCommand</span> <span class="n">request</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_identityService</span><span class="p">.</span><span class="nf">CreateRoleAsync</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">RoleName</span><span class="p">);</span>
            <span class="k">return</span> <span class="n">result</span> <span class="p">?</span> <span class="m">1</span> <span class="p">:</span> <span class="m">0</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create DeleteRoleCommand and Handler in Ordering.Application/Commands/Role/Delete folder</li>
</ul>

<p><strong>DeleteRoleCommand.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Common.Interfaces</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Application.Commands.Role.Delete</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">DeleteRoleCommand</span> <span class="p">:</span> <span class="n">IRequest</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">RoleId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">class</span> <span class="nc">DeleteRoleCommandHandler</span> <span class="p">:</span> <span class="n">IRequestHandler</span><span class="p">&lt;</span><span class="n">DeleteRoleCommand</span><span class="p">,</span> <span class="kt">int</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IIdentityService</span> <span class="n">_identityService</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">DeleteRoleCommandHandler</span><span class="p">(</span><span class="n">IIdentityService</span> <span class="n">identityService</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_identityService</span> <span class="p">=</span> <span class="n">identityService</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="nf">Handle</span><span class="p">(</span><span class="n">DeleteRoleCommand</span> <span class="n">request</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_identityService</span><span class="p">.</span><span class="nf">DeleteRoleAsync</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">RoleId</span><span class="p">);</span>
            <span class="k">return</span> <span class="n">result</span> <span class="p">?</span> <span class="m">1</span> <span class="p">:</span> <span class="m">0</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>


</code></pre></div></div>

<ul>
  <li>Create UpdateRoleCommand and Handler in Ordering.Application/Commands/Role/Update folder</li>
</ul>

<p><strong>UpdateRoleCommand.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Common.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Linq</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Text</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Threading.Tasks</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Application.Commands.Role.Update</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">UpdateRoleCommand</span> <span class="p">:</span> <span class="n">IRequest</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">RoleName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">class</span> <span class="nc">UpdateRoleCommandHandler</span> <span class="p">:</span> <span class="n">IRequestHandler</span><span class="p">&lt;</span><span class="n">UpdateRoleCommand</span><span class="p">,</span> <span class="kt">int</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IIdentityService</span> <span class="n">_identityService</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">UpdateRoleCommandHandler</span><span class="p">(</span><span class="n">IIdentityService</span> <span class="n">identityService</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_identityService</span> <span class="p">=</span> <span class="n">identityService</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="nf">Handle</span><span class="p">(</span><span class="n">UpdateRoleCommand</span> <span class="n">request</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_identityService</span><span class="p">.</span><span class="nf">UpdateRole</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">Id</span><span class="p">,</span> <span class="n">request</span><span class="p">.</span><span class="n">RoleName</span><span class="p">);</span>
            <span class="k">return</span> <span class="n">result</span> <span class="p">?</span> <span class="m">1</span> <span class="p">:</span> <span class="m">0</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create CreateUserCommand and Handler in Ordering.Application/Commands/User/Create folder</li>
</ul>

<p><strong>CreateUserCommand.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Common.Interfaces</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Application.Commands.User.Create</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CreateUserCommand</span> <span class="p">:</span> <span class="n">IRequest</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">FullName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">UserName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Email</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Password</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">ConfirmationPassword</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">Roles</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">class</span> <span class="nc">CreateUserCommandHandler</span> <span class="p">:</span> <span class="n">IRequestHandler</span><span class="p">&lt;</span><span class="n">CreateUserCommand</span><span class="p">,</span> <span class="kt">int</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IIdentityService</span> <span class="n">_identityService</span><span class="p">;</span>
        <span class="k">public</span> <span class="nf">CreateUserCommandHandler</span><span class="p">(</span><span class="n">IIdentityService</span> <span class="n">identityService</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_identityService</span> <span class="p">=</span> <span class="n">identityService</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="nf">Handle</span><span class="p">(</span><span class="n">CreateUserCommand</span> <span class="n">request</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_identityService</span><span class="p">.</span><span class="nf">CreateUserAsync</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">UserName</span><span class="p">,</span> <span class="n">request</span><span class="p">.</span><span class="n">Password</span><span class="p">,</span> <span class="n">request</span><span class="p">.</span><span class="n">Email</span><span class="p">,</span> <span class="n">request</span><span class="p">.</span><span class="n">FullName</span><span class="p">,</span> <span class="n">request</span><span class="p">.</span><span class="n">Roles</span><span class="p">);</span>
            <span class="k">return</span> <span class="n">result</span><span class="p">.</span><span class="n">isSucceed</span> <span class="p">?</span> <span class="m">1</span> <span class="p">:</span> <span class="m">0</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create DeleteUserCommandd and Handler in Ordering.Application/Commands/User/Delete folder</li>
</ul>

<p><strong>DeleteUserCommand.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Common.Interfaces</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Application.Commands.User.Delete</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">DeleteUserCommand</span> <span class="p">:</span> <span class="n">IRequest</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">class</span> <span class="nc">DeleteUserCommandHandler</span> <span class="p">:</span> <span class="n">IRequestHandler</span><span class="p">&lt;</span><span class="n">DeleteUserCommand</span><span class="p">,</span> <span class="kt">int</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IIdentityService</span> <span class="n">_identityService</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">DeleteUserCommandHandler</span><span class="p">(</span><span class="n">IIdentityService</span> <span class="n">identityService</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_identityService</span> <span class="p">=</span> <span class="n">identityService</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="nf">Handle</span><span class="p">(</span><span class="n">DeleteUserCommand</span> <span class="n">request</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_identityService</span><span class="p">.</span><span class="nf">DeleteUserAsync</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">Id</span><span class="p">);</span>

            <span class="k">return</span> <span class="n">result</span> <span class="p">?</span> <span class="m">1</span> <span class="p">:</span> <span class="m">0</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create AssignUsersRoleCommand, EditUserProfileCommand, UpdateUserRolesCommand and Handler in Ordering.Application/Commands/User/Update folder</li>
</ul>

<p><strong>AssignUsersRoleCommand.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Common.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Linq</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Text</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Threading.Tasks</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Application.Commands.User.Update</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">AssignUsersRoleCommand</span> <span class="p">:</span> <span class="n">IRequest</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">UserName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="n">IList</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">Roles</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;}</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">class</span> <span class="nc">AssignUsersRoleCommandHandler</span> <span class="p">:</span> <span class="n">IRequestHandler</span><span class="p">&lt;</span><span class="n">AssignUsersRoleCommand</span><span class="p">,</span> <span class="kt">int</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IIdentityService</span> <span class="n">_identityService</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">AssignUsersRoleCommandHandler</span><span class="p">(</span><span class="n">IIdentityService</span> <span class="n">identityService</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_identityService</span> <span class="p">=</span> <span class="n">identityService</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="nf">Handle</span><span class="p">(</span><span class="n">AssignUsersRoleCommand</span> <span class="n">request</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_identityService</span><span class="p">.</span><span class="nf">AssignUserToRole</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">UserName</span><span class="p">,</span> <span class="n">request</span><span class="p">.</span><span class="n">Roles</span><span class="p">);</span>
            <span class="k">return</span> <span class="n">result</span> <span class="p">?</span> <span class="m">1</span> <span class="p">:</span> <span class="m">0</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>
<p><strong>EditUserProfileCommand.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Common.Interfaces</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Application.Commands.User.Update</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">EditUserProfileCommand</span> <span class="p">:</span> <span class="n">IRequest</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">FullName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Email</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">Roles</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">class</span> <span class="nc">EditUserProfileCommandHandler</span> <span class="p">:</span> <span class="n">IRequestHandler</span><span class="p">&lt;</span><span class="n">EditUserProfileCommand</span><span class="p">,</span> <span class="kt">int</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IIdentityService</span> <span class="n">_identityService</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">EditUserProfileCommandHandler</span><span class="p">(</span><span class="n">IIdentityService</span> <span class="n">identityService</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_identityService</span> <span class="p">=</span> <span class="n">identityService</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="nf">Handle</span><span class="p">(</span><span class="n">EditUserProfileCommand</span> <span class="n">request</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_identityService</span><span class="p">.</span><span class="nf">UpdateUserProfile</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">Id</span><span class="p">,</span> <span class="n">request</span><span class="p">.</span><span class="n">FullName</span><span class="p">,</span> <span class="n">request</span><span class="p">.</span><span class="n">Email</span><span class="p">,</span> <span class="n">request</span><span class="p">.</span><span class="n">Roles</span><span class="p">);</span>
            <span class="k">return</span> <span class="n">result</span> <span class="p">?</span> <span class="m">1</span> <span class="p">:</span> <span class="m">0</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>
<p><strong>UpdateUserRolesCommand.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Common.Interfaces</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Application.Commands.User.Update</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">UpdateUserRolesCommand</span> <span class="p">:</span> <span class="n">IRequest</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">userName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="n">IList</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">Roles</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;}</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">class</span> <span class="nc">UpdateUserRolesCommandHandler</span> <span class="p">:</span> <span class="n">IRequestHandler</span><span class="p">&lt;</span><span class="n">UpdateUserRolesCommand</span><span class="p">,</span> <span class="kt">int</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IIdentityService</span> <span class="n">_identityService</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">UpdateUserRolesCommandHandler</span><span class="p">(</span><span class="n">IIdentityService</span> <span class="n">identityService</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_identityService</span> <span class="p">=</span> <span class="n">identityService</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="nf">Handle</span><span class="p">(</span><span class="n">UpdateUserRolesCommand</span> <span class="n">request</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_identityService</span><span class="p">.</span><span class="nf">UpdateUsersRole</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">userName</span><span class="p">,</span> <span class="n">request</span><span class="p">.</span><span class="n">Roles</span><span class="p">);</span>
            <span class="k">return</span> <span class="n">result</span> <span class="p">?</span> <span class="m">1</span> <span class="p">:</span> <span class="m">0</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create Customers Query classes and Handlers in Ordering.Application/Queries/Customers folder</li>
</ul>

<p><strong>GetAllCustomerQuery.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Entities</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Repositories.Query</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Application.Queries.Customers</span>
<span class="p">{</span>
    <span class="c1">// Customer query with List&lt;Customer&gt; response</span>
    <span class="k">public</span> <span class="n">record</span> <span class="n">GetAllCustomerQuery</span> <span class="p">:</span> <span class="n">IRequest</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;&gt;</span>
    <span class="p">{</span>

    <span class="p">}</span>

    <span class="k">public</span> <span class="k">class</span> <span class="nc">GetAllCustomerHandler</span> <span class="p">:</span> <span class="n">IRequestHandler</span><span class="p">&lt;</span><span class="n">GetAllCustomerQuery</span><span class="p">,</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;&gt;</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">ICustomerQueryRepository</span> <span class="n">_customerQueryRepository</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">GetAllCustomerHandler</span><span class="p">(</span><span class="n">ICustomerQueryRepository</span> <span class="n">customerQueryRepository</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_customerQueryRepository</span> <span class="p">=</span> <span class="n">customerQueryRepository</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;&gt;</span> <span class="nf">Handle</span><span class="p">(</span><span class="n">GetAllCustomerQuery</span> <span class="n">request</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="p">(</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;)</span><span class="k">await</span> <span class="n">_customerQueryRepository</span><span class="p">.</span><span class="nf">GetAllAsync</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>


</code></pre></div></div>

<p><strong>GetCustomerByEmailQuery.cs</strong></p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Entities</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Application.Queries.Customers</span>
<span class="p">{</span>
    <span class="c1">// Customer GetCustomerByEmailQuery with Customer response</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">GetCustomerByEmailQuery</span><span class="p">:</span> <span class="n">IRequest</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Email</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        
        <span class="k">public</span> <span class="nf">GetCustomerByEmailQuery</span><span class="p">(</span><span class="kt">string</span> <span class="n">email</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="n">Email</span> <span class="p">=</span> <span class="n">email</span><span class="p">;</span>
        <span class="p">}</span>

    <span class="p">}</span>

    <span class="k">public</span> <span class="k">class</span> <span class="nc">GetCustomerByEmailHandler</span> <span class="p">:</span> <span class="n">IRequestHandler</span><span class="p">&lt;</span><span class="n">GetCustomerByEmailQuery</span><span class="p">,</span> <span class="n">Customer</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IMediator</span> <span class="n">_mediator</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">GetCustomerByEmailHandler</span><span class="p">(</span><span class="n">IMediator</span> <span class="n">mediator</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_mediator</span> <span class="p">=</span> <span class="n">mediator</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="nf">Handle</span><span class="p">(</span><span class="n">GetCustomerByEmailQuery</span> <span class="n">request</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">customers</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_mediator</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="k">new</span> <span class="nf">GetAllCustomerQuery</span><span class="p">());</span>
            <span class="kt">var</span> <span class="n">selectedCustomer</span> <span class="p">=</span> <span class="n">customers</span><span class="p">.</span><span class="nf">FirstOrDefault</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Email</span><span class="p">.</span><span class="nf">ToLower</span><span class="p">().</span><span class="nf">Contains</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">Email</span><span class="p">.</span><span class="nf">ToLower</span><span class="p">()));</span>
            <span class="k">return</span> <span class="n">selectedCustomer</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>GetCustomerByIdQuery.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Entities</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Application.Queries.Customers</span>
<span class="p">{</span>
    <span class="c1">// Customer GetCustomerByIdQuery with Customer response</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">GetCustomerByIdQuery</span><span class="p">:</span> <span class="n">IRequest</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="n">Int64</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        
        <span class="k">public</span> <span class="nf">GetCustomerByIdQuery</span><span class="p">(</span><span class="n">Int64</span> <span class="n">Id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="n">Id</span> <span class="p">=</span> <span class="n">Id</span><span class="p">;</span>
        <span class="p">}</span>

    <span class="p">}</span>

    <span class="k">public</span> <span class="k">class</span> <span class="nc">GetCustomerByIdHandler</span> <span class="p">:</span> <span class="n">IRequestHandler</span><span class="p">&lt;</span><span class="n">GetCustomerByIdQuery</span><span class="p">,</span> <span class="n">Customer</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IMediator</span> <span class="n">_mediator</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">GetCustomerByIdHandler</span><span class="p">(</span><span class="n">IMediator</span> <span class="n">mediator</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_mediator</span> <span class="p">=</span> <span class="n">mediator</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="nf">Handle</span><span class="p">(</span><span class="n">GetCustomerByIdQuery</span> <span class="n">request</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">customers</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_mediator</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="k">new</span> <span class="nf">GetAllCustomerQuery</span><span class="p">());</span>
            <span class="kt">var</span> <span class="n">selectedCustomer</span> <span class="p">=</span> <span class="n">customers</span><span class="p">.</span><span class="nf">FirstOrDefault</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">request</span><span class="p">.</span><span class="n">Id</span><span class="p">);</span>
            <span class="k">return</span> <span class="n">selectedCustomer</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>


</code></pre></div></div>

<ul>
  <li>Create Role Query classes and Handlers in Ordering.Application/Queries/Role folder</li>
</ul>

<p><strong>GetRoleByIdQuery.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Common.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.DTOs</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Application.Queries.Role</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">GetRoleByIdQuery</span> <span class="p">:</span> <span class="n">IRequest</span><span class="p">&lt;</span><span class="n">RoleResponseDTO</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">RoleId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">class</span> <span class="nc">GetRoleQueryByIdHandler</span> <span class="p">:</span> <span class="n">IRequestHandler</span><span class="p">&lt;</span><span class="n">GetRoleByIdQuery</span><span class="p">,</span> <span class="n">RoleResponseDTO</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IIdentityService</span> <span class="n">_identityService</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">GetRoleQueryByIdHandler</span><span class="p">(</span><span class="n">IIdentityService</span> <span class="n">identityService</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_identityService</span> <span class="p">=</span> <span class="n">identityService</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">RoleResponseDTO</span><span class="p">&gt;</span> <span class="nf">Handle</span><span class="p">(</span><span class="n">GetRoleByIdQuery</span> <span class="n">request</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">role</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_identityService</span><span class="p">.</span><span class="nf">GetRoleByIdAsync</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">RoleId</span><span class="p">);</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">RoleResponseDTO</span><span class="p">()</span> <span class="p">{</span> <span class="n">Id</span> <span class="p">=</span> <span class="n">role</span><span class="p">.</span><span class="n">id</span><span class="p">,</span> <span class="n">RoleName</span> <span class="p">=</span> <span class="n">role</span><span class="p">.</span><span class="n">roleName</span><span class="p">};</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>GetRoleQuery.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Common.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.DTOs</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Application.Queries.Role</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">GetRoleQuery</span> <span class="p">:</span> <span class="n">IRequest</span><span class="p">&lt;</span><span class="n">IList</span><span class="p">&lt;</span><span class="n">RoleResponseDTO</span><span class="p">&gt;&gt;</span>
    <span class="p">{</span>

    <span class="p">}</span>

    <span class="k">public</span> <span class="k">class</span> <span class="nc">GetRoleQueryHandler</span> <span class="p">:</span> <span class="n">IRequestHandler</span><span class="p">&lt;</span><span class="n">GetRoleQuery</span><span class="p">,</span> <span class="n">IList</span><span class="p">&lt;</span><span class="n">RoleResponseDTO</span><span class="p">&gt;&gt;</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IIdentityService</span> <span class="n">_identityService</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">GetRoleQueryHandler</span><span class="p">(</span><span class="n">IIdentityService</span> <span class="n">identityService</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_identityService</span> <span class="p">=</span> <span class="n">identityService</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IList</span><span class="p">&lt;</span><span class="n">RoleResponseDTO</span><span class="p">&gt;&gt;</span> <span class="nf">Handle</span><span class="p">(</span><span class="n">GetRoleQuery</span> <span class="n">request</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">roles</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_identityService</span><span class="p">.</span><span class="nf">GetRolesAsync</span><span class="p">();</span>
            <span class="k">return</span> <span class="n">roles</span><span class="p">.</span><span class="nf">Select</span><span class="p">(</span><span class="n">role</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="nf">RoleResponseDTO</span><span class="p">()</span> <span class="p">{</span> <span class="n">Id</span> <span class="p">=</span> <span class="n">role</span><span class="p">.</span><span class="n">id</span><span class="p">,</span> <span class="n">RoleName</span> <span class="p">=</span> <span class="n">role</span><span class="p">.</span><span class="n">roleName</span><span class="p">}).</span><span class="nf">ToList</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create Users Query classes and Handlers in Ordering.Application/Queries/User folder</li>
</ul>

<p><strong>GetAllUsersDetailsQuery.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Common.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.DTOs</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Application.Queries.User</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">GetAllUsersDetailsQuery</span> <span class="p">:</span> <span class="n">IRequest</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">UserDetailsResponseDTO</span><span class="p">&gt;&gt;</span>
    <span class="p">{</span>
        <span class="c1">//public string UserId { get; set; }</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">class</span> <span class="nc">GetAllUsersDetailsQueryHandler</span> <span class="p">:</span> <span class="n">IRequestHandler</span><span class="p">&lt;</span><span class="n">GetAllUsersDetailsQuery</span><span class="p">,</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">UserDetailsResponseDTO</span><span class="p">&gt;&gt;</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IIdentityService</span> <span class="n">_identityService</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">GetAllUsersDetailsQueryHandler</span><span class="p">(</span><span class="n">IIdentityService</span> <span class="n">identityService</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_identityService</span> <span class="p">=</span> <span class="n">identityService</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">UserDetailsResponseDTO</span><span class="p">&gt;&gt;</span> <span class="nf">Handle</span><span class="p">(</span><span class="n">GetAllUsersDetailsQuery</span> <span class="n">request</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
        <span class="p">{</span>
            

            <span class="kt">var</span> <span class="n">users</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_identityService</span><span class="p">.</span><span class="nf">GetAllUsersAsync</span><span class="p">();</span>
            <span class="kt">var</span> <span class="n">userDetails</span> <span class="p">=</span> <span class="n">users</span><span class="p">.</span><span class="nf">Select</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="nf">UserDetailsResponseDTO</span><span class="p">()</span>
            <span class="p">{</span>
                <span class="n">Id</span> <span class="p">=</span> <span class="n">x</span><span class="p">.</span><span class="n">id</span><span class="p">,</span>
                <span class="n">Email</span> <span class="p">=</span> <span class="n">x</span><span class="p">.</span><span class="n">email</span><span class="p">,</span>
                <span class="n">UserName</span> <span class="p">=</span> <span class="n">x</span><span class="p">.</span><span class="n">userName</span>
                <span class="c1">//Roles = (IList&lt;string&gt;)_identityService.GetUserRolesAsync(x.id) // Converstion problem</span>
            <span class="p">}).</span><span class="nf">ToList</span><span class="p">();</span>

            <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">user</span> <span class="k">in</span> <span class="n">userDetails</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">user</span><span class="p">.</span><span class="n">Roles</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_identityService</span><span class="p">.</span><span class="nf">GetUserRolesAsync</span><span class="p">(</span><span class="n">user</span><span class="p">.</span><span class="n">Id</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="n">userDetails</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>
<p><strong>GetUserDetailsByUserNameQuery.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Common.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.DTOs</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Application.Queries.User</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">GetUserDetailsByUserNameQuery</span> <span class="p">:</span> <span class="n">IRequest</span><span class="p">&lt;</span><span class="n">UserDetailsResponseDTO</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">UserName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">class</span> <span class="nc">GetUserDetailsByUserNameQueryHandler</span> <span class="p">:</span> <span class="n">IRequestHandler</span><span class="p">&lt;</span><span class="n">GetUserDetailsByUserNameQuery</span><span class="p">,</span> <span class="n">UserDetailsResponseDTO</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IIdentityService</span> <span class="n">_identityService</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">GetUserDetailsByUserNameQueryHandler</span><span class="p">(</span><span class="n">IIdentityService</span> <span class="n">identityService</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_identityService</span> <span class="p">=</span> <span class="n">identityService</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">UserDetailsResponseDTO</span><span class="p">&gt;</span> <span class="nf">Handle</span><span class="p">(</span><span class="n">GetUserDetailsByUserNameQuery</span> <span class="n">request</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="p">(</span><span class="n">userId</span><span class="p">,</span> <span class="n">fullName</span><span class="p">,</span> <span class="n">userName</span><span class="p">,</span> <span class="n">email</span><span class="p">,</span> <span class="n">roles</span> <span class="p">)</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_identityService</span><span class="p">.</span><span class="nf">GetUserDetailsByUserNameAsync</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">UserName</span><span class="p">);</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">UserDetailsResponseDTO</span><span class="p">()</span> <span class="p">{</span> <span class="n">Id</span> <span class="p">=</span> <span class="n">userId</span><span class="p">,</span> <span class="n">FullName</span> <span class="p">=</span> <span class="n">fullName</span><span class="p">,</span> <span class="n">UserName</span> <span class="p">=</span> <span class="n">userName</span><span class="p">,</span> <span class="n">Email</span> <span class="p">=</span> <span class="n">email</span><span class="p">,</span> <span class="n">Roles</span> <span class="p">=</span> <span class="n">roles</span> <span class="p">};</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>GetUserDetailsQuery.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Common.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.DTOs</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Application.Queries.User</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">GetUserDetailsQuery</span> <span class="p">:</span> <span class="n">IRequest</span><span class="p">&lt;</span><span class="n">UserDetailsResponseDTO</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">UserId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">class</span> <span class="nc">GetUserDetailsQueryHandler</span> <span class="p">:</span> <span class="n">IRequestHandler</span><span class="p">&lt;</span><span class="n">GetUserDetailsQuery</span><span class="p">,</span> <span class="n">UserDetailsResponseDTO</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IIdentityService</span> <span class="n">_identityService</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">GetUserDetailsQueryHandler</span><span class="p">(</span><span class="n">IIdentityService</span> <span class="n">identityService</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_identityService</span> <span class="p">=</span> <span class="n">identityService</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">UserDetailsResponseDTO</span><span class="p">&gt;</span> <span class="nf">Handle</span><span class="p">(</span><span class="n">GetUserDetailsQuery</span> <span class="n">request</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="p">(</span><span class="n">userId</span><span class="p">,</span> <span class="n">fullName</span><span class="p">,</span> <span class="n">userName</span><span class="p">,</span> <span class="n">email</span><span class="p">,</span> <span class="n">roles</span> <span class="p">)</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_identityService</span><span class="p">.</span><span class="nf">GetUserDetailsAsync</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">UserId</span><span class="p">);</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">UserDetailsResponseDTO</span><span class="p">()</span> <span class="p">{</span> <span class="n">Id</span> <span class="p">=</span> <span class="n">userId</span><span class="p">,</span> <span class="n">FullName</span> <span class="p">=</span> <span class="n">fullName</span><span class="p">,</span> <span class="n">UserName</span> <span class="p">=</span> <span class="n">userName</span><span class="p">,</span> <span class="n">Email</span> <span class="p">=</span> <span class="n">email</span><span class="p">,</span> <span class="n">Roles</span> <span class="p">=</span> <span class="n">roles</span> <span class="p">};</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>
<p><strong>GetUserQuery.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Common.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.DTOs</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Application.Queries.User</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">GetUserQuery</span> <span class="p">:</span> <span class="n">IRequest</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">UserResponseDTO</span><span class="p">&gt;&gt;</span>
    <span class="p">{</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">class</span> <span class="nc">GetUserQueryHandler</span> <span class="p">:</span> <span class="n">IRequestHandler</span><span class="p">&lt;</span><span class="n">GetUserQuery</span><span class="p">,</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">UserResponseDTO</span><span class="p">&gt;&gt;</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IIdentityService</span> <span class="n">_identityService</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">GetUserQueryHandler</span><span class="p">(</span><span class="n">IIdentityService</span> <span class="n">identityService</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_identityService</span> <span class="p">=</span> <span class="n">identityService</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">UserResponseDTO</span><span class="p">&gt;&gt;</span> <span class="nf">Handle</span><span class="p">(</span><span class="n">GetUserQuery</span> <span class="n">request</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">users</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_identityService</span><span class="p">.</span><span class="nf">GetAllUsersAsync</span><span class="p">();</span>
            <span class="k">return</span> <span class="n">users</span><span class="p">.</span><span class="nf">Select</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="nf">UserResponseDTO</span><span class="p">()</span>
            <span class="p">{</span>
                <span class="n">Id</span> <span class="p">=</span> <span class="n">x</span><span class="p">.</span><span class="n">id</span><span class="p">,</span>
                <span class="n">FullName</span> <span class="p">=</span> <span class="n">x</span><span class="p">.</span><span class="n">fullName</span><span class="p">,</span>
                <span class="n">UserName</span> <span class="p">=</span> <span class="n">x</span><span class="p">.</span><span class="n">userName</span><span class="p">,</span>
                <span class="n">Email</span> <span class="p">=</span> <span class="n">x</span><span class="p">.</span><span class="n">email</span>
            <span class="p">}).</span><span class="nf">ToList</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create CustomerMapper and OrderingMappingProfile class in Ordering.Application/Mapper folder</li>
</ul>

<p><strong>CustomerMapper.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">AutoMapper</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Application.Mapper</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CustomerMapper</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">static</span> <span class="k">readonly</span> <span class="n">Lazy</span><span class="p">&lt;</span><span class="n">IMapper</span><span class="p">&gt;</span> <span class="n">Lazy</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Lazy</span><span class="p">&lt;</span><span class="n">IMapper</span><span class="p">&gt;(()=&gt;</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">config</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">MapperConfiguration</span><span class="p">(</span><span class="n">cfg</span> <span class="p">=&gt;</span>
            <span class="p">{</span>
                <span class="n">cfg</span><span class="p">.</span><span class="n">ShouldMapProperty</span> <span class="p">=</span> <span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">GetMethod</span><span class="p">.</span><span class="n">IsPublic</span> <span class="p">||</span> <span class="n">p</span><span class="p">.</span><span class="n">GetMethod</span><span class="p">.</span><span class="n">IsAssembly</span><span class="p">;</span>
                <span class="n">cfg</span><span class="p">.</span><span class="n">AddProfile</span><span class="p">&lt;</span><span class="n">OrderingMappingProfile</span><span class="p">&gt;();</span>
            <span class="p">});</span>

            <span class="kt">var</span> <span class="n">mapper</span> <span class="p">=</span> <span class="n">config</span><span class="p">.</span><span class="nf">CreateMapper</span><span class="p">();</span>
            <span class="k">return</span> <span class="n">mapper</span><span class="p">;</span>
        <span class="p">});</span>

        <span class="k">public</span> <span class="k">static</span> <span class="n">IMapper</span> <span class="n">Mapper</span> <span class="p">=&gt;</span> <span class="n">Lazy</span><span class="p">.</span><span class="n">Value</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p><strong>OrderingMappingProfile.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">AutoMapper</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Commands</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Response</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Entities</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Application.Mapper</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">OrderingMappingProfile</span> <span class="p">:</span> <span class="n">Profile</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">OrderingMappingProfile</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">CreateMap</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">,</span> <span class="n">CustomerResponse</span><span class="p">&gt;().</span><span class="nf">ReverseMap</span><span class="p">();</span>
            <span class="n">CreateMap</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">,</span> <span class="n">CreateCustomerCommand</span><span class="p">&gt;().</span><span class="nf">ReverseMap</span><span class="p">();</span>
            <span class="n">CreateMap</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">,</span> <span class="n">EditCustomerCommand</span><span class="p">&gt;().</span><span class="nf">ReverseMap</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 8: Orgnaize Ordering.API project. This is an web api project.</strong></p>

<ul>
  <li>Create AuthController in Ordering.API/Controllers folder</li>
</ul>

<p><strong>AuthController.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Commands.Auth</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.DTOs</span><span class="p">;</span>


<span class="k">namespace</span> <span class="nn">Ordering.API.Controllers</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
    <span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">AuthController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IMediator</span> <span class="n">_mediator</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">AuthController</span><span class="p">(</span><span class="n">IMediator</span> <span class="n">mediator</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_mediator</span> <span class="p">=</span> <span class="n">mediator</span><span class="p">;</span>
        <span class="p">}</span>


        <span class="p">[</span><span class="nf">HttpPost</span><span class="p">(</span><span class="s">"Login"</span><span class="p">)]</span>
        <span class="p">[</span><span class="nf">ProducesDefaultResponseType</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">AuthResponseDTO</span><span class="p">))]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">Login</span><span class="p">([</span><span class="n">FromBody</span><span class="p">]</span> <span class="n">AuthCommand</span> <span class="n">command</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="k">await</span> <span class="n">_mediator</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="n">command</span><span class="p">));</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create CustomerController in Ordering.API/Controllers folder</li>
</ul>

<p><strong>CustomerController.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Authentication.JwtBearer</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Authorization</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Cors</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Commands.Customers.Create</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Commands.Customers.Delete</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Commands.Customers.Update</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.DTOs</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Queries.Customers</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Entities</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.API.Controllers</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nf">EnableCors</span><span class="p">(</span><span class="s">"CorsPolicy"</span><span class="p">)]</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
    <span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
    <span class="c1">//[Authorize(Roles = "Admin,Member")]</span>
    <span class="c1">//[Authorize]</span>
    <span class="c1">//[Authorize(AuthenticationSchemes = Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerDefaults.AuthenticationScheme, Roles = "Admin,Member")]</span>

    <span class="c1">// Authorize with a specific scheme</span>
    <span class="c1">//[Authorize(AuthenticationSchemes = JwtBearerDefaults.AuthenticationScheme, Roles = "Admin,Member,User")]</span>
    <span class="p">[</span><span class="nf">Authorize</span><span class="p">(</span><span class="n">AuthenticationSchemes</span> <span class="p">=</span> <span class="n">JwtBearerDefaults</span><span class="p">.</span><span class="n">AuthenticationScheme</span><span class="p">)]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CustomerController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IMediator</span> <span class="n">_mediator</span><span class="p">;</span>
        <span class="k">public</span> <span class="nf">CustomerController</span><span class="p">(</span><span class="n">IMediator</span> <span class="n">mediator</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_mediator</span> <span class="p">=</span> <span class="n">mediator</span><span class="p">;</span>
        <span class="p">}</span>


        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"GetAll"</span><span class="p">)]</span>
        <span class="p">[</span><span class="nf">ProducesResponseType</span><span class="p">(</span><span class="n">StatusCodes</span><span class="p">.</span><span class="n">Status200OK</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;&gt;</span> <span class="nf">Get</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_mediator</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="k">new</span> <span class="nf">GetAllCustomerQuery</span><span class="p">());</span>
        <span class="p">}</span>

        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="p">[</span><span class="nf">ProducesResponseType</span><span class="p">(</span><span class="n">StatusCodes</span><span class="p">.</span><span class="n">Status200OK</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="nf">Get</span><span class="p">(</span><span class="n">Int64</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_mediator</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="k">new</span> <span class="nf">GetCustomerByIdQuery</span><span class="p">(</span><span class="n">id</span><span class="p">));</span>
        <span class="p">}</span>

        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"email"</span><span class="p">)]</span>
        <span class="p">[</span><span class="nf">ProducesResponseType</span><span class="p">(</span><span class="n">StatusCodes</span><span class="p">.</span><span class="n">Status200OK</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="nf">GetByEmail</span><span class="p">(</span><span class="kt">string</span> <span class="n">email</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_mediator</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="k">new</span> <span class="nf">GetCustomerByEmailQuery</span><span class="p">(</span><span class="n">email</span><span class="p">));</span>
        <span class="p">}</span>

        <span class="p">[</span><span class="nf">HttpPost</span><span class="p">(</span><span class="s">"Create"</span><span class="p">)]</span>
        <span class="p">[</span><span class="nf">ProducesResponseType</span><span class="p">(</span><span class="n">StatusCodes</span><span class="p">.</span><span class="n">Status200OK</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">CustomerResponse</span><span class="p">&gt;&gt;</span> <span class="nf">CreateCustomer</span><span class="p">([</span><span class="n">FromBody</span><span class="p">]</span> <span class="n">CreateCustomerCommand</span> <span class="n">command</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_mediator</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="n">command</span><span class="p">);</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
        <span class="p">}</span>


        <span class="p">[</span><span class="nf">HttpPut</span><span class="p">(</span><span class="s">"Edit/{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&gt;</span> <span class="nf">Edit</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="p">[</span><span class="n">FromBody</span><span class="p">]</span> <span class="n">EditCustomerCommand</span> <span class="n">command</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">command</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">id</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_mediator</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="n">command</span><span class="p">);</span>
                    <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
                <span class="p">}</span>
                <span class="k">else</span>
                <span class="p">{</span>
                    <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exp</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">(</span><span class="n">exp</span><span class="p">.</span><span class="n">Message</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>


        <span class="p">[</span><span class="nf">Authorize</span><span class="p">(</span><span class="n">Roles</span> <span class="p">=</span> <span class="s">"Admin, Management"</span><span class="p">)]</span>
        <span class="p">[</span><span class="nf">HttpDelete</span><span class="p">(</span><span class="s">"Delete/{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&gt;</span> <span class="nf">DeleteCustomer</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="kt">string</span> <span class="n">result</span> <span class="p">=</span> <span class="kt">string</span><span class="p">.</span><span class="n">Empty</span><span class="p">;</span>
                <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_mediator</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="k">new</span> <span class="nf">DeleteCustomerCommand</span><span class="p">(</span><span class="n">id</span><span class="p">));</span>
                <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exp</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">(</span><span class="n">exp</span><span class="p">.</span><span class="n">Message</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>

    <span class="p">}</span>
<span class="p">}</span>


</code></pre></div></div>

<ul>
  <li>Create RoleController in Ordering.API/Controllers folder</li>
</ul>

<p><strong>RoleController.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Authentication.JwtBearer</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Authorization</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Commands.Role.Create</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Commands.Role.Delete</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Commands.Role.Update</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.DTOs</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Queries.Role</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.API.Controllers</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
    <span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
    <span class="p">[</span><span class="nf">Authorize</span><span class="p">(</span><span class="n">AuthenticationSchemes</span> <span class="p">=</span> <span class="n">JwtBearerDefaults</span><span class="p">.</span><span class="n">AuthenticationScheme</span><span class="p">)]</span>
    <span class="p">[</span><span class="nf">Authorize</span><span class="p">(</span><span class="n">Roles</span> <span class="p">=</span> <span class="s">"Admin, Management"</span><span class="p">)]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">RoleController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">readonly</span> <span class="n">IMediator</span> <span class="n">_mediator</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">RoleController</span><span class="p">(</span><span class="n">IMediator</span> <span class="n">mediator</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_mediator</span> <span class="p">=</span> <span class="n">mediator</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="p">[</span><span class="nf">HttpPost</span><span class="p">(</span><span class="s">"Create"</span><span class="p">)]</span>
        <span class="p">[</span><span class="nf">ProducesDefaultResponseType</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="kt">int</span><span class="p">))]</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&gt;</span> <span class="nf">CreateRoleAsync</span><span class="p">(</span><span class="n">RoleCreateCommand</span> <span class="n">command</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="k">await</span> <span class="n">_mediator</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="n">command</span><span class="p">));</span>
        <span class="p">}</span>

        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"GetAll"</span><span class="p">)]</span>
        <span class="p">[</span><span class="nf">ProducesDefaultResponseType</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">List</span><span class="p">&lt;</span><span class="n">RoleResponseDTO</span><span class="p">&gt;))]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">GetRoleAsync</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="k">await</span> <span class="n">_mediator</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="k">new</span> <span class="nf">GetRoleQuery</span><span class="p">()));</span>
        <span class="p">}</span>


        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="p">[</span><span class="nf">ProducesDefaultResponseType</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">RoleResponseDTO</span><span class="p">))]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">GetRoleByIdAsync</span><span class="p">(</span><span class="kt">string</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="k">await</span> <span class="n">_mediator</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="k">new</span> <span class="nf">GetRoleByIdQuery</span><span class="p">()</span> <span class="p">{</span> <span class="n">RoleId</span> <span class="p">=</span> <span class="n">id</span> <span class="p">}));</span>
        <span class="p">}</span>

        <span class="p">[</span><span class="nf">HttpDelete</span><span class="p">(</span><span class="s">"Delete/{id}"</span><span class="p">)]</span>
        <span class="p">[</span><span class="nf">ProducesDefaultResponseType</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="kt">int</span><span class="p">))]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">DeleteRoleAsync</span><span class="p">(</span><span class="kt">string</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="k">await</span> <span class="n">_mediator</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="k">new</span> <span class="nf">DeleteRoleCommand</span><span class="p">()</span>
            <span class="p">{</span>
                <span class="n">RoleId</span> <span class="p">=</span> <span class="n">id</span>
            <span class="p">}));</span>
        <span class="p">}</span>

        <span class="p">[</span><span class="nf">HttpPut</span><span class="p">(</span><span class="s">"Edit/{id}"</span><span class="p">)]</span>
        <span class="p">[</span><span class="nf">ProducesDefaultResponseType</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="kt">int</span><span class="p">))]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&gt;</span> <span class="nf">EditRole</span><span class="p">(</span><span class="kt">string</span> <span class="n">id</span><span class="p">,</span> <span class="p">[</span><span class="n">FromBody</span><span class="p">]</span> <span class="n">UpdateRoleCommand</span> <span class="n">command</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">id</span> <span class="p">==</span> <span class="n">command</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_mediator</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="n">command</span><span class="p">);</span>
                <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">else</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
            <span class="p">}</span>
        <span class="p">}</span>

    <span class="p">}</span>
<span class="p">}</span>


</code></pre></div></div>

<ul>
  <li>Create UserController in Ordering.API/Controllers folder</li>
</ul>

<p><strong>UserController.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Authentication.JwtBearer</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Authorization</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Commands.User.Create</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Commands.User.Delete</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Commands.User.Update</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.DTOs</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Queries.User</span><span class="p">;</span>

<span class="c1">// For more information on enabling Web API for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860</span>

<span class="k">namespace</span> <span class="nn">Ordering.API.Controllers</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
    <span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>

    <span class="p">[</span><span class="nf">Authorize</span><span class="p">(</span><span class="n">AuthenticationSchemes</span> <span class="p">=</span> <span class="n">JwtBearerDefaults</span><span class="p">.</span><span class="n">AuthenticationScheme</span><span class="p">)]</span>
    <span class="p">[</span><span class="nf">Authorize</span><span class="p">(</span><span class="n">Roles</span> <span class="p">=</span> <span class="s">"Admin, Management"</span><span class="p">)]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">UserController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IMediator</span> <span class="n">_mediator</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">UserController</span><span class="p">(</span><span class="n">IMediator</span> <span class="n">mediator</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_mediator</span> <span class="p">=</span> <span class="n">mediator</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="p">[</span><span class="nf">HttpPost</span><span class="p">(</span><span class="s">"Create"</span><span class="p">)]</span>
        <span class="p">[</span><span class="nf">ProducesDefaultResponseType</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="kt">int</span><span class="p">))]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&gt;</span> <span class="nf">CreateUser</span><span class="p">(</span><span class="n">CreateUserCommand</span> <span class="n">command</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="k">await</span> <span class="n">_mediator</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="n">command</span><span class="p">));</span>
        <span class="p">}</span>

        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"GetAll"</span><span class="p">)]</span>
        <span class="p">[</span><span class="nf">ProducesDefaultResponseType</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">List</span><span class="p">&lt;</span><span class="n">UserResponseDTO</span><span class="p">&gt;))]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">GetAllUserAsync</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="k">await</span> <span class="n">_mediator</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="k">new</span> <span class="nf">GetUserQuery</span><span class="p">()));</span>
        <span class="p">}</span>

        <span class="p">[</span><span class="nf">HttpDelete</span><span class="p">(</span><span class="s">"Delete/{userId}"</span><span class="p">)]</span>
        <span class="p">[</span><span class="nf">ProducesDefaultResponseType</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="kt">int</span><span class="p">))]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">DeleteUser</span><span class="p">(</span><span class="kt">string</span> <span class="n">userId</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_mediator</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="k">new</span> <span class="nf">DeleteUserCommand</span><span class="p">()</span> <span class="p">{</span> <span class="n">Id</span> <span class="p">=</span> <span class="n">userId</span><span class="p">});</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"GetUserDetails/{userId}"</span><span class="p">)]</span>
        <span class="p">[</span><span class="nf">ProducesDefaultResponseType</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">UserDetailsResponseDTO</span><span class="p">))]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">GetUserDetails</span><span class="p">(</span><span class="kt">string</span> <span class="n">userId</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_mediator</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="k">new</span> <span class="nf">GetUserDetailsQuery</span><span class="p">()</span> <span class="p">{</span> <span class="n">UserId</span> <span class="p">=</span> <span class="n">userId</span> <span class="p">});</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"GetUserDetailsByUserName/{userName}"</span><span class="p">)]</span>
        <span class="p">[</span><span class="nf">ProducesDefaultResponseType</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">UserDetailsResponseDTO</span><span class="p">))]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">GetUserDetailsByUserName</span><span class="p">(</span><span class="kt">string</span> <span class="n">userName</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_mediator</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="k">new</span> <span class="nf">GetUserDetailsByUserNameQuery</span><span class="p">()</span> <span class="p">{</span> <span class="n">UserName</span> <span class="p">=</span> <span class="n">userName</span> <span class="p">});</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="p">[</span><span class="nf">HttpPost</span><span class="p">(</span><span class="s">"AssignRoles"</span><span class="p">)]</span>
        <span class="p">[</span><span class="nf">ProducesDefaultResponseType</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="kt">int</span><span class="p">))]</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&gt;</span> <span class="nf">AssignRoles</span><span class="p">(</span><span class="n">AssignUsersRoleCommand</span> <span class="n">command</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_mediator</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="n">command</span><span class="p">);</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="p">[</span><span class="nf">HttpPut</span><span class="p">(</span><span class="s">"EditUserRoles"</span><span class="p">)]</span>
        <span class="p">[</span><span class="nf">ProducesDefaultResponseType</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="kt">int</span><span class="p">))]</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&gt;</span> <span class="nf">EditUserRoles</span><span class="p">(</span><span class="n">UpdateUserRolesCommand</span> <span class="n">command</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_mediator</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="n">command</span><span class="p">);</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"GetAllUserDetails"</span><span class="p">)]</span>
        <span class="p">[</span><span class="nf">ProducesDefaultResponseType</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">UserDetailsResponseDTO</span><span class="p">))]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">GetAllUserDetails</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_mediator</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="k">new</span> <span class="nf">GetAllUsersDetailsQuery</span><span class="p">());</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
        <span class="p">}</span>


        <span class="p">[</span><span class="nf">HttpPut</span><span class="p">(</span><span class="s">"EditUserProfile/{id}"</span><span class="p">)]</span>
        <span class="p">[</span><span class="nf">ProducesDefaultResponseType</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="kt">int</span><span class="p">))]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&gt;</span> <span class="nf">EditUserProfile</span><span class="p">(</span><span class="kt">string</span> <span class="n">id</span><span class="p">,</span> <span class="p">[</span><span class="n">FromBody</span><span class="p">]</span><span class="n">EditUserProfileCommand</span> <span class="n">command</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">id</span> <span class="p">==</span> <span class="n">command</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_mediator</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="n">command</span><span class="p">);</span>
                <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">else</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
            <span class="p">}</span>
        <span class="p">}</span>

    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Set connection string in appsettings.json file. I have used here SQLite database for simplicity.</li>
</ul>

<p><strong>appsettings.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"Logging"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"LogLevel"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Default"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Information"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Microsoft.AspNetCore"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Warning"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"ConnectionStrings"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"DefaultConnection"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Data Source=db/ordering.db"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"Jwt"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"Key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"$ecret@Key$shouldbeEncrypted!"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Issuer"</span><span class="p">:</span><span class="w"> </span><span class="s2">"jwt"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Audience"</span><span class="p">:</span><span class="w"> </span><span class="s2">"jwt"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"ExpiryMinutes"</span><span class="p">:</span><span class="w"> </span><span class="mi">120</span><span class="w">
  </span><span class="p">},</span><span class="w">

  </span><span class="nl">"AllowedHosts"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*"</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<ul>
  <li>Modify the Program Class as follows</li>
</ul>

<p><strong>Program.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Authentication.JwtBearer</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.IdentityModel.Tokens</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.OpenApi.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Commands.Customers.Create</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Commands.User.Create</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Common.Interfaces</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Infrastructure</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Infrastructure.Services</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Reflection</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Text</span><span class="p">;</span>


<span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="n">WebApplication</span><span class="p">.</span><span class="nf">CreateBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>



<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">();</span>

<span class="c1">// For authentication</span>
<span class="kt">var</span> <span class="n">_key</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="n">Configuration</span><span class="p">[</span><span class="s">"Jwt:Key"</span><span class="p">];</span>
<span class="kt">var</span> <span class="n">_issuer</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="n">Configuration</span><span class="p">[</span><span class="s">"Jwt:Issuer"</span><span class="p">];</span>
<span class="kt">var</span> <span class="n">_audience</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="n">Configuration</span><span class="p">[</span><span class="s">"Jwt:Audience"</span><span class="p">];</span>
<span class="kt">var</span> <span class="n">_expirtyMinutes</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="n">Configuration</span><span class="p">[</span><span class="s">"Jwt:ExpiryMinutes"</span><span class="p">];</span>


<span class="c1">// Configuration for token</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddAuthentication</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span>
<span class="p">{</span>
    <span class="n">x</span><span class="p">.</span><span class="n">DefaultAuthenticateScheme</span> <span class="p">=</span> <span class="n">JwtBearerDefaults</span><span class="p">.</span><span class="n">AuthenticationScheme</span><span class="p">;</span>
    <span class="n">x</span><span class="p">.</span><span class="n">DefaultChallengeScheme</span> <span class="p">=</span> <span class="n">JwtBearerDefaults</span><span class="p">.</span><span class="n">AuthenticationScheme</span><span class="p">;</span>
    <span class="n">x</span><span class="p">.</span><span class="n">DefaultScheme</span> <span class="p">=</span> <span class="n">JwtBearerDefaults</span><span class="p">.</span><span class="n">AuthenticationScheme</span><span class="p">;</span>
<span class="p">}).</span><span class="nf">AddJwtBearer</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span>
<span class="p">{</span>
    <span class="n">x</span><span class="p">.</span><span class="n">RequireHttpsMetadata</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
    <span class="n">x</span><span class="p">.</span><span class="n">SaveToken</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
    <span class="n">x</span><span class="p">.</span><span class="n">TokenValidationParameters</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">TokenValidationParameters</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">ValidateIssuer</span> <span class="p">=</span> <span class="k">true</span><span class="p">,</span>
        <span class="n">ValidateAudience</span> <span class="p">=</span> <span class="k">true</span><span class="p">,</span>
        <span class="n">ValidateLifetime</span> <span class="p">=</span> <span class="k">true</span><span class="p">,</span>
        <span class="n">ValidateIssuerSigningKey</span> <span class="p">=</span> <span class="k">true</span><span class="p">,</span>
        <span class="n">ValidAudience</span> <span class="p">=</span> <span class="n">_audience</span><span class="p">,</span>
        <span class="n">ValidIssuer</span> <span class="p">=</span> <span class="n">_issuer</span><span class="p">,</span>
        <span class="n">IssuerSigningKey</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">SymmetricSecurityKey</span><span class="p">(</span><span class="n">Encoding</span><span class="p">.</span><span class="n">UTF8</span><span class="p">.</span><span class="nf">GetBytes</span><span class="p">(</span><span class="n">_key</span><span class="p">)),</span>
        <span class="n">ClockSkew</span> <span class="p">=</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="nf">FromMinutes</span><span class="p">(</span><span class="n">Convert</span><span class="p">.</span><span class="nf">ToDouble</span><span class="p">(</span><span class="n">_expirtyMinutes</span><span class="p">))</span>

    <span class="p">};</span>
<span class="p">});</span>


<span class="c1">// Dependency injection with key</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddSingleton</span><span class="p">&lt;</span><span class="n">ITokenGenerator</span><span class="p">&gt;(</span><span class="k">new</span> <span class="nf">TokenGenerator</span><span class="p">(</span><span class="n">_key</span><span class="p">,</span> <span class="n">_issuer</span><span class="p">,</span> <span class="n">_audience</span><span class="p">,</span> <span class="n">_expirtyMinutes</span><span class="p">));</span>


<span class="c1">// Include Infrastructur Dependency</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddInfrastructure</span><span class="p">(</span><span class="n">builder</span><span class="p">.</span><span class="n">Configuration</span><span class="p">);</span>



<span class="c1">// Configuration for Sqlite</span>
<span class="c1">//builder.Services.AddDbContext&lt;OrderingContext&gt;(options =&gt; options.UseSqlite(builder.Configuration.GetConnectionString("DefaultConnection")));</span>

<span class="c1">// Register dependencies</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddMediatR</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">CreateCustomerCommandHandler</span><span class="p">).</span><span class="nf">GetTypeInfo</span><span class="p">().</span><span class="n">Assembly</span><span class="p">);</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddMediatR</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">CreateUserCommandHandler</span><span class="p">).</span><span class="nf">GetTypeInfo</span><span class="p">().</span><span class="n">Assembly</span><span class="p">);</span>



<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddCors</span><span class="p">(</span><span class="n">c</span> <span class="p">=&gt;</span>
<span class="p">{</span>
    <span class="n">c</span><span class="p">.</span><span class="nf">AddPolicy</span><span class="p">(</span><span class="s">"CorsPolicy"</span><span class="p">,</span> <span class="n">options</span> <span class="p">=&gt;</span> <span class="n">options</span><span class="p">.</span><span class="nf">AllowAnyOrigin</span><span class="p">().</span><span class="nf">AllowAnyMethod</span><span class="p">().</span><span class="nf">AllowAnyHeader</span><span class="p">());</span>
<span class="p">});</span>



<span class="c1">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddEndpointsApiExplorer</span><span class="p">();</span>

<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddSwaggerGen</span><span class="p">(</span><span class="n">c</span> <span class="p">=&gt;</span>
<span class="p">{</span>

    <span class="c1">// To enable authorization using swagger (Jwt)</span>
    <span class="n">c</span><span class="p">.</span><span class="nf">AddSecurityDefinition</span><span class="p">(</span><span class="s">"Bearer"</span><span class="p">,</span> <span class="k">new</span> <span class="nf">OpenApiSecurityScheme</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">Name</span> <span class="p">=</span> <span class="s">"Authorization"</span><span class="p">,</span>
        <span class="n">Type</span> <span class="p">=</span> <span class="n">SecuritySchemeType</span><span class="p">.</span><span class="n">ApiKey</span><span class="p">,</span>
        <span class="n">Scheme</span> <span class="p">=</span> <span class="s">"Bearer"</span><span class="p">,</span>
        <span class="n">BearerFormat</span> <span class="p">=</span> <span class="s">"JWT"</span><span class="p">,</span>
        <span class="n">In</span> <span class="p">=</span> <span class="n">ParameterLocation</span><span class="p">.</span><span class="n">Header</span><span class="p">,</span>
        <span class="n">Description</span> <span class="p">=</span> <span class="s">"JWT Authorization header using the Bearer scheme. \r\n\r\n Enter 'Bearer' [space] and then your token in the text input below.\r\n\r\nExample: \"Bearer {token}\""</span><span class="p">,</span>
    <span class="p">});</span>

    <span class="n">c</span><span class="p">.</span><span class="nf">AddSecurityRequirement</span><span class="p">(</span><span class="k">new</span> <span class="n">OpenApiSecurityRequirement</span>
    <span class="p">{</span>
        <span class="p">{</span>
            <span class="k">new</span> <span class="n">OpenApiSecurityScheme</span>
                <span class="p">{</span>
                            <span class="n">Reference</span> <span class="p">=</span> <span class="k">new</span> <span class="n">OpenApiReference</span>
                            <span class="p">{</span>
                                <span class="n">Type</span> <span class="p">=</span> <span class="n">ReferenceType</span><span class="p">.</span><span class="n">SecurityScheme</span><span class="p">,</span>
                                <span class="n">Id</span> <span class="p">=</span> <span class="s">"Bearer"</span>
                            <span class="p">}</span>
                        <span class="p">},</span>
                        <span class="k">new</span> <span class="kt">string</span><span class="p">[]</span> <span class="p">{}</span>

                    <span class="p">}</span>
                <span class="p">});</span>

<span class="p">});</span>

<span class="kt">var</span> <span class="n">app</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

<span class="c1">// Configure the HTTP request pipeline.</span>
<span class="k">if</span> <span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">Environment</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
<span class="p">{</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwagger</span><span class="p">();</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">UseSwaggerUI</span><span class="p">();</span>
<span class="p">}</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseHttpsRedirection</span><span class="p">();</span>

<span class="c1">// Must be betwwen app.UseRouting() and app.UseEndPoints()</span>
<span class="c1">// maintain middleware order</span>
<span class="n">app</span><span class="p">.</span><span class="nf">UseCors</span><span class="p">(</span><span class="s">"CorsPolicy"</span><span class="p">);</span>

<span class="c1">// Added for authentication</span>
<span class="c1">// Maintain middleware order</span>
<span class="n">app</span><span class="p">.</span><span class="nf">UseAuthentication</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseAuthorization</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">MapControllers</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>

</code></pre></div></div>

<p><strong>Step 9: Run migration command on package manager console</strong></p>

<ul>
  <li>In package manager console select Oredering.Infrastructure as defult project.</li>
  <li>Run the following command</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Add-Migration</span> <span class="nf">initialsqlmig</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Update-Database</span> <span class="nf">-Verbose</span>
</code></pre></div></div>

<p>__Step 10: Now run your application and test using swagger.</p>

<p><strong><a href="https://github.com/mahedee/code-sample02/tree/main/token-based-auth-core/ECommerce">Source code</a></strong></p>]]></content><author><name>Mahedee Hasan</name></author><category term="Web API" /><category term="ASP.NET Core" /><category term="C#" /><category term="Dapper" /><category term="EF" /><category term="JWT" /><category term="Auth" /><category term="webapi" /><category term="aspnetcore" /><category term="csharp" /><category term="ef" /><category term="dapper" /><category term="jwt" /><category term="auth" /><summary type="html"><![CDATA[Authentication and authorization is a key part of an application. Sometimes we struggle to implement authentication and authorization in a web api application. In this article I will show you, how to implement authentication and authorization using JWT in an asp.net core web application.]]></summary></entry><entry><title type="html">Export and Import Docker images and container with asp.net core application</title><link href="https://mahedee.net//Export-and-Import-Docker-images-and-container-with-asp.net-core-application/" rel="alternate" type="text/html" title="Export and Import Docker images and container with asp.net core application" /><published>2021-11-02T00:00:00+00:00</published><updated>2021-11-02T00:00:00+00:00</updated><id>https://mahedee.net//Export-and-Import-Docker-images-and-container-with-asp.net-core-application</id><content type="html" xml:base="https://mahedee.net//Export-and-Import-Docker-images-and-container-with-asp.net-core-application/"><![CDATA[<p>Sometimes we need to work in a disconnected environment. In that situation, we need to export/import docker images and container. Here I will show how to export and import images and container.</p>

<h2 id="save-and-load-docker-images">Save and load docker images</h2>
<p><strong>Step 1: Create a sample asp.net core application - name CatalogApp</strong></p>

<p><strong>Step 2: Containerize CatalogApp</strong></p>
<ul>
  <li>Add a dockerfile in the root directory - here dockerfile and sln file exists in the same directory.</li>
  <li>You see how to <a href="https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/docker/building-net-docker-images?view=aspnetcore-5.0">Containerize a .NET Core app</a></li>
</ul>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># https://hub.docker.com/_/microsoft-dotnet</span>
<span class="s">FROM mcr.microsoft.com/dotnet/sdk:5.0 AS build</span>
<span class="s">WORKDIR /source</span>

<span class="c1"># copy csproj and restore as distinct layers</span>
<span class="s">COPY *.sln .</span>
<span class="s">COPY CatalogApp/*.csproj ./CatalogApp/</span>
<span class="s">RUN dotnet restore</span>

<span class="c1"># copy everything else and build app</span>
<span class="s">COPY CatalogApp/. ./CatalogApp/</span>
<span class="s">WORKDIR /source/CatalogApp</span>
<span class="s">RUN dotnet publish -c release -o /app --no-restore</span>

<span class="c1"># final stage/image</span>
<span class="s">FROM mcr.microsoft.com/dotnet/aspnet:5.0</span>
<span class="s">WORKDIR /app</span>
<span class="s">COPY --from=build /app ./</span>
<span class="s">ENTRYPOINT ["dotnet", "CatalogApp.dll"]</span>
</code></pre></div></div>

<p><strong>Step 3: Run in linux container</strong></p>
<ul>
  <li>Navigate to the Dockerfile folder</li>
  <li>Run the following commands to build the application in docker
    <div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">docker</span> <span class="nf">build</span> <span class="nf">-t</span> <span class="nf">catalogapp</span> <span class="nf">.</span>
</code></pre></div>    </div>
  </li>
  <li>Now you will see an image name catalogapp is created. To check images, run the following command.
    <div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">docker</span> <span class="nf">images</span>
</code></pre></div>    </div>
  </li>
  <li>If you want to run the application (images) in docker, run the following command
    <div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">docker</span> <span class="nb">run</span> <span class="nf">-it</span> <span class="nf">--rm</span> <span class="nf">-p</span> <span class="nf">5000:80</span> <span class="nf">--name</span> <span class="nf">catalogapp_container</span> <span class="nf">catalogapp</span>
</code></pre></div>    </div>
  </li>
  <li>Browse application at http://localhost:5000/ to see output</li>
</ul>

<p><strong>Step 3: Save docker images</strong></p>
<ul>
  <li>To export “catalogapp” image run the following command
    <div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">docker</span> <span class="nb">save</span> <span class="nf">-o</span> <span class="nf">D:\Images\catalogapp.tar</span> <span class="nf">catalogapp</span>
</code></pre></div>    </div>
  </li>
  <li>You will see a catalogapp.tar file in D:\Images\ directory</li>
</ul>

<p><strong>Step 4: Now load docker images</strong></p>
<ul>
  <li>You may run the following command to remove all docker images
    <div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">docker</span> <span class="nf">rmi</span> <span class="nf">$</span><span class="s">(docker images -q)</span>
</code></pre></div>    </div>
  </li>
  <li>Go to to the directory D:\Images\</li>
  <li>Run the following command to load images. You will see two images is created with dev and latest tag.
    <div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">PS</span> <span class="nf">D:\Images</span><span class="p">&gt;</span> <span class="nf">docker</span> <span class="nb">load</span> <span class="nf">-i</span> <span class="nf">catalogapp.tar</span>
</code></pre></div>    </div>
  </li>
</ul>

<p><strong>Run loaded image</strong></p>
<ul>
  <li>Now run the following command to run the catalogapp images with latest tag.
    <div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">docker</span> <span class="nb">run</span> <span class="nf">-it</span> <span class="nf">--rm</span> <span class="nf">-p</span> <span class="nf">5000:80</span> <span class="nf">--name</span> <span class="nf">catalogapp_container</span> <span class="nf">catalogapp:latest</span>
</code></pre></div>    </div>
  </li>
  <li>Browse application at http://localhost:5000/ to see output</li>
</ul>

<h2 id="export-and-import-docker-container">Export and import docker container</h2>
<p><strong>Step 1: Create a sample asp.net core application as before - name CatalogApp</strong></p>

<p><strong>Step 2: Containerize CatalogApp</strong></p>
<ul>
  <li>Add a dockerfile in the root directory - here dockerfile and sln file exists in the same directory.</li>
  <li>You see how to <a href="https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/docker/building-net-docker-images?view=aspnetcore-5.0">Containerize a .NET Core app</a></li>
</ul>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># https://hub.docker.com/_/microsoft-dotnet</span>
<span class="s">FROM mcr.microsoft.com/dotnet/sdk:5.0 AS build</span>
<span class="s">WORKDIR /source</span>

<span class="c1"># copy csproj and restore as distinct layers</span>
<span class="s">COPY *.sln .</span>
<span class="s">COPY CatalogApp/*.csproj ./CatalogApp/</span>
<span class="s">RUN dotnet restore</span>

<span class="c1"># copy everything else and build app</span>
<span class="s">COPY CatalogApp/. ./CatalogApp/</span>
<span class="s">WORKDIR /source/CatalogApp</span>
<span class="s">RUN dotnet publish -c release -o /app --no-restore</span>

<span class="c1"># final stage/image</span>
<span class="s">FROM mcr.microsoft.com/dotnet/aspnet:5.0</span>
<span class="s">WORKDIR /app</span>
<span class="s">COPY --from=build /app ./</span>
<span class="s">ENTRYPOINT ["dotnet", "CatalogApp.dll"]</span>
</code></pre></div></div>

<p><strong>Step 3: Run in linux container</strong></p>
<ul>
  <li>Navigate to the Dockerfile folder</li>
  <li>Run the following commands to build the application in docker
    <div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">docker</span> <span class="nf">build</span> <span class="nf">-t</span> <span class="nf">catalogapp</span> <span class="nf">.</span>
</code></pre></div>    </div>
  </li>
  <li>Now you will see an image name catalogapp is created. To check images, run the following command.
    <div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">docker</span> <span class="nf">images</span>
</code></pre></div>    </div>
  </li>
  <li>If you want to run the application (images) in docker, run the following command
    <div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">docker</span> <span class="nb">run</span> <span class="nf">-it</span> <span class="nf">--rm</span> <span class="nf">-p</span> <span class="nf">5000:80</span> <span class="nf">--name</span> <span class="nf">catalogapp_container</span> <span class="nf">catalogapp</span>
</code></pre></div>    </div>
  </li>
  <li>Browse application at http://localhost:5000/ to see output</li>
</ul>

<p><strong>Step 3: Export docker container</strong></p>
<ul>
  <li>To export “catalogapp_container” container run the following command
    <div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">docker</span> <span class="nf">export</span> <span class="nf">-o</span> <span class="nf">D:\Containers\catalogapp_container.tar</span> <span class="nf">catalogapp_container</span>
</code></pre></div>    </div>
  </li>
  <li>You will see a catalogapp_container file in D:\Containers\ directory</li>
</ul>

<p><strong>Step 4: Now import docker container</strong></p>
<ul>
  <li>You may run the following command to remove all docker images
    <div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">docker</span> <span class="nf">rmi</span> <span class="nf">$</span><span class="s">(docker images -q)</span>
</code></pre></div>    </div>
  </li>
  <li>Go to to the directory D:\Containers\</li>
  <li>Run the following command to load images. You will see two images is created with dev and latest tag.
    <div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">PS</span> <span class="nf">D:\Containers</span><span class="p">&gt;</span> <span class="nf">docker</span> <span class="nf">import</span> <span class="nf">catalogapp_container.tar</span> <span class="nf">catalogapp:imp</span>
</code></pre></div>    </div>
  </li>
</ul>

<p><strong>Run Imported image</strong></p>
<ul>
  <li>Now run the following command to run the catalogapp images with latest tag.
    <div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">docker</span> <span class="nb">run</span> <span class="nf">-it</span> <span class="nf">--rm</span> <span class="nf">-p</span> <span class="nf">5000:80</span> <span class="nf">--name</span> <span class="nf">catalogapp_container</span> <span class="nf">catalogapp:imp</span>
</code></pre></div>    </div>
  </li>
  <li>Browse application at http://localhost:5000/ to see output</li>
</ul>

<h2 id="summary">Summary</h2>
<p>Let’s summarize the idea of image and container export and import.</p>
<ul>
  <li>Image load is just copying and container import is just like turn container to image.</li>
  <li>To export and import images, use docker save and load command.</li>
  <li>To export and import container, use docker export and import command.</li>
  <li>Exported tar file is smaller than saved tar file. Because the exported file is a container, when the export file is imported, all the history of the image (that is, the information of each layer) cannot be retained, and the rollback operation cannot be performed. And save is based on the mirror image, so you can completely retain the information of each layer when importing.</li>
  <li>It’s not possible to rename loaded images but you can do it for imported image like catalogapp:imp</li>
</ul>

<p><strong><a href="https://github.com/mahedee/code-sample/tree/master/docker-export-import">Source Code</a></strong></p>

<!-- 
References
https://www.programmersought.com/article/55817601118/ 
https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/docker/building-net-docker-images?view=aspnetcore-5.0
-->]]></content><author><name>Mahedee Hasan</name></author><category term="Docker" /><category term="ASP.NET Core" /><category term="Microservices" /><category term="aspnetcore" /><category term="docker" /><category term="microservices" /><summary type="html"><![CDATA[Sometimes we need to work in a disconnected environment. In that situation, we need to export/import docker images and container. Here I will show how to export and import images and container.]]></summary></entry><entry><title type="html">Playing with Clean Architecture and CQRS pattern using asp.net core, EF and Dapper</title><link href="https://mahedee.net//playing-with-clean-architecture-and-cqrs-pattern-using-asp.net-core-ef-and-dapper/" rel="alternate" type="text/html" title="Playing with Clean Architecture and CQRS pattern using asp.net core, EF and Dapper" /><published>2021-10-02T00:00:00+00:00</published><updated>2021-10-02T00:00:00+00:00</updated><id>https://mahedee.net//playing-with-clean-architecture-and-cqrs-pattern-using-asp.net-core-ef-and-dapper</id><content type="html" xml:base="https://mahedee.net//playing-with-clean-architecture-and-cqrs-pattern-using-asp.net-core-ef-and-dapper/"><![CDATA[<!-- ## Playing with Clean Architecture and CQRS pattern using asp.net core EF and Dapper -->

<p><strong>Introduction</strong></p>

<p>Clean architecute was created by Robert C. Martin known as Uncle Bob. It’s now mostly used software architecute especially in microservice architecture. In this article, I will discuss about clean architecute a bit and then implement the concept using clean architecture and CQRS pattern using asp.net core, entity framework core and dapper. The main concept of clean architecture is that the core logic of the application is changed rarely so it will be independent and considered it as core.</p>

<p><img src="/assets/images/posts/2021/clean.png" alt="" /></p>

<p>Fig - The Clean Architecture (Picture collected from internet)</p>

<p>In clean architecture, based on the picture, the domain and application layers remain in the center of the design which is known as core of the application. The domain layer contains enterprise logic and the application layer contains business logic. Generally, business logic is not sharable, it is for that particualr business only but enterprise logic can be shared across many related system.</p>

<p><strong>Advantages</strong></p>

<ul>
  <li>Highly maintainable - It’s follows seperation of concern.</li>
  <li>UI Independent - It is loosely coupled with UI layer. So, you can change UI without changing the core buisness.</li>
  <li>Highly Testable - Apps built using this approach, and especially the core domain model and its business rules, are extremely testable.</li>
  <li>Framework Independent - You can use any langulage like C#, Java, Python to implement clean architecture.</li>
  <li>Scalable - Can implement CQRS pattern. So, it is highly scalable.</li>
</ul>

<p><strong>CQRS Pattern</strong></p>

<p>CQRS stands for Command and Query Responsibility Segregation. Main concern of this pattern is seperation of concern. It seperates read and command (insert, update, delete) operations. It is mostly used for performance and scalability.</p>

<p>Now, I will show you a sample project in which I have implemented Clean Architecture with CQRS pattern.</p>

<p><strong>Tools and technologies used</strong></p>
<ul>
  <li>Clean Architecture</li>
  <li>CQRS Pattern</li>
  <li>Visual Studio 2019</li>
  <li>.NET 5.0</li>
  <li>SQLite</li>
  <li>Dapper</li>
  <li>Entity Framework</li>
  <li>AutoMapper</li>
  <li>MediatR</li>
  <li>ASP.NET Core Web API</li>
  <li>C#</li>
</ul>

<p><strong>Implementation</strong></p>

<p><strong>Step 1: Create solution and projects.</strong></p>

<ul>
  <li>
    <p>Create a solution name Ecommerce using the following command.</p>

    <div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nf">dotnet</span> <span class="nf">new</span> <span class="nf">sln</span> <span class="nf">-o</span> <span class="nf">Ecommerce</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Now the following 3 projects in Ecommerce\Services\Ordering folder. Ordering.API is a webapi project. Rest of the projects are class library.</p>

    <div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nf">dotnet</span> <span class="nf">new</span> <span class="nf">webapi</span> <span class="nf">-o</span> <span class="nf">Ordering.API</span>
</code></pre></div>    </div>
    <div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nf">dotnet</span> <span class="nf">new</span> <span class="nf">classlib</span> <span class="nf">-o</span> <span class="nf">Ordering.Application</span>
</code></pre></div>    </div>
    <div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nf">dotnet</span> <span class="nf">new</span> <span class="nf">classlib</span> <span class="nf">-o</span> <span class="nf">Ordering.Core</span>
</code></pre></div>    </div>
    <div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nf">dotnet</span> <span class="nf">new</span> <span class="nf">classlib</span> <span class="nf">-o</span> <span class="nf">Ordering.Infrastructure</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Go to Ecommerce folder and open terminal. Add all project to the solutions using the following command.</p>
  </li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nf">dotnet</span> <span class="nf">sln</span> <span class="nf">.\Ecommerce.sln</span> <span class="nb">add</span> <span class="nf">.\Services\Ordering\Ordering.API\Ordering.API.csproj</span> <span class="nf">.\Services\Ordering\Ordering.Application\Ordering.Application.csproj</span> <span class="nf">.\Services\Ordering\Ordering.Core\Ordering.Core.csproj</span> <span class="nf">.\Services\Ordering\Ordering.Infrastructure\Ordering.Infrastructure.csproj</span>
</code></pre></div></div>
<ul>
  <li>Your initial application structure is a follows.</li>
</ul>

<p><img src="/assets/images/posts/2021/projects.png" alt="" /></p>

<p><strong>Step 2: Install nuget packages.</strong></p>

<ul>
  <li>Install following nuget packages in Ordering.Infrastructure Project</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Dapper</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.Data.Sqlite.Core</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore.Design</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore.Relational</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore.Tools</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.Extensions.Configuration.Abstractions</span>
</code></pre></div></div>

<ul>
  <li>Install following nuget packages in Ordering.Application Project</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">AutoMapper</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">MediatR</span>
</code></pre></div></div>

<ul>
  <li>Install following nuget packages in Ordering.API Project</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">AutoMapper.Extensions.Microsoft.DependencyInjection</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">MediatR</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">MediatR.Extensions.Microsoft.DependencyInjection</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore.Design</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore.Sqlite</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Microsoft.EntityFrameworkCore.Tools</span>
</code></pre></div></div>

<p><strong>Step 3: Create Entity class  in Ordering.Core project</strong></p>

<ul>
  <li>Create BaseEntity in Ordering.Core/Entities/Base folder</li>
  <li>Create Customer in Ordering.Core/Entities folder</li>
</ul>

<p><strong>BaseEntity.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.ComponentModel.DataAnnotations</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.ComponentModel.DataAnnotations.Schema</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Core.Entities.Base</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">BaseEntity</span>
    <span class="p">{</span>
        <span class="p">[</span><span class="n">Key</span><span class="p">]</span>
        <span class="p">[</span><span class="nf">DatabaseGenerated</span><span class="p">(</span><span class="n">DatabaseGeneratedOption</span><span class="p">.</span><span class="n">Identity</span><span class="p">)]</span>
        <span class="k">public</span> <span class="n">Int64</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="n">DateTime</span> <span class="n">CreatedDate</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="n">DateTime</span> <span class="n">ModifiedDate</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="nf">BaseEntity</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="n">ModifiedDate</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>Customer.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Ordering.Core.Entities.Base</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Core.Entities</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Customer</span> <span class="p">:</span> <span class="n">BaseEntity</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">FirstName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">LastName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Email</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">ContactNumber</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Address</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 4: Create Command and Query Interface in Ordering.Core project</strong></p>

<ul>
  <li>Create ICommandRepository in Ordering.Core/Repositories/Command/Base folder</li>
  <li>Create ICommandCustomerRepository in Ordering.Core/Repositories/Command folder</li>
  <li>Create IQueryRepository in Ordering.Core/Repositories/Query/Base folder</li>
  <li>Create ICustomerQueryRepository in Ordering.Core/Repositories/Query folder</li>
</ul>

<p><strong>ICommandRepository.cs</strong></p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System.Threading.Tasks</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Core.Repositories.Command.Base</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">interface</span> <span class="nc">ICommandRepository</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="k">where</span> <span class="n">T</span> <span class="p">:</span> <span class="k">class</span>
    <span class="err">{</span>
        <span class="nc">Task</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="nf">AddAsync</span><span class="p">(</span><span class="n">T</span> <span class="n">entity</span><span class="p">);</span>
        <span class="n">Task</span> <span class="nf">UpdateAsync</span><span class="p">(</span><span class="n">T</span> <span class="n">entity</span><span class="p">);</span>
        <span class="n">Task</span> <span class="nf">DeleteAsync</span><span class="p">(</span><span class="n">T</span> <span class="n">entity</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>ICustomerCommandRepository.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Ordering.Core.Entities</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Repositories.Command.Base</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Core.Repositories.Command</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">interface</span> <span class="nc">ICustomerCommandRepository</span> <span class="p">:</span> <span class="n">ICommandRepository</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span>
    <span class="p">{</span>

    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p><strong>IQueryRepository.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">Ordering.Core.Repositories.Query.Base</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">interface</span> <span class="nc">IQueryRepository</span> <span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="k">where</span> <span class="n">T</span> <span class="p">:</span> <span class="k">class</span>
    <span class="err">{</span>
        <span class="c1">// Generic repository for all if any</span>
    <span class="err">}</span>
<span class="err">}</span>
</code></pre></div></div>

<p><strong>ICustomerQueryRepository.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Ordering.Core.Entities</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Repositories.Query.Base</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Threading.Tasks</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Core.Repositories.Query</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">interface</span> <span class="nc">ICustomerQueryRepository</span> <span class="p">:</span> <span class="n">IQueryRepository</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="c1">//Custom operation which is not generic</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">IReadOnlyList</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;&gt;</span> <span class="nf">GetAllAsync</span><span class="p">();</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="nf">GetByIdAsync</span><span class="p">(</span><span class="n">Int64</span> <span class="n">id</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="nf">GetCustomerByEmail</span><span class="p">(</span><span class="kt">string</span> <span class="n">email</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 5: Create DbConnector and OrderingContext in Ordering.Infrastructure project</strong></p>

<ul>
  <li>Create DbConnector class in Ordering.Infrastructure/Data folder for SQLite connection for query.</li>
</ul>

<p><strong>DbConnector.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Microsoft.Data.Sqlite</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Extensions.Configuration</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Data</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Infrastructure.Data</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">DbConnector</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IConfiguration</span> <span class="n">_configuration</span><span class="p">;</span>

        <span class="k">protected</span> <span class="nf">DbConnector</span><span class="p">(</span><span class="n">IConfiguration</span> <span class="n">configuration</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_configuration</span> <span class="p">=</span> <span class="n">configuration</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">IDbConnection</span> <span class="nf">CreateConnection</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="kt">string</span> <span class="n">_connectionString</span> <span class="p">=</span> <span class="n">_configuration</span><span class="p">.</span><span class="nf">GetConnectionString</span><span class="p">(</span><span class="s">"DefaultConnection"</span><span class="p">);</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">SqliteConnection</span><span class="p">(</span><span class="n">_connectionString</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>Create OrderingContext class in Ordering.Infrastructure/Data folder for command.</li>
</ul>

<p><strong>OrderingContext.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Entities</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Infrastructure.Data</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">OrderingContext</span> <span class="p">:</span> <span class="n">DbContext</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">OrderingContext</span><span class="p">(</span><span class="n">DbContextOptions</span><span class="p">&lt;</span><span class="n">OrderingContext</span><span class="p">&gt;</span> <span class="n">options</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span> <span class="p">(</span><span class="n">options</span><span class="p">)</span>
        <span class="p">{</span>

        <span class="p">}</span>

        <span class="k">public</span> <span class="n">DbSet</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="n">Customers</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 6: Create Command and Query Repository in Ordering.Infrastructure project</strong></p>

<ul>
  <li>Create CommandRepository in Ordering.Infrastructure/Repositories/Command/Base folder</li>
</ul>

<p><strong>CommandRepository.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Repositories.Command.Base</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Infrastructure.Data</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Threading.Tasks</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Infrastructure.Repository.Command.Base</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CommandRepository</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="p">:</span> <span class="n">ICommandRepository</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="k">where</span> <span class="n">T</span> <span class="p">:</span> <span class="k">class</span>
    <span class="err">{</span>
        <span class="nc">protected</span> <span class="k">readonly</span> <span class="n">OrderingContext</span> <span class="n">_context</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">CommandRepository</span><span class="p">(</span><span class="n">OrderingContext</span> <span class="n">context</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_context</span> <span class="p">=</span> <span class="n">context</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="nf">AddAsync</span><span class="p">(</span><span class="n">T</span> <span class="n">entity</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Set</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;().</span><span class="nf">AddAsync</span><span class="p">(</span><span class="n">entity</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>
            <span class="k">return</span> <span class="n">entity</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span> <span class="nf">UpdateAsync</span><span class="p">(</span><span class="n">T</span> <span class="n">entity</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_context</span><span class="p">.</span><span class="nf">Entry</span><span class="p">(</span><span class="n">entity</span><span class="p">).</span><span class="n">State</span> <span class="p">=</span> <span class="n">EntityState</span><span class="p">.</span><span class="n">Modified</span><span class="p">;</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span> <span class="nf">DeleteAsync</span><span class="p">(</span><span class="n">T</span> <span class="n">entity</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_context</span><span class="p">.</span><span class="n">Set</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;().</span><span class="nf">Remove</span><span class="p">(</span><span class="n">entity</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create CommandCustomerRepository in Ordering.Infrastructure/Repositories/Command folder</li>
</ul>

<p><strong>CustomerCommandRepository.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Ordering.Core.Entities</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Repositories.Command</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Infrastructure.Data</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Infrastructure.Repository.Command.Base</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Infrastructure.Repository.Command</span>
<span class="p">{</span>

    <span class="k">public</span> <span class="k">class</span> <span class="nc">CustomerCommandRepository</span> <span class="p">:</span> <span class="n">CommandRepository</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;,</span> <span class="n">ICustomerCommandRepository</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">CustomerCommandRepository</span><span class="p">(</span><span class="n">OrderingContext</span> <span class="n">context</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">context</span><span class="p">)</span>
        <span class="p">{</span>

        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>Create QueryRepository in Ordering.Infrastructure/Repositories/Query/Base folder</li>
</ul>

<p><strong>QueryRepository.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Microsoft.Extensions.Configuration</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Repositories.Query.Base</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Infrastructure.Data</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Infrastructure.Repository.Query.Base</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">QueryRepository</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="p">:</span> <span class="n">DbConnector</span><span class="p">,</span>  <span class="n">IQueryRepository</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="k">where</span> <span class="n">T</span> <span class="p">:</span> <span class="k">class</span>
    <span class="err">{</span>
        <span class="nc">public</span> <span class="nf">QueryRepository</span><span class="p">(</span><span class="n">IConfiguration</span> <span class="n">configuration</span><span class="p">)</span>
            <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">configuration</span><span class="p">)</span>
        <span class="p">{</span>

        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>Create CustomerQueryRepository in Ordering.Infrastructure/Repositories/Query folder</li>
</ul>

<p><strong>CustomerQueryRepository.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Dapper</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Extensions.Configuration</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Entities</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Repositories.Query</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Infrastructure.Repository.Query.Base</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Data</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Linq</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Threading.Tasks</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Infrastructure.Repository.Query</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CustomerQueryRepository</span> <span class="p">:</span> <span class="n">QueryRepository</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;,</span> <span class="n">ICustomerQueryRepository</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">CustomerQueryRepository</span><span class="p">(</span><span class="n">IConfiguration</span> <span class="n">configuration</span><span class="p">)</span> 
            <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">configuration</span><span class="p">)</span>
        <span class="p">{</span>

        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IReadOnlyList</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;&gt;</span> <span class="nf">GetAllAsync</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="kt">var</span> <span class="n">query</span> <span class="p">=</span> <span class="s">"SELECT * FROM CUSTOMERS"</span><span class="p">;</span>

                <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">connection</span> <span class="p">=</span> <span class="nf">CreateConnection</span><span class="p">())</span>
                <span class="p">{</span>
                    <span class="k">return</span> <span class="p">(</span><span class="k">await</span> <span class="n">connection</span><span class="p">.</span><span class="n">QueryAsync</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;(</span><span class="n">query</span><span class="p">)).</span><span class="nf">ToList</span><span class="p">();</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exp</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">(</span><span class="n">exp</span><span class="p">.</span><span class="n">Message</span><span class="p">,</span> <span class="n">exp</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="nf">GetByIdAsync</span><span class="p">(</span><span class="kt">long</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="kt">var</span> <span class="n">query</span> <span class="p">=</span> <span class="s">"SELECT * FROM CUSTOMERS WHERE Id = @Id"</span><span class="p">;</span>
                <span class="kt">var</span> <span class="n">parameters</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">DynamicParameters</span><span class="p">();</span>
                <span class="n">parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"Id"</span><span class="p">,</span> <span class="n">id</span><span class="p">,</span> <span class="n">DbType</span><span class="p">.</span><span class="n">Int64</span><span class="p">);</span>

                <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">connection</span> <span class="p">=</span> <span class="nf">CreateConnection</span><span class="p">())</span>
                <span class="p">{</span>
                    <span class="k">return</span> <span class="p">(</span><span class="k">await</span> <span class="n">connection</span><span class="p">.</span><span class="n">QueryFirstOrDefaultAsync</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;(</span><span class="n">query</span><span class="p">,</span> <span class="n">parameters</span><span class="p">));</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exp</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">(</span><span class="n">exp</span><span class="p">.</span><span class="n">Message</span><span class="p">,</span> <span class="n">exp</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="nf">GetCustomerByEmail</span><span class="p">(</span><span class="kt">string</span> <span class="n">email</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="kt">var</span> <span class="n">query</span> <span class="p">=</span> <span class="s">"SELECT * FROM CUSTOMERS WHERE Email = @email"</span><span class="p">;</span>
                <span class="kt">var</span> <span class="n">parameters</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">DynamicParameters</span><span class="p">();</span>
                <span class="n">parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"Email"</span><span class="p">,</span> <span class="n">email</span><span class="p">,</span> <span class="n">DbType</span><span class="p">.</span><span class="n">String</span><span class="p">);</span>

                <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">connection</span> <span class="p">=</span> <span class="nf">CreateConnection</span><span class="p">())</span>
                <span class="p">{</span>
                    <span class="k">return</span> <span class="p">(</span><span class="k">await</span> <span class="n">connection</span><span class="p">.</span><span class="n">QueryFirstOrDefaultAsync</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;(</span><span class="n">query</span><span class="p">,</span> <span class="n">parameters</span><span class="p">));</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exp</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">(</span><span class="n">exp</span><span class="p">.</span><span class="n">Message</span><span class="p">,</span> <span class="n">exp</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 7: Now organize Ordering.Application layer</strong></p>

<ul>
  <li>Create CustomerResponse class in Ordering.Application/Response folder</li>
</ul>

<p><strong>CustomerResponse.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Application.Response</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CustomerResponse</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="n">Int64</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">FirstName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">LastName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Email</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">ContactNumber</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Address</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>
<ul>
  <li>Create Create, Edit and Delete customer command in Ordering.Application/Commands folder</li>
</ul>

<p><strong>CreateCustomerCommand.cs</strong></p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Response</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Application.Commands</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CreateCustomerCommand</span> <span class="p">:</span> <span class="n">IRequest</span><span class="p">&lt;</span><span class="n">CustomerResponse</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">FirstName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">LastName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Email</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">ContactNumber</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Address</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="n">DateTime</span> <span class="n">CreatedDate</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="nf">CreateCustomerCommand</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="n">CreatedDate</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>EditCustomerCommand.cs</strong></p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Response</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Application.Commands</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">EditCustomerCommand</span> <span class="p">:</span> <span class="n">IRequest</span><span class="p">&lt;</span><span class="n">CustomerResponse</span><span class="p">&gt;</span>
    <span class="p">{</span>

        <span class="k">public</span> <span class="n">Int64</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">FirstName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">LastName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Email</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">ContactNumber</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Address</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>DeleteCustomerCommand</strong></p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Application.Commands</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">DeleteCustomerCommand</span> <span class="p">:</span> <span class="n">IRequest</span><span class="p">&lt;</span><span class="n">String</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="n">Int64</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="nf">DeleteCustomerCommand</span><span class="p">(</span><span class="n">Int64</span> <span class="n">Id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="n">Id</span> <span class="p">=</span> <span class="n">Id</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create Query class in Ordering.Application/Queries folder</li>
</ul>

<p><strong>GetAllCustomerQuery.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Entities</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Application.Queries</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="n">record</span> <span class="n">GetAllCustomerQuery</span> <span class="p">:</span> <span class="n">IRequest</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;&gt;</span>
    <span class="p">{</span>

    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>GetCustomerByEmailQuery.cs</strong></p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Entities</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Application.Queries</span>
<span class="p">{</span>

    <span class="k">public</span> <span class="k">class</span> <span class="nc">GetCustomerByEmailQuery</span><span class="p">:</span> <span class="n">IRequest</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Email</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        
        <span class="k">public</span> <span class="nf">GetCustomerByEmailQuery</span><span class="p">(</span><span class="kt">string</span> <span class="n">email</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="n">Email</span> <span class="p">=</span> <span class="n">email</span><span class="p">;</span>
        <span class="p">}</span>

    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>GetCustomerByIdQuery.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Entities</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Application.Queries</span>
<span class="p">{</span>

    <span class="k">public</span> <span class="k">class</span> <span class="nc">GetCustomerByIdQuery</span><span class="p">:</span> <span class="n">IRequest</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="n">Int64</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        
        <span class="k">public</span> <span class="nf">GetCustomerByIdQuery</span><span class="p">(</span><span class="n">Int64</span> <span class="n">Id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="n">Id</span> <span class="p">=</span> <span class="n">Id</span><span class="p">;</span>
        <span class="p">}</span>

    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create CustomerMapper and OrderingMappingProfile class in Ordering.Application/Mapper folder</li>
</ul>

<p><strong>CustomerMapper.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">AutoMapper</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Application.Mapper</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CustomerMapper</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">static</span> <span class="k">readonly</span> <span class="n">Lazy</span><span class="p">&lt;</span><span class="n">IMapper</span><span class="p">&gt;</span> <span class="n">Lazy</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Lazy</span><span class="p">&lt;</span><span class="n">IMapper</span><span class="p">&gt;(()=&gt;</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">config</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">MapperConfiguration</span><span class="p">(</span><span class="n">cfg</span> <span class="p">=&gt;</span>
            <span class="p">{</span>
                <span class="n">cfg</span><span class="p">.</span><span class="n">ShouldMapProperty</span> <span class="p">=</span> <span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">GetMethod</span><span class="p">.</span><span class="n">IsPublic</span> <span class="p">||</span> <span class="n">p</span><span class="p">.</span><span class="n">GetMethod</span><span class="p">.</span><span class="n">IsAssembly</span><span class="p">;</span>
                <span class="n">cfg</span><span class="p">.</span><span class="n">AddProfile</span><span class="p">&lt;</span><span class="n">OrderingMappingProfile</span><span class="p">&gt;();</span>
            <span class="p">});</span>

            <span class="kt">var</span> <span class="n">mapper</span> <span class="p">=</span> <span class="n">config</span><span class="p">.</span><span class="nf">CreateMapper</span><span class="p">();</span>
            <span class="k">return</span> <span class="n">mapper</span><span class="p">;</span>
        <span class="p">});</span>

        <span class="k">public</span> <span class="k">static</span> <span class="n">IMapper</span> <span class="n">Mapper</span> <span class="p">=&gt;</span> <span class="n">Lazy</span><span class="p">.</span><span class="n">Value</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p><strong>OrderingMappingProfile.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">AutoMapper</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Commands</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Response</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Entities</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Application.Mapper</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">OrderingMappingProfile</span> <span class="p">:</span> <span class="n">Profile</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">OrderingMappingProfile</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">CreateMap</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">,</span> <span class="n">CustomerResponse</span><span class="p">&gt;().</span><span class="nf">ReverseMap</span><span class="p">();</span>
            <span class="n">CreateMap</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">,</span> <span class="n">CreateCustomerCommand</span><span class="p">&gt;().</span><span class="nf">ReverseMap</span><span class="p">();</span>
            <span class="n">CreateMap</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">,</span> <span class="n">EditCustomerCommand</span><span class="p">&gt;().</span><span class="nf">ReverseMap</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>
<ul>
  <li>Create CommandHandler classes in Ordering.Application/Handlers/CommandHandlers folder</li>
</ul>

<p><strong>CreateCustomerHandler.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Commands</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Mapper</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Response</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Entities</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Repositories.Command</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Threading</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Threading.Tasks</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Application.Handlers.CommandHandler</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CreateCustomerHandler</span> <span class="p">:</span> <span class="n">IRequestHandler</span><span class="p">&lt;</span><span class="n">CreateCustomerCommand</span><span class="p">,</span> <span class="n">CustomerResponse</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">ICustomerCommandRepository</span> <span class="n">_customerCommandRepository</span><span class="p">;</span>
        <span class="k">public</span> <span class="nf">CreateCustomerHandler</span><span class="p">(</span><span class="n">ICustomerCommandRepository</span> <span class="n">customerCommandRepository</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_customerCommandRepository</span> <span class="p">=</span> <span class="n">customerCommandRepository</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">CustomerResponse</span><span class="p">&gt;</span> <span class="nf">Handle</span><span class="p">(</span><span class="n">CreateCustomerCommand</span> <span class="n">request</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">customerEntity</span> <span class="p">=</span> <span class="n">CustomerMapper</span><span class="p">.</span><span class="n">Mapper</span><span class="p">.</span><span class="n">Map</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;(</span><span class="n">request</span><span class="p">);</span>

            <span class="k">if</span><span class="p">(</span><span class="n">customerEntity</span> <span class="k">is</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">ApplicationException</span><span class="p">(</span><span class="s">"There is a problem in mapper"</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="kt">var</span> <span class="n">newCustomer</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_customerCommandRepository</span><span class="p">.</span><span class="nf">AddAsync</span><span class="p">(</span><span class="n">customerEntity</span><span class="p">);</span>
            <span class="kt">var</span> <span class="n">customerResponse</span> <span class="p">=</span> <span class="n">CustomerMapper</span><span class="p">.</span><span class="n">Mapper</span><span class="p">.</span><span class="n">Map</span><span class="p">&lt;</span><span class="n">CustomerResponse</span><span class="p">&gt;(</span><span class="n">newCustomer</span><span class="p">);</span>
            <span class="k">return</span> <span class="n">customerResponse</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>DeleteCustomerHandler.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Commands</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Repositories.Command</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Repositories.Query</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Threading</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Threading.Tasks</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Application.Handlers.CommandHandler</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">DeleteCustomerHandler</span> <span class="p">:</span> <span class="n">IRequestHandler</span><span class="p">&lt;</span><span class="n">DeleteCustomerCommand</span><span class="p">,</span> <span class="n">String</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">ICustomerCommandRepository</span> <span class="n">_customerCommandRepository</span><span class="p">;</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">ICustomerQueryRepository</span> <span class="n">_customerQueryRepository</span><span class="p">;</span>
        <span class="k">public</span> <span class="nf">DeleteCustomerHandler</span><span class="p">(</span><span class="n">ICustomerCommandRepository</span> <span class="n">customerRepository</span><span class="p">,</span> <span class="n">ICustomerQueryRepository</span> <span class="n">customerQueryRepository</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_customerCommandRepository</span> <span class="p">=</span> <span class="n">customerRepository</span><span class="p">;</span>
            <span class="n">_customerQueryRepository</span> <span class="p">=</span> <span class="n">customerQueryRepository</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="nf">Handle</span><span class="p">(</span><span class="n">DeleteCustomerCommand</span> <span class="n">request</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="kt">var</span> <span class="n">customerEntity</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_customerQueryRepository</span><span class="p">.</span><span class="nf">GetByIdAsync</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">Id</span><span class="p">);</span>

                <span class="k">await</span> <span class="n">_customerCommandRepository</span><span class="p">.</span><span class="nf">DeleteAsync</span><span class="p">(</span><span class="n">customerEntity</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">catch</span><span class="p">(</span><span class="n">Exception</span> <span class="n">exp</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="p">(</span><span class="k">new</span> <span class="nf">ApplicationException</span><span class="p">(</span><span class="n">exp</span><span class="p">.</span><span class="n">Message</span><span class="p">));</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="s">"Customer information has been deleted!"</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>EditCustomerHandler.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Commands</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Mapper</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Response</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Entities</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Repositories.Command</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Repositories.Query</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Threading</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Threading.Tasks</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Application.Handlers.CommandHandler</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">EditCustomerHandler</span> <span class="p">:</span> <span class="n">IRequestHandler</span><span class="p">&lt;</span><span class="n">EditCustomerCommand</span><span class="p">,</span> <span class="n">CustomerResponse</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">ICustomerCommandRepository</span> <span class="n">_customerCommandRepository</span><span class="p">;</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">ICustomerQueryRepository</span> <span class="n">_customerQueryRepository</span><span class="p">;</span>
        <span class="k">public</span> <span class="nf">EditCustomerHandler</span><span class="p">(</span><span class="n">ICustomerCommandRepository</span> <span class="n">customerRepository</span><span class="p">,</span> <span class="n">ICustomerQueryRepository</span> <span class="n">customerQueryRepository</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_customerCommandRepository</span> <span class="p">=</span> <span class="n">customerRepository</span><span class="p">;</span>
            <span class="n">_customerQueryRepository</span> <span class="p">=</span> <span class="n">customerQueryRepository</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">CustomerResponse</span><span class="p">&gt;</span> <span class="nf">Handle</span><span class="p">(</span><span class="n">EditCustomerCommand</span> <span class="n">request</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">customerEntity</span> <span class="p">=</span> <span class="n">CustomerMapper</span><span class="p">.</span><span class="n">Mapper</span><span class="p">.</span><span class="n">Map</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;(</span><span class="n">request</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">customerEntity</span> <span class="k">is</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">ApplicationException</span><span class="p">(</span><span class="s">"There is a problem in mapper"</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">await</span> <span class="n">_customerCommandRepository</span><span class="p">.</span><span class="nf">UpdateAsync</span><span class="p">(</span><span class="n">customerEntity</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exp</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">ApplicationException</span><span class="p">(</span><span class="n">exp</span><span class="p">.</span><span class="n">Message</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="kt">var</span> <span class="n">modifiedCustomer</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_customerQueryRepository</span><span class="p">.</span><span class="nf">GetByIdAsync</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">Id</span><span class="p">);</span>
            <span class="kt">var</span> <span class="n">customerResponse</span> <span class="p">=</span> <span class="n">CustomerMapper</span><span class="p">.</span><span class="n">Mapper</span><span class="p">.</span><span class="n">Map</span><span class="p">&lt;</span><span class="n">CustomerResponse</span><span class="p">&gt;(</span><span class="n">modifiedCustomer</span><span class="p">);</span>

            <span class="k">return</span> <span class="n">customerResponse</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create QueryHandler classes in Ordering.Application/Handlers/QueryHandlers folder</li>
</ul>

<p><strong>GetAllCustomerHandler.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Queries</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Entities</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Repositories.Query</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Threading</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Threading.Tasks</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Application.Handlers.QueryHandlers</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">GetAllCustomerHandler</span> <span class="p">:</span> <span class="n">IRequestHandler</span><span class="p">&lt;</span><span class="n">GetAllCustomerQuery</span><span class="p">,</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;&gt;</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">ICustomerQueryRepository</span> <span class="n">_customerQueryRepository</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">GetAllCustomerHandler</span><span class="p">(</span><span class="n">ICustomerQueryRepository</span> <span class="n">customerQueryRepository</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_customerQueryRepository</span> <span class="p">=</span> <span class="n">customerQueryRepository</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;&gt;</span> <span class="nf">Handle</span><span class="p">(</span><span class="n">GetAllCustomerQuery</span> <span class="n">request</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="p">(</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;)</span><span class="k">await</span> <span class="n">_customerQueryRepository</span><span class="p">.</span><span class="nf">GetAllAsync</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>GetCustomerByEmailHandler.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Queries</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Entities</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Linq</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Threading</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Threading.Tasks</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Application.Handlers.QueryHandlers</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">GetCustomerByEmailHandler</span> <span class="p">:</span> <span class="n">IRequestHandler</span><span class="p">&lt;</span><span class="n">GetCustomerByEmailQuery</span><span class="p">,</span> <span class="n">Customer</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IMediator</span> <span class="n">_mediator</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">GetCustomerByEmailHandler</span><span class="p">(</span><span class="n">IMediator</span> <span class="n">mediator</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_mediator</span> <span class="p">=</span> <span class="n">mediator</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="nf">Handle</span><span class="p">(</span><span class="n">GetCustomerByEmailQuery</span> <span class="n">request</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">customers</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_mediator</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="k">new</span> <span class="nf">GetAllCustomerQuery</span><span class="p">());</span>
            <span class="kt">var</span> <span class="n">selectedCustomer</span> <span class="p">=</span> <span class="n">customers</span><span class="p">.</span><span class="nf">FirstOrDefault</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Email</span><span class="p">.</span><span class="nf">ToLower</span><span class="p">().</span><span class="nf">Contains</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">Email</span><span class="p">.</span><span class="nf">ToLower</span><span class="p">()));</span>
            <span class="k">return</span> <span class="n">selectedCustomer</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>GetCustomerByIdHandler.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Queries</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Entities</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Linq</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Threading</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Threading.Tasks</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.Application.Handlers.QueryHandlers</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">GetCustomerByIdHandler</span> <span class="p">:</span> <span class="n">IRequestHandler</span><span class="p">&lt;</span><span class="n">GetCustomerByIdQuery</span><span class="p">,</span> <span class="n">Customer</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IMediator</span> <span class="n">_mediator</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">GetCustomerByIdHandler</span><span class="p">(</span><span class="n">IMediator</span> <span class="n">mediator</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_mediator</span> <span class="p">=</span> <span class="n">mediator</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="nf">Handle</span><span class="p">(</span><span class="n">GetCustomerByIdQuery</span> <span class="n">request</span><span class="p">,</span> <span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">customers</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_mediator</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="k">new</span> <span class="nf">GetAllCustomerQuery</span><span class="p">());</span>
            <span class="kt">var</span> <span class="n">selectedCustomer</span> <span class="p">=</span> <span class="n">customers</span><span class="p">.</span><span class="nf">FirstOrDefault</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">request</span><span class="p">.</span><span class="n">Id</span><span class="p">);</span>
            <span class="k">return</span> <span class="n">selectedCustomer</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 8: Orgnaize Ordering.API project. This is an web api project.</strong></p>

<ul>
  <li>Create CustomerController in Ordering.API/Controllers folder</li>
</ul>

<p><strong>CustomerController.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Http</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Commands</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Queries</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Response</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Entities</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Threading.Tasks</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.API.Controllers</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
    <span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CustomerController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IMediator</span> <span class="n">_mediator</span><span class="p">;</span>
        <span class="k">public</span> <span class="nf">CustomerController</span><span class="p">(</span><span class="n">IMediator</span> <span class="n">mediator</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_mediator</span> <span class="p">=</span> <span class="n">mediator</span><span class="p">;</span>
        <span class="p">}</span>


        <span class="p">[</span><span class="n">HttpGet</span><span class="p">]</span>
        <span class="p">[</span><span class="nf">ProducesResponseType</span><span class="p">(</span><span class="n">StatusCodes</span><span class="p">.</span><span class="n">Status200OK</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;&gt;</span> <span class="nf">Get</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_mediator</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="k">new</span> <span class="nf">GetAllCustomerQuery</span><span class="p">());</span>
        <span class="p">}</span>

        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="p">[</span><span class="nf">ProducesResponseType</span><span class="p">(</span><span class="n">StatusCodes</span><span class="p">.</span><span class="n">Status200OK</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="nf">Get</span><span class="p">(</span><span class="n">Int64</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_mediator</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="k">new</span> <span class="nf">GetCustomerByIdQuery</span><span class="p">(</span><span class="n">id</span><span class="p">));</span>
        <span class="p">}</span>

        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"email"</span><span class="p">)]</span>
        <span class="p">[</span><span class="nf">ProducesResponseType</span><span class="p">(</span><span class="n">StatusCodes</span><span class="p">.</span><span class="n">Status200OK</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="nf">GetByEmail</span><span class="p">(</span><span class="kt">string</span> <span class="n">email</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_mediator</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="k">new</span> <span class="nf">GetCustomerByEmailQuery</span><span class="p">(</span><span class="n">email</span><span class="p">));</span>
        <span class="p">}</span>

        <span class="p">[</span><span class="n">HttpPost</span><span class="p">]</span>
        <span class="p">[</span><span class="nf">ProducesResponseType</span><span class="p">(</span><span class="n">StatusCodes</span><span class="p">.</span><span class="n">Status200OK</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">CustomerResponse</span><span class="p">&gt;&gt;</span> <span class="nf">CreateCustomer</span><span class="p">([</span><span class="n">FromBody</span><span class="p">]</span> <span class="n">CreateCustomerCommand</span> <span class="n">command</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_mediator</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="n">command</span><span class="p">);</span>
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
        <span class="p">}</span>


        <span class="p">[</span><span class="nf">HttpPut</span><span class="p">(</span><span class="s">"EditCustomer/{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&gt;</span> <span class="nf">EditCustomer</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="p">[</span><span class="n">FromBody</span><span class="p">]</span> <span class="n">EditCustomerCommand</span> <span class="n">command</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">command</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">id</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_mediator</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="n">command</span><span class="p">);</span>
                    <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
                <span class="p">}</span>
                <span class="k">else</span>
                <span class="p">{</span>
                    <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exp</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">(</span><span class="n">exp</span><span class="p">.</span><span class="n">Message</span><span class="p">);</span>
            <span class="p">}</span>


        <span class="p">}</span>

        <span class="p">[</span><span class="nf">HttpDelete</span><span class="p">(</span><span class="s">"DeleteCustomer/{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&gt;</span> <span class="nf">DeleteCustomer</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="kt">string</span> <span class="n">result</span> <span class="p">=</span> <span class="kt">string</span><span class="p">.</span><span class="n">Empty</span><span class="p">;</span>
                <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_mediator</span><span class="p">.</span><span class="nf">Send</span><span class="p">(</span><span class="k">new</span> <span class="nf">DeleteCustomerCommand</span><span class="p">(</span><span class="n">id</span><span class="p">));</span>
                <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exp</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">(</span><span class="n">exp</span><span class="p">.</span><span class="n">Message</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>

    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Set connection string in appsettings.json file. I have used here SQLite database for simplicity.</li>
</ul>

<p><strong>appsettings.json</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"Logging"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"LogLevel"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Default"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Information"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Microsoft"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Warning"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Microsoft.Hosting.Lifetime"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Information"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"ConnectionStrings"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"DefaultConnection"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Data Source=db/ordering.db"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"AllowedHosts"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*"</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<ul>
  <li>Modify configure connection string and register concrete class in Startup class as follows.</li>
</ul>

<p><strong>Startup.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">MediatR</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Builder</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Hosting</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Extensions.Configuration</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Extensions.DependencyInjection</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Extensions.Hosting</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.OpenApi.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Application.Handlers.CommandHandler</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Repositories.Command.Base</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Repositories.Query</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Core.Repositories.Query.Base</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Infrastructure.Data</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Infrastructure.Repository.Command</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Infrastructure.Repository.Command.Base</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Infrastructure.Repository.Query</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.Infrastructure.Repository.Query.Base</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Reflection</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.API</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Startup</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">Startup</span><span class="p">(</span><span class="n">IConfiguration</span> <span class="n">configuration</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Configuration</span> <span class="p">=</span> <span class="n">configuration</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">IConfiguration</span> <span class="n">Configuration</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">// This method gets called by the runtime. Use this method to add services to the container.</span>
        <span class="k">public</span> <span class="k">void</span> <span class="nf">ConfigureServices</span><span class="p">(</span><span class="n">IServiceCollection</span> <span class="n">services</span><span class="p">)</span>
        <span class="p">{</span>


            <span class="n">services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">();</span>

            <span class="c1">// Configure for Sqlite</span>
            <span class="n">services</span><span class="p">.</span><span class="n">AddDbContext</span><span class="p">&lt;</span><span class="n">OrderingContext</span><span class="p">&gt;(</span><span class="n">options</span> <span class="p">=&gt;</span> <span class="n">options</span><span class="p">.</span><span class="nf">UseSqlite</span><span class="p">(</span><span class="n">Configuration</span><span class="p">.</span><span class="nf">GetConnectionString</span><span class="p">(</span><span class="s">"DefaultConnection"</span><span class="p">)));</span>

            <span class="n">services</span><span class="p">.</span><span class="nf">AddSwaggerGen</span><span class="p">(</span><span class="n">c</span> <span class="p">=&gt;</span>
            <span class="p">{</span>
                <span class="n">c</span><span class="p">.</span><span class="nf">SwaggerDoc</span><span class="p">(</span><span class="s">"v1"</span><span class="p">,</span> <span class="k">new</span> <span class="n">OpenApiInfo</span> <span class="p">{</span> <span class="n">Title</span> <span class="p">=</span> <span class="s">"Ordering.API"</span><span class="p">,</span> <span class="n">Version</span> <span class="p">=</span> <span class="s">"v1"</span> <span class="p">});</span>
            <span class="p">});</span>

            <span class="c1">// Register dependencies</span>
            <span class="n">services</span><span class="p">.</span><span class="nf">AddAutoMapper</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">Startup</span><span class="p">));</span>
            <span class="n">services</span><span class="p">.</span><span class="nf">AddMediatR</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">CreateCustomerHandler</span><span class="p">).</span><span class="nf">GetTypeInfo</span><span class="p">().</span><span class="n">Assembly</span><span class="p">);</span>
            <span class="n">services</span><span class="p">.</span><span class="nf">AddScoped</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">IQueryRepository</span><span class="p">&lt;&gt;),</span> <span class="k">typeof</span><span class="p">(</span><span class="n">QueryRepository</span><span class="p">&lt;&gt;));</span>
            <span class="n">services</span><span class="p">.</span><span class="n">AddTransient</span><span class="p">&lt;</span><span class="n">ICustomerQueryRepository</span><span class="p">,</span> <span class="n">CustomerQueryRepository</span><span class="p">&gt;();</span>
            <span class="n">services</span><span class="p">.</span><span class="nf">AddScoped</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">ICommandRepository</span><span class="p">&lt;&gt;),</span> <span class="k">typeof</span><span class="p">(</span><span class="n">CommandRepository</span><span class="p">&lt;&gt;));</span>
            <span class="n">services</span><span class="p">.</span><span class="n">AddTransient</span><span class="p">&lt;</span><span class="n">Core</span><span class="p">.</span><span class="n">Repositories</span><span class="p">.</span><span class="n">Command</span><span class="p">.</span><span class="n">ICustomerCommandRepository</span><span class="p">,</span> <span class="n">CustomerCommandRepository</span><span class="p">&gt;();</span>

        <span class="p">}</span>

        <span class="c1">// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.</span>
        <span class="k">public</span> <span class="k">void</span> <span class="nf">Configure</span><span class="p">(</span><span class="n">IApplicationBuilder</span> <span class="n">app</span><span class="p">,</span> <span class="n">IWebHostEnvironment</span> <span class="n">env</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">env</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
            <span class="p">{</span>
                <span class="n">app</span><span class="p">.</span><span class="nf">UseDeveloperExceptionPage</span><span class="p">();</span>
                <span class="n">app</span><span class="p">.</span><span class="nf">UseSwagger</span><span class="p">();</span>
                <span class="n">app</span><span class="p">.</span><span class="nf">UseSwaggerUI</span><span class="p">(</span><span class="n">c</span> <span class="p">=&gt;</span> <span class="n">c</span><span class="p">.</span><span class="nf">SwaggerEndpoint</span><span class="p">(</span><span class="s">"/swagger/v1/swagger.json"</span><span class="p">,</span> <span class="s">"Ordering.API v1"</span><span class="p">));</span>
            <span class="p">}</span>

            <span class="n">app</span><span class="p">.</span><span class="nf">UseHttpsRedirection</span><span class="p">();</span>

            <span class="n">app</span><span class="p">.</span><span class="nf">UseRouting</span><span class="p">();</span>

            <span class="n">app</span><span class="p">.</span><span class="nf">UseAuthorization</span><span class="p">();</span>

            <span class="n">app</span><span class="p">.</span><span class="nf">UseEndpoints</span><span class="p">(</span><span class="n">endpoints</span> <span class="p">=&gt;</span>
            <span class="p">{</span>
                <span class="n">endpoints</span><span class="p">.</span><span class="nf">MapControllers</span><span class="p">();</span>
            <span class="p">});</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 9: Run migration command on package manager console</strong></p>

<ul>
  <li>In package manager console select Oredering.Infrastructure as defult project.</li>
  <li>Run the following command</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Add-Migration</span> <span class="nf">initialsqlmig</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Update-Database</span> <span class="nf">-Verbose</span>
</code></pre></div></div>

<p><strong>Step 10: Now run your application and test using swagger. The overall solution structure is look like as following.</strong></p>

<p><img src="/assets/images/posts/2021/fullsolution.png" alt="" /></p>

<p><strong><a href="https://github.com/mahedee/code-sample02/tree/main/CleanArchitectureDemo/Ecommerce">Source code</a></strong></p>]]></content><author><name>Mahedee Hasan</name></author><category term="Design Pattern" /><category term="Software Architecture" /><category term="Microservices" /><category term="Web API" /><category term="ASP.NET Core" /><category term="C#" /><category term="Dapper" /><category term="EF" /><category term="ORM" /><category term="designpattern" /><category term="softwarearchitecture" /><category term="microservices" /><category term="webapi" /><category term="aspnetcore" /><category term="csharp" /><category term="ef" /><category term="dapper" /><category term="orm" /><category term="cleanarchitecture" /><category term="cqrs" /><summary type="html"><![CDATA[Clean architecute was created by Robert C. Martin known as Uncle Bob. It's now mostly used software architecute especially in microservice architecture. In this article I will discuss about clean architecute a bit and then implement the concept using clean architecture and CQRS pattern using asp.net core, entity framework core and dapper.]]></summary></entry><entry><title type="html">Integrate logging in a asp.net core application using Serilog and Seq</title><link href="https://mahedee.net//integrate-logging-in-a-asp.net-core-application-using-serilog-and-seq/" rel="alternate" type="text/html" title="Integrate logging in a asp.net core application using Serilog and Seq" /><published>2021-09-22T00:00:00+00:00</published><updated>2021-09-22T00:00:00+00:00</updated><id>https://mahedee.net//integrate-logging-in-a-asp.net-core-application-using-serilog-and-seq</id><content type="html" xml:base="https://mahedee.net//integrate-logging-in-a-asp.net-core-application-using-serilog-and-seq/"><![CDATA[<!-- ## Create a sentiment analysis app using ML.NET -->

<p><strong>Overview</strong><br />
Serilog is a newer logging framework for .NET and now has been the most used and preferred framework for .NET Application. Seq is the intelligent search, analysis, and alerting server built specifically for modern structured log data. Here I will show you a how to integrate serilog and seq in a simple asp.net core application.</p>

<p><strong>Tools and Technology used</strong> 
The following tools and technologies has been used for this application</p>
<ul>
  <li>Visual Studio 2019</li>
  <li>Visual C#</li>
  <li>ASP.NET Core Web API</li>
  <li>.NET Framework 5.0</li>
  <li>Serilog</li>
  <li>Seq</li>
</ul>

<p><strong>Step 1: Create a asp.net core web api project</strong></p>
<ul>
  <li>Create a new project using visual studio 2019</li>
  <li>Choose the C# ASP.NET Web API (.NET Core) project template</li>
  <li>Create a web api project name - “Catalog.API”</li>
</ul>

<p><strong>For Cosole Logging</strong></p>

<p><strong>Step 2: Install nuget package Serilog.Asp.NetCore</strong></p>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">Install-Package</span> <span class="nf">Serilog.AspNetCore</span>
</code></pre></div></div>

<p><strong>Step 3: Enable console logging</strong></p>

<p>Modify Program.cs as follows</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Hosting</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Extensions.Hosting</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Serilog</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Catalog.API</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Program</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Log</span><span class="p">.</span><span class="n">Logger</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">LoggerConfiguration</span><span class="p">()</span>
                <span class="p">.</span><span class="n">Enrich</span><span class="p">.</span><span class="nf">FromLogContext</span><span class="p">()</span> <span class="c1">// To get some key information like user id/request id </span>
                <span class="p">.</span><span class="n">WriteTo</span><span class="p">.</span><span class="nf">Console</span><span class="p">()</span>
                <span class="p">.</span><span class="nf">CreateLogger</span><span class="p">();</span>

            <span class="nf">CreateHostBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">).</span><span class="nf">Build</span><span class="p">().</span><span class="nf">Run</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">static</span> <span class="n">IHostBuilder</span> <span class="nf">CreateHostBuilder</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span> <span class="p">=&gt;</span>
            <span class="n">Host</span><span class="p">.</span><span class="nf">CreateDefaultBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">UseSerilog</span><span class="p">()</span>
                <span class="p">.</span><span class="nf">ConfigureWebHostDefaults</span><span class="p">(</span><span class="n">webBuilder</span> <span class="p">=&gt;</span>
                <span class="p">{</span>
                    <span class="n">webBuilder</span><span class="p">.</span><span class="n">UseStartup</span><span class="p">&lt;</span><span class="n">Startup</span><span class="p">&gt;();</span>
                <span class="p">});</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 4: Modify appsettings.json</strong><br />
Modify appsettings.json as follows, if required.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">  
  </span><span class="nl">"AllowedHosts"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*"</span><span class="w">  
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>
<p><strong>Step 5: Add logging information in WeatherForecastController</strong> <br />
Modify default WeatherForecastController as follows for logging</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Extensions.Logging</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Linq</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Catalog.API.Controllers</span>
<span class="p">{</span>
    <span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"[controller]"</span><span class="p">)]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">WeatherForecastController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">static</span> <span class="k">readonly</span> <span class="kt">string</span><span class="p">[]</span> <span class="n">Summaries</span> <span class="p">=</span> <span class="k">new</span><span class="p">[]</span>
        <span class="p">{</span>
            <span class="s">"Freezing"</span><span class="p">,</span> <span class="s">"Bracing"</span><span class="p">,</span> <span class="s">"Chilly"</span><span class="p">,</span> <span class="s">"Cool"</span><span class="p">,</span> <span class="s">"Mild"</span><span class="p">,</span> <span class="s">"Warm"</span><span class="p">,</span> <span class="s">"Balmy"</span><span class="p">,</span> <span class="s">"Hot"</span><span class="p">,</span> <span class="s">"Sweltering"</span><span class="p">,</span> <span class="s">"Scorching"</span>
        <span class="p">};</span>

        <span class="k">private</span> <span class="k">readonly</span> <span class="n">ILogger</span><span class="p">&lt;</span><span class="n">WeatherForecastController</span><span class="p">&gt;</span> <span class="n">_logger</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">WeatherForecastController</span><span class="p">(</span><span class="n">ILogger</span><span class="p">&lt;</span><span class="n">WeatherForecastController</span><span class="p">&gt;</span> <span class="n">logger</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_logger</span> <span class="p">=</span> <span class="n">logger</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="p">[</span><span class="n">HttpGet</span><span class="p">]</span>
        <span class="k">public</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">WeatherForecast</span><span class="p">&gt;</span> <span class="nf">Get</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">_logger</span><span class="p">.</span><span class="nf">LogInformation</span><span class="p">(</span><span class="s">"HTTP GET: Called get method of WeatherForecast contorller"</span><span class="p">);</span>
            <span class="kt">var</span> <span class="n">rng</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Random</span><span class="p">();</span>
            <span class="k">return</span> <span class="n">Enumerable</span><span class="p">.</span><span class="nf">Range</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">5</span><span class="p">).</span><span class="nf">Select</span><span class="p">(</span><span class="n">index</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="n">WeatherForecast</span>
            <span class="p">{</span>
                <span class="n">Date</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">.</span><span class="nf">AddDays</span><span class="p">(</span><span class="n">index</span><span class="p">),</span>
                <span class="n">TemperatureC</span> <span class="p">=</span> <span class="n">rng</span><span class="p">.</span><span class="nf">Next</span><span class="p">(-</span><span class="m">20</span><span class="p">,</span> <span class="m">55</span><span class="p">),</span>
                <span class="n">Summary</span> <span class="p">=</span> <span class="n">Summaries</span><span class="p">[</span><span class="n">rng</span><span class="p">.</span><span class="nf">Next</span><span class="p">(</span><span class="n">Summaries</span><span class="p">.</span><span class="n">Length</span><span class="p">)]</span>
            <span class="p">})</span>
            <span class="p">.</span><span class="nf">ToArray</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 6: Run your application to see the log</strong></p>
<ul>
  <li>Run the application (not in iis express)</li>
  <li>You will see the log in console window.</li>
</ul>

<p>Note:  If you want to change the output format to JSON. Just change</p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">.</span><span class="n">WriteTo</span><span class="p">.</span><span class="nf">Console</span><span class="p">(</span><span class="k">new</span> <span class="nf">RenderedCompactJsonFormatter</span><span class="p">())</span>  
</code></pre></div></div>

<p><strong>File Logging</strong></p>

<p><strong>Step 7: Install Package Serilog.Sinks.File</strong></p>
<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Serilog.Sinks.File</span>
</code></pre></div></div>

<p><strong>Step 8: Modify Main method of Program class as follows</strong>
<strong>Program.cs</strong></p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Hosting</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Extensions.Hosting</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Serilog</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Serilog.Formatting.Compact</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Catalog.API</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Program</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Log</span><span class="p">.</span><span class="n">Logger</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">LoggerConfiguration</span><span class="p">()</span>
                <span class="p">.</span><span class="n">Enrich</span><span class="p">.</span><span class="nf">FromLogContext</span><span class="p">()</span> <span class="c1">// To get some key information like user id/request id </span>
                <span class="p">.</span><span class="n">WriteTo</span><span class="p">.</span><span class="nf">Console</span><span class="p">(</span><span class="k">new</span> <span class="nf">RenderedCompactJsonFormatter</span><span class="p">())</span>
                <span class="p">.</span><span class="n">WriteTo</span><span class="p">.</span><span class="nf">Debug</span><span class="p">(</span><span class="n">outputTemplate</span><span class="p">:</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">.</span><span class="nf">ToString</span><span class="p">())</span>
                <span class="p">.</span><span class="n">WriteTo</span><span class="p">.</span><span class="nf">File</span><span class="p">(</span><span class="s">"catalogLog.txt"</span><span class="p">,</span> <span class="n">rollingInterval</span><span class="p">:</span> <span class="n">RollingInterval</span><span class="p">.</span><span class="n">Day</span><span class="p">)</span>
                <span class="p">.</span><span class="nf">CreateLogger</span><span class="p">();</span>

            <span class="nf">CreateHostBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">).</span><span class="nf">Build</span><span class="p">().</span><span class="nf">Run</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">static</span> <span class="n">IHostBuilder</span> <span class="nf">CreateHostBuilder</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span> <span class="p">=&gt;</span>
            <span class="n">Host</span><span class="p">.</span><span class="nf">CreateDefaultBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">UseSerilog</span><span class="p">()</span>
                <span class="p">.</span><span class="nf">ConfigureWebHostDefaults</span><span class="p">(</span><span class="n">webBuilder</span> <span class="p">=&gt;</span>
                <span class="p">{</span>
                    <span class="n">webBuilder</span><span class="p">.</span><span class="n">UseStartup</span><span class="p">&lt;</span><span class="n">Startup</span><span class="p">&gt;();</span>
                <span class="p">});</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 9: Run your application to see the log in file</strong></p>
<ul>
  <li>Run the application (not in iis express)</li>
  <li>You will see the log in file name catalogLogYYYYMMDD.txt in the root folder</li>
</ul>

<p><strong>View log in Seq</strong><br />
<strong>Step 10: Run docker image for Seq</strong></p>
<ul>
  <li>Start docker in your machine</li>
  <li>Run the following command to pull and run Seq in docker</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">docker</span> <span class="nf">pull</span> <span class="nf">datalust</span><span class="nv">/seq</span>
<span class="nf">docker</span> <span class="nb">run</span> <span class="nf">--name</span> <span class="nf">seq</span> <span class="nf">-d</span> <span class="nf">--restart</span> <span class="nf">unless-stopped</span> <span class="nf">-e</span> <span class="nf">ACCEPT_EULA=Y</span> <span class="nf">-p</span> <span class="nf">6171:80</span> <span class="nf">datalust</span><span class="nv">/seq:latest</span>
</code></pre></div></div>

<ul>
  <li>Browse http://localhost:6171/ to see Seq is running or not</li>
</ul>

<p><strong>_Step 11: Install Serilog.Sinks.Seq</strong></p>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Install-Package</span> <span class="nf">Serilog.Sinks.Seq</span>  
</code></pre></div></div>

<p><strong>Step 12: Configure Seq</strong><br />
 Now configure Seq end point in Program class as follows</p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Hosting</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Extensions.Hosting</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Serilog</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Serilog.Formatting.Compact</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Catalog.API</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Program</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Log</span><span class="p">.</span><span class="n">Logger</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">LoggerConfiguration</span><span class="p">()</span>
                <span class="p">.</span><span class="n">Enrich</span><span class="p">.</span><span class="nf">FromLogContext</span><span class="p">()</span> <span class="c1">// To get some key information like user id/request id </span>
                <span class="p">.</span><span class="n">WriteTo</span><span class="p">.</span><span class="nf">Console</span><span class="p">(</span><span class="k">new</span> <span class="nf">RenderedCompactJsonFormatter</span><span class="p">())</span>
                <span class="p">.</span><span class="n">WriteTo</span><span class="p">.</span><span class="nf">Debug</span><span class="p">(</span><span class="n">outputTemplate</span><span class="p">:</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">.</span><span class="nf">ToString</span><span class="p">())</span>
                <span class="p">.</span><span class="n">WriteTo</span><span class="p">.</span><span class="nf">File</span><span class="p">(</span><span class="s">"catalogLog.txt"</span><span class="p">,</span> <span class="n">rollingInterval</span><span class="p">:</span> <span class="n">RollingInterval</span><span class="p">.</span><span class="n">Day</span><span class="p">)</span>
                <span class="p">.</span><span class="n">WriteTo</span><span class="p">.</span><span class="nf">Seq</span><span class="p">(</span><span class="s">"http://localhost:6171/"</span><span class="p">)</span>
                <span class="p">.</span><span class="nf">CreateLogger</span><span class="p">();</span>

            <span class="nf">CreateHostBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">).</span><span class="nf">Build</span><span class="p">().</span><span class="nf">Run</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">static</span> <span class="n">IHostBuilder</span> <span class="nf">CreateHostBuilder</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span> <span class="p">=&gt;</span>
            <span class="n">Host</span><span class="p">.</span><span class="nf">CreateDefaultBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">UseSerilog</span><span class="p">()</span>
                <span class="p">.</span><span class="nf">ConfigureWebHostDefaults</span><span class="p">(</span><span class="n">webBuilder</span> <span class="p">=&gt;</span>
                <span class="p">{</span>
                    <span class="n">webBuilder</span><span class="p">.</span><span class="n">UseStartup</span><span class="p">&lt;</span><span class="n">Startup</span><span class="p">&gt;();</span>
                <span class="p">});</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 13: Run your application to see the log in Seq</strong></p>

<ul>
  <li>Run the application (not in iis express)</li>
  <li>Browse http://localhost:6171/#/events</li>
  <li>You will see the log in Seq.</li>
</ul>

<p><strong>Details logging</strong></p>

<p><strong>Step 14: Add a model class name CatalogItem in Model folder</strong></p>

<p><strong>CatalogItem.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">Catalog.API.Model</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CatalogItem</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">string</span> <span class="n">Description</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">decimal</span> <span class="n">Price</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">// Quantity in stock</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">AvailableStock</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">// Available stock at which we should reorder</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">RestockThreshold</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 15: Add a Controller class name CatalogContoller</strong> 
<strong>CatalogController.cs</strong></p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Catalog.API.Model</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Extensions.Logging</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Linq</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Text</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Catalog.API.Controllers</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
    <span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CatalogController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">ILogger</span><span class="p">&lt;</span><span class="n">CatalogController</span><span class="p">&gt;</span> <span class="n">_logger</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">CatalogController</span><span class="p">(</span><span class="n">ILogger</span><span class="p">&lt;</span><span class="n">CatalogController</span><span class="p">&gt;</span> <span class="n">logger</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_logger</span> <span class="p">=</span> <span class="n">logger</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="c1">//GET api/&lt;CatalogController&gt;/1/110</span>
        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"{catalogId}/{quantity}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="nf">GetItem</span><span class="p">(</span><span class="kt">int</span> <span class="n">catalogId</span><span class="p">,</span> <span class="kt">int</span> <span class="n">quantity</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="n">CatalogItem</span> <span class="n">item</span> <span class="p">=</span> <span class="nf">GetItems</span><span class="p">(</span><span class="n">catalogId</span><span class="p">);</span>

                <span class="k">if</span> <span class="p">(</span><span class="n">item</span><span class="p">.</span><span class="n">AvailableStock</span> <span class="p">&lt;</span> <span class="n">quantity</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="n">_logger</span><span class="p">.</span><span class="nf">LogInformation</span><span class="p">(</span><span class="s">"Stock quantity {0} is lower than requested quantity {1}"</span><span class="p">,</span> <span class="n">item</span><span class="p">.</span><span class="n">AvailableStock</span><span class="p">,</span> <span class="n">quantity</span><span class="p">);</span>
                    <span class="k">return</span> <span class="s">"Stock quantity is lower than requested quantity."</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">catch</span><span class="p">(</span><span class="n">Exception</span> <span class="n">exp</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="kt">var</span> <span class="n">logMsg</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">StringBuilder</span><span class="p">();</span>
                <span class="n">logMsg</span><span class="p">.</span><span class="nf">AppendLine</span><span class="p">(</span><span class="s">$"Error message:</span><span class="p">{</span><span class="n">exp</span><span class="p">.</span><span class="n">Message</span><span class="p">}</span><span class="s">"</span><span class="p">);</span>
                <span class="n">logMsg</span><span class="p">.</span><span class="nf">AppendLine</span><span class="p">(</span><span class="s">$"Error stack trace:</span><span class="p">{</span><span class="n">exp</span><span class="p">.</span><span class="n">StackTrace</span><span class="p">}</span><span class="s">"</span><span class="p">);</span>
                <span class="n">_logger</span><span class="p">.</span><span class="nf">LogError</span><span class="p">(</span><span class="n">logMsg</span><span class="p">.</span><span class="nf">ToString</span><span class="p">());</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="s">"Your order has been submitted"</span><span class="p">;</span>
        <span class="p">}</span>


        <span class="k">private</span> <span class="n">CatalogItem</span> <span class="nf">GetItems</span><span class="p">(</span><span class="kt">int</span> <span class="n">catalogId</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">List</span><span class="p">&lt;</span><span class="n">CatalogItem</span><span class="p">&gt;</span> <span class="n">catalogRepository</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">CatalogItem</span><span class="p">&gt;();</span>
            <span class="n">catalogRepository</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="n">CatalogItem</span> <span class="p">{</span> <span class="n">Id</span> <span class="p">=</span> <span class="m">1</span><span class="p">,</span> <span class="n">Name</span> <span class="p">=</span> <span class="s">"Asus ZenBook"</span><span class="p">,</span> <span class="n">Price</span> <span class="p">=</span> <span class="m">150000</span><span class="p">,</span> <span class="n">AvailableStock</span> <span class="p">=</span> <span class="m">25</span><span class="p">,</span> <span class="n">RestockThreshold</span> <span class="p">=</span> <span class="m">5</span> <span class="p">});</span>
            <span class="n">catalogRepository</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="n">CatalogItem</span> <span class="p">{</span> <span class="n">Id</span> <span class="p">=</span> <span class="m">2</span><span class="p">,</span> <span class="n">Name</span> <span class="p">=</span> <span class="s">"Dell 4345"</span><span class="p">,</span> <span class="n">Price</span> <span class="p">=</span> <span class="m">110000</span><span class="p">,</span> <span class="n">AvailableStock</span> <span class="p">=</span> <span class="m">25</span><span class="p">,</span> <span class="n">RestockThreshold</span> <span class="p">=</span> <span class="m">5</span> <span class="p">});</span>
            <span class="n">catalogRepository</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="n">CatalogItem</span> <span class="p">{</span> <span class="n">Id</span> <span class="p">=</span> <span class="m">3</span><span class="p">,</span> <span class="n">Name</span> <span class="p">=</span> <span class="s">"Lenovo ThinkPad"</span><span class="p">,</span> <span class="n">Price</span> <span class="p">=</span> <span class="m">180000</span><span class="p">,</span> <span class="n">AvailableStock</span> <span class="p">=</span> <span class="m">25</span><span class="p">,</span> <span class="n">RestockThreshold</span> <span class="p">=</span> <span class="m">5</span> <span class="p">});</span>
            <span class="n">catalogRepository</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="n">CatalogItem</span> <span class="p">{</span> <span class="n">Id</span> <span class="p">=</span> <span class="m">4</span><span class="p">,</span> <span class="n">Name</span> <span class="p">=</span> <span class="s">"Microsoft Surface"</span><span class="p">,</span> <span class="n">Price</span> <span class="p">=</span> <span class="m">250000</span><span class="p">,</span> <span class="n">AvailableStock</span> <span class="p">=</span> <span class="m">25</span><span class="p">,</span> <span class="n">RestockThreshold</span> <span class="p">=</span> <span class="m">5</span> <span class="p">});</span>

            <span class="n">CatalogItem</span> <span class="n">item</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">CatalogItem</span><span class="p">();</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="n">item</span> <span class="p">=</span> <span class="n">catalogRepository</span><span class="p">.</span><span class="nf">Where</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">catalogId</span><span class="p">).</span><span class="nf">FirstOrDefault</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">catch</span><span class="p">(</span><span class="n">Exception</span> <span class="n">exp</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">(</span><span class="n">exp</span><span class="p">.</span><span class="n">Message</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="n">item</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 16: Again run your application to see the log in Seq</strong></p>
<ul>
  <li>Run the application (not in iis express)</li>
  <li>Browse your application as http://localhost:5000/api/Catalog/1/110</li>
  <li>Browse Seq http://localhost:6171/#/events</li>
  <li>You will see the log in Seq.</li>
  <li>Now cheers</li>
</ul>

<p><strong><a href="https://github.com/mahedee/code-sample/tree/master/SerilogSeqDemo">Source Code</a></strong></p>]]></content><author><name>Mahedee Hasan</name></author><category term="ASP.NET" /><category term="ASP.NET Core" /><category term="C#" /><category term="Serilog" /><category term="Seq" /><category term="Logging" /><category term="aspnet" /><category term="aspnetcore" /><category term="csharp" /><category term="serilog" /><category term="seq" /><category term="Logging" /><summary type="html"><![CDATA[Serilog is a newer logging framework for .NET and now has been the most used and preferred framework for .NET Application. Seq is the intelligent search, analysis, and alerting server built specifically for modern structured log data. Here I will show you a how to integrate serilog and seq in a simple asp.net core application.]]></summary></entry><entry><title type="html">Uses of Configuration Provider and Options Pattern in ASP.NET Core</title><link href="https://mahedee.net//uses-of-configuration-provider-and-options-pattern-in-asp.net-core/" rel="alternate" type="text/html" title="Uses of Configuration Provider and Options Pattern in ASP.NET Core" /><published>2021-08-05T00:00:00+00:00</published><updated>2021-08-05T00:00:00+00:00</updated><id>https://mahedee.net//uses-of-configuration-provider-and-options-pattern-in-asp.net-core</id><content type="html" xml:base="https://mahedee.net//uses-of-configuration-provider-and-options-pattern-in-asp.net-core/"><![CDATA[<!-- ## Create a sentiment analysis app using ML.NET -->

<p><strong>Application overview</strong><br />
In ASP.NET core, we often use application settings from different configuration files and load to a some files. Application settings can be in the appsettings.json or docker-compose.yml or .env or any other configuration file. We can use IOptions<T> to read these settings using C#. Here is a sample code to retrieve application setting from appsettings.json, docker-compose.yml and .env file.</T></p>

<p><strong>Tools and Technology used</strong> 
The following tools and technologies has been used for this application</p>
<ul>
  <li>Visual Studio 2019</li>
  <li>Visual C#</li>
  <li>ASP.NET Core Web API</li>
  <li>.NET Framework 5.0</li>
</ul>

<p><strong>Step 1: Create a asp.net core web api project</strong></p>
<ul>
  <li>Create a new project using visual studio 2019</li>
  <li>Choose the C# ASP.NET Web API (.NET Core) project template</li>
  <li>Create a web api project name - “Catalog.API”</li>
</ul>

<p><strong>Step 2: Add docker and docker compose file</strong></p>
<ul>
  <li>Click right button on project -&gt; Add Docker Support -&gt; Linux</li>
  <li>Click right button on project -&gt; Container Orchestrator Support -&gt; Linux</li>
</ul>

<p><strong>Step 3: Modify appsettings.json</strong></p>
<ul>
  <li>Modify appsettings.json as follows</li>
</ul>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"Logging"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"LogLevel"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Default"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Information"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Microsoft"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Warning"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Microsoft.Hosting.Lifetime"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Information"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">

  </span><span class="nl">"ConnectionString"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Server=(localdb)</span><span class="se">\\</span><span class="s2">mssqllocaldb;Database=CatalogDB;Trusted_Connection=True;MultipleActiveResultSets=true"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"ServiceName"</span><span class="w"> </span><span class="p">:</span><span class="w">  </span><span class="s2">"Catalog.API"</span><span class="p">,</span><span class="w">
  </span><span class="err">//</span><span class="nl">"Server"</span><span class="p">:</span><span class="w"> </span><span class="s2">"LocalSQLServer"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"Port"</span><span class="p">:</span><span class="w"> </span><span class="mi">112233</span><span class="p">,</span><span class="w">

  </span><span class="nl">"DatabaseSettings"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"Server"</span><span class="p">:</span><span class="w"> </span><span class="s2">"localhost"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Provider"</span><span class="p">:</span><span class="w"> </span><span class="s2">"SQL Server"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Database"</span><span class="p">:</span><span class="w"> </span><span class="s2">"DemoDb"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Port"</span><span class="p">:</span><span class="w"> </span><span class="mi">1234</span><span class="p">,</span><span class="w">
    </span><span class="nl">"UserName"</span><span class="p">:</span><span class="w"> </span><span class="s2">"sa"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Password"</span><span class="p">:</span><span class="w"> </span><span class="s2">"mahedee123"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"AllowedHosts"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*"</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<p><strong>Step 4: Add .env file in the root directory</strong></p>
<ul>
  <li>Add .env file int root directory and modify as follows</li>
</ul>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># PORT = 4444</span>

<span class="s">CONFIG_STORAGE_CATALOG_URL=http://host.docker.internal:5202/c/api/v1/catalog/items/[0]/pic/</span>
<span class="s">NAME = Md. Mahedee Hasan</span>
<span class="s">DBNAME = ContainerDB</span>
<span class="s">PORT = </span><span class="m">4545</span>
<span class="c1">#AZURE_CATALOG_DB=&lt;YourAzureSQLDBCatalogDBConnString&gt;</span>

</code></pre></div></div>

<p><strong>Step 5: Modify docker-compose.override.yml</strong></p>
<ul>
  <li>Modify docker-compose.override.yml as follows</li>
</ul>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">3.4'</span>

<span class="na">services</span><span class="pi">:</span>
  <span class="na">catalog.api</span><span class="pi">:</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">ASPNETCORE_ENVIRONMENT=Development</span>
      <span class="pi">-</span> <span class="s">ASPNETCORE_URLS=https://+:443;http://+:80</span>
      <span class="pi">-</span> <span class="s">ConnectionString=${AZURE_CATALOG_DB:-Server=sqldata;Database=Microsoft.eShopOnContainers.Services.CatalogDb;User Id=sa;Password=Pass@word}</span>
      <span class="pi">-</span> <span class="s">PATH_BASE=/catalog-api</span>
      <span class="pi">-</span> <span class="s">PicBaseUrl=${CONFIG_STORAGE_CATALOG_URL}</span>
      <span class="pi">-</span> <span class="s">Name=${NAME}</span>
      <span class="c1">#- DbName=${DBNAME}</span>
      <span class="pi">-</span> <span class="s">Port=${PORT}</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">80"</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">443"</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">${APPDATA}/Microsoft/UserSecrets:/root/.microsoft/usersecrets:ro</span>
      <span class="pi">-</span> <span class="s">${APPDATA}/ASP.NET/Https:/root/.aspnet/https:ro</span>

</code></pre></div></div>

<p><strong>Step 6: Add DatabaseSettings and CatalogSettings model class</strong><br />
<strong>DatabaseSettings</strong></p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">Catalog.API</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">DatabaseSettings</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Server</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Provider</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Database</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Port</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">UserName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Password</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>
<p><strong>CatalogSettings.cs</strong></p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">Catalog.API</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CatalogSettings</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">ConnectionString</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">ServiceName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">PicBaseUrl</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">PATH_BASE</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="n">DatabaseSettings</span> <span class="n">DatabaseSettings</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>
<p><strong>Step 7: Modify Program class</strong><br />
<strong>Program.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Catalog.API</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Hosting</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Extensions.Configuration</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Extensions.Hosting</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Extensions.Logging</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.IO</span><span class="p">;</span>

<span class="c1">// Using top-level programming</span>
<span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Entering into Main method ... "</span><span class="p">);</span>
<span class="kt">var</span> <span class="n">configuration</span> <span class="p">=</span> <span class="nf">GetConfiguration</span><span class="p">();</span>

<span class="n">IConfiguration</span> <span class="nf">GetConfiguration</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">ConfigurationBuilder</span><span class="p">()</span>
        <span class="p">.</span><span class="nf">SetBasePath</span><span class="p">(</span><span class="n">Directory</span><span class="p">.</span><span class="nf">GetCurrentDirectory</span><span class="p">())</span>
        <span class="p">.</span><span class="nf">AddJsonFile</span><span class="p">(</span><span class="s">"appsettings.json"</span><span class="p">,</span> <span class="n">optional</span><span class="p">:</span> <span class="k">false</span><span class="p">,</span> <span class="n">reloadOnChange</span><span class="p">:</span> <span class="k">true</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">AddEnvironmentVariables</span><span class="p">();</span>

    <span class="k">return</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>
<span class="p">}</span>

<span class="k">try</span>
<span class="p">{</span>
    <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Configuring web host {0}..."</span><span class="p">,</span> <span class="n">Program</span><span class="p">.</span><span class="n">AppName</span><span class="p">);</span>
    <span class="kt">var</span> <span class="n">host</span> <span class="p">=</span> <span class="nf">CreateHostBuilder</span><span class="p">(</span><span class="n">configuration</span><span class="p">,</span> <span class="n">args</span><span class="p">);</span>
    <span class="n">host</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>

    <span class="k">return</span> <span class="m">0</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exp</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="m">1</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">finally</span>
<span class="p">{</span>
    <span class="c1">//finally block</span>
<span class="p">}</span>

<span class="n">IWebHost</span> <span class="nf">CreateHostBuilder</span><span class="p">(</span><span class="n">IConfiguration</span> <span class="n">configuration</span><span class="p">,</span> <span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span> <span class="p">=&gt;</span>
  <span class="n">WebHost</span><span class="p">.</span><span class="nf">CreateDefaultBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
      <span class="p">.</span><span class="nf">ConfigureAppConfiguration</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="nf">AddConfiguration</span><span class="p">(</span><span class="n">configuration</span><span class="p">))</span>
      <span class="p">.</span><span class="nf">CaptureStartupErrors</span><span class="p">(</span><span class="k">false</span><span class="p">)</span>
      <span class="p">.</span><span class="n">UseStartup</span><span class="p">&lt;</span><span class="n">Startup</span><span class="p">&gt;()</span>
      <span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

<span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">Program</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="kt">string</span> <span class="n">Namespace</span> <span class="p">=</span> <span class="k">typeof</span><span class="p">(</span><span class="n">Startup</span><span class="p">).</span><span class="n">Namespace</span><span class="p">;</span>
    <span class="k">public</span> <span class="k">static</span> <span class="kt">string</span> <span class="n">AppName</span> <span class="p">=</span> <span class="n">Namespace</span><span class="p">.</span><span class="nf">Substring</span><span class="p">(</span><span class="n">Namespace</span><span class="p">.</span><span class="nf">LastIndexOf</span><span class="p">(</span><span class="sc">'.'</span><span class="p">,</span> <span class="n">Namespace</span><span class="p">.</span><span class="nf">LastIndexOf</span><span class="p">(</span><span class="sc">'.'</span><span class="p">)</span> <span class="p">-</span> <span class="m">1</span><span class="p">)</span> <span class="p">+</span> <span class="m">1</span><span class="p">);</span>
<span class="p">}</span>

</code></pre></div></div>
<p><strong>8. Modify Startup class</strong></p>

<p><strong>Starup.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Builder</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Hosting</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Extensions.Configuration</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Extensions.DependencyInjection</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Extensions.Hosting</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.OpenApi.Models</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Catalog.API</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Startup</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">Startup</span><span class="p">(</span><span class="n">IConfiguration</span> <span class="n">configuration</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Configuration</span> <span class="p">=</span> <span class="n">configuration</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">IConfiguration</span> <span class="n">Configuration</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">// This method gets called by the runtime. Use this method to add services to the container.</span>
        <span class="k">public</span> <span class="k">void</span> <span class="nf">ConfigureServices</span><span class="p">(</span><span class="n">IServiceCollection</span> <span class="n">services</span><span class="p">)</span>
        <span class="p">{</span>

            <span class="n">services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">();</span>
            <span class="c1">// Use option pattern</span>
            <span class="n">services</span><span class="p">.</span><span class="n">Configure</span><span class="p">&lt;</span><span class="n">CatalogSettings</span><span class="p">&gt;(</span><span class="n">Configuration</span><span class="p">);</span>

            <span class="n">services</span><span class="p">.</span><span class="nf">AddSwaggerGen</span><span class="p">(</span><span class="n">c</span> <span class="p">=&gt;</span>
            <span class="p">{</span>
                <span class="n">c</span><span class="p">.</span><span class="nf">SwaggerDoc</span><span class="p">(</span><span class="s">"v1"</span><span class="p">,</span> <span class="k">new</span> <span class="n">OpenApiInfo</span> <span class="p">{</span> <span class="n">Title</span> <span class="p">=</span> <span class="s">"Catalog.API"</span><span class="p">,</span> <span class="n">Version</span> <span class="p">=</span> <span class="s">"v1"</span> <span class="p">});</span>
            <span class="p">});</span>
        <span class="p">}</span>

        <span class="c1">// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.</span>
        <span class="k">public</span> <span class="k">void</span> <span class="nf">Configure</span><span class="p">(</span><span class="n">IApplicationBuilder</span> <span class="n">app</span><span class="p">,</span> <span class="n">IWebHostEnvironment</span> <span class="n">env</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">// Debug and Check some configuration</span>
            <span class="kt">var</span> <span class="n">pathBase</span> <span class="p">=</span> <span class="n">Configuration</span><span class="p">[</span><span class="s">"PATH_BASE"</span><span class="p">];</span>
            <span class="kt">var</span> <span class="n">picBaseURL</span> <span class="p">=</span> <span class="n">Configuration</span><span class="p">[</span><span class="s">"PicBaseUrl"</span><span class="p">];</span>
            <span class="kt">var</span> <span class="n">name</span> <span class="p">=</span> <span class="n">Configuration</span><span class="p">[</span><span class="s">"name"</span><span class="p">];</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">env</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
            <span class="p">{</span>
                <span class="n">app</span><span class="p">.</span><span class="nf">UseDeveloperExceptionPage</span><span class="p">();</span>
                <span class="n">app</span><span class="p">.</span><span class="nf">UseSwagger</span><span class="p">();</span>
                <span class="n">app</span><span class="p">.</span><span class="nf">UseSwaggerUI</span><span class="p">(</span><span class="n">c</span> <span class="p">=&gt;</span> <span class="n">c</span><span class="p">.</span><span class="nf">SwaggerEndpoint</span><span class="p">(</span><span class="s">"/swagger/v1/swagger.json"</span><span class="p">,</span> <span class="s">"Catalog.API v1"</span><span class="p">));</span>
            <span class="p">}</span>

            <span class="n">app</span><span class="p">.</span><span class="nf">UseHttpsRedirection</span><span class="p">();</span>

            <span class="n">app</span><span class="p">.</span><span class="nf">UseRouting</span><span class="p">();</span>

            <span class="n">app</span><span class="p">.</span><span class="nf">UseAuthorization</span><span class="p">();</span>

            <span class="n">app</span><span class="p">.</span><span class="nf">UseEndpoints</span><span class="p">(</span><span class="n">endpoints</span> <span class="p">=&gt;</span>
            <span class="p">{</span>
                <span class="n">endpoints</span><span class="p">.</span><span class="nf">MapControllers</span><span class="p">();</span>
            <span class="p">});</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 9: Create a Controller class for testing</strong></p>
<ul>
  <li>Create Controller name CatalogController as follows
<strong>CatalogController.cs</strong></li>
</ul>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Extensions.Options</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Catalog.API.Controllers</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
    <span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CatalogController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="n">CatalogSettings</span> <span class="n">_settings</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">CatalogController</span><span class="p">(</span><span class="n">IOptions</span><span class="p">&lt;</span><span class="n">CatalogSettings</span><span class="p">&gt;</span> <span class="n">settings</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_settings</span> <span class="p">=</span> <span class="n">settings</span><span class="p">.</span><span class="n">Value</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="c1">// GET: api/&lt;CatalogController&gt;</span>
        <span class="p">[</span><span class="n">HttpGet</span><span class="p">]</span>
        <span class="k">public</span> <span class="n">CatalogSettings</span> <span class="nf">Get</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">_settings</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 10: Build and run the application</strong>
Now build and run the application. You will see the swagger ui and test CatalogController to test settings.</p>

<p><strong><a href="https://github.com/mahedee/code-sample/tree/master/ConfigSettings">Source Code</a></strong></p>

<!-- **References**  
1. https://dotnet.microsoft.com/learn/ml-dotnet/get-started-tutorial/create -->]]></content><author><name>Mahedee Hasan</name></author><category term="ASP.NET" /><category term="ASP.NET Core" /><category term="C#" /><category term="aspnet" /><category term="aspnetcore" /><category term="csharp" /><summary type="html"><![CDATA[In ASP.NET core, we often use application settings from different configuration files and load to a some files. Application settings can be in the appsettings.json or docker-compose.yml or .env or any other configuration file. We can use IOptions to read these settings using C#. Here is a sample code to retrieve application setting from appsettings.json, docker-compose.yml and .env file.]]></summary></entry><entry><title type="html">Distributed transaction using SAGA pattern, RabbitMQ and asp.net core</title><link href="https://mahedee.net//distributed-transaction-using-saga-rabbitmq-aspnetcore/" rel="alternate" type="text/html" title="Distributed transaction using SAGA pattern, RabbitMQ and asp.net core" /><published>2021-07-03T00:00:00+00:00</published><updated>2021-07-03T00:00:00+00:00</updated><id>https://mahedee.net//distributed-transaction-using-saga-rabbitmq-aspnetcore</id><content type="html" xml:base="https://mahedee.net//distributed-transaction-using-saga-rabbitmq-aspnetcore/"><![CDATA[<p>Distributed transaction is one that spans multiple databases across the network while preserving ACID properties. It is very important in Microservices because of its distributed nature. To manage data consistency we may use SAGA design pattern. In this article, I will show you distributed transaction using SAGA pattern, RabbitMQ and asp.net core.</p>

<p><strong>Saga Pattern</strong></p>

<p>A saga is a sequence of local transactions. Each local transaction updates the local database and publishes a messages or event to message broker for updating next corresponding database. If next database transaction fails, a series of transactions will occur to undo the changes.</p>

<p>Saga is implemented in two ways -</p>
<ul>
  <li>Choreography</li>
  <li>Orchestration</li>
</ul>

<p><strong>Choreography</strong>
In choreography, participants exchange events without a centralized control.</p>

<p><img src="/assets/images/posts/2021/choreography-pattern.png" alt="" /></p>

<p>Fig - Choreography saga (Collected)</p>

<p><strong>Orchestration</strong>
In orchestration, participants exchange events with a centralized control.</p>

<p><img src="/assets/images/posts/2021/orchestrator.png" alt="" /></p>

<p>Fig - Orchestration saga (Collected)</p>

<p><strong>Implementation of Choregraphy Pattern</strong></p>

<p><strong>Tools and technology used</strong></p>
<ul>
  <li>Visual studio 2019</li>
  <li>SQLite</li>
  <li>ASP.NET Core</li>
  <li>RabbitMQ</li>
</ul>

<p><strong>Step 1: Run docker container for RabbitMQ</strong></p>

<ul>
  <li>Run the following command to run rabbitmq in a container</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">docker</span> <span class="nb">run</span> <span class="nf">-d</span> <span class="nf">--hostname</span> <span class="nf">host-rabbit</span> <span class="nf">--name</span> <span class="nf">ecommerce-rabbit</span> <span class="nf">-p</span> <span class="nf">15672:15672</span> <span class="nf">-p</span> <span class="nf">5672:5672</span> <span class="nf">rabbitmq:3-management</span>
</code></pre></div></div>

<p><strong>Step 2: Create two web api application</strong></p>
<ul>
  <li>Create a solution name Ecommerece.sln</li>
  <li>Create a web api application name - Catalog.API and add add it to the solution.</li>
  <li>Create another web api application name - Order.API and add it to the solution.</li>
  <li>Create a class library name - Shared and add it to the solution.</li>
</ul>

<p><strong>Step 3: Create Shared model classes</strong></p>
<ul>
  <li>Create following two model classes in Shared-&gt;Models folder</li>
</ul>

<p><strong>OrderRequest.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">Shared.Models</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">OrderRequest</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">OrderId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">CatalogId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Units</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>CatalogResponse.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">Shared.Models</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CatalogResponse</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">OrderId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">CatalogId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">bool</span> <span class="n">IsSuccess</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>
<p><strong>Organize Ordering.API</strong></p>

<p><strong>Step 4: Install nuget packages in Ordering.API Project</strong></p>
<ul>
  <li>Install following nuget packages in Catalog.API Project</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">Microsoft.EntityFrameworkCore</span>
<span class="nf">Microsoft.EntityFrameworkCore.Sqlite</span>
<span class="nf">Microsoft.EntityFrameworkCore.Tools</span>
<span class="nf">Plain.RabbitMQ</span>
</code></pre></div></div>

<p><strong>Step 5: Create CatalogResponseListener class in Ordering.API project</strong></p>

<ul>
  <li>Create CatalogResponseListener class in Ordering.API as follows</li>
</ul>

<p><strong>CatalogResponseListener.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Microsoft.Extensions.DependencyInjection</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Extensions.Hosting</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Newtonsoft.Json</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.API.Db</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Plain.RabbitMQ</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Shared.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Linq</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Threading</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Threading.Tasks</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.API</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CatalogResponseListener</span> <span class="p">:</span> <span class="n">IHostedService</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="n">ISubscriber</span> <span class="n">_subscriber</span><span class="p">;</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IServiceScopeFactory</span> <span class="n">_scopeFactory</span><span class="p">;</span>
        <span class="k">public</span> <span class="nf">CatalogResponseListener</span><span class="p">(</span><span class="n">ISubscriber</span> <span class="n">subscripber</span><span class="p">,</span> <span class="n">IServiceScopeFactory</span> <span class="n">scopeFactory</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="n">_subscriber</span> <span class="p">=</span> <span class="n">subscripber</span><span class="p">;</span>
            <span class="k">this</span><span class="p">.</span><span class="n">_scopeFactory</span> <span class="p">=</span> <span class="n">scopeFactory</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="n">Task</span> <span class="nf">StartAsync</span><span class="p">(</span><span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_subscriber</span><span class="p">.</span><span class="nf">Subscribe</span><span class="p">(</span><span class="n">Subscribe</span><span class="p">);</span>
            <span class="k">return</span> <span class="n">Task</span><span class="p">.</span><span class="n">CompletedTask</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="kt">bool</span> <span class="nf">Subscribe</span><span class="p">(</span><span class="kt">string</span> <span class="n">message</span><span class="p">,</span> <span class="n">IDictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">object</span><span class="p">&gt;</span> <span class="n">header</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">response</span> <span class="p">=</span> <span class="n">JsonConvert</span><span class="p">.</span><span class="n">DeserializeObject</span><span class="p">&lt;</span><span class="n">CatalogResponse</span><span class="p">&gt;(</span><span class="n">message</span><span class="p">);</span>

            <span class="k">if</span><span class="p">(!</span><span class="n">response</span><span class="p">.</span><span class="n">IsSuccess</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">scope</span> <span class="p">=</span> <span class="n">_scopeFactory</span><span class="p">.</span><span class="nf">CreateScope</span><span class="p">())</span>
                <span class="p">{</span>
                    <span class="kt">var</span> <span class="n">_orderingContext</span> <span class="p">=</span> <span class="n">scope</span><span class="p">.</span><span class="n">ServiceProvider</span><span class="p">.</span><span class="n">GetRequiredService</span><span class="p">&lt;</span><span class="n">OrderingContext</span><span class="p">&gt;();</span>
                    
                    <span class="c1">// If transaction is not successful, Remove ordering item</span>
                    <span class="kt">var</span> <span class="n">orderItem</span> <span class="p">=</span> <span class="n">_orderingContext</span><span class="p">.</span><span class="n">OrderItems</span><span class="p">.</span><span class="nf">Where</span><span class="p">(</span><span class="n">o</span> <span class="p">=&gt;</span> <span class="n">o</span><span class="p">.</span><span class="n">ProductId</span> <span class="p">==</span> <span class="n">response</span><span class="p">.</span><span class="n">CatalogId</span> <span class="p">&amp;&amp;</span> <span class="n">o</span><span class="p">.</span><span class="n">OrderId</span> <span class="p">==</span> <span class="n">response</span><span class="p">.</span><span class="n">OrderId</span><span class="p">).</span><span class="nf">FirstOrDefault</span><span class="p">();</span>
                    <span class="n">_orderingContext</span><span class="p">.</span><span class="n">OrderItems</span><span class="p">.</span><span class="nf">Remove</span><span class="p">(</span><span class="n">orderItem</span><span class="p">);</span>
                    <span class="n">_orderingContext</span><span class="p">.</span><span class="nf">SaveChanges</span><span class="p">();</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">Task</span> <span class="nf">StopAsync</span><span class="p">(</span><span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">Task</span><span class="p">.</span><span class="n">CompletedTask</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 6: Change connection string</strong></p>
<ul>
  <li>Add connection string for SQLite in appsettings.json</li>
</ul>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"Logging"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"LogLevel"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Default"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Information"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Microsoft"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Warning"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Microsoft.Hosting.Lifetime"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Information"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"ConnectionStrings"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"DefaultConnection"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Data Source=db/ordering.db"</span><span class="w">
  </span><span class="p">},</span><span class="w">

  </span><span class="nl">"AllowedHosts"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*"</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<p><strong>Step 7: Configure Database, listener and RabbitMQ</strong></p>
<ul>
  <li>Configure SQLite, listener and RabbitMQ in Startup class</li>
</ul>

<p><strong>Startup.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Builder</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Hosting</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Extensions.Configuration</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Extensions.DependencyInjection</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Extensions.Hosting</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.OpenApi.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.API.Db</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Plain.RabbitMQ</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">RabbitMQ.Client</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.API</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Startup</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">Startup</span><span class="p">(</span><span class="n">IConfiguration</span> <span class="n">configuration</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Configuration</span> <span class="p">=</span> <span class="n">configuration</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">IConfiguration</span> <span class="n">Configuration</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">// This method gets called by the runtime. Use this method to add services to the container.</span>
        <span class="k">public</span> <span class="k">void</span> <span class="nf">ConfigureServices</span><span class="p">(</span><span class="n">IServiceCollection</span> <span class="n">services</span><span class="p">)</span>
        <span class="p">{</span>

            <span class="n">services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">();</span>
            <span class="n">services</span><span class="p">.</span><span class="nf">AddSwaggerGen</span><span class="p">(</span><span class="n">c</span> <span class="p">=&gt;</span>
            <span class="p">{</span>
                <span class="n">c</span><span class="p">.</span><span class="nf">SwaggerDoc</span><span class="p">(</span><span class="s">"v1"</span><span class="p">,</span> <span class="k">new</span> <span class="n">OpenApiInfo</span> <span class="p">{</span> <span class="n">Title</span> <span class="p">=</span> <span class="s">"Ordering.API"</span><span class="p">,</span> <span class="n">Version</span> <span class="p">=</span> <span class="s">"v1"</span> <span class="p">});</span>
            <span class="p">});</span>

            <span class="c1">// Configure database</span>
            <span class="n">services</span><span class="p">.</span><span class="n">AddDbContext</span><span class="p">&lt;</span><span class="n">OrderingContext</span><span class="p">&gt;(</span><span class="n">options</span> <span class="p">=&gt;</span> <span class="n">options</span><span class="p">.</span><span class="nf">UseSqlite</span><span class="p">(</span><span class="n">Configuration</span><span class="p">.</span><span class="nf">GetConnectionString</span><span class="p">(</span><span class="s">"DefaultConnection"</span><span class="p">)));</span>


            <span class="c1">//Configure rabbitmq</span>
            <span class="n">services</span><span class="p">.</span><span class="n">AddSingleton</span><span class="p">&lt;</span><span class="n">IConnectionProvider</span><span class="p">&gt;(</span><span class="k">new</span> <span class="nf">ConnectionProvider</span><span class="p">(</span><span class="s">"amqp://guest:guest@localhost:5672"</span><span class="p">));</span>

            <span class="n">services</span><span class="p">.</span><span class="n">AddSingleton</span><span class="p">&lt;</span><span class="n">IPublisher</span><span class="p">&gt;(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="nf">Publisher</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">GetService</span><span class="p">&lt;</span><span class="n">IConnectionProvider</span><span class="p">&gt;(),</span>
                <span class="s">"order_exchange"</span><span class="p">,</span> <span class="c1">// exchange name</span>
                <span class="n">ExchangeType</span><span class="p">.</span><span class="n">Topic</span><span class="p">));</span>

            <span class="n">services</span><span class="p">.</span><span class="n">AddSingleton</span><span class="p">&lt;</span><span class="n">ISubscriber</span><span class="p">&gt;(</span><span class="n">s</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="nf">Subscriber</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">GetService</span><span class="p">&lt;</span><span class="n">IConnectionProvider</span><span class="p">&gt;(),</span>
                <span class="s">"catalog_exchange"</span><span class="p">,</span> <span class="c1">// Exchange name</span>
                <span class="s">"catalog_response_queue"</span><span class="p">,</span> <span class="c1">//queue name</span>
                <span class="s">"catalog_response_routingkey"</span><span class="p">,</span> <span class="c1">// routing key</span>
                <span class="n">ExchangeType</span><span class="p">.</span><span class="n">Topic</span><span class="p">));</span>

            <span class="n">services</span><span class="p">.</span><span class="n">AddHostedService</span><span class="p">&lt;</span><span class="n">CatalogResponseListener</span><span class="p">&gt;();</span>
        <span class="p">}</span>

        <span class="c1">// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.</span>
        <span class="k">public</span> <span class="k">void</span> <span class="nf">Configure</span><span class="p">(</span><span class="n">IApplicationBuilder</span> <span class="n">app</span><span class="p">,</span> <span class="n">IWebHostEnvironment</span> <span class="n">env</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">env</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
            <span class="p">{</span>
                <span class="n">app</span><span class="p">.</span><span class="nf">UseDeveloperExceptionPage</span><span class="p">();</span>
                <span class="n">app</span><span class="p">.</span><span class="nf">UseSwagger</span><span class="p">();</span>
                <span class="n">app</span><span class="p">.</span><span class="nf">UseSwaggerUI</span><span class="p">(</span><span class="n">c</span> <span class="p">=&gt;</span> <span class="n">c</span><span class="p">.</span><span class="nf">SwaggerEndpoint</span><span class="p">(</span><span class="s">"/swagger/v1/swagger.json"</span><span class="p">,</span> <span class="s">"Ordering.API v1"</span><span class="p">));</span>
            <span class="p">}</span>

            <span class="n">app</span><span class="p">.</span><span class="nf">UseHttpsRedirection</span><span class="p">();</span>

            <span class="n">app</span><span class="p">.</span><span class="nf">UseRouting</span><span class="p">();</span>

            <span class="n">app</span><span class="p">.</span><span class="nf">UseAuthorization</span><span class="p">();</span>

            <span class="n">app</span><span class="p">.</span><span class="nf">UseEndpoints</span><span class="p">(</span><span class="n">endpoints</span> <span class="p">=&gt;</span>
            <span class="p">{</span>
                <span class="n">endpoints</span><span class="p">.</span><span class="nf">MapControllers</span><span class="p">();</span>
            <span class="p">});</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>


</code></pre></div></div>

<p><strong>Step 8: Create a OrderItem model class</strong></p>

<ul>
  <li>Create OrderItem model class in Models folder</li>
</ul>

<p><strong>OrderItem.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System.ComponentModel.DataAnnotations</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.ComponentModel.DataAnnotations.Schema</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.API.Models</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">OrderItem</span>
    <span class="p">{</span>
        <span class="p">[</span><span class="n">Key</span><span class="p">]</span>
        <span class="p">[</span><span class="nf">DatabaseGenerated</span><span class="p">(</span><span class="n">DatabaseGeneratedOption</span><span class="p">.</span><span class="n">Identity</span><span class="p">)]</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">OrderId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">ProductId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">ProductName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">decimal</span> <span class="n">UnitPrice</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Units</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 9: Create a database context class</strong></p>

<ul>
  <li>Create OrderingContext in Db folder</li>
</ul>

<p><strong>OrderingContext.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.API.Models</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.API.Db</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">OrderingContext</span> <span class="p">:</span> <span class="n">DbContext</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">OrderingContext</span><span class="p">(</span><span class="n">DbContextOptions</span><span class="p">&lt;</span><span class="n">OrderingContext</span><span class="p">&gt;</span> <span class="n">options</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
        <span class="p">{</span>

        <span class="p">}</span>

        <span class="k">public</span> <span class="n">DbSet</span><span class="p">&lt;</span><span class="n">OrderItem</span><span class="p">&gt;</span> <span class="n">OrderItems</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 10: Create controller class</strong></p>

<ul>
  <li>Create a controller class and api endpoint in controllers folder</li>
</ul>

<p><strong>OrderItemsController.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Newtonsoft.Json</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.API.Db</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.API.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Plain.RabbitMQ</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Shared.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Threading.Tasks</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.API.Controllers</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
    <span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">OrderItemsController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">OrderingContext</span> <span class="n">_context</span><span class="p">;</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IPublisher</span> <span class="n">_publisher</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">OrderItemsController</span><span class="p">(</span><span class="n">OrderingContext</span> <span class="n">context</span><span class="p">,</span> <span class="n">IPublisher</span> <span class="n">publisher</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_context</span> <span class="p">=</span> <span class="n">context</span><span class="p">;</span>
            <span class="n">_publisher</span> <span class="p">=</span> <span class="n">publisher</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/OrderItems</span>
        <span class="p">[</span><span class="n">HttpGet</span><span class="p">]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">OrderItem</span><span class="p">&gt;&gt;&gt;</span> <span class="nf">GetOrderItems</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">OrderItems</span><span class="p">.</span><span class="nf">ToListAsync</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// GET: api/OrderItems/5</span>
        <span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">OrderItem</span><span class="p">&gt;&gt;</span> <span class="nf">GetOrderItem</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">orderItem</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">OrderItems</span><span class="p">.</span><span class="nf">FindAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">orderItem</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="n">orderItem</span><span class="p">;</span>
        <span class="p">}</span>

        
        <span class="c1">// POST: api/OrderItems</span>
        <span class="c1">// To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754</span>
        <span class="p">[</span><span class="n">HttpPost</span><span class="p">]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span> <span class="nf">PostOrderItem</span><span class="p">(</span><span class="n">OrderItem</span> <span class="n">orderItem</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_context</span><span class="p">.</span><span class="n">OrderItems</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">orderItem</span><span class="p">);</span>
            <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>

            <span class="c1">// New inserted identity value</span>
            <span class="kt">int</span> <span class="n">id</span> <span class="p">=</span> <span class="n">orderItem</span><span class="p">.</span><span class="n">Id</span><span class="p">;</span>


            <span class="n">_publisher</span><span class="p">.</span><span class="nf">Publish</span><span class="p">(</span><span class="n">JsonConvert</span><span class="p">.</span><span class="nf">SerializeObject</span><span class="p">(</span><span class="k">new</span> <span class="n">OrderRequest</span>
            <span class="p">{</span>
                <span class="n">OrderId</span> <span class="p">=</span> <span class="n">orderItem</span><span class="p">.</span><span class="n">OrderId</span><span class="p">,</span>
                <span class="n">CatalogId</span> <span class="p">=</span> <span class="n">orderItem</span><span class="p">.</span><span class="n">ProductId</span><span class="p">,</span>
                <span class="n">Units</span> <span class="p">=</span> <span class="n">orderItem</span><span class="p">.</span><span class="n">Units</span><span class="p">,</span>
                <span class="n">Name</span> <span class="p">=</span> <span class="n">orderItem</span><span class="p">.</span><span class="n">ProductName</span>
            <span class="p">}),</span>
            <span class="s">"order_created_routingkey"</span><span class="p">,</span> <span class="c1">// Routing key</span>
            <span class="k">null</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 11: Add migration in the application</strong></p>

<ul>
  <li>Run the following command in the package manager console</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Add-Migration</span> <span class="nf">initmig</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Update-Database</span> <span class="nf">-Verbose</span>
</code></pre></div></div>

<p><strong>Organize Catalog.API</strong></p>

<p><strong>Step 12: Install nuget packages in Catalog.API</strong></p>
<ul>
  <li>Install following nuget packages in Catalog.API project</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">Microsoft.EntityFrameworkCore</span>
<span class="nf">Microsoft.EntityFrameworkCore.Sqlite</span>
<span class="nf">Microsoft.EntityFrameworkCore.Tools</span>
<span class="nf">Plain.RabbitMQ</span>
</code></pre></div></div>

<p><strong>Step 13: Create CatalogItem model class</strong></p>
<ul>
  <li>Create CatalogItem model class in Models folder</li>
</ul>

<p><strong>CatalogItem.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System.ComponentModel.DataAnnotations</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.ComponentModel.DataAnnotations.Schema</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Catalog.API.Models</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CatalogItem</span>
    <span class="p">{</span>
        <span class="p">[</span><span class="n">Key</span><span class="p">]</span>
        <span class="p">[</span><span class="nf">DatabaseGenerated</span><span class="p">(</span><span class="n">DatabaseGeneratedOption</span><span class="p">.</span><span class="n">Identity</span><span class="p">)]</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Description</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">decimal</span> <span class="n">Price</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">AvailableStock</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">MaxStockThreshold</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 14: Configure connectionstring</strong></p>
<ul>
  <li>Configure connectionstring in appsettings.json is as follows</li>
</ul>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"Logging"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"LogLevel"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Default"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Information"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Microsoft"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Warning"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Microsoft.Hosting.Lifetime"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Information"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"ConnectionStrings"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"DefaultConnection"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Data Source=db/catalog.db"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"AllowedHosts"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*"</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<p><strong>Step 15: Add context class in Db folder</strong></p>
<ul>
  <li>Add DbContext class in Db folder</li>
</ul>

<p><strong>CatalogContext.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Catalog.API.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Catalog.API.Db</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CatalogContext</span> <span class="p">:</span> <span class="n">DbContext</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">CatalogContext</span><span class="p">(</span><span class="n">DbContextOptions</span><span class="p">&lt;</span><span class="n">CatalogContext</span><span class="p">&gt;</span> <span class="n">options</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
        <span class="p">{</span>

        <span class="p">}</span>

        <span class="k">public</span> <span class="n">DbSet</span><span class="p">&lt;</span><span class="n">CatalogItem</span><span class="p">&gt;</span> <span class="n">CatalogItems</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 16: Add OrderCreatedListener class</strong></p>
<ul>
  <li>OrderCreatedListener class in Catalog.API project</li>
</ul>

<p><strong>OrderCreatedListener.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Catalog.API.Db</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Catalog.API.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Extensions.DependencyInjection</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Extensions.Hosting</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Newtonsoft.Json</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Plain.RabbitMQ</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Shared.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Threading</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Threading.Tasks</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Catalog.API</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">OrderCreatedListener</span> <span class="p">:</span> <span class="n">IHostedService</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">ISubscriber</span> <span class="n">_subscribe</span><span class="p">;</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IPublisher</span> <span class="n">_publisher</span><span class="p">;</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IServiceScopeFactory</span> <span class="n">_scopeFactory</span><span class="p">;</span>
        <span class="k">public</span> <span class="nf">OrderCreatedListener</span><span class="p">(</span><span class="n">ISubscriber</span> <span class="n">subscriber</span><span class="p">,</span> <span class="n">IPublisher</span> <span class="n">publisher</span><span class="p">,</span> <span class="n">IServiceScopeFactory</span> <span class="n">scopeFactory</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_subscribe</span> <span class="p">=</span> <span class="n">subscriber</span><span class="p">;</span>
            <span class="n">_publisher</span> <span class="p">=</span> <span class="n">publisher</span><span class="p">;</span>
            <span class="n">_scopeFactory</span> <span class="p">=</span> <span class="n">scopeFactory</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="n">Task</span> <span class="nf">StartAsync</span><span class="p">(</span><span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_subscribe</span><span class="p">.</span><span class="nf">Subscribe</span><span class="p">(</span><span class="n">Subscribe</span><span class="p">);</span>
            <span class="k">return</span> <span class="n">Task</span><span class="p">.</span><span class="n">CompletedTask</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="kt">bool</span> <span class="nf">Subscribe</span><span class="p">(</span><span class="kt">string</span> <span class="n">message</span><span class="p">,</span> <span class="n">IDictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">object</span><span class="p">&gt;</span> <span class="n">header</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">response</span> <span class="p">=</span> <span class="n">JsonConvert</span><span class="p">.</span><span class="n">DeserializeObject</span><span class="p">&lt;</span><span class="n">OrderRequest</span><span class="p">&gt;(</span><span class="n">message</span><span class="p">);</span>

            <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">scope</span> <span class="p">=</span> <span class="n">_scopeFactory</span><span class="p">.</span><span class="nf">CreateScope</span><span class="p">())</span>
            <span class="p">{</span>
                <span class="kt">var</span> <span class="n">_context</span> <span class="p">=</span> <span class="n">scope</span><span class="p">.</span><span class="n">ServiceProvider</span><span class="p">.</span><span class="n">GetRequiredService</span><span class="p">&lt;</span><span class="n">CatalogContext</span><span class="p">&gt;();</span>
                <span class="k">try</span>
                <span class="p">{</span>
                    <span class="n">CatalogItem</span> <span class="n">catalogItem</span> <span class="p">=</span> <span class="n">_context</span><span class="p">.</span><span class="n">CatalogItems</span><span class="p">.</span><span class="nf">Find</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">CatalogId</span><span class="p">);</span>

                    <span class="k">if</span> <span class="p">(</span><span class="n">catalogItem</span> <span class="p">==</span> <span class="k">null</span> <span class="p">||</span> <span class="n">catalogItem</span><span class="p">.</span><span class="n">AvailableStock</span> <span class="p">&lt;</span> <span class="n">response</span><span class="p">.</span><span class="n">Units</span><span class="p">)</span>
                        <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">();</span>

                    <span class="n">catalogItem</span><span class="p">.</span><span class="n">AvailableStock</span> <span class="p">=</span> <span class="n">catalogItem</span><span class="p">.</span><span class="n">AvailableStock</span> <span class="p">-</span> <span class="n">response</span><span class="p">.</span><span class="n">Units</span><span class="p">;</span>
                    <span class="n">_context</span><span class="p">.</span><span class="nf">Entry</span><span class="p">(</span><span class="n">catalogItem</span><span class="p">).</span><span class="n">State</span> <span class="p">=</span> <span class="n">EntityState</span><span class="p">.</span><span class="n">Modified</span><span class="p">;</span>
                    <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChanges</span><span class="p">();</span>

                    <span class="n">_publisher</span><span class="p">.</span><span class="nf">Publish</span><span class="p">(</span><span class="n">JsonConvert</span><span class="p">.</span><span class="nf">SerializeObject</span><span class="p">(</span>
                            <span class="k">new</span> <span class="n">CatalogResponse</span> <span class="p">{</span> <span class="n">OrderId</span> <span class="p">=</span> <span class="n">response</span><span class="p">.</span><span class="n">OrderId</span><span class="p">,</span> <span class="n">CatalogId</span> <span class="p">=</span> <span class="n">response</span><span class="p">.</span><span class="n">CatalogId</span><span class="p">,</span> <span class="n">IsSuccess</span> <span class="p">=</span> <span class="k">true</span> <span class="p">}</span>
                        <span class="p">),</span> <span class="s">"catalog_response_routingkey"</span><span class="p">,</span> <span class="k">null</span><span class="p">);</span>
                <span class="p">}</span>
                <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="n">_publisher</span><span class="p">.</span><span class="nf">Publish</span><span class="p">(</span><span class="n">JsonConvert</span><span class="p">.</span><span class="nf">SerializeObject</span><span class="p">(</span>
                    <span class="k">new</span> <span class="n">CatalogResponse</span> <span class="p">{</span> <span class="n">OrderId</span> <span class="p">=</span> <span class="n">response</span><span class="p">.</span><span class="n">OrderId</span><span class="p">,</span> <span class="n">CatalogId</span> <span class="p">=</span> <span class="n">response</span><span class="p">.</span><span class="n">CatalogId</span><span class="p">,</span> <span class="n">IsSuccess</span> <span class="p">=</span> <span class="k">false</span> <span class="p">}</span>
                <span class="p">),</span> <span class="s">"catalog_response_routingkey"</span><span class="p">,</span> <span class="k">null</span><span class="p">);</span>
                <span class="p">}</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">Task</span> <span class="nf">StopAsync</span><span class="p">(</span><span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">Task</span><span class="p">.</span><span class="n">CompletedTask</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 17: Register database, rabbitmq and listener in Startup class</strong></p>

<p><strong>Startup.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Catalog.API.Db</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Builder</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Hosting</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Extensions.Configuration</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Extensions.DependencyInjection</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Extensions.Hosting</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.OpenApi.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Plain.RabbitMQ</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">RabbitMQ.Client</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Catalog.API</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Startup</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">Startup</span><span class="p">(</span><span class="n">IConfiguration</span> <span class="n">configuration</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Configuration</span> <span class="p">=</span> <span class="n">configuration</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">IConfiguration</span> <span class="n">Configuration</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">// This method gets called by the runtime. Use this method to add services to the container.</span>
        <span class="k">public</span> <span class="k">void</span> <span class="nf">ConfigureServices</span><span class="p">(</span><span class="n">IServiceCollection</span> <span class="n">services</span><span class="p">)</span>
        <span class="p">{</span>

            <span class="n">services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">();</span>
            <span class="n">services</span><span class="p">.</span><span class="nf">AddSwaggerGen</span><span class="p">(</span><span class="n">c</span> <span class="p">=&gt;</span>
            <span class="p">{</span>
                <span class="n">c</span><span class="p">.</span><span class="nf">SwaggerDoc</span><span class="p">(</span><span class="s">"v1"</span><span class="p">,</span> <span class="k">new</span> <span class="n">OpenApiInfo</span> <span class="p">{</span> <span class="n">Title</span> <span class="p">=</span> <span class="s">"Catalog.API"</span><span class="p">,</span> <span class="n">Version</span> <span class="p">=</span> <span class="s">"v1"</span> <span class="p">});</span>
            <span class="p">});</span>

            <span class="c1">// Configure Sqlite</span>
            <span class="n">services</span><span class="p">.</span><span class="n">AddDbContext</span><span class="p">&lt;</span><span class="n">CatalogContext</span><span class="p">&gt;(</span><span class="n">options</span> <span class="p">=&gt;</span> <span class="n">options</span><span class="p">.</span><span class="nf">UseSqlite</span><span class="p">(</span><span class="n">Configuration</span><span class="p">.</span><span class="nf">GetConnectionString</span><span class="p">(</span><span class="s">"DefaultConnection"</span><span class="p">)));</span>

            <span class="n">services</span><span class="p">.</span><span class="n">AddSingleton</span><span class="p">&lt;</span><span class="n">IConnectionProvider</span><span class="p">&gt;(</span><span class="k">new</span> <span class="nf">ConnectionProvider</span><span class="p">(</span><span class="s">"amqp://guest:guest@localhost:5672"</span><span class="p">));</span>
            <span class="n">services</span><span class="p">.</span><span class="n">AddSingleton</span><span class="p">&lt;</span><span class="n">IPublisher</span><span class="p">&gt;(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="nf">Publisher</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">GetService</span><span class="p">&lt;</span><span class="n">IConnectionProvider</span><span class="p">&gt;(),</span>
                <span class="s">"catalog_exchange"</span><span class="p">,</span>
                <span class="n">ExchangeType</span><span class="p">.</span><span class="n">Topic</span><span class="p">));</span>

            <span class="n">services</span><span class="p">.</span><span class="n">AddSingleton</span><span class="p">&lt;</span><span class="n">ISubscriber</span><span class="p">&gt;(</span><span class="n">s</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="nf">Subscriber</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">GetService</span><span class="p">&lt;</span><span class="n">IConnectionProvider</span><span class="p">&gt;(),</span>
                <span class="s">"order_exchange"</span><span class="p">,</span>
                <span class="s">"order_response_queue"</span><span class="p">,</span>
                <span class="s">"order_created_routingkey"</span><span class="p">,</span>
                <span class="n">ExchangeType</span><span class="p">.</span><span class="n">Topic</span>
                <span class="p">));</span>

            <span class="n">services</span><span class="p">.</span><span class="n">AddHostedService</span><span class="p">&lt;</span><span class="n">OrderCreatedListener</span><span class="p">&gt;();</span>
        <span class="p">}</span>

        <span class="c1">// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.</span>
        <span class="k">public</span> <span class="k">void</span> <span class="nf">Configure</span><span class="p">(</span><span class="n">IApplicationBuilder</span> <span class="n">app</span><span class="p">,</span> <span class="n">IWebHostEnvironment</span> <span class="n">env</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">env</span><span class="p">.</span><span class="nf">IsDevelopment</span><span class="p">())</span>
            <span class="p">{</span>
                <span class="n">app</span><span class="p">.</span><span class="nf">UseDeveloperExceptionPage</span><span class="p">();</span>
                <span class="n">app</span><span class="p">.</span><span class="nf">UseSwagger</span><span class="p">();</span>
                <span class="n">app</span><span class="p">.</span><span class="nf">UseSwaggerUI</span><span class="p">(</span><span class="n">c</span> <span class="p">=&gt;</span> <span class="n">c</span><span class="p">.</span><span class="nf">SwaggerEndpoint</span><span class="p">(</span><span class="s">"/swagger/v1/swagger.json"</span><span class="p">,</span> <span class="s">"Catalog.API v1"</span><span class="p">));</span>
            <span class="p">}</span>

            <span class="n">app</span><span class="p">.</span><span class="nf">UseHttpsRedirection</span><span class="p">();</span>

            <span class="n">app</span><span class="p">.</span><span class="nf">UseRouting</span><span class="p">();</span>

            <span class="n">app</span><span class="p">.</span><span class="nf">UseAuthorization</span><span class="p">();</span>

            <span class="n">app</span><span class="p">.</span><span class="nf">UseEndpoints</span><span class="p">(</span><span class="n">endpoints</span> <span class="p">=&gt;</span>
            <span class="p">{</span>
                <span class="n">endpoints</span><span class="p">.</span><span class="nf">MapControllers</span><span class="p">();</span>
            <span class="p">});</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>
<p><strong>Step 18: Add migration in the application</strong></p>

<ul>
  <li>Run the following command in the package manager console</li>
</ul>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Add-Migration</span> <span class="nf">initmig</span>
<span class="nf">PM</span><span class="p">&gt;</span> <span class="nf">Update-Database</span> <span class="nf">-Verbose</span>
</code></pre></div></div>
<ul>
  <li>Run both project and place an order using swagger. Observe what happen when transaction fails. Thanks for your patience.</li>
</ul>

<p><strong><a href="https://github.com/mahedee/code-sample02/tree/main/saga-choreography">Source code</a></strong></p>

<!-- 
References
https://docs.microsoft.com/en-us/azure/architecture/reference-architectures/saga/saga
https://microservices.io/patterns/data/saga.html
-->]]></content><author><name>Mahedee Hasan</name></author><category term="ASP.NET Core" /><category term="Microservices" /><category term="RabbitMQ" /><category term="Design Pattern" /><category term="aspnetcore" /><category term="microservices" /><category term="rabbitmq" /><category term="designpattern" /><summary type="html"><![CDATA[Distributed transaction is one that spans multiple databases across the network while preserving ACID properties. It is very important in Microservices because of its distributed nature. To manage data consistency we may use SAGA design pattern. In this article, I will show you distributed transaction using SAGA pattern, RabbitMQ and asp.net core.]]></summary></entry><entry><title type="html">Getting started with Angular</title><link href="https://mahedee.net//getting-started-with-angular/" rel="alternate" type="text/html" title="Getting started with Angular" /><published>2021-06-01T00:00:00+00:00</published><updated>2021-06-01T00:00:00+00:00</updated><id>https://mahedee.net//getting-started-with-angular</id><content type="html" xml:base="https://mahedee.net//getting-started-with-angular/"><![CDATA[<!-- ## Implementation of swagger in a asp.net core web api using in memory database -->

<p><strong>Introduction</strong><br />
Angular is a TypeScript-based free and open-source web application framework. It is maintained by Google and open-source community individuals.</p>

<p><strong>Getting started</strong></p>

<ol>
  <li>Download and install <a href="https://nodejs.org/en/download/">Node.Js windows installer</a>
    <ul>
      <li>You can check your installed node.js version using following command
        <div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">node</span> <span class="nf">-v</span>
</code></pre></div>        </div>
        <p>or</p>
        <div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">node</span> <span class="nf">--version</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>Install Angular CLI
    <ul>
      <li>To install Angular CLI, open a windows terminal and run the following command
        <div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nf">npm</span> <span class="nf">install</span> <span class="nf">-g</span> <span class="nf">@angular</span><span class="nv">/cli</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>Create an application
    <ul>
      <li>Run the following CLI command to create an application name my-project</li>
    </ul>

    <div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nf">ng</span> <span class="nf">new</span> <span class="nf">my-client-app</span>
</code></pre></div>    </div>
    <ul>
      <li>The <code class="language-plaintext highlighter-rouge">ng new</code> command prompts you for several information. For simplicity just keep default or press enter.</li>
    </ul>
  </li>
  <li>Run application
    <ul>
      <li>Navigate to the workspace folder as follows
        <div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nf">cd</span> <span class="nf">my-client-app</span>
</code></pre></div>        </div>
      </li>
      <li>Now run the following command to run application</li>
    </ul>

    <div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nf">ng</span> <span class="nf">serve</span> <span class="nf">-open</span>
</code></pre></div>    </div>
    <div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nf">ng</span> <span class="nf">serve</span> <span class="nf">-o</span>
</code></pre></div>    </div>
    <p>Your application automatically run to http://localhost:4200/</p>
  </li>
</ol>

<p>For more information visit angular official site: https://angular.io/</p>]]></content><author><name>Mahedee Hasan</name></author><category term="Angular" /><category term="Javascript" /><category term="angular" /><category term="javascript" /><summary type="html"><![CDATA[Intoduction to Angular]]></summary></entry><entry><title type="html">Playing with dapper using asp.net core</title><link href="https://mahedee.net//playing-with-dapper-with-aspnet-core-copy/" rel="alternate" type="text/html" title="Playing with dapper using asp.net core" /><published>2021-05-05T00:00:00+00:00</published><updated>2021-05-05T00:00:00+00:00</updated><id>https://mahedee.net//playing-with-dapper-with-aspnet-core%20copy</id><content type="html" xml:base="https://mahedee.net//playing-with-dapper-with-aspnet-core-copy/"><![CDATA[<!-- ## Implementation of swagger in a asp.net core web api using in memory database -->

<p><strong>Introduction</strong><br />
Dapper is mostly used, speedy and high performance ORM tools for Microsoft.NET platform. It is free and open source software. It is very easy to handle sql query using fewer lines of code. Here I will show you CRUD operation using inline query and stored procedure with an asp.net core web api project. So, let’s begin.</p>

<p><strong>Tools and technologies used</strong></p>

<ul>
  <li>Visual Studio 2019</li>
  <li>SQL Server 2019</li>
  <li>Dapper 2.0.90</li>
  <li>ASP.NET Core Web API</li>
</ul>

<p><strong>Implementation</strong></p>

<p><strong>Step 1:</strong> Create database, table and stored procedure.</p>
<ul>
  <li>Create a databse in sql server name - OrderingDB</li>
  <li>Run the following script to create table and stored procedure.</li>
</ul>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">USE</span> <span class="p">[</span><span class="n">OrderingDB</span><span class="p">]</span>
<span class="k">GO</span>
<span class="cm">/****** Object:  Table [dbo].[Customers]    Script Date: 9/16/2021 11:44:55 AM ******/</span>
<span class="k">SET</span> <span class="n">ANSI_NULLS</span> <span class="k">ON</span>
<span class="k">GO</span>
<span class="k">SET</span> <span class="n">QUOTED_IDENTIFIER</span> <span class="k">ON</span>
<span class="k">GO</span>
<span class="k">CREATE</span> <span class="k">TABLE</span> <span class="p">[</span><span class="n">dbo</span><span class="p">].[</span><span class="n">Customers</span><span class="p">](</span>
	<span class="p">[</span><span class="n">Id</span><span class="p">]</span> <span class="p">[</span><span class="nb">bigint</span><span class="p">]</span> <span class="k">IDENTITY</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
	<span class="p">[</span><span class="n">FirstName</span><span class="p">]</span> <span class="p">[</span><span class="n">nvarchar</span><span class="p">](</span><span class="k">max</span><span class="p">)</span> <span class="k">NULL</span><span class="p">,</span>
	<span class="p">[</span><span class="n">LastName</span><span class="p">]</span> <span class="p">[</span><span class="n">nvarchar</span><span class="p">](</span><span class="k">max</span><span class="p">)</span> <span class="k">NULL</span><span class="p">,</span>
	<span class="p">[</span><span class="n">Email</span><span class="p">]</span> <span class="p">[</span><span class="n">nvarchar</span><span class="p">](</span><span class="k">max</span><span class="p">)</span> <span class="k">NULL</span><span class="p">,</span>
	<span class="p">[</span><span class="n">ContactNumber</span><span class="p">]</span> <span class="p">[</span><span class="n">nvarchar</span><span class="p">](</span><span class="k">max</span><span class="p">)</span> <span class="k">NULL</span><span class="p">,</span>
	<span class="p">[</span><span class="n">Address</span><span class="p">]</span> <span class="p">[</span><span class="n">nvarchar</span><span class="p">](</span><span class="k">max</span><span class="p">)</span> <span class="k">NULL</span><span class="p">,</span>
 <span class="k">CONSTRAINT</span> <span class="p">[</span><span class="n">PK_Customers</span><span class="p">]</span> <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="n">CLUSTERED</span> 
<span class="p">(</span>
	<span class="p">[</span><span class="n">Id</span><span class="p">]</span> <span class="k">ASC</span>
<span class="p">)</span><span class="k">WITH</span> <span class="p">(</span><span class="n">PAD_INDEX</span> <span class="o">=</span> <span class="k">OFF</span><span class="p">,</span> <span class="n">STATISTICS_NORECOMPUTE</span> <span class="o">=</span> <span class="k">OFF</span><span class="p">,</span> <span class="n">IGNORE_DUP_KEY</span> <span class="o">=</span> <span class="k">OFF</span><span class="p">,</span> <span class="n">ALLOW_ROW_LOCKS</span> <span class="o">=</span> <span class="k">ON</span><span class="p">,</span> <span class="n">ALLOW_PAGE_LOCKS</span> <span class="o">=</span> <span class="k">ON</span><span class="p">,</span> <span class="n">OPTIMIZE_FOR_SEQUENTIAL_KEY</span> <span class="o">=</span> <span class="k">OFF</span><span class="p">)</span> <span class="k">ON</span> <span class="p">[</span><span class="k">PRIMARY</span><span class="p">]</span>
<span class="p">)</span> <span class="k">ON</span> <span class="p">[</span><span class="k">PRIMARY</span><span class="p">]</span> <span class="n">TEXTIMAGE_ON</span> <span class="p">[</span><span class="k">PRIMARY</span><span class="p">]</span>
<span class="k">GO</span>
<span class="cm">/****** Object:  StoredProcedure [dbo].[spGetCustomersByEmail]    Script Date: 9/16/2021 11:44:55 AM ******/</span>
<span class="k">SET</span> <span class="n">ANSI_NULLS</span> <span class="k">ON</span>
<span class="k">GO</span>
<span class="k">SET</span> <span class="n">QUOTED_IDENTIFIER</span> <span class="k">ON</span>
<span class="k">GO</span>
<span class="c1">-- EXEC dbo.[spGetCustomersByEmail] @Email = 'mahedee.hasan@gmail.com'</span>
<span class="k">CREATE</span> <span class="k">PROCEDURE</span> <span class="p">[</span><span class="n">dbo</span><span class="p">].[</span><span class="n">spGetCustomersByEmail</span><span class="p">]</span>
	<span class="o">@</span><span class="n">Email</span> <span class="nb">Varchar</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
<span class="k">AS</span>
<span class="k">BEGIN</span>
	<span class="c1">-- SET NOCOUNT ON added to prevent extra result sets from</span>
	<span class="k">SET</span> <span class="n">NOCOUNT</span> <span class="k">ON</span><span class="p">;</span>
	<span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">Customers</span> <span class="k">WHERE</span> <span class="n">Email</span> <span class="o">=</span> <span class="o">@</span><span class="n">Email</span>
<span class="k">END</span>
<span class="k">GO</span>

</code></pre></div></div>

<p><strong>Step 2:</strong> Create an API project</p>
<ul>
  <li>Create an asp.net web api project name Ordering.API</li>
</ul>

<p><strong>Step 3:</strong> Install nuget packages</p>
<ul>
  <li>Install the following nuget packages in Ordering.API project.
    <div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">Install-Package</span> <span class="nf">Dapper</span>
<span class="nf">Install-Package</span> <span class="nf">Microsoft.Data.SqlClient</span>
</code></pre></div>    </div>
  </li>
</ul>

<p><strong>Step 4:</strong> Add connection string</p>
<ul>
  <li>Add connection string in appsettings.json
<strong>appsettings.json</strong></li>
</ul>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"Logging"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"LogLevel"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Default"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Information"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Microsoft"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Warning"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Microsoft.Hosting.Lifetime"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Information"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">

  </span><span class="nl">"ConnectionStrings"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"DefaultConnection"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Data Source=localhost;Initial Catalog=OrderingDB;User ID=sa;Password=yourdbpassword"</span><span class="w">
  </span><span class="p">},</span><span class="w">

  </span><span class="nl">"AllowedHosts"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*"</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<p><strong>Step 5:</strong> Create Entity classes</p>
<ul>
  <li>Create BaseEntity and Customer entity class in Entities folder as follows.</li>
</ul>

<p><strong>BaseEntity.cs</strong></p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.API.Entities</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">abstract</span> <span class="k">class</span> <span class="nc">BaseEntity</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="n">Int64</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>
<p><strong>Customer.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.API.Entities</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Customer</span> <span class="p">:</span> <span class="n">BaseEntity</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">FirstName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">LastName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Email</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">ContactNumber</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Address</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 6:</strong> Create DbConnector and Repository classes</p>
<ul>
  <li>Create DbConnector class in Repositories folder to connect with database</li>
</ul>

<p><strong>DbConnector.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Microsoft.Data.SqlClient</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Extensions.Configuration</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Data</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.API.Repositories</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">DbConnector</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IConfiguration</span> <span class="n">_configuration</span><span class="p">;</span>

        <span class="k">protected</span> <span class="nf">DbConnector</span><span class="p">(</span><span class="n">IConfiguration</span> <span class="n">configuration</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_configuration</span> <span class="p">=</span> <span class="n">configuration</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">protected</span> <span class="n">IDbConnection</span> <span class="nf">CreateConnection</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">SqlConnection</span><span class="p">(</span><span class="n">_configuration</span><span class="p">.</span><span class="nf">GetConnectionString</span><span class="p">(</span><span class="s">"DefaultConnection"</span><span class="p">));</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create Repository interfaces and concrete class in Repositories folder</li>
</ul>

<p><strong>IGenericRepository.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Threading.Tasks</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.API.Repositories</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">interface</span> <span class="nc">IGenericRepository</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;&gt;</span> <span class="nf">GetAllAsync</span><span class="p">();</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="nf">GetByIdAsync</span><span class="p">(</span><span class="n">Int64</span> <span class="n">id</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="nf">CreateAsync</span><span class="p">(</span><span class="n">T</span> <span class="n">entity</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="nf">UpdateAsync</span><span class="p">(</span><span class="n">T</span> <span class="n">entity</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="nf">DeleteAsync</span><span class="p">(</span><span class="n">T</span> <span class="n">entity</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>ICustomerRepository.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Ordering.API.Entities</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Threading.Tasks</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.API.Repositories</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">interface</span> <span class="nc">ICustomerRepository</span> <span class="p">:</span> <span class="n">IGenericRepository</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;&gt;</span> <span class="nf">GetAllByEmailId</span><span class="p">(</span><span class="kt">string</span> <span class="n">email</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>CustomerRepository.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Dapper</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Extensions.Configuration</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.API.Entities</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Data</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Linq</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Threading.Tasks</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.API.Repositories</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CustomerRepository</span> <span class="p">:</span> <span class="n">DbConnector</span><span class="p">,</span> <span class="n">ICustomerRepository</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">CustomerRepository</span><span class="p">(</span><span class="n">IConfiguration</span> <span class="n">configuration</span><span class="p">)</span>
            <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">configuration</span><span class="p">)</span>
        <span class="p">{</span>

        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="nf">CreateAsync</span><span class="p">(</span><span class="n">Customer</span> <span class="n">entity</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="kt">var</span> <span class="n">query</span> <span class="p">=</span> <span class="s">"INSERT INTO CUSTOMERS (FIRSTNAME, LASTNAME, EMAIL, CONTACTNUMBER, ADDRESS) "</span> <span class="p">+</span>
                    <span class="s">"VALUES (@FIRSTNAME, @LASTNAME, @EMAIL, @CONTACTNUMBER, @ADDRESS)"</span><span class="p">;</span>

                <span class="kt">var</span> <span class="n">parameters</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">DynamicParameters</span><span class="p">();</span>
                <span class="n">parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"FIRSTNAME"</span><span class="p">,</span> <span class="n">entity</span><span class="p">.</span><span class="n">FirstName</span><span class="p">);</span>
                <span class="n">parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"LASTNAME"</span><span class="p">,</span> <span class="n">entity</span><span class="p">.</span><span class="n">LastName</span><span class="p">);</span>
                <span class="n">parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"EMAIL"</span><span class="p">,</span> <span class="n">entity</span><span class="p">.</span><span class="n">Email</span><span class="p">);</span>
                <span class="n">parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"CONTACTNUMBER"</span><span class="p">,</span> <span class="n">entity</span><span class="p">.</span><span class="n">ContactNumber</span><span class="p">);</span>
                <span class="n">parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"ADDRESS"</span><span class="p">,</span> <span class="n">entity</span><span class="p">.</span><span class="n">Address</span><span class="p">);</span>

                <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">connection</span> <span class="p">=</span> <span class="nf">CreateConnection</span><span class="p">())</span>
                <span class="p">{</span>
                    <span class="k">return</span> <span class="p">(</span><span class="k">await</span> <span class="n">connection</span><span class="p">.</span><span class="nf">ExecuteAsync</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="n">parameters</span><span class="p">));</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">catch</span><span class="p">(</span><span class="n">Exception</span> <span class="n">exp</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">(</span><span class="n">exp</span><span class="p">.</span><span class="n">Message</span><span class="p">,</span> <span class="n">exp</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="nf">DeleteAsync</span><span class="p">(</span><span class="n">Customer</span> <span class="n">entity</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="kt">var</span> <span class="n">query</span> <span class="p">=</span> <span class="s">"DELETE FROM CUSTOMERS WHERE Id = @Id"</span><span class="p">;</span>

                <span class="kt">var</span> <span class="n">parameters</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">DynamicParameters</span><span class="p">();</span>
                <span class="n">parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"Id"</span><span class="p">,</span> <span class="n">entity</span><span class="p">.</span><span class="n">Id</span><span class="p">,</span> <span class="n">DbType</span><span class="p">.</span><span class="n">Int64</span><span class="p">);</span>

                <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">connection</span> <span class="p">=</span> <span class="nf">CreateConnection</span><span class="p">())</span>
                <span class="p">{</span>
                    <span class="k">return</span> <span class="p">(</span><span class="k">await</span> <span class="n">connection</span><span class="p">.</span><span class="nf">ExecuteAsync</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="n">parameters</span><span class="p">));</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">catch</span><span class="p">(</span><span class="n">Exception</span> <span class="n">exp</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">(</span><span class="n">exp</span><span class="p">.</span><span class="n">Message</span><span class="p">,</span> <span class="n">exp</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;&gt;</span> <span class="nf">GetAllAsync</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="kt">var</span> <span class="n">query</span> <span class="p">=</span> <span class="s">"SELECT * FROM CUSTOMERS"</span><span class="p">;</span>
                <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">connection</span> <span class="p">=</span> <span class="nf">CreateConnection</span><span class="p">())</span>
                <span class="p">{</span>
                    <span class="k">return</span> <span class="p">(</span><span class="k">await</span> <span class="n">connection</span><span class="p">.</span><span class="n">QueryAsync</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;(</span><span class="n">query</span><span class="p">)).</span><span class="nf">ToList</span><span class="p">();</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">catch</span><span class="p">(</span><span class="n">Exception</span> <span class="n">exp</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">(</span><span class="n">exp</span><span class="p">.</span><span class="n">Message</span><span class="p">,</span> <span class="n">exp</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>


        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;&gt;</span> <span class="nf">GetAllByEmailId</span><span class="p">(</span><span class="kt">string</span> <span class="n">email</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="kt">var</span> <span class="n">procedure</span> <span class="p">=</span> <span class="s">"spGetCustomersByEmail"</span><span class="p">;</span>
                <span class="n">DynamicParameters</span> <span class="n">parameters</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">DynamicParameters</span><span class="p">();</span>
                <span class="n">parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"@Email"</span><span class="p">,</span> <span class="n">email</span><span class="p">);</span>
                <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">connection</span> <span class="p">=</span> <span class="nf">CreateConnection</span><span class="p">())</span>
                <span class="p">{</span>
                    <span class="k">return</span> <span class="p">(</span><span class="k">await</span> <span class="n">connection</span><span class="p">.</span><span class="n">QueryAsync</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;(</span><span class="n">procedure</span><span class="p">,</span> <span class="n">parameters</span><span class="p">,</span> <span class="n">commandType</span><span class="p">:</span> <span class="n">CommandType</span><span class="p">.</span><span class="n">StoredProcedure</span><span class="p">)).</span><span class="nf">ToList</span><span class="p">();</span>
                <span class="p">}</span>

            <span class="p">}</span>
            <span class="k">catch</span><span class="p">(</span><span class="n">Exception</span> <span class="n">exp</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">(</span><span class="n">exp</span><span class="p">.</span><span class="n">Message</span><span class="p">,</span> <span class="n">exp</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="nf">GetByIdAsync</span><span class="p">(</span><span class="n">Int64</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="kt">var</span> <span class="n">query</span> <span class="p">=</span> <span class="s">"SELECT * FROM CUSTOMERS WHERE Id = @Id"</span><span class="p">;</span>
                <span class="kt">var</span> <span class="n">parameters</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">DynamicParameters</span><span class="p">();</span>
                <span class="n">parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"Id"</span><span class="p">,</span> <span class="n">id</span><span class="p">,</span> <span class="n">DbType</span><span class="p">.</span><span class="n">Int32</span><span class="p">);</span>

                <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">connection</span> <span class="p">=</span> <span class="nf">CreateConnection</span><span class="p">())</span>
                <span class="p">{</span>
                    <span class="k">return</span> <span class="p">(</span><span class="k">await</span> <span class="n">connection</span><span class="p">.</span><span class="n">QueryFirstOrDefaultAsync</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;(</span><span class="n">query</span><span class="p">,</span> <span class="n">parameters</span><span class="p">));</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">catch</span><span class="p">(</span><span class="n">Exception</span> <span class="n">exp</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">(</span><span class="n">exp</span><span class="p">.</span><span class="n">Message</span><span class="p">,</span> <span class="n">exp</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="nf">UpdateAsync</span><span class="p">(</span><span class="n">Customer</span> <span class="n">entity</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="kt">var</span> <span class="n">query</span> <span class="p">=</span> <span class="s">"UPDATE CUSTOMERS SET FIRSTNAME = @FIRSTNAME, LASTNAME = @LASTNAME, EMAIL = @EMAIL, CONTACTNUMBER = @CONTACTNUMBER, ADDRESS = @ADDRESS WHERE ID = @ID "</span><span class="p">;</span>
                <span class="kt">var</span> <span class="n">parameters</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">DynamicParameters</span><span class="p">();</span>
                <span class="n">parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"FIRSTNAME"</span><span class="p">,</span> <span class="n">entity</span><span class="p">.</span><span class="n">FirstName</span><span class="p">,</span> <span class="n">DbType</span><span class="p">.</span><span class="n">String</span><span class="p">);</span>
                <span class="n">parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"LASTNAME"</span><span class="p">,</span> <span class="n">entity</span><span class="p">.</span><span class="n">LastName</span><span class="p">,</span> <span class="n">DbType</span><span class="p">.</span><span class="n">String</span><span class="p">);</span>
                <span class="n">parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"CONTACTNUMBER"</span><span class="p">,</span> <span class="n">entity</span><span class="p">.</span><span class="n">ContactNumber</span><span class="p">,</span> <span class="n">DbType</span><span class="p">.</span><span class="n">String</span><span class="p">);</span>
                <span class="n">parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"ADDRESS"</span><span class="p">,</span> <span class="n">entity</span><span class="p">.</span><span class="n">Address</span><span class="p">,</span> <span class="n">DbType</span><span class="p">.</span><span class="n">String</span><span class="p">);</span>
                <span class="n">parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"EMAIL"</span><span class="p">,</span> <span class="n">entity</span><span class="p">.</span><span class="n">Email</span><span class="p">,</span> <span class="n">DbType</span><span class="p">.</span><span class="n">String</span><span class="p">);</span>
                <span class="n">parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"ID"</span><span class="p">,</span> <span class="n">entity</span><span class="p">.</span><span class="n">Id</span><span class="p">,</span> <span class="n">DbType</span><span class="p">.</span><span class="n">Int64</span><span class="p">);</span>

                <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">connection</span> <span class="p">=</span> <span class="nf">CreateConnection</span><span class="p">())</span>
                <span class="p">{</span>
                    <span class="k">return</span> <span class="p">(</span><span class="k">await</span> <span class="n">connection</span><span class="p">.</span><span class="nf">ExecuteAsync</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="n">parameters</span><span class="p">));</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">catch</span><span class="p">(</span><span class="n">Exception</span> <span class="n">exp</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">(</span><span class="n">exp</span><span class="p">.</span><span class="n">Message</span><span class="p">,</span> <span class="n">exp</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>
<p><strong>Step 7:</strong> Create Service class and interface</p>

<ul>
  <li>Create ICustomerService interface and CustomerService class in Services folder</li>
</ul>

<p><strong>ICustomerService.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Ordering.API.Entities</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Threading.Tasks</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.API.Services</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">interface</span> <span class="nc">ICustomerService</span>
    <span class="p">{</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;&gt;</span> <span class="nf">GetAllCustomer</span><span class="p">();</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;&gt;</span> <span class="nf">GetAllAsync</span><span class="p">();</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="nf">GetByIdAsync</span><span class="p">(</span><span class="n">Int64</span> <span class="n">id</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;&gt;</span> <span class="nf">GetAllByEmailId</span><span class="p">(</span><span class="kt">string</span> <span class="n">email</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="nf">CreateAsync</span><span class="p">(</span><span class="n">Customer</span> <span class="n">entity</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="nf">UpdateAsync</span><span class="p">(</span><span class="n">Customer</span> <span class="n">entity</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="nf">DeleteAsync</span><span class="p">(</span><span class="n">Customer</span> <span class="n">entity</span><span class="p">);</span>

    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>
<p><strong>CustomerService.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Ordering.API.Entities</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.API.Repositories</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Threading.Tasks</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.API.Services</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CustomerService</span> <span class="p">:</span> <span class="n">ICustomerService</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">ICustomerRepository</span> <span class="n">_customerRepository</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">CustomerService</span><span class="p">(</span><span class="n">ICustomerRepository</span> <span class="n">customerRepository</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_customerRepository</span> <span class="p">=</span> <span class="n">customerRepository</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="nf">CreateAsync</span><span class="p">(</span><span class="n">Customer</span> <span class="n">entity</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_customerRepository</span><span class="p">.</span><span class="nf">CreateAsync</span><span class="p">(</span><span class="n">entity</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="nf">DeleteAsync</span><span class="p">(</span><span class="n">Customer</span> <span class="n">entity</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_customerRepository</span><span class="p">.</span><span class="nf">DeleteAsync</span><span class="p">(</span><span class="n">entity</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;&gt;</span> <span class="nf">GetAllAsync</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_customerRepository</span><span class="p">.</span><span class="nf">GetAllAsync</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;&gt;</span> <span class="nf">GetAllByEmailId</span><span class="p">(</span><span class="kt">string</span> <span class="n">email</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_customerRepository</span><span class="p">.</span><span class="nf">GetAllByEmailId</span><span class="p">(</span><span class="n">email</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;&gt;</span> <span class="nf">GetAllCustomer</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_customerRepository</span><span class="p">.</span><span class="nf">GetAllAsync</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="nf">GetByIdAsync</span><span class="p">(</span><span class="n">Int64</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_customerRepository</span><span class="p">.</span><span class="nf">GetByIdAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="nf">UpdateAsync</span><span class="p">(</span><span class="n">Customer</span> <span class="n">entity</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_customerRepository</span><span class="p">.</span><span class="nf">UpdateAsync</span><span class="p">(</span><span class="n">entity</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 8:</strong> Create controller class</p>

<ul>
  <li>Create CustomerController in controllers folder</li>
</ul>

<p><strong>CustomerService.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Ordering.API.Entities</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.API.Repositories</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Threading.Tasks</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.API.Services</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CustomerService</span> <span class="p">:</span> <span class="n">ICustomerService</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">ICustomerRepository</span> <span class="n">_customerRepository</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">CustomerService</span><span class="p">(</span><span class="n">ICustomerRepository</span> <span class="n">customerRepository</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_customerRepository</span> <span class="p">=</span> <span class="n">customerRepository</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="nf">CreateAsync</span><span class="p">(</span><span class="n">Customer</span> <span class="n">entity</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_customerRepository</span><span class="p">.</span><span class="nf">CreateAsync</span><span class="p">(</span><span class="n">entity</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="nf">DeleteAsync</span><span class="p">(</span><span class="n">Customer</span> <span class="n">entity</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_customerRepository</span><span class="p">.</span><span class="nf">DeleteAsync</span><span class="p">(</span><span class="n">entity</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;&gt;</span> <span class="nf">GetAllAsync</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_customerRepository</span><span class="p">.</span><span class="nf">GetAllAsync</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;&gt;</span> <span class="nf">GetAllByEmailId</span><span class="p">(</span><span class="kt">string</span> <span class="n">email</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_customerRepository</span><span class="p">.</span><span class="nf">GetAllByEmailId</span><span class="p">(</span><span class="n">email</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;&gt;</span> <span class="nf">GetAllCustomer</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_customerRepository</span><span class="p">.</span><span class="nf">GetAllAsync</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="nf">GetByIdAsync</span><span class="p">(</span><span class="n">Int64</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_customerRepository</span><span class="p">.</span><span class="nf">GetByIdAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="nf">UpdateAsync</span><span class="p">(</span><span class="n">Customer</span> <span class="n">entity</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_customerRepository</span><span class="p">.</span><span class="nf">UpdateAsync</span><span class="p">(</span><span class="n">entity</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>
<p><strong>Step 9:</strong> Now run the application. You will see the output in swagger. Try CRUD operation using swagger.</p>

<p><strong><a href="https://github.com/mahedee/code-sample02/tree/main/DapperDemo">Source code</a></strong></p>]]></content><author><name>Mahedee Hasan</name></author><category term="ASP.NET Core" /><category term="C#" /><category term="Dapper" /><category term="ORM" /><category term="csharp" /><category term="aspnetcore" /><category term="dapper" /><category term="orm" /><summary type="html"><![CDATA[Dapper is mostly used, speedy and high performance ORM tools for Microsoft.NET platform. It is free and open source software. It is very easy to handle sql query using fewer lines of code. Here I will show you CRUD operation using inline query and stored procedure with an asp.net core web api project.]]></summary></entry><entry><title type="html">Playing with dapper using asp.net core</title><link href="https://mahedee.net//playing-with-dapper-with-aspnet-core/" rel="alternate" type="text/html" title="Playing with dapper using asp.net core" /><published>2021-05-05T00:00:00+00:00</published><updated>2021-05-05T00:00:00+00:00</updated><id>https://mahedee.net//playing-with-dapper-with-aspnet-core</id><content type="html" xml:base="https://mahedee.net//playing-with-dapper-with-aspnet-core/"><![CDATA[<!-- ## Implementation of swagger in a asp.net core web api using in memory database -->

<p><strong>Introduction</strong><br />
Dapper is mostly used, speedy and high performance ORM tools for Microsoft.NET platform. It is free and open source software. It is very easy to handle sql query using fewer lines of code. Here I will show you CRUD operation using inline query and stored procedure with an asp.net core web api project. So, let’s begin.</p>

<p><strong>Tools and technologies used</strong></p>

<ul>
  <li>Visual Studio 2019</li>
  <li>SQL Server 2019</li>
  <li>Dapper 2.0.90</li>
  <li>ASP.NET Core Web API</li>
</ul>

<p><strong>Implementation</strong></p>

<p><strong>Step 1:</strong> Create database, table and stored procedure.</p>
<ul>
  <li>Create a databse in sql server name - OrderingDB</li>
  <li>Run the following script to create table and stored procedure.</li>
</ul>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">USE</span> <span class="p">[</span><span class="n">OrderingDB</span><span class="p">]</span>
<span class="k">GO</span>
<span class="cm">/****** Object:  Table [dbo].[Customers]    Script Date: 9/16/2021 11:44:55 AM ******/</span>
<span class="k">SET</span> <span class="n">ANSI_NULLS</span> <span class="k">ON</span>
<span class="k">GO</span>
<span class="k">SET</span> <span class="n">QUOTED_IDENTIFIER</span> <span class="k">ON</span>
<span class="k">GO</span>
<span class="k">CREATE</span> <span class="k">TABLE</span> <span class="p">[</span><span class="n">dbo</span><span class="p">].[</span><span class="n">Customers</span><span class="p">](</span>
	<span class="p">[</span><span class="n">Id</span><span class="p">]</span> <span class="p">[</span><span class="nb">bigint</span><span class="p">]</span> <span class="k">IDENTITY</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
	<span class="p">[</span><span class="n">FirstName</span><span class="p">]</span> <span class="p">[</span><span class="n">nvarchar</span><span class="p">](</span><span class="k">max</span><span class="p">)</span> <span class="k">NULL</span><span class="p">,</span>
	<span class="p">[</span><span class="n">LastName</span><span class="p">]</span> <span class="p">[</span><span class="n">nvarchar</span><span class="p">](</span><span class="k">max</span><span class="p">)</span> <span class="k">NULL</span><span class="p">,</span>
	<span class="p">[</span><span class="n">Email</span><span class="p">]</span> <span class="p">[</span><span class="n">nvarchar</span><span class="p">](</span><span class="k">max</span><span class="p">)</span> <span class="k">NULL</span><span class="p">,</span>
	<span class="p">[</span><span class="n">ContactNumber</span><span class="p">]</span> <span class="p">[</span><span class="n">nvarchar</span><span class="p">](</span><span class="k">max</span><span class="p">)</span> <span class="k">NULL</span><span class="p">,</span>
	<span class="p">[</span><span class="n">Address</span><span class="p">]</span> <span class="p">[</span><span class="n">nvarchar</span><span class="p">](</span><span class="k">max</span><span class="p">)</span> <span class="k">NULL</span><span class="p">,</span>
 <span class="k">CONSTRAINT</span> <span class="p">[</span><span class="n">PK_Customers</span><span class="p">]</span> <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="n">CLUSTERED</span> 
<span class="p">(</span>
	<span class="p">[</span><span class="n">Id</span><span class="p">]</span> <span class="k">ASC</span>
<span class="p">)</span><span class="k">WITH</span> <span class="p">(</span><span class="n">PAD_INDEX</span> <span class="o">=</span> <span class="k">OFF</span><span class="p">,</span> <span class="n">STATISTICS_NORECOMPUTE</span> <span class="o">=</span> <span class="k">OFF</span><span class="p">,</span> <span class="n">IGNORE_DUP_KEY</span> <span class="o">=</span> <span class="k">OFF</span><span class="p">,</span> <span class="n">ALLOW_ROW_LOCKS</span> <span class="o">=</span> <span class="k">ON</span><span class="p">,</span> <span class="n">ALLOW_PAGE_LOCKS</span> <span class="o">=</span> <span class="k">ON</span><span class="p">,</span> <span class="n">OPTIMIZE_FOR_SEQUENTIAL_KEY</span> <span class="o">=</span> <span class="k">OFF</span><span class="p">)</span> <span class="k">ON</span> <span class="p">[</span><span class="k">PRIMARY</span><span class="p">]</span>
<span class="p">)</span> <span class="k">ON</span> <span class="p">[</span><span class="k">PRIMARY</span><span class="p">]</span> <span class="n">TEXTIMAGE_ON</span> <span class="p">[</span><span class="k">PRIMARY</span><span class="p">]</span>
<span class="k">GO</span>
<span class="cm">/****** Object:  StoredProcedure [dbo].[spGetCustomersByEmail]    Script Date: 9/16/2021 11:44:55 AM ******/</span>
<span class="k">SET</span> <span class="n">ANSI_NULLS</span> <span class="k">ON</span>
<span class="k">GO</span>
<span class="k">SET</span> <span class="n">QUOTED_IDENTIFIER</span> <span class="k">ON</span>
<span class="k">GO</span>
<span class="c1">-- EXEC dbo.[spGetCustomersByEmail] @Email = 'mahedee.hasan@gmail.com'</span>
<span class="k">CREATE</span> <span class="k">PROCEDURE</span> <span class="p">[</span><span class="n">dbo</span><span class="p">].[</span><span class="n">spGetCustomersByEmail</span><span class="p">]</span>
	<span class="o">@</span><span class="n">Email</span> <span class="nb">Varchar</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
<span class="k">AS</span>
<span class="k">BEGIN</span>
	<span class="c1">-- SET NOCOUNT ON added to prevent extra result sets from</span>
	<span class="k">SET</span> <span class="n">NOCOUNT</span> <span class="k">ON</span><span class="p">;</span>
	<span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">Customers</span> <span class="k">WHERE</span> <span class="n">Email</span> <span class="o">=</span> <span class="o">@</span><span class="n">Email</span>
<span class="k">END</span>
<span class="k">GO</span>

</code></pre></div></div>

<p><strong>Step 2:</strong> Create an API project</p>
<ul>
  <li>Create an asp.net web api project name Ordering.API</li>
</ul>

<p><strong>Step 3:</strong> Install nuget packages</p>
<ul>
  <li>Install the following nuget packages in Ordering.API project.
    <div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">Install-Package</span> <span class="nf">Dapper</span>
<span class="nf">Install-Package</span> <span class="nf">Microsoft.Data.SqlClient</span>
</code></pre></div>    </div>
  </li>
</ul>

<p><strong>Step 4:</strong> Add connection string</p>
<ul>
  <li>Add connection string in appsettings.json
<strong>appsettings.json</strong></li>
</ul>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"Logging"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"LogLevel"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Default"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Information"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Microsoft"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Warning"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Microsoft.Hosting.Lifetime"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Information"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">

  </span><span class="nl">"ConnectionStrings"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"DefaultConnection"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Data Source=localhost;Initial Catalog=OrderingDB;User ID=sa;Password=yourdbpassword"</span><span class="w">
  </span><span class="p">},</span><span class="w">

  </span><span class="nl">"AllowedHosts"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*"</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>

<p><strong>Step 5:</strong> Create Entity classes</p>
<ul>
  <li>Create BaseEntity and Customer entity class in Entities folder as follows.</li>
</ul>

<p><strong>BaseEntity.cs</strong></p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.API.Entities</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">abstract</span> <span class="k">class</span> <span class="nc">BaseEntity</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="n">Int64</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>
<p><strong>Customer.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.API.Entities</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Customer</span> <span class="p">:</span> <span class="n">BaseEntity</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">FirstName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">LastName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Email</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">ContactNumber</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Address</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 6:</strong> Create DbConnector and Repository classes</p>
<ul>
  <li>Create DbConnector class in Repositories folder to connect with database</li>
</ul>

<p><strong>DbConnector.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Microsoft.Data.SqlClient</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Extensions.Configuration</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Data</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.API.Repositories</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">DbConnector</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IConfiguration</span> <span class="n">_configuration</span><span class="p">;</span>

        <span class="k">protected</span> <span class="nf">DbConnector</span><span class="p">(</span><span class="n">IConfiguration</span> <span class="n">configuration</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_configuration</span> <span class="p">=</span> <span class="n">configuration</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">protected</span> <span class="n">IDbConnection</span> <span class="nf">CreateConnection</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">SqlConnection</span><span class="p">(</span><span class="n">_configuration</span><span class="p">.</span><span class="nf">GetConnectionString</span><span class="p">(</span><span class="s">"DefaultConnection"</span><span class="p">));</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>Create Repository interfaces and concrete class in Repositories folder</li>
</ul>

<p><strong>IGenericRepository.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Threading.Tasks</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.API.Repositories</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">interface</span> <span class="nc">IGenericRepository</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;&gt;</span> <span class="nf">GetAllAsync</span><span class="p">();</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="nf">GetByIdAsync</span><span class="p">(</span><span class="n">Int64</span> <span class="n">id</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="nf">CreateAsync</span><span class="p">(</span><span class="n">T</span> <span class="n">entity</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="nf">UpdateAsync</span><span class="p">(</span><span class="n">T</span> <span class="n">entity</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="nf">DeleteAsync</span><span class="p">(</span><span class="n">T</span> <span class="n">entity</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>ICustomerRepository.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Ordering.API.Entities</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Threading.Tasks</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.API.Repositories</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">interface</span> <span class="nc">ICustomerRepository</span> <span class="p">:</span> <span class="n">IGenericRepository</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span>
    <span class="p">{</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;&gt;</span> <span class="nf">GetAllByEmailId</span><span class="p">(</span><span class="kt">string</span> <span class="n">email</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>CustomerRepository.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Dapper</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Extensions.Configuration</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.API.Entities</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Data</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Linq</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Threading.Tasks</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.API.Repositories</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CustomerRepository</span> <span class="p">:</span> <span class="n">DbConnector</span><span class="p">,</span> <span class="n">ICustomerRepository</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">CustomerRepository</span><span class="p">(</span><span class="n">IConfiguration</span> <span class="n">configuration</span><span class="p">)</span>
            <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">configuration</span><span class="p">)</span>
        <span class="p">{</span>

        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="nf">CreateAsync</span><span class="p">(</span><span class="n">Customer</span> <span class="n">entity</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="kt">var</span> <span class="n">query</span> <span class="p">=</span> <span class="s">"INSERT INTO CUSTOMERS (FIRSTNAME, LASTNAME, EMAIL, CONTACTNUMBER, ADDRESS) "</span> <span class="p">+</span>
                    <span class="s">"VALUES (@FIRSTNAME, @LASTNAME, @EMAIL, @CONTACTNUMBER, @ADDRESS)"</span><span class="p">;</span>

                <span class="kt">var</span> <span class="n">parameters</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">DynamicParameters</span><span class="p">();</span>
                <span class="n">parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"FIRSTNAME"</span><span class="p">,</span> <span class="n">entity</span><span class="p">.</span><span class="n">FirstName</span><span class="p">);</span>
                <span class="n">parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"LASTNAME"</span><span class="p">,</span> <span class="n">entity</span><span class="p">.</span><span class="n">LastName</span><span class="p">);</span>
                <span class="n">parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"EMAIL"</span><span class="p">,</span> <span class="n">entity</span><span class="p">.</span><span class="n">Email</span><span class="p">);</span>
                <span class="n">parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"CONTACTNUMBER"</span><span class="p">,</span> <span class="n">entity</span><span class="p">.</span><span class="n">ContactNumber</span><span class="p">);</span>
                <span class="n">parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"ADDRESS"</span><span class="p">,</span> <span class="n">entity</span><span class="p">.</span><span class="n">Address</span><span class="p">);</span>

                <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">connection</span> <span class="p">=</span> <span class="nf">CreateConnection</span><span class="p">())</span>
                <span class="p">{</span>
                    <span class="k">return</span> <span class="p">(</span><span class="k">await</span> <span class="n">connection</span><span class="p">.</span><span class="nf">ExecuteAsync</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="n">parameters</span><span class="p">));</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">catch</span><span class="p">(</span><span class="n">Exception</span> <span class="n">exp</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">(</span><span class="n">exp</span><span class="p">.</span><span class="n">Message</span><span class="p">,</span> <span class="n">exp</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="nf">DeleteAsync</span><span class="p">(</span><span class="n">Customer</span> <span class="n">entity</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="kt">var</span> <span class="n">query</span> <span class="p">=</span> <span class="s">"DELETE FROM CUSTOMERS WHERE Id = @Id"</span><span class="p">;</span>

                <span class="kt">var</span> <span class="n">parameters</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">DynamicParameters</span><span class="p">();</span>
                <span class="n">parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"Id"</span><span class="p">,</span> <span class="n">entity</span><span class="p">.</span><span class="n">Id</span><span class="p">,</span> <span class="n">DbType</span><span class="p">.</span><span class="n">Int64</span><span class="p">);</span>

                <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">connection</span> <span class="p">=</span> <span class="nf">CreateConnection</span><span class="p">())</span>
                <span class="p">{</span>
                    <span class="k">return</span> <span class="p">(</span><span class="k">await</span> <span class="n">connection</span><span class="p">.</span><span class="nf">ExecuteAsync</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="n">parameters</span><span class="p">));</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">catch</span><span class="p">(</span><span class="n">Exception</span> <span class="n">exp</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">(</span><span class="n">exp</span><span class="p">.</span><span class="n">Message</span><span class="p">,</span> <span class="n">exp</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;&gt;</span> <span class="nf">GetAllAsync</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="kt">var</span> <span class="n">query</span> <span class="p">=</span> <span class="s">"SELECT * FROM CUSTOMERS"</span><span class="p">;</span>
                <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">connection</span> <span class="p">=</span> <span class="nf">CreateConnection</span><span class="p">())</span>
                <span class="p">{</span>
                    <span class="k">return</span> <span class="p">(</span><span class="k">await</span> <span class="n">connection</span><span class="p">.</span><span class="n">QueryAsync</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;(</span><span class="n">query</span><span class="p">)).</span><span class="nf">ToList</span><span class="p">();</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">catch</span><span class="p">(</span><span class="n">Exception</span> <span class="n">exp</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">(</span><span class="n">exp</span><span class="p">.</span><span class="n">Message</span><span class="p">,</span> <span class="n">exp</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>


        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;&gt;</span> <span class="nf">GetAllByEmailId</span><span class="p">(</span><span class="kt">string</span> <span class="n">email</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="kt">var</span> <span class="n">procedure</span> <span class="p">=</span> <span class="s">"spGetCustomersByEmail"</span><span class="p">;</span>
                <span class="n">DynamicParameters</span> <span class="n">parameters</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">DynamicParameters</span><span class="p">();</span>
                <span class="n">parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"@Email"</span><span class="p">,</span> <span class="n">email</span><span class="p">);</span>
                <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">connection</span> <span class="p">=</span> <span class="nf">CreateConnection</span><span class="p">())</span>
                <span class="p">{</span>
                    <span class="k">return</span> <span class="p">(</span><span class="k">await</span> <span class="n">connection</span><span class="p">.</span><span class="n">QueryAsync</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;(</span><span class="n">procedure</span><span class="p">,</span> <span class="n">parameters</span><span class="p">,</span> <span class="n">commandType</span><span class="p">:</span> <span class="n">CommandType</span><span class="p">.</span><span class="n">StoredProcedure</span><span class="p">)).</span><span class="nf">ToList</span><span class="p">();</span>
                <span class="p">}</span>

            <span class="p">}</span>
            <span class="k">catch</span><span class="p">(</span><span class="n">Exception</span> <span class="n">exp</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">(</span><span class="n">exp</span><span class="p">.</span><span class="n">Message</span><span class="p">,</span> <span class="n">exp</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="nf">GetByIdAsync</span><span class="p">(</span><span class="n">Int64</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="kt">var</span> <span class="n">query</span> <span class="p">=</span> <span class="s">"SELECT * FROM CUSTOMERS WHERE Id = @Id"</span><span class="p">;</span>
                <span class="kt">var</span> <span class="n">parameters</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">DynamicParameters</span><span class="p">();</span>
                <span class="n">parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"Id"</span><span class="p">,</span> <span class="n">id</span><span class="p">,</span> <span class="n">DbType</span><span class="p">.</span><span class="n">Int32</span><span class="p">);</span>

                <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">connection</span> <span class="p">=</span> <span class="nf">CreateConnection</span><span class="p">())</span>
                <span class="p">{</span>
                    <span class="k">return</span> <span class="p">(</span><span class="k">await</span> <span class="n">connection</span><span class="p">.</span><span class="n">QueryFirstOrDefaultAsync</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;(</span><span class="n">query</span><span class="p">,</span> <span class="n">parameters</span><span class="p">));</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">catch</span><span class="p">(</span><span class="n">Exception</span> <span class="n">exp</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">(</span><span class="n">exp</span><span class="p">.</span><span class="n">Message</span><span class="p">,</span> <span class="n">exp</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="nf">UpdateAsync</span><span class="p">(</span><span class="n">Customer</span> <span class="n">entity</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="kt">var</span> <span class="n">query</span> <span class="p">=</span> <span class="s">"UPDATE CUSTOMERS SET FIRSTNAME = @FIRSTNAME, LASTNAME = @LASTNAME, EMAIL = @EMAIL, CONTACTNUMBER = @CONTACTNUMBER, ADDRESS = @ADDRESS WHERE ID = @ID "</span><span class="p">;</span>
                <span class="kt">var</span> <span class="n">parameters</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">DynamicParameters</span><span class="p">();</span>
                <span class="n">parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"FIRSTNAME"</span><span class="p">,</span> <span class="n">entity</span><span class="p">.</span><span class="n">FirstName</span><span class="p">,</span> <span class="n">DbType</span><span class="p">.</span><span class="n">String</span><span class="p">);</span>
                <span class="n">parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"LASTNAME"</span><span class="p">,</span> <span class="n">entity</span><span class="p">.</span><span class="n">LastName</span><span class="p">,</span> <span class="n">DbType</span><span class="p">.</span><span class="n">String</span><span class="p">);</span>
                <span class="n">parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"CONTACTNUMBER"</span><span class="p">,</span> <span class="n">entity</span><span class="p">.</span><span class="n">ContactNumber</span><span class="p">,</span> <span class="n">DbType</span><span class="p">.</span><span class="n">String</span><span class="p">);</span>
                <span class="n">parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"ADDRESS"</span><span class="p">,</span> <span class="n">entity</span><span class="p">.</span><span class="n">Address</span><span class="p">,</span> <span class="n">DbType</span><span class="p">.</span><span class="n">String</span><span class="p">);</span>
                <span class="n">parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"EMAIL"</span><span class="p">,</span> <span class="n">entity</span><span class="p">.</span><span class="n">Email</span><span class="p">,</span> <span class="n">DbType</span><span class="p">.</span><span class="n">String</span><span class="p">);</span>
                <span class="n">parameters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"ID"</span><span class="p">,</span> <span class="n">entity</span><span class="p">.</span><span class="n">Id</span><span class="p">,</span> <span class="n">DbType</span><span class="p">.</span><span class="n">Int64</span><span class="p">);</span>

                <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">connection</span> <span class="p">=</span> <span class="nf">CreateConnection</span><span class="p">())</span>
                <span class="p">{</span>
                    <span class="k">return</span> <span class="p">(</span><span class="k">await</span> <span class="n">connection</span><span class="p">.</span><span class="nf">ExecuteAsync</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="n">parameters</span><span class="p">));</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">catch</span><span class="p">(</span><span class="n">Exception</span> <span class="n">exp</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">(</span><span class="n">exp</span><span class="p">.</span><span class="n">Message</span><span class="p">,</span> <span class="n">exp</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>
<p><strong>Step 7:</strong> Create Service class and interface</p>

<ul>
  <li>Create ICustomerService interface and CustomerService class in Services folder</li>
</ul>

<p><strong>ICustomerService.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Ordering.API.Entities</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Threading.Tasks</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.API.Services</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">interface</span> <span class="nc">ICustomerService</span>
    <span class="p">{</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;&gt;</span> <span class="nf">GetAllCustomer</span><span class="p">();</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;&gt;</span> <span class="nf">GetAllAsync</span><span class="p">();</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="nf">GetByIdAsync</span><span class="p">(</span><span class="n">Int64</span> <span class="n">id</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;&gt;</span> <span class="nf">GetAllByEmailId</span><span class="p">(</span><span class="kt">string</span> <span class="n">email</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="nf">CreateAsync</span><span class="p">(</span><span class="n">Customer</span> <span class="n">entity</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="nf">UpdateAsync</span><span class="p">(</span><span class="n">Customer</span> <span class="n">entity</span><span class="p">);</span>
        <span class="n">Task</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="nf">DeleteAsync</span><span class="p">(</span><span class="n">Customer</span> <span class="n">entity</span><span class="p">);</span>

    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>
<p><strong>CustomerService.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Ordering.API.Entities</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.API.Repositories</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Threading.Tasks</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.API.Services</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CustomerService</span> <span class="p">:</span> <span class="n">ICustomerService</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">ICustomerRepository</span> <span class="n">_customerRepository</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">CustomerService</span><span class="p">(</span><span class="n">ICustomerRepository</span> <span class="n">customerRepository</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_customerRepository</span> <span class="p">=</span> <span class="n">customerRepository</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="nf">CreateAsync</span><span class="p">(</span><span class="n">Customer</span> <span class="n">entity</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_customerRepository</span><span class="p">.</span><span class="nf">CreateAsync</span><span class="p">(</span><span class="n">entity</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="nf">DeleteAsync</span><span class="p">(</span><span class="n">Customer</span> <span class="n">entity</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_customerRepository</span><span class="p">.</span><span class="nf">DeleteAsync</span><span class="p">(</span><span class="n">entity</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;&gt;</span> <span class="nf">GetAllAsync</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_customerRepository</span><span class="p">.</span><span class="nf">GetAllAsync</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;&gt;</span> <span class="nf">GetAllByEmailId</span><span class="p">(</span><span class="kt">string</span> <span class="n">email</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_customerRepository</span><span class="p">.</span><span class="nf">GetAllByEmailId</span><span class="p">(</span><span class="n">email</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;&gt;</span> <span class="nf">GetAllCustomer</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_customerRepository</span><span class="p">.</span><span class="nf">GetAllAsync</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="nf">GetByIdAsync</span><span class="p">(</span><span class="n">Int64</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_customerRepository</span><span class="p">.</span><span class="nf">GetByIdAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="nf">UpdateAsync</span><span class="p">(</span><span class="n">Customer</span> <span class="n">entity</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_customerRepository</span><span class="p">.</span><span class="nf">UpdateAsync</span><span class="p">(</span><span class="n">entity</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Step 8:</strong> Create controller class</p>

<ul>
  <li>Create CustomerController in controllers folder</li>
</ul>

<p><strong>CustomerService.cs</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Ordering.API.Entities</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.API.Repositories</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Threading.Tasks</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.API.Services</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CustomerService</span> <span class="p">:</span> <span class="n">ICustomerService</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">ICustomerRepository</span> <span class="n">_customerRepository</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">CustomerService</span><span class="p">(</span><span class="n">ICustomerRepository</span> <span class="n">customerRepository</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_customerRepository</span> <span class="p">=</span> <span class="n">customerRepository</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="nf">CreateAsync</span><span class="p">(</span><span class="n">Customer</span> <span class="n">entity</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_customerRepository</span><span class="p">.</span><span class="nf">CreateAsync</span><span class="p">(</span><span class="n">entity</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="nf">DeleteAsync</span><span class="p">(</span><span class="n">Customer</span> <span class="n">entity</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_customerRepository</span><span class="p">.</span><span class="nf">DeleteAsync</span><span class="p">(</span><span class="n">entity</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;&gt;</span> <span class="nf">GetAllAsync</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_customerRepository</span><span class="p">.</span><span class="nf">GetAllAsync</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;&gt;</span> <span class="nf">GetAllByEmailId</span><span class="p">(</span><span class="kt">string</span> <span class="n">email</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_customerRepository</span><span class="p">.</span><span class="nf">GetAllByEmailId</span><span class="p">(</span><span class="n">email</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;&gt;</span> <span class="nf">GetAllCustomer</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_customerRepository</span><span class="p">.</span><span class="nf">GetAllAsync</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;</span> <span class="nf">GetByIdAsync</span><span class="p">(</span><span class="n">Int64</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_customerRepository</span><span class="p">.</span><span class="nf">GetByIdAsync</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="nf">UpdateAsync</span><span class="p">(</span><span class="n">Customer</span> <span class="n">entity</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">_customerRepository</span><span class="p">.</span><span class="nf">UpdateAsync</span><span class="p">(</span><span class="n">entity</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>
<p><strong>Step 9:</strong> Now run the application. You will see the output in swagger. Try CRUD operation using swagger.</p>

<p><strong><a href="https://github.com/mahedee/code-sample02/tree/main/DapperDemo">Source code</a></strong></p>]]></content><author><name>Mahedee Hasan</name></author><category term="ASP.NET Core" /><category term="C#" /><category term="Dapper" /><category term="ORM" /><category term="csharp" /><category term="aspnetcore" /><category term="dapper" /><category term="orm" /><summary type="html"><![CDATA[Dapper is mostly used, speedy and high performance ORM tools for Microsoft.NET platform. It is free and open source software. It is very easy to handle sql query using fewer lines of code. Here I will show you CRUD operation using inline query and stored procedure with an asp.net core web api project.]]></summary></entry><entry><title type="html">How to inject a DbContext instance into an IHostedService</title><link href="https://mahedee.net//how-to-inject-a-dbcontext-instance-into-an-IHostedService/" rel="alternate" type="text/html" title="How to inject a DbContext instance into an IHostedService" /><published>2021-04-03T00:00:00+00:00</published><updated>2021-04-03T00:00:00+00:00</updated><id>https://mahedee.net//how-to-inject-a-dbcontext-instance-into-an-IHostedService</id><content type="html" xml:base="https://mahedee.net//how-to-inject-a-dbcontext-instance-into-an-IHostedService/"><![CDATA[<!-- ## Implementation of swagger in a asp.net core web api using in memory database -->

<p><strong>Problem Statement</strong></p>

<p>Few days back, I was working on a class which implemented IHostedService. I was working on asp.net core project. I tried to use DbContext class using constructor. But, it shows the following error -</p>

<div class="language-ps highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">Cannot</span> <span class="nf">consume</span> <span class="nf">scoped</span> <span class="nf">service</span> <span class="nf">'Microsoft.EntityFrameworkCore.DbContextOptions'</span> <span class="nf">from</span> <span class="nf">singleton</span> <span class="nf">'Microsoft.Extensions.Hosting.IHostedService'.</span>
</code></pre></div></div>
<p>I tried it several way but I failed.</p>

<p><strong>Solution</strong><br />
<strong>Step 1:</strong> I have injected IserviceScopeFactory and solve the problem as like below.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Microsoft.Extensions.DependencyInjection</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Extensions.Hosting</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Newtonsoft.Json</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Ordering.API.Db</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Plain.RabbitMQ</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Shared.Models</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Linq</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Threading</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Threading.Tasks</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Ordering.API</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">CatalogResponseListener</span> <span class="p">:</span> <span class="n">IHostedService</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="n">ISubscriber</span> <span class="n">_subscriber</span><span class="p">;</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IServiceScopeFactory</span> <span class="n">_scopeFactory</span><span class="p">;</span>
        <span class="k">public</span> <span class="nf">CatalogResponseListener</span><span class="p">(</span><span class="n">ISubscriber</span> <span class="n">subscripber</span><span class="p">,</span> <span class="n">IServiceScopeFactory</span> <span class="n">scopeFactory</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="n">_subscriber</span> <span class="p">=</span> <span class="n">subscripber</span><span class="p">;</span>
            <span class="k">this</span><span class="p">.</span><span class="n">_scopeFactory</span> <span class="p">=</span> <span class="n">scopeFactory</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">public</span> <span class="n">Task</span> <span class="nf">StartAsync</span><span class="p">(</span><span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_subscriber</span><span class="p">.</span><span class="nf">Subscribe</span><span class="p">(</span><span class="n">Subscribe</span><span class="p">);</span>
            <span class="k">return</span> <span class="n">Task</span><span class="p">.</span><span class="n">CompletedTask</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="kt">bool</span> <span class="nf">Subscribe</span><span class="p">(</span><span class="kt">string</span> <span class="n">message</span><span class="p">,</span> <span class="n">IDictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">object</span><span class="p">&gt;</span> <span class="n">header</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">response</span> <span class="p">=</span> <span class="n">JsonConvert</span><span class="p">.</span><span class="n">DeserializeObject</span><span class="p">&lt;</span><span class="n">CatalogResponse</span><span class="p">&gt;(</span><span class="n">message</span><span class="p">);</span>

            <span class="k">if</span><span class="p">(!</span><span class="n">response</span><span class="p">.</span><span class="n">IsSuccess</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">scope</span> <span class="p">=</span> <span class="n">_scopeFactory</span><span class="p">.</span><span class="nf">CreateScope</span><span class="p">())</span>
                <span class="p">{</span>
                    <span class="kt">var</span> <span class="n">_orderingContext</span> <span class="p">=</span> <span class="n">scope</span><span class="p">.</span><span class="n">ServiceProvider</span><span class="p">.</span><span class="n">GetRequiredService</span><span class="p">&lt;</span><span class="n">OrderingContext</span><span class="p">&gt;();</span>
                    <span class="c1">// Remove ordering item</span>
                    <span class="kt">var</span> <span class="n">orderItem</span> <span class="p">=</span> <span class="n">_orderingContext</span><span class="p">.</span><span class="n">OrderItems</span><span class="p">.</span><span class="nf">Where</span><span class="p">(</span><span class="n">o</span> <span class="p">=&gt;</span> <span class="n">o</span><span class="p">.</span><span class="n">ProductId</span> <span class="p">==</span> <span class="n">response</span><span class="p">.</span><span class="n">CatalogId</span><span class="p">).</span><span class="nf">FirstOrDefault</span><span class="p">();</span>
                    <span class="n">_orderingContext</span><span class="p">.</span><span class="n">OrderItems</span><span class="p">.</span><span class="nf">Remove</span><span class="p">(</span><span class="n">orderItem</span><span class="p">);</span>
                    <span class="n">_orderingContext</span><span class="p">.</span><span class="nf">SaveChanges</span><span class="p">();</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">Task</span> <span class="nf">StopAsync</span><span class="p">(</span><span class="n">CancellationToken</span> <span class="n">cancellationToken</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">Task</span><span class="p">.</span><span class="n">CompletedTask</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<!-- [Download source code](https://github.com/mahedee/code-sample/tree/master/SwaggerInMemory/SMS.Web) -->]]></content><author><name>Mahedee Hasan</name></author><category term="ASP.NET Core" /><category term="C#" /><category term="Troubleshooting" /><category term="csharp" /><category term="aspnetcore" /><category term="troubleshooting" /><summary type="html"><![CDATA[Few days back, I was working on a class which implemented IHostedService. I was working on asp.net core project. I tried to use DbContext class using constructor.]]></summary></entry></feed>