var store = [{
        "title": "Reference Articles",
        "excerpt":"Reference   ","categories": [],
        "tags": [],
        "url": "/reference-articles.html/",
        "teaser":null},{
        "title": "This is a demo article",
        "excerpt":"  Step1: Select ASP.NET Web Application (.NET Framework)   Step2: Type project and solution name  Type project name as “MVCAuth” and also solution name as “MVC Auth”   Step 3: Select project template     Select project template as Web Application (Model-View-Controller)   Change authentication to Individual User Authentication   Click create button   Step 4: Change web.config file   &lt;add name=\"DefaultConnection\" connectionString=\"Data Source=localhost;Initial Catalog=AuthDB;Persist Security Info=False;User ID=sa; Password=mahedee.net; Pooling=False;MultipleActiveResultSets=False;Encrypt=False;TrustServerCertificate=False\" providerName=\"System.Data.SqlClient\" /&gt;   Step 5: Add some model and view model class     Create Role Model class in Models folder as follows      public class Role : IdentityRole   {    }           Create UserRoleVM View Model class in Models folder as follows       public class UserRoleVM   {       public string UserId { get; set; }       public string RoleId { get; set; }        public string UserName { get; set; }       public string RoleName { get; set; }   }           Create UsersRolesVM View Model class in Models folder as follows       public class UsersRolesVM   {       //public string UserName { get; set; }       public ApplicationUser User { get; set; }        public IEnumerable&lt;string&gt; RoleNames { get; set; }   }           Step 6: Add Controllers to the application     Add RolesController in Controllers folder   Choose template MVC 5 Controller with read/write actions   Modify RolesController as follows       public class RolesController : Controller     {         private ApplicationDbContext db = new ApplicationDbContext();         // GET: Roles         public ActionResult Index()         {             var roleStore = new RoleStore&lt;IdentityRole&gt;(db);             var roleManager = new RoleManager&lt;IdentityRole&gt;(roleStore);             var roles = roleManager.Roles.ToList();             return View(roles);         }          // GET: Roles/Details/5         public ActionResult Details(int id)         {             return View();         }          // GET: Roles/Create         public ActionResult Create()         {             return View();         }          // POST: Roles/Create         [HttpPost]         public ActionResult Create(IdentityRole role)         {             try             {                 // TODO: Add insert logic here                  var roleStore = new RoleStore&lt;IdentityRole&gt;(db);                 var roleManager = new RoleManager&lt;IdentityRole&gt;(roleStore);                  if(!roleManager.RoleExists(role.Name))                 {                     roleManager.Create(role);                 }                  return RedirectToAction(\"Index\");             }             catch             {                 return View();             }         }          // GET: Roles/Edit/5         public ActionResult Edit(int id)         {             return View();         }          // POST: Roles/Edit/5         [HttpPost]         public ActionResult Edit(int id, FormCollection collection)         {             try             {                 // TODO: Add update logic here                  return RedirectToAction(\"Index\");             }             catch             {                 return View();             }         }          // GET: Roles/Delete/5         public ActionResult Delete(int id)         {             return View();         }          // POST: Roles/Delete/5         [HttpPost]         public ActionResult Delete(int id, FormCollection collection)         {             try             {                 // TODO: Add delete logic here                  return RedirectToAction(\"Index\");             }             catch             {                 return View();             }         }     }   Sites that may have content authored from various individuals can be accommodated by using data files.   To attribute an author to a post or page that is different from the site author specified in _config.yml:   Step 1. Create _data/authors.yml and add authors using the following format. Anything variables found under author in _config.yml can be used (e.g. name, bio, avatar, author links, etc.).   # /_data/authors.yml  Billy Rick:   name        : \"Billy Rick\"   bio         : \"What do you want, jewels? I am a very extravagant man.\"   avatar      : \"/assets/images/bio-photo-2.jpg\"   links:     - label: \"Email\"       icon: \"fas fa-fw fa-envelope-square\"       url: \"mailto:billyrick@rick.com\"     - label: \"Website\"       icon: \"fas fa-fw fa-link\"       url: \"https://thewhip.com\"     - label: \"Twitter\"       icon: \"fab fa-fw fa-twitter-square\"       url: \"https://twitter.com/extravagantman\"  Cornelius Fiddlebone:   name        : \"Cornelius Fiddlebone\"   bio         : \"I ordered what?\"   avatar      : \"/assets/images/bio-photo.jpg\"   links:     - label: \"Email\"       icon: \"fas fa-fw fa-envelope-square\"       url: \"mailto:cornelius@thewhip.com\"     - label: \"Twitter\"       icon: \"fab fa-fw fa-twitter-square\"       url: \"https://twitter.com/rhymeswithsackit\"   Step 2. Assign one of the authors in authors.yml to a post or page you wish to override the site.author with.   Example: To assign Billy Rick as an author for a post the following YAML Front Matter would be applied:   author: Billy Rick  ","categories": ["Dot Net","C#","ASP.NET"],
        "tags": ["c-sharp","asp_net","article"],
        "url": "/demo-article.html/",
        "teaser":null},{
        "title": "Layout: Author Override",
        "excerpt":"Sites that may have content authored from various individuals can be accommodated by using data files.   To attribute an author to a post or page that is different from the site author specified in _config.yml:   Step 1. Create _data/authors.yml and add authors using the following format. Anything variables found under author in _config.yml can be used (e.g. name, bio, avatar, author links, etc.).   # /_data/authors.yml  Billy Rick:   name        : \"Billy Rick\"   bio         : \"What do you want, jewels? I am a very extravagant man.\"   avatar      : \"/assets/images/bio-photo-2.jpg\"   links:     - label: \"Email\"       icon: \"fas fa-fw fa-envelope-square\"       url: \"mailto:billyrick@rick.com\"     - label: \"Website\"       icon: \"fas fa-fw fa-link\"       url: \"https://thewhip.com\"     - label: \"Twitter\"       icon: \"fab fa-fw fa-twitter-square\"       url: \"https://twitter.com/extravagantman\"  Cornelius Fiddlebone:   name        : \"Cornelius Fiddlebone\"   bio         : \"I ordered what?\"   avatar      : \"/assets/images/bio-photo.jpg\"   links:     - label: \"Email\"       icon: \"fas fa-fw fa-envelope-square\"       url: \"mailto:cornelius@thewhip.com\"     - label: \"Twitter\"       icon: \"fab fa-fw fa-twitter-square\"       url: \"https://twitter.com/rhymeswithsackit\"   Step 2. Assign one of the authors in authors.yml to a post or page you wish to override the site.author with.   Example: To assign Billy Rick as an author for a post the following YAML Front Matter would be applied:   author: Billy Rick  ","categories": ["Sample category"],
        "tags": ["simple","move it"],
        "url": "/test-file.html/",
        "teaser":null},{
        "title": "Install jekyll on windows step by step",
        "excerpt":"Install jekyll on windows step by step   Here is the list of tools or plugins I needed to install to run the blog locally.   Windows      Install jekyll on windows   VSCode extensions      Markdown All in One   Code Spell Checker   Steps      run bundle install (first time only)   bundle exec jekyll serve to serve the application   Tools that didn’t work   For some unknown reason, installing via choco didn’t didn’t work.      Chocolatey (Kept)   Jekyll (Removed)  ","categories": ["Blog","Configuration"],
        "tags": ["jekyll","change it"],
        "url": "/install-jekyll-on-windows.html/",
        "teaser":null},{
        "title": "Important notes",
        "excerpt":"Some important notes   How to run this site using visual studio code  bundle exec jekyll serve  Application will run here  http://127.0.0.1:4000/   or you can type  bundle exec jekyll serve -o  which will build the application run on the url   Tips for visual studio code  To view command in visual studio code  Type ctrl+shift+p   Important Links     Architecture Playbook   Government Digital Service   Minimal Mistakes - A Jekyll theme   Repository for this website  Storage Repository: https://github.com/mahedee/my-blogs  Site Repository : https://github.com/mahedee/mahedee.github.io   Convert markdown to jekyll  ","categories": ["Blog","Visual Studio Code","Links"],
        "tags": ["notes","unpublished"],
        "url": "/important-note-unpublished.html/",
        "teaser":null},{
        "title": "Markdown Syntax",
        "excerpt":"Display Image  Markdown syntax  ![Image Title](imageurl.jpg)  Rendered output     Hyperlink  Markdown syntax  [Source Code](https://github.com/mahedee/code-sample/tree/master/auth-demo/MVCAuth)  Rendered output  Source Code   Commenting on markdown   &lt;!-- Single or multiline commenting--&gt;      ","categories": ["Github"],
        "tags": ["markdown","md"],
        "url": "/markdown-syntax.html/",
        "teaser":null},{
        "title": "Essential plugins for Visual Studio code",
        "excerpt":"Essential plugins for Visual Studio code      Markdown Preview Enhanced     ","categories": ["Github"],
        "tags": ["markdown","md"],
        "url": "/essential-plugins-for-vs-code.html/",
        "teaser":null},{
        "title": "Getting Started with GitHub",
        "excerpt":"Getting Started with GitHub          Create a GitHub account.            Setting up git on your computer              Download and install the latest version of Git.       Set your username in Git.                Create a repository       Clone your repository    For example:     git clone https://github.com/mahedee/eSchool.git       Pull and push to repository   Pull command uses to get updated files from github repository to your local machine  git pull --rebase upstream master or  git pull   Push command uses to sync your local file to github repository   Add files for the commit  git add .  Write a message for the commit  git commit -m \"complete feature-joining\"  git push origin feature-joining or  git push  ","categories": ["Source Control"],
        "tags": ["git","source-control"],
        "url": "/getting-started-with-github.html/",
        "teaser":null},{
        "title": "Visual Studio Code Tips and Tricks (Part - 01)",
        "excerpt":"  Visual studio code extensions which I use most     Markdown Preview Enhanced   Code Spell Checker  ","categories": ["Source Control"],
        "tags": ["git","source-control"],
        "url": "/visual-studio-code-tips-and-tricks-part-01.html/",
        "teaser":null},{
        "title": "Branching and merging in GitHub",
        "excerpt":"Branching and merging in GitHub      To create a branch     $ git checkout -b branch01 Switched to a new branch 'branch01' or  $git branch branch01       To switch to a branch  ```github $git checkout    Example $git checkout branch03   * **Push files to the a branch**   First switch to the specific branch. Then add or modify files. To add files for the commit run the following command. ```github $ git add .   $ git push origin &lt;branch name&gt;  Example: $ git push origin branch01      Merge branch01 with master branch     $ git checkout master Switched to branch 'master' Your branch is up-to-date with 'origin/master'.       $ git merge branch01   $ git commit -m \"merge branch01\"   $ git push   References     Git Branching - Basic Branching and Merging  ","categories": ["Source Control"],
        "tags": ["git","source-control"],
        "url": "/branching-and-merging.html/",
        "teaser":null},{
        "title": "Necessary SQL query in MS SQL",
        "excerpt":"     Search a table name in a database in MS SQL Server     SELECT * FROM INFORMATION_SCHEMA.TABLES  WHERE TABLE_NAME LIKE '%tablename%'           If you want to see all column of a joining table   select Region.* from Branch inner join Region on Branch.RegionId = Region.Id     ","categories": ["SQ"],
        "tags": ["testag"],
        "url": "/necessary-sql-query-in-ms-sql.html/",
        "teaser":null},{
        "title": "Visual studio tips and tricks (Part 01)",
        "excerpt":"  Set bookmarks in code     Keep your cursor in a specific line   Go to View-&gt;Bookmark Window   Click Bookmark icon at the upper right or at the bottom of bookmark windows   To jump between Bookmarks:   Ctrl + K + N (for next)  and  Ctrl + K + P (for previous)  To toggle a Bookmark on/off for a line:  Ctrl + K + K    ","categories": ["Visual Studio"],
        "tags": ["testag"],
        "url": "/visual-studio-tips-and-tricks-part-01.html/",
        "teaser":null},{
        "title": "Resolve git conflict using meld",
        "excerpt":"Resolve git conflict using meld      Install meld in windows   Configure meld in your pc            Edit gitconfig file in C:\\Users&lt;username&gt;\\       Add following line in the gitconfig file   ```text   [diff]   tool = meld   [difftool “meld”]    path = C:/Program Files (x86)/Meld/Meld.exe    [difftool]   prompt = false           ```       Now check and resolve conflict using the following command     $ git difftool origin/master       Refereces     Git Tutorial 7: Diff and Merge using meld 2019  ","categories": ["Source Control"],
        "tags": ["git","source-control"],
        "url": "/resolve-git-conflict.html/",
        "teaser":null},{
        "title": "Authentication and authorization using asp.net core web api and JWT (Part 01)",
        "excerpt":"  Application overview  Token based authentication has been the most popular authentication technique for the last couple of years. Before that we used session based authentication. In session based authentication, client saves session id in the cookie. In token-based authentication, token is given to client instead of session. This token contains encrypted information of user with expiry time. In this article, I will show you, how to create authentication application using asp.net core web api and JWT(Json Web Token).   Tools and Technology used  The following tools and technologies has been used for this application     Visual Studio 2019   Visual C#   ASP.NET Core Web API   Postman - for api testing   Let’s have a look to the implementation of the project.   Step 1: Create an asp.net core web api application     Select File-&gt;New-&gt;Project-&gt;ASP.NET Core Web Application   Choose project and solution name   Click “Create” button   Step 2: Choose project template     Select project template as API   Click create button   Step 3: Install NuGet packages     Install following nuget packages in the application     PM&gt; Install-Package Microsoft.IdentityModel.Tokens PM&gt; Install-Package System.IdentityModel.Tokens.Jwt PM&gt; Install-Package Microsoft.AspNetCore.Authentication.JwtBearer -Version 3.1.11           Step 4: Add Key, Issuer and Audience     Add Key, Issuer and Audience in Appsettings.json as follows     \"Jwt\": {     \"Key\": \"thisisasecretkey\",     \"Issuer\": \"Issuer.com\",     \"Audience\":  \"Audience.com\"   }   Step 5: Add authentication in HTTP request pipeline  Add the following code snippet to add authentication in HTTP request pipeline.     public void Configure(IApplicationBuilder app, IWebHostEnvironment env)   {       .       .       .       // Configure for HTTP Request pipeline       app.UseAuthentication();        app.UseHttpsRedirection();        app.UseRouting();        app.UseAuthorization();        app.UseEndpoints(endpoints =&gt;       {           endpoints.MapControllers();       });   }   Step 6: Configure JWT based authentication  Register a JWT authentication schema by using “AddAuthentication” method in ConfigureService Method of Startup.cs as follows     public void ConfigureServices(IServiceCollection services)   {       services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)       .AddJwtBearer(options =&gt;       {           options.TokenValidationParameters = new TokenValidationParameters           {               ValidateIssuer = true,               ValidateAudience = true,               ValidateLifetime = true,               ValidateIssuerSigningKey = true,                ValidIssuer = Configuration[\"Jwt:Issuer\"],               ValidAudience = Configuration[\"Jwt:Audience\"],               IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(Configuration[\"Jwt:Key\"]))           };       });        services.AddControllers();   }   Step 7: Create a login view model  Create a view model name “LoginVM” in Model folder as follows    public class LoginVM   {       public string UserName { get; set; }       public string Password { get; set; }   }   Step 8: Create an api controller  Create an api controller name AuthController as follows       [Route(\"api/[controller]\")]     [ApiController]     public class AuthController : ControllerBase     {         private IConfiguration _config;          public AuthController(IConfiguration config)         {             _config = config;         }          [AllowAnonymous]         [HttpPost, Route(\"login\")]         public IActionResult Login([FromBody] LoginVM loginModel)         {             if (loginModel == null)             {                 return BadRequest(\"Invalid request\");             }              if (IsLogin(loginModel.UserName, loginModel.Password))             {                 var secretKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_config[\"Jwt:Key\"]));                 var signinCredentials = new SigningCredentials(secretKey, SecurityAlgorithms.HmacSha256);                 var tokeOptions = new JwtSecurityToken(                      issuer: _config[\"Jwt:Issuer\"],                      audience: _config[\"Jwt:Audience\"],                      claims: new List&lt;Claim&gt;(),                      expires: DateTime.Now.AddMinutes(30),                      signingCredentials: signinCredentials                  );                  var tokenString = new JwtSecurityTokenHandler().WriteToken(tokeOptions);                 return Ok(new { Token = tokenString });             }             else             {                  return Unauthorized();             }            }          public bool IsLogin(string username, string password)         {             bool result = username == \"mahedee\" &amp;&amp; password == \"pass123\" ? true : false;             return result;         }     }   Step 9: Create a test api controller     Create a test api controller name ValuesController as follows   Add “Authorize” attribute on the ValuesController     [Route(\"api/[controller]\")]   [ApiController]   [Authorize]   public class ValuesController : ControllerBase   {       // GET: api/&lt;ValuesController&gt;       [HttpGet]       public IEnumerable&lt;string&gt; Get()       {           return new string[] { \"value1\", \"value2\", \"value3\", \"value4\" };       }   }      Step 10: Run application and test using postman     Run application   Run postman   In the Headers tab of postman, set Key as Content-Type and Value as application/json   Set url as https://localhost:44362/api/auth/login and set POST method   In the body tab select raw and JSON   Now set userName and Password in the body of postman as follows   Press send button and you will get the token as follows      Step 11: Test your application using token     Copy the token you have already got against user name and password   In the header tab use Authorization and Bearer Token as follows   Set url as https://localhost:44362/api/values   Select GET method and click send button you will see the output      Source Code    ","categories": ["ASP.NET"],
        "tags": ["asp-net","csharp"],
        "url": "/authentication-and-authorization-using-asp.net-core-web-api-and-jwt-part01.html/",
        "teaser":null},{
        "title": "How to contribute on an open source project",
        "excerpt":"How to contribute on an open source project   Step 1: Fork the repository on which you want to contribute  For example, I have forked the following repository  https://github.com/OpenCodeFoundation/eSchool   After forking my repository has became  https://github.com/mahedee/eSchool   Step 2: Clone your forked project    For example:  git clone https://github.com/mahedee/eSchool.git  So your remote repository is https://github.com/mahedee/eSchool.git  if you want to see the remote repository type   git remote -v  output will be like   origin  https://github.com/mahedee/eSchool.git (fetch) origin  https://github.com/mahedee/eSchool.git (push)  Here I see that the name of my remote repository is origin   Step 3: Add the original repository in the local repository  Now add the original repository as origin in the local repository and name as upstream   git remote add upstream https://github.com/OpenCodeFoundation/eSchool   So you have two remote link in your local repository     origin - forked repository which is in your github   upstream - original project’s repository on which you will be contributed   if you run the following command   git remote -v  you will see the following output   origin  https://github.com/mahedee/eSchool.git (fetch) origin  https://github.com/mahedee/eSchool.git (push) upstream        https://github.com/OpenCodeFoundation/eSchool (fetch) upstream        https://github.com/OpenCodeFoundation/eSchool (push)   Step 4: Open a new branch in my local repository   Before opening any branch or contributing, please run the following command to up to date your local repository   git pull upstream master   To check is there any new commit on upstream run-   git status  you should see something like-   On branch master Your branch is behind 'upstream/master' by 14 commits, and can be fast-forwarded.   (use \"git pull\" to update your local branch)  nothing to commit, working tree clean  If you see, any changes in upstream, you can pull upstream to your local drive   Now open a branch name feature-joining using following command   git checkout -b feature-joining  Now you will see the   Mahedee@MahedeePC MINGW64 /d/Projects/Github/OpenCodeFoundation/eSchool (feature-joining)   instead of   Mahedee@MahedeePC MINGW64 /d/Projects/Github/OpenCodeFoundation/eSchool (master)   Step 5: Work on the new branch and push  Now work on the new branch. After completing your task, just add, commit and push. Before that, you should check is there any change in the upstream. If change occur, just merge it with your local using the following command.   git pull --rebase upstream master  If you get any conflit, you have to resolve it locally. If no conflit occur, type the following command one by one.   git add .   git commit -m \"complete feature-joining\"   git push origin feature-joining  Step 6: Make a pull request  After completing the previous step, you will see something like the following image with a button “Compare and pull request”      Now press the button and make a pull request. Now reviewer can accept or reject the pull request (PR).  You can think the whole workflow as below      Step 7: Add your change to your forked repository Now, if you want to add your change to your forked repository. Just type the following command. Remember, in this case, your forked repository and original repository may not sync if the PR is not accepted.   git checkout master  git merge feature-joining  git push origin master  Step 8: Sync forked repository with original repository  If you want to sync your forked repository with original repository at any time. Tyep the following command.   git pull upstream master  git push origin master   Step 9: Delete the branch After accepting or rejecting your PR. You should remove the branch. For new work, you should create a new branch. To remove the local branch type the following command  git branch -d feature-joining  If you want to remove this branch from github then type the following command.  git push origin :feature-joining   Thank you for your patience :)  ","categories": ["Source Control"],
        "tags": ["git","source-control"],
        "url": "/how-to-contribute-an-opensource-project.html/",
        "teaser":null},{
        "title": "Create a sentiment analysis app using ML.NET",
        "excerpt":"  Application overview  ML.NET is a free, open source and cross platform machine learning framework. It is easily integrated with .NET development environment. ML.NET allows you to train, build, and ship custom machine learning models using C# and some other languages. Here a simple sentiment analysis application will be created using ML.NET and C#. Let’s start.   Tools and Technology used  The following tools and technologies has been used for this application     Visual Studio 2019   Visual C#   Step 1: Create a console application     Create a new project using visual studio 2019   Choose the C# Console App (.NET Core) project template   Change the project and solution name as “SentimentAnalysis”   Click create button to create the project.   Step 2: Enable the ML.NET Model Builder preview feature Press right button on the project file -&gt; Add -&gt; Machine learning You will see the following pop up message. Enable it.   Would you like to enable the ML.NET Model Builder preview feature so you can add Machine Learning to your .NET projects? Enable   Step 3: Select model builder scenario     Press right button on the project -&gt; Add -&gt; Machine Learning   Select Text classification   Keep the Local Environment and click on data (to move data step)     Step 4: Download and add data     Download the Sentiment Labelled Sentences datasets from the UCI Machine Learning Repository   Unzip the file and keep the “yelp_labelled.txt” file to Data folder   The first column of this file represents the comments and the second column represent the sentiment of the text (0 for negative and 1 for positive)   Add data     In this form, select File as the input data source type   Browse file yelp_labelled.txt. Once you are selected, you will see the preview of the data.   Select “col1” for Column to predict (Label) as the image below   Now click Train button to move to the train step      Step 5: Train your model     Time to train set automatically based on data. But you can manually set it.   Click start training button. You will see the following point the screen.   Best accuracy - Percentage of accuracy of the current model   Best model - This shows you which algorithm performed the best during Model Builder’s exploration.  Training time - Total times taken to run training Models explored (total) - This shows you the total number of models explored by Model Builder in the given amount of time.   Source : Microsoft docs      Now click Evaluate to move to the evaluate step   Step 6: Evaluate your model     Type a sentence in Try your model section.   I Typed “This is a fantastic place” and it shows positive is 98% and negative 2%      Step 7: Add project in to the solution     Click Add Project Button   Model builder will add machine learning model and the project for training   ModelBuilder.cs in the console application is used to build/train the model   Program.cs in the console application is used to test run the model   ModelInput.cs and ModelOutput.cs in Model library is the input and output class for the model training.   ConsumeModel.cs in Model library contains the method for model consumption   Solution structure will be like as follows      Step 8: Consume your model     Set SentimentAnalysisML.ConsoleApp as startup project   Modify a bit of Program.cs in SentimentAnalysisML.ConsoleApp as follows       class Program     {         static void Main(string[] args)         {             // Create single instance of sample data from first line of dataset for model input             ModelInput sampleData = new ModelInput()             {                 Col0 = @\"The food of Hotel Sonargaon was awesome\",             };              // Make a single prediction on the sample data and print results             var predictionResult = ConsumeModel.Predict(sampleData);              Console.WriteLine(\"Using model to make single prediction -- Comparing actual Col1 with predicted Col1 from sample data...\\n\\n\");             Console.WriteLine($\"Col0: {sampleData.Col0}\");             Console.WriteLine($\"\\n\\nPredicted Col1 value {predictionResult.Prediction} \\nPredicted Col1 scores: [{String.Join(\",\", predictionResult.Score)}]\\n\");              string sentiment = predictionResult.Prediction == \"1\" ? \"Positive\" : \"Negative\";             Console.WriteLine($\"Sentiment: {sentiment} \\n\");              Console.WriteLine(\"=============== End of process, hit any key to finish ===============\");             Console.ReadKey();         }     }    Step 9: Build and run the application Now build and run the application. You will see the sentiment output of the sentence “The food of Hotel Sonargaon was awesome”.   Source Code    ","categories": ["Source Control"],
        "tags": ["git","source-control"],
        "url": "/create-a-sentiment-analysis-app-using-ml-dot-net.html/",
        "teaser":null},{
        "title": "Authentication and authorization using ASP.NET MVC",
        "excerpt":"  Step1: Select ASP.NET Web Application (.NET Framework)   Step2: Type project and solution name  Type project name as “MVCAuth” and also solution name as “MVC Auth”   Step 3: Select project template     Select project template as Web Application (Model-View-Controller)   Change authentication to Individual User Authentication   Click create button   Step 4: Change web.config file   &lt;add name=\"DefaultConnection\" connectionString=\"Data Source=localhost;Initial Catalog=AuthDB;Persist Security Info=False;User ID=sa; Password=mahedee.net; Pooling=False;MultipleActiveResultSets=False;Encrypt=False;TrustServerCertificate=False\" providerName=\"System.Data.SqlClient\" /&gt;   Step 5: Add some model and view model class     Create Role Model class in Models folder as follows      public class Role : IdentityRole   {    }           Create UserRoleVM View Model class in Models folder as follows       public class UserRoleVM   {       public string UserId { get; set; }       public string RoleId { get; set; }        public string UserName { get; set; }       public string RoleName { get; set; }   }           Create UsersRolesVM View Model class in Models folder as follows       public class UsersRolesVM   {       //public string UserName { get; set; }       public ApplicationUser User { get; set; }        public IEnumerable&lt;string&gt; RoleNames { get; set; }   }           Step 6: Add Controllers to the application     Add RolesController in Controllers folder   Choose template MVC 5 Controller with read/write actions   Modify RolesController as follows       public class RolesController : Controller     {         private ApplicationDbContext db = new ApplicationDbContext();         // GET: Roles         public ActionResult Index()         {             var roleStore = new RoleStore&lt;IdentityRole&gt;(db);             var roleManager = new RoleManager&lt;IdentityRole&gt;(roleStore);             var roles = roleManager.Roles.ToList();             return View(roles);         }          // GET: Roles/Details/5         public ActionResult Details(int id)         {             return View();         }          // GET: Roles/Create         public ActionResult Create()         {             return View();         }          // POST: Roles/Create         [HttpPost]         public ActionResult Create(IdentityRole role)         {             try             {                 // TODO: Add insert logic here                  var roleStore = new RoleStore&lt;IdentityRole&gt;(db);                 var roleManager = new RoleManager&lt;IdentityRole&gt;(roleStore);                  if(!roleManager.RoleExists(role.Name))                 {                     roleManager.Create(role);                 }                  return RedirectToAction(\"Index\");             }             catch             {                 return View();             }         }          // GET: Roles/Edit/5         public ActionResult Edit(int id)         {             return View();         }          // POST: Roles/Edit/5         [HttpPost]         public ActionResult Edit(int id, FormCollection collection)         {             try             {                 // TODO: Add update logic here                  return RedirectToAction(\"Index\");             }             catch             {                 return View();             }         }          // GET: Roles/Delete/5         public ActionResult Delete(int id)         {             return View();         }          // POST: Roles/Delete/5         [HttpPost]         public ActionResult Delete(int id, FormCollection collection)         {             try             {                 // TODO: Add delete logic here                  return RedirectToAction(\"Index\");             }             catch             {                 return View();             }         }     }      Add UsersRoleController in Controllers folder   Choose template MVC 5 Controller with read/write actions   Modify UsersRoleController as follows       public class UsersRoleController : Controller     {         ApplicationDbContext db = new ApplicationDbContext();         // GET: UsersRole         public ActionResult Index()         {             List&lt;UsersRolesVM&gt; usersRolesVMs = new List&lt;UsersRolesVM&gt;();             List&lt;ApplicationUser&gt; users = db.Users.ToList();              var userManager = new UserManager&lt;ApplicationUser&gt;(new UserStore&lt;ApplicationUser&gt;(db));              foreach (ApplicationUser user in users)             {                 UsersRolesVM usersRolesVM = new UsersRolesVM();                 usersRolesVM.User = user;                 usersRolesVM.RoleNames = userManager.GetRoles(user.Id);                 usersRolesVMs.Add(usersRolesVM);             }             return View(usersRolesVMs);         }          // GET: UsersRole/Details/5         public ActionResult Details(int id)         {             return View();         }          // GET: UsersRole/Create         public ActionResult Create()         {              var roleStore = new RoleStore&lt;IdentityRole&gt;(db);             var roleManager = new RoleManager&lt;IdentityRole&gt;(roleStore);             var roles = roleManager.Roles.ToList();               ViewBag.UserId = new SelectList(db.Users.ToList(), \"Id\", \"UserName\");             ViewBag.RoleName = new SelectList(roles, \"Name\", \"Name\");              return View();         }          // POST: UsersRole/Create         [HttpPost]         //public ActionResult Create(FormCollection collection)         public ActionResult Create(UserRoleVM userRole)         {             try             {                if(userRole != null)                 {                     var userManager = new UserManager&lt;ApplicationUser&gt;(new UserStore&lt;ApplicationUser&gt;(db));                     userManager.AddToRole(userRole.UserId, userRole.RoleName);                 }                  return RedirectToAction(\"Index\");             }             catch             {                 return View();             }         }          // GET: UsersRole/Edit/5         public ActionResult Edit(int id)         {             return View();         }          // POST: UsersRole/Edit/5         [HttpPost]         public ActionResult Edit(int id, FormCollection collection)         {             try             {                 // TODO: Add update logic here                  return RedirectToAction(\"Index\");             }             catch             {                 return View();             }         }          // GET: UsersRole/Delete/5         public ActionResult Delete(int id)         {             return View();         }          // POST: UsersRole/Delete/5         [HttpPost]         public ActionResult Delete(int id, FormCollection collection)         {             try             {                 // TODO: Add delete logic here                  return RedirectToAction(\"Index\");             }             catch             {                 return View();             }         }     }    Step 7: Create Roles View to the application     Add Index View in Views-&gt;Roles folder   Add Create View in Views-&gt;Roles folder   Modify views as follows   Index.cshtml   @model IEnumerable&lt;Microsoft.AspNet.Identity.EntityFramework.IdentityRole&gt;  @{     ViewBag.Title = \"Index\"; }  &lt;h2&gt;Index&lt;/h2&gt;  &lt;p&gt;     @Html.ActionLink(\"Create New\", \"Create\") &lt;/p&gt; &lt;table class=\"table\"&gt;     &lt;tr&gt;         &lt;th&gt;             @Html.DisplayNameFor(model =&gt; model.Name)         &lt;/th&gt;         &lt;th&gt;&lt;/th&gt;     &lt;/tr&gt;  @foreach (var item in Model) {     &lt;tr&gt;         &lt;td&gt;             @Html.DisplayFor(modelItem =&gt; item.Name)         &lt;/td&gt;         &lt;td&gt;             @Html.ActionLink(\"Edit\", \"Edit\", new { id=item.Id }) |             @Html.ActionLink(\"Details\", \"Details\", new { id=item.Id }) |             @Html.ActionLink(\"Delete\", \"Delete\", new { id=item.Id })         &lt;/td&gt;     &lt;/tr&gt; }  &lt;/table&gt;    Create.cshtml   @*@model MVCAuth.Models.Role*@ @model Microsoft.AspNet.Identity.EntityFramework.IdentityRole  @{     ViewBag.Title = \"Create\"; }  &lt;h2&gt;Create&lt;/h2&gt;   @using (Html.BeginForm()) {     @Html.AntiForgeryToken()      &lt;div class=\"form-horizontal\"&gt;         &lt;h4&gt;Role&lt;/h4&gt;         &lt;hr /&gt;         @Html.ValidationSummary(true, \"\", new { @class = \"text-danger\" })         &lt;div class=\"form-group\"&gt;             @Html.LabelFor(model =&gt; model.Name, htmlAttributes: new { @class = \"control-label col-md-2\" })             &lt;div class=\"col-md-10\"&gt;                 @Html.EditorFor(model =&gt; model.Name, new { htmlAttributes = new { @class = \"form-control\" } })                 @Html.ValidationMessageFor(model =&gt; model.Name, \"\", new { @class = \"text-danger\" })             &lt;/div&gt;         &lt;/div&gt;          &lt;div class=\"form-group\"&gt;             &lt;div class=\"col-md-offset-2 col-md-10\"&gt;                 &lt;input type=\"submit\" value=\"Create\" class=\"btn btn-default\" /&gt;             &lt;/div&gt;         &lt;/div&gt;     &lt;/div&gt; }  &lt;div&gt;     @Html.ActionLink(\"Back to List\", \"Index\") &lt;/div&gt;  @section Scripts {     @Scripts.Render(\"~/bundles/jqueryval\") }     Step 8: Create UsersRole View to the application     Add Index View in Views-&gt;UsersRole folder   Add Create View in Views-&gt;UsersRole folder   Modify views as follows   Index.cshtml   @model IEnumerable&lt;MVCAuth.Models.UsersRolesVM&gt;  @{     ViewBag.Title = \"Index\"; }  &lt;h2&gt;Index&lt;/h2&gt;  &lt;p&gt;     @Html.ActionLink(\"Create New\", \"Create\") &lt;/p&gt; &lt;table class=\"table\"&gt;     &lt;tr&gt;         &lt;th&gt;             @*@Html.DisplayNameFor(model =&gt; model.UserName)*@             User Name         &lt;/th&gt;         &lt;th&gt;             @*@Html.DisplayNameFor(model =&gt; model.RoleName)*@             Roles Name         &lt;/th&gt;         &lt;th&gt;&lt;/th&gt;     &lt;/tr&gt;      @foreach (var users in Model)     {          foreach (string rolesName in users.RoleNames)         {             &lt;tr&gt;                 &lt;td&gt;                     @Html.DisplayFor(modelItem =&gt; users.User.UserName)                 &lt;/td&gt;                 &lt;td&gt;                     @Html.DisplayFor(modelItem =&gt; rolesName)                 &lt;/td&gt;                 &lt;td&gt;                     @Html.ActionLink(\"Delete\", \"Delete\", new { id = 1 })                 &lt;/td&gt;             &lt;/tr&gt;         }     }  &lt;/table&gt;   Create.cshtml  @model MVCAuth.Models.UserRoleVM  @{     ViewBag.Title = \"Create\"; }  &lt;h2&gt;Create&lt;/h2&gt;   @using (Html.BeginForm())  {     @Html.AntiForgeryToken()      &lt;div class=\"form-horizontal\"&gt;     &lt;h4&gt;UserRoleVM&lt;/h4&gt;     &lt;hr /&gt;     @Html.ValidationSummary(true, \"\", new { @class = \"text-danger\" })      &lt;div class=\"form-group\"&gt;         @Html.LabelFor(model =&gt; model.UserName, \"UserName\", htmlAttributes: new { @class = \"control-label col-md-2\" })         &lt;div class=\"col-md-10\"&gt;             @Html.DropDownList(\"UserId\", null, htmlAttributes: new { @class = \"form-control\" })         &lt;/div&gt;     &lt;/div&gt;      &lt;div class=\"form-group\"&gt;         @Html.LabelFor(model =&gt; model.RoleName, \"RoleName\", htmlAttributes: new { @class = \"control-label col-md-2\" })         &lt;div class=\"col-md-10\"&gt;             @Html.DropDownList(\"RoleName\", null, htmlAttributes: new { @class = \"form-control\" })             @Html.ValidationMessageFor(model =&gt; model.UserName, \"\", new { @class = \"text-danger\" })         &lt;/div&gt;     &lt;/div&gt;      &lt;div class=\"form-group\"&gt;         &lt;div class=\"col-md-offset-2 col-md-10\"&gt;             &lt;input type=\"submit\" value=\"Create\" class=\"btn btn-default\" /&gt;         &lt;/div&gt;     &lt;/div&gt; &lt;/div&gt; }  &lt;div&gt;     @Html.ActionLink(\"Back to List\", \"Index\") &lt;/div&gt;  @section Scripts {     @Scripts.Render(\"~/bundles/jqueryval\") }    Step 9: Run migration command in package manager console   Now the application is ready to run.   Source Code  ","categories": ["dotnet"],
        "tags": ["dotnet","mvc","c-sharp"],
        "url": "/authentication-and-authorization-in-asp.net-mvc.html/",
        "teaser":null},{
        "title": "Speaking at Career Adda at MBSTU",
        "excerpt":" Organized by CSE Family of MBSTU  Venue: Online/Virtual  Date: 21 August, 2020      ","categories": ["Speech","Technical Speech"],
        "tags": ["speech","tech"],
        "url": "/speaking-at-career-adda-at-cse-family-of-mbstu.html/",
        "teaser":null},{
        "title": "Build a CRUD application using asp.net core",
        "excerpt":"  Application overview  In this application, I will show how to build a CRUD application using asp.net mvc core. Let’s have a look on the implementation of the project.   Tools and Technology used  The following tools and technologies has been used for this application     Visual Studio 2019   Visual C#   ASP.NET Core MVC   Entity Framework   Razor view engine   Step1: Select ASP.NET Core Web Application  Select File-&gt;New-&gt;Project-&gt;ASP.NET Core Web Application   Step2: Choose project and solution name  Type project name as “HRM” and also solution name as “HRM”   Step 3: Select project template     Select project template as Web Application (Model-View-Controller)   Change authentication to Individual User Authentication (Optional)   Click create button   Step 4: Modify appsettings.json  Change connection string as follows. Since, I am using localdb.     \"ConnectionStrings\": {     \"DefaultConnection\": \"Server=(localdb)\\\\mssqllocaldb;Database=HRMDB;Trusted_Connection=True;MultipleActiveResultSets=true\" }   Step 5: Add following model class in Models folder  Dept.cs       public class Dept     {         [DatabaseGenerated(DatabaseGeneratedOption.Identity)]         [Key, Column(Order = 0)]         public int Id { get; set; }          [Display(Name = \"Dept. Name\")]         [StringLength(150)]         public string Name { get; set; }          public List&lt;Employee&gt; Employees { get; set; }     }   Employee.cs      public class Employee     {         [DatabaseGenerated(DatabaseGeneratedOption.Identity)]         [Key, Column(Order = 0)]         public int Id { get; set; }          [Display(Name = \"Full Name\")]         [StringLength(200)]         public string FullName { get; set; }          [Display(Name = \"Father's Name\")]         [StringLength(200)]         public string FathersName { get; set; }          [Display(Name = \"Mother's Name\")]         [StringLength(200)]         public String MothersName { get; set; }          [Display(Name = \"Dept\")]         public int DeptId { get; set; }          [StringLength(250)]         public string Designation { get; set; }          [ForeignKey(\"DeptId\")]         public virtual Dept Dept { get; set; }     }   Step 6: Create Controller and Views for Dept     Add DeptsController in Controllers folder   Choose template MVC controller with views, using Entity Framework   Select Model Class as Dept   Select ApplicationDbContext as DbContext class   DeptsController and corresponding views will be created automatically as follows   DeptsController       public class DeptsController : Controller     {         private readonly ApplicationDbContext _context;          public DeptsController(ApplicationDbContext context)         {             _context = context;         }          // GET: Depts         public async Task&lt;IActionResult&gt; Index()         {             return View(await _context.Dept.ToListAsync());         }          // GET: Depts/Details/5         public async Task&lt;IActionResult&gt; Details(int? id)         {             if (id == null)             {                 return NotFound();             }              var dept = await _context.Dept                 .FirstOrDefaultAsync(m =&gt; m.Id == id);             if (dept == null)             {                 return NotFound();             }              return View(dept);         }          // GET: Depts/Create         public IActionResult Create()         {             return View();         }          // POST: Depts/Create         // To protect from overposting attacks, enable the specific properties you want to bind to, for          // more details, see http://go.microsoft.com/fwlink/?LinkId=317598.         [HttpPost]         [ValidateAntiForgeryToken]         public async Task&lt;IActionResult&gt; Create([Bind(\"Id,Name\")] Dept dept)         {             if (ModelState.IsValid)             {                 _context.Add(dept);                 await _context.SaveChangesAsync();                 return RedirectToAction(nameof(Index));             }             return View(dept);         }          // GET: Depts/Edit/5         public async Task&lt;IActionResult&gt; Edit(int? id)         {             if (id == null)             {                 return NotFound();             }              var dept = await _context.Dept.FindAsync(id);             if (dept == null)             {                 return NotFound();             }             return View(dept);         }          // POST: Depts/Edit/5         // To protect from overposting attacks, enable the specific properties you want to bind to, for          // more details, see http://go.microsoft.com/fwlink/?LinkId=317598.         [HttpPost]         [ValidateAntiForgeryToken]         public async Task&lt;IActionResult&gt; Edit(int id, [Bind(\"Id,Name\")] Dept dept)         {             if (id != dept.Id)             {                 return NotFound();             }              if (ModelState.IsValid)             {                 try                 {                     _context.Update(dept);                     await _context.SaveChangesAsync();                 }                 catch (DbUpdateConcurrencyException)                 {                     if (!DeptExists(dept.Id))                     {                         return NotFound();                     }                     else                     {                         throw;                     }                 }                 return RedirectToAction(nameof(Index));             }             return View(dept);         }          // GET: Depts/Delete/5         public async Task&lt;IActionResult&gt; Delete(int? id)         {             if (id == null)             {                 return NotFound();             }              var dept = await _context.Dept                 .FirstOrDefaultAsync(m =&gt; m.Id == id);             if (dept == null)             {                 return NotFound();             }              return View(dept);         }          // POST: Depts/Delete/5         [HttpPost, ActionName(\"Delete\")]         [ValidateAntiForgeryToken]         public async Task&lt;IActionResult&gt; DeleteConfirmed(int id)         {             var dept = await _context.Dept.FindAsync(id);             _context.Dept.Remove(dept);             await _context.SaveChangesAsync();             return RedirectToAction(nameof(Index));         }          private bool DeptExists(int id)         {             return _context.Dept.Any(e =&gt; e.Id == id);         }     }      Following views will be created automatically in Views-&gt;Depts folder   Index.cshtml  @model IEnumerable&lt;HRM.Models.Dept&gt;  @{     ViewData[\"Title\"] = \"Index\"; }  &lt;h1&gt;Index&lt;/h1&gt;  &lt;p&gt;     &lt;a asp-action=\"Create\"&gt;Create New&lt;/a&gt; &lt;/p&gt; &lt;table class=\"table\"&gt;     &lt;thead&gt;         &lt;tr&gt;             &lt;th&gt;                 @Html.DisplayNameFor(model =&gt; model.Name)             &lt;/th&gt;             &lt;th&gt;&lt;/th&gt;         &lt;/tr&gt;     &lt;/thead&gt;     &lt;tbody&gt; @foreach (var item in Model) {         &lt;tr&gt;             &lt;td&gt;                 @Html.DisplayFor(modelItem =&gt; item.Name)             &lt;/td&gt;             &lt;td&gt;                 &lt;a asp-action=\"Edit\" asp-route-id=\"@item.Id\"&gt;Edit&lt;/a&gt; |                 &lt;a asp-action=\"Details\" asp-route-id=\"@item.Id\"&gt;Details&lt;/a&gt; |                 &lt;a asp-action=\"Delete\" asp-route-id=\"@item.Id\"&gt;Delete&lt;/a&gt;             &lt;/td&gt;         &lt;/tr&gt; }     &lt;/tbody&gt; &lt;/table&gt;    Create.cshtml   @model HRM.Models.Dept  @{     ViewData[\"Title\"] = \"Create\"; }  &lt;h1&gt;Create&lt;/h1&gt;  &lt;h4&gt;Dept&lt;/h4&gt; &lt;hr /&gt; &lt;div class=\"row\"&gt;     &lt;div class=\"col-md-4\"&gt;         &lt;form asp-action=\"Create\"&gt;             &lt;div asp-validation-summary=\"ModelOnly\" class=\"text-danger\"&gt;&lt;/div&gt;             &lt;div class=\"form-group\"&gt;                 &lt;label asp-for=\"Name\" class=\"control-label\"&gt;&lt;/label&gt;                 &lt;input asp-for=\"Name\" class=\"form-control\" /&gt;                 &lt;span asp-validation-for=\"Name\" class=\"text-danger\"&gt;&lt;/span&gt;             &lt;/div&gt;             &lt;div class=\"form-group\"&gt;                 &lt;input type=\"submit\" value=\"Create\" class=\"btn btn-primary\" /&gt;             &lt;/div&gt;         &lt;/form&gt;     &lt;/div&gt; &lt;/div&gt;  &lt;div&gt;     &lt;a asp-action=\"Index\"&gt;Back to List&lt;/a&gt; &lt;/div&gt;  @section Scripts {     @{await Html.RenderPartialAsync(\"_ValidationScriptsPartial\");} }   Delete.cshtml   @model HRM.Models.Dept  @{     ViewData[\"Title\"] = \"Delete\"; }  &lt;h1&gt;Delete&lt;/h1&gt;  &lt;h3&gt;Are you sure you want to delete this?&lt;/h3&gt; &lt;div&gt;     &lt;h4&gt;Dept&lt;/h4&gt;     &lt;hr /&gt;     &lt;dl class=\"row\"&gt;         &lt;dt class = \"col-sm-2\"&gt;             @Html.DisplayNameFor(model =&gt; model.Name)         &lt;/dt&gt;         &lt;dd class = \"col-sm-10\"&gt;             @Html.DisplayFor(model =&gt; model.Name)         &lt;/dd&gt;     &lt;/dl&gt;          &lt;form asp-action=\"Delete\"&gt;         &lt;input type=\"hidden\" asp-for=\"Id\" /&gt;         &lt;input type=\"submit\" value=\"Delete\" class=\"btn btn-danger\" /&gt; |         &lt;a asp-action=\"Index\"&gt;Back to List&lt;/a&gt;     &lt;/form&gt; &lt;/div&gt;    Details.cshtml   @model HRM.Models.Dept  @{     ViewData[\"Title\"] = \"Details\"; }  &lt;h1&gt;Details&lt;/h1&gt;  &lt;div&gt;     &lt;h4&gt;Dept&lt;/h4&gt;     &lt;hr /&gt;     &lt;dl class=\"row\"&gt;         &lt;dt class = \"col-sm-2\"&gt;             @Html.DisplayNameFor(model =&gt; model.Name)         &lt;/dt&gt;         &lt;dd class = \"col-sm-10\"&gt;             @Html.DisplayFor(model =&gt; model.Name)         &lt;/dd&gt;     &lt;/dl&gt; &lt;/div&gt; &lt;div&gt;     &lt;a asp-action=\"Edit\" asp-route-id=\"@Model.Id\"&gt;Edit&lt;/a&gt; |     &lt;a asp-action=\"Index\"&gt;Back to List&lt;/a&gt; &lt;/div&gt;    Edit.cshtml  @model HRM.Models.Dept  @{     ViewData[\"Title\"] = \"Edit\"; }  &lt;h1&gt;Edit&lt;/h1&gt;  &lt;h4&gt;Dept&lt;/h4&gt; &lt;hr /&gt; &lt;div class=\"row\"&gt;     &lt;div class=\"col-md-4\"&gt;         &lt;form asp-action=\"Edit\"&gt;             &lt;div asp-validation-summary=\"ModelOnly\" class=\"text-danger\"&gt;&lt;/div&gt;             &lt;input type=\"hidden\" asp-for=\"Id\" /&gt;             &lt;div class=\"form-group\"&gt;                 &lt;label asp-for=\"Name\" class=\"control-label\"&gt;&lt;/label&gt;                 &lt;input asp-for=\"Name\" class=\"form-control\" /&gt;                 &lt;span asp-validation-for=\"Name\" class=\"text-danger\"&gt;&lt;/span&gt;             &lt;/div&gt;             &lt;div class=\"form-group\"&gt;                 &lt;input type=\"submit\" value=\"Save\" class=\"btn btn-primary\" /&gt;             &lt;/div&gt;         &lt;/form&gt;     &lt;/div&gt; &lt;/div&gt;  &lt;div&gt;     &lt;a asp-action=\"Index\"&gt;Back to List&lt;/a&gt; &lt;/div&gt;  @section Scripts {     @{await Html.RenderPartialAsync(\"_ValidationScriptsPartial\");} }    Step 7: Create Controller and Views for Employee     Add EmployeesController in Controllers folder   Choose template MVC controller with views, using Entity Framework   Select Model Class as Employee   Select ApplicationDbContext as DbContext class   EmployeesController and corresponding views will be created automatically as follows   EmployeesController   public class EmployeesController : Controller     {         private readonly ApplicationDbContext _context;          public EmployeesController(ApplicationDbContext context)         {             _context = context;         }          // GET: Employees         public async Task&lt;IActionResult&gt; Index()         {             var applicationDbContext = _context.Employee.Include(e =&gt; e.Dept);             return View(await applicationDbContext.ToListAsync());         }          // GET: Employees/Details/5         public async Task&lt;IActionResult&gt; Details(int? id)         {             if (id == null)             {                 return NotFound();             }              var employee = await _context.Employee                 .Include(e =&gt; e.Dept)                 .FirstOrDefaultAsync(m =&gt; m.Id == id);             if (employee == null)             {                 return NotFound();             }              return View(employee);         }          // GET: Employees/Create         public IActionResult Create()         {             ViewData[\"DeptId\"] = new SelectList(_context.Dept, \"Id\", \"Name\");             return View();         }          // POST: Employees/Create         // To protect from overposting attacks, enable the specific properties you want to bind to, for          // more details, see http://go.microsoft.com/fwlink/?LinkId=317598.         [HttpPost]         [ValidateAntiForgeryToken]         public async Task&lt;IActionResult&gt; Create([Bind(\"Id,FullName,FathersName,MothersName,DeptId,Designation\")] Employee employee)         {             if (ModelState.IsValid)             {                 _context.Add(employee);                 await _context.SaveChangesAsync();                 return RedirectToAction(nameof(Index));             }             ViewData[\"DeptId\"] = new SelectList(_context.Dept, \"Id\", \"Name\", employee.DeptId);             return View(employee);         }          // GET: Employees/Edit/5         public async Task&lt;IActionResult&gt; Edit(int? id)         {             if (id == null)             {                 return NotFound();             }              var employee = await _context.Employee.FindAsync(id);             if (employee == null)             {                 return NotFound();             }             ViewData[\"DeptId\"] = new SelectList(_context.Dept, \"Id\", \"Name\", employee.DeptId);             return View(employee);         }          // POST: Employees/Edit/5         // To protect from overposting attacks, enable the specific properties you want to bind to, for          // more details, see http://go.microsoft.com/fwlink/?LinkId=317598.         [HttpPost]         [ValidateAntiForgeryToken]         public async Task&lt;IActionResult&gt; Edit(int id, [Bind(\"Id,FullName,FathersName,MothersName,DeptId,Designation\")] Employee employee)         {             if (id != employee.Id)             {                 return NotFound();             }              if (ModelState.IsValid)             {                 try                 {                     _context.Update(employee);                     await _context.SaveChangesAsync();                 }                 catch (DbUpdateConcurrencyException)                 {                     if (!EmployeeExists(employee.Id))                     {                         return NotFound();                     }                     else                     {                         throw;                     }                 }                 return RedirectToAction(nameof(Index));             }             ViewData[\"DeptId\"] = new SelectList(_context.Dept, \"Id\", \"Name\", employee.DeptId);             return View(employee);         }          // GET: Employees/Delete/5         public async Task&lt;IActionResult&gt; Delete(int? id)         {             if (id == null)             {                 return NotFound();             }              var employee = await _context.Employee                 .Include(e =&gt; e.Dept)                 .FirstOrDefaultAsync(m =&gt; m.Id == id);             if (employee == null)             {                 return NotFound();             }              return View(employee);         }          // POST: Employees/Delete/5         [HttpPost, ActionName(\"Delete\")]         [ValidateAntiForgeryToken]         public async Task&lt;IActionResult&gt; DeleteConfirmed(int id)         {             var employee = await _context.Employee.FindAsync(id);             _context.Employee.Remove(employee);             await _context.SaveChangesAsync();             return RedirectToAction(nameof(Index));         }          private bool EmployeeExists(int id)         {             return _context.Employee.Any(e =&gt; e.Id == id);         }     }       Following views will be created automatically in Views-&gt;Employees folder   Index.cshtml  @model IEnumerable&lt;HRM.Models.Employee&gt;  @{     ViewData[\"Title\"] = \"Index\"; }  &lt;h1&gt;Index&lt;/h1&gt;  &lt;p&gt;     &lt;a asp-action=\"Create\"&gt;Create New&lt;/a&gt; &lt;/p&gt; &lt;table class=\"table\"&gt;     &lt;thead&gt;         &lt;tr&gt;             &lt;th&gt;                 @Html.DisplayNameFor(model =&gt; model.FullName)             &lt;/th&gt;             &lt;th&gt;                 @Html.DisplayNameFor(model =&gt; model.FathersName)             &lt;/th&gt;             &lt;th&gt;                 @Html.DisplayNameFor(model =&gt; model.MothersName)             &lt;/th&gt;             &lt;th&gt;                 @Html.DisplayNameFor(model =&gt; model.Designation)             &lt;/th&gt;             &lt;th&gt;                 @Html.DisplayNameFor(model =&gt; model.Dept)             &lt;/th&gt;             &lt;th&gt;&lt;/th&gt;         &lt;/tr&gt;     &lt;/thead&gt;     &lt;tbody&gt; @foreach (var item in Model) {         &lt;tr&gt;             &lt;td&gt;                 @Html.DisplayFor(modelItem =&gt; item.FullName)             &lt;/td&gt;             &lt;td&gt;                 @Html.DisplayFor(modelItem =&gt; item.FathersName)             &lt;/td&gt;             &lt;td&gt;                 @Html.DisplayFor(modelItem =&gt; item.MothersName)             &lt;/td&gt;             &lt;td&gt;                 @Html.DisplayFor(modelItem =&gt; item.Designation)             &lt;/td&gt;             &lt;td&gt;                 @Html.DisplayFor(modelItem =&gt; item.Dept.Name)             &lt;/td&gt;             &lt;td&gt;                 &lt;a asp-action=\"Edit\" asp-route-id=\"@item.Id\"&gt;Edit&lt;/a&gt; |                 &lt;a asp-action=\"Details\" asp-route-id=\"@item.Id\"&gt;Details&lt;/a&gt; |                 &lt;a asp-action=\"Delete\" asp-route-id=\"@item.Id\"&gt;Delete&lt;/a&gt;             &lt;/td&gt;         &lt;/tr&gt; }     &lt;/tbody&gt; &lt;/table&gt;    Create.cshtml  @model HRM.Models.Employee  @{     ViewData[\"Title\"] = \"Create\"; }  &lt;h1&gt;Create&lt;/h1&gt;  &lt;h4&gt;Employee&lt;/h4&gt; &lt;hr /&gt; &lt;div class=\"row\"&gt;     &lt;div class=\"col-md-4\"&gt;         &lt;form asp-action=\"Create\"&gt;             &lt;div asp-validation-summary=\"ModelOnly\" class=\"text-danger\"&gt;&lt;/div&gt;             &lt;div class=\"form-group\"&gt;                 &lt;label asp-for=\"FullName\" class=\"control-label\"&gt;&lt;/label&gt;                 &lt;input asp-for=\"FullName\" class=\"form-control\" /&gt;                 &lt;span asp-validation-for=\"FullName\" class=\"text-danger\"&gt;&lt;/span&gt;             &lt;/div&gt;             &lt;div class=\"form-group\"&gt;                 &lt;label asp-for=\"FathersName\" class=\"control-label\"&gt;&lt;/label&gt;                 &lt;input asp-for=\"FathersName\" class=\"form-control\" /&gt;                 &lt;span asp-validation-for=\"FathersName\" class=\"text-danger\"&gt;&lt;/span&gt;             &lt;/div&gt;             &lt;div class=\"form-group\"&gt;                 &lt;label asp-for=\"MothersName\" class=\"control-label\"&gt;&lt;/label&gt;                 &lt;input asp-for=\"MothersName\" class=\"form-control\" /&gt;                 &lt;span asp-validation-for=\"MothersName\" class=\"text-danger\"&gt;&lt;/span&gt;             &lt;/div&gt;             &lt;div class=\"form-group\"&gt;                 &lt;label asp-for=\"DeptId\" class=\"control-label\"&gt;&lt;/label&gt;                 &lt;select asp-for=\"DeptId\" class =\"form-control\" asp-items=\"ViewBag.DeptId\"&gt;&lt;/select&gt;             &lt;/div&gt;             &lt;div class=\"form-group\"&gt;                 &lt;label asp-for=\"Designation\" class=\"control-label\"&gt;&lt;/label&gt;                 &lt;input asp-for=\"Designation\" class=\"form-control\" /&gt;                 &lt;span asp-validation-for=\"Designation\" class=\"text-danger\"&gt;&lt;/span&gt;             &lt;/div&gt;             &lt;div class=\"form-group\"&gt;                 &lt;input type=\"submit\" value=\"Create\" class=\"btn btn-primary\" /&gt;             &lt;/div&gt;         &lt;/form&gt;     &lt;/div&gt; &lt;/div&gt;  &lt;div&gt;     &lt;a asp-action=\"Index\"&gt;Back to List&lt;/a&gt; &lt;/div&gt;  @section Scripts {     @{await Html.RenderPartialAsync(\"_ValidationScriptsPartial\");} }    Delete.cshtml   @model HRM.Models.Employee  @{     ViewData[\"Title\"] = \"Delete\"; }  &lt;h1&gt;Delete&lt;/h1&gt;  &lt;h3&gt;Are you sure you want to delete this?&lt;/h3&gt; &lt;div&gt;     &lt;h4&gt;Employee&lt;/h4&gt;     &lt;hr /&gt;     &lt;dl class=\"row\"&gt;         &lt;dt class = \"col-sm-2\"&gt;             @Html.DisplayNameFor(model =&gt; model.FullName)         &lt;/dt&gt;         &lt;dd class = \"col-sm-10\"&gt;             @Html.DisplayFor(model =&gt; model.FullName)         &lt;/dd&gt;         &lt;dt class = \"col-sm-2\"&gt;             @Html.DisplayNameFor(model =&gt; model.FathersName)         &lt;/dt&gt;         &lt;dd class = \"col-sm-10\"&gt;             @Html.DisplayFor(model =&gt; model.FathersName)         &lt;/dd&gt;         &lt;dt class = \"col-sm-2\"&gt;             @Html.DisplayNameFor(model =&gt; model.MothersName)         &lt;/dt&gt;         &lt;dd class = \"col-sm-10\"&gt;             @Html.DisplayFor(model =&gt; model.MothersName)         &lt;/dd&gt;         &lt;dt class = \"col-sm-2\"&gt;             @Html.DisplayNameFor(model =&gt; model.Designation)         &lt;/dt&gt;         &lt;dd class = \"col-sm-10\"&gt;             @Html.DisplayFor(model =&gt; model.Designation)         &lt;/dd&gt;         &lt;dt class = \"col-sm-2\"&gt;             @Html.DisplayNameFor(model =&gt; model.Dept)         &lt;/dt&gt;         &lt;dd class = \"col-sm-10\"&gt;             @Html.DisplayFor(model =&gt; model.Dept.Id)         &lt;/dd class&gt;     &lt;/dl&gt;          &lt;form asp-action=\"Delete\"&gt;         &lt;input type=\"hidden\" asp-for=\"Id\" /&gt;         &lt;input type=\"submit\" value=\"Delete\" class=\"btn btn-danger\" /&gt; |         &lt;a asp-action=\"Index\"&gt;Back to List&lt;/a&gt;     &lt;/form&gt; &lt;/div&gt;    Details.cshtml   @model HRM.Models.Employee  @{     ViewData[\"Title\"] = \"Details\"; }  &lt;h1&gt;Details&lt;/h1&gt;  &lt;div&gt;     &lt;h4&gt;Employee&lt;/h4&gt;     &lt;hr /&gt;     &lt;dl class=\"row\"&gt;         &lt;dt class = \"col-sm-2\"&gt;             @Html.DisplayNameFor(model =&gt; model.FullName)         &lt;/dt&gt;         &lt;dd class = \"col-sm-10\"&gt;             @Html.DisplayFor(model =&gt; model.FullName)         &lt;/dd&gt;         &lt;dt class = \"col-sm-2\"&gt;             @Html.DisplayNameFor(model =&gt; model.FathersName)         &lt;/dt&gt;         &lt;dd class = \"col-sm-10\"&gt;             @Html.DisplayFor(model =&gt; model.FathersName)         &lt;/dd&gt;         &lt;dt class = \"col-sm-2\"&gt;             @Html.DisplayNameFor(model =&gt; model.MothersName)         &lt;/dt&gt;         &lt;dd class = \"col-sm-10\"&gt;             @Html.DisplayFor(model =&gt; model.MothersName)         &lt;/dd&gt;         &lt;dt class = \"col-sm-2\"&gt;             @Html.DisplayNameFor(model =&gt; model.Designation)         &lt;/dt&gt;         &lt;dd class = \"col-sm-10\"&gt;             @Html.DisplayFor(model =&gt; model.Designation)         &lt;/dd&gt;         &lt;dt class = \"col-sm-2\"&gt;             @Html.DisplayNameFor(model =&gt; model.Dept)         &lt;/dt&gt;         &lt;dd class = \"col-sm-10\"&gt;             @Html.DisplayFor(model =&gt; model.Dept.Name)         &lt;/dd&gt;     &lt;/dl&gt; &lt;/div&gt; &lt;div&gt;     &lt;a asp-action=\"Edit\" asp-route-id=\"@Model.Id\"&gt;Edit&lt;/a&gt; |     &lt;a asp-action=\"Index\"&gt;Back to List&lt;/a&gt; &lt;/div&gt;    Edit.cshtml   @model HRM.Models.Employee  @{     ViewData[\"Title\"] = \"Edit\"; }  &lt;h1&gt;Edit&lt;/h1&gt;  &lt;h4&gt;Employee&lt;/h4&gt; &lt;hr /&gt; &lt;div class=\"row\"&gt;     &lt;div class=\"col-md-4\"&gt;         &lt;form asp-action=\"Edit\"&gt;             &lt;div asp-validation-summary=\"ModelOnly\" class=\"text-danger\"&gt;&lt;/div&gt;             &lt;input type=\"hidden\" asp-for=\"Id\" /&gt;             &lt;div class=\"form-group\"&gt;                 &lt;label asp-for=\"FullName\" class=\"control-label\"&gt;&lt;/label&gt;                 &lt;input asp-for=\"FullName\" class=\"form-control\" /&gt;                 &lt;span asp-validation-for=\"FullName\" class=\"text-danger\"&gt;&lt;/span&gt;             &lt;/div&gt;             &lt;div class=\"form-group\"&gt;                 &lt;label asp-for=\"FathersName\" class=\"control-label\"&gt;&lt;/label&gt;                 &lt;input asp-for=\"FathersName\" class=\"form-control\" /&gt;                 &lt;span asp-validation-for=\"FathersName\" class=\"text-danger\"&gt;&lt;/span&gt;             &lt;/div&gt;             &lt;div class=\"form-group\"&gt;                 &lt;label asp-for=\"MothersName\" class=\"control-label\"&gt;&lt;/label&gt;                 &lt;input asp-for=\"MothersName\" class=\"form-control\" /&gt;                 &lt;span asp-validation-for=\"MothersName\" class=\"text-danger\"&gt;&lt;/span&gt;             &lt;/div&gt;             &lt;div class=\"form-group\"&gt;                 &lt;label asp-for=\"DeptId\" class=\"control-label\"&gt;&lt;/label&gt;                 &lt;select asp-for=\"DeptId\" class=\"form-control\" asp-items=\"ViewBag.DeptId\"&gt;&lt;/select&gt;                 &lt;span asp-validation-for=\"DeptId\" class=\"text-danger\"&gt;&lt;/span&gt;             &lt;/div&gt;             &lt;div class=\"form-group\"&gt;                 &lt;label asp-for=\"Designation\" class=\"control-label\"&gt;&lt;/label&gt;                 &lt;input asp-for=\"Designation\" class=\"form-control\" /&gt;                 &lt;span asp-validation-for=\"Designation\" class=\"text-danger\"&gt;&lt;/span&gt;             &lt;/div&gt;             &lt;div class=\"form-group\"&gt;                 &lt;input type=\"submit\" value=\"Save\" class=\"btn btn-primary\" /&gt;             &lt;/div&gt;         &lt;/form&gt;     &lt;/div&gt; &lt;/div&gt;  &lt;div&gt;     &lt;a asp-action=\"Index\"&gt;Back to List&lt;/a&gt; &lt;/div&gt;  @section Scripts {     @{await Html.RenderPartialAsync(\"_ValidationScriptsPartial\");} }       Modify the navbar of _Layout.cshtml in Views-&gt;Shared folder as follows                   &lt;div class=\"navbar-collapse collapse d-sm-inline-flex flex-sm-row-reverse\"&gt;                     &lt;partial name=\"_LoginPartial\" /&gt;                     &lt;ul class=\"navbar-nav flex-grow-1\"&gt;                         &lt;li class=\"nav-item\"&gt;                             &lt;a class=\"nav-link text-dark\" asp-area=\"\" asp-controller=\"Home\" asp-action=\"Index\"&gt;Home&lt;/a&gt;                         &lt;/li&gt;                         &lt;li class=\"nav-item\"&gt;                             &lt;a class=\"nav-link text-dark\" asp-area=\"\" asp-controller=\"Depts\" asp-action=\"Index\"&gt;Depts&lt;/a&gt;                         &lt;/li&gt;                         &lt;li class=\"nav-item\"&gt;                             &lt;a class=\"nav-link text-dark\" asp-area=\"\" asp-controller=\"Employees\" asp-action=\"Index\"&gt;Employees&lt;/a&gt;                         &lt;/li&gt;                         &lt;li class=\"nav-item\"&gt;                             &lt;a class=\"nav-link text-dark\" asp-area=\"\" asp-controller=\"Home\" asp-action=\"Privacy\"&gt;Privacy&lt;/a&gt;                         &lt;/li&gt;                     &lt;/ul&gt;                 &lt;/div&gt;   Step 8: Run migration command in package manager console   Now the application is ready to run.   Source Code   ","categories": ["dotnet"],
        "tags": ["simple","move it"],
        "url": "/build-a-crud-application-using-asp.net-core.html/",
        "teaser":null},{
        "title": "Convert markdown to html using asp.net core",
        "excerpt":"  Application overview  In this application, I will show how to create an application which is convert markdown to html using asp.net core. Let’s have a look on the implementation of the project.   Tools and Technology used  The following tools and technologies has been used for this application     Visual Studio 2019   Visual C#   NuGet package “Markdig”   ASP.NET Core MVC   Razor view engine   Step1: Select ASP.NET Core Web Application  Select File-&gt;New-&gt;Project-&gt;ASP.NET Core Web Application   Step2: Choose project and solution name  Type project and solution name as “MarkdownToHtml”   Step 3: Select project template     Select project template as Web Application (Model-View-Controller)   Click create button   Step 4: Install Nuget package “Markdig”  Run the following command in package manager console  PM&gt; Install-Package Markdig     Step 5: Add a method name Parse in MarkDownParser static class in Utility foler   MarkDownParser.cs      public IActionResult Index()     {         string markdownText = \"## This is a title of Markdown file \";         string htmltext = MarkDownParser.Parse(markdownText);         htmltext += MarkDownParser.Parse(\"  \") ;// for new line         htmltext += MarkDownParser.Parse(\"__Strong text__\");// for new line          htmltext += MarkDownParser.Parse(\"  \");// for new line         htmltext += MarkDownParser.Parse(\"* This is a bullet point\");// bullet point         ViewBag.HTMLText = htmltext;          return View();     }   Step 6: Modify Home-&gt;Index.cshtml as follows  @{     ViewData[\"Title\"] = \"Home Page\"; }  &lt;div class=\"text-center\"&gt;     @Html.Raw(ViewBag.HTMLText) &lt;/div&gt;   Step 7: Build and run the application   Now the application is ready to run. Build and run the application and watch the html output which you have given as markdown input in index action.   Source Code   ","categories": ["dotnet"],
        "tags": ["markdown"],
        "url": "/convert-markdown-to-html-using-asp.net-core.html/",
        "teaser":null},{
        "title": "Embed markdown into a razor view using asp.net core",
        "excerpt":"  Application overview Mardown is creeping up and has become a standard for documentation. How to embed markdown into a razor view will be shown in this application. Let’s have a look on the implementation of the project.   Tools and Technology used  The following tools and technologies has been used for this application     Visual Studio 2019   Visual C#   NuGet package “Westwind.AspNetCore.Markdown”   ASP.NET Core MVC   Razor view engine   Step1: Select ASP.NET Core Web Application  Select File-&gt;New-&gt;Project-&gt;ASP.NET Core Web Application   Step2: Choose project and solution name  Type project and solution name as “MarkdownToHTMLv02”   Step 3: Select project template     Select project template as Web Application (Model-View-Controller)   Click create button   Step 4: Install Nuget package “Westwind.AspNetCore.Markdown”  Run the following command in package manager console  PM&gt; Install-Package Westwind.AspNetCore.Markdown   Step 5: Register TagHelper   Add the following TagHelper in Views-&gt;_ViewImports.cshtml  @addTagHelper *, Westwind.AspNetCore.Markdown   Step 6: Apply markdown tag  Now apply markdown tag in Views-&gt;Home-&gt;Index.cshtml   &lt;h3&gt;Markdown TagHelper Block&lt;/h3&gt;  &lt;markdown normalize-whitespace=\"true\"&gt;     ## This is a markdown title     * Item 1     * Item 2     The current Time is:     **@DateTime.Now.ToString(\"HH:mm:ss\")**  &lt;/markdown&gt;   Step 7: Build and run the application   Now the application is ready to run. Build and run the application and watch the html output which you is writtern in the markdown tag.   Source Code   ","categories": ["dotnet"],
        "tags": ["markdown"],
        "url": "/embed-markdown-into-a-razor-view-using-asp.net-core.html/",
        "teaser":null},{
        "title": "Implementation of swagger in a asp.net core web api using in memory database",
        "excerpt":"  Here, an application name School Management System is developed using asp.net core web api and in memory database. Swagger is implemented in this application.   Tools and Technology used     Visual studio 2019   Visual C#   ASP.NET Core Web Api   Entity Framework Core   In memory database   Step 1: Create an asp.net core web api project      Type the project name as “SMS” aks School Management System.   Select API Template   Select “Configure for HTTPS”   Step 2: Install in memory database provider for entity framework core     Install nuget package Microsoft.EntityFrameworkCore.InMemory in the project   Step 3: Create model classes     Create two model classes name Student and Teacher as follows       public class Student     {         public int Id { get; set; }         public string Class { get; set; }         public string RollNo { get; set; }         public string FullName { get; set; }         public string FathersName { get; set; }         public string MothersName { get; set; }     }        public class Teacher     {         public int Id { get; set; }         public string TeacherId { get; set; }         public string FullName { get; set; }         public string FathersName { get; set; }         public string MothersName { get; set; }     }   Step 4: Add dbcontext class     Add a db context class as follows       public class SMSContext : DbContext   {       public SMSContext(DbContextOptions&lt;SMSContext&gt; options)           : base(options)       {       }        public DbSet&lt;Student&gt; Users { get; set; }        public DbSet&lt;Teacher&gt; Posts { get; set; }   }           Configure in memory database in the ConfigureService method of Startup class as follows.       public void ConfigureServices(IServiceCollection services)     {         services.AddDbContext&lt;SMSContext&gt;(opt =&gt; opt.UseInMemoryDatabase(\"SMSContext\"));     }  Step 5: Add Api Controller     Add two api controller StudentController and TeacherController as follows       [Route(\"api/[controller]\")]   [ApiController]   public class StudentsController : ControllerBase   {       private readonly SMSContext _context;        public StudentsController(SMSContext context)       {           _context = context;       }        // GET: api/Students       [HttpGet]       public async Task&lt;ActionResult&lt;IEnumerable&lt;Student&gt;&gt;&gt; GetUsers()       {           return await _context.Users.ToListAsync();       }        // GET: api/Students/5       [HttpGet(\"{id}\")]       public async Task&lt;ActionResult&lt;Student&gt;&gt; GetStudent(int id)       {           var student = await _context.Users.FindAsync(id);            if (student == null)           {               return NotFound();           }            return student;       }        // PUT: api/Students/5       // To protect from overposting attacks, enable the specific properties you want to bind to, for       // more details, see https://go.microsoft.com/fwlink/?linkid=2123754.       [HttpPut(\"{id}\")]       public async Task&lt;IActionResult&gt; PutStudent(int id, Student student)       {           if (id != student.Id)           {               return BadRequest();           }            _context.Entry(student).State = EntityState.Modified;            try           {               await _context.SaveChangesAsync();           }           catch (DbUpdateConcurrencyException)           {               if (!StudentExists(id))               {                   return NotFound();               }               else               {                   throw;               }           }            return NoContent();       }        // POST: api/Students       // To protect from overposting attacks, enable the specific properties you want to bind to, for       // more details, see https://go.microsoft.com/fwlink/?linkid=2123754.       [HttpPost]       public async Task&lt;ActionResult&lt;Student&gt;&gt; PostStudent(Student student)       {           _context.Users.Add(student);           await _context.SaveChangesAsync();            return CreatedAtAction(\"GetStudent\", new { id = student.Id }, student);       }        // DELETE: api/Students/5       [HttpDelete(\"{id}\")]       public async Task&lt;ActionResult&lt;Student&gt;&gt; DeleteStudent(int id)       {           var student = await _context.Users.FindAsync(id);           if (student == null)           {               return NotFound();           }            _context.Users.Remove(student);           await _context.SaveChangesAsync();            return student;       }        private bool StudentExists(int id)       {           return _context.Users.Any(e =&gt; e.Id == id);       }   }            [Route(\"api/[controller]\")]   [ApiController]   public class TeachersController : ControllerBase   {       private readonly SMSContext _context;        public TeachersController(SMSContext context)       {           _context = context;       }        // GET: api/Teachers       [HttpGet]       public async Task&lt;ActionResult&lt;IEnumerable&lt;Teacher&gt;&gt;&gt; GetPosts()       {           return await _context.Posts.ToListAsync();       }        // GET: api/Teachers/5       [HttpGet(\"{id}\")]       public async Task&lt;ActionResult&lt;Teacher&gt;&gt; GetTeacher(int id)       {           var teacher = await _context.Posts.FindAsync(id);            if (teacher == null)           {               return NotFound();           }            return teacher;       }        // PUT: api/Teachers/5       // To protect from overposting attacks, enable the specific properties you want to bind to, for       // more details, see https://go.microsoft.com/fwlink/?linkid=2123754.       [HttpPut(\"{id}\")]       public async Task&lt;IActionResult&gt; PutTeacher(int id, Teacher teacher)       {           if (id != teacher.Id)           {               return BadRequest();           }            _context.Entry(teacher).State = EntityState.Modified;            try           {               await _context.SaveChangesAsync();           }           catch (DbUpdateConcurrencyException)           {               if (!TeacherExists(id))               {                   return NotFound();               }               else               {                   throw;               }           }            return NoContent();       }        // POST: api/Teachers       // To protect from overposting attacks, enable the specific properties you want to bind to, for       // more details, see https://go.microsoft.com/fwlink/?linkid=2123754.       [HttpPost]       public async Task&lt;ActionResult&lt;Teacher&gt;&gt; PostTeacher(Teacher teacher)       {           _context.Posts.Add(teacher);           await _context.SaveChangesAsync();            return CreatedAtAction(\"GetTeacher\", new { id = teacher.Id }, teacher);       }        // DELETE: api/Teachers/5       [HttpDelete(\"{id}\")]       public async Task&lt;ActionResult&lt;Teacher&gt;&gt; DeleteTeacher(int id)       {           var teacher = await _context.Posts.FindAsync(id);           if (teacher == null)           {               return NotFound();           }            _context.Posts.Remove(teacher);           await _context.SaveChangesAsync();            return teacher;       }        private bool TeacherExists(int id)       {           return _context.Posts.Any(e =&gt; e.Id == id);       }   }           Step 6: Install Swagger     Install nuget package Swashbuckle.AspNetCore   Step 6: Add and configure Swagger middleware     Add the Swagger generator to the services collection in the ConfigureServices method of startup class as follows.       // This method gets called by the runtime. Use this method to add services to the container.   public void ConfigureServices(IServiceCollection services)        services.AddControllers();        // Register the Swagger generator, defining 1 or more Swagger documents       services.AddSwaggerGen();   }           In the Startup.Configure method, enable the middleware for serving the generated JSON document and the Swagger UI:   public void Configure(IApplicationBuilder app) {     // Enable middleware to serve generated Swagger as a JSON endpoint.     app.UseSwagger();      // Enable middleware to serve swagger-ui (HTML, JS, CSS, etc.),     // specifying the Swagger JSON endpoint.     app.UseSwaggerUI(c =&gt;     {         c.SwaggerEndpoint(\"/swagger/v1/swagger.json\", \"My API V1\");     });      app.UseRouting();     app.UseEndpoints(endpoints =&gt;     {         endpoints.MapControllers();     }); }    Step 4: Run the application and Check     Run the application   Browse https://&lt;localhost&gt;:&lt;port&gt;/swagger/index.html   Download source code  ","categories": ["Dot Net Core","C#","ASP.NET"],
        "tags": ["c-sharp","asp_net","article"],
        "url": "/implement-swagger-in-asp.net-core-web-api-using-in-memory-db.html/",
        "teaser":null},{
        "title": "How to measure database size in MS SQL Server",
        "excerpt":"Using system view “sys.databases” and sys.master_files  Run the following script in master database.   SELECT      sys.databases.name,               CONVERT(VARCHAR,SUM(size)*8/1024)+' MB' AS [Size]   FROM        sys.databases    JOIN        sys.master_files   ON          sys.databases.database_id=sys.master_files.database_id   GROUP BY    sys.databases.name   ORDER BY    sys.databases.name     or in GB  SELECT      sys.databases.name,               CONVERT(VARCHAR,(SUM(size)*8/1024)/1024.00)+' GB' AS [Size]   FROM        sys.databases    JOIN        sys.master_files   ON          sys.databases.database_id=sys.master_files.database_id   GROUP BY    sys.databases.name   ORDER BY    sys.databases.name     Observe the individual database size  Run the following stored procedure in each database.  exec sp_spaceused     Watch database size using SSMS  Press right button on individual database -&gt; Properties -&gt; General -&gt; Size    ","categories": ["SQL Server"],
        "tags": ["sql"],
        "url": "/how-to-measure-database-size-in-sql-server.html/",
        "teaser":null},{
        "title": "Parsing markdown file and display in a razor view using asp.net core",
        "excerpt":"  Application overview Mardown has been huge popular for documentation and blog post. How to parse a markdown file and display in a razor view as blog post will be shown in this application. Let’s have a look on the implementation of the project.   Tools and Technology used  The following tools and technologies has been used for this application     Visual Studio 2019   Visual C#   NuGet package “Westwind.AspNetCore.Markdown”   ASP.NET Core MVC   Razor view engine   Step1: Select ASP.NET Core Web Application  Select File-&gt;New-&gt;Project-&gt;ASP.NET Core Web Application   Step2: Choose project and solution name  Type project and solution name as “MarkdownBlog”   Step 3: Select project template     Select project template as Web Application (Model-View-Controller)   Click create button   Step 4: Install Nuget package “Westwind.AspNetCore.Markdown”  Run the following command in package manager console  PM&gt; Install-Package Westwind.AspNetCore.Markdown   Step 5: Set up the markdown middleware  Once the Nuget package is installed, you can configure the middleware. Modify “ConfigureServices” and “Configure” Method as follows. Here, AddMarkdown() is used to configure the page processing. UseMarkdown() is used to hook up the middleware.   Startup.cs       public class Startup     {         public Startup(IConfiguration configuration)         {             Configuration = configuration;         }          public IConfiguration Configuration { get; }          // This method gets called by the runtime. Use this method to add services to the container.         public void ConfigureServices(IServiceCollection services)         {             services.AddMarkdown(config =&gt;             {                 // optional Tag BlackList                 config.HtmlTagBlackList = \"script|iframe|object|embed|form\"; // default                  // Simplest: Use all default settings                 var folderConfig = config.AddMarkdownProcessingFolder(\"/docs/\", \"~/Pages/__MarkdownPageTemplate.cshtml\");                  // Customized Configuration: Set FolderConfiguration options                 folderConfig = config.AddMarkdownProcessingFolder(\"/posts/\", \"~/Pages/__MarkdownPageTemplate.cshtml\");                  // Optionally strip script/iframe/form/object/embed tags ++                 folderConfig.SanitizeHtml = false;  //  default                  // Optional configuration settings                 folderConfig.ProcessExtensionlessUrls = true;  // default                 folderConfig.ProcessMdFiles = true; // default                  // Optional pre-processing - with filled model                 folderConfig.PreProcess = (model, controller) =&gt;                 {                     // controller.ViewBag.Model = new MyCustomModel();                 };                  // folderConfig.BasePath = \"https://github.com/RickStrahl/Westwind.AspNetCore.Markdow/raw/master\";                  // Create your own IMarkdownParserFactory and IMarkdownParser implementation                 // to replace the default Markdown Processing                 //config.MarkdownParserFactory = new CustomMarkdownParserFactory();                                   // optional custom MarkdigPipeline (using MarkDig; for extension methods)                 config.ConfigureMarkdigPipeline = builder =&gt;                 {                     builder.UseEmphasisExtras(Markdig.Extensions.EmphasisExtras.EmphasisExtraOptions.Default)                         .UsePipeTables()                         .UseGridTables()                         .UseAutoIdentifiers(AutoIdentifierOptions.GitHub) // Headers get id=\"name\"                          .UseAutoLinks() // URLs are parsed into anchors                         .UseAbbreviations()                         .UseYamlFrontMatter()                         .UseEmojiAndSmiley(true)                         .UseListExtras()                         .UseFigures()                         .UseTaskLists()                         .UseCustomContainers()                         //.DisableHtml()   // renders HTML tags as text including script                         .UseGenericAttributes();                 };             });              services.AddControllersWithViews()                  .AddApplicationPart(typeof(MarkdownPageProcessorMiddleware).Assembly);         }          // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.         public void Configure(IApplicationBuilder app, IWebHostEnvironment env)         {             if (env.IsDevelopment())             {                 app.UseDeveloperExceptionPage();             }             else             {                 app.UseExceptionHandler(\"/Home/Error\");                 // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.                 app.UseHsts();             }             app.UseHttpsRedirection();             app.UseStaticFiles();                          //For markdown             app.UseMarkdown();              app.UseRouting();              app.UseAuthorization();              app.UseEndpoints(endpoints =&gt;             {                 endpoints.MapControllerRoute(                     name: \"default\",                     pattern: \"{controller=Home}/{action=Index}/{id?}\");             });         }     }    Step 6: Create a Markdown Container Razor Page  Create __MarkdownPageTemplate.cshtml in Pages folder as follows  @model Westwind.AspNetCore.Markdown.MarkdownModel @{     ViewBag.Title = Model.Title;     Layout = \"_Layout\"; }  &lt;div&gt;     @Model.RenderedMarkdown &lt;/div&gt;   Step 7: Now drop a markdown file in /wwwroot/  Here I have dropped MyArticle.md in /wwwroot/posts/2020/12/01/ folder. You can organize directory by yourself.   MyArticle.md  ## Batting changes not yet bearing fruit The buzzword in the Bangladesh camp before returning to international cricket after over 10  months with the ODI series against the West Indies was long-term planning keeping the 2023  ICC World Cup in mind.  The team management did try some tactical changes such as promoting young left-hander Nazmul  Hossain Shanto to number three in place of Shakib Al Hasan, who had made the position his own  during the 2019 ICC World Cup.  ![Bangladesh Test Captain](image01.jpg)     Step 8: Build and run the application   Now the application is ready to run. Build and run the application. Now type the “https://localhost:yourport/posts/2020/12/01/markdownarticle” and watch the html output which you is writtern in the markdown tag. You can browse as https://localhost:44338/posts/2020/12/01/MyArticle.md to see output as github flavour.   Source Code    ","categories": ["ASP.NET Core",".NET CORE"],
        "tags": ["dotnet"],
        "url": "/parsing-markdown-file-and-display-in-a-razor-view-page-using-asp.net-core.html/",
        "teaser":null},{
        "title": "File transfer (export) through ASP.NET core web api",
        "excerpt":"  Tools and Technology used     Visual studio 2019   ASP.NET Core Web Api   Visual C#   JQuery   Step 1: Create a blank solution name “FileExpoter”  Step 2: Add a new asp.net core project in “FileExporer” solution      Type the project name as “ExportApi”   Select API Template   Select “Configure for HTTPS”   Step 3: Add a new asp.net core MVC Project in “File Explorer” Solution      Type the project name as “ClientApp”   Select Template - Web Application (Model-View-Controller)   Step 4: Keep files in a folder     Create a folder name “files”   Keep two files.  mahedeebio.pdf and booklist.xlsx in the files folder   Step 4:  Enable CORS in ExportApi application.     Install nuget package - Microsoft.AspNetCore.Cors   Modify the ConfigureServices and Configure Method in Startup.cs file as follows.       public class Startup     {         public Startup(IConfiguration configuration)         {             Configuration = configuration;         }          public IConfiguration Configuration { get; }          // This method gets called by the runtime. Use this method to add services to the container.         public void ConfigureServices(IServiceCollection services)         {             services.AddControllers();              //Enable CORS - Cross-Origin resource sharing             services.AddCors(options =&gt;             {                 options.AddPolicy(\"CorsPolicy\",                     builder =&gt; builder.AllowAnyOrigin()                     .AllowAnyMethod()                     .AllowAnyHeader()                     );             });              ////If you want to enable any particular IP             //services.AddCors(c =&gt;             //{             //    c.AddPolicy(\"AllowOrigin\", options =&gt; options.WithOrigins(\"https://localhost:44312\"));             //});         }          // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.         public void Configure(IApplicationBuilder app, IWebHostEnvironment env)         {             if (env.IsDevelopment())             {                 app.UseDeveloperExceptionPage();             }              app.UseHttpsRedirection();              app.UseRouting();              // Enable CORS             // Must be in between app.UseRouting and app.UseEndpoints             app.UseCors(\"CorsPolicy\");               // Another of way of Allow CORS             //app.UseCors(options =&gt; options.AllowAnyOrigin());             //app.UseCors(options =&gt; options.WithOrigins(\"https://localhost:44312\"));              app.UseAuthorization();              app.UseEndpoints(endpoints =&gt;             {                 endpoints.MapControllers();             });                    }     }   Step 5: Add a controller class in ExportApi project     Create a controller - name ExportController   Select Template - “API Controller - Empty”   Update the Export Controller as follows   using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; using Microsoft.AspNetCore.Cors; using Microsoft.AspNetCore.Http; using Microsoft.AspNetCore.Mvc;  namespace ExportApi.Controllers {     [EnableCors(\"CorsPolicy\")]     [Route(\"api/[controller]\")]     [ApiController]     public class ExportController : ControllerBase     {         //Get: api/Export/GetExcel         [HttpGet]         [Route(\"GetExcel\")]         public IActionResult GetExcel()         {             try             {                 return Ok(ConverExceltoB64());             }              catch (Exception ex)             {                  throw (ex);             }         }              //Get: api/Export/GetPDF         [HttpGet]         [Route(\"GetPDF\")]         public IActionResult GetPDF()         {             try             {                 return Ok(ConvertPDFtoB64());             }              catch (Exception ex)             {                 throw (ex);             }         }          //Get: api/Export/GetDynamicExcel         [HttpGet]         [Route(\"GetDynamicExcel\")]         public IActionResult GetDynamicExcel()         {             try             {                 return Ok(BuildeExcel());             }             catch (Exception ex)             {                 throw (ex);             }         }           // Convert an excel file to Base64          private string ConverExceltoB64()         {             var docBytes = System.IO.File.ReadAllBytes(System.IO.Path.GetFullPath(@\"files\\booklist.xlsx\"));             string docBase64 = Convert.ToBase64String(docBytes);             return (docBase64);         }           // Convert a pdf file to Base64         private string ConvertPDFtoB64()         {             var docBytes = System.IO.File.ReadAllBytes(System.IO.Path.GetFullPath(@\"files\\mahedeebio.pdf\"));             string docBase64 = Convert.ToBase64String(docBytes);             return (docBase64);         }           // Create an excel on the fly and return as Base64 format         private string BuildeExcel()         {             StringBuilder table = new StringBuilder();             table.Append(\"&lt;table border=`\" + \"1px\" + \"`b&gt;\");             table.Append(\"&lt;tr&gt;\");             table.Append(\"&lt;td&gt;&lt;b&gt;&lt;font face=Arial Narrow size=3&gt;ID&lt;/font&gt;&lt;/b&gt;&lt;/td&gt;\");             table.Append(\"&lt;td&gt;&lt;b&gt;&lt;font face=Arial Narrow size=3&gt;Name&lt;/font&gt;&lt;/b&gt;&lt;/td&gt;\");             table.Append(\"&lt;td&gt;&lt;b&gt;&lt;font face=Arial Narrow size=3&gt;Designation&lt;/font&gt;&lt;/b&gt;&lt;/td&gt;\");             table.Append(\"&lt;/tr&gt;\");              foreach (var item in GetEmployeeAll())             {                 table.Append(\"&lt;tr&gt;\");                 table.Append(\"&lt;td&gt;&lt;font face=Arial Narrow size=\" + \"14px\" + \"&gt;\" + item.Id.ToString() + \"&lt;/font&gt;&lt;/td&gt;\");                 table.Append(\"&lt;td&gt;&lt;font face=Arial Narrow size=\" + \"14px\" + \"&gt;\" + item.Name.ToString() + \"&lt;/font&gt;&lt;/td&gt;\");                 table.Append(\"&lt;td&gt;&lt;font face=Arial Narrow size=\" + \"14px\" + \"&gt;\" + item.Designation.ToString() + \"&lt;/font&gt;&lt;/td&gt;\");                 table.Append(\"&lt;/tr&gt;\");             }              table.Append(\"&lt;/table&gt;\");             byte[] temp = System.Text.Encoding.UTF8.GetBytes(table.ToString());             return System.Convert.ToBase64String(temp);          }           // Return list of employee         private List&lt;Employee&gt; GetEmployeeAll()         {             List&lt;Employee&gt; employees = new List&lt;Employee&gt;             {                 new Employee(){Id = 1, Name = \"Sabrina Jahan Sara\", Designation = \"Software Engineer\"},                 new Employee(){Id = 2, Name = \"Tahiya Hasan Arisha\", Designation = \"Sr. Software Engineer\"},                 new Employee(){Id = 3, Name = \"Ishrat Jahan Nusaifa\", Designation = \"Software Architect\"},                 new Employee(){Id = 4, Name = \"Nusrat Janan\", Designation = \"Project Manager\"}             };              return employees;         }     }       // Employee model class     internal class Employee     {         public int Id { get; set; }         public string Name { get; set; }         public string Designation { get; set; }     } }    Step 6: Modify index.cshtml in ClientApp Project     Modify Views-&gt;Home-&gt;Index.cshtml as follows   @{     ViewData[\"Title\"] = \"Home Page\"; }  &lt;h4&gt;Export file using asp.net web api&lt;/h4&gt; &lt;button type=\"button\" class=\"btn btn-primary\" id=\"btnExcel\"&gt;Export Excel&lt;/button&gt; &lt;button type=\"button\" class=\"btn btn-info\" id=\"btnPDF\"&gt;Export PDF&lt;/button&gt; &lt;button type=\"button\" class=\"btn btn-success\" id=\"btnDynamicExcel\"&gt;Export Dynamic Excel&lt;/button&gt;    @* Implement Scripts section *@  @section Scripts{     &lt;script&gt;         $(document).ready(function () {             //alert('working from document ready!!');         })          //Button's events         $(\"#btnExcel\").click(function () {             //alert(\"Export button clicked\");             ExcelExportar.OnExportarClick();         });          $(\"#btnPDF\").click(function () {             //alert(\"Export for dynamic pdf clicked\");             PDFExportar.OnExportarClick();         });          $(\"#btnDynamicExcel\").click(function () {             //alert(\"Export button clicked\");             DyamicExcelExportar.OnExportarClick();         });             //Excel exporter - start         var ExcelExportar = {             OnExportarClick: function () {                 //alert('click on exporter!');                 $.ajax({                     url: \"https://localhost:44386/api/export/getexcel\",                     type: 'GET',                     dataType: 'text',                     success: ExcelExportar.DownloadExcel,                      failure: function (data) {                         alert('failur: ' + data.responseText);                     }, //End of AJAX failure function                     error: function (request) {                         alert('error: ' + request.responseText);                     } //End of AJAX error function                 });             },              DownloadExcel: function (data) {                 //alert('download excel');                 var createA = document.createElement('a');                 createA.setAttribute('id', 'linkDownload');                 createA.setAttribute('href', 'data:application/vnd.ms-excel;base64,' + data);                 document.body.appendChild(createA);                  createA.download = 'download_latest.xls';                 var selectorHref = document.getElementById('linkDownload');                 selectorHref.click();                 selectorHref.remove();             }         };          //Excel exporter - End           //PDF exporter - start          var PDFExportar = {             OnExportarClick: function () {                 //alert('click on pdf exporter!');                 $.ajax({                     url: \"https://localhost:44386/api/export/getpdf\",                     type: 'GET',                     dataType: 'text',                     success: PDFExportar.DownloadPDF,                     failure: function (data) {                         alert('failur: ' + data.responseText);                     }, //End of AJAX failure function                     error: function (request) {                         alert('error: ' + request.responseText);                     } //End of AJAX error function                 });             },              DownloadPDF: function (data) {                  // Display in a same page with a download link                  // Embed the PDF into the HTML page and show it to the user                 var obj = document.createElement('object');                 obj.style.width = '100%';                 obj.style.height = '842pt';                 obj.type = 'application/pdf';                 obj.data = 'data:application/pdf;base64,' + data;                 document.body.appendChild(obj);                  // Insert a link that allows the user to download the PDF file                 var link = document.createElement('a');                 link.innerHTML = 'Download PDF file';                 link.download = 'file.pdf';                 link.href = 'data:application/octet-stream;base64,' + data;                 document.body.appendChild(link);                   // Display in a new window                 //var objbuilder = '';                 //objbuilder += ('&lt;object width=\"100%\" height=\"100%\"      data=\"data:application/pdf;base64,');                 //objbuilder += (data);                 //objbuilder += ('\" type=\"application/pdf\" class=\"internal\"&gt;');                 //objbuilder += ('&lt;embed src=\"data:application/pdf;base64,');                 //objbuilder += (data);                 //objbuilder += ('\" type=\"application/pdf\" /&gt;');                 //objbuilder += ('&lt;/object&gt;');                  //var win = window.open(\"\", \"_blank\", \"titlebar=yes\");                 //win.document.title = \"My Title\";                 //win.document.write('&lt;html&gt;&lt;body&gt;');                 //win.document.write(objbuilder);                 //win.document.write('&lt;/body&gt;&lt;/html&gt;');                 //layer = jQuery(win.document);               }         };          //PDF exporter - end          var DyamicExcelExportar = {             OnExportarClick: function () {                 $.ajax({                     url: \"https://localhost:44386/api/export/GetDynamicExcel\",                     type: 'GET',                     dataType: 'text',                     success: DyamicExcelExportar.DownloadExcel,                     failure: function (data) {                         alert('failur: ' + data.responseText);                     }, //End of AJAX failure function                     error: function (request) {                         alert('error: ' + request.responseText);                     } //End of AJAX error function                 });             },              DownloadExcel: function (data) {                 //alert('download excel');                 var createA = document.createElement('a');                 createA.setAttribute('id', 'linkDownload');                 createA.setAttribute('href', 'data:application/vnd.ms-excel;base64,' + data);                 document.body.appendChild(createA);                  createA.download = 'download_latest.xls';                 var selectorHref = document.getElementById('linkDownload');                 selectorHref.click();                 selectorHref.remove();             }         };      &lt;/script&gt; }   Step 7: Run Multiple projects     Run both ExportApi and ClientApp project   To run both multiple project right click on solution-&gt;Properties-&gt;Startup Project-&gt;Multiple Start up project, Select both project as start.   Click the button on button of index page and you will see the output.   Download source code  ","categories": ["Dot Net Core","C#","ASP.NET"],
        "tags": ["c-sharp","asp_net","article"],
        "url": "/export-file-using-aspnet-core-web-api.html/",
        "teaser":null}]
